name: Release

on:
  push:
    tags:
      - '*.*.*' # Run workflow on version tags, e.g. v1.0.0.

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup packages
        id: setup-packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip zstd jq git

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '16.x'

      - name: Setup Go environment
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/package-lock.json') }}

      - name: Cache golang
        id: cache-golang
        uses: actions/cache@v2
        with:
          path: /go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.golang-version }}-golang-${{ hashFiles('**/go.sum') }}

      - name: Install nodejs dependencies
        run: npm install --production=false
        if: |
          steps.cache-node-modules.outputs.cache-hit != 'true'

      - name: Install golang dependencies
        run: go mod download -x
        if: |
          steps.cache-golang.outputs.cache-hit != 'true'

      - name: Build frontend
        run: npm run build:prod

      - name: Test frontend
        run: npm run test

      - name: Build backend
        env:
          CGO_ENABLED: "0"
        run: |
          go test -timeout 1m -failfast -tags=integration -v ./pkg/ && \
          GOOS=linux GOARCH=amd64 go build -o ./dist/altinity-clickhouse-plugin_linux_amd64 ./pkg/ && \
          GOOS=linux GOARCH=arm64 go build -o ./dist/altinity-clickhouse-plugin_linux_arm64 ./pkg/ && \
          GOOS=windows GOARCH=amd64 go build -o ./dist/altinity-clickhouse-plugin_windows_amd64.exe ./pkg/ && \
          GOOS=darwin GOARCH=amd64 go build -o ./dist/altinity-clickhouse-plugin_darwin_amd64 ./pkg/ && \
          GOOS=darwin GOARCH=arm64 go build -o ./dist/altinity-clickhouse-plugin_darwin_arm64 ./pkg/ && \
          chmod +x ./dist/altinity-clickhouse-plugin*

      - name: Sign plugin
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }} # Requires a Grafana API key from Grafana.com.
        run: node ./node_modules/@grafana/toolkit/bin/grafana-toolkit.js plugin:sign

      - name: Get plugin metadata
        id: metadata
        run: |
          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5

          echo "::set-output name=plugin-id::${GRAFANA_PLUGIN_ID}"
          echo "::set-output name=plugin-version::${GRAFANA_PLUGIN_VERSION}"
          echo "::set-output name=plugin-type::${GRAFANA_PLUGIN_TYPE}"
          echo "::set-output name=archive::${GRAFANA_PLUGIN_ARTIFACT}"
          echo "::set-output name=archive-checksum::${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}"

          echo ::set-output name=github-tag::${GITHUB_REF#refs/*/}

      - name: Read changelog
        id: changelog
        run: |
          awk '/^# / {s++} s == 1 {print}' CHANGELOG.md > /tmp/release_notes.md
          echo "::set-output name=path::/tmp/release_notes.md"

      - name: Package plugin
        id: package-plugin
        run: |
          mkdir -p /tmp/${{ steps.metadata.outputs.plugin-id }}
          cp -rfv dist/* /tmp/${{ steps.metadata.outputs.plugin-id }}/
          pushd /tmp/
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
          md5sum ${{ steps.metadata.outputs.archive }} > /tmp/${{ steps.metadata.outputs.archive-checksum }}
          echo "::set-output name=checksum::$(cat /tmp/${{ steps.metadata.outputs.archive-checksum }} | cut -d' ' -f1)"
          popd

      - name: Lint plugin
        run: |
          git clone https://github.com/grafana/plugin-validator /tmp/plugin-validator
          pushd /tmp/plugin-validator/pkg/cmd/plugincheck2
          go install
          popd
          plugincheck2 -config=/tmp/plugin-validator/config/strict.yaml -strict /tmp/${{ steps.metadata.outputs.archive }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ${{ steps.changelog.outputs.path }}
          draft: true

      - name: Add plugin to release
        id: upload-plugin-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/${{ steps.metadata.outputs.archive }}
          asset_name: ${{ steps.metadata.outputs.archive }}
          asset_content_type: application/zip

      - name: Add checksum to release
        id: upload-checksum-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/${{ steps.metadata.outputs.archive-checksum }}
          asset_name: ${{ steps.metadata.outputs.archive-checksum }}
          asset_content_type: text/plain

      - name: Publish to Grafana.com
        run: |
          echo Publish your plugin to grafana.com/plugins by opening a PR to https://github.com/grafana/grafana-plugin-repository with the following entry:
          echo
          echo '{ "id": "${{ steps.metadata.outputs.plugin-id }}", "type": "${{ steps.metadata.outputs.plugin-type }}", "url": "https://github.com/${{ github.repository }}", "versions": [ { "version": "${{ steps.metadata.outputs.plugin-version }}", "commit": "${{ github.sha }}", "url": "https://github.com/${{ github.repository }}", "download": { "any": { "url": "${{ steps.upload-plugin-asset.outputs.browser_download_url }}", "md5": "${{ steps.package-plugin.outputs.checksum }}" } } } ] }' | jq .
