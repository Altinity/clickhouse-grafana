	.text
	.intel_syntax noprefix
	.file	"scalar_comparison.cc"
	.globl	comparison_equal_arr_arr_avx2   # -- Begin function comparison_equal_arr_arr_avx2
	.p2align	4, 0x90
	.type	comparison_equal_arr_arr_avx2,@function
comparison_equal_arr_arr_avx2:          # @comparison_equal_arr_arr_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -8
	sub	rsp, 72
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB0_29
# %bb.1:
	cmp	edi, 3
	jle	.LBB0_2
# %bb.15:
	cmp	edi, 4
	je	.LBB0_68
# %bb.16:
	cmp	edi, 5
	je	.LBB0_79
# %bb.17:
	cmp	edi, 6
	jne	.LBB0_123
# %bb.18:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_22
# %bb.19:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_20:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_20
# %bb.21:
	add	r14, 1
.LBB0_22:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_26
# %bb.23:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_24:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	sete	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	sete	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	sete	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	sete	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	sete	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	sete	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	sete	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	sete	r12b
	cmp	eax, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	sete	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_24
# %bb.25:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_26:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.27:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_28:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_28
	jmp	.LBB0_123
.LBB0_29:
	cmp	edi, 8
	jle	.LBB0_30
# %bb.43:
	cmp	edi, 9
	je	.LBB0_101
# %bb.44:
	cmp	edi, 11
	je	.LBB0_112
# %bb.45:
	cmp	edi, 12
	jne	.LBB0_123
# %bb.46:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_50
# %bb.47:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_48:                               # =>This Inner Loop Header: Depth=1
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	add	rsi, 8
	vucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_48
# %bb.49:
	add	r14, 1
.LBB0_50:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_54
# %bb.51:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_52:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	vmovsd	xmm1, qword ptr [rsi + 8]       # xmm1 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomisd	xmm1, qword ptr [rdx + 8]
	sete	al
	vmovsd	xmm0, qword ptr [rsi + 16]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 16]
	vmovsd	xmm0, qword ptr [rsi + 24]      # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 32]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 32]
	vmovsd	xmm0, qword ptr [rsi + 40]      # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 48]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 48]
	vmovsd	xmm0, qword ptr [rsi + 56]      # xmm0 = mem[0],zero
	sete	r13b
	vucomisd	xmm0, qword ptr [rdx + 56]
	sete	r15b
	vmovsd	xmm0, qword ptr [rsi + 64]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 64]
	vmovsd	xmm0, qword ptr [rsi + 72]      # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 72]
	sete	cl
	vmovsd	xmm0, qword ptr [rsi + 80]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 80]
	vmovsd	xmm0, qword ptr [rsi + 88]      # xmm0 = mem[0],zero
	sete	r9b
	vucomisd	xmm0, qword ptr [rdx + 88]
	sete	r11b
	vmovsd	xmm0, qword ptr [rsi + 96]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 96]
	vmovsd	xmm0, qword ptr [rsi + 104]     # xmm0 = mem[0],zero
	sete	r10b
	vucomisd	xmm0, qword ptr [rdx + 104]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 112]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 112]
	vmovsd	xmm0, qword ptr [rsi + 120]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 120]
	sete	bl
	vmovsd	xmm0, qword ptr [rsi + 128]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 128]
	vmovsd	xmm0, qword ptr [rsi + 136]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 136]
	vmovsd	xmm0, qword ptr [rsi + 144]     # xmm0 = mem[0],zero
	sete	r14b
	vucomisd	xmm0, qword ptr [rdx + 144]
	vmovsd	xmm0, qword ptr [rsi + 152]     # xmm0 = mem[0],zero
	sete	r12b
	vucomisd	xmm0, qword ptr [rdx + 152]
	vmovsd	xmm0, qword ptr [rsi + 160]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 160]
	vmovsd	xmm0, qword ptr [rsi + 168]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 168]
	vmovsd	xmm0, qword ptr [rsi + 176]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 176]
	vmovsd	xmm0, qword ptr [rsi + 184]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 184]
	vmovsd	xmm0, qword ptr [rsi + 192]     # xmm0 = mem[0],zero
	sete	r8b
	vucomisd	xmm0, qword ptr [rdx + 192]
	vmovsd	xmm0, qword ptr [rsi + 200]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 200]
	vmovsd	xmm0, qword ptr [rsi + 208]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 208]
	vmovsd	xmm0, qword ptr [rsi + 216]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 216]
	vmovsd	xmm0, qword ptr [rsi + 224]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 224]
	vmovsd	xmm0, qword ptr [rsi + 232]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 232]
	vmovsd	xmm0, qword ptr [rsi + 240]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 240]
	vmovsd	xmm0, qword ptr [rsi + 248]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	add	rsi, 256
	vucomisd	xmm0, qword ptr [rdx + 248]
	sete	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB0_52
# %bb.53:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB0_54:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.55:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_56:                               # =>This Inner Loop Header: Depth=1
	vmovsd	xmm0, qword ptr [rsi + 8*rcx]   # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_56
	jmp	.LBB0_123
.LBB0_2:
	cmp	edi, 2
	je	.LBB0_57
# %bb.3:
	cmp	edi, 3
	jne	.LBB0_123
# %bb.4:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_6
# %bb.7:
	add	r14, 1
.LBB0_8:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_12
# %bb.9:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_10:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	sete	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	sete	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	sete	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	sete	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	sete	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	sete	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	sete	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	sete	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	sete	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	sete	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	sete	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB0_10
# %bb.11:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB0_12:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.13:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_14:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_14
	jmp	.LBB0_123
.LBB0_30:
	cmp	edi, 7
	je	.LBB0_90
# %bb.31:
	cmp	edi, 8
	jne	.LBB0_123
# %bb.32:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_36
# %bb.33:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_34:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_34
# %bb.35:
	add	r14, 1
.LBB0_36:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_40
# %bb.37:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_38:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	sete	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	sete	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	sete	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	sete	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	sete	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	sete	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	sete	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	sete	r12b
	cmp	rax, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	sete	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_38
# %bb.39:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_40:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.41:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_42:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_42
	jmp	.LBB0_123
.LBB0_68:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_72
# %bb.69:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_70:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_70
# %bb.71:
	add	r14, 1
.LBB0_72:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_76
# %bb.73:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_74:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	sete	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	sete	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	sete	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	sete	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	sete	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	sete	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	sete	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	sete	r12b
	cmp	ax, word ptr [rdx + 40]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	sete	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_74
# %bb.75:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_76:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.77:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_78:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_78
	jmp	.LBB0_123
.LBB0_79:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_81:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_81
# %bb.82:
	add	r14, 1
.LBB0_83:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_87
# %bb.84:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_85:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	sete	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	sete	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	sete	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	sete	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	sete	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	sete	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	sete	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	sete	r12b
	cmp	ax, word ptr [rdx + 40]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	sete	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_85
# %bb.86:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_87:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.88:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_89:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_89
	jmp	.LBB0_123
.LBB0_101:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_105
# %bb.102:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_103:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_103
# %bb.104:
	add	r14, 1
.LBB0_105:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_109
# %bb.106:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_107:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	sete	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	sete	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	sete	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	sete	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	sete	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	sete	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	sete	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	sete	r12b
	cmp	rax, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	sete	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_107
# %bb.108:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_109:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.110:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_111:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_111
	jmp	.LBB0_123
.LBB0_112:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_116
# %bb.113:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_114:                              # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	add	rsi, 4
	vucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_114
# %bb.115:
	add	r14, 1
.LBB0_116:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_120
# %bb.117:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_118:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	vmovss	xmm1, dword ptr [rsi + 4]       # xmm1 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomiss	xmm1, dword ptr [rdx + 4]
	sete	al
	vmovss	xmm0, dword ptr [rsi + 8]       # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 8]
	vmovss	xmm0, dword ptr [rsi + 12]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 16]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 16]
	vmovss	xmm0, dword ptr [rsi + 20]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 24]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 24]
	vmovss	xmm0, dword ptr [rsi + 28]      # xmm0 = mem[0],zero,zero,zero
	sete	r13b
	vucomiss	xmm0, dword ptr [rdx + 28]
	sete	r15b
	vmovss	xmm0, dword ptr [rsi + 32]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 32]
	vmovss	xmm0, dword ptr [rsi + 36]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 36]
	sete	cl
	vmovss	xmm0, dword ptr [rsi + 40]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 40]
	vmovss	xmm0, dword ptr [rsi + 44]      # xmm0 = mem[0],zero,zero,zero
	sete	r9b
	vucomiss	xmm0, dword ptr [rdx + 44]
	sete	r11b
	vmovss	xmm0, dword ptr [rsi + 48]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 48]
	vmovss	xmm0, dword ptr [rsi + 52]      # xmm0 = mem[0],zero,zero,zero
	sete	r10b
	vucomiss	xmm0, dword ptr [rdx + 52]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 56]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 56]
	vmovss	xmm0, dword ptr [rsi + 60]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 60]
	sete	bl
	vmovss	xmm0, dword ptr [rsi + 64]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 64]
	vmovss	xmm0, dword ptr [rsi + 68]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 68]
	vmovss	xmm0, dword ptr [rsi + 72]      # xmm0 = mem[0],zero,zero,zero
	sete	r14b
	vucomiss	xmm0, dword ptr [rdx + 72]
	vmovss	xmm0, dword ptr [rsi + 76]      # xmm0 = mem[0],zero,zero,zero
	sete	r12b
	vucomiss	xmm0, dword ptr [rdx + 76]
	vmovss	xmm0, dword ptr [rsi + 80]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 80]
	vmovss	xmm0, dword ptr [rsi + 84]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 84]
	vmovss	xmm0, dword ptr [rsi + 88]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 88]
	vmovss	xmm0, dword ptr [rsi + 92]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 92]
	vmovss	xmm0, dword ptr [rsi + 96]      # xmm0 = mem[0],zero,zero,zero
	sete	r8b
	vucomiss	xmm0, dword ptr [rdx + 96]
	vmovss	xmm0, dword ptr [rsi + 100]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 100]
	vmovss	xmm0, dword ptr [rsi + 104]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 104]
	vmovss	xmm0, dword ptr [rsi + 108]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 108]
	vmovss	xmm0, dword ptr [rsi + 112]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 112]
	vmovss	xmm0, dword ptr [rsi + 116]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 116]
	vmovss	xmm0, dword ptr [rsi + 120]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 120]
	vmovss	xmm0, dword ptr [rsi + 124]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	sub	rsi, -128
	vucomiss	xmm0, dword ptr [rdx + 124]
	sete	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB0_118
# %bb.119:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB0_120:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.121:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_122:                              # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rsi + 4*rcx]   # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_122
	jmp	.LBB0_123
.LBB0_57:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_59:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_59
# %bb.60:
	add	r14, 1
.LBB0_61:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_65
# %bb.62:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_63:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	sete	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	sete	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	sete	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	sete	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	sete	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	sete	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	sete	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	sete	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	sete	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	sete	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	sete	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB0_63
# %bb.64:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB0_65:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.66:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_67:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_67
	jmp	.LBB0_123
.LBB0_90:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_94
# %bb.91:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_92:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_92
# %bb.93:
	add	r14, 1
.LBB0_94:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_98
# %bb.95:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_96:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	sete	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	sete	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	sete	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	sete	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	sete	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	sete	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	sete	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	sete	r12b
	cmp	eax, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	sete	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_96
# %bb.97:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_98:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.99:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_100:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_100
.LBB0_123:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.Lfunc_end0:
	.size	comparison_equal_arr_arr_avx2, .Lfunc_end0-comparison_equal_arr_arr_avx2
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function comparison_equal_arr_scalar_avx2
.LCPI1_0:
	.zero	32,1
.LCPI1_1:
	.zero	32,4
.LCPI1_2:
	.zero	32,8
.LCPI1_3:
	.zero	32,16
.LCPI1_4:
	.zero	32,32
.LCPI1_5:
	.zero	32,64
.LCPI1_6:
	.zero	32,128
	.text
	.globl	comparison_equal_arr_scalar_avx2
	.p2align	4, 0x90
	.type	comparison_equal_arr_scalar_avx2,@function
comparison_equal_arr_scalar_avx2:       # @comparison_equal_arr_scalar_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -32
	sub	rsp, 1280
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r11, rcx
	cmp	edi, 6
	jg	.LBB1_13
# %bb.1:
	cmp	edi, 3
	jle	.LBB1_25
# %bb.2:
	cmp	edi, 4
	je	.LBB1_49
# %bb.3:
	cmp	edi, 5
	je	.LBB1_57
# %bb.4:
	cmp	edi, 6
	jne	.LBB1_164
# %bb.5:
	mov	r13d, dword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_7:                                # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_7
# %bb.8:
	add	r11, 1
.LBB1_9:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_101
# %bb.10:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_11:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	sete	dil
	cmp	dword ptr [rsi + 8], r13d
	sete	r14b
	cmp	dword ptr [rsi + 12], r13d
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	sete	al
	cmp	dword ptr [rsi + 28], r13d
	sete	bl
	cmp	dword ptr [rsi + 32], r13d
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	sete	dl
	cmp	dword ptr [rsi + 40], r13d
	sete	r9b
	cmp	dword ptr [rsi + 44], r13d
	sete	r10b
	cmp	dword ptr [rsi + 48], r13d
	sete	r11b
	cmp	dword ptr [rsi + 52], r13d
	sete	r12b
	cmp	dword ptr [rsi + 56], r13d
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	sete	cl
	cmp	dword ptr [rsi + 64], r13d
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	sete	r15b
	cmp	dword ptr [rsi + 96], r13d
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 128
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB1_11
# %bb.12:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB1_102
	jmp	.LBB1_164
.LBB1_13:
	cmp	edi, 8
	jle	.LBB1_39
# %bb.14:
	cmp	edi, 9
	je	.LBB1_65
# %bb.15:
	cmp	edi, 11
	je	.LBB1_73
# %bb.16:
	cmp	edi, 12
	jne	.LBB1_164
# %bb.17:
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB1_21
# %bb.18:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_19:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_19
# %bb.20:
	add	r11, 1
.LBB1_21:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_105
# %bb.22:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_23:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 8]
	sete	r9b
	vucomisd	xmm0, qword ptr [rsi + 16]
	sete	r14b
	vucomisd	xmm0, qword ptr [rsi + 24]
	sete	r13b
	vucomisd	xmm0, qword ptr [rsi + 32]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 40]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 48]
	sete	al
	vucomisd	xmm0, qword ptr [rsi + 56]
	sete	bl
	vucomisd	xmm0, qword ptr [rsi + 64]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 72]
	sete	dl
	vucomisd	xmm0, qword ptr [rsi + 80]
	sete	dil
	vucomisd	xmm0, qword ptr [rsi + 88]
	sete	r10b
	vucomisd	xmm0, qword ptr [rsi + 96]
	sete	r11b
	vucomisd	xmm0, qword ptr [rsi + 104]
	sete	r12b
	vucomisd	xmm0, qword ptr [rsi + 112]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 120]
	sete	cl
	vucomisd	xmm0, qword ptr [rsi + 128]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 136]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 144]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 152]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 160]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 168]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 176]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 184]
	sete	r15b
	vucomisd	xmm0, qword ptr [rsi + 192]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 200]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 208]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 216]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 224]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 232]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 240]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 248]
	sete	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 256
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB1_23
# %bb.24:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB1_106
	jmp	.LBB1_164
.LBB1_25:
	cmp	edi, 2
	je	.LBB1_81
# %bb.26:
	cmp	edi, 3
	jne	.LBB1_164
# %bb.27:
	mov	r14b, byte ptr [rdx]
	lea	r13, [r10 + 31]
	test	r10, r10
	mov	r15, r10
	cmovns	r13, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_31
# %bb.28:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_29:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r14b
	lea	rsi, [rsi + 1]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_29
# %bb.30:
	add	r11, 1
.LBB1_31:
	sar	r13, 5
	cmp	r15, 32
	jl	.LBB1_108
# %bb.32:
	cmp	r13, 32
	mov	dword ptr [rsp + 28], r14d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r15      # 8-byte Spill
	mov	qword ptr [rsp + 392], r13      # 8-byte Spill
	jb	.LBB1_35
# %bb.33:
	mov	rax, r13
	shl	rax, 5
	add	rax, rsi
	cmp	r11, rax
	jae	.LBB1_165
# %bb.34:
	lea	rax, [r11 + 4*r13]
	cmp	rsi, rax
	jae	.LBB1_165
.LBB1_35:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rsi
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
.LBB1_36:
	sub	r13, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r13      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_37:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	byte ptr [r12], r14b
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	byte ptr [r12 + 1], r14b
	sete	r8b
	cmp	byte ptr [r12 + 2], r14b
	sete	r15b
	cmp	byte ptr [r12 + 3], r14b
	sete	r13b
	cmp	byte ptr [r12 + 4], r14b
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 5], r14b
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 6], r14b
	sete	al
	cmp	byte ptr [r12 + 7], r14b
	sete	r11b
	cmp	byte ptr [r12 + 8], r14b
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 9], r14b
	sete	dl
	cmp	byte ptr [r12 + 10], r14b
	sete	sil
	cmp	byte ptr [r12 + 11], r14b
	sete	dil
	cmp	byte ptr [r12 + 12], r14b
	sete	r10b
	cmp	byte ptr [r12 + 13], r14b
	sete	r12b
	cmp	byte ptr [rcx + 14], r14b
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	sete	r9b
	cmp	byte ptr [rcx + 16], r14b
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 18], r14b
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	sete	r14b
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 24], bl
	sete	byte ptr [rsp + 272]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 25], bl
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 26], bl
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 27], bl
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 28], bl
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 29], bl
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 30], bl
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 31], bl
	sete	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r15b, 2
	or	r15b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r15b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 288]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 376]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r14b, dl
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	byte ptr [rsi + 3], bl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 376], rsi      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB1_37
# %bb.38:
	mov	r15, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r13, qword ptr [rsp + 392]      # 8-byte Reload
	jmp	.LBB1_109
.LBB1_39:
	cmp	edi, 7
	je	.LBB1_93
# %bb.40:
	cmp	edi, 8
	jne	.LBB1_164
# %bb.41:
	mov	r13, qword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_45
# %bb.42:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_43:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_43
# %bb.44:
	add	r11, 1
.LBB1_45:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_112
# %bb.46:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_47:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	sete	dil
	cmp	qword ptr [rsi + 16], r13
	sete	r14b
	cmp	qword ptr [rsi + 24], r13
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	sete	al
	cmp	qword ptr [rsi + 56], r13
	sete	bl
	cmp	qword ptr [rsi + 64], r13
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	sete	dl
	cmp	qword ptr [rsi + 80], r13
	sete	r9b
	cmp	qword ptr [rsi + 88], r13
	sete	r10b
	cmp	qword ptr [rsi + 96], r13
	sete	r11b
	cmp	qword ptr [rsi + 104], r13
	sete	r12b
	cmp	qword ptr [rsi + 112], r13
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	sete	cl
	cmp	qword ptr [rsi + 128], r13
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	sete	r15b
	cmp	qword ptr [rsi + 192], r13
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r11], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r11 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], r8b
	add	rsi, 256
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB1_47
# %bb.48:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB1_113
	jmp	.LBB1_164
.LBB1_49:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_53
# %bb.50:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_51:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_51
# %bb.52:
	add	r11, 1
.LBB1_53:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_116
# %bb.54:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_55:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	sete	al
	cmp	word ptr [rsi + 2], r13w
	sete	dil
	cmp	word ptr [rsi + 4], r13w
	sete	r14b
	cmp	word ptr [rsi + 6], r13w
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 14], r13w
	sete	bl
	cmp	word ptr [rsi + 16], r13w
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	sete	dl
	cmp	word ptr [rsi + 20], r13w
	sete	r9b
	cmp	word ptr [rsi + 22], r13w
	sete	r10b
	cmp	word ptr [rsi + 24], r13w
	sete	r11b
	cmp	word ptr [rsi + 26], r13w
	sete	r12b
	cmp	word ptr [rsi + 28], r13w
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	sete	cl
	cmp	word ptr [rsi + 32], r13w
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	sete	r15b
	cmp	word ptr [rsi + 48], r13w
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	sete	r8b
	add	dil, dil
	or	dil, al
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 64
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB1_55
# %bb.56:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB1_117
	jmp	.LBB1_164
.LBB1_57:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_59:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_59
# %bb.60:
	add	r11, 1
.LBB1_61:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_120
# %bb.62:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_63:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	sete	dil
	cmp	word ptr [rsi + 4], r13w
	sete	r14b
	cmp	word ptr [rsi + 6], r13w
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	sete	al
	cmp	word ptr [rsi + 14], r13w
	sete	bl
	cmp	word ptr [rsi + 16], r13w
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	sete	dl
	cmp	word ptr [rsi + 20], r13w
	sete	r9b
	cmp	word ptr [rsi + 22], r13w
	sete	r10b
	cmp	word ptr [rsi + 24], r13w
	sete	r11b
	cmp	word ptr [rsi + 26], r13w
	sete	r12b
	cmp	word ptr [rsi + 28], r13w
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	sete	cl
	cmp	word ptr [rsi + 32], r13w
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	sete	r15b
	cmp	word ptr [rsi + 48], r13w
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 64
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB1_63
# %bb.64:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB1_121
	jmp	.LBB1_164
.LBB1_65:
	mov	r13, qword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_69
# %bb.66:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_67:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_67
# %bb.68:
	add	r11, 1
.LBB1_69:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_123
# %bb.70:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_71:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	sete	dil
	cmp	qword ptr [rsi + 16], r13
	sete	r14b
	cmp	qword ptr [rsi + 24], r13
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	sete	al
	cmp	qword ptr [rsi + 56], r13
	sete	bl
	cmp	qword ptr [rsi + 64], r13
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	sete	dl
	cmp	qword ptr [rsi + 80], r13
	sete	r9b
	cmp	qword ptr [rsi + 88], r13
	sete	r10b
	cmp	qword ptr [rsi + 96], r13
	sete	r11b
	cmp	qword ptr [rsi + 104], r13
	sete	r12b
	cmp	qword ptr [rsi + 112], r13
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	sete	cl
	cmp	qword ptr [rsi + 128], r13
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	sete	r15b
	cmp	qword ptr [rsi + 192], r13
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 256
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB1_71
# %bb.72:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB1_124
	jmp	.LBB1_164
.LBB1_73:
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovss	xmm0, dword ptr [rdx]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB1_77
# %bb.74:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_75:                               # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_75
# %bb.76:
	add	r11, 1
.LBB1_77:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_126
# %bb.78:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_79:                               # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 4]
	sete	r9b
	vucomiss	xmm0, dword ptr [rsi + 8]
	sete	r14b
	vucomiss	xmm0, dword ptr [rsi + 12]
	sete	r13b
	vucomiss	xmm0, dword ptr [rsi + 16]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 20]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 24]
	sete	al
	vucomiss	xmm0, dword ptr [rsi + 28]
	sete	bl
	vucomiss	xmm0, dword ptr [rsi + 32]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 36]
	sete	dl
	vucomiss	xmm0, dword ptr [rsi + 40]
	sete	dil
	vucomiss	xmm0, dword ptr [rsi + 44]
	sete	r10b
	vucomiss	xmm0, dword ptr [rsi + 48]
	sete	r11b
	vucomiss	xmm0, dword ptr [rsi + 52]
	sete	r12b
	vucomiss	xmm0, dword ptr [rsi + 56]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 60]
	sete	cl
	vucomiss	xmm0, dword ptr [rsi + 64]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 68]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 72]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 76]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 80]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 84]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 88]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 92]
	sete	r15b
	vucomiss	xmm0, dword ptr [rsi + 96]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 100]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 104]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 108]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 112]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 116]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 120]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 124]
	sete	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 128
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB1_79
# %bb.80:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB1_127
	jmp	.LBB1_164
.LBB1_81:
	mov	r14b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_85
# %bb.82:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_83:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r14b
	lea	rsi, [rsi + 1]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_83
# %bb.84:
	add	r11, 1
.LBB1_85:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_129
# %bb.86:
	cmp	r15, 32
	mov	dword ptr [rsp + 28], r14d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 392], r15      # 8-byte Spill
	jb	.LBB1_89
# %bb.87:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r11, rax
	jae	.LBB1_168
# %bb.88:
	lea	rax, [r11 + 4*r15]
	cmp	rsi, rax
	jae	.LBB1_168
.LBB1_89:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rsi
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
.LBB1_90:
	sub	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_91:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	byte ptr [r12], r14b
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	byte ptr [r12 + 1], r14b
	sete	r8b
	cmp	byte ptr [r12 + 2], r14b
	sete	r15b
	cmp	byte ptr [r12 + 3], r14b
	sete	r13b
	cmp	byte ptr [r12 + 4], r14b
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 5], r14b
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 6], r14b
	sete	al
	cmp	byte ptr [r12 + 7], r14b
	sete	r11b
	cmp	byte ptr [r12 + 8], r14b
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 9], r14b
	sete	dl
	cmp	byte ptr [r12 + 10], r14b
	sete	sil
	cmp	byte ptr [r12 + 11], r14b
	sete	dil
	cmp	byte ptr [r12 + 12], r14b
	sete	r10b
	cmp	byte ptr [r12 + 13], r14b
	sete	r12b
	cmp	byte ptr [rcx + 14], r14b
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	sete	r9b
	cmp	byte ptr [rcx + 16], r14b
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 18], r14b
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	sete	r14b
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 24], bl
	sete	byte ptr [rsp + 272]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 25], bl
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 26], bl
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 27], bl
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 28], bl
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 29], bl
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 30], bl
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 31], bl
	sete	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r15b, 2
	or	r15b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r15b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 288]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 376]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r14b, dl
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	byte ptr [rsi + 3], bl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 376], rsi      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB1_91
# %bb.92:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	jmp	.LBB1_130
.LBB1_93:
	mov	r13d, dword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_97
# %bb.94:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_95:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_95
# %bb.96:
	add	r11, 1
.LBB1_97:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_133
# %bb.98:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_99:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	sete	dil
	cmp	dword ptr [rsi + 8], r13d
	sete	r14b
	cmp	dword ptr [rsi + 12], r13d
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	sete	al
	cmp	dword ptr [rsi + 28], r13d
	sete	bl
	cmp	dword ptr [rsi + 32], r13d
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	sete	dl
	cmp	dword ptr [rsi + 40], r13d
	sete	r9b
	cmp	dword ptr [rsi + 44], r13d
	sete	r10b
	cmp	dword ptr [rsi + 48], r13d
	sete	r11b
	cmp	dword ptr [rsi + 52], r13d
	sete	r12b
	cmp	dword ptr [rsi + 56], r13d
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	sete	cl
	cmp	dword ptr [rsi + 64], r13d
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	sete	r15b
	cmp	dword ptr [rsi + 96], r13d
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r11], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r11 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], r8b
	add	rsi, 128
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB1_99
# %bb.100:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB1_134
	jmp	.LBB1_164
.LBB1_101:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
.LBB1_102:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB1_135
# %bb.103:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB1_104:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_104
	jmp	.LBB1_161
.LBB1_105:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
.LBB1_106:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_136
# %bb.107:
	xor	r11d, r11d
	jmp	.LBB1_138
.LBB1_108:
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
	mov	r12, rsi
.LBB1_109:
	shl	r13, 5
	cmp	r13, r15
	jge	.LBB1_164
# %bb.110:
	mov	r8, r15
	sub	r8, r13
	not	r13
	add	r13, r15
	je	.LBB1_132
# %bb.140:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 376]      # 8-byte Reload
	.p2align	4, 0x90
.LBB1_141:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r12 + rsi], r14b
	sete	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	byte ptr [r12 + rsi + 1], r14b
	lea	rsi, [rsi + 2]
	sete	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB1_141
	jmp	.LBB1_156
.LBB1_112:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
.LBB1_113:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB1_125
# %bb.114:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB1_115:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_115
	jmp	.LBB1_148
.LBB1_116:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
.LBB1_117:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB1_122
# %bb.118:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB1_119:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_119
	jmp	.LBB1_144
.LBB1_120:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
.LBB1_121:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_142
.LBB1_122:
	xor	r11d, r11d
	jmp	.LBB1_144
.LBB1_123:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
.LBB1_124:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_146
.LBB1_125:
	xor	r11d, r11d
	jmp	.LBB1_148
.LBB1_126:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
.LBB1_127:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_150
# %bb.128:
	xor	r11d, r11d
	jmp	.LBB1_152
.LBB1_129:
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
	mov	r12, rsi
.LBB1_130:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
# %bb.131:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_154
.LBB1_132:
	xor	esi, esi
	jmp	.LBB1_157
.LBB1_133:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_164
.LBB1_134:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_159
.LBB1_135:
	xor	r11d, r11d
	jmp	.LBB1_161
.LBB1_136:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB1_137:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	vucomisd	xmm0, qword ptr [rsi + 8]
	lea	rsi, [rsi + 16]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_137
.LBB1_138:
	test	r8b, 1
	je	.LBB1_164
# %bb.139:
	vucomisd	xmm0, qword ptr [rsi]
	jmp	.LBB1_163
.LBB1_142:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB1_143:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_143
.LBB1_144:
	test	r8b, 1
	je	.LBB1_164
# %bb.145:
	cmp	word ptr [rsi], r13w
	jmp	.LBB1_163
.LBB1_146:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB1_147:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_147
.LBB1_148:
	test	r8b, 1
	je	.LBB1_164
# %bb.149:
	cmp	qword ptr [rsi], r13
	jmp	.LBB1_163
.LBB1_150:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB1_151:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	vucomiss	xmm0, dword ptr [rsi + 4]
	lea	rsi, [rsi + 8]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_151
.LBB1_152:
	test	r8b, 1
	je	.LBB1_164
# %bb.153:
	vucomiss	xmm0, dword ptr [rsi]
	jmp	.LBB1_163
.LBB1_154:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 376]      # 8-byte Reload
	.p2align	4, 0x90
.LBB1_155:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r12 + rsi], r14b
	sete	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	byte ptr [r12 + rsi + 1], r14b
	lea	rsi, [rsi + 2]
	sete	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB1_155
.LBB1_156:
	add	r12, rsi
.LBB1_157:
	test	r8b, 1
	je	.LBB1_164
# %bb.158:
	cmp	byte ptr [r12], r14b
	sete	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 376]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB1_164
.LBB1_159:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB1_160:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_160
.LBB1_161:
	test	r8b, 1
	je	.LBB1_164
# %bb.162:
	cmp	dword ptr [rsi], r13d
.LBB1_163:
	sete	al
	neg	al
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
.LBB1_164:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB1_165:
	and	r13, -32
	mov	rax, r13
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r13      # 8-byte Spill
	lea	rax, [r11 + 4*r13]
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_166:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 408], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 224], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 136], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rsi + rax]
	mov	rdx, rcx
	vmovd	xmm0, eax
	mov	rcx, rbx
	movzx	eax, byte ptr [rsi + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rsi + rdx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rsi + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rsi + rdx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rdx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rsi + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rsi + rdx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 4]
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rsi + rdx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rsi + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rsi + rdx + 6]
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rsi + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rsi + rdx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rsi + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 544
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 576
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 608
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	r15, rbx
	or	r15, 640
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	r11, rbx
	or	r11, 672
	mov	qword ptr [rsp + 200], r11      # 8-byte Spill
	mov	r8, rbx
	or	r8, 704
	mov	qword ptr [rsp + 168], r8       # 8-byte Spill
	mov	rdx, rbx
	or	rdx, 736
	mov	qword ptr [rsp + 192], rdx      # 8-byte Spill
	mov	r12, rbx
	or	r12, 768
	mov	qword ptr [rsp + 216], r12      # 8-byte Spill
	mov	r14, rbx
	or	r14, 800
	mov	qword ptr [rsp + 184], r14      # 8-byte Spill
	mov	r10, rbx
	or	r10, 832
	mov	qword ptr [rsp + 80], r10       # 8-byte Spill
	mov	r9, rbx
	or	r9, 864
	mov	qword ptr [rsp + 72], r9        # 8-byte Spill
	mov	rax, rbx
	or	rax, 896
	mov	qword ptr [rsp + 248], rax      # 8-byte Spill
	mov	rdi, rbx
	or	rdi, 928
	mov	qword ptr [rsp + 112], rdi      # 8-byte Spill
	mov	rax, rbx
	mov	qword ptr [rsp + 256], rbx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 56], rcx       # 8-byte Spill
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm9, xmm0, byte ptr [rsi + r13], 1
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + rbx], 2
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9], 11
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx], 15
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14], 1
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12], 2
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10], 3
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11], 4
	mov	r8, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8], 5
	mov	r9, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9], 6
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15], 7
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 9
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 10
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 12
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 13
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 14
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 15
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 1
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 2
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 3
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 4
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 5
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 7
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 8
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 9
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 10
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 13
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 14
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rsi + r14 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 1], 6
	mov	r8, r9
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 1], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 13
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 14
	vinserti128	ymm15, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 1], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm10, edi
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 2], 1
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 2], 2
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 2], 3
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 4
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 6
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 7
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 2], 8
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 9
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 2], 10
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 11
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 2], 12
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 2], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 2], 1
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 2
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 4
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 2], 6
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 7
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 8
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 9
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 10
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 2], 11
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rsi + rdx + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 3
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 4
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 5
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 6
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 3], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 3], 13
	mov	r14, r15
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rsi + rax + 3], 1
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 2
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 3], 3
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 3], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 3], 7
	mov	r11, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 3], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 3], 14
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm8, edi
	mov	r9, rbx
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 1
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 3
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 4
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 4], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 4], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 9
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 11
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 14
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 4], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm13, byte ptr [rsi + rax + 4], 1
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 4], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 4], 4
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 4], 6
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 4], 8
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 4], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 10
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 4], 11
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 4], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 13
	mov	r15, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 4], 15
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm4, xmm14, byte ptr [rsi + r9 + 5], 1
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 5], 2
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 5
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 6
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 7
	mov	r13, rcx
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 9
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 11
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 12
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 14
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 5], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rsi + rax + 5], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 2
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 3
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 5], 6
	mov	r10, rdi
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 5], 7
	mov	r14, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 5], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 5], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 5], 11
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 5], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 13
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 5], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm4, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rsi + rax + 6], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 2
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 6], 3
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 6], 4
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 6], 5
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 6], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 7
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 8
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 9
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 11
	mov	r12, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 6], 12
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 6], 13
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 15
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rcx + 6], 1
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 2
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 4
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 6], 6
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 7
	mov	r10, r14
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 6], 8
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 10
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 12
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 13
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 14
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 4
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 7], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 7
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 7], 9
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 10
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 7], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 7], 13
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 14
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 15
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 1
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 2
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 3
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 7], 5
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 6
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 7], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 7], 8
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 10
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 7], 11
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rcx + 7], 14
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 11]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 11]
	vmovd	xmm2, edi
	vpinsrb	xmm0, xmm9, byte ptr [rsi + rax + 8], 1
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 8], 2
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 8], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 8], 4
	mov	rbx, r14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 8], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 8], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 8], 8
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 8], 9
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 8], 11
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 8], 12
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 8], 13
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 8], 15
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rsi + rdx + 8], 1
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 8], 2
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 4
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 5
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 8], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 8], 8
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 8], 9
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 8], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 12
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 13
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 14
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 15
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rsi + r13 + 9], 1
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r12 + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 3
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 8
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r8 + 9], 9
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 11
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r11 + 9], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm7, xmm11, byte ptr [rsi + rax + 9], 1
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 9], 2
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdi + 9], 4
	mov	r14, rdi
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 9], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 9], 10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 12
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 9], 13
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm5, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 10], 1
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 10], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 3
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 4
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 10], 7
	mov	r8, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 10], 8
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 10], 9
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 10], 12
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 13
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 10], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 10], 15
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 1
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 2
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 5
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 9
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 11
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 10], 13
	mov	r15, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 10], 14
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 11], 4
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 5
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 11], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 7
	mov	r9, rdx
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 11], 9
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 11
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 14
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 11], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 11], 1
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 4
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 5
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 6
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 7
	mov	r12, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 11], 8
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 11], 10
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 11], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm3  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 14
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 13]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm1  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 13]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 1
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 2
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 3
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 12], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 12], 5
	mov	rbx, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 12], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 12], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 12], 8
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 12], 9
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 11
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 12], 12
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 13
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 12], 14
	mov	r10, r15
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 12], 15
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rsi + r13 + 12], 1
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 12], 2
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 6
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 12], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 12], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 10
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 12], 11
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 13
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 14
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 15
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 1
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 2
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 4
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 6
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 13], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 9
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 12
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 13], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 13], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 13], 2
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 4
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 5
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 13], 7
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 13], 11
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 13], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 13
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rax + 13], 15
	mov	r13, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	mov	r14, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r14 + 14]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 1
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 14], 2
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 14], 3
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 14], 4
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 5
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 6
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 14], 10
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 11
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 14], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 15
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 14], 1
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 2
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 3
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 14], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 5
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 14], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 7
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 8
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 10
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 14], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 13
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 14
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 15
	movzx	edi, byte ptr [rsi + r13 + 15]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 4
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 15], 7
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 9
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 11
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 15], 12
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 13
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 15
	movzx	edi, byte ptr [rsi + r14 + 15]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 15], 1
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 2
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 15], 4
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 15], 6
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 15], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 10
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 15], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 13
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 14
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 16]
	vmovd	xmm0, edi
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 16], 1
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 2
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 16], 3
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 5
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 7
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 9
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 16], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 16]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 1
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 2
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 5
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 16], 7
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 8
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 16], 11
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 12
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 16], 13
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 16], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 16], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 17]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 17], 1
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 17], 3
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 4
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 17], 6
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 8
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 17], 10
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 17], 11
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 13
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 17]
	vmovd	xmm3, edi
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 17], 1
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 17], 2
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 17], 3
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 6
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 17], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 8
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 17], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rax + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 18]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 18], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 4
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 5
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 18], 6
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 9
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 11
	mov	r12, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 18], 12
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 13
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 18]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 18], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 18], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 18], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 4
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 5
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 18], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 18], 7
	mov	rdx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 10
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 18], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 18], 14
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 18], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 19]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 1
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 3
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 4
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 19], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 19], 6
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 7
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 19], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 19], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 19], 13
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 19], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 15
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r10 + 19]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 1
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 19], 2
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 19], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 7
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 19], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 19], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 13
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 20]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 1
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 3
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 20], 5
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 6
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 20], 7
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 20], 8
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 9
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 11
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 12
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 20], 14
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 20], 15
	movzx	edi, byte ptr [rsi + r10 + 20]
	vmovd	xmm1, edi
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 20], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 20], 2
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 20], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 4
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 6
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 20], 7
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 8
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 10
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 11
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 20], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 13
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 14
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 15
	movzx	edi, byte ptr [rsi + r11 + 21]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 2
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 3
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 4
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 21], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 21], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 11
	mov	r12, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 21], 15
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 21]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 21], 1
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 21], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 7
	mov	r13, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 21], 8
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 9
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 21], 10
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 21], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 21], 12
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 21], 13
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + r10 + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 22]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 1
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 3
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 4
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 5
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 7
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 8
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 9
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 22], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 22], 12
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 13
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 22], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 15
	movzx	edi, byte ptr [rsi + r11 + 22]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 1
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 2
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 22], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 22], 4
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 22], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 6
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 22], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 22], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 22], 11
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 22], 13
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 22], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 22], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 23]
	vmovd	xmm2, edi
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 23], 1
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 23], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 3
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 4
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 5
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 23], 6
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 7
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 23], 10
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 11
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 23], 12
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 23], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 23], 14
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 23]
	vmovd	xmm3, edi
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 23], 1
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 23], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 4
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 7
	mov	r12, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 23], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 9
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 23], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 14
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 24]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 24], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 24], 2
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 24], 3
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 4
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 24], 6
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 24], 7
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 8
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 24], 9
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 24], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 24], 13
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 24], 15
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 24]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 1
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 2
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 4
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 6
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 8
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 10
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 13
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 14
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 15
	movzx	edi, byte ptr [rsi + rcx + 25]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 1
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 25], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 25], 3
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 4
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 25], 7
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 25], 9
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 25], 10
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 25], 11
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 15
	movzx	edi, byte ptr [rsi + rdx + 25]
	vmovd	xmm3, edi
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 25], 2
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 5
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 25], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 7
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 8
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 25], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 25], 12
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 25], 13
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 25], 14
	vinserti128	ymm9, ymm1, xmm0, 1
	vpinsrb	xmm0, xmm3, byte ptr [rsi + r11 + 25], 15
	vinserti128	ymm8, ymm0, xmm2, 1
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 26]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 2
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 3
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 5
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 26], 6
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 26], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 11
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 12
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 26], 13
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 26]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 1
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 2
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 4
	mov	r12, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 26], 6
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 7
	mov	r13, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 26], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 26], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 12
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 26], 13
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 14
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 15
	movzx	edi, byte ptr [rsi + r11 + 27]
	vmovd	xmm2, edi
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 27], 1
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 27], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 4
	mov	r8, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 27], 6
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 7
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 8
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 27], 9
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 10
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 27], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 27], 13
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 14
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 15
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 27]
	vmovd	xmm3, edi
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 1
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 27], 2
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 3
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 27], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 27], 5
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 6
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 27], 8
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 10
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 11
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 27], 13
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 27], 14
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 28]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 1
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 3
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 28], 5
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 9
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 11
	mov	rbx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 13
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 15
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r12 + 28]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 28], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 4
	mov	r9, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 28], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 6
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 7
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 28], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 9
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 10
	mov	r10, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 28], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 14
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 29]
	vmovd	xmm2, edi
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 2
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 29], 4
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 29], 5
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 6
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 7
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 8
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 9
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 29], 12
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 13
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 15
	movzx	edi, byte ptr [rsi + r12 + 29]
	vmovd	xmm3, edi
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 29], 1
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 2
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 3
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 29], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 29], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 29], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 29], 8
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 29], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 29], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 29], 12
	mov	r14, rdx
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 13
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm3, byte ptr [rsi + r10 + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm4, byte ptr [rsi + rdx + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r8 + 30]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 30], 1
	movzx	edi, byte ptr [rsi + r8 + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 31], 1
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 31], 3
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 31], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 6
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 11
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rsi + rax + 31], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	eax, byte ptr [rsi + rcx + 30]
	vmovd	xmm1, eax
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 30], 1
	movzx	eax, byte ptr [rsi + rcx + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rbx + 31], 1
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r12 + 31], 4
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 31], 7
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 8
	mov	rax, r9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 31], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 11
	mov	rax, r14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 31], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 31], 14
	mov	rax, rdx
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm0, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpeqb	ymm2, ymm0, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI1_0] # ymm1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	vpand	ymm7, ymm2, ymm1
	vpsubb	ymm11, ymm7, ymm2
	vpcmpeqb	ymm7, ymm15, ymm0
	vpand	ymm7, ymm7, ymm1
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI1_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpand	ymm12, ymm12, ymm6
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm2, ymmword ptr [rip + .LCPI1_2] # ymm2 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpand	ymm7, ymm7, ymm2
	vpcmpeqb	ymm12, ymm14, ymm0
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI1_3] # ymm4 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpand	ymm12, ymm12, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI1_4] # ymm13 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpand	ymm12, ymm12, ymm13
	vmovdqa	ymm14, ymm13
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI1_5] # ymm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpand	ymm7, ymm7, ymm5
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vmovdqa	ymm15, ymmword ptr [rip + .LCPI1_6] # ymm15 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm12, ymm12, ymm15
	vpor	ymm7, ymm12, ymm7
	vpor	ymm13, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpand	ymm12, ymm7, ymm1
	vpsubb	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm1
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm6
	vpor	ymm11, ymm12, ymm11
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm4
	vpor	ymm11, ymm11, ymm12
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm14
	vmovdqa	ymm3, ymm14
	vpor	ymm11, ymm11, ymm12
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm5
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vpand	ymm12, ymm12, ymm15
	vpor	ymm11, ymm11, ymm12
	vpor	ymm12, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpand	ymm11, ymm7, ymm1
	vpsubb	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm1
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm6
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm4
	vpor	ymm11, ymm11, ymm14
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm3
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm10, ymm10, ymm0
	vmovdqa	ymm14, ymm5
	vpand	ymm10, ymm10, ymm5
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpsllw	ymm11, ymm11, 7
	vpand	ymm11, ymm11, ymm15
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpeqb	ymm8, ymm8, ymm0
	vpand	ymm10, ymm8, ymm1
	vpsubb	ymm8, ymm10, ymm8
	vpcmpeqb	ymm9, ymm9, ymm0
	vpand	ymm9, ymm9, ymm1
	vpcmpeqb	ymm5, ymm0, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpand	ymm5, ymm5, ymm6
	vpor	ymm5, ymm9, ymm5
	vpor	ymm5, ymm8, ymm5
	vpcmpeqb	ymm6, ymm0, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpand	ymm6, ymm6, ymm2
	vpcmpeqb	ymm3, ymm0, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpand	ymm3, ymm3, ymm4
	vpor	ymm3, ymm6, ymm3
	vpcmpeqb	ymm4, ymm0, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpand	ymm4, ymm4, ymmword ptr [rip + .LCPI1_4]
	vpor	ymm3, ymm3, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpeqb	ymm1, ymm0, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpand	ymm1, ymm14, ymm1
	vpcmpeqb	ymm2, ymm0, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpsllw	ymm2, ymm2, 7
	vpand	ymm2, ymm15, ymm2
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm13, ymm12      # ymm2 = ymm13[0],ymm12[0],ymm13[1],ymm12[1],ymm13[2],ymm12[2],ymm13[3],ymm12[3],ymm13[4],ymm12[4],ymm13[5],ymm12[5],ymm13[6],ymm12[6],ymm13[7],ymm12[7],ymm13[16],ymm12[16],ymm13[17],ymm12[17],ymm13[18],ymm12[18],ymm13[19],ymm12[19],ymm13[20],ymm12[20],ymm13[21],ymm12[21],ymm13[22],ymm12[22],ymm13[23],ymm12[23]
	vpunpckhbw	ymm0, ymm13, ymm12      # ymm0 = ymm13[8],ymm12[8],ymm13[9],ymm12[9],ymm13[10],ymm12[10],ymm13[11],ymm12[11],ymm13[12],ymm12[12],ymm13[13],ymm12[13],ymm13[14],ymm12[14],ymm13[15],ymm12[15],ymm13[24],ymm12[24],ymm13[25],ymm12[25],ymm13[26],ymm12[26],ymm13[27],ymm12[27],ymm13[28],ymm12[28],ymm13[29],ymm12[29],ymm13[30],ymm12[30],ymm13[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 408]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r11 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r11 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r11 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB1_166
# %bb.167:
	mov	r13, qword ptr [rsp + 392]      # 8-byte Reload
	cmp	r13, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r15, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 400]      # 8-byte Reload
	jne	.LBB1_36
	jmp	.LBB1_109
.LBB1_168:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r15      # 8-byte Spill
	lea	rax, [r11 + 4*r15]
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_169:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 408], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 176], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 168], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rsi + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rsi + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rsi + rcx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rsi + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rsi + rcx + 2]
	mov	rdx, rcx
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	mov	rcx, rbx
	movzx	eax, byte ptr [rsi + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rdx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rsi + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rsi + rdx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 4]
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rsi + rdx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rsi + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rsi + rdx + 6]
	mov	qword ptr [rsp + 248], rdx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rsi + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rsi + rdx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rsi + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 200], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 544
	mov	qword ptr [rsp + 136], rax      # 8-byte Spill
	or	rbx, 576
	mov	qword ptr [rsp + 256], rbx      # 8-byte Spill
	mov	rax, rcx
	or	rax, 608
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	r12, rcx
	or	r12, 640
	mov	qword ptr [rsp + 208], r12      # 8-byte Spill
	mov	r14, rcx
	or	r14, 672
	mov	qword ptr [rsp + 144], r14      # 8-byte Spill
	mov	rax, rcx
	or	rax, 704
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	rdi, rcx
	or	rdi, 736
	mov	r9, rcx
	or	r9, 768
	mov	qword ptr [rsp + 224], r9       # 8-byte Spill
	mov	r15, rcx
	or	r15, 800
	mov	qword ptr [rsp + 112], r15      # 8-byte Spill
	mov	r11, rcx
	or	r11, 832
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	mov	r10, rcx
	or	r10, 864
	mov	qword ptr [rsp + 88], r10       # 8-byte Spill
	mov	r8, rcx
	or	r8, 896
	mov	qword ptr [rsp + 128], r8       # 8-byte Spill
	mov	rdx, rcx
	or	rdx, 928
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 264], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 80], rcx       # 8-byte Spill
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm9, xmm0, byte ptr [rsi + r13], 1
	vpinsrb	xmm0, xmm9, byte ptr [rsi + rbx], 2
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14], 5
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi], 7
	mov	r13, rdi
	mov	qword ptr [rsp + 160], rdi      # 8-byte Spill
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx], 15
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14], 1
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10], 2
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12], 3
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8], 4
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11], 5
	mov	r9, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9], 6
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15], 7
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 9
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 10
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 12
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 13
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 14
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 15
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 1
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 2
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 3
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 4
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 5
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 6
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 7
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 8
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 9
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 10
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 12
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 13
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 14
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rsi + r14 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 1], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 14
	vinserti128	ymm15, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 1], 15
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm10, edi
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 2], 1
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 2], 2
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 2], 3
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 5
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 2], 6
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 2], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 8
	mov	r12, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 9
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 10
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 11
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 2], 12
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 2], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 15
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 2], 1
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 2
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 4
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 6
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 7
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 8
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 9
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 10
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 11
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rsi + r8 + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 3
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 4
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 6
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 7
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 3], 13
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 14
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rsi + rax + 3], 1
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 3], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 4
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 3], 5
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 3], 7
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 8
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 3], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 10
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 3], 14
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm8, edi
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 1
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 3
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 4], 5
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 6
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 12
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 4], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 4], 15
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm13, byte ptr [rsi + rax + 4], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 4], 2
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 4], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 5
	mov	rdi, r14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 6
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 7
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 4], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 4], 9
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 4], 10
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 11
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 4], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 4], 13
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 4], 15
	vpinsrb	xmm4, xmm14, byte ptr [rsi + r8 + 5], 1
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 5], 2
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 5
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 6
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 5], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 9
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 10
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 5], 11
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 12
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 5], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 15
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rsi + r12 + 5], 1
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 5], 3
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 4
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 5], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 5], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 5], 8
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 5], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 5], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 5], 15
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm4, edi
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rsi + r11 + 6], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 6], 3
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 6
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 6], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 9
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 6], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 6], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 6], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 15
	vpinsrb	xmm5, xmm7, byte ptr [rsi + r12 + 6], 1
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 3
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 4
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 5
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 6
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 7
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 6], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 6], 9
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 10
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 6], 11
	mov	r8, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 6], 12
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 6], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 14
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 3
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 4
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 5
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 7
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 7], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 12
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 13
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 15
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 1
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 3
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 7], 6
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 7], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 7], 8
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 9
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 7], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 7], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rcx + 7], 14
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 11]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 11]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + rcx + 8], 1
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 8], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 8], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 8], 4
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 8], 5
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 8], 6
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 7
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 8], 8
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 8], 9
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 8], 10
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 11
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 8], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 8], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 8], 15
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rsi + rax + 8], 1
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 8], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 4
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 5
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 8], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 7
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 10
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 12
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 13
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 14
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 15
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rsi + r13 + 9], 1
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r8 + 9], 2
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 3
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r11 + 9], 4
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 6
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 7
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r14 + 9], 8
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r10 + 9], 9
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 11
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r12 + 9], 12
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 14
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r13 + 9], 15
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm7, xmm11, byte ptr [rsi + rcx + 9], 1
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 9], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rcx + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdi + 9], 4
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r11 + 9], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 9], 6
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rbx + 9], 7
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rcx + 9], 8
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rcx + 9], 9
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rcx + 9], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm5, edi
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 10], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 10], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 3
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 4
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 10], 5
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 6
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 10], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 10], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 12
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 10], 13
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 10], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 10], 15
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 1
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 2
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 4
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 5
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 6
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 7
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 9
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 10
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 11
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 14
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 3
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 11], 5
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 11], 7
	mov	r12, r9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 11], 8
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 9
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 10
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 11], 13
	mov	r13, r10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 11], 14
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 15
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 11], 1
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 4
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 11], 6
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 11], 7
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 10
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm3  # 32-byte Spill
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 11], 14
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 13]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 13]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 1
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 2
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 4
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 12], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 12], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 12], 7
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 12], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 11
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 12], 13
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 12], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 15
	vpinsrb	xmm2, xmm5, byte ptr [rsi + rdx + 12], 1
	mov	rdi, r14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 12], 2
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 12], 3
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 4
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 12], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 12], 7
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 8
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 12], 9
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 12], 10
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 12], 11
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 12], 12
	mov	r9, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 12], 13
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 12], 14
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 12], 15
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 1
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 13], 3
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 13], 5
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 13], 6
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 13], 8
	mov	r12, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 13], 9
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 12
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 13], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 13], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 15
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 13], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 13], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 13], 5
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 6
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 10
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 13], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rax + 13], 15
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 14]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 1
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 14], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 3
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 14], 4
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 14], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 6
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 7
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 14], 9
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 14], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 14], 13
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 14], 14
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 14], 15
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 14], 1
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 2
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 14], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 14], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 6
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 14], 7
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 8
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 14], 9
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 10
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 15
	movzx	edi, byte ptr [rsi + r13 + 15]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 15], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 6
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 7
	mov	r8, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 9
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 12
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 13
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 15], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 15], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 15]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 1
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 15], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 4
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 15], 7
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 15], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 10
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 15], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 13
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 15], 14
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r10 + 16]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 16], 1
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 16], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 16], 3
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 16], 4
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 16], 5
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 16], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 16], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 12
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 16], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 15
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rbx + 16]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 1
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 2
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 3
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 5
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 6
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 7
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 8
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 9
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 16], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 12
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 16], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 16], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 16], 15
	movzx	edi, byte ptr [rsi + r10 + 17]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 1
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 2
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 17], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 5
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 17], 6
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 7
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 17], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 11
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 17], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 15
	movzx	edi, byte ptr [rsi + rbx + 17]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 1
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 2
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 17], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 17], 4
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 6
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 7
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 8
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 9
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 17], 10
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 17], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rdi + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 18]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 3
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 18], 4
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 6
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 18], 8
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 9
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 18], 12
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 15
	movzx	edi, byte ptr [rsi + rbx + 18]
	vmovd	xmm1, edi
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 18], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 18], 3
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 18], 4
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 18], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 6
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 18], 7
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 18], 10
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 15
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 19]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 1
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 19], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 19], 4
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 5
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 7
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 8
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 19], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 12
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 13
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 19], 14
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 19], 15
	movzx	edi, byte ptr [rsi + rbx + 19]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 19], 1
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 2
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 19], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 19], 5
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 19], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 19], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 19], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 9
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 19], 10
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 11
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 19], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 14
	mov	r14, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r15 + 20]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 3
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 4
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 20], 5
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 6
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 12
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 20], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 20], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 20]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 20], 1
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 20], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 20], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 20], 4
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 20], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 20], 6
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 20], 7
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 20], 8
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 20], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 20], 10
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 20], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 20], 12
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 20], 13
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 20], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 20], 15
	movzx	edi, byte ptr [rsi + r15 + 21]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 1
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 21], 5
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 6
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 7
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 8
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 21], 9
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 10
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 21], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 12
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 21], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 15
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 21]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 21], 2
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 4
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 5
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 21], 6
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 21], 7
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 21], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 21], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rax + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 22]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 1
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 3
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 4
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 22], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 22], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 22], 9
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 22], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 22], 11
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 22], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 15
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rbx + 22]
	vmovd	xmm1, edi
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 22], 1
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 22], 2
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 22], 3
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 22], 4
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 22], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 22], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 7
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 22], 8
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 22], 9
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 22], 10
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 22], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 22], 12
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 22], 13
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 14
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 22], 15
	movzx	edi, byte ptr [rsi + rax + 23]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 1
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 2
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 3
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 23], 5
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 7
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 8
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 23], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 23], 12
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 14
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 23], 15
	movzx	edi, byte ptr [rsi + rbx + 23]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 23], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 3
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 23], 4
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 23], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 23], 6
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 7
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 23], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 23], 9
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 23], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 23], 11
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 12
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 23], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 23], 14
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 24]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 1
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 24], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 24], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 5
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 6
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 24], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 12
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 24], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 24]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 1
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 24], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 24], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 24], 5
	mov	r10, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 24], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 24], 8
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 10
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 24], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 15
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r8 + 25]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 25], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 3
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 25], 4
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 5
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 7
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 25], 8
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 9
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 25], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 25], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 12
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 13
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 14
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 15
	mov	rdx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 25]
	vmovd	xmm3, edi
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 25], 1
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 2
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 4
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 25], 6
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 7
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 25], 9
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 25], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 12
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 14
	vinserti128	ymm9, ymm1, xmm0, 1
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rdi + 25], 15
	vinserti128	ymm8, ymm0, xmm2, 1
	movzx	edi, byte ptr [rsi + r8 + 26]
	vmovd	xmm0, edi
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 1
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 26], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 6
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 26], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 26], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 11
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 13
	mov	rcx, r14
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 15
	mov	r12, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r12 + 26]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 1
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 26], 2
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 26], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 4
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 7
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 26], 10
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 26], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 26], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 14
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 15
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 27]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 1
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 2
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 3
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 4
	mov	r9, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 27], 5
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 27], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 7
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 8
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 9
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 27], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 27], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 15
	movzx	edi, byte ptr [rsi + r12 + 27]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 27], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 4
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 5
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 27], 6
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 7
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 8
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 9
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 27], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 27], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 27], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 28]
	vmovd	xmm0, edi
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 28], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 3
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 28], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 28], 6
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 8
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 28], 10
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 28], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 12
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 28], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 28]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 1
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 2
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 4
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 28], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 6
	mov	r14, r15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 7
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 8
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 28], 10
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 28], 11
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 15
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 29]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 29], 1
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 29], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 3
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 4
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 5
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 29], 7
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 29], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 29], 9
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 29], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 29], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 29], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 29], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 15
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r8 + 29]
	vmovd	xmm3, edi
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 29], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 29], 3
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 29], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 29], 5
	mov	r10, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 29], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 7
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 29], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 29], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 13
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm3, byte ptr [rsi + r15 + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm4, byte ptr [rsi + rax + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 30]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 30], 1
	movzx	edi, byte ptr [rsi + rax + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 31], 1
	mov	rax, r11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 31], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 3
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 6
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 31], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 31], 12
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rsi + rax + 31], 15
	mov	rdx, r8
	movzx	eax, byte ptr [rsi + r8 + 30]
	vmovd	xmm1, eax
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 30], 1
	movzx	eax, byte ptr [rsi + r8 + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 31], 1
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r13 + 31], 4
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 31], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 31], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 10
	mov	rax, r12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r12 + 31], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 31], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm0, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpeqb	ymm2, ymm0, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI1_0] # ymm1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	vpand	ymm7, ymm2, ymm1
	vpsubb	ymm11, ymm7, ymm2
	vpcmpeqb	ymm7, ymm15, ymm0
	vpand	ymm7, ymm7, ymm1
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI1_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpand	ymm12, ymm12, ymm6
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm2, ymmword ptr [rip + .LCPI1_2] # ymm2 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpand	ymm7, ymm7, ymm2
	vpcmpeqb	ymm12, ymm14, ymm0
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI1_3] # ymm4 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpand	ymm12, ymm12, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI1_4] # ymm13 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpand	ymm12, ymm12, ymm13
	vmovdqa	ymm14, ymm13
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI1_5] # ymm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpand	ymm7, ymm7, ymm5
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vmovdqa	ymm15, ymmword ptr [rip + .LCPI1_6] # ymm15 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm12, ymm12, ymm15
	vpor	ymm7, ymm12, ymm7
	vpor	ymm13, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpand	ymm12, ymm7, ymm1
	vpsubb	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm1
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm6
	vpor	ymm11, ymm12, ymm11
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm4
	vpor	ymm11, ymm11, ymm12
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm14
	vmovdqa	ymm3, ymm14
	vpor	ymm11, ymm11, ymm12
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm5
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vpand	ymm12, ymm12, ymm15
	vpor	ymm11, ymm11, ymm12
	vpor	ymm12, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpand	ymm11, ymm7, ymm1
	vpsubb	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm1
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm6
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm4
	vpor	ymm11, ymm11, ymm14
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm3
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm10, ymm10, ymm0
	vmovdqa	ymm14, ymm5
	vpand	ymm10, ymm10, ymm5
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpsllw	ymm11, ymm11, 7
	vpand	ymm11, ymm11, ymm15
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpeqb	ymm8, ymm8, ymm0
	vpand	ymm10, ymm8, ymm1
	vpsubb	ymm8, ymm10, ymm8
	vpcmpeqb	ymm9, ymm9, ymm0
	vpand	ymm9, ymm9, ymm1
	vpcmpeqb	ymm5, ymm0, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpand	ymm5, ymm5, ymm6
	vpor	ymm5, ymm9, ymm5
	vpor	ymm5, ymm8, ymm5
	vpcmpeqb	ymm6, ymm0, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpand	ymm6, ymm6, ymm2
	vpcmpeqb	ymm3, ymm0, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpand	ymm3, ymm3, ymm4
	vpor	ymm3, ymm6, ymm3
	vpcmpeqb	ymm4, ymm0, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpand	ymm4, ymm4, ymmword ptr [rip + .LCPI1_4]
	vpor	ymm3, ymm3, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpeqb	ymm1, ymm0, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpand	ymm1, ymm14, ymm1
	vpcmpeqb	ymm2, ymm0, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpsllw	ymm2, ymm2, 7
	vpand	ymm2, ymm15, ymm2
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm13, ymm12      # ymm2 = ymm13[0],ymm12[0],ymm13[1],ymm12[1],ymm13[2],ymm12[2],ymm13[3],ymm12[3],ymm13[4],ymm12[4],ymm13[5],ymm12[5],ymm13[6],ymm12[6],ymm13[7],ymm12[7],ymm13[16],ymm12[16],ymm13[17],ymm12[17],ymm13[18],ymm12[18],ymm13[19],ymm12[19],ymm13[20],ymm12[20],ymm13[21],ymm12[21],ymm13[22],ymm12[22],ymm13[23],ymm12[23]
	vpunpckhbw	ymm0, ymm13, ymm12      # ymm0 = ymm13[8],ymm12[8],ymm13[9],ymm12[9],ymm13[10],ymm12[10],ymm13[11],ymm12[11],ymm13[12],ymm12[12],ymm13[13],ymm12[13],ymm13[14],ymm12[14],ymm13[15],ymm12[15],ymm13[24],ymm12[24],ymm13[25],ymm12[25],ymm13[26],ymm12[26],ymm13[27],ymm12[27],ymm13[28],ymm12[28],ymm13[29],ymm12[29],ymm13[30],ymm12[30],ymm13[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 408]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r11 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r11 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r11 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB1_169
# %bb.170:
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 400]      # 8-byte Reload
	jne	.LBB1_90
	jmp	.LBB1_130
.Lfunc_end1:
	.size	comparison_equal_arr_scalar_avx2, .Lfunc_end1-comparison_equal_arr_scalar_avx2
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function comparison_equal_scalar_arr_avx2
.LCPI2_0:
	.zero	32,1
.LCPI2_1:
	.zero	32,4
.LCPI2_2:
	.zero	32,8
.LCPI2_3:
	.zero	32,16
.LCPI2_4:
	.zero	32,32
.LCPI2_5:
	.zero	32,64
.LCPI2_6:
	.zero	32,128
	.text
	.globl	comparison_equal_scalar_arr_avx2
	.p2align	4, 0x90
	.type	comparison_equal_scalar_arr_avx2,@function
comparison_equal_scalar_arr_avx2:       # @comparison_equal_scalar_arr_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -32
	sub	rsp, 1280
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r11, rcx
	cmp	edi, 6
	jg	.LBB2_17
# %bb.1:
	cmp	edi, 3
	jle	.LBB2_32
# %bb.2:
	cmp	edi, 4
	je	.LBB2_60
# %bb.3:
	cmp	edi, 5
	je	.LBB2_72
# %bb.4:
	cmp	edi, 6
	jne	.LBB2_157
# %bb.5:
	mov	r13d, dword ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_7:                                # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r9, r11
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_7
# %bb.8:
	add	r11, 1
.LBB2_9:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_13
# %bb.10:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_11:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	r13d, dword ptr [rdx]
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 4]
	sete	dil
	cmp	r13d, dword ptr [rdx + 8]
	sete	r14b
	cmp	r13d, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 24]
	sete	al
	cmp	r13d, dword ptr [rdx + 28]
	sete	r11b
	cmp	r13d, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 36]
	sete	sil
	cmp	r13d, dword ptr [rdx + 40]
	sete	r8b
	cmp	r13d, dword ptr [rdx + 44]
	sete	r9b
	cmp	r13d, dword ptr [rdx + 48]
	sete	r10b
	cmp	r13d, dword ptr [rdx + 52]
	sete	r12b
	cmp	r13d, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 60]
	sete	cl
	cmp	r13d, dword ptr [rdx + 64]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 68]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 72]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 76]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 84]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 88]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 92]
	sete	r15b
	cmp	r13d, dword ptr [rdx + 96]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 100]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 104]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 108]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 112]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 116]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 120]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 124]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 80]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	esi, eax
	mov	rax, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [r11 + 1], cl
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 128
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB2_11
# %bb.12:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
.LBB2_13:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_157
# %bb.14:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	je	.LBB2_127
# %bb.15:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB2_16:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	mov	r14, r11
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_16
	jmp	.LBB2_154
.LBB2_17:
	cmp	edi, 8
	jle	.LBB2_46
# %bb.18:
	cmp	edi, 9
	je	.LBB2_83
# %bb.19:
	cmp	edi, 11
	je	.LBB2_94
# %bb.20:
	cmp	edi, 12
	jne	.LBB2_157
# %bb.21:
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB2_25
# %bb.22:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_23:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r15, r11
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_23
# %bb.24:
	add	r11, 1
.LBB2_25:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_29
# %bb.26:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	mov	qword ptr [rsp + 152], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_27:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	vucomisd	xmm0, qword ptr [rdx]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 8]
	sete	r8b
	vucomisd	xmm0, qword ptr [rdx + 16]
	sete	r14b
	vucomisd	xmm0, qword ptr [rdx + 24]
	sete	r13b
	vucomisd	xmm0, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 48]
	sete	al
	vucomisd	xmm0, qword ptr [rdx + 56]
	sete	r11b
	vucomisd	xmm0, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 72]
	sete	sil
	vucomisd	xmm0, qword ptr [rdx + 80]
	sete	dil
	vucomisd	xmm0, qword ptr [rdx + 88]
	sete	r9b
	vucomisd	xmm0, qword ptr [rdx + 96]
	sete	r10b
	vucomisd	xmm0, qword ptr [rdx + 104]
	sete	r12b
	vucomisd	xmm0, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 120]
	sete	cl
	vucomisd	xmm0, qword ptr [rdx + 128]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 136]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 144]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 152]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 168]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 176]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 184]
	sete	r15b
	vucomisd	xmm0, qword ptr [rdx + 192]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 200]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 208]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 216]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 224]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 232]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 240]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 248]
	sete	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	sil, sil
	add	sil, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	shl	dil, 2
	or	dil, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r13b
	mov	r8d, eax
	shl	r9b, 3
	or	r9b, dil
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], bl
	add	rdx, 256
	add	r14, 4
	mov	r11, r14
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB2_27
# %bb.28:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
.LBB2_29:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_157
# %bb.30:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB2_136
# %bb.31:
	xor	edi, edi
	jmp	.LBB2_138
.LBB2_32:
	cmp	edi, 2
	je	.LBB2_105
# %bb.33:
	cmp	edi, 3
	jne	.LBB2_157
# %bb.34:
	mov	r14b, byte ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_38
# %bb.35:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_36:                               # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r12, r11
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_36
# %bb.37:
	add	r11, 1
.LBB2_38:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB2_128
# %bb.39:
	cmp	r15, 32
	mov	dword ptr [rsp + 28], r14d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 392], r15      # 8-byte Spill
	jb	.LBB2_42
# %bb.40:
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	cmp	r11, rax
	jae	.LBB2_165
# %bb.41:
	lea	rax, [r11 + 4*r15]
	cmp	rdx, rax
	jae	.LBB2_165
.LBB2_42:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rdx
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
.LBB2_43:
	sub	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_44:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	r14b, byte ptr [r12]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 1]
	sete	r10b
	cmp	r14b, byte ptr [r12 + 2]
	sete	bl
	cmp	r14b, byte ptr [r12 + 3]
	sete	r13b
	cmp	r14b, byte ptr [r12 + 4]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 5]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 6]
	sete	al
	cmp	r14b, byte ptr [r12 + 7]
	sete	r12b
	cmp	r14b, byte ptr [rcx + 8]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 9]
	sete	sil
	cmp	r14b, byte ptr [rcx + 10]
	sete	dil
	cmp	r14b, byte ptr [rcx + 11]
	sete	r9b
	cmp	r14b, byte ptr [rcx + 12]
	sete	r11b
	cmp	r14b, byte ptr [rcx + 13]
	sete	r15b
	cmp	r14b, byte ptr [rcx + 14]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 15]
	sete	r8b
	cmp	r14b, byte ptr [rcx + 16]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 17]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 18]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 19]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 20]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 21]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 22]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 23]
	sete	r14b
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 24]
	sete	byte ptr [rsp + 272]            # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 25]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 26]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 27]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 28]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 29]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 30]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 31]
	sete	dl
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 320]      # 1-byte Folded Reload
	shl	al, 6
	shl	r12b, 7
	or	r12b, al
	shl	bl, 2
	or	bl, r10b
	add	sil, sil
	add	sil, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, bl
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r9b, 3
	or	r9b, dil
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r11b, 4
	or	r11b, r9b
	shl	r15b, 5
	or	r15b, r11b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r12b, bl
	or	r8b, r15b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 288]        # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, al
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	rsi, qword ptr [rsp + 376]      # 8-byte Reload
	mov	byte ptr [rsi], r12b
	movzx	edi, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r8b
	or	r14b, bl
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	byte ptr [rsi + 3], dl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 376], rsi      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB2_44
# %bb.45:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	jmp	.LBB2_129
.LBB2_46:
	cmp	edi, 7
	je	.LBB2_117
# %bb.47:
	cmp	edi, 8
	jne	.LBB2_157
# %bb.48:
	mov	r13, qword ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_52
# %bb.49:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_50:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r9, r11
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_50
# %bb.51:
	add	r11, 1
.LBB2_52:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_56
# %bb.53:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_54:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	r13, qword ptr [rdx]
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 8]
	sete	dil
	cmp	r13, qword ptr [rdx + 16]
	sete	r14b
	cmp	r13, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 48]
	sete	al
	cmp	r13, qword ptr [rdx + 56]
	sete	r11b
	cmp	r13, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 72]
	sete	sil
	cmp	r13, qword ptr [rdx + 80]
	sete	r8b
	cmp	r13, qword ptr [rdx + 88]
	sete	r9b
	cmp	r13, qword ptr [rdx + 96]
	sete	r10b
	cmp	r13, qword ptr [rdx + 104]
	sete	r12b
	cmp	r13, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 120]
	sete	cl
	cmp	r13, qword ptr [rdx + 128]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 136]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 144]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 152]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 168]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 176]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 184]
	sete	r15b
	cmp	r13, qword ptr [rdx + 192]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 200]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 208]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 216]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 224]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 232]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 240]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 248]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 80]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	esi, eax
	mov	rax, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [r11 + 1], cl
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 256
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB2_54
# %bb.55:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
.LBB2_56:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_157
# %bb.57:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	je	.LBB2_93
# %bb.58:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB2_59:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	mov	r14, r11
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_59
	jmp	.LBB2_146
.LBB2_60:
	movzx	r13d, word ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_64
# %bb.61:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_62:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r9, r11
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_62
# %bb.63:
	add	r11, 1
.LBB2_64:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_68
# %bb.65:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_66:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	r13w, word ptr [rdx]
	sete	al
	cmp	r13w, word ptr [rdx + 2]
	sete	dil
	cmp	r13w, word ptr [rdx + 4]
	sete	r14b
	cmp	r13w, word ptr [rdx + 6]
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 8]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 10]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 12]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 14]
	sete	r11b
	cmp	r13w, word ptr [rdx + 16]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 18]
	sete	sil
	cmp	r13w, word ptr [rdx + 20]
	sete	r8b
	cmp	r13w, word ptr [rdx + 22]
	sete	r9b
	cmp	r13w, word ptr [rdx + 24]
	sete	r10b
	cmp	r13w, word ptr [rdx + 26]
	sete	r12b
	cmp	r13w, word ptr [rdx + 28]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 30]
	sete	cl
	cmp	r13w, word ptr [rdx + 32]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 34]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 36]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 38]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 40]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 42]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 44]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 46]
	sete	r15b
	cmp	r13w, word ptr [rdx + 48]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 50]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 52]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 54]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 56]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 58]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 60]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 62]
	sete	bl
	add	dil, dil
	or	dil, al
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 88]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	esi, eax
	mov	rax, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [r11 + 1], cl
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 64
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB2_66
# %bb.67:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
.LBB2_68:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_157
# %bb.69:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	je	.LBB2_82
# %bb.70:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB2_71:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	mov	r14, r11
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13w, word ptr [rdx + 2]
	lea	rdx, [rdx + 4]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_71
	jmp	.LBB2_142
.LBB2_72:
	movzx	r13d, word ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_76
# %bb.73:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_74:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r9, r11
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_74
# %bb.75:
	add	r11, 1
.LBB2_76:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_80
# %bb.77:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_78:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	r13w, word ptr [rdx]
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 2]
	sete	dil
	cmp	r13w, word ptr [rdx + 4]
	sete	r14b
	cmp	r13w, word ptr [rdx + 6]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 8]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 10]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 12]
	sete	al
	cmp	r13w, word ptr [rdx + 14]
	sete	r11b
	cmp	r13w, word ptr [rdx + 16]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 18]
	sete	sil
	cmp	r13w, word ptr [rdx + 20]
	sete	r8b
	cmp	r13w, word ptr [rdx + 22]
	sete	r9b
	cmp	r13w, word ptr [rdx + 24]
	sete	r10b
	cmp	r13w, word ptr [rdx + 26]
	sete	r12b
	cmp	r13w, word ptr [rdx + 28]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 30]
	sete	cl
	cmp	r13w, word ptr [rdx + 32]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 34]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 36]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 38]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 40]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 42]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 44]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 46]
	sete	r15b
	cmp	r13w, word ptr [rdx + 48]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 50]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 52]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 54]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 56]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 58]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 60]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 62]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 80]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	esi, eax
	mov	rax, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [r11 + 1], cl
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 64
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB2_78
# %bb.79:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
.LBB2_80:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_157
# %bb.81:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB2_140
.LBB2_82:
	xor	edi, edi
	jmp	.LBB2_142
.LBB2_83:
	mov	r13, qword ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_87
# %bb.84:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_85:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r9, r11
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_85
# %bb.86:
	add	r11, 1
.LBB2_87:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_91
# %bb.88:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_89:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	r13, qword ptr [rdx]
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 8]
	sete	dil
	cmp	r13, qword ptr [rdx + 16]
	sete	r14b
	cmp	r13, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 48]
	sete	al
	cmp	r13, qword ptr [rdx + 56]
	sete	r11b
	cmp	r13, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 72]
	sete	sil
	cmp	r13, qword ptr [rdx + 80]
	sete	r8b
	cmp	r13, qword ptr [rdx + 88]
	sete	r9b
	cmp	r13, qword ptr [rdx + 96]
	sete	r10b
	cmp	r13, qword ptr [rdx + 104]
	sete	r12b
	cmp	r13, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 120]
	sete	cl
	cmp	r13, qword ptr [rdx + 128]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 136]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 144]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 152]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 168]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 176]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 184]
	sete	r15b
	cmp	r13, qword ptr [rdx + 192]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 200]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 208]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 216]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 224]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 232]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 240]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 248]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 80]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	esi, eax
	mov	rax, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [r11 + 1], cl
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 256
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB2_89
# %bb.90:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
.LBB2_91:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_157
# %bb.92:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB2_144
.LBB2_93:
	xor	edi, edi
	jmp	.LBB2_146
.LBB2_94:
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB2_98
# %bb.95:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_96:                               # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r15, r11
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_96
# %bb.97:
	add	r11, 1
.LBB2_98:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_102
# %bb.99:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	mov	qword ptr [rsp + 152], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_100:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	vucomiss	xmm0, dword ptr [rdx]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 4]
	sete	r8b
	vucomiss	xmm0, dword ptr [rdx + 8]
	sete	r11b
	vucomiss	xmm0, dword ptr [rdx + 12]
	sete	r13b
	vucomiss	xmm0, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 24]
	sete	al
	vucomiss	xmm0, dword ptr [rdx + 28]
	sete	r14b
	vucomiss	xmm0, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 36]
	sete	sil
	vucomiss	xmm0, dword ptr [rdx + 40]
	sete	dil
	vucomiss	xmm0, dword ptr [rdx + 44]
	sete	r9b
	vucomiss	xmm0, dword ptr [rdx + 48]
	sete	r10b
	vucomiss	xmm0, dword ptr [rdx + 52]
	sete	r12b
	vucomiss	xmm0, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 60]
	sete	cl
	vucomiss	xmm0, dword ptr [rdx + 64]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 68]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 72]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 76]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 84]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 88]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 92]
	sete	r15b
	vucomiss	xmm0, dword ptr [rdx + 96]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 100]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 104]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 108]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 112]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 116]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 120]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 124]
	sete	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	r14b, 7
	or	r14b, al
	shl	r11b, 2
	or	r11b, r8b
	add	sil, sil
	add	sil, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	shl	dil, 2
	or	dil, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r13b
	mov	r8d, eax
	shl	r9b, 3
	or	r9b, dil
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r14b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r11], r14b
	movzx	esi, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r11 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 128
	add	r11, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB2_100
# %bb.101:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
.LBB2_102:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_157
# %bb.103:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB2_148
# %bb.104:
	xor	edi, edi
	jmp	.LBB2_150
.LBB2_105:
	mov	r14b, byte ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_109
# %bb.106:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_107:                              # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r12, r11
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_107
# %bb.108:
	add	r11, 1
.LBB2_109:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB2_132
# %bb.110:
	cmp	r15, 32
	mov	dword ptr [rsp + 28], r14d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 392], r15      # 8-byte Spill
	jb	.LBB2_113
# %bb.111:
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	cmp	r11, rax
	jae	.LBB2_168
# %bb.112:
	lea	rax, [r11 + 4*r15]
	cmp	rdx, rax
	jae	.LBB2_168
.LBB2_113:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rdx
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
.LBB2_114:
	sub	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_115:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	r14b, byte ptr [r12]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 1]
	sete	r10b
	cmp	r14b, byte ptr [r12 + 2]
	sete	bl
	cmp	r14b, byte ptr [r12 + 3]
	sete	r13b
	cmp	r14b, byte ptr [r12 + 4]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 5]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 6]
	sete	al
	cmp	r14b, byte ptr [r12 + 7]
	sete	r12b
	cmp	r14b, byte ptr [rcx + 8]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 9]
	sete	sil
	cmp	r14b, byte ptr [rcx + 10]
	sete	dil
	cmp	r14b, byte ptr [rcx + 11]
	sete	r9b
	cmp	r14b, byte ptr [rcx + 12]
	sete	r11b
	cmp	r14b, byte ptr [rcx + 13]
	sete	r15b
	cmp	r14b, byte ptr [rcx + 14]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 15]
	sete	r8b
	cmp	r14b, byte ptr [rcx + 16]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 17]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 18]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 19]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 20]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 21]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 22]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 23]
	sete	r14b
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 24]
	sete	byte ptr [rsp + 272]            # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 25]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 26]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 27]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 28]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 29]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 30]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	dl, byte ptr [rcx + 31]
	sete	dl
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 320]      # 1-byte Folded Reload
	shl	al, 6
	shl	r12b, 7
	or	r12b, al
	shl	bl, 2
	or	bl, r10b
	add	sil, sil
	add	sil, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, bl
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r9b, 3
	or	r9b, dil
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r11b, 4
	or	r11b, r9b
	shl	r15b, 5
	or	r15b, r11b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r12b, bl
	or	r8b, r15b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 288]        # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, al
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	rsi, qword ptr [rsp + 376]      # 8-byte Reload
	mov	byte ptr [rsi], r12b
	movzx	edi, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r8b
	or	r14b, bl
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	byte ptr [rsi + 3], dl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 376], rsi      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB2_115
# %bb.116:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	jmp	.LBB2_133
.LBB2_117:
	mov	r13d, dword ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_121
# %bb.118:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB2_119:                              # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	mov	r9, r11
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_119
# %bb.120:
	add	r11, 1
.LBB2_121:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_125
# %bb.122:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_123:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	r13d, dword ptr [rdx]
	sete	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 4]
	sete	dil
	cmp	r13d, dword ptr [rdx + 8]
	sete	r14b
	cmp	r13d, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 24]
	sete	al
	cmp	r13d, dword ptr [rdx + 28]
	sete	r11b
	cmp	r13d, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 36]
	sete	sil
	cmp	r13d, dword ptr [rdx + 40]
	sete	r8b
	cmp	r13d, dword ptr [rdx + 44]
	sete	r9b
	cmp	r13d, dword ptr [rdx + 48]
	sete	r10b
	cmp	r13d, dword ptr [rdx + 52]
	sete	r12b
	cmp	r13d, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 60]
	sete	cl
	cmp	r13d, dword ptr [rdx + 64]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 68]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 72]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 76]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 84]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 88]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 92]
	sete	r15b
	cmp	r13d, dword ptr [rdx + 96]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 100]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 104]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 108]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 112]
	sete	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 116]
	sete	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 120]
	sete	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 124]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 80]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	esi, eax
	mov	rax, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [r11 + 1], cl
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 128
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB2_123
# %bb.124:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
.LBB2_125:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_157
# %bb.126:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB2_152
.LBB2_127:
	xor	edi, edi
	jmp	.LBB2_154
.LBB2_128:
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
	mov	r12, rdx
.LBB2_129:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB2_157
# %bb.130:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB2_135
# %bb.158:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 376]      # 8-byte Reload
	.p2align	4, 0x90
.LBB2_159:                              # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [r12 + rsi]
	sete	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	r14b, byte ptr [r12 + rsi + 1]
	lea	rsi, [rsi + 2]
	sete	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB2_159
	jmp	.LBB2_162
.LBB2_132:
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
	mov	r12, rdx
.LBB2_133:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB2_157
# %bb.134:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB2_160
.LBB2_135:
	xor	esi, esi
	jmp	.LBB2_163
.LBB2_136:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB2_137:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	mov	r14, r11
	movzx	r9d, byte ptr [r11 + rsi]
	xor	al, r9b
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	vucomisd	xmm0, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_137
.LBB2_138:
	test	r8b, 1
	je	.LBB2_157
# %bb.139:
	vucomisd	xmm0, qword ptr [rdx]
	jmp	.LBB2_156
.LBB2_140:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB2_141:                              # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	mov	r14, r11
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13w, word ptr [rdx + 2]
	lea	rdx, [rdx + 4]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_141
.LBB2_142:
	test	r8b, 1
	je	.LBB2_157
# %bb.143:
	cmp	r13w, word ptr [rdx]
	jmp	.LBB2_156
.LBB2_144:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB2_145:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	mov	r14, r11
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_145
.LBB2_146:
	test	r8b, 1
	je	.LBB2_157
# %bb.147:
	cmp	r13, qword ptr [rdx]
	jmp	.LBB2_156
.LBB2_148:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB2_149:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	mov	r14, r11
	movzx	r9d, byte ptr [r11 + rsi]
	xor	al, r9b
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	vucomiss	xmm0, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_149
.LBB2_150:
	test	r8b, 1
	je	.LBB2_157
# %bb.151:
	vucomiss	xmm0, dword ptr [rdx]
	jmp	.LBB2_156
.LBB2_152:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB2_153:                              # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	mov	r14, r11
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_153
.LBB2_154:
	test	r8b, 1
	je	.LBB2_157
# %bb.155:
	cmp	r13d, dword ptr [rdx]
.LBB2_156:
	sete	al
	neg	al
	mov	rdx, rdi
	shr	rdx, 3
	mov	sil, byte ptr [r11 + rdx]
	and	dil, 7
	mov	bl, 1
	mov	ecx, edi
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r11 + rdx], bl
.LBB2_157:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB2_160:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 376]      # 8-byte Reload
	.p2align	4, 0x90
.LBB2_161:                              # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [r12 + rsi]
	sete	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	r14b, byte ptr [r12 + rsi + 1]
	lea	rsi, [rsi + 2]
	sete	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB2_161
.LBB2_162:
	add	r12, rsi
.LBB2_163:
	test	r8b, 1
	je	.LBB2_157
# %bb.164:
	cmp	r14b, byte ptr [r12]
	sete	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 376]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB2_157
.LBB2_165:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r15      # 8-byte Spill
	lea	rax, [r11 + 4*r15]
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_166:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 408], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 176], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 136], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rdx + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rdx + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rdx + rcx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rdx + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rdx + rcx + 2]
	mov	rdi, rcx
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	mov	rcx, rbx
	movzx	eax, byte ptr [rdx + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rdi + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rdx + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rdx + rdi + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 4]
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rdx + rdi + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rdx + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rdx + rdi + 6]
	mov	qword ptr [rsp + 256], rdi      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rdx + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rdx + rdi + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rdx + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 544
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	or	rbx, 576
	mov	qword ptr [rsp + 168], rbx      # 8-byte Spill
	mov	rax, rcx
	or	rax, 608
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	mov	r12, rcx
	or	r12, 640
	mov	qword ptr [rsp + 240], r12      # 8-byte Spill
	mov	r14, rcx
	or	r14, 672
	mov	qword ptr [rsp + 248], r14      # 8-byte Spill
	mov	rax, rcx
	or	rax, 704
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rcx
	or	rax, 736
	mov	rdi, rax
	mov	r9, rcx
	or	r9, 768
	mov	qword ptr [rsp + 192], r9       # 8-byte Spill
	mov	r15, rcx
	or	r15, 800
	mov	qword ptr [rsp + 184], r15      # 8-byte Spill
	mov	r11, rcx
	or	r11, 832
	mov	qword ptr [rsp + 224], r11      # 8-byte Spill
	mov	r10, rcx
	or	r10, 864
	mov	qword ptr [rsp + 88], r10       # 8-byte Spill
	mov	r8, rcx
	or	r8, 896
	mov	qword ptr [rsp + 128], r8       # 8-byte Spill
	mov	rsi, rcx
	or	rsi, 928
	mov	qword ptr [rsp + 208], rsi      # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 264], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 80], rcx       # 8-byte Spill
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm9, xmm0, byte ptr [rdx + r13], 1
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rbx], 2
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14], 5
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi], 7
	mov	r13, rdi
	mov	qword ptr [rsp + 200], rdi      # 8-byte Spill
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx], 15
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14], 1
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10], 2
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12], 3
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8], 4
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11], 5
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9], 6
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 10
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx], 11
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 1
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 3
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 4
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 5
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 7
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 8
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 9
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 12
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r14 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 14
	vinserti128	ymm15, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 1], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 8]
	vmovd	xmm9, esi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 8]
	vmovd	xmm10, esi
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 2], 1
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 2], 2
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 2], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 5
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 2], 6
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 2], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 8
	mov	r12, r13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 2], 9
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 2], 10
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 2], 11
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 2], 12
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 2], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 7
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 8
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 10
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 11
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rdx + r8 + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 3], 3
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 4
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 3], 7
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 3], 13
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 14
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rdx + rax + 3], 1
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 3], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 4
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 3], 5
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 7
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 8
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 3], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 3], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 9]
	vmovd	xmm8, esi
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 9]
	vmovd	xmm11, esi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 4], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 3
	mov	r13, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 4], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 4], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 4], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 9
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 4], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 4], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm13, byte ptr [rdx + rax + 4], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 4], 2
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 4], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 4], 5
	mov	rsi, r14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 6
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 4], 7
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 4], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 10
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 11
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 13
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 4], 15
	vpinsrb	xmm4, xmm14, byte ptr [rdx + r8 + 5], 1
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 5], 2
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 5
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 9
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 12
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 5], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 15
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rdx + rdi + 5], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 5], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 5], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 5], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 5], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 5], 8
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 5], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	vpinsrb	xmm0, xmm5, byte ptr [rdx + r12 + 5], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 10]
	vmovd	xmm3, esi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 10]
	vmovd	xmm4, esi
	mov	r14, r8
	vpinsrb	xmm0, xmm12, byte ptr [rdx + r8 + 6], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 6], 3
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 6], 4
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 6], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 6
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 6], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 6], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 6], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + rcx + 6], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 3
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 5
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 6], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 10
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 11
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 12
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 6], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 14
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 2
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 7], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 5
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 7], 7
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 7], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 9
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 13
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 7], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 7], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 7], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rcx + 7], 14
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 11]
	vmovd	xmm1, esi
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 11]
	vmovd	xmm2, esi
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rcx + 8], 1
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 8], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 8], 3
	mov	r13, r11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 8], 4
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 8], 5
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 6
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 8], 8
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 8], 9
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 8], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 8], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rdx + rax + 8], 1
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 8], 2
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 8], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 5
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 7
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 11
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 14
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 8], 15
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rdx + r12 + 9], 1
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 9], 3
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r13 + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r11 + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 8
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 9], 9
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 11
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r11 + 9], 12
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 14
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 9], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm7, xmm11, byte ptr [rdx + rcx + 9], 1
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 9], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 9], 4
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r13 + 9], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 9], 6
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 7
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 9], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + rax + 9], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 12]
	vmovd	xmm0, esi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 12]
	vmovd	xmm5, esi
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 2
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 6
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 10], 7
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 10], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 9
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 10], 12
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 13
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 10], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 10], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 10], 3
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 10], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 10], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 10
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 11
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 13
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 10], 14
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 3
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 4
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 5
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 11], 8
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 9
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 11], 10
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 11], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 11], 14
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 11], 15
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 11], 1
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 11], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 11], 5
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 6
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 11], 7
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 11], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 11], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm3  # 32-byte Spill
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 11], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 13]
	vmovd	xmm3, esi
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 13]
	vmovd	xmm1, esi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 4
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 12], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 12], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 12], 11
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 13
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 12], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 12], 15
	vpinsrb	xmm2, xmm5, byte ptr [rdx + rdi + 12], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 2
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 12], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 12], 7
	mov	rax, r12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 12], 8
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 12], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 10
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 11
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 12
	mov	r9, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 12], 13
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 12], 14
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 12], 15
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 1
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 2
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 3
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 5
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 6
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 7
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 8
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 13], 9
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 12
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 13], 14
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 13], 5
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 13], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 13], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rax + 13], 15
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r13 + 14]
	vmovd	xmm1, esi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 14]
	vmovd	xmm0, esi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 1
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 2
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 14], 3
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 4
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 14], 5
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 14], 9
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 14], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 14], 15
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 14], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 14], 6
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 14], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 8
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 14], 9
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 14], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 12
	mov	r11, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 14], 13
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 15
	movzx	esi, byte ptr [rdx + r13 + 15]
	vmovd	xmm2, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 15], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 15], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 15], 6
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 15], 7
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 15], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 9
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 15]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 15], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 15], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 7
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 15], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 10
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 13
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 14
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 16]
	vmovd	xmm0, esi
	mov	r9, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 16], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 3
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 4
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 5
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 16], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 16], 8
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 12
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 16], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 16], 15
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rbx + 16]
	vmovd	xmm1, esi
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 16], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 16], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 16], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 16], 9
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 16], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 16], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 16], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 17]
	vmovd	xmm2, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 17], 1
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 17], 2
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 17], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 4
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 17], 5
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 17], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 7
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 17], 8
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 17], 9
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 11
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 17], 12
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 17], 15
	movzx	esi, byte ptr [rdx + rbx + 17]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 17], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 2
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 17], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 9
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 12
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 13
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rsi + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 18]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 18], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 18], 3
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 18], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 18], 6
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 18], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 18], 9
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 18], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 18], 12
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 18], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 15
	movzx	esi, byte ptr [rdx + rbx + 18]
	vmovd	xmm1, esi
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 18], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 6
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 18], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 12
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 18], 13
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 14
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 18], 15
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 19]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 3
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 4
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 5
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 6
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 7
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 8
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 19], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 19], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 19], 14
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 19], 15
	movzx	esi, byte ptr [rdx + rbx + 19]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 19], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 2
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 19], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 5
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 19], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 19], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 11
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 19], 13
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 19], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	movzx	esi, byte ptr [rdx + r15 + 20]
	vmovd	xmm0, esi
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 20], 1
	mov	r12, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 20], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 3
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 20], 4
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 20], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 9
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 20], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 20], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 20]
	vmovd	xmm1, esi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 20], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 20], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 20], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 9
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 10
	mov	r8, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 20], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 12
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 20], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 20], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 15
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 21]
	vmovd	xmm2, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 21], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 21], 5
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 21], 6
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 21], 7
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 21], 8
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 21], 9
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 10
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 21], 11
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 12
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 21], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 15
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 21]
	vmovd	xmm3, esi
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 21], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 6
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 21], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 21], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 21], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 21], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r8 + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 22]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 3
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 4
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 22], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 22], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 22], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 22], 9
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 22], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 22], 11
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 22], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 22], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 14
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 15
	mov	r10, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r10 + 22]
	vmovd	xmm1, esi
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 1
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 22], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 4
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 22], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 22], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 10
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 22], 11
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 22], 15
	movzx	esi, byte ptr [rdx + rax + 23]
	vmovd	xmm2, esi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 2
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 23], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 23], 5
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 23], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 23], 12
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 14
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 23], 15
	movzx	esi, byte ptr [rdx + r10 + 23]
	vmovd	xmm3, esi
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 23], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 23], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 3
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 23], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 23], 5
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 23], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 8
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 23], 9
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 23], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 23], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 12
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 23], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	r9, qword ptr [rsp + 256]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r9 + 24]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 24], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 7
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 8
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 9
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 12
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 24], 15
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 24]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 24], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 24], 4
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 24], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 7
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 24], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 10
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 11
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 24], 13
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 15
	movzx	esi, byte ptr [rdx + r9 + 25]
	vmovd	xmm2, esi
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 1
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 2
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 3
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 25], 4
	mov	r9, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 25], 5
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 25], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 9
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 25], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 25], 11
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 25], 12
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 25]
	vmovd	xmm3, esi
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 25], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 25], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 12
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 25], 14
	vinserti128	ymm9, ymm1, xmm0, 1
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r8 + 25], 15
	vinserti128	ymm8, ymm0, xmm2, 1
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 26]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 2
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 26], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 26], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 26], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 26], 6
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 26], 7
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 26], 8
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 26], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 26], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 26], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 15
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rbx + 26]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 2
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 26], 3
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 4
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 26], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 26], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 26], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 27]
	vmovd	xmm2, esi
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 27], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 27], 3
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 27], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 27], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 27], 8
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 27], 9
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 27], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 15
	movzx	esi, byte ptr [rdx + rbx + 27]
	vmovd	xmm3, esi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 27], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 27], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 27], 5
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 27], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 9
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 12
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r13 + 28]
	vmovd	xmm0, esi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 1
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 2
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 28], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 28], 4
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 28], 5
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 28], 6
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 28], 7
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 28], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 28], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 28], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 28], 11
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 28], 12
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 28], 14
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 15
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 28]
	vmovd	xmm1, esi
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 2
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 28], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 28], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 7
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 12
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 13
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 28], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 15
	movzx	esi, byte ptr [rdx + r13 + 29]
	vmovd	xmm2, esi
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 29], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 29], 3
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 29], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 29], 5
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 29], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 29], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 29], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 29], 9
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 29], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 29], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 29], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 29], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 29], 15
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r8 + 29]
	vmovd	xmm3, esi
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 29], 1
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 29], 3
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 29], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 9
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 13
	vpinsrb	xmm4, xmm3, byte ptr [rdx + r12 + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm4, byte ptr [rdx + r12 + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rdi + 30]
	vmovd	xmm0, esi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 30], 1
	movzx	esi, byte ptr [rdx + rdi + 31]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 31], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 31], 6
	mov	rdi, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 31], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 31], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 13
	mov	rax, rbx
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 31], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rdx + rax + 31], 15
	mov	rsi, r8
	movzx	eax, byte ptr [rdx + r8 + 30]
	vmovd	xmm1, eax
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 30], 1
	movzx	eax, byte ptr [rdx + r8 + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 31], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r10 + 31], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 31], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 7
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 14
	mov	rax, r12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r12 + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm0, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpeqb	ymm2, ymm0, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI2_0] # ymm1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	vpand	ymm7, ymm2, ymm1
	vpsubb	ymm11, ymm7, ymm2
	vpcmpeqb	ymm7, ymm15, ymm0
	vpand	ymm7, ymm7, ymm1
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI2_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpand	ymm12, ymm12, ymm6
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm2, ymmword ptr [rip + .LCPI2_2] # ymm2 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpand	ymm7, ymm7, ymm2
	vpcmpeqb	ymm12, ymm14, ymm0
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI2_3] # ymm4 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpand	ymm12, ymm12, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI2_4] # ymm13 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpand	ymm12, ymm12, ymm13
	vmovdqa	ymm14, ymm13
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI2_5] # ymm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpand	ymm7, ymm7, ymm5
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vmovdqa	ymm15, ymmword ptr [rip + .LCPI2_6] # ymm15 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm12, ymm12, ymm15
	vpor	ymm7, ymm12, ymm7
	vpor	ymm13, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpand	ymm12, ymm7, ymm1
	vpsubb	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm1
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm6
	vpor	ymm11, ymm12, ymm11
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm4
	vpor	ymm11, ymm11, ymm12
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm14
	vmovdqa	ymm3, ymm14
	vpor	ymm11, ymm11, ymm12
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm5
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vpand	ymm12, ymm12, ymm15
	vpor	ymm11, ymm11, ymm12
	vpor	ymm12, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpand	ymm11, ymm7, ymm1
	vpsubb	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm1
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm6
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm4
	vpor	ymm11, ymm11, ymm14
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm3
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm10, ymm10, ymm0
	vmovdqa	ymm14, ymm5
	vpand	ymm10, ymm10, ymm5
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpsllw	ymm11, ymm11, 7
	vpand	ymm11, ymm11, ymm15
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpeqb	ymm8, ymm8, ymm0
	vpand	ymm10, ymm8, ymm1
	vpsubb	ymm8, ymm10, ymm8
	vpcmpeqb	ymm9, ymm9, ymm0
	vpand	ymm9, ymm9, ymm1
	vpcmpeqb	ymm5, ymm0, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpand	ymm5, ymm5, ymm6
	vpor	ymm5, ymm9, ymm5
	vpor	ymm5, ymm8, ymm5
	vpcmpeqb	ymm6, ymm0, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpand	ymm6, ymm6, ymm2
	vpcmpeqb	ymm3, ymm0, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpand	ymm3, ymm3, ymm4
	vpor	ymm3, ymm6, ymm3
	vpcmpeqb	ymm4, ymm0, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpand	ymm4, ymm4, ymmword ptr [rip + .LCPI2_4]
	vpor	ymm3, ymm3, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpeqb	ymm1, ymm0, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpand	ymm1, ymm14, ymm1
	vpcmpeqb	ymm2, ymm0, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpsllw	ymm2, ymm2, 7
	vpand	ymm2, ymm15, ymm2
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm13, ymm12      # ymm2 = ymm13[0],ymm12[0],ymm13[1],ymm12[1],ymm13[2],ymm12[2],ymm13[3],ymm12[3],ymm13[4],ymm12[4],ymm13[5],ymm12[5],ymm13[6],ymm12[6],ymm13[7],ymm12[7],ymm13[16],ymm12[16],ymm13[17],ymm12[17],ymm13[18],ymm12[18],ymm13[19],ymm12[19],ymm13[20],ymm12[20],ymm13[21],ymm12[21],ymm13[22],ymm12[22],ymm13[23],ymm12[23]
	vpunpckhbw	ymm0, ymm13, ymm12      # ymm0 = ymm13[8],ymm12[8],ymm13[9],ymm12[9],ymm13[10],ymm12[10],ymm13[11],ymm12[11],ymm13[12],ymm12[12],ymm13[13],ymm12[13],ymm13[14],ymm12[14],ymm13[15],ymm12[15],ymm13[24],ymm12[24],ymm13[25],ymm12[25],ymm13[26],ymm12[26],ymm13[27],ymm12[27],ymm13[28],ymm12[28],ymm13[29],ymm12[29],ymm13[30],ymm12[30],ymm13[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 408]      # 8-byte Reload
	vmovdqu	ymmword ptr [rdi + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [rdi + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [rdi + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [rdi + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB2_166
# %bb.167:
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 400]      # 8-byte Reload
	jne	.LBB2_43
	jmp	.LBB2_129
.LBB2_168:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r15      # 8-byte Spill
	lea	rax, [r11 + 4*r15]
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_169:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 408], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 176], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 136], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rdx + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rdx + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rdx + rcx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rdx + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rdx + rcx + 2]
	mov	rdi, rcx
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	mov	rcx, rbx
	movzx	eax, byte ptr [rdx + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rdi + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rdx + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rdx + rdi + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 4]
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rdx + rdi + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rdx + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rdx + rdi + 6]
	mov	qword ptr [rsp + 256], rdi      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rdx + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rdx + rdi + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rdx + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 544
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	or	rbx, 576
	mov	qword ptr [rsp + 168], rbx      # 8-byte Spill
	mov	rax, rcx
	or	rax, 608
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	mov	r12, rcx
	or	r12, 640
	mov	qword ptr [rsp + 240], r12      # 8-byte Spill
	mov	r14, rcx
	or	r14, 672
	mov	qword ptr [rsp + 248], r14      # 8-byte Spill
	mov	rax, rcx
	or	rax, 704
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rcx
	or	rax, 736
	mov	rdi, rax
	mov	r9, rcx
	or	r9, 768
	mov	qword ptr [rsp + 192], r9       # 8-byte Spill
	mov	r15, rcx
	or	r15, 800
	mov	qword ptr [rsp + 184], r15      # 8-byte Spill
	mov	r11, rcx
	or	r11, 832
	mov	qword ptr [rsp + 224], r11      # 8-byte Spill
	mov	r10, rcx
	or	r10, 864
	mov	qword ptr [rsp + 88], r10       # 8-byte Spill
	mov	r8, rcx
	or	r8, 896
	mov	qword ptr [rsp + 128], r8       # 8-byte Spill
	mov	rsi, rcx
	or	rsi, 928
	mov	qword ptr [rsp + 208], rsi      # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 264], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 80], rcx       # 8-byte Spill
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm9, xmm0, byte ptr [rdx + r13], 1
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rbx], 2
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14], 5
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi], 7
	mov	r13, rdi
	mov	qword ptr [rsp + 200], rdi      # 8-byte Spill
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx], 15
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14], 1
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10], 2
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12], 3
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8], 4
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11], 5
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9], 6
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 10
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx], 11
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 1
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 3
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 4
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 5
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 7
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 8
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 9
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 12
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r14 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 14
	vinserti128	ymm15, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 1], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 8]
	vmovd	xmm9, esi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 8]
	vmovd	xmm10, esi
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 2], 1
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 2], 2
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 2], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 5
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 2], 6
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 2], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 8
	mov	r12, r13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 2], 9
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 2], 10
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 2], 11
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 2], 12
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 2], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 7
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 8
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 10
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 11
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rdx + r8 + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 3], 3
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 4
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 3], 7
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 3], 13
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 14
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rdx + rax + 3], 1
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 3], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 4
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 3], 5
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 7
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 8
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 3], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 3], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 9]
	vmovd	xmm8, esi
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 9]
	vmovd	xmm11, esi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 4], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 3
	mov	r13, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 4], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 4], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 4], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 9
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 4], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 4], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm13, byte ptr [rdx + rax + 4], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 4], 2
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 4], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 4], 5
	mov	rsi, r14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 6
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 4], 7
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 4], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 10
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 11
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 13
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 4], 15
	vpinsrb	xmm4, xmm14, byte ptr [rdx + r8 + 5], 1
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 5], 2
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 5
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 9
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 12
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 5], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 15
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rdx + rdi + 5], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 5], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 5], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 5], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 5], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 5], 8
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 5], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	vpinsrb	xmm0, xmm5, byte ptr [rdx + r12 + 5], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 10]
	vmovd	xmm3, esi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 10]
	vmovd	xmm4, esi
	mov	r14, r8
	vpinsrb	xmm0, xmm12, byte ptr [rdx + r8 + 6], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 6], 3
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 6], 4
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 6], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 6
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 6], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 6], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 6], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + rcx + 6], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 3
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 5
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 6], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 10
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 11
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 12
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 6], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 14
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 2
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 7], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 5
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 7], 7
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 7], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 9
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 13
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 7], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 7], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 7], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rcx + 7], 14
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 11]
	vmovd	xmm1, esi
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 11]
	vmovd	xmm2, esi
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rcx + 8], 1
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 8], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 8], 3
	mov	r13, r11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 8], 4
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 8], 5
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 6
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 8], 8
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 8], 9
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 8], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 8], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rdx + rax + 8], 1
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 8], 2
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 8], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 5
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 7
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 11
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 12
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 14
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 8], 15
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rdx + r12 + 9], 1
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 9], 3
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r13 + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r11 + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 8
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 9], 9
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 11
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r11 + 9], 12
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 14
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 9], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm7, xmm11, byte ptr [rdx + rcx + 9], 1
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 9], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 9], 4
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r13 + 9], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 9], 6
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 7
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 9], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + rax + 9], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 12]
	vmovd	xmm0, esi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 12]
	vmovd	xmm5, esi
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 2
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 6
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 10], 7
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 10], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 9
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 10], 12
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 13
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 10], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 10], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 10], 3
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 10], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 10], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 10
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 11
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 12
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 13
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 10], 14
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 3
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 4
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 5
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 11], 8
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 9
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 11], 10
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 11], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 11], 14
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 11], 15
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 11], 1
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 11], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 11], 5
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 6
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 11], 7
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 11], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 11], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm3  # 32-byte Spill
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 11], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 13]
	vmovd	xmm3, esi
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 13]
	vmovd	xmm1, esi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 4
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 12], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 12], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 12], 11
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 13
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 12], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 12], 15
	vpinsrb	xmm2, xmm5, byte ptr [rdx + rdi + 12], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 2
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 12], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 12], 7
	mov	rax, r12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 12], 8
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 12], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 10
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 11
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 12
	mov	r9, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 12], 13
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 12], 14
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 12], 15
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 1
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 2
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 3
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 5
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 6
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 7
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 8
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 13], 9
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 12
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 13], 14
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 13], 5
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 13], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 13], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rax + 13], 15
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r13 + 14]
	vmovd	xmm1, esi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 14]
	vmovd	xmm0, esi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 1
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 2
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 14], 3
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 4
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 14], 5
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 14], 9
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 14], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 14], 15
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 14], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 14], 6
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 14], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 8
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 14], 9
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 14], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 12
	mov	r11, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 14], 13
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 15
	movzx	esi, byte ptr [rdx + r13 + 15]
	vmovd	xmm2, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 15], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 15], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 15], 6
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 15], 7
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 15], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 9
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 15]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 15], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 15], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 7
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 15], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 10
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 13
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 14
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 16]
	vmovd	xmm0, esi
	mov	r9, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 16], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 3
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 4
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 5
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 16], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 16], 8
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 12
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 16], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 16], 15
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rbx + 16]
	vmovd	xmm1, esi
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 16], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 16], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 16], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 16], 9
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 16], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 16], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 16], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 17]
	vmovd	xmm2, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 17], 1
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 17], 2
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 17], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 4
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 17], 5
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 17], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 7
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 17], 8
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 17], 9
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 11
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 17], 12
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 17], 15
	movzx	esi, byte ptr [rdx + rbx + 17]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 17], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 2
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 17], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 9
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 12
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 13
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rsi + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 18]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 18], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 18], 3
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 18], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 18], 6
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 18], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 18], 9
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 18], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 18], 12
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 18], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 15
	movzx	esi, byte ptr [rdx + rbx + 18]
	vmovd	xmm1, esi
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 18], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 6
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 18], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 12
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 18], 13
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 14
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 18], 15
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 19]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 3
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 4
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 5
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 6
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 7
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 8
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 19], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 19], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 19], 14
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 19], 15
	movzx	esi, byte ptr [rdx + rbx + 19]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 19], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 2
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 19], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 5
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 19], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 19], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 11
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 19], 13
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 19], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	movzx	esi, byte ptr [rdx + r15 + 20]
	vmovd	xmm0, esi
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 20], 1
	mov	r12, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 20], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 3
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 20], 4
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 20], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 9
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 20], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 20], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 20]
	vmovd	xmm1, esi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 20], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 20], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 20], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 9
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 10
	mov	r8, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 20], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 12
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 20], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 20], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 15
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 21]
	vmovd	xmm2, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 21], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 21], 5
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 21], 6
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 21], 7
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 21], 8
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 21], 9
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 10
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 21], 11
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 12
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 21], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 21], 15
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 21]
	vmovd	xmm3, esi
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 21], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 6
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 21], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 21], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 21], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 21], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r8 + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 22]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 3
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 4
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 22], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 22], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 22], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 22], 9
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 22], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 22], 11
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 22], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 22], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 14
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 15
	mov	r10, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r10 + 22]
	vmovd	xmm1, esi
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 1
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 22], 2
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 4
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 22], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 22], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 10
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 22], 11
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 12
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 13
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 22], 15
	movzx	esi, byte ptr [rdx + rax + 23]
	vmovd	xmm2, esi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 2
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 23], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 23], 5
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 23], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 23], 12
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 14
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 23], 15
	movzx	esi, byte ptr [rdx + r10 + 23]
	vmovd	xmm3, esi
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 23], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 23], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 3
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 23], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 23], 5
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 23], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 8
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 23], 9
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 23], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 23], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 12
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 23], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	r9, qword ptr [rsp + 256]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r9 + 24]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 24], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 7
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 8
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 9
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 11
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 12
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 24], 15
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 24]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 24], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 24], 4
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 24], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 7
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 24], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 10
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 11
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 24], 13
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 15
	movzx	esi, byte ptr [rdx + r9 + 25]
	vmovd	xmm2, esi
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 1
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 2
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 3
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 25], 4
	mov	r9, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 25], 5
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 25], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 8
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 9
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 25], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 25], 11
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 25], 12
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 25]
	vmovd	xmm3, esi
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 25], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 25], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 12
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 25], 14
	vinserti128	ymm9, ymm1, xmm0, 1
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r8 + 25], 15
	vinserti128	ymm8, ymm0, xmm2, 1
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 26]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 1
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 2
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 26], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 26], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 26], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 26], 6
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 26], 7
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 26], 8
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 26], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 26], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 26], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 15
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rbx + 26]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 2
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 26], 3
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 4
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 26], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 7
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 26], 13
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 26], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 27]
	vmovd	xmm2, esi
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 27], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 27], 3
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 27], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 5
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 27], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 27], 8
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 27], 9
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 27], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 15
	movzx	esi, byte ptr [rdx + rbx + 27]
	vmovd	xmm3, esi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 27], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 27], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 27], 5
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 27], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 9
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 12
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r13 + 28]
	vmovd	xmm0, esi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 1
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 2
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 28], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 28], 4
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 28], 5
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 28], 6
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 28], 7
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 28], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 28], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 28], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 28], 11
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 28], 12
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 28], 14
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 15
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 28]
	vmovd	xmm1, esi
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 2
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 28], 3
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 28], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 7
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 11
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 12
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 13
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 28], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 15
	movzx	esi, byte ptr [rdx + r13 + 29]
	vmovd	xmm2, esi
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 29], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 29], 3
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 29], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 29], 5
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 29], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 29], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 29], 8
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 29], 9
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 29], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 29], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 29], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 29], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 29], 15
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r8 + 29]
	vmovd	xmm3, esi
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 29], 1
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 29], 3
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 29], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 5
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 7
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 9
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 13
	vpinsrb	xmm4, xmm3, byte ptr [rdx + r12 + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm4, byte ptr [rdx + r12 + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rdi + 30]
	vmovd	xmm0, esi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 30], 1
	movzx	esi, byte ptr [rdx + rdi + 31]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 31], 1
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 31], 6
	mov	rdi, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 31], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 31], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 13
	mov	rax, rbx
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 31], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rdx + rax + 31], 15
	mov	rsi, r8
	movzx	eax, byte ptr [rdx + r8 + 30]
	vmovd	xmm1, eax
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 30], 1
	movzx	eax, byte ptr [rdx + r8 + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 31], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r10 + 31], 2
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 31], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 7
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 11
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 14
	mov	rax, r12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r12 + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm0, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpeqb	ymm2, ymm0, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI2_0] # ymm1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	vpand	ymm7, ymm2, ymm1
	vpsubb	ymm11, ymm7, ymm2
	vpcmpeqb	ymm7, ymm15, ymm0
	vpand	ymm7, ymm7, ymm1
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI2_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpand	ymm12, ymm12, ymm6
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm2, ymmword ptr [rip + .LCPI2_2] # ymm2 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpand	ymm7, ymm7, ymm2
	vpcmpeqb	ymm12, ymm14, ymm0
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI2_3] # ymm4 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpand	ymm12, ymm12, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI2_4] # ymm13 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpand	ymm12, ymm12, ymm13
	vmovdqa	ymm14, ymm13
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI2_5] # ymm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpand	ymm7, ymm7, ymm5
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vmovdqa	ymm15, ymmword ptr [rip + .LCPI2_6] # ymm15 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm12, ymm12, ymm15
	vpor	ymm7, ymm12, ymm7
	vpor	ymm13, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpand	ymm12, ymm7, ymm1
	vpsubb	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm1
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm6
	vpor	ymm11, ymm12, ymm11
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm4
	vpor	ymm11, ymm11, ymm12
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm14
	vmovdqa	ymm3, ymm14
	vpor	ymm11, ymm11, ymm12
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm5
	vpcmpeqb	ymm12, ymm0, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vpand	ymm12, ymm12, ymm15
	vpor	ymm11, ymm11, ymm12
	vpor	ymm12, ymm11, ymm7
	vpcmpeqb	ymm7, ymm0, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpand	ymm11, ymm7, ymm1
	vpsubb	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm1
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm6
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm4
	vpor	ymm11, ymm11, ymm14
	vpcmpeqb	ymm14, ymm0, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm3
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpeqb	ymm10, ymm10, ymm0
	vmovdqa	ymm14, ymm5
	vpand	ymm10, ymm10, ymm5
	vpcmpeqb	ymm11, ymm0, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpsllw	ymm11, ymm11, 7
	vpand	ymm11, ymm11, ymm15
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpeqb	ymm8, ymm8, ymm0
	vpand	ymm10, ymm8, ymm1
	vpsubb	ymm8, ymm10, ymm8
	vpcmpeqb	ymm9, ymm9, ymm0
	vpand	ymm9, ymm9, ymm1
	vpcmpeqb	ymm5, ymm0, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpand	ymm5, ymm5, ymm6
	vpor	ymm5, ymm9, ymm5
	vpor	ymm5, ymm8, ymm5
	vpcmpeqb	ymm6, ymm0, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpand	ymm6, ymm6, ymm2
	vpcmpeqb	ymm3, ymm0, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpand	ymm3, ymm3, ymm4
	vpor	ymm3, ymm6, ymm3
	vpcmpeqb	ymm4, ymm0, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpand	ymm4, ymm4, ymmword ptr [rip + .LCPI2_4]
	vpor	ymm3, ymm3, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpeqb	ymm1, ymm0, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpand	ymm1, ymm14, ymm1
	vpcmpeqb	ymm2, ymm0, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpsllw	ymm2, ymm2, 7
	vpand	ymm2, ymm15, ymm2
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm13, ymm12      # ymm2 = ymm13[0],ymm12[0],ymm13[1],ymm12[1],ymm13[2],ymm12[2],ymm13[3],ymm12[3],ymm13[4],ymm12[4],ymm13[5],ymm12[5],ymm13[6],ymm12[6],ymm13[7],ymm12[7],ymm13[16],ymm12[16],ymm13[17],ymm12[17],ymm13[18],ymm12[18],ymm13[19],ymm12[19],ymm13[20],ymm12[20],ymm13[21],ymm12[21],ymm13[22],ymm12[22],ymm13[23],ymm12[23]
	vpunpckhbw	ymm0, ymm13, ymm12      # ymm0 = ymm13[8],ymm12[8],ymm13[9],ymm12[9],ymm13[10],ymm12[10],ymm13[11],ymm12[11],ymm13[12],ymm12[12],ymm13[13],ymm12[13],ymm13[14],ymm12[14],ymm13[15],ymm12[15],ymm13[24],ymm12[24],ymm13[25],ymm12[25],ymm13[26],ymm12[26],ymm13[27],ymm12[27],ymm13[28],ymm12[28],ymm13[29],ymm12[29],ymm13[30],ymm12[30],ymm13[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 408]      # 8-byte Reload
	vmovdqu	ymmword ptr [rdi + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [rdi + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [rdi + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [rdi + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB2_169
# %bb.170:
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 400]      # 8-byte Reload
	jne	.LBB2_114
	jmp	.LBB2_133
.Lfunc_end2:
	.size	comparison_equal_scalar_arr_avx2, .Lfunc_end2-comparison_equal_scalar_arr_avx2
                                        # -- End function
	.globl	comparison_not_equal_arr_arr_avx2 # -- Begin function comparison_not_equal_arr_arr_avx2
	.p2align	4, 0x90
	.type	comparison_not_equal_arr_arr_avx2,@function
comparison_not_equal_arr_arr_avx2:      # @comparison_not_equal_arr_arr_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -8
	sub	rsp, 72
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB3_29
# %bb.1:
	cmp	edi, 3
	jle	.LBB3_2
# %bb.15:
	cmp	edi, 4
	je	.LBB3_68
# %bb.16:
	cmp	edi, 5
	je	.LBB3_79
# %bb.17:
	cmp	edi, 6
	jne	.LBB3_123
# %bb.18:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_22
# %bb.19:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_20:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_20
# %bb.21:
	add	r14, 1
.LBB3_22:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_26
# %bb.23:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_24:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setne	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setne	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setne	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setne	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setne	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setne	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setne	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setne	r12b
	cmp	eax, dword ptr [rdx + 80]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setne	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_24
# %bb.25:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_26:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.27:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_28:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_28
	jmp	.LBB3_123
.LBB3_29:
	cmp	edi, 8
	jle	.LBB3_30
# %bb.43:
	cmp	edi, 9
	je	.LBB3_101
# %bb.44:
	cmp	edi, 11
	je	.LBB3_112
# %bb.45:
	cmp	edi, 12
	jne	.LBB3_123
# %bb.46:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_50
# %bb.47:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_48:                               # =>This Inner Loop Header: Depth=1
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	add	rsi, 8
	vucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_48
# %bb.49:
	add	r14, 1
.LBB3_50:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_54
# %bb.51:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_52:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	vmovsd	xmm1, qword ptr [rsi + 8]       # xmm1 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomisd	xmm1, qword ptr [rdx + 8]
	setne	al
	vmovsd	xmm0, qword ptr [rsi + 16]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 16]
	vmovsd	xmm0, qword ptr [rsi + 24]      # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 24]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 32]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 32]
	vmovsd	xmm0, qword ptr [rsi + 40]      # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 40]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 48]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 48]
	vmovsd	xmm0, qword ptr [rsi + 56]      # xmm0 = mem[0],zero
	setne	r13b
	vucomisd	xmm0, qword ptr [rdx + 56]
	setne	r15b
	vmovsd	xmm0, qword ptr [rsi + 64]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 64]
	vmovsd	xmm0, qword ptr [rsi + 72]      # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 72]
	setne	cl
	vmovsd	xmm0, qword ptr [rsi + 80]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 80]
	vmovsd	xmm0, qword ptr [rsi + 88]      # xmm0 = mem[0],zero
	setne	r9b
	vucomisd	xmm0, qword ptr [rdx + 88]
	setne	r11b
	vmovsd	xmm0, qword ptr [rsi + 96]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 96]
	vmovsd	xmm0, qword ptr [rsi + 104]     # xmm0 = mem[0],zero
	setne	r10b
	vucomisd	xmm0, qword ptr [rdx + 104]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 112]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 112]
	vmovsd	xmm0, qword ptr [rsi + 120]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 120]
	setne	bl
	vmovsd	xmm0, qword ptr [rsi + 128]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 128]
	vmovsd	xmm0, qword ptr [rsi + 136]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 136]
	vmovsd	xmm0, qword ptr [rsi + 144]     # xmm0 = mem[0],zero
	setne	r14b
	vucomisd	xmm0, qword ptr [rdx + 144]
	vmovsd	xmm0, qword ptr [rsi + 152]     # xmm0 = mem[0],zero
	setne	r12b
	vucomisd	xmm0, qword ptr [rdx + 152]
	vmovsd	xmm0, qword ptr [rsi + 160]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 160]
	vmovsd	xmm0, qword ptr [rsi + 168]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 168]
	vmovsd	xmm0, qword ptr [rsi + 176]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 176]
	vmovsd	xmm0, qword ptr [rsi + 184]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 184]
	vmovsd	xmm0, qword ptr [rsi + 192]     # xmm0 = mem[0],zero
	setne	r8b
	vucomisd	xmm0, qword ptr [rdx + 192]
	vmovsd	xmm0, qword ptr [rsi + 200]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 200]
	vmovsd	xmm0, qword ptr [rsi + 208]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 208]
	vmovsd	xmm0, qword ptr [rsi + 216]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 216]
	vmovsd	xmm0, qword ptr [rsi + 224]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 224]
	vmovsd	xmm0, qword ptr [rsi + 232]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 232]
	vmovsd	xmm0, qword ptr [rsi + 240]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 240]
	vmovsd	xmm0, qword ptr [rsi + 248]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	add	rsi, 256
	vucomisd	xmm0, qword ptr [rdx + 248]
	setne	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB3_52
# %bb.53:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB3_54:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.55:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_56:                               # =>This Inner Loop Header: Depth=1
	vmovsd	xmm0, qword ptr [rsi + 8*rcx]   # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_56
	jmp	.LBB3_123
.LBB3_2:
	cmp	edi, 2
	je	.LBB3_57
# %bb.3:
	cmp	edi, 3
	jne	.LBB3_123
# %bb.4:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_6
# %bb.7:
	add	r14, 1
.LBB3_8:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_12
# %bb.9:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_10:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setne	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setne	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setne	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setne	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setne	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setne	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setne	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setne	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setne	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setne	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setne	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB3_10
# %bb.11:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB3_12:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.13:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_14:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_14
	jmp	.LBB3_123
.LBB3_30:
	cmp	edi, 7
	je	.LBB3_90
# %bb.31:
	cmp	edi, 8
	jne	.LBB3_123
# %bb.32:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_36
# %bb.33:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_34:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_34
# %bb.35:
	add	r14, 1
.LBB3_36:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_40
# %bb.37:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_38:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setne	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setne	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setne	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setne	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setne	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setne	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setne	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setne	r12b
	cmp	rax, qword ptr [rdx + 160]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setne	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_38
# %bb.39:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_40:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.41:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_42:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_42
	jmp	.LBB3_123
.LBB3_68:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_72
# %bb.69:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_70:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_70
# %bb.71:
	add	r14, 1
.LBB3_72:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_76
# %bb.73:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_74:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setne	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setne	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setne	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setne	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setne	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setne	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setne	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setne	r12b
	cmp	ax, word ptr [rdx + 40]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setne	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_74
# %bb.75:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_76:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.77:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_78:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_78
	jmp	.LBB3_123
.LBB3_79:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_81:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_81
# %bb.82:
	add	r14, 1
.LBB3_83:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_87
# %bb.84:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_85:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setne	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setne	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setne	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setne	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setne	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setne	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setne	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setne	r12b
	cmp	ax, word ptr [rdx + 40]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setne	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_85
# %bb.86:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_87:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.88:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_89:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_89
	jmp	.LBB3_123
.LBB3_101:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_105
# %bb.102:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_103:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_103
# %bb.104:
	add	r14, 1
.LBB3_105:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_109
# %bb.106:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_107:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setne	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setne	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setne	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setne	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setne	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setne	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setne	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setne	r12b
	cmp	rax, qword ptr [rdx + 160]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setne	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_107
# %bb.108:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_109:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.110:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_111:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_111
	jmp	.LBB3_123
.LBB3_112:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_116
# %bb.113:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_114:                              # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	add	rsi, 4
	vucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_114
# %bb.115:
	add	r14, 1
.LBB3_116:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_120
# %bb.117:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_118:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	vmovss	xmm1, dword ptr [rsi + 4]       # xmm1 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomiss	xmm1, dword ptr [rdx + 4]
	setne	al
	vmovss	xmm0, dword ptr [rsi + 8]       # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 8]
	vmovss	xmm0, dword ptr [rsi + 12]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 12]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 16]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 16]
	vmovss	xmm0, dword ptr [rsi + 20]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 20]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 24]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 24]
	vmovss	xmm0, dword ptr [rsi + 28]      # xmm0 = mem[0],zero,zero,zero
	setne	r13b
	vucomiss	xmm0, dword ptr [rdx + 28]
	setne	r15b
	vmovss	xmm0, dword ptr [rsi + 32]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 32]
	vmovss	xmm0, dword ptr [rsi + 36]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 36]
	setne	cl
	vmovss	xmm0, dword ptr [rsi + 40]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 40]
	vmovss	xmm0, dword ptr [rsi + 44]      # xmm0 = mem[0],zero,zero,zero
	setne	r9b
	vucomiss	xmm0, dword ptr [rdx + 44]
	setne	r11b
	vmovss	xmm0, dword ptr [rsi + 48]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 48]
	vmovss	xmm0, dword ptr [rsi + 52]      # xmm0 = mem[0],zero,zero,zero
	setne	r10b
	vucomiss	xmm0, dword ptr [rdx + 52]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 56]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 56]
	vmovss	xmm0, dword ptr [rsi + 60]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 60]
	setne	bl
	vmovss	xmm0, dword ptr [rsi + 64]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 64]
	vmovss	xmm0, dword ptr [rsi + 68]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 68]
	vmovss	xmm0, dword ptr [rsi + 72]      # xmm0 = mem[0],zero,zero,zero
	setne	r14b
	vucomiss	xmm0, dword ptr [rdx + 72]
	vmovss	xmm0, dword ptr [rsi + 76]      # xmm0 = mem[0],zero,zero,zero
	setne	r12b
	vucomiss	xmm0, dword ptr [rdx + 76]
	vmovss	xmm0, dword ptr [rsi + 80]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 80]
	vmovss	xmm0, dword ptr [rsi + 84]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 84]
	vmovss	xmm0, dword ptr [rsi + 88]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 88]
	vmovss	xmm0, dword ptr [rsi + 92]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 92]
	vmovss	xmm0, dword ptr [rsi + 96]      # xmm0 = mem[0],zero,zero,zero
	setne	r8b
	vucomiss	xmm0, dword ptr [rdx + 96]
	vmovss	xmm0, dword ptr [rsi + 100]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 100]
	vmovss	xmm0, dword ptr [rsi + 104]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 104]
	vmovss	xmm0, dword ptr [rsi + 108]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 108]
	vmovss	xmm0, dword ptr [rsi + 112]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 112]
	vmovss	xmm0, dword ptr [rsi + 116]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 116]
	vmovss	xmm0, dword ptr [rsi + 120]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 120]
	vmovss	xmm0, dword ptr [rsi + 124]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	sub	rsi, -128
	vucomiss	xmm0, dword ptr [rdx + 124]
	setne	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB3_118
# %bb.119:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB3_120:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.121:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_122:                              # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rsi + 4*rcx]   # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_122
	jmp	.LBB3_123
.LBB3_57:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_59:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_59
# %bb.60:
	add	r14, 1
.LBB3_61:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_65
# %bb.62:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_63:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setne	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setne	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setne	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setne	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setne	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setne	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setne	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setne	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setne	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setne	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setne	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB3_63
# %bb.64:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB3_65:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.66:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_67:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_67
	jmp	.LBB3_123
.LBB3_90:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_94
# %bb.91:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_92:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_92
# %bb.93:
	add	r14, 1
.LBB3_94:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_98
# %bb.95:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_96:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setne	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setne	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setne	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setne	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setne	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setne	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setne	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setne	r12b
	cmp	eax, dword ptr [rdx + 80]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setne	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_96
# %bb.97:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_98:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.99:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_100:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_100
.LBB3_123:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.Lfunc_end3:
	.size	comparison_not_equal_arr_arr_avx2, .Lfunc_end3-comparison_not_equal_arr_arr_avx2
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function comparison_not_equal_arr_scalar_avx2
.LCPI4_0:
	.zero	32,2
.LCPI4_1:
	.zero	32,4
.LCPI4_2:
	.zero	32,8
.LCPI4_3:
	.zero	32,16
.LCPI4_4:
	.zero	32,32
.LCPI4_5:
	.zero	32,64
.LCPI4_6:
	.zero	32,128
	.text
	.globl	comparison_not_equal_arr_scalar_avx2
	.p2align	4, 0x90
	.type	comparison_not_equal_arr_scalar_avx2,@function
comparison_not_equal_arr_scalar_avx2:   # @comparison_not_equal_arr_scalar_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -32
	sub	rsp, 1280
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r11, rcx
	cmp	edi, 6
	jg	.LBB4_13
# %bb.1:
	cmp	edi, 3
	jle	.LBB4_25
# %bb.2:
	cmp	edi, 4
	je	.LBB4_48
# %bb.3:
	cmp	edi, 5
	je	.LBB4_56
# %bb.4:
	cmp	edi, 6
	jne	.LBB4_159
# %bb.5:
	mov	r13d, dword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_7:                                # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_7
# %bb.8:
	add	r11, 1
.LBB4_9:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_100
# %bb.10:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_11:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setne	dil
	cmp	dword ptr [rsi + 8], r13d
	setne	r14b
	cmp	dword ptr [rsi + 12], r13d
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setne	al
	cmp	dword ptr [rsi + 28], r13d
	setne	bl
	cmp	dword ptr [rsi + 32], r13d
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setne	dl
	cmp	dword ptr [rsi + 40], r13d
	setne	r9b
	cmp	dword ptr [rsi + 44], r13d
	setne	r10b
	cmp	dword ptr [rsi + 48], r13d
	setne	r11b
	cmp	dword ptr [rsi + 52], r13d
	setne	r12b
	cmp	dword ptr [rsi + 56], r13d
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setne	cl
	cmp	dword ptr [rsi + 64], r13d
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setne	r15b
	cmp	dword ptr [rsi + 96], r13d
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 128
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB4_11
# %bb.12:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB4_101
	jmp	.LBB4_159
.LBB4_13:
	cmp	edi, 8
	jle	.LBB4_38
# %bb.14:
	cmp	edi, 9
	je	.LBB4_64
# %bb.15:
	cmp	edi, 11
	je	.LBB4_72
# %bb.16:
	cmp	edi, 12
	jne	.LBB4_159
# %bb.17:
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB4_21
# %bb.18:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_19:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_19
# %bb.20:
	add	r11, 1
.LBB4_21:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_104
# %bb.22:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_23:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 8]
	setne	r9b
	vucomisd	xmm0, qword ptr [rsi + 16]
	setne	r14b
	vucomisd	xmm0, qword ptr [rsi + 24]
	setne	r13b
	vucomisd	xmm0, qword ptr [rsi + 32]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 40]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 48]
	setne	al
	vucomisd	xmm0, qword ptr [rsi + 56]
	setne	bl
	vucomisd	xmm0, qword ptr [rsi + 64]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 72]
	setne	dl
	vucomisd	xmm0, qword ptr [rsi + 80]
	setne	dil
	vucomisd	xmm0, qword ptr [rsi + 88]
	setne	r10b
	vucomisd	xmm0, qword ptr [rsi + 96]
	setne	r11b
	vucomisd	xmm0, qword ptr [rsi + 104]
	setne	r12b
	vucomisd	xmm0, qword ptr [rsi + 112]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 120]
	setne	cl
	vucomisd	xmm0, qword ptr [rsi + 128]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 136]
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 144]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 152]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 160]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 168]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 176]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 184]
	setne	r15b
	vucomisd	xmm0, qword ptr [rsi + 192]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 200]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 208]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 216]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 224]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 232]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 240]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 248]
	setne	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 80]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 256
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 144], -1       # 8-byte Folded Spill
	jne	.LBB4_23
# %bb.24:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB4_105
	jmp	.LBB4_159
.LBB4_25:
	cmp	edi, 2
	je	.LBB4_80
# %bb.26:
	cmp	edi, 3
	jne	.LBB4_159
# %bb.27:
	mov	r14b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_131
# %bb.28:
	movsxd	rax, r9d
	mov	r13, r11
	.p2align	4, 0x90
.LBB4_29:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r14b
	lea	rsi, [rsi + 1]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r13 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r13 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_29
# %bb.30:
	add	r13, 1
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_132
.LBB4_31:
	cmp	r15, 32
	mov	dword ptr [rsp + 28], r14d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 392], r15      # 8-byte Spill
	jb	.LBB4_34
# %bb.32:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r13, rax
	jae	.LBB4_165
# %bb.33:
	lea	rax, [4*r15]
	add	rax, r13
	cmp	rsi, rax
	jae	.LBB4_165
.LBB4_34:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rsi
	mov	qword ptr [rsp + 376], r13      # 8-byte Spill
.LBB4_35:
	mov	r13, r15
	sub	r13, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 144], r13      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_36:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	byte ptr [r12], r14b
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	byte ptr [r12 + 1], r14b
	setne	r8b
	cmp	byte ptr [r12 + 2], r14b
	setne	r15b
	cmp	byte ptr [r12 + 3], r14b
	setne	r13b
	cmp	byte ptr [r12 + 4], r14b
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 5], r14b
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 6], r14b
	setne	al
	cmp	byte ptr [r12 + 7], r14b
	setne	r11b
	cmp	byte ptr [r12 + 8], r14b
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 9], r14b
	setne	dl
	cmp	byte ptr [r12 + 10], r14b
	setne	sil
	cmp	byte ptr [r12 + 11], r14b
	setne	dil
	cmp	byte ptr [r12 + 12], r14b
	setne	r10b
	cmp	byte ptr [r12 + 13], r14b
	setne	r12b
	cmp	byte ptr [rcx + 14], r14b
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	setne	r9b
	cmp	byte ptr [rcx + 16], r14b
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 18], r14b
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	setne	r14b
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 24], bl
	setne	byte ptr [rsp + 272]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 25], bl
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 26], bl
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 27], bl
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 28], bl
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 29], bl
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 30], bl
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 31], bl
	setne	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r15b, 2
	or	r15b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 288]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r15b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 376]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r14b, dl
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	byte ptr [rsi + 3], bl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 376], rsi      # 8-byte Spill
	add	qword ptr [rsp + 144], -1       # 8-byte Folded Spill
	jne	.LBB4_36
# %bb.37:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	jmp	.LBB4_133
.LBB4_38:
	cmp	edi, 7
	je	.LBB4_92
# %bb.39:
	cmp	edi, 8
	jne	.LBB4_159
# %bb.40:
	mov	r13, qword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_44
# %bb.41:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_42:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_42
# %bb.43:
	add	r11, 1
.LBB4_44:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_107
# %bb.45:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_46:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setne	dil
	cmp	qword ptr [rsi + 16], r13
	setne	r14b
	cmp	qword ptr [rsi + 24], r13
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setne	al
	cmp	qword ptr [rsi + 56], r13
	setne	bl
	cmp	qword ptr [rsi + 64], r13
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setne	dl
	cmp	qword ptr [rsi + 80], r13
	setne	r9b
	cmp	qword ptr [rsi + 88], r13
	setne	r10b
	cmp	qword ptr [rsi + 96], r13
	setne	r11b
	cmp	qword ptr [rsi + 104], r13
	setne	r12b
	cmp	qword ptr [rsi + 112], r13
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setne	cl
	cmp	qword ptr [rsi + 128], r13
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setne	r15b
	cmp	qword ptr [rsi + 192], r13
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r11], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r11 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], r8b
	add	rsi, 256
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB4_46
# %bb.47:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB4_108
	jmp	.LBB4_159
.LBB4_48:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_52
# %bb.49:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_50:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_50
# %bb.51:
	add	r11, 1
.LBB4_52:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_111
# %bb.53:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_54:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setne	al
	cmp	word ptr [rsi + 2], r13w
	setne	dil
	cmp	word ptr [rsi + 4], r13w
	setne	r14b
	cmp	word ptr [rsi + 6], r13w
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 14], r13w
	setne	bl
	cmp	word ptr [rsi + 16], r13w
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	setne	dl
	cmp	word ptr [rsi + 20], r13w
	setne	r9b
	cmp	word ptr [rsi + 22], r13w
	setne	r10b
	cmp	word ptr [rsi + 24], r13w
	setne	r11b
	cmp	word ptr [rsi + 26], r13w
	setne	r12b
	cmp	word ptr [rsi + 28], r13w
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	setne	cl
	cmp	word ptr [rsi + 32], r13w
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	setne	r15b
	cmp	word ptr [rsi + 48], r13w
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	setne	r8b
	add	dil, dil
	or	dil, al
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 64
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB4_54
# %bb.55:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB4_112
	jmp	.LBB4_159
.LBB4_56:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_60
# %bb.57:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_58:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_58
# %bb.59:
	add	r11, 1
.LBB4_60:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_115
# %bb.61:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_62:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	setne	dil
	cmp	word ptr [rsi + 4], r13w
	setne	r14b
	cmp	word ptr [rsi + 6], r13w
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	setne	al
	cmp	word ptr [rsi + 14], r13w
	setne	bl
	cmp	word ptr [rsi + 16], r13w
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	setne	dl
	cmp	word ptr [rsi + 20], r13w
	setne	r9b
	cmp	word ptr [rsi + 22], r13w
	setne	r10b
	cmp	word ptr [rsi + 24], r13w
	setne	r11b
	cmp	word ptr [rsi + 26], r13w
	setne	r12b
	cmp	word ptr [rsi + 28], r13w
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	setne	cl
	cmp	word ptr [rsi + 32], r13w
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	setne	r15b
	cmp	word ptr [rsi + 48], r13w
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 64
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB4_62
# %bb.63:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB4_116
	jmp	.LBB4_159
.LBB4_64:
	mov	r13, qword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_68
# %bb.65:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_66:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_66
# %bb.67:
	add	r11, 1
.LBB4_68:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_118
# %bb.69:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_70:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setne	dil
	cmp	qword ptr [rsi + 16], r13
	setne	r14b
	cmp	qword ptr [rsi + 24], r13
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setne	al
	cmp	qword ptr [rsi + 56], r13
	setne	bl
	cmp	qword ptr [rsi + 64], r13
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setne	dl
	cmp	qword ptr [rsi + 80], r13
	setne	r9b
	cmp	qword ptr [rsi + 88], r13
	setne	r10b
	cmp	qword ptr [rsi + 96], r13
	setne	r11b
	cmp	qword ptr [rsi + 104], r13
	setne	r12b
	cmp	qword ptr [rsi + 112], r13
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setne	cl
	cmp	qword ptr [rsi + 128], r13
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setne	r15b
	cmp	qword ptr [rsi + 192], r13
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 256
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB4_70
# %bb.71:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB4_119
	jmp	.LBB4_159
.LBB4_72:
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovss	xmm0, dword ptr [rdx]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB4_76
# %bb.73:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_74:                               # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_74
# %bb.75:
	add	r11, 1
.LBB4_76:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_121
# %bb.77:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_78:                               # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 4]
	setne	r9b
	vucomiss	xmm0, dword ptr [rsi + 8]
	setne	r14b
	vucomiss	xmm0, dword ptr [rsi + 12]
	setne	r13b
	vucomiss	xmm0, dword ptr [rsi + 16]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 20]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 24]
	setne	al
	vucomiss	xmm0, dword ptr [rsi + 28]
	setne	bl
	vucomiss	xmm0, dword ptr [rsi + 32]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 36]
	setne	dl
	vucomiss	xmm0, dword ptr [rsi + 40]
	setne	dil
	vucomiss	xmm0, dword ptr [rsi + 44]
	setne	r10b
	vucomiss	xmm0, dword ptr [rsi + 48]
	setne	r11b
	vucomiss	xmm0, dword ptr [rsi + 52]
	setne	r12b
	vucomiss	xmm0, dword ptr [rsi + 56]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 60]
	setne	cl
	vucomiss	xmm0, dword ptr [rsi + 64]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 68]
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 72]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 76]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 80]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 84]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 88]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 92]
	setne	r15b
	vucomiss	xmm0, dword ptr [rsi + 96]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 100]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 104]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 108]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 112]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 116]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 120]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 124]
	setne	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 80]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 128
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 144], -1       # 8-byte Folded Spill
	jne	.LBB4_78
# %bb.79:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB4_122
	jmp	.LBB4_159
.LBB4_80:
	mov	r14b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_84
# %bb.81:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_82:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r14b
	lea	rsi, [rsi + 1]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_82
# %bb.83:
	add	r11, 1
.LBB4_84:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_124
# %bb.85:
	cmp	r15, 32
	mov	dword ptr [rsp + 28], r14d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 392], r15      # 8-byte Spill
	jb	.LBB4_88
# %bb.86:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r11, rax
	jae	.LBB4_168
# %bb.87:
	lea	rax, [r11 + 4*r15]
	cmp	rsi, rax
	jae	.LBB4_168
.LBB4_88:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rsi
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
.LBB4_89:
	sub	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_90:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	byte ptr [r12], r14b
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	byte ptr [r12 + 1], r14b
	setne	r8b
	cmp	byte ptr [r12 + 2], r14b
	setne	r15b
	cmp	byte ptr [r12 + 3], r14b
	setne	r13b
	cmp	byte ptr [r12 + 4], r14b
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 5], r14b
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 6], r14b
	setne	al
	cmp	byte ptr [r12 + 7], r14b
	setne	r11b
	cmp	byte ptr [r12 + 8], r14b
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 9], r14b
	setne	dl
	cmp	byte ptr [r12 + 10], r14b
	setne	sil
	cmp	byte ptr [r12 + 11], r14b
	setne	dil
	cmp	byte ptr [r12 + 12], r14b
	setne	r10b
	cmp	byte ptr [r12 + 13], r14b
	setne	r12b
	cmp	byte ptr [rcx + 14], r14b
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	setne	r9b
	cmp	byte ptr [rcx + 16], r14b
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 18], r14b
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	setne	r14b
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 24], bl
	setne	byte ptr [rsp + 272]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 25], bl
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 26], bl
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 27], bl
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 28], bl
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 29], bl
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 30], bl
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 31], bl
	setne	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r15b, 2
	or	r15b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 288]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r15b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 376]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r14b, dl
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	byte ptr [rsi + 3], bl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 376], rsi      # 8-byte Spill
	add	qword ptr [rsp + 144], -1       # 8-byte Folded Spill
	jne	.LBB4_90
# %bb.91:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	jmp	.LBB4_125
.LBB4_92:
	mov	r13d, dword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_96
# %bb.93:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_94:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_94
# %bb.95:
	add	r11, 1
.LBB4_96:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB4_128
# %bb.97:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_98:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setne	dil
	cmp	dword ptr [rsi + 8], r13d
	setne	r14b
	cmp	dword ptr [rsi + 12], r13d
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setne	al
	cmp	dword ptr [rsi + 28], r13d
	setne	bl
	cmp	dword ptr [rsi + 32], r13d
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setne	dl
	cmp	dword ptr [rsi + 40], r13d
	setne	r9b
	cmp	dword ptr [rsi + 44], r13d
	setne	r10b
	cmp	dword ptr [rsi + 48], r13d
	setne	r11b
	cmp	dword ptr [rsi + 52], r13d
	setne	r12b
	cmp	dword ptr [rsi + 56], r13d
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setne	cl
	cmp	dword ptr [rsi + 64], r13d
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setne	r15b
	cmp	dword ptr [rsi + 96], r13d
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r11], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r11 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], r8b
	add	rsi, 128
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB4_98
# %bb.99:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB4_129
	jmp	.LBB4_159
.LBB4_100:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
.LBB4_101:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB4_130
# %bb.102:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB4_103:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_103
	jmp	.LBB4_156
.LBB4_104:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
.LBB4_105:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB4_136
# %bb.106:
	xor	r11d, r11d
	jmp	.LBB4_138
.LBB4_107:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
.LBB4_108:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB4_120
# %bb.109:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB4_110:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_110
	jmp	.LBB4_146
.LBB4_111:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
.LBB4_112:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB4_117
# %bb.113:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB4_114:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_114
	jmp	.LBB4_142
.LBB4_115:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
.LBB4_116:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB4_140
.LBB4_117:
	xor	r11d, r11d
	jmp	.LBB4_142
.LBB4_118:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
.LBB4_119:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB4_144
.LBB4_120:
	xor	r11d, r11d
	jmp	.LBB4_146
.LBB4_121:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
.LBB4_122:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB4_148
# %bb.123:
	xor	r11d, r11d
	jmp	.LBB4_150
.LBB4_124:
	mov	qword ptr [rsp + 376], r11      # 8-byte Spill
	mov	r12, rsi
.LBB4_125:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
# %bb.126:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB4_127
# %bb.152:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 376]      # 8-byte Reload
	.p2align	4, 0x90
.LBB4_153:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r12 + rsi], r14b
	setne	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	byte ptr [r12 + rsi + 1], r14b
	lea	rsi, [rsi + 2]
	setne	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB4_153
	jmp	.LBB4_162
.LBB4_128:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
.LBB4_129:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB4_154
.LBB4_130:
	xor	r11d, r11d
	jmp	.LBB4_156
.LBB4_131:
	mov	r13, r11
	sar	r15, 5
	cmp	r10, 32
	jge	.LBB4_31
.LBB4_132:
	mov	qword ptr [rsp + 376], r13      # 8-byte Spill
	mov	r12, rsi
.LBB4_133:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB4_159
# %bb.134:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB4_160
.LBB4_127:
	xor	esi, esi
	jmp	.LBB4_163
.LBB4_136:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB4_137:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	vucomisd	xmm0, qword ptr [rsi + 8]
	lea	rsi, [rsi + 16]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_137
.LBB4_138:
	test	r8b, 1
	je	.LBB4_159
# %bb.139:
	vucomisd	xmm0, qword ptr [rsi]
	jmp	.LBB4_158
.LBB4_140:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB4_141:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_141
.LBB4_142:
	test	r8b, 1
	je	.LBB4_159
# %bb.143:
	cmp	word ptr [rsi], r13w
	jmp	.LBB4_158
.LBB4_144:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB4_145:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_145
.LBB4_146:
	test	r8b, 1
	je	.LBB4_159
# %bb.147:
	cmp	qword ptr [rsi], r13
	jmp	.LBB4_158
.LBB4_148:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB4_149:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	vucomiss	xmm0, dword ptr [rsi + 4]
	lea	rsi, [rsi + 8]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_149
.LBB4_150:
	test	r8b, 1
	je	.LBB4_159
# %bb.151:
	vucomiss	xmm0, dword ptr [rsi]
	jmp	.LBB4_158
.LBB4_154:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB4_155:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_155
.LBB4_156:
	test	r8b, 1
	je	.LBB4_159
# %bb.157:
	cmp	dword ptr [rsi], r13d
.LBB4_158:
	setne	al
	neg	al
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
.LBB4_159:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB4_160:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 376]      # 8-byte Reload
	.p2align	4, 0x90
.LBB4_161:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r12 + rsi], r14b
	setne	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	byte ptr [r12 + rsi + 1], r14b
	lea	rsi, [rsi + 2]
	setne	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB4_161
.LBB4_162:
	add	r12, rsi
.LBB4_163:
	test	r8b, 1
	je	.LBB4_159
# %bb.164:
	cmp	byte ptr [r12], r14b
	setne	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 376]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB4_159
.LBB4_165:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r15      # 8-byte Spill
	lea	rax, [4*r15]
	add	rax, r13
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 272], r13      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_166:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 408], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 168], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 136], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rsi + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rsi + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rsi + rcx + 1]
	mov	rdx, rcx
	vmovd	xmm4, eax
	mov	rcx, rbx
	movzx	eax, byte ptr [rsi + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rsi + rdx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rdx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rsi + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rsi + rdx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rsi + rdx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rsi + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rsi + rdx + 6]
	mov	qword ptr [rsp + 256], rdx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rsi + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rsi + rdx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rsi + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	r13, rbx
	or	r13, 544
	mov	qword ptr [rsp + 248], r13      # 8-byte Spill
	mov	rax, rbx
	or	rax, 576
	mov	qword ptr [rsp + 200], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 608
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	r10, rbx
	or	r10, 640
	mov	qword ptr [rsp + 128], r10      # 8-byte Spill
	mov	rax, rbx
	or	rax, 672
	mov	r12, rax
	mov	qword ptr [rsp + 176], rax      # 8-byte Spill
	mov	rdi, rbx
	or	rdi, 704
	mov	qword ptr [rsp + 216], rdi      # 8-byte Spill
	mov	rdx, rbx
	or	rdx, 736
	mov	qword ptr [rsp + 224], rdx      # 8-byte Spill
	mov	rax, rbx
	or	rax, 768
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	r15, rbx
	or	r15, 800
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	r11, rbx
	or	r11, 832
	mov	qword ptr [rsp + 208], r11      # 8-byte Spill
	mov	r8, rbx
	or	r8, 864
	mov	qword ptr [rsp + 264], r8       # 8-byte Spill
	mov	r14, rbx
	or	r14, 896
	mov	qword ptr [rsp + 120], r14      # 8-byte Spill
	mov	r9, rbx
	or	r9, 928
	mov	qword ptr [rsp + 88], r9        # 8-byte Spill
	mov	rax, rbx
	mov	qword ptr [rsp + 240], rbx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 32], rcx       # 8-byte Spill
	vpinsrb	xmm9, xmm0, byte ptr [rsi + r13], 1
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + r13], 2
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 7
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx], 15
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 1
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15], 2
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9], 3
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10], 4
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11], 5
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8], 6
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14], 7
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 12
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 13
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12], 14
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 15
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 1
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 2
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 3
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 4
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 5
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 6
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 7
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 8
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 9
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 10
	mov	rdx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 12
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rsi + rbx + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 1], 6
	mov	rbx, r8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 1], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 13
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 1], 14
	vinserti128	ymm13, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 1], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm10, edi
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 2], 1
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 2], 2
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 2], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 5
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 2], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 7
	mov	r12, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 8
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 9
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 2], 10
	mov	r11, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 2], 12
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 2], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 15
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 2], 1
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 3
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 7
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 9
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rsi + rcx + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 3
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 4
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 3], 6
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 3], 13
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 3], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rsi + rax + 3], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 5
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 3], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 3], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm8, edi
	mov	r12, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 1
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 4], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 3
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 4
	mov	rax, r10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 4], 5
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 4], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 4], 7
	mov	r10, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 4], 8
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 9
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 4], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 12
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 4], 15
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm15, byte ptr [rsi + rcx + 4], 1
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 4], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 3
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 4
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 5
	mov	rdi, r14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 7
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 4], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 9
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 11
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 12
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 13
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 4], 15
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm14, byte ptr [rsi + r14 + 5], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 2
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 5], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 7
	mov	r15, rax
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 5], 8
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 5], 11
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 13
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 5], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 15
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rsi + rcx + 5], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 5], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 5], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	vpinsrb	xmm0, xmm5, byte ptr [rsi + r12 + 5], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm15, ymm0, xmm4, 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm4, edi
	mov	r11, r14
	vpinsrb	xmm0, xmm12, byte ptr [rsi + r14 + 6], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 6], 3
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 6], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 5
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 6], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 8
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 9
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 6], 10
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 6], 11
	mov	rax, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 15
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rcx + 6], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 3
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 5
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 6], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 7
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 12
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 14
	mov	r12, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 1
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 2
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 7], 4
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 7], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 7], 6
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 7
	mov	r10, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 7], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 15
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 1
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 7], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 7], 6
	mov	r8, r13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 7
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 7], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 10
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 7], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rax + 7], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 11]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 11]
	vmovd	xmm2, edi
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + r15 + 8], 1
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 8], 2
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 8], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 8], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 8], 5
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 8], 6
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 8], 8
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 9
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 10
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 8], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 12
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 15
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rsi + rdx + 8], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 8], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 3
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 4
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 8], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 8], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 9
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 8], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 11
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 8], 12
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 13
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 14
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 15
	vpinsrb	xmm6, xmm8, byte ptr [rsi + r15 + 9], 1
	mov	r13, r15
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 3
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r14 + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 6
	mov	r9, rax
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r11 + 9], 7
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r10 + 9], 8
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 9
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r15 + 9], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 11
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r11 + 9], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm7, xmm11, byte ptr [rsi + rax + 9], 1
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 9], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdi + 9], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 5
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 9], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r12 + 9], 12
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 9], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm5, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 10], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 10], 4
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 10], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 7
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 10], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 10], 10
	mov	r9, qword ptr [rsp + 264]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 10], 12
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 10], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 15
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 10], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 3
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 4
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 5
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 10], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 13
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 14
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 11], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 4
	mov	r13, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 5
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 8
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 11], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 11], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 11], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 11], 5
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 11], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm3  # 32-byte Spill
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 11], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 13]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm1  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 13]
	vmovd	xmm1, edi
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 12], 1
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 12], 2
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 12], 4
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 12], 5
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 6
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 12], 7
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 12], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 12], 9
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 12], 10
	mov	r14, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 12], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 12], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 15
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rsi + rax + 12], 1
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 12], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 5
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 9
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 12], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 11
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 12], 12
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 14
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 1
	mov	r15, r11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 13], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 5
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 13], 8
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 13], 11
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 12
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 13
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 13], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 15
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 13], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 3
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 4
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 13], 5
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 7
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 13], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 13], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 13], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rax + 13], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	mov	r13, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 14]
	vmovd	xmm0, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 2
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 14], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 5
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 14], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 8
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 14], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 14], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 15
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 14], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 3
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 14], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 14], 5
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 14], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 14], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 14], 9
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 14], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 14], 12
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 14], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 14
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 15]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 1
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 15], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 4
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 15], 6
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 15], 7
	mov	r9, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 15], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 9
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 10
	mov	r15, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 11
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 15
	movzx	edi, byte ptr [rsi + r13 + 15]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 1
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 15], 4
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 15], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 15], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 15], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 15], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 14
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 16]
	vmovd	xmm0, edi
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 16], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 3
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 4
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 5
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 16], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 16], 8
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 16], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 15
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 16]
	vmovd	xmm1, edi
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 16], 1
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 16], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 3
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 16], 5
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 7
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 8
	mov	r11, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 16], 9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 12
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 14
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 15
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 17]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 1
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 2
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 17], 5
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 17], 7
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 8
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 9
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 17], 11
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 17], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 17]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 17], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 17], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 3
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 17], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 5
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 6
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 17], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 17], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 10
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 17], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rax + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r13 + 18]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 5
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 18], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 18], 8
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 9
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 18], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 18], 11
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 18], 12
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 18], 14
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 18], 15
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 18]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 1
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 18], 4
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 5
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 18], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 8
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 18], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 18], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 12
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 18], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 18], 14
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 15
	movzx	edi, byte ptr [rsi + r13 + 19]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 1
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 2
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 3
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 19], 4
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 5
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 6
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 7
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 19], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 19], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 19], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 19]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 1
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 19], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 4
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 19], 5
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 19], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 19], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 19], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 19], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 19], 14
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 20]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 1
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 2
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 20], 4
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 5
	mov	r8, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 20], 6
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 7
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 8
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 9
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 10
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 20], 11
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 20]
	vmovd	xmm1, edi
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 20], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 20], 2
	mov	r14, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 20], 3
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 20], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 20], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 20], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 7
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 8
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 20], 9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 12
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 13
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 20], 14
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 15
	movzx	edi, byte ptr [rsi + r11 + 21]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 2
	mov	r11, rdx
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 21], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 8
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 21], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 21]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 21], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 21], 4
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 21], 5
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 6
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 21], 9
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 21], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 11
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 21], 12
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rbx + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 22]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 4
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 5
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 22], 6
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 7
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 8
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 9
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 10
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 11
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 22], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 22]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 1
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 22], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 3
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 22], 5
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 22], 7
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 22], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 22], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 12
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 22], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 22], 15
	movzx	edi, byte ptr [rsi + rcx + 23]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 1
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 23], 6
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 23], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 23], 10
	mov	r12, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 23], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 23], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 23]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 23], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 23], 3
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 23], 4
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 23], 5
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 23], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 23], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 9
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 23], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 23], 13
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 23], 14
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm11, ymm3, xmm2, 1
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 24]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 2
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 4
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 5
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 24], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 24], 7
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 8
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 9
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 24], 11
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 12
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 15
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 24]
	vmovd	xmm1, edi
	mov	r9, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 1
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 24], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 24], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 24], 7
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 24], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 12
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 24], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 24], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 25]
	vmovd	xmm2, edi
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 1
	mov	r8, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 25], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 4
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 25], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 6
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 8
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 25], 9
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 10
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 25], 11
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 25], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 25], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 25], 14
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 25], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 25]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 25], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 2
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 25], 3
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 5
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 25], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 10
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 25], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 25], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 25], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rcx + 25], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 26]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 2
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 3
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 5
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 6
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 26], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 26], 12
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 13
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 26], 15
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 26]
	vmovd	xmm1, edi
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 1
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 26], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 4
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 5
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 6
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 7
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 26], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 9
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 26], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 12
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 26], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 14
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 15
	movzx	edi, byte ptr [rsi + rcx + 27]
	vmovd	xmm2, edi
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 27], 1
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 2
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 27], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 4
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 27], 5
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 6
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 7
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 8
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 9
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 27], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 27], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 27]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 1
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 3
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 4
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 27], 5
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 27], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 27], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 10
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 11
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 27], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 27], 13
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 27], 14
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 28]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 28], 1
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 28], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 28], 3
	mov	r9, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 28], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 28], 5
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 6
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 28], 7
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 28], 8
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 10
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 11
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 12
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 15
	movzx	edi, byte ptr [rsi + rax + 28]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 1
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 3
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 5
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 7
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 28], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 28], 10
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 28], 12
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 28], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 14
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 29]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 29], 2
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 29], 4
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 5
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 29], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 29], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 29], 8
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 9
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 29], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 29], 11
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 29], 13
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 29], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 15
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r15 + 29]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 3
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 29], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 29], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 29], 7
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 29], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 11
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 29], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm3, byte ptr [rsi + rax + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm4, byte ptr [rsi + r13 + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 30]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 30], 1
	movzx	edi, byte ptr [rsi + rax + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 31], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 31], 6
	mov	r13, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 31], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 11
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 31], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rsi + rax + 31], 15
	movzx	eax, byte ptr [rsi + r15 + 30]
	vmovd	xmm1, eax
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 30], 1
	movzx	eax, byte ptr [rsi + r15 + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 31], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r11 + 31], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 31], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rbx + 31], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 31], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 14
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vmovdqa	ymm2, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpeqb	ymm0, ymm13, ymm2
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI4_0] # ymm5 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	vpandn	ymm7, ymm7, ymm5
	vpaddb	ymm0, ymm7, ymm0
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI4_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpandn	ymm7, ymm7, ymm6
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI4_2] # ymm3 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpandn	ymm12, ymm12, ymm3
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm14, ymm2
	vmovdqa	ymm8, ymmword ptr [rip + .LCPI4_3] # ymm8 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpandn	ymm12, ymm12, ymm8
	vpor	ymm7, ymm12, ymm7
	vpcmpeqd	ymm1, ymm1, ymm1
	vpsubb	ymm0, ymm0, ymm1
	vpcmpeqd	ymm4, ymm4, ymm4
	vpor	ymm0, ymm0, ymm7
	vpcmpeqb	ymm7, ymm15, ymm2
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI4_4] # ymm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpandn	ymm7, ymm7, ymm1
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI4_5] # ymm13 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpandn	ymm12, ymm12, ymm13
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI4_6] # ymm9 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpandn	ymm12, ymm12, ymm9
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm5
	vpaddb	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm6
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm3
	vpor	ymm12, ymm12, ymm15
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm12, ymm12, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm1
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm13
	vpor	ymm12, ymm12, ymm15
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm9
	vpor	ymm12, ymm12, ymm15
	vpor	ymm12, ymm12, ymm7
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm5
	vpaddb	ymm7, ymm15, ymm7
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm6
	vpcmpeqb	ymm14, ymm2, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm3
	vpor	ymm14, ymm15, ymm14
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm14, ymm14, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm14, ymm7
	vpcmpeqb	ymm14, ymm2, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm1
	vpcmpeqb	ymm10, ymm10, ymm2
	vpandn	ymm10, ymm10, ymm13
	vpor	ymm10, ymm14, ymm10
	vpcmpeqb	ymm11, ymm11, ymm2
	vmovdqa	ymm14, ymm9
	vpandn	ymm11, ymm11, ymm9
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpeqb	ymm9, ymm2, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpcmpeqb	ymm8, ymm2, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpandn	ymm8, ymm8, ymm5
	vpaddb	ymm8, ymm8, ymm9
	vpcmpeqb	ymm5, ymm2, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpandn	ymm5, ymm5, ymm6
	vpcmpeqb	ymm6, ymm2, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpandn	ymm6, ymm6, ymm3
	vpor	ymm5, ymm5, ymm6
	vpcmpeqb	ymm3, ymm2, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpandn	ymm3, ymm3, ymmword ptr [rip + .LCPI4_3]
	vpor	ymm3, ymm5, ymm3
	vpsubb	ymm5, ymm8, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpeqb	ymm4, ymm2, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpandn	ymm4, ymm4, ymm1
	vpcmpeqb	ymm1, ymm2, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpandn	ymm1, ymm1, ymm13
	vpor	ymm1, ymm4, ymm1
	vpcmpeqb	ymm2, ymm2, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpandn	ymm2, ymm2, ymm14
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm0, ymm12       # ymm2 = ymm0[0],ymm12[0],ymm0[1],ymm12[1],ymm0[2],ymm12[2],ymm0[3],ymm12[3],ymm0[4],ymm12[4],ymm0[5],ymm12[5],ymm0[6],ymm12[6],ymm0[7],ymm12[7],ymm0[16],ymm12[16],ymm0[17],ymm12[17],ymm0[18],ymm12[18],ymm0[19],ymm12[19],ymm0[20],ymm12[20],ymm0[21],ymm12[21],ymm0[22],ymm12[22],ymm0[23],ymm12[23]
	vpunpckhbw	ymm0, ymm0, ymm12       # ymm0 = ymm0[8],ymm12[8],ymm0[9],ymm12[9],ymm0[10],ymm12[10],ymm0[11],ymm12[11],ymm0[12],ymm12[12],ymm0[13],ymm12[13],ymm0[14],ymm12[14],ymm0[15],ymm12[15],ymm0[24],ymm12[24],ymm0[25],ymm12[25],ymm0[26],ymm12[26],ymm0[27],ymm12[27],ymm0[28],ymm12[28],ymm0[29],ymm12[29],ymm0[30],ymm12[30],ymm0[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 408]      # 8-byte Reload
	vmovdqu	ymmword ptr [r13 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r13 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r13 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r13 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB4_166
# %bb.167:
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 400]      # 8-byte Reload
	jne	.LBB4_35
	jmp	.LBB4_133
.LBB4_168:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r15      # 8-byte Spill
	lea	rax, [r11 + 4*r15]
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_169:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 408], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rsi + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rsi + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rsi + rcx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rsi + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rsi + rcx + 2]
	mov	rdx, rcx
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	mov	rcx, rbx
	movzx	eax, byte ptr [rsi + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rdx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rsi + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rsi + rdx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rsi + rdx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rsi + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rsi + rdx + 6]
	mov	qword ptr [rsp + 256], rdx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rsi + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rsi + rdx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rsi + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 544
	mov	rbx, rax
	mov	qword ptr [rsp + 240], rax      # 8-byte Spill
	mov	rax, rcx
	or	rax, 576
	mov	qword ptr [rsp + 136], rax      # 8-byte Spill
	mov	r12, rcx
	or	r12, 608
	mov	qword ptr [rsp + 184], r12      # 8-byte Spill
	mov	rax, rcx
	or	rax, 640
	mov	r13, rax
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	r9, rcx
	or	r9, 672
	mov	qword ptr [rsp + 224], r9       # 8-byte Spill
	mov	r15, rcx
	or	r15, 704
	mov	qword ptr [rsp + 248], r15      # 8-byte Spill
	mov	rdi, rcx
	or	rdi, 736
	mov	qword ptr [rsp + 152], rdi      # 8-byte Spill
	mov	r14, rcx
	or	r14, 768
	mov	qword ptr [rsp + 112], r14      # 8-byte Spill
	mov	r11, rcx
	or	r11, 800
	mov	qword ptr [rsp + 216], r11      # 8-byte Spill
	mov	r10, rcx
	or	r10, 832
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	mov	rax, rcx
	or	rax, 864
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	r8, rcx
	or	r8, 896
	mov	qword ptr [rsp + 200], r8       # 8-byte Spill
	mov	rdx, rcx
	or	rdx, 928
	mov	qword ptr [rsp + 168], rdx      # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 208], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 40], rcx       # 8-byte Spill
	vpinsrb	xmm9, xmm0, byte ptr [rsi + rbx], 1
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + rbx], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10], 10
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx], 15
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14], 1
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9], 2
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10], 3
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11], 4
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12], 5
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8], 6
	mov	r15, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 9
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 12
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 13
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 14
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 15
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 1
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 2
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 3
	mov	rdx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 4
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 5
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 6
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 7
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 8
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 9
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 11
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 12
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 13
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 14
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rsi + r14 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 1], 8
	mov	r9, rdi
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 1], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 12
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 14
	vinserti128	ymm13, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 1], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm10, edi
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 2], 1
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 2], 2
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 2], 3
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 4
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 5
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 2], 6
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 8
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 2], 9
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 10
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 11
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 2], 12
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 2], 13
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 15
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 2], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 4
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 5
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 2], 8
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 2], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 11
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rsi + r8 + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 3
	mov	rdx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 4
	mov	r8, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 6
	mov	r10, rcx
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 7
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 3], 13
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 3], 14
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rsi + rax + 3], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 2
	mov	r12, rax
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 4
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 3], 7
	mov	r11, rdi
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 3], 9
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 12
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 3], 14
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 9]
	vmovd	xmm8, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 4], 1
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 2
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 4], 3
	mov	r13, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 4
	mov	rcx, r8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 4], 6
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 8
	mov	r8, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 9
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 11
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 4], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 4], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 15
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm15, byte ptr [rsi + rax + 4], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 4], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 4
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 5
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 4], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 4], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 8
	mov	r11, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 4], 9
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 4], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 11
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 4], 12
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 4], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 14
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 15
	vpinsrb	xmm4, xmm14, byte ptr [rsi + r9 + 5], 1
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 5], 2
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 4
	mov	r14, r13
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 5
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 6
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 5], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 5], 9
	mov	r10, r8
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 10
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 12
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 13
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 15
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rsi + r12 + 5], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 3
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 5], 4
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 5], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 5], 9
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 11
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 5], 12
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 5], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm15, ymm0, xmm4, 1
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm4, edi
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rsi + r8 + 6], 1
	mov	rcx, r9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 6], 2
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 6], 4
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 6], 5
	mov	r9, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 6], 6
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 6], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 6], 9
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 6], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 11
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 6], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 13
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 14
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 15
	vpinsrb	xmm5, xmm7, byte ptr [rsi + r12 + 6], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 3
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 4
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 5
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 6
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 7
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 9
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 6], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 11
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 12
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 6], 13
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 14
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 2
	mov	rbx, rcx
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 3
	mov	r15, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 7], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 7], 6
	mov	r13, r9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 7
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 8
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 7], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 7], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 13
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 14
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 7], 15
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 3
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 7], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 7], 10
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 7], 11
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 7], 12
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rdx + 7], 14
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 11]
	vmovd	xmm1, edi
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 11]
	vmovd	xmm2, edi
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + rdx + 8], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 8], 2
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 3
	mov	rdx, r15
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 8], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 8], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 8], 6
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 8], 7
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 8], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 8], 9
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 8], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 8], 11
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 8], 12
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 8], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 8], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 8], 15
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rsi + r10 + 8], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 3
	mov	rdi, r8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 8], 4
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 8], 5
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 8], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 8], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 9
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 8], 10
	mov	r8, r12
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 8], 11
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 8], 12
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 8], 13
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 8], 14
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 8], 15
	mov	r12, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rsi + r12 + 9], 1
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 2
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 3
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 4
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r13 + 9], 6
	mov	rcx, r13
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r14 + 9], 7
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 8
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 9
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r15 + 9], 10
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 11
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 12
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r9 + 9], 13
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r12 + 9], 14
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r14 + 9], 15
	vpinsrb	xmm7, xmm11, byte ptr [rsi + r10 + 9], 1
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rbx + 9], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdi + 9], 4
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 9], 5
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 9], 6
	mov	r15, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 9], 7
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 9
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 9], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r11 + 9], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm5, edi
	mov	r13, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 10], 1
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 2
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 10], 3
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 10], 4
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 5
	mov	rdx, rcx
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 6
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 9
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 11
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 12
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 10], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 10], 15
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 10], 1
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 10], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 3
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 4
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 10], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 6
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 10], 7
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 10], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 10], 9
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 10], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 10], 11
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 13
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 10], 14
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 11], 1
	mov	rcx, r13
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 3
	mov	r13, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 11], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 6
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 7
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 9
	mov	rbx, rax
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 11
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 13
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 15
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 11], 4
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 11], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 11], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 11], 12
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm3  # 32-byte Spill
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 13]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 13]
	vmovd	xmm1, edi
	mov	rax, rcx
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 12], 2
	mov	rcx, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 12], 3
	mov	r13, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 12], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 12], 5
	mov	r9, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 12], 6
	mov	r11, r8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 12], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 12], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 12], 9
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 12], 10
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 12], 11
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 12], 12
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 12], 13
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 12], 14
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 12], 15
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rsi + r14 + 12], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 12], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 3
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 4
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 5
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 6
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 12], 7
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 8
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 12], 9
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 10
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 12
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 13
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 14
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 1
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 13], 4
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 7
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 8
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 13], 11
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 13], 13
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 14
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 13], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 3
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 4
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 5
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 13], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 13], 9
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 13], 10
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 13], 11
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 13], 12
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 13], 13
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + r12 + 13], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 14]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 1
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 14], 2
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 3
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 14], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 5
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 6
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 14], 9
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 10
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 14], 11
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 12
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 14], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 14], 14
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 14], 15
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 1
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 14], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 4
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 5
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 14], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 14], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 14], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 14], 13
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 14], 15
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 15]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 3
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 4
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 5
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 6
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 7
	mov	r12, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 15], 8
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 15], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 12
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 13
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 15], 15
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r14 + 15]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 15], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 3
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 15], 4
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 15], 5
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 15], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 9
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 10
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 15], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 12
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 13
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 14
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r11 + 16]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 1
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 2
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 3
	mov	r11, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 16], 4
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 6
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 16], 8
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 9
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 11
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 15
	movzx	edi, byte ptr [rsi + r14 + 16]
	vmovd	xmm1, edi
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 16], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 16], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 16], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 16], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 12
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 16], 13
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 16], 14
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 15
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rbx + 17]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 1
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 2
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 17], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 17], 4
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 17], 5
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 7
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 17], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 9
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 11
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 12
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 17], 13
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 14
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 15
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 17]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 17], 1
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 3
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 4
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 5
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 9
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 17], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + r13 + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + rbx + 18]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 1
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 18], 3
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 18], 5
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 6
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 18], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 11
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 18], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 18], 14
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 18], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 18]
	vmovd	xmm1, edi
	mov	r8, r12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 18], 1
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 18], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 3
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 18], 4
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 18], 5
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 18], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 9
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 11
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 12
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 13
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 18], 15
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 19]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 1
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 2
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 3
	mov	r15, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 19], 4
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 5
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 6
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 7
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 8
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 9
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 19], 12
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 13
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 19], 15
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 19]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 19], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 19], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 19], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 19], 6
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 19], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 9
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 19], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 11
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 19], 12
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 19], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 14
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r13 + 20]
	vmovd	xmm0, edi
	mov	r13, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 20], 1
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 2
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 20], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 20], 4
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 20], 5
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 6
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 7
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 9
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 10
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 20], 11
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 12
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 13
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 14
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 15
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 20]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 1
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 3
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 4
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 20], 5
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 20], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 20], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 20], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 20], 13
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 20], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 21]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 21], 1
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 21], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 21], 3
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 21], 5
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 6
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 7
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 9
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 21], 11
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 21], 12
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 21], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 14
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 15
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 21]
	vmovd	xmm3, edi
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 21], 1
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 21], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 21], 5
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 21], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 21], 7
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 21], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 21], 9
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 21], 10
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 21], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 21], 12
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 21], 13
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rdx + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 22]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 2
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 22], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 22], 6
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 22], 7
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 8
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 9
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 22], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 22], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 22], 13
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 22], 14
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 22], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 22]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 22], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 22], 2
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 22], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 4
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 6
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 22], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 22], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 22], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 12
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 22], 14
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 15
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 23]
	vmovd	xmm2, edi
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 23], 1
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 2
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 3
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 23], 4
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 5
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 23], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 23], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 11
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 23], 12
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 13
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 23], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 23], 15
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 23]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 1
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 23], 3
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 4
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 23], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 23], 7
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 23], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 9
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 11
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 23], 12
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 13
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 14
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm11, ymm3, xmm2, 1
	movzx	edi, byte ptr [rsi + r13 + 24]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 24], 1
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 24], 2
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 24], 4
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 5
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 6
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 7
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 24], 8
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 24], 9
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 24], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 24], 12
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 24], 14
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 15
	movzx	edi, byte ptr [rsi + r11 + 24]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 2
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 3
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 24], 5
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 24], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 24], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 9
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 24], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 13
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 24], 14
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 25]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 25], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 25], 2
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 3
	mov	r15, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 25], 4
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 5
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 25], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 25], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 11
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 13
	mov	r9, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 25], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 15
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r14 + 25]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 1
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 25], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 4
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 25], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 7
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 25], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 25], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 12
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 25], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + r11 + 25], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 26]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 1
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 2
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 26], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 26], 4
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 26], 6
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 7
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 9
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 10
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 26], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 12
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 26], 14
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 26], 15
	movzx	edi, byte ptr [rsi + r14 + 26]
	vmovd	xmm1, edi
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 26], 2
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 3
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 26], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 5
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 26], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 9
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 10
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 12
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 26], 13
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 26], 15
	movzx	edi, byte ptr [rsi + rax + 27]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 1
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 27], 3
	mov	r10, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 27], 4
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 5
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 27], 6
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 7
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 27], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 9
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 27], 11
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 12
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 13
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 27], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 27], 15
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r9 + 27]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 1
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 2
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 27], 4
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 27], 5
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 7
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 9
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 27], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 13
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 27], 14
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 28]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 1
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 2
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 28], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 6
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 28], 8
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 9
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 28], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 12
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 28], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 28], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 15
	movzx	edi, byte ptr [rsi + r9 + 28]
	vmovd	xmm1, edi
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 28], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 2
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 28], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 28], 5
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 6
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 28], 9
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 10
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 28], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 12
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 28], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 28], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 29]
	vmovd	xmm2, edi
	mov	r12, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 29], 1
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 2
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 29], 3
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 4
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 5
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 6
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 29], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 29], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 29], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 29], 10
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 29], 11
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 29], 13
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 29], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 29], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 29]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 29], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 29], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 4
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 29], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 29], 7
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 29], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 29], 9
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 29], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 29], 13
	mov	r9, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm4, xmm3, byte ptr [rsi + r9 + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm4, byte ptr [rsi + r15 + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rbx + 30]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 30], 1
	movzx	edi, byte ptr [rsi + rbx + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 31], 1
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 3
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 4
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 6
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 31], 11
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 31], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rsi + rax + 31], 15
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	eax, byte ptr [rsi + rcx + 30]
	vmovd	xmm1, eax
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 30], 1
	movzx	eax, byte ptr [rsi + rcx + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 31], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 4
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r13 + 31], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 31], 13
	mov	rax, r9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 31], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vmovdqa	ymm2, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpeqb	ymm0, ymm13, ymm2
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI4_0] # ymm5 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	vpandn	ymm7, ymm7, ymm5
	vpaddb	ymm0, ymm7, ymm0
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI4_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpandn	ymm7, ymm7, ymm6
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI4_2] # ymm3 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpandn	ymm12, ymm12, ymm3
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm14, ymm2
	vmovdqa	ymm8, ymmword ptr [rip + .LCPI4_3] # ymm8 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpandn	ymm12, ymm12, ymm8
	vpor	ymm7, ymm12, ymm7
	vpcmpeqd	ymm1, ymm1, ymm1
	vpsubb	ymm0, ymm0, ymm1
	vpcmpeqd	ymm4, ymm4, ymm4
	vpor	ymm0, ymm0, ymm7
	vpcmpeqb	ymm7, ymm15, ymm2
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI4_4] # ymm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpandn	ymm7, ymm7, ymm1
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI4_5] # ymm13 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpandn	ymm12, ymm12, ymm13
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI4_6] # ymm9 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpandn	ymm12, ymm12, ymm9
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm5
	vpaddb	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm6
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm3
	vpor	ymm12, ymm12, ymm15
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm12, ymm12, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm1
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm13
	vpor	ymm12, ymm12, ymm15
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm9
	vpor	ymm12, ymm12, ymm15
	vpor	ymm12, ymm12, ymm7
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm5
	vpaddb	ymm7, ymm15, ymm7
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm6
	vpcmpeqb	ymm14, ymm2, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm3
	vpor	ymm14, ymm15, ymm14
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm14, ymm14, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm14, ymm7
	vpcmpeqb	ymm14, ymm2, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm1
	vpcmpeqb	ymm10, ymm10, ymm2
	vpandn	ymm10, ymm10, ymm13
	vpor	ymm10, ymm14, ymm10
	vpcmpeqb	ymm11, ymm11, ymm2
	vmovdqa	ymm14, ymm9
	vpandn	ymm11, ymm11, ymm9
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpeqb	ymm9, ymm2, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpcmpeqb	ymm8, ymm2, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpandn	ymm8, ymm8, ymm5
	vpaddb	ymm8, ymm8, ymm9
	vpcmpeqb	ymm5, ymm2, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpandn	ymm5, ymm5, ymm6
	vpcmpeqb	ymm6, ymm2, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpandn	ymm6, ymm6, ymm3
	vpor	ymm5, ymm5, ymm6
	vpcmpeqb	ymm3, ymm2, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpandn	ymm3, ymm3, ymmword ptr [rip + .LCPI4_3]
	vpor	ymm3, ymm5, ymm3
	vpsubb	ymm5, ymm8, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpeqb	ymm4, ymm2, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpandn	ymm4, ymm4, ymm1
	vpcmpeqb	ymm1, ymm2, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpandn	ymm1, ymm1, ymm13
	vpor	ymm1, ymm4, ymm1
	vpcmpeqb	ymm2, ymm2, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpandn	ymm2, ymm2, ymm14
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm0, ymm12       # ymm2 = ymm0[0],ymm12[0],ymm0[1],ymm12[1],ymm0[2],ymm12[2],ymm0[3],ymm12[3],ymm0[4],ymm12[4],ymm0[5],ymm12[5],ymm0[6],ymm12[6],ymm0[7],ymm12[7],ymm0[16],ymm12[16],ymm0[17],ymm12[17],ymm0[18],ymm12[18],ymm0[19],ymm12[19],ymm0[20],ymm12[20],ymm0[21],ymm12[21],ymm0[22],ymm12[22],ymm0[23],ymm12[23]
	vpunpckhbw	ymm0, ymm0, ymm12       # ymm0 = ymm0[8],ymm12[8],ymm0[9],ymm12[9],ymm0[10],ymm12[10],ymm0[11],ymm12[11],ymm0[12],ymm12[12],ymm0[13],ymm12[13],ymm0[14],ymm12[14],ymm0[15],ymm12[15],ymm0[24],ymm12[24],ymm0[25],ymm12[25],ymm0[26],ymm12[26],ymm0[27],ymm12[27],ymm0[28],ymm12[28],ymm0[29],ymm12[29],ymm0[30],ymm12[30],ymm0[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 408]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r11 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r11 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r11 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB4_169
# %bb.170:
	mov	r15, qword ptr [rsp + 392]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 400]      # 8-byte Reload
	jne	.LBB4_89
	jmp	.LBB4_125
.Lfunc_end4:
	.size	comparison_not_equal_arr_scalar_avx2, .Lfunc_end4-comparison_not_equal_arr_scalar_avx2
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function comparison_not_equal_scalar_arr_avx2
.LCPI5_0:
	.zero	32,2
.LCPI5_1:
	.zero	32,4
.LCPI5_2:
	.zero	32,8
.LCPI5_3:
	.zero	32,16
.LCPI5_4:
	.zero	32,32
.LCPI5_5:
	.zero	32,64
.LCPI5_6:
	.zero	32,128
	.text
	.globl	comparison_not_equal_scalar_arr_avx2
	.p2align	4, 0x90
	.type	comparison_not_equal_scalar_arr_avx2,@function
comparison_not_equal_scalar_arr_avx2:   # @comparison_not_equal_scalar_arr_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -32
	sub	rsp, 1280
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r15, rcx
	cmp	edi, 6
	jg	.LBB5_17
# %bb.1:
	cmp	edi, 3
	jle	.LBB5_32
# %bb.2:
	cmp	edi, 4
	je	.LBB5_60
# %bb.3:
	cmp	edi, 5
	je	.LBB5_72
# %bb.4:
	cmp	edi, 6
	jne	.LBB5_157
# %bb.5:
	mov	r14d, dword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_7:                                # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_7
# %bb.8:
	add	r15, 1
.LBB5_9:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB5_13
# %bb.10:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_11:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14d, dword ptr [rdx + 124]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 120]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 116]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 112]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 108]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 104]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 100]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 92]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 88]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 84]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 80]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 76]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 72]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 68]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 60]
	setne	r8b
	cmp	r14d, dword ptr [rdx + 56]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 52]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 48]
	setne	r11b
	cmp	r14d, dword ptr [rdx + 44]
	setne	r10b
	cmp	r14d, dword ptr [rdx + 40]
	setne	r9b
	cmp	r14d, dword ptr [rdx + 36]
	setne	dil
	cmp	r14d, dword ptr [rdx + 28]
	setne	al
	cmp	r14d, dword ptr [rdx + 24]
	setne	bl
	cmp	r14d, dword ptr [rdx + 20]
	setne	sil
	cmp	r14d, dword ptr [rdx + 16]
	setne	cl
	cmp	r14d, dword ptr [rdx + 12]
	setne	r13b
	cmp	r14d, dword ptr [rdx + 8]
	setne	r12b
	cmp	r14d, dword ptr [rdx]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 4]
	setne	r15b
	cmp	r14d, dword ptr [rdx + 32]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 64]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 96]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 168]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 136]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	sub	rdx, -128
	add	r15, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB5_11
# %bb.12:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB5_13:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB5_157
# %bb.14:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	je	.LBB5_127
# %bb.15:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB5_16:                               # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB5_16
	jmp	.LBB5_154
.LBB5_17:
	cmp	edi, 8
	jle	.LBB5_46
# %bb.18:
	cmp	edi, 9
	je	.LBB5_83
# %bb.19:
	cmp	edi, 11
	je	.LBB5_94
# %bb.20:
	cmp	edi, 12
	jne	.LBB5_157
# %bb.21:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB5_25
# %bb.22:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_23:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_23
# %bb.24:
	add	r15, 1
.LBB5_25:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB5_29
# %bb.26:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	mov	qword ptr [rsp + 168], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_27:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	vucomisd	xmm0, qword ptr [rdx]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 8]
	setne	r9b
	vucomisd	xmm0, qword ptr [rdx + 16]
	setne	r11b
	vucomisd	xmm0, qword ptr [rdx + 24]
	setne	r13b
	vucomisd	xmm0, qword ptr [rdx + 32]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 40]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 48]
	setne	bl
	vucomisd	xmm0, qword ptr [rdx + 56]
	setne	r12b
	vucomisd	xmm0, qword ptr [rdx + 64]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 72]
	setne	sil
	vucomisd	xmm0, qword ptr [rdx + 80]
	setne	dil
	vucomisd	xmm0, qword ptr [rdx + 88]
	setne	r8b
	vucomisd	xmm0, qword ptr [rdx + 96]
	setne	r10b
	vucomisd	xmm0, qword ptr [rdx + 104]
	setne	r15b
	vucomisd	xmm0, qword ptr [rdx + 112]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 120]
	setne	cl
	vucomisd	xmm0, qword ptr [rdx + 128]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 136]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 144]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 152]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 160]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 168]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 176]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 184]
	setne	r14b
	vucomisd	xmm0, qword ptr [rdx + 192]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 200]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 208]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 216]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 224]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 232]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 240]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 248]
	setne	al
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r12b, 7
	or	r12b, bl
	shl	r11b, 2
	or	r11b, r9b
	add	sil, sil
	add	sil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r11b
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r8b, 3
	or	r8b, dil
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r10b, 4
	or	r10b, r8b
	shl	r15b, 5
	or	r15b, r10b
	movzx	esi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r12b, bl
	or	cl, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	ebx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 88]         # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	byte ptr [r15], r12b
	movzx	esi, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r14b, 7
	or	r14b, sil
	mov	byte ptr [r15 + 1], cl
	or	r14b, bl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], r14b
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB5_27
# %bb.28:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
.LBB5_29:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB5_157
# %bb.30:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB5_136
# %bb.31:
	xor	edi, edi
	jmp	.LBB5_138
.LBB5_32:
	cmp	edi, 2
	je	.LBB5_105
# %bb.33:
	cmp	edi, 3
	jne	.LBB5_157
# %bb.34:
	mov	r11b, byte ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_38
# %bb.35:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_36:                               # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_36
# %bb.37:
	add	r15, 1
.LBB5_38:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB5_128
# %bb.39:
	cmp	r14, 32
	mov	dword ptr [rsp + 28], r11d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 384], r14      # 8-byte Spill
	jb	.LBB5_42
# %bb.40:
	mov	rax, r14
	shl	rax, 5
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB5_165
# %bb.41:
	lea	rax, [r15 + 4*r14]
	cmp	rdx, rax
	jae	.LBB5_165
.LBB5_42:
	xor	eax, eax
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	mov	r13, r15
.LBB5_43:
	sub	r14, qword ptr [rsp + 376]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_44:                               # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx + 31]
	setne	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 30]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 29]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 28]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 27]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 26]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 25]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 23]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 22]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 21]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 20]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 19]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 18]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 17]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 15]
	setne	r14b
	cmp	r11b, byte ptr [rdx + 14]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 13]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 12]
	setne	r12b
	cmp	r11b, byte ptr [rdx + 11]
	setne	r15b
	cmp	r11b, byte ptr [rdx + 10]
	setne	r11b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 9]
	setne	r10b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 7]
	setne	dil
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 6]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 5]
	setne	r9b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 4]
	setne	r8b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 3]
	setne	sil
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 2]
	setne	cl
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx]
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 1]
	setne	al
	mov	rbx, r13
	mov	r13d, dword ptr [rsp + 28]      # 4-byte Reload
	cmp	r13b, byte ptr [rdx + 8]
	mov	r13, rbx
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	bl, byte ptr [rdx + 16]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	bl, byte ptr [rdx + 24]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	add	al, al
	add	al, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	shl	sil, 3
	or	sil, cl
	shl	r8b, 4
	or	r8b, sil
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, r9b
	mov	byte ptr [r13], dil
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 152]      # 1-byte Folded Reload
	shl	r11b, 2
	or	r11b, r10b
	shl	r15b, 3
	or	r15b, r11b
	mov	r11d, dword ptr [rsp + 28]      # 4-byte Reload
	shl	r12b, 4
	or	r12b, r15b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r12b
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r14b, 7
	or	r14b, cl
	or	r14b, al
	mov	byte ptr [r13 + 1], r14b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 272]       # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 3], al
	add	rdx, 32
	add	r13, 4
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB5_44
# %bb.45:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 384]      # 8-byte Reload
	jmp	.LBB5_129
.LBB5_46:
	cmp	edi, 7
	je	.LBB5_117
# %bb.47:
	cmp	edi, 8
	jne	.LBB5_157
# %bb.48:
	mov	r14, qword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_52
# %bb.49:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_50:                               # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_50
# %bb.51:
	add	r15, 1
.LBB5_52:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB5_56
# %bb.53:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_54:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14, qword ptr [rdx + 248]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 240]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 232]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 224]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 216]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 208]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 200]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 184]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 176]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 168]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 160]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 152]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 144]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 136]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 120]
	setne	r8b
	cmp	r14, qword ptr [rdx + 112]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 104]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 96]
	setne	r11b
	cmp	r14, qword ptr [rdx + 88]
	setne	r10b
	cmp	r14, qword ptr [rdx + 80]
	setne	r9b
	cmp	r14, qword ptr [rdx + 72]
	setne	dil
	cmp	r14, qword ptr [rdx + 56]
	setne	al
	cmp	r14, qword ptr [rdx + 48]
	setne	bl
	cmp	r14, qword ptr [rdx + 40]
	setne	sil
	cmp	r14, qword ptr [rdx + 32]
	setne	cl
	cmp	r14, qword ptr [rdx + 24]
	setne	r13b
	cmp	r14, qword ptr [rdx + 16]
	setne	r12b
	cmp	r14, qword ptr [rdx]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 8]
	setne	r15b
	cmp	r14, qword ptr [rdx + 64]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 128]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 192]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 168]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 136]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB5_54
# %bb.55:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB5_56:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB5_157
# %bb.57:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	je	.LBB5_93
# %bb.58:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB5_59:                               # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB5_59
	jmp	.LBB5_146
.LBB5_60:
	movzx	r14d, word ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_64
# %bb.61:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_62:                               # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_62
# %bb.63:
	add	r15, 1
.LBB5_64:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB5_68
# %bb.65:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_66:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14w, word ptr [rdx + 62]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 60]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 58]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 56]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 54]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 52]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 50]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 46]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 44]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 42]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 40]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 38]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 36]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 34]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 30]
	setne	r8b
	cmp	r14w, word ptr [rdx + 28]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 26]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 24]
	setne	r11b
	cmp	r14w, word ptr [rdx + 22]
	setne	r10b
	cmp	r14w, word ptr [rdx + 20]
	setne	r9b
	cmp	r14w, word ptr [rdx + 18]
	setne	dil
	cmp	r14w, word ptr [rdx + 14]
	setne	al
	cmp	r14w, word ptr [rdx + 12]
	setne	bl
	cmp	r14w, word ptr [rdx + 10]
	setne	sil
	cmp	r14w, word ptr [rdx + 8]
	setne	cl
	cmp	r14w, word ptr [rdx + 6]
	setne	r13b
	cmp	r14w, word ptr [rdx + 4]
	setne	r12b
	cmp	r14w, word ptr [rdx]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 2]
	setne	r15b
	cmp	r14w, word ptr [rdx + 16]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 32]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 48]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 168]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 136]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 64
	add	r15, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB5_66
# %bb.67:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB5_68:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB5_157
# %bb.69:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	je	.LBB5_82
# %bb.70:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB5_71:                               # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14w, word ptr [rdx + 2]
	lea	rdx, [rdx + 4]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB5_71
	jmp	.LBB5_142
.LBB5_72:
	movzx	r14d, word ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_76
# %bb.73:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_74:                               # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_74
# %bb.75:
	add	r15, 1
.LBB5_76:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB5_80
# %bb.77:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_78:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14w, word ptr [rdx + 62]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 60]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 58]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 56]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 54]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 52]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 50]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 46]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 44]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 42]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 40]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 38]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 36]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 34]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 30]
	setne	r8b
	cmp	r14w, word ptr [rdx + 28]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 26]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 24]
	setne	r11b
	cmp	r14w, word ptr [rdx + 22]
	setne	r10b
	cmp	r14w, word ptr [rdx + 20]
	setne	r9b
	cmp	r14w, word ptr [rdx + 18]
	setne	dil
	cmp	r14w, word ptr [rdx + 14]
	setne	al
	cmp	r14w, word ptr [rdx + 12]
	setne	bl
	cmp	r14w, word ptr [rdx + 10]
	setne	sil
	cmp	r14w, word ptr [rdx + 8]
	setne	cl
	cmp	r14w, word ptr [rdx + 6]
	setne	r13b
	cmp	r14w, word ptr [rdx + 4]
	setne	r12b
	cmp	r14w, word ptr [rdx]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 2]
	setne	r15b
	cmp	r14w, word ptr [rdx + 16]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 32]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 48]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 168]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 136]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 64
	add	r15, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB5_78
# %bb.79:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB5_80:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB5_157
# %bb.81:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB5_140
.LBB5_82:
	xor	edi, edi
	jmp	.LBB5_142
.LBB5_83:
	mov	r14, qword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_87
# %bb.84:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_85:                               # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_85
# %bb.86:
	add	r15, 1
.LBB5_87:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB5_91
# %bb.88:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_89:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14, qword ptr [rdx + 248]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 240]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 232]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 224]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 216]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 208]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 200]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 184]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 176]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 168]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 160]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 152]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 144]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 136]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 120]
	setne	r8b
	cmp	r14, qword ptr [rdx + 112]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 104]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 96]
	setne	r11b
	cmp	r14, qword ptr [rdx + 88]
	setne	r10b
	cmp	r14, qword ptr [rdx + 80]
	setne	r9b
	cmp	r14, qword ptr [rdx + 72]
	setne	dil
	cmp	r14, qword ptr [rdx + 56]
	setne	al
	cmp	r14, qword ptr [rdx + 48]
	setne	bl
	cmp	r14, qword ptr [rdx + 40]
	setne	sil
	cmp	r14, qword ptr [rdx + 32]
	setne	cl
	cmp	r14, qword ptr [rdx + 24]
	setne	r13b
	cmp	r14, qword ptr [rdx + 16]
	setne	r12b
	cmp	r14, qword ptr [rdx]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 8]
	setne	r15b
	cmp	r14, qword ptr [rdx + 64]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 128]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 192]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 168]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 136]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB5_89
# %bb.90:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB5_91:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB5_157
# %bb.92:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB5_144
.LBB5_93:
	xor	edi, edi
	jmp	.LBB5_146
.LBB5_94:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB5_98
# %bb.95:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_96:                               # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_96
# %bb.97:
	add	r15, 1
.LBB5_98:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB5_102
# %bb.99:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	mov	qword ptr [rsp + 168], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_100:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	vucomiss	xmm0, dword ptr [rdx]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 4]
	setne	r9b
	vucomiss	xmm0, dword ptr [rdx + 8]
	setne	r11b
	vucomiss	xmm0, dword ptr [rdx + 12]
	setne	r13b
	vucomiss	xmm0, dword ptr [rdx + 16]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 20]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 24]
	setne	bl
	vucomiss	xmm0, dword ptr [rdx + 28]
	setne	r12b
	vucomiss	xmm0, dword ptr [rdx + 32]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 36]
	setne	sil
	vucomiss	xmm0, dword ptr [rdx + 40]
	setne	dil
	vucomiss	xmm0, dword ptr [rdx + 44]
	setne	r8b
	vucomiss	xmm0, dword ptr [rdx + 48]
	setne	r10b
	vucomiss	xmm0, dword ptr [rdx + 52]
	setne	r15b
	vucomiss	xmm0, dword ptr [rdx + 56]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 60]
	setne	cl
	vucomiss	xmm0, dword ptr [rdx + 64]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 68]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 72]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 76]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 80]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 84]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 88]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 92]
	setne	r14b
	vucomiss	xmm0, dword ptr [rdx + 96]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 100]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 104]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 108]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 112]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 116]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 120]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 124]
	setne	al
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r12b, 7
	or	r12b, bl
	shl	r11b, 2
	or	r11b, r9b
	add	sil, sil
	add	sil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r11b
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r8b, 3
	or	r8b, dil
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r10b, 4
	or	r10b, r8b
	shl	r15b, 5
	or	r15b, r10b
	movzx	esi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r12b, bl
	or	cl, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	ebx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 88]         # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	byte ptr [r15], r12b
	movzx	esi, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r14b, 7
	or	r14b, sil
	mov	byte ptr [r15 + 1], cl
	or	r14b, bl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], r14b
	mov	byte ptr [r15 + 3], al
	add	rdx, 128
	add	r15, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB5_100
# %bb.101:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
.LBB5_102:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB5_157
# %bb.103:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB5_148
# %bb.104:
	xor	edi, edi
	jmp	.LBB5_150
.LBB5_105:
	mov	r11b, byte ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_109
# %bb.106:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_107:                              # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_107
# %bb.108:
	add	r15, 1
.LBB5_109:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB5_132
# %bb.110:
	cmp	r14, 32
	mov	dword ptr [rsp + 28], r11d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 384], r14      # 8-byte Spill
	jb	.LBB5_113
# %bb.111:
	mov	rax, r14
	shl	rax, 5
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB5_168
# %bb.112:
	lea	rax, [r15 + 4*r14]
	cmp	rdx, rax
	jae	.LBB5_168
.LBB5_113:
	xor	eax, eax
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	mov	r13, r15
.LBB5_114:
	sub	r14, qword ptr [rsp + 376]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_115:                              # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx + 31]
	setne	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 30]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 29]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 28]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 27]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 26]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 25]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 23]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 22]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 21]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 20]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 19]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 18]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 17]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 15]
	setne	r14b
	cmp	r11b, byte ptr [rdx + 14]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 13]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 12]
	setne	r12b
	cmp	r11b, byte ptr [rdx + 11]
	setne	r15b
	cmp	r11b, byte ptr [rdx + 10]
	setne	r11b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 9]
	setne	r10b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 7]
	setne	dil
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 6]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 5]
	setne	r9b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 4]
	setne	r8b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 3]
	setne	sil
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 2]
	setne	cl
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx]
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 1]
	setne	al
	mov	rbx, r13
	mov	r13d, dword ptr [rsp + 28]      # 4-byte Reload
	cmp	r13b, byte ptr [rdx + 8]
	mov	r13, rbx
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	bl, byte ptr [rdx + 16]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	bl, byte ptr [rdx + 24]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	add	al, al
	add	al, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	shl	sil, 3
	or	sil, cl
	shl	r8b, 4
	or	r8b, sil
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, r9b
	mov	byte ptr [r13], dil
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 152]      # 1-byte Folded Reload
	shl	r11b, 2
	or	r11b, r10b
	shl	r15b, 3
	or	r15b, r11b
	mov	r11d, dword ptr [rsp + 28]      # 4-byte Reload
	shl	r12b, 4
	or	r12b, r15b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r12b
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r14b, 7
	or	r14b, cl
	or	r14b, al
	mov	byte ptr [r13 + 1], r14b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 272]       # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 3], al
	add	rdx, 32
	add	r13, 4
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB5_115
# %bb.116:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 384]      # 8-byte Reload
	jmp	.LBB5_133
.LBB5_117:
	mov	r14d, dword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_121
# %bb.118:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB5_119:                              # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_119
# %bb.120:
	add	r15, 1
.LBB5_121:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB5_125
# %bb.122:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_123:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14d, dword ptr [rdx + 124]
	setne	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 120]
	setne	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 116]
	setne	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 112]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 108]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 104]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 100]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 92]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 88]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 84]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 80]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 76]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 72]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 68]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 60]
	setne	r8b
	cmp	r14d, dword ptr [rdx + 56]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 52]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 48]
	setne	r11b
	cmp	r14d, dword ptr [rdx + 44]
	setne	r10b
	cmp	r14d, dword ptr [rdx + 40]
	setne	r9b
	cmp	r14d, dword ptr [rdx + 36]
	setne	dil
	cmp	r14d, dword ptr [rdx + 28]
	setne	al
	cmp	r14d, dword ptr [rdx + 24]
	setne	bl
	cmp	r14d, dword ptr [rdx + 20]
	setne	sil
	cmp	r14d, dword ptr [rdx + 16]
	setne	cl
	cmp	r14d, dword ptr [rdx + 12]
	setne	r13b
	cmp	r14d, dword ptr [rdx + 8]
	setne	r12b
	cmp	r14d, dword ptr [rdx]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 4]
	setne	r15b
	cmp	r14d, dword ptr [rdx + 32]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 64]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 96]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 168]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 136]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	sub	rdx, -128
	add	r15, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB5_123
# %bb.124:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB5_125:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB5_157
# %bb.126:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB5_152
.LBB5_127:
	xor	edi, edi
	jmp	.LBB5_154
.LBB5_128:
	mov	r13, r15
.LBB5_129:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB5_157
# %bb.130:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	je	.LBB5_135
# %bb.158:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	.p2align	4, 0x90
.LBB5_159:                              # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx + rsi]
	setne	al
	neg	al
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	movzx	r9d, byte ptr [r13 + rdi]
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r13 + rdi], bl
	cmp	r11b, byte ptr [rdx + rsi + 1]
	lea	rsi, [rsi + 2]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r13 + rdi], al
	cmp	r10, rsi
	jne	.LBB5_159
	jmp	.LBB5_162
.LBB5_132:
	mov	r13, r15
.LBB5_133:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB5_157
# %bb.134:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB5_160
.LBB5_135:
	xor	esi, esi
	jmp	.LBB5_163
.LBB5_136:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB5_137:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	al, r9b
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	vucomisd	xmm0, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB5_137
.LBB5_138:
	test	r8b, 1
	je	.LBB5_157
# %bb.139:
	vucomisd	xmm0, qword ptr [rdx]
	jmp	.LBB5_156
.LBB5_140:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB5_141:                              # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14w, word ptr [rdx + 2]
	lea	rdx, [rdx + 4]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB5_141
.LBB5_142:
	test	r8b, 1
	je	.LBB5_157
# %bb.143:
	cmp	r14w, word ptr [rdx]
	jmp	.LBB5_156
.LBB5_144:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB5_145:                              # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB5_145
.LBB5_146:
	test	r8b, 1
	je	.LBB5_157
# %bb.147:
	cmp	r14, qword ptr [rdx]
	jmp	.LBB5_156
.LBB5_148:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB5_149:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	al, r9b
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	vucomiss	xmm0, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB5_149
.LBB5_150:
	test	r8b, 1
	je	.LBB5_157
# %bb.151:
	vucomiss	xmm0, dword ptr [rdx]
	jmp	.LBB5_156
.LBB5_152:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB5_153:                              # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB5_153
.LBB5_154:
	test	r8b, 1
	je	.LBB5_157
# %bb.155:
	cmp	r14d, dword ptr [rdx]
.LBB5_156:
	setne	al
	neg	al
	mov	rdx, rdi
	shr	rdx, 3
	mov	sil, byte ptr [r15 + rdx]
	and	dil, 7
	mov	bl, 1
	mov	ecx, edi
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r15 + rdx], bl
.LBB5_157:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB5_160:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	.p2align	4, 0x90
.LBB5_161:                              # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx + rsi]
	setne	al
	neg	al
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	movzx	r9d, byte ptr [r13 + rdi]
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r13 + rdi], bl
	cmp	r11b, byte ptr [rdx + rsi + 1]
	lea	rsi, [rsi + 2]
	setne	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r13 + rdi], al
	cmp	r10, rsi
	jne	.LBB5_161
.LBB5_162:
	add	rdx, rsi
.LBB5_163:
	test	r8b, 1
	je	.LBB5_157
# %bb.164:
	cmp	r11b, byte ptr [rdx]
	setne	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r13 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r13 + rdx], bl
	jmp	.LBB5_157
.LBB5_165:
	and	r14, -32
	mov	rax, r14
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 392], rax      # 8-byte Spill
	mov	qword ptr [rsp + 376], r14      # 8-byte Spill
	lea	rax, [r15 + 4*r14]
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	vmovd	xmm0, r11d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	xor	esi, esi
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_166:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 408], rsi      # 8-byte Spill
	shl	rsi, 5
	mov	rax, rsi
	or	rax, 32
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 64
	mov	qword ptr [rsp + 224], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 96
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 128
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 160
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rsi
	or	rax, 192
	mov	qword ptr [rsp + 168], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 224
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 256
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 288
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rsi
	mov	qword ptr [rsp + 264], rsi      # 8-byte Spill
	or	rax, 320
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rdx + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rdx + rsi]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rdx + rcx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rdx + rsi + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rdx + rcx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rsi + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rcx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rdx + rsi + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rdx + rcx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rsi + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rdx + rcx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rdx + rsi + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rdx + rcx + 6]
	mov	qword ptr [rsp + 240], rcx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rdx + rsi + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rdx + rcx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rdx + rsi + 7]
	vmovd	xmm1, eax
	mov	rax, rsi
	or	rax, 352
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rsi
	or	rax, 384
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rsi
	or	rax, 416
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rsi
	or	rax, 448
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, rsi
	or	rax, 480
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 544
	mov	r13, rax
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	mov	r12, rsi
	or	r12, 576
	mov	qword ptr [rsp + 200], r12      # 8-byte Spill
	mov	rax, rsi
	or	rax, 608
	mov	r14, rax
	mov	qword ptr [rsp + 248], rax      # 8-byte Spill
	mov	r15, rsi
	or	r15, 640
	mov	qword ptr [rsp + 256], r15      # 8-byte Spill
	mov	r10, rsi
	or	r10, 672
	mov	qword ptr [rsp + 112], r10      # 8-byte Spill
	mov	rax, rsi
	or	rax, 704
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	r8, rsi
	or	r8, 736
	mov	qword ptr [rsp + 64], r8        # 8-byte Spill
	mov	rax, rsi
	or	rax, 768
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	rax, rsi
	or	rax, 800
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	r9, rsi
	or	r9, 832
	mov	qword ptr [rsp + 176], r9       # 8-byte Spill
	mov	rdi, rsi
	or	rdi, 864
	mov	qword ptr [rsp + 96], rdi       # 8-byte Spill
	mov	rcx, rsi
	or	rcx, 896
	mov	qword ptr [rsp + 136], rcx      # 8-byte Spill
	mov	r11, rsi
	or	r11, 928
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	mov	rax, rsi
	or	rax, 960
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	or	rsi, 992
	mov	qword ptr [rsp + 80], rsi       # 8-byte Spill
	vpinsrb	xmm9, xmm0, byte ptr [rdx + r13], 1
	vpinsrb	xmm0, xmm9, byte ptr [rdx + r12], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10], 5
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8], 7
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 8
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi], 15
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12], 1
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14], 2
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11], 3
	mov	r8, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8], 4
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9], 5
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 6
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi], 7
	mov	r15, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15], 8
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 9
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 10
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx], 13
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx], 14
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13], 15
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 1
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 2
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 3
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 4
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 5
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 6
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 9
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 10
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 11
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 12
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 14
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r12 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 1], 2
	mov	rcx, r14
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 10
	mov	r11, rax
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 1], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 13
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 14
	vinserti128	ymm13, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 1], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 8]
	vmovd	xmm10, edi
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 2], 1
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 2], 2
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 2], 3
	mov	r9, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 2], 4
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 2], 5
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 6
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 9
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 2], 10
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 2], 11
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 2], 12
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 2], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 15
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 1
	mov	rax, rcx
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 2
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 3
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 4
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 5
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 8
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 2], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 13
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 14
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rdx + rsi + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 3], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 3], 5
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 6
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 3], 7
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 8
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 3], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 14
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 3], 15
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm8, byte ptr [rdx + rcx + 3], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 2
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 3
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 3], 4
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 3], 5
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 6
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 8
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 9
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rdi + 3], 14
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 9]
	vmovd	xmm8, edi
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 4], 1
	mov	r8, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 4], 2
	mov	rbx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 4], 3
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 4], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 4], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 4], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 4], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 4], 9
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 4], 10
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 4], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 4], 12
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 4], 13
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 4], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 4], 15
	mov	r10, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm15, byte ptr [rdx + r10 + 4], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 3
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 7
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 9
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 13
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 4], 15
	vpinsrb	xmm4, xmm14, byte ptr [rdx + r12 + 5], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 5], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 3
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 5], 4
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 5], 5
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 6
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 7
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 8
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 5], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 5], 11
	mov	r15, r11
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 5], 13
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 5], 14
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 5], 15
	vpinsrb	xmm5, xmm6, byte ptr [rdx + r10 + 5], 1
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 2
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 3
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 4
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 5], 5
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 5], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 5], 8
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 5], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 13
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	vpinsrb	xmm0, xmm5, byte ptr [rdx + r13 + 5], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm15, ymm0, xmm4, 1
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 10]
	vmovd	xmm4, edi
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rdx + r11 + 6], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 2
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 6], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 6], 5
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 6
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 9
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 11
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 12
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 6], 13
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 6], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 15
	vpinsrb	xmm5, xmm7, byte ptr [rdx + r10 + 6], 1
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 2
	mov	r8, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 6], 3
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 5
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 6], 6
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 7
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 6], 8
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 9
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 10
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 11
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 12
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 13
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 14
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 7], 1
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 2
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 3
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 4
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 5
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 7
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 7], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 9
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 10
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 7], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 7], 14
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 7], 1
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 7], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 7], 3
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 4
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 6
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 7], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 7], 9
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 7], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 7], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rax + 7], 14
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 11]
	vmovd	xmm1, edi
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 11]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rax + 8], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 2
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 3
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 8], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 5
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 6
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 8], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 9
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 8], 10
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 8], 11
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 8], 12
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 8], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 8], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 8], 15
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r15 + 8], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 2
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 3
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 4
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 8], 5
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 8], 6
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 8], 7
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 8
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 10
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 12
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 13
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 14
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 8], 15
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rdx + r11 + 9], 1
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 3
	mov	rbx, rcx
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 9], 4
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 9], 6
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 7
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 8
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 9], 9
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 9], 10
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 9], 11
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 9], 12
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 9], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 9], 15
	vpinsrb	xmm7, xmm11, byte ptr [rdx + r15 + 9], 1
	mov	r12, r15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 2
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 3
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rdi + 9], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 9], 6
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r13 + 9], 7
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 8
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 9], 9
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + rax + 9], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 12]
	vmovd	xmm5, edi
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 10], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 10], 3
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 10], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 8
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 9
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 10
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 11
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 10], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 15
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 10], 1
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 10], 2
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 10], 3
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 10], 4
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 5
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 6
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 10], 7
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 9
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 10
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 13
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 14
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 11], 3
	mov	rax, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 11], 4
	mov	r11, r13
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 11], 6
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 11], 9
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 11], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 11], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 12
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 15
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 11], 2
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 11], 4
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 5
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 11], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 11], 7
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 8
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 9
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 11], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm3  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 14
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 13]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm1  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 13]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 1
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 12], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 12], 4
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 12], 5
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 12], 6
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 12], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 8
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 12], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 12], 10
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 12], 11
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 12], 12
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 12], 13
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 12], 14
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 12], 15
	vpinsrb	xmm2, xmm5, byte ptr [rdx + rbx + 12], 1
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 12], 2
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 3
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 4
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 12], 6
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 7
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 8
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 9
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 12
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 13
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 14
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 13], 2
	mov	r13, rsi
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 13], 3
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 13], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 13], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 13], 9
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 10
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 13], 11
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 12
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 13], 15
	mov	r14, r12
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 13], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 3
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 4
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 5
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 7
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 13], 8
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 13], 9
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 13
	mov	r15, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rdi + 13], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 14]
	vmovd	xmm0, edi
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 14], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 3
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 14], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 14], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 14], 7
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 14], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 14], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 14], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 11
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 14], 12
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 14], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 14], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 14], 15
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 14], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 2
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 14], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 14], 4
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 14], 5
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 14], 6
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 14], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 14], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 14], 9
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 14], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 14], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 14], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 14], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 14], 14
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 15]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 15], 1
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 15], 2
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 15], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 4
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 5
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 15], 6
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 15], 8
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 15], 9
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 15], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 15], 13
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 15
	mov	r10, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r10 + 15]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 15], 1
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 15], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 3
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 4
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 6
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 8
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 9
	mov	r15, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 15], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 15], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 13
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 14
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	movzx	edi, byte ptr [rdx + r9 + 16]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 16], 1
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 16], 2
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 16], 3
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 16], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 16], 9
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 16], 10
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 11
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 12
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 14
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 15
	movzx	edi, byte ptr [rdx + r10 + 16]
	vmovd	xmm1, edi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 16], 2
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 3
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 4
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 5
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 16], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 7
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 8
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 16], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 16], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 12
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 16], 13
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 16], 15
	movzx	edi, byte ptr [rdx + r9 + 17]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 17], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 17], 3
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 4
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 17], 5
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 6
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 7
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 17], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 17], 10
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 11
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 12
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 17], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 17], 15
	movzx	edi, byte ptr [rdx + r10 + 17]
	vmovd	xmm3, edi
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 17], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 2
	mov	r8, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 17], 3
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 4
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 17], 6
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 7
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 17], 8
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 9
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 12
	mov	r11, rbx
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 17], 13
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rbx + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 18]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 1
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 2
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 3
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 18], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 6
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 18], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 9
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 10
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 11
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 18], 13
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 15
	movzx	edi, byte ptr [rdx + r10 + 18]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 18], 1
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 18], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 3
	mov	r12, r8
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 4
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 18], 5
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 6
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 18], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 18], 8
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 18], 13
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 18], 15
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r15 + 19]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 1
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 19], 2
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 3
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 19], 4
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 5
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 6
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 8
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 19], 9
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 10
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 11
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 12
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 14
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 15
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 19]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 19], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 19], 6
	mov	r14, r8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 19], 7
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 9
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 11
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 13
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 19], 14
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rdx + r15 + 20]
	vmovd	xmm0, edi
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 20], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 20], 2
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 20], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 20], 4
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 5
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 6
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 20], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 20], 9
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 10
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 11
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 12
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 20], 15
	movzx	edi, byte ptr [rdx + rcx + 20]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 20], 3
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 4
	mov	r11, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 20], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 20], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 8
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 20], 9
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 20], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 20], 14
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 20], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 21]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 21], 1
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 21], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 21], 3
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 21], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 5
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 21], 7
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 21], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 21], 9
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 21], 10
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 21], 11
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 21], 12
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 21], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 21]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 2
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 3
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 21], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 21], 6
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 7
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 9
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 11
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 21], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 13
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r12 + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 22]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 22], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 22], 2
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 22], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 22], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 6
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 22], 8
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 9
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 22], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 22], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 22], 12
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 22], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 14
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 22], 15
	mov	r11, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 22]
	vmovd	xmm1, edi
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 22], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 2
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 3
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 4
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 5
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 6
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 22], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 8
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 9
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 22], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 22], 12
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 22], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 14
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 15
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rbx + 23]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 23], 1
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 23], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 3
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 23], 5
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 23], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 23], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 23], 8
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 23], 10
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 23], 11
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 23], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 23], 13
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 23], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 23], 15
	movzx	edi, byte ptr [rdx + r11 + 23]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 23], 1
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 2
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 3
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 23], 4
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 5
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 23], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 8
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 9
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 23], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 11
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 23], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 23], 13
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm11, ymm3, xmm2, 1
	movzx	edi, byte ptr [rdx + rbx + 24]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 24], 1
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 24], 2
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 24], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 4
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 24], 6
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 24], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 24], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 24], 9
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 24], 10
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 24], 11
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 12
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 24], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 15
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 24]
	vmovd	xmm1, edi
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 24], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 2
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 24], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 24], 4
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 5
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 6
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 24], 7
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 8
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 24], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 12
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 13
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 24], 14
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 15
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rsi + 25]
	vmovd	xmm2, edi
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 25], 1
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 25], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 25], 3
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 5
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 25], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 8
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 25], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 25], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 11
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 25], 12
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 14
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 25], 15
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 25]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 25], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 25], 3
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 25], 4
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 25], 5
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 25], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 8
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 25], 10
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 25], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 25], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 25], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rdi + 25], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 26]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 26], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 2
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 3
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 26], 4
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 6
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 26], 9
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 26], 10
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 26], 12
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 26], 13
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 26], 15
	movzx	edi, byte ptr [rdx + rcx + 26]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 2
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 26], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 26], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 5
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 26], 6
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 8
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 9
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 26], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 26], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 26], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 13
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 14
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 27]
	vmovd	xmm2, edi
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 27], 1
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 27], 2
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 27], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 27], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 27], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 27], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 27], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 8
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 27], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 27], 10
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 11
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 27], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 14
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 27], 15
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rsi + 27]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 1
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 27], 3
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 4
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 27], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 27], 7
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 8
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 27], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 11
	mov	r9, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 27], 12
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 27], 13
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 27], 14
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 28]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 28], 1
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 28], 2
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 3
	mov	r14, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 28], 4
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 7
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 28], 9
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 10
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 11
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 28], 12
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 28], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 14
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 28], 15
	movzx	edi, byte ptr [rdx + rsi + 28]
	vmovd	xmm1, edi
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 1
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 2
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 3
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 4
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 5
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 28], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 9
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 28], 12
	mov	rcx, r11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 28], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 28], 14
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 28], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 29]
	vmovd	xmm2, edi
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 29], 2
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 29], 4
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 29], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 29], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 9
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 10
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 29], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 29], 13
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 29], 14
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 29], 15
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 29]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 1
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 3
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 4
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 29], 6
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 7
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 8
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 9
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 29], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 29], 13
	vpinsrb	xmm4, xmm3, byte ptr [rdx + r15 + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm4, byte ptr [rdx + r11 + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rdx + rax + 30]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 30], 1
	movzx	edi, byte ptr [rdx + rax + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 31], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 2
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 4
	mov	rax, r10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 31], 5
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 6
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 7
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 11
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 31], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rdx + r8 + 31], 15
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	eax, byte ptr [rdx + rdi + 30]
	vmovd	xmm1, eax
	mov	r10, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 30], 1
	movzx	eax, byte ptr [rdx + rdi + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r10 + 31], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r13 + 31], 2
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r12 + 31], 5
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 31], 7
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 11
	mov	rax, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 31], 12
	mov	rax, rcx
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 31], 13
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm2, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpeqb	ymm0, ymm13, ymm2
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI5_0] # ymm5 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	vpandn	ymm7, ymm7, ymm5
	vpaddb	ymm0, ymm7, ymm0
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI5_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpandn	ymm7, ymm7, ymm6
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI5_2] # ymm3 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpandn	ymm12, ymm12, ymm3
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm14, ymm2
	vmovdqa	ymm8, ymmword ptr [rip + .LCPI5_3] # ymm8 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpandn	ymm12, ymm12, ymm8
	vpor	ymm7, ymm12, ymm7
	vpcmpeqd	ymm1, ymm1, ymm1
	vpsubb	ymm0, ymm0, ymm1
	vpcmpeqd	ymm4, ymm4, ymm4
	vpor	ymm0, ymm0, ymm7
	vpcmpeqb	ymm7, ymm15, ymm2
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_4] # ymm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpandn	ymm7, ymm7, ymm1
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI5_5] # ymm13 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpandn	ymm12, ymm12, ymm13
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI5_6] # ymm9 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpandn	ymm12, ymm12, ymm9
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm5
	vpaddb	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm6
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm3
	vpor	ymm12, ymm12, ymm15
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm12, ymm12, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm1
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm13
	vpor	ymm12, ymm12, ymm15
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm9
	vpor	ymm12, ymm12, ymm15
	vpor	ymm12, ymm12, ymm7
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm5
	vpaddb	ymm7, ymm15, ymm7
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm6
	vpcmpeqb	ymm14, ymm2, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm3
	vpor	ymm14, ymm15, ymm14
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm14, ymm14, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm14, ymm7
	vpcmpeqb	ymm14, ymm2, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm1
	vpcmpeqb	ymm10, ymm10, ymm2
	vpandn	ymm10, ymm10, ymm13
	vpor	ymm10, ymm14, ymm10
	vpcmpeqb	ymm11, ymm11, ymm2
	vmovdqa	ymm14, ymm9
	vpandn	ymm11, ymm11, ymm9
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpeqb	ymm9, ymm2, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpcmpeqb	ymm8, ymm2, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpandn	ymm8, ymm8, ymm5
	vpaddb	ymm8, ymm8, ymm9
	vpcmpeqb	ymm5, ymm2, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpandn	ymm5, ymm5, ymm6
	vpcmpeqb	ymm6, ymm2, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpandn	ymm6, ymm6, ymm3
	vpor	ymm5, ymm5, ymm6
	vpcmpeqb	ymm3, ymm2, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpandn	ymm3, ymm3, ymmword ptr [rip + .LCPI5_3]
	vpor	ymm3, ymm5, ymm3
	vpsubb	ymm5, ymm8, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpeqb	ymm4, ymm2, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpandn	ymm4, ymm4, ymm1
	vpcmpeqb	ymm1, ymm2, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpandn	ymm1, ymm1, ymm13
	vpor	ymm1, ymm4, ymm1
	vpcmpeqb	ymm2, ymm2, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpandn	ymm2, ymm2, ymm14
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm0, ymm12       # ymm2 = ymm0[0],ymm12[0],ymm0[1],ymm12[1],ymm0[2],ymm12[2],ymm0[3],ymm12[3],ymm0[4],ymm12[4],ymm0[5],ymm12[5],ymm0[6],ymm12[6],ymm0[7],ymm12[7],ymm0[16],ymm12[16],ymm0[17],ymm12[17],ymm0[18],ymm12[18],ymm0[19],ymm12[19],ymm0[20],ymm12[20],ymm0[21],ymm12[21],ymm0[22],ymm12[22],ymm0[23],ymm12[23]
	vpunpckhbw	ymm0, ymm0, ymm12       # ymm0 = ymm0[8],ymm12[8],ymm0[9],ymm12[9],ymm0[10],ymm12[10],ymm0[11],ymm12[11],ymm0[12],ymm12[12],ymm0[13],ymm12[13],ymm0[14],ymm12[14],ymm0[15],ymm12[15],ymm0[24],ymm12[24],ymm0[25],ymm12[25],ymm0[26],ymm12[26],ymm0[27],ymm12[27],ymm0[28],ymm12[28],ymm0[29],ymm12[29],ymm0[30],ymm12[30],ymm0[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 408]      # 8-byte Reload
	vmovdqu	ymmword ptr [r15 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r15 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r15 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r15 + 4*rcx], ymm1
	add	rcx, 32
	mov	rsi, rcx
	cmp	rcx, qword ptr [rsp + 376]      # 8-byte Folded Reload
	jne	.LBB5_166
# %bb.167:
	mov	r14, qword ptr [rsp + 384]      # 8-byte Reload
	cmp	r14, qword ptr [rsp + 376]      # 8-byte Folded Reload
	mov	r11d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r13, qword ptr [rsp + 400]      # 8-byte Reload
	mov	rdx, qword ptr [rsp + 392]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	jne	.LBB5_43
	jmp	.LBB5_129
.LBB5_168:
	and	r14, -32
	mov	rax, r14
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 392], rax      # 8-byte Spill
	mov	qword ptr [rsp + 376], r14      # 8-byte Spill
	lea	rax, [r15 + 4*r14]
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	vmovd	xmm0, r11d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	xor	ebx, ebx
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_169:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 408], rbx      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 224], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 136], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rdx + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rdx + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rdx + rcx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rdx + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rdx + rcx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rcx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rdx + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rdx + rcx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	mov	qword ptr [rsp + 256], rbx      # 8-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rdx + rcx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rdx + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rdx + rcx + 6]
	mov	qword ptr [rsp + 240], rcx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rdx + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rdx + rcx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rdx + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	r14, rbx
	or	r14, 544
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	mov	rcx, rbx
	or	rcx, 576
	mov	qword ptr [rsp + 176], rcx      # 8-byte Spill
	mov	rax, rbx
	or	rax, 608
	mov	r13, rax
	mov	qword ptr [rsp + 200], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 640
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	r10, rbx
	or	r10, 672
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	r9, rbx
	or	r9, 704
	mov	qword ptr [rsp + 232], r9       # 8-byte Spill
	mov	r11, rbx
	or	r11, 736
	mov	qword ptr [rsp + 96], r11       # 8-byte Spill
	mov	r12, rbx
	or	r12, 768
	mov	qword ptr [rsp + 112], r12      # 8-byte Spill
	mov	r8, rbx
	or	r8, 800
	mov	qword ptr [rsp + 56], r8        # 8-byte Spill
	mov	r15, rbx
	or	r15, 832
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	mov	rax, rbx
	or	rax, 864
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 896
	mov	rdi, rax
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 928
	mov	rsi, rax
	mov	qword ptr [rsp + 168], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 960
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	or	rbx, 992
	vpinsrb	xmm9, xmm0, byte ptr [rdx + r14], 1
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rcx], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 15
	mov	r12, rbx
	mov	qword ptr [rsp + 152], rbx      # 8-byte Spill
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 2
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 3
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8], 4
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi], 7
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15], 8
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 14
	mov	r14, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14], 15
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 1], 1
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 1], 2
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 4
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 5
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 6
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 7
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 9
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 1], 11
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 1], 12
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 1], 13
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r11 + 1], 1
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 2
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 1], 5
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 9
	mov	r13, rdi
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 14
	vinserti128	ymm13, ymm3, xmm0, 1
	vpinsrb	xmm0, xmm5, byte ptr [rdx + r14 + 1], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 8]
	vmovd	xmm10, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 2], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 5
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 2], 6
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 2], 7
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 2], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 9
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 2], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 2], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 15
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 2], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 2], 3
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 2], 4
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 2], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 8
	mov	rcx, r13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 9
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 10
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 14
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rdx + r15 + 3], 1
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 2
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 3
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 4
	mov	rbx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 3], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 3], 8
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 9
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 11
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 12
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 3], 13
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 14
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rdx + r10 + 3], 1
	mov	rbx, r10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 2
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 3], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 3], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 3], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 3], 14
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 9]
	vmovd	xmm8, edi
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 4], 1
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 4], 2
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 4], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 4], 4
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 4], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 6
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 4], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 4], 9
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 10
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 4], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 4], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 14
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 4], 15
	vpinsrb	xmm3, xmm15, byte ptr [rdx + rbx + 4], 1
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 2
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 4], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 4
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 6
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 15
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm14, byte ptr [rdx + rax + 5], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 5], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 5], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 6
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 5], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 9
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 5], 11
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 5], 12
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 5], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 5], 15
	vpinsrb	xmm5, xmm6, byte ptr [rdx + rbx + 5], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 5], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 4
	mov	r9, r14
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 5], 7
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 8
	mov	r12, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 5], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 5], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 5], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm15, ymm0, xmm4, 1
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 10]
	vmovd	xmm4, edi
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rdx + rax + 6], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 2
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 6], 3
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 6], 4
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 6], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 8
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 9
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 6], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 13
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 14
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 6], 15
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + r11 + 6], 1
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 2
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 4
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 6], 6
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 6], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 9
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 10
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 6], 11
	mov	r9, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 14
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 15
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 1
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 7], 5
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 6
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 7
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 12
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 7], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 7], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 7], 1
	mov	r13, r11
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 2
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 7], 3
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 4
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 6
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 7
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 7], 8
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 9
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 7], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 7], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rdi + 7], 14
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 11]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 11]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rdi + 8], 1
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 8], 2
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 8], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 4
	mov	r9, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 8], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 8], 6
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 8], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 9
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 8], 11
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 8], 13
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 14
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 15
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r13 + 8], 1
	mov	r14, rsi
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 3
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 8], 4
	mov	rdi, r12
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 8], 5
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 6
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 8], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 8], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 9
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 8], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 14
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 15
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rdx + rbx + 9], 1
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r15 + 9], 3
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 6
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r15 + 9], 7
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 9
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 10
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 9], 11
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 12
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 13
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 14
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 15
	vpinsrb	xmm7, xmm11, byte ptr [rdx + r13 + 9], 1
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 9], 2
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rdi + 9], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 9], 6
	mov	r14, rsi
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r12 + 9], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 9
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 9], 10
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 9], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + rax + 9], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 12]
	vmovd	xmm5, edi
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 10], 1
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 10], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 3
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 10], 5
	mov	r9, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 10], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 10], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 9
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 1
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 10], 4
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 10], 6
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 7
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 10], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 10], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 12
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 10], 13
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 10], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 11], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 11], 4
	mov	r12, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 11], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 6
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 11], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 13
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 11], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 11], 15
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 11], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 2
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 11], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 11], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 11], 8
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm3  # 32-byte Spill
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 11], 14
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 13]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 13]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 1
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 12], 2
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 12], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 12], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 6
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 9
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 12], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 12], 15
	vpinsrb	xmm2, xmm5, byte ptr [rdx + r9 + 12], 1
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 2
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 3
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 12], 4
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 12], 5
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 12], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 12], 7
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 12], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 12], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 14
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 13], 5
	mov	r10, r12
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 6
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 7
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 9
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 11
	mov	r15, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 13], 12
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 13
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 14
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 13], 15
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 3
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 13], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 13], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 13], 8
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rax + 13], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 14]
	vmovd	xmm0, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 1
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 2
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 14], 5
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 14], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 14], 7
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 14], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 9
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 14], 10
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 14], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 12
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 13
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 14], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 14], 15
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 1
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 2
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 4
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 6
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 9
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 10
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 11
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 14], 12
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 15
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	movzx	edi, byte ptr [rdx + r8 + 15]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 15], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 4
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 15], 6
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 15], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 15], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 15], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 15], 14
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 15], 15
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rbx + 15]
	vmovd	xmm3, edi
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 1
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 2
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 3
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 4
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 5
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 6
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 8
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 9
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 14
	mov	r15, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rdx + r8 + 16]
	vmovd	xmm0, edi
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 1
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 2
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 4
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 16], 6
	mov	r12, r13
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 7
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 8
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 9
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 13
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 16], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 16], 15
	movzx	edi, byte ptr [rdx + rbx + 16]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 16], 1
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 16], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 16], 3
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 4
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 16], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 9
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 16], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 16], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 16], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 16], 13
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 16], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 16], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 17]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 1
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 17], 2
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 4
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 17], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 17], 6
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 17], 7
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 9
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 17], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 11
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 12
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 17], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 17], 14
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 17]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 17], 2
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 4
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 5
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 17], 6
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 17], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 17], 10
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 17], 11
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rax + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 18]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 2
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 3
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 18], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 18], 5
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 18], 7
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 8
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 18], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 18], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 11
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 18], 13
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 14
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 15
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 18]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 1
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 18], 2
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 18], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 4
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 18], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 8
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 9
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 18], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 12
	mov	r9, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 18], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 14
	mov	r8, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 19]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 2
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 19], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 19], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 6
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 19], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 19], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 19], 11
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 19], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 15
	movzx	edi, byte ptr [rdx + r11 + 19]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 19], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 19], 3
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 4
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 19], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 9
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 13
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 20]
	vmovd	xmm0, edi
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 1
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 20], 2
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 20], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 4
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 20], 5
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 20], 6
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 7
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 8
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 9
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 20], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 20], 12
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 20], 13
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 20]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 1
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 2
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 20], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 4
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 6
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 8
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 20], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 14
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 15
	movzx	edi, byte ptr [rdx + rax + 21]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 21], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 21], 3
	mov	r13, r12
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 21], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 21], 6
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 21], 7
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 21], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 9
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 21], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 21], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 15
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 21]
	vmovd	xmm3, edi
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 21], 1
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 21], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 3
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 4
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 5
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 6
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 8
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 9
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r9 + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 22]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 1
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 22], 3
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 22], 4
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 22], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 22], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 22], 10
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 11
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 12
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 22], 14
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 22], 15
	movzx	edi, byte ptr [rdx + r11 + 22]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 22], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 22], 2
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 22], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 5
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 22], 6
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 22], 7
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 22], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 10
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 22], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 23]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 2
	mov	r14, r13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 23], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 23], 4
	mov	r13, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 23], 5
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 23], 6
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 23], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 9
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 11
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 12
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 23], 13
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 23], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 23], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 23]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 1
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 2
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 4
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 23], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 23], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 23], 8
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 23], 9
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 23], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm11, ymm3, xmm2, 1
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 24]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 1
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 24], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 24], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 24], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 24], 7
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 9
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 10
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 24], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 24], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 24], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 15
	mov	r14, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r14 + 24]
	vmovd	xmm1, edi
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 24], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 2
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 3
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 24], 4
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 8
	mov	r10, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 24], 9
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 24], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 11
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 24], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 25]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 25], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 4
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 6
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 7
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 9
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 25], 11
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 12
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 13
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 14
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 25], 15
	movzx	edi, byte ptr [rdx + r14 + 25]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 25], 1
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 25], 2
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 25], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 25], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 6
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 25], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 25], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 25], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 12
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 25], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rcx + 25], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 26]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 1
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 26], 2
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 4
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 6
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 7
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 9
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 26], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 13
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 26], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 26], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 26]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 1
	mov	rax, r9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 26], 2
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 4
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 6
	mov	r9, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 26], 7
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 26], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 26], 9
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 26], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 15
	movzx	edi, byte ptr [rdx + r11 + 27]
	vmovd	xmm2, edi
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 27], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 27], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 3
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 27], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 5
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 6
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 7
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 27], 10
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 27], 11
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 12
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 27], 14
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 27]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 2
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 3
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 27], 4
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 27], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 27], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 27], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r10 + 28]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 28], 1
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 28], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 4
	mov	r12, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 28], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 28], 6
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 7
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 28], 8
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 9
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 28], 11
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 28], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 13
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 28], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 28]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 2
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 28], 4
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 5
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 28], 6
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 8
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 9
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 10
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 28], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 15
	movzx	edi, byte ptr [rdx + r10 + 29]
	vmovd	xmm2, edi
	mov	r10, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 29], 2
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 29], 5
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 29], 6
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 29], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 29], 9
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 29], 10
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 29], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 29], 12
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 29], 14
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 15
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	movzx	edi, byte ptr [rdx + r8 + 29]
	vmovd	xmm3, edi
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 29], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 3
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 4
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 29], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 29], 11
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 29], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 13
	vpinsrb	xmm4, xmm3, byte ptr [rdx + rcx + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm4, byte ptr [rdx + rax + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 30]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 30], 1
	movzx	edi, byte ptr [rdx + rcx + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 31], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 4
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 31], 6
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 7
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 31], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 31], 11
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rdx + rax + 31], 15
	mov	rcx, r8
	movzx	eax, byte ptr [rdx + r8 + 30]
	vmovd	xmm1, eax
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 30], 1
	movzx	eax, byte ptr [rdx + r8 + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 31], 1
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r10 + 31], 2
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 31], 4
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 31], 6
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r13 + 31], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm2, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpeqb	ymm0, ymm13, ymm2
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI5_0] # ymm5 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	vpandn	ymm7, ymm7, ymm5
	vpaddb	ymm0, ymm7, ymm0
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI5_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpandn	ymm7, ymm7, ymm6
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI5_2] # ymm3 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpandn	ymm12, ymm12, ymm3
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm14, ymm2
	vmovdqa	ymm8, ymmword ptr [rip + .LCPI5_3] # ymm8 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpandn	ymm12, ymm12, ymm8
	vpor	ymm7, ymm12, ymm7
	vpcmpeqd	ymm1, ymm1, ymm1
	vpsubb	ymm0, ymm0, ymm1
	vpcmpeqd	ymm4, ymm4, ymm4
	vpor	ymm0, ymm0, ymm7
	vpcmpeqb	ymm7, ymm15, ymm2
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI5_4] # ymm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpandn	ymm7, ymm7, ymm1
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI5_5] # ymm13 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpandn	ymm12, ymm12, ymm13
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI5_6] # ymm9 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpandn	ymm12, ymm12, ymm9
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm5
	vpaddb	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm6
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm3
	vpor	ymm12, ymm12, ymm15
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm12, ymm12, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqb	ymm12, ymm2, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm1
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm13
	vpor	ymm12, ymm12, ymm15
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm9
	vpor	ymm12, ymm12, ymm15
	vpor	ymm12, ymm12, ymm7
	vpcmpeqb	ymm7, ymm2, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm5
	vpaddb	ymm7, ymm15, ymm7
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm6
	vpcmpeqb	ymm14, ymm2, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm3
	vpor	ymm14, ymm15, ymm14
	vpcmpeqb	ymm15, ymm2, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm14, ymm14, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm14, ymm7
	vpcmpeqb	ymm14, ymm2, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm1
	vpcmpeqb	ymm10, ymm10, ymm2
	vpandn	ymm10, ymm10, ymm13
	vpor	ymm10, ymm14, ymm10
	vpcmpeqb	ymm11, ymm11, ymm2
	vmovdqa	ymm14, ymm9
	vpandn	ymm11, ymm11, ymm9
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpeqb	ymm9, ymm2, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpcmpeqb	ymm8, ymm2, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpandn	ymm8, ymm8, ymm5
	vpaddb	ymm8, ymm8, ymm9
	vpcmpeqb	ymm5, ymm2, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpandn	ymm5, ymm5, ymm6
	vpcmpeqb	ymm6, ymm2, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpandn	ymm6, ymm6, ymm3
	vpor	ymm5, ymm5, ymm6
	vpcmpeqb	ymm3, ymm2, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpandn	ymm3, ymm3, ymmword ptr [rip + .LCPI5_3]
	vpor	ymm3, ymm5, ymm3
	vpsubb	ymm5, ymm8, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpeqb	ymm4, ymm2, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpandn	ymm4, ymm4, ymm1
	vpcmpeqb	ymm1, ymm2, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpandn	ymm1, ymm1, ymm13
	vpor	ymm1, ymm4, ymm1
	vpcmpeqb	ymm2, ymm2, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpandn	ymm2, ymm2, ymm14
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm0, ymm12       # ymm2 = ymm0[0],ymm12[0],ymm0[1],ymm12[1],ymm0[2],ymm12[2],ymm0[3],ymm12[3],ymm0[4],ymm12[4],ymm0[5],ymm12[5],ymm0[6],ymm12[6],ymm0[7],ymm12[7],ymm0[16],ymm12[16],ymm0[17],ymm12[17],ymm0[18],ymm12[18],ymm0[19],ymm12[19],ymm0[20],ymm12[20],ymm0[21],ymm12[21],ymm0[22],ymm12[22],ymm0[23],ymm12[23]
	vpunpckhbw	ymm0, ymm0, ymm12       # ymm0 = ymm0[8],ymm12[8],ymm0[9],ymm12[9],ymm0[10],ymm12[10],ymm0[11],ymm12[11],ymm0[12],ymm12[12],ymm0[13],ymm12[13],ymm0[14],ymm12[14],ymm0[15],ymm12[15],ymm0[24],ymm12[24],ymm0[25],ymm12[25],ymm0[26],ymm12[26],ymm0[27],ymm12[27],ymm0[28],ymm12[28],ymm0[29],ymm12[29],ymm0[30],ymm12[30],ymm0[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 408]      # 8-byte Reload
	vmovdqu	ymmword ptr [r15 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r15 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r15 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r15 + 4*rcx], ymm1
	add	rcx, 32
	mov	rbx, rcx
	cmp	rcx, qword ptr [rsp + 376]      # 8-byte Folded Reload
	jne	.LBB5_169
# %bb.170:
	mov	r14, qword ptr [rsp + 384]      # 8-byte Reload
	cmp	r14, qword ptr [rsp + 376]      # 8-byte Folded Reload
	mov	r11d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r13, qword ptr [rsp + 400]      # 8-byte Reload
	mov	rdx, qword ptr [rsp + 392]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	jne	.LBB5_114
	jmp	.LBB5_133
.Lfunc_end5:
	.size	comparison_not_equal_scalar_arr_avx2, .Lfunc_end5-comparison_not_equal_scalar_arr_avx2
                                        # -- End function
	.globl	comparison_greater_arr_arr_avx2 # -- Begin function comparison_greater_arr_arr_avx2
	.p2align	4, 0x90
	.type	comparison_greater_arr_arr_avx2,@function
comparison_greater_arr_arr_avx2:        # @comparison_greater_arr_arr_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -8
	sub	rsp, 72
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB6_29
# %bb.1:
	cmp	edi, 3
	jle	.LBB6_2
# %bb.15:
	cmp	edi, 4
	je	.LBB6_68
# %bb.16:
	cmp	edi, 5
	je	.LBB6_79
# %bb.17:
	cmp	edi, 6
	jne	.LBB6_123
# %bb.18:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_22
# %bb.19:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_20:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rdx]
	add	rdx, 4
	cmp	ecx, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	sbb	r10d, r10d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_20
# %bb.21:
	add	r14, 1
.LBB6_22:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_26
# %bb.23:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_24:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	mov	eax, dword ptr [rsi + 8]
	seta	r13b
	cmp	eax, dword ptr [rdx + 8]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	mov	eax, dword ptr [rsi + 16]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 16]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	mov	eax, dword ptr [rsi + 24]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 24]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	mov	eax, dword ptr [rsi + 32]
	seta	r15b
	cmp	eax, dword ptr [rdx + 32]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	mov	eax, dword ptr [rsi + 40]
	seta	r8b
	cmp	eax, dword ptr [rdx + 40]
	seta	bl
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	mov	eax, dword ptr [rsi + 48]
	seta	r9b
	cmp	eax, dword ptr [rdx + 48]
	seta	r12b
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	mov	eax, dword ptr [rsi + 56]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 56]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	mov	r11d, dword ptr [rsi + 64]
	seta	r10b
	mov	ecx, dword ptr [rsi + 68]
	mov	eax, dword ptr [rsi + 72]
	cmp	r11d, dword ptr [rdx + 64]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	seta	r14b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 76]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 76]
	mov	eax, dword ptr [rsi + 80]
	mov	ecx, dword ptr [rsi + 84]
	seta	r11b
	cmp	eax, dword ptr [rdx + 80]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 92]
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	seta	dil
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 104]
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 116]
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	seta	al
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 40]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r13b
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 21]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, cl
	shl	bl, 2
	or	bl, r8b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, bl
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r12b, 4
	or	r12b, r9b
	movzx	ebx, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	bl, 5
	or	bl, r12b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	r10b, 7
	or	r10b, r8b
	or	r15b, cl
	or	r10b, bl
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	shl	r11b, 3
	or	r11b, cl
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r11b
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	mov	byte ptr [r14], r15b
	movzx	r8d, byte ptr [rsp + 13]        # 1-byte Folded Reload
	shl	r8b, 6
	shl	dil, 7
	or	dil, r8b
	mov	byte ptr [r14 + 1], r10b
	or	dil, cl
	movzx	ecx, byte ptr [rsp + 14]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 19]         # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, cl
	movzx	ecx, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r14 + 2], dil
	mov	byte ptr [r14 + 3], al
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_24
# %bb.25:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_26:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.27:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_28:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rdx + 4*rcx]
	cmp	edi, dword ptr [rsi + 4*rcx]
	sbb	edi, edi
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_28
	jmp	.LBB6_123
.LBB6_29:
	cmp	edi, 8
	jle	.LBB6_30
# %bb.43:
	cmp	edi, 9
	je	.LBB6_101
# %bb.44:
	cmp	edi, 11
	je	.LBB6_112
# %bb.45:
	cmp	edi, 12
	jne	.LBB6_123
# %bb.46:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_50
# %bb.47:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_48:                               # =>This Inner Loop Header: Depth=1
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	add	rsi, 8
	vucomisd	xmm0, qword ptr [rdx]
	seta	r10b
	add	rdx, 8
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_48
# %bb.49:
	add	r14, 1
.LBB6_50:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_54
# %bb.51:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_52:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 8]       # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 8]
	seta	cl
	vmovsd	xmm0, qword ptr [rsi + 16]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 16]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 24]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 24]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 32]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 32]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 40]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 40]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 48]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 48]
	seta	al
	vmovsd	xmm0, qword ptr [rsi + 56]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 56]
	seta	r15b
	vmovsd	xmm0, qword ptr [rsi + 64]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 64]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 72]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 72]
	seta	dil
	vmovsd	xmm0, qword ptr [rsi + 80]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 80]
	seta	r10b
	vmovsd	xmm0, qword ptr [rsi + 88]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 88]
	seta	r11b
	vmovsd	xmm0, qword ptr [rsi + 96]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 96]
	seta	r14b
	vmovsd	xmm0, qword ptr [rsi + 104]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 104]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 112]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 112]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 120]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 120]
	seta	bl
	vmovsd	xmm0, qword ptr [rsi + 128]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 128]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 136]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 136]
	seta	r12b
	vmovsd	xmm0, qword ptr [rsi + 144]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 144]
	seta	r13b
	vmovsd	xmm0, qword ptr [rsi + 152]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 152]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 160]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 160]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 168]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 168]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 176]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 176]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 184]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 184]
	seta	r9b
	vmovsd	xmm0, qword ptr [rsi + 192]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 192]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 200]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 200]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 208]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 208]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 216]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 216]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 224]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 224]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 232]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 232]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 240]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 240]
	vmovsd	xmm0, qword ptr [rsi + 248]     # xmm0 = mem[0],zero
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	vucomisd	xmm0, qword ptr [rdx + 248]
	seta	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	dil, dil
	add	dil, byte ptr [rsp + 8]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB6_52
# %bb.53:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB6_54:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.55:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_56:                               # =>This Inner Loop Header: Depth=1
	vmovsd	xmm0, qword ptr [rsi + 8*rcx]   # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	seta	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_56
	jmp	.LBB6_123
.LBB6_2:
	cmp	edi, 2
	je	.LBB6_57
# %bb.3:
	cmp	edi, 3
	jne	.LBB6_123
# %bb.4:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setg	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_6
# %bb.7:
	add	r14, 1
.LBB6_8:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_12
# %bb.9:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_10:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setg	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setg	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setg	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setg	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setg	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setg	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setg	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setg	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setg	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setg	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setg	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setg	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setg	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setg	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setg	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setg	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setg	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setg	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setg	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setg	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setg	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setg	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setg	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setg	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setg	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setg	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setg	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setg	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_10
# %bb.11:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_12:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.13:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_14:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	setg	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_14
	jmp	.LBB6_123
.LBB6_30:
	cmp	edi, 7
	je	.LBB6_90
# %bb.31:
	cmp	edi, 8
	jne	.LBB6_123
# %bb.32:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_36
# %bb.33:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_34:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rdx]
	add	rdx, 8
	cmp	rcx, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	sbb	r10d, r10d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_34
# %bb.35:
	add	r14, 1
.LBB6_36:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_40
# %bb.37:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_38:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	mov	rax, qword ptr [rsi + 16]
	seta	r13b
	cmp	rax, qword ptr [rdx + 16]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	mov	rax, qword ptr [rsi + 32]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 32]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	mov	rax, qword ptr [rsi + 48]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 48]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	mov	rax, qword ptr [rsi + 64]
	seta	r15b
	cmp	rax, qword ptr [rdx + 64]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	mov	rax, qword ptr [rsi + 80]
	seta	r8b
	cmp	rax, qword ptr [rdx + 80]
	seta	bl
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	mov	rax, qword ptr [rsi + 96]
	seta	r9b
	cmp	rax, qword ptr [rdx + 96]
	seta	r12b
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	mov	rax, qword ptr [rsi + 112]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 112]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	mov	r11, qword ptr [rsi + 128]
	seta	r10b
	mov	rcx, qword ptr [rsi + 136]
	mov	rax, qword ptr [rsi + 144]
	cmp	r11, qword ptr [rdx + 128]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	seta	r14b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 152]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 152]
	mov	rax, qword ptr [rsi + 160]
	mov	rcx, qword ptr [rsi + 168]
	seta	r11b
	cmp	rax, qword ptr [rdx + 160]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 184]
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	seta	dil
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 208]
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 232]
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	seta	al
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 40]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r13b
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 21]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, cl
	shl	bl, 2
	or	bl, r8b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, bl
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r12b, 4
	or	r12b, r9b
	movzx	ebx, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	bl, 5
	or	bl, r12b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	r10b, 7
	or	r10b, r8b
	or	r15b, cl
	or	r10b, bl
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	shl	r11b, 3
	or	r11b, cl
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r11b
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	mov	byte ptr [r14], r15b
	movzx	r8d, byte ptr [rsp + 13]        # 1-byte Folded Reload
	shl	r8b, 6
	shl	dil, 7
	or	dil, r8b
	mov	byte ptr [r14 + 1], r10b
	or	dil, cl
	movzx	ecx, byte ptr [rsp + 14]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 19]         # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, cl
	movzx	ecx, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r14 + 2], dil
	mov	byte ptr [r14 + 3], al
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_38
# %bb.39:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_40:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.41:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_42:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rdx + 8*rcx]
	cmp	rdi, qword ptr [rsi + 8*rcx]
	sbb	edi, edi
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_42
	jmp	.LBB6_123
.LBB6_68:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_72
# %bb.69:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_70:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rdx]
	add	rdx, 2
	cmp	cx, word ptr [rsi]
	lea	rsi, [rsi + 2]
	sbb	r10d, r10d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_70
# %bb.71:
	add	r14, 1
.LBB6_72:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_76
# %bb.73:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_74:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	movzx	eax, word ptr [rsi + 4]
	seta	r13b
	cmp	ax, word ptr [rdx + 4]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	movzx	eax, word ptr [rsi + 8]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 8]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	movzx	eax, word ptr [rsi + 12]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 12]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	movzx	eax, word ptr [rsi + 16]
	seta	r15b
	cmp	ax, word ptr [rdx + 16]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	movzx	eax, word ptr [rsi + 20]
	seta	r8b
	cmp	ax, word ptr [rdx + 20]
	seta	bl
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	movzx	eax, word ptr [rsi + 24]
	seta	r9b
	cmp	ax, word ptr [rdx + 24]
	seta	r12b
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	movzx	eax, word ptr [rsi + 28]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 28]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	movzx	r11d, word ptr [rsi + 32]
	seta	r10b
	movzx	ecx, word ptr [rsi + 34]
	movzx	eax, word ptr [rsi + 36]
	cmp	r11w, word ptr [rdx + 32]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	seta	r14b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 38]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 38]
	movzx	eax, word ptr [rsi + 40]
	movzx	ecx, word ptr [rsi + 42]
	seta	r11b
	cmp	ax, word ptr [rdx + 40]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 46]
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	seta	dil
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 52]
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 58]
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	seta	al
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 40]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r13b
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 21]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, cl
	shl	bl, 2
	or	bl, r8b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, bl
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r12b, 4
	or	r12b, r9b
	movzx	ebx, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	bl, 5
	or	bl, r12b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	r10b, 7
	or	r10b, r8b
	or	r15b, cl
	or	r10b, bl
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	shl	r11b, 3
	or	r11b, cl
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r11b
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	mov	byte ptr [r14], r15b
	movzx	r8d, byte ptr [rsp + 13]        # 1-byte Folded Reload
	shl	r8b, 6
	shl	dil, 7
	or	dil, r8b
	mov	byte ptr [r14 + 1], r10b
	or	dil, cl
	movzx	ecx, byte ptr [rsp + 14]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 19]         # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, cl
	movzx	ecx, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r14 + 2], dil
	mov	byte ptr [r14 + 3], al
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_74
# %bb.75:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_76:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.77:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_78:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rdx + 2*rcx]
	cmp	di, word ptr [rsi + 2*rcx]
	sbb	edi, edi
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_78
	jmp	.LBB6_123
.LBB6_79:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_81:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setg	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_81
# %bb.82:
	add	r14, 1
.LBB6_83:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_87
# %bb.84:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_85:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setg	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setg	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setg	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setg	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setg	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setg	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setg	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setg	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setg	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setg	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setg	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setg	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setg	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setg	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setg	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setg	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setg	r12b
	cmp	ax, word ptr [rdx + 40]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setg	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setg	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setg	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setg	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setg	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setg	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setg	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setg	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setg	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setg	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB6_85
# %bb.86:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB6_87:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.88:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_89:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	setg	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_89
	jmp	.LBB6_123
.LBB6_101:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_105
# %bb.102:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_103:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setg	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_103
# %bb.104:
	add	r14, 1
.LBB6_105:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_109
# %bb.106:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_107:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setg	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setg	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setg	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setg	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setg	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setg	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setg	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setg	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setg	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setg	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setg	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setg	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setg	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setg	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setg	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setg	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setg	r12b
	cmp	rax, qword ptr [rdx + 160]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setg	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setg	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setg	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setg	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setg	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setg	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setg	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setg	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setg	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setg	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB6_107
# %bb.108:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB6_109:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.110:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_111:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	setg	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_111
	jmp	.LBB6_123
.LBB6_112:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_116
# %bb.113:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_114:                              # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	add	rsi, 4
	vucomiss	xmm0, dword ptr [rdx]
	seta	r10b
	add	rdx, 4
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_114
# %bb.115:
	add	r14, 1
.LBB6_116:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_120
# %bb.117:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_118:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 4]       # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 4]
	seta	cl
	vmovss	xmm0, dword ptr [rsi + 8]       # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 8]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 12]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 12]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 16]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 16]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 20]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 20]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 24]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 24]
	seta	al
	vmovss	xmm0, dword ptr [rsi + 28]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 28]
	seta	r15b
	vmovss	xmm0, dword ptr [rsi + 32]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 32]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 36]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 36]
	seta	dil
	vmovss	xmm0, dword ptr [rsi + 40]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 40]
	seta	r10b
	vmovss	xmm0, dword ptr [rsi + 44]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 44]
	seta	r11b
	vmovss	xmm0, dword ptr [rsi + 48]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 48]
	seta	r14b
	vmovss	xmm0, dword ptr [rsi + 52]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 52]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 56]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 56]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 60]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 60]
	seta	bl
	vmovss	xmm0, dword ptr [rsi + 64]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 64]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 68]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 68]
	seta	r12b
	vmovss	xmm0, dword ptr [rsi + 72]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 72]
	seta	r13b
	vmovss	xmm0, dword ptr [rsi + 76]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 76]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 80]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 80]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 84]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 84]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 88]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 88]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 92]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 92]
	seta	r9b
	vmovss	xmm0, dword ptr [rsi + 96]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 96]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 100]     # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 100]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 104]     # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 104]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 108]     # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 108]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 112]     # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 112]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 116]     # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 116]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 120]     # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 120]
	vmovss	xmm0, dword ptr [rsi + 124]     # xmm0 = mem[0],zero,zero,zero
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	vucomiss	xmm0, dword ptr [rdx + 124]
	seta	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	dil, dil
	add	dil, byte ptr [rsp + 8]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB6_118
# %bb.119:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB6_120:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.121:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_122:                              # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rsi + 4*rcx]   # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	seta	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_122
	jmp	.LBB6_123
.LBB6_57:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_59:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	add	rdx, 1
	cmp	cl, byte ptr [rsi]
	lea	rsi, [rsi + 1]
	sbb	r10d, r10d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_59
# %bb.60:
	add	r14, 1
.LBB6_61:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_65
# %bb.62:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_63:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	seta	r13b
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	movzx	eax, byte ptr [rsi + 3]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 3]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	movzx	eax, byte ptr [rsi + 5]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 5]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	movzx	eax, byte ptr [rsi + 7]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 7]
	seta	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	movzx	eax, byte ptr [rsi + 9]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 9]
	seta	cl
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	movzx	eax, byte ptr [rsi + 11]
	seta	r9b
	cmp	al, byte ptr [rdx + 11]
	seta	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	movzx	eax, byte ptr [rsi + 13]
	seta	r10b
	cmp	al, byte ptr [rdx + 13]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	movzx	eax, byte ptr [rsi + 15]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 15]
	seta	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	movzx	eax, byte ptr [rsi + 17]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 17]
	seta	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	movzx	eax, byte ptr [rsi + 19]
	seta	r14b
	cmp	al, byte ptr [rdx + 19]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	movzx	eax, byte ptr [rsi + 21]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 21]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	movzx	eax, byte ptr [rsi + 23]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 23]
	seta	r8b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	movzx	eax, byte ptr [rsi + 25]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 25]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	movzx	eax, byte ptr [rsi + 27]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 27]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	movzx	eax, byte ptr [rsi + 29]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 29]
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	seta	dil
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 4]        # 1-byte Folded Reload
	mov	eax, r13d
	movzx	r13d, byte ptr [rsp + 40]       # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 20]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 7]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 12]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r12b
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 18]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 13]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	movzx	ecx, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_63
# %bb.64:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_65:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.66:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_67:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rdx + rcx]
	cmp	bl, byte ptr [rsi + rcx]
	sbb	edi, edi
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_67
	jmp	.LBB6_123
.LBB6_90:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_94
# %bb.91:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_92:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setg	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_92
# %bb.93:
	add	r14, 1
.LBB6_94:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_98
# %bb.95:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_96:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setg	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setg	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setg	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setg	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setg	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setg	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setg	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setg	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setg	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setg	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setg	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setg	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setg	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setg	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setg	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setg	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setg	r12b
	cmp	eax, dword ptr [rdx + 80]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setg	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setg	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setg	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setg	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setg	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setg	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setg	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setg	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setg	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setg	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB6_96
# %bb.97:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB6_98:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.99:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_100:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	setg	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_100
.LBB6_123:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.Lfunc_end6:
	.size	comparison_greater_arr_arr_avx2, .Lfunc_end6-comparison_greater_arr_arr_avx2
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function comparison_greater_arr_scalar_avx2
.LCPI7_0:
	.zero	32,1
.LCPI7_1:
	.zero	32,4
.LCPI7_2:
	.zero	32,8
.LCPI7_3:
	.zero	32,16
.LCPI7_4:
	.zero	32,32
.LCPI7_5:
	.zero	32,64
.LCPI7_6:
	.zero	32,128
	.text
	.globl	comparison_greater_arr_scalar_avx2
	.p2align	4, 0x90
	.type	comparison_greater_arr_scalar_avx2,@function
comparison_greater_arr_scalar_avx2:     # @comparison_greater_arr_scalar_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -32
	sub	rsp, 1344
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r11, rcx
	cmp	edi, 6
	jg	.LBB7_19
# %bb.1:
	cmp	edi, 3
	jle	.LBB7_2
# %bb.10:
	cmp	edi, 4
	je	.LBB7_79
# %bb.11:
	cmp	edi, 5
	je	.LBB7_95
# %bb.12:
	cmp	edi, 6
	jne	.LBB7_192
# %bb.13:
	mov	r13d, dword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_17
# %bb.14:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_15:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	sbb	edx, edx
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_15
# %bb.16:
	add	r11, 1
.LBB7_17:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_18
# %bb.112:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_113:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	seta	dil
	cmp	dword ptr [rsi + 8], r13d
	seta	r14b
	cmp	dword ptr [rsi + 12], r13d
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	seta	al
	cmp	dword ptr [rsi + 28], r13d
	seta	bl
	cmp	dword ptr [rsi + 32], r13d
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	seta	dl
	cmp	dword ptr [rsi + 40], r13d
	seta	r9b
	cmp	dword ptr [rsi + 44], r13d
	seta	r10b
	cmp	dword ptr [rsi + 48], r13d
	seta	r11b
	cmp	dword ptr [rsi + 52], r13d
	seta	r12b
	cmp	dword ptr [rsi + 56], r13d
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	seta	cl
	cmp	dword ptr [rsi + 64], r13d
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	seta	r15b
	cmp	dword ptr [rsi + 96], r13d
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	seta	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 128
	add	rdx, 4
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB7_113
# %bb.114:
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB7_116
	jmp	.LBB7_192
.LBB7_19:
	cmp	edi, 8
	jle	.LBB7_20
# %bb.28:
	cmp	edi, 9
	je	.LBB7_148
# %bb.29:
	cmp	edi, 11
	je	.LBB7_164
# %bb.30:
	cmp	edi, 12
	jne	.LBB7_192
# %bb.31:
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB7_35
# %bb.32:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_33:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	sbb	edx, edx
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_33
# %bb.34:
	add	r11, 1
.LBB7_35:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_36
# %bb.180:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_181:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	setb	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 8]
	setb	r9b
	vucomisd	xmm0, qword ptr [rsi + 16]
	setb	r14b
	vucomisd	xmm0, qword ptr [rsi + 24]
	setb	r13b
	vucomisd	xmm0, qword ptr [rsi + 32]
	setb	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 40]
	setb	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 48]
	setb	al
	vucomisd	xmm0, qword ptr [rsi + 56]
	setb	bl
	vucomisd	xmm0, qword ptr [rsi + 64]
	setb	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 72]
	setb	dl
	vucomisd	xmm0, qword ptr [rsi + 80]
	setb	dil
	vucomisd	xmm0, qword ptr [rsi + 88]
	setb	r10b
	vucomisd	xmm0, qword ptr [rsi + 96]
	setb	r11b
	vucomisd	xmm0, qword ptr [rsi + 104]
	setb	r12b
	vucomisd	xmm0, qword ptr [rsi + 112]
	setb	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 120]
	setb	cl
	vucomisd	xmm0, qword ptr [rsi + 128]
	setb	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 136]
	setb	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 144]
	setb	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 152]
	setb	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 160]
	setb	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 168]
	setb	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 176]
	setb	byte ptr [rsp + 24]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 184]
	setb	r15b
	vucomisd	xmm0, qword ptr [rsi + 192]
	setb	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 200]
	setb	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 208]
	setb	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 216]
	setb	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 224]
	setb	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 232]
	setb	byte ptr [rsp + 256]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 240]
	setb	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 248]
	setb	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 64]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 256
	add	rdx, 4
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	add	qword ptr [rsp + 120], -1       # 8-byte Folded Spill
	jne	.LBB7_181
# %bb.182:
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB7_184
	jmp	.LBB7_192
.LBB7_2:
	cmp	edi, 2
	je	.LBB7_37
# %bb.3:
	cmp	edi, 3
	jne	.LBB7_192
# %bb.4:
	mov	r14b, byte ptr [rdx]
	lea	r13, [r10 + 31]
	test	r10, r10
	mov	r15, r10
	cmovns	r13, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_6:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r14b
	lea	rsi, [rsi + 1]
	setg	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_6
# %bb.7:
	add	r11, 1
.LBB7_8:
	sar	r13, 5
	cmp	r15, 32
	jl	.LBB7_9
# %bb.61:
	cmp	r13, 32
	mov	dword ptr [rsp + 4], r14d       # 4-byte Spill
	mov	qword ptr [rsp + 248], r15      # 8-byte Spill
	mov	qword ptr [rsp + 360], r13      # 8-byte Spill
	jb	.LBB7_62
# %bb.63:
	mov	rax, r13
	shl	rax, 5
	add	rax, rsi
	cmp	r11, rax
	jae	.LBB7_65
# %bb.64:
	lea	rax, [r11 + 4*r13]
	cmp	rsi, rax
	jae	.LBB7_65
.LBB7_62:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rsi
	mov	qword ptr [rsp + 352], r11      # 8-byte Spill
.LBB7_68:
	sub	r13, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 120], r13      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_69:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	byte ptr [r12], r14b
	setg	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 1], r14b
	setg	r8b
	cmp	byte ptr [r12 + 2], r14b
	setg	r15b
	cmp	byte ptr [r12 + 3], r14b
	setg	r13b
	cmp	byte ptr [r12 + 4], r14b
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 5], r14b
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 6], r14b
	setg	al
	cmp	byte ptr [r12 + 7], r14b
	setg	r11b
	cmp	byte ptr [r12 + 8], r14b
	setg	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 9], r14b
	setg	dl
	cmp	byte ptr [r12 + 10], r14b
	setg	sil
	cmp	byte ptr [r12 + 11], r14b
	setg	dil
	cmp	byte ptr [r12 + 12], r14b
	setg	r10b
	cmp	byte ptr [r12 + 13], r14b
	setg	r12b
	cmp	byte ptr [rcx + 14], r14b
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	setg	r9b
	cmp	byte ptr [rcx + 16], r14b
	setg	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 18], r14b
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	setg	r14b
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 24], bl
	setg	byte ptr [rsp + 240]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 25], bl
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 26], bl
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 27], bl
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 28], bl
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 29], bl
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 30], bl
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 31], bl
	setg	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r15b, 2
	or	r15b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 288]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r15b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 256]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 352]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r14b, dl
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 240]        # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 4]       # 4-byte Reload
	mov	byte ptr [rsi + 3], bl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 352], rsi      # 8-byte Spill
	add	qword ptr [rsp + 120], -1       # 8-byte Folded Spill
	jne	.LBB7_69
# %bb.70:
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r13, qword ptr [rsp + 360]      # 8-byte Reload
	jmp	.LBB7_71
.LBB7_20:
	cmp	edi, 7
	je	.LBB7_122
# %bb.21:
	cmp	edi, 8
	jne	.LBB7_192
# %bb.22:
	mov	r13, qword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_26
# %bb.23:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_24:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	sbb	edx, edx
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_24
# %bb.25:
	add	r11, 1
.LBB7_26:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_27
# %bb.138:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_139:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	seta	dil
	cmp	qword ptr [rsi + 16], r13
	seta	r14b
	cmp	qword ptr [rsi + 24], r13
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	seta	al
	cmp	qword ptr [rsi + 56], r13
	seta	bl
	cmp	qword ptr [rsi + 64], r13
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	seta	dl
	cmp	qword ptr [rsi + 80], r13
	seta	r9b
	cmp	qword ptr [rsi + 88], r13
	seta	r10b
	cmp	qword ptr [rsi + 96], r13
	seta	r11b
	cmp	qword ptr [rsi + 104], r13
	seta	r12b
	cmp	qword ptr [rsi + 112], r13
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	seta	cl
	cmp	qword ptr [rsi + 128], r13
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	seta	r15b
	cmp	qword ptr [rsi + 192], r13
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	seta	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r11], bl
	movzx	ebx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r11 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], r8b
	add	rsi, 256
	add	r11, 4
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB7_139
# %bb.140:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB7_142
	jmp	.LBB7_192
.LBB7_79:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_81:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rsi]
	lea	rsi, [rsi + 2]
	sbb	edx, edx
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_81
# %bb.82:
	add	r11, 1
.LBB7_83:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_84
# %bb.85:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_86:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	seta	al
	cmp	word ptr [rsi + 2], r13w
	seta	dil
	cmp	word ptr [rsi + 4], r13w
	seta	r14b
	cmp	word ptr [rsi + 6], r13w
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 14], r13w
	seta	bl
	cmp	word ptr [rsi + 16], r13w
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	seta	dl
	cmp	word ptr [rsi + 20], r13w
	seta	r9b
	cmp	word ptr [rsi + 22], r13w
	seta	r10b
	cmp	word ptr [rsi + 24], r13w
	seta	r11b
	cmp	word ptr [rsi + 26], r13w
	seta	r12b
	cmp	word ptr [rsi + 28], r13w
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	seta	cl
	cmp	word ptr [rsi + 32], r13w
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	seta	r15b
	cmp	word ptr [rsi + 48], r13w
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	seta	r8b
	add	dil, dil
	or	dil, al
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 64
	add	rdx, 4
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB7_86
# %bb.87:
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB7_89
	jmp	.LBB7_192
.LBB7_95:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_99
# %bb.96:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_97:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	setg	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_97
# %bb.98:
	add	r11, 1
.LBB7_99:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_100
# %bb.101:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_102:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	setg	dil
	cmp	word ptr [rsi + 4], r13w
	setg	r14b
	cmp	word ptr [rsi + 6], r13w
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	setg	al
	cmp	word ptr [rsi + 14], r13w
	setg	bl
	cmp	word ptr [rsi + 16], r13w
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	setg	dl
	cmp	word ptr [rsi + 20], r13w
	setg	r9b
	cmp	word ptr [rsi + 22], r13w
	setg	r10b
	cmp	word ptr [rsi + 24], r13w
	setg	r11b
	cmp	word ptr [rsi + 26], r13w
	setg	r12b
	cmp	word ptr [rsi + 28], r13w
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	setg	cl
	cmp	word ptr [rsi + 32], r13w
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	setg	r15b
	cmp	word ptr [rsi + 48], r13w
	setg	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	setg	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	setg	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	setg	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 64
	add	rdx, 4
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB7_102
# %bb.103:
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB7_105
	jmp	.LBB7_192
.LBB7_148:
	mov	r13, qword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_152
# %bb.149:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_150:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	setg	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_150
# %bb.151:
	add	r11, 1
.LBB7_152:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_153
# %bb.154:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_155:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setg	dil
	cmp	qword ptr [rsi + 16], r13
	setg	r14b
	cmp	qword ptr [rsi + 24], r13
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setg	al
	cmp	qword ptr [rsi + 56], r13
	setg	bl
	cmp	qword ptr [rsi + 64], r13
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setg	dl
	cmp	qword ptr [rsi + 80], r13
	setg	r9b
	cmp	qword ptr [rsi + 88], r13
	setg	r10b
	cmp	qword ptr [rsi + 96], r13
	setg	r11b
	cmp	qword ptr [rsi + 104], r13
	setg	r12b
	cmp	qword ptr [rsi + 112], r13
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setg	cl
	cmp	qword ptr [rsi + 128], r13
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setg	r15b
	cmp	qword ptr [rsi + 192], r13
	setg	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setg	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setg	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setg	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 256
	add	rdx, 4
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB7_155
# %bb.156:
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB7_158
	jmp	.LBB7_192
.LBB7_164:
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovss	xmm0, dword ptr [rdx]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB7_168
# %bb.165:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_166:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	sbb	edx, edx
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_166
# %bb.167:
	add	r11, 1
.LBB7_168:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_169
# %bb.170:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_171:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	setb	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 4]
	setb	r9b
	vucomiss	xmm0, dword ptr [rsi + 8]
	setb	r14b
	vucomiss	xmm0, dword ptr [rsi + 12]
	setb	r13b
	vucomiss	xmm0, dword ptr [rsi + 16]
	setb	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 20]
	setb	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 24]
	setb	al
	vucomiss	xmm0, dword ptr [rsi + 28]
	setb	bl
	vucomiss	xmm0, dword ptr [rsi + 32]
	setb	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 36]
	setb	dl
	vucomiss	xmm0, dword ptr [rsi + 40]
	setb	dil
	vucomiss	xmm0, dword ptr [rsi + 44]
	setb	r10b
	vucomiss	xmm0, dword ptr [rsi + 48]
	setb	r11b
	vucomiss	xmm0, dword ptr [rsi + 52]
	setb	r12b
	vucomiss	xmm0, dword ptr [rsi + 56]
	setb	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 60]
	setb	cl
	vucomiss	xmm0, dword ptr [rsi + 64]
	setb	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 68]
	setb	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 72]
	setb	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 76]
	setb	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 80]
	setb	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 84]
	setb	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 88]
	setb	byte ptr [rsp + 24]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 92]
	setb	r15b
	vucomiss	xmm0, dword ptr [rsi + 96]
	setb	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 100]
	setb	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 104]
	setb	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 108]
	setb	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 112]
	setb	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 116]
	setb	byte ptr [rsp + 256]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 120]
	setb	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 124]
	setb	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 64]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 128
	add	rdx, 4
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	add	qword ptr [rsp + 120], -1       # 8-byte Folded Spill
	jne	.LBB7_171
# %bb.172:
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB7_174
	jmp	.LBB7_192
.LBB7_37:
	mov	r14b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_41
# %bb.38:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_39:                               # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rsi]
	lea	rsi, [rsi + 1]
	sbb	edx, edx
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_39
# %bb.40:
	add	r11, 1
.LBB7_41:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_42
# %bb.43:
	cmp	r15, 32
	mov	dword ptr [rsp + 4], r14d       # 4-byte Spill
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 376], r15      # 8-byte Spill
	jb	.LBB7_44
# %bb.45:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r11, rax
	jae	.LBB7_47
# %bb.46:
	lea	rax, [r11 + 4*r15]
	cmp	rsi, rax
	jae	.LBB7_47
.LBB7_44:
	xor	eax, eax
	mov	qword ptr [rsp + 360], rax      # 8-byte Spill
	mov	r12, rsi
	mov	qword ptr [rsp + 352], r11      # 8-byte Spill
.LBB7_50:
	sub	r15, qword ptr [rsp + 360]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_51:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	byte ptr [r12], r14b
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 1], r14b
	seta	r8b
	cmp	byte ptr [r12 + 2], r14b
	seta	r15b
	cmp	byte ptr [r12 + 3], r14b
	seta	r13b
	cmp	byte ptr [r12 + 4], r14b
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 5], r14b
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 6], r14b
	seta	al
	cmp	byte ptr [r12 + 7], r14b
	seta	r11b
	cmp	byte ptr [r12 + 8], r14b
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 9], r14b
	seta	dl
	cmp	byte ptr [r12 + 10], r14b
	seta	sil
	cmp	byte ptr [r12 + 11], r14b
	seta	dil
	cmp	byte ptr [r12 + 12], r14b
	seta	r10b
	cmp	byte ptr [r12 + 13], r14b
	seta	r12b
	cmp	byte ptr [rcx + 14], r14b
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	seta	r9b
	cmp	byte ptr [rcx + 16], r14b
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 18], r14b
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	seta	r14b
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 24], bl
	seta	byte ptr [rsp + 240]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 25], bl
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 26], bl
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 27], bl
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 28], bl
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 29], bl
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 30], bl
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	byte ptr [rcx + 31], bl
	seta	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r15b, 2
	or	r15b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 288]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r15b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 256]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 352]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r14b, dl
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 240]        # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 4]       # 4-byte Reload
	mov	byte ptr [rsi + 3], bl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 352], rsi      # 8-byte Spill
	add	qword ptr [rsp + 120], -1       # 8-byte Folded Spill
	jne	.LBB7_51
# %bb.52:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 376]      # 8-byte Reload
	jmp	.LBB7_53
.LBB7_122:
	mov	r13d, dword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_126
# %bb.123:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_124:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	setg	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_124
# %bb.125:
	add	r11, 1
.LBB7_126:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB7_127
# %bb.128:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_129:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setg	dil
	cmp	dword ptr [rsi + 8], r13d
	setg	r14b
	cmp	dword ptr [rsi + 12], r13d
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setg	al
	cmp	dword ptr [rsi + 28], r13d
	setg	bl
	cmp	dword ptr [rsi + 32], r13d
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setg	dl
	cmp	dword ptr [rsi + 40], r13d
	setg	r9b
	cmp	dword ptr [rsi + 44], r13d
	setg	r10b
	cmp	dword ptr [rsi + 48], r13d
	setg	r11b
	cmp	dword ptr [rsi + 52], r13d
	setg	r12b
	cmp	dword ptr [rsi + 56], r13d
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setg	cl
	cmp	dword ptr [rsi + 64], r13d
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setg	r15b
	cmp	dword ptr [rsi + 96], r13d
	setg	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setg	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setg	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setg	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r11], bl
	movzx	ebx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r11 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], r8b
	add	rsi, 128
	add	r11, 4
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB7_129
# %bb.130:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB7_132
	jmp	.LBB7_192
.LBB7_18:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
.LBB7_116:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_120
# %bb.117:
	xor	r11d, r11d
	jmp	.LBB7_118
.LBB7_36:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
.LBB7_184:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_186
# %bb.185:
	xor	r11d, r11d
	jmp	.LBB7_188
.LBB7_9:
	mov	qword ptr [rsp + 352], r11      # 8-byte Spill
	mov	r12, rsi
.LBB7_71:
	shl	r13, 5
	cmp	r13, r15
	jge	.LBB7_192
# %bb.72:
	mov	r8, r15
	sub	r8, r13
	not	r13
	add	r13, r15
	jne	.LBB7_74
# %bb.73:
	xor	esi, esi
	jmp	.LBB7_77
.LBB7_27:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
.LBB7_142:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_146
# %bb.143:
	xor	r11d, r11d
	jmp	.LBB7_144
.LBB7_84:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
.LBB7_89:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_93
# %bb.90:
	xor	r11d, r11d
	jmp	.LBB7_91
.LBB7_100:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
.LBB7_105:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_110
# %bb.106:
	xor	r11d, r11d
	jmp	.LBB7_107
.LBB7_153:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
.LBB7_158:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_162
# %bb.159:
	xor	r11d, r11d
	jmp	.LBB7_160
.LBB7_169:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
.LBB7_174:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_178
# %bb.175:
	xor	r11d, r11d
	jmp	.LBB7_176
.LBB7_42:
	mov	qword ptr [rsp + 352], r11      # 8-byte Spill
	mov	r12, rsi
.LBB7_53:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
# %bb.54:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_56
# %bb.55:
	xor	eax, eax
	jmp	.LBB7_59
.LBB7_127:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB7_192
.LBB7_132:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB7_136
# %bb.133:
	xor	r11d, r11d
	jmp	.LBB7_134
.LBB7_120:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB7_121:                              # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rsi]
	sbb	edi, edi
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r15 + rdx]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rdx], al
	add	r11, 2
	cmp	r13d, dword ptr [rsi + 4]
	lea	rsi, [rsi + 8]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rdx], bl
	cmp	r9, r11
	jne	.LBB7_121
.LBB7_118:
	test	r8b, 1
	je	.LBB7_192
# %bb.119:
	cmp	r13d, dword ptr [rsi]
	jmp	.LBB7_190
.LBB7_186:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB7_187:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	sbb	eax, eax
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	vucomisd	xmm0, qword ptr [rsi + 8]
	lea	rsi, [rsi + 16]
	sbb	eax, eax
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_187
.LBB7_188:
	test	r8b, 1
	je	.LBB7_192
# %bb.189:
	vucomisd	xmm0, qword ptr [rsi]
	jmp	.LBB7_190
.LBB7_74:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 352]      # 8-byte Reload
	.p2align	4, 0x90
.LBB7_75:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r12 + rsi], r14b
	setg	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	byte ptr [r12 + rsi + 1], r14b
	lea	rsi, [rsi + 2]
	setg	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB7_75
# %bb.76:
	add	r12, rsi
.LBB7_77:
	test	r8b, 1
	je	.LBB7_192
# %bb.78:
	cmp	byte ptr [r12], r14b
	setg	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 352]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB7_192
.LBB7_146:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB7_147:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rsi]
	sbb	edi, edi
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r15 + rdx]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rdx], al
	add	r11, 2
	cmp	r13, qword ptr [rsi + 8]
	lea	rsi, [rsi + 16]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rdx], bl
	cmp	r9, r11
	jne	.LBB7_147
.LBB7_144:
	test	r8b, 1
	je	.LBB7_192
# %bb.145:
	cmp	r13, qword ptr [rsi]
	jmp	.LBB7_190
.LBB7_93:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB7_94:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rsi]
	sbb	edi, edi
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r15 + rdx]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rdx], al
	add	r11, 2
	cmp	r13w, word ptr [rsi + 2]
	lea	rsi, [rsi + 4]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rdx], bl
	cmp	r9, r11
	jne	.LBB7_94
.LBB7_91:
	test	r8b, 1
	je	.LBB7_192
# %bb.92:
	cmp	r13w, word ptr [rsi]
	jmp	.LBB7_190
.LBB7_110:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB7_111:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setg	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	setg	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_111
.LBB7_107:
	test	r8b, 1
	je	.LBB7_192
# %bb.108:
	cmp	word ptr [rsi], r13w
	jmp	.LBB7_109
.LBB7_162:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB7_163:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setg	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	setg	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_163
.LBB7_160:
	test	r8b, 1
	je	.LBB7_192
# %bb.161:
	cmp	qword ptr [rsi], r13
	jmp	.LBB7_109
.LBB7_178:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB7_179:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	sbb	eax, eax
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	vucomiss	xmm0, dword ptr [rsi + 4]
	lea	rsi, [rsi + 8]
	sbb	eax, eax
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_179
.LBB7_176:
	test	r8b, 1
	je	.LBB7_192
# %bb.177:
	vucomiss	xmm0, dword ptr [rsi]
.LBB7_190:
	sbb	eax, eax
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	jmp	.LBB7_191
.LBB7_56:
	mov	r9, r8
	and	r9, -2
	xor	eax, eax
	mov	r10, qword ptr [rsp + 352]      # 8-byte Reload
	.p2align	4, 0x90
.LBB7_57:                               # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [r12 + rax]
	sbb	esi, esi
	mov	rdi, rax
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	ebx, byte ptr [r10 + rdi]
	xor	sil, bl
	and	dl, sil
	xor	dl, bl
	mov	byte ptr [r10 + rdi], dl
	cmp	r14b, byte ptr [r12 + rax + 1]
	lea	rax, [rax + 2]
	sbb	esi, esi
	xor	sil, dl
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, sil
	xor	bl, dl
	mov	byte ptr [r10 + rdi], bl
	cmp	r9, rax
	jne	.LBB7_57
# %bb.58:
	add	r12, rax
.LBB7_59:
	test	r8b, 1
	je	.LBB7_192
# %bb.60:
	cmp	r14b, byte ptr [r12]
	sbb	edx, edx
	mov	rsi, rax
	shr	rsi, 3
	mov	r8, qword ptr [rsp + 352]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rsi]
	and	al, 7
	mov	bl, 1
	mov	ecx, eax
	shl	bl, cl
	xor	dl, dil
	and	bl, dl
	xor	bl, dil
	mov	byte ptr [r8 + rsi], bl
	jmp	.LBB7_192
.LBB7_136:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB7_137:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setg	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	setg	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_137
.LBB7_134:
	test	r8b, 1
	je	.LBB7_192
# %bb.135:
	cmp	dword ptr [rsi], r13d
.LBB7_109:
	setg	al
	neg	al
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
.LBB7_191:
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
.LBB7_192:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB7_65:
	and	r13, -32
	mov	rax, r13
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 576], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r13      # 8-byte Spill
	lea	rax, [r11 + 4*r13]
	mov	qword ptr [rsp + 352], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_66:                               # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 368], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 200], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rsi + rax]
	mov	rdx, rcx
	vmovd	xmm0, eax
	mov	rcx, rbx
	movzx	eax, byte ptr [rsi + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rsi + rdx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rsi + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rsi + rdx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 544], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rdx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rsi + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rsi + rdx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 4]
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rsi + rdx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rsi + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rsi + rdx + 6]
	mov	qword ptr [rsp + 208], rdx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rsi + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rsi + rdx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rsi + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 256], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 544
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 576
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 608
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	r15, rbx
	or	r15, 640
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	r11, rbx
	or	r11, 672
	mov	qword ptr [rsp + 184], r11      # 8-byte Spill
	mov	r8, rbx
	or	r8, 704
	mov	qword ptr [rsp + 136], r8       # 8-byte Spill
	mov	rdx, rbx
	or	rdx, 736
	mov	qword ptr [rsp + 176], rdx      # 8-byte Spill
	mov	r12, rbx
	or	r12, 768
	mov	qword ptr [rsp + 160], r12      # 8-byte Spill
	mov	r14, rbx
	or	r14, 800
	mov	qword ptr [rsp + 168], r14      # 8-byte Spill
	mov	r10, rbx
	or	r10, 832
	mov	qword ptr [rsp + 40], r10       # 8-byte Spill
	mov	r9, rbx
	or	r9, 864
	mov	qword ptr [rsp + 64], r9        # 8-byte Spill
	mov	rax, rbx
	or	rax, 896
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rdi, rbx
	or	rdi, 928
	mov	qword ptr [rsp + 112], rdi      # 8-byte Spill
	mov	rax, rbx
	mov	qword ptr [rsp + 224], rbx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 16], rcx       # 8-byte Spill
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm9, xmm0, byte ptr [rsi + r13], 1
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + rbx], 2
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9], 11
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx], 15
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14], 1
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12], 2
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10], 3
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11], 4
	mov	r8, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8], 5
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9], 6
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15], 7
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 9
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 12
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 13
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 15
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 1
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 2
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 3
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 4
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 5
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 6
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 7
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 8
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 9
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 10
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 13
	mov	r13, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 14
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rsi + r14 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 1], 6
	mov	r8, r9
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 1], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 14
	vinserti128	ymm15, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 1], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1280], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm10, edi
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 544]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 2], 1
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 2], 2
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 2], 3
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 4
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 5
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 7
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 2], 8
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 9
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 2], 10
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 11
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 2], 12
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 2], 13
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 15
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 2], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 2
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 2], 6
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 7
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 9
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 10
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 2], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rsi + rdx + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 3
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 4
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 5
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 6
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 3], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 3], 13
	mov	r14, r15
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 14
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rsi + rax + 3], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 2
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 3], 3
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 3], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 3], 7
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 3], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 3], 14
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm8, edi
	mov	r9, rbx
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 1
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 3
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 4
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 4], 5
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 4], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 10
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 11
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 14
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 4], 15
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm13, byte ptr [rsi + rax + 4], 1
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 4], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 4], 4
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 5
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 4], 6
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 4], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 4], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 10
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 4], 11
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 4], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 13
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 4], 15
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm4, xmm14, byte ptr [rsi + r9 + 5], 1
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 5], 2
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 5
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 6
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 7
	mov	r13, rcx
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 10
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 11
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 12
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 13
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 14
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 5], 15
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rsi + rax + 5], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 3
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 5], 6
	mov	r10, rdi
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 5], 7
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 5], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 5], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 5], 11
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 5], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 5], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm4, edi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rsi + rax + 6], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 2
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 6], 3
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 6], 4
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 6], 5
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 6], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 7
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 8
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 9
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 10
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 11
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 6], 12
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 6], 13
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 14
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 15
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rcx + 6], 1
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 2
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 6], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 7
	mov	r10, r14
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 6], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 10
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 12
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 13
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 14
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 4
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 7], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 6
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 7
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 7], 9
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 10
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 7], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 7], 13
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 14
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 15
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 1
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 2
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 3
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 7], 5
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 6
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 7], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 7], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 10
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 7], 11
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rcx + 7], 14
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 11]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1248], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 11]
	vmovd	xmm2, edi
	vpinsrb	xmm0, xmm9, byte ptr [rsi + rax + 8], 1
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 8], 2
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 8], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 8], 4
	mov	rbx, r14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 8], 5
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 8], 6
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 8], 8
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 8], 9
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 8], 11
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 8], 12
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 8], 13
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 14
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 8], 15
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rsi + rdx + 8], 1
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 8], 2
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 4
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 5
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 8], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 8], 8
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 8], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 8], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 12
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 13
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 14
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 15
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rsi + r13 + 9], 1
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r12 + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 3
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 6
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 7
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 8
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r8 + 9], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 10
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 11
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r11 + 9], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 13
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm7, xmm11, byte ptr [rsi + rax + 9], 1
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 9], 2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdi + 9], 4
	mov	r14, rdi
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 9], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 9], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 12
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 9], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm5, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 10], 1
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 10], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 3
	mov	r9, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 4
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 5
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 10], 7
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 10], 8
	mov	r12, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 10], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 10], 12
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 13
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 10], 14
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 10], 15
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 2
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 5
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 9
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 11
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 10], 13
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 10], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 11], 4
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 5
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 11], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 7
	mov	r9, rdx
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 11], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 10
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 11
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 13
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 14
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 11], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 11], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 5
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 7
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 11], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 11], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 11], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm3  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 14
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 13]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm1  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 13]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 1
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 2
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 3
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 12], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 12], 5
	mov	rbx, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 12], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 12], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 12], 8
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 12], 9
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 10
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 11
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 12], 12
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 12], 13
	mov	r14, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 12], 14
	mov	r10, r15
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 12], 15
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rsi + r13 + 12], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 12], 2
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 6
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 12], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 12], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 10
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 12], 11
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 13
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 1
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 2
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 4
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 6
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 13], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 9
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 10
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 12
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 13], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 13], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 13], 2
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 5
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 13], 7
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 13], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 13], 11
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 13], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rax + 13], 15
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm0  # 32-byte Spill
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r14 + 14]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 1
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 14], 2
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 14], 3
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 14], 4
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 5
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 7
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 14], 10
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 11
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 14], 13
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 15
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 14], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 3
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 14], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 5
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 14], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 14], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 13
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 15
	movzx	edi, byte ptr [rsi + r13 + 15]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 4
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 6
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 15], 7
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 8
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 9
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 11
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 15], 12
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 13
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 14
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 15
	movzx	edi, byte ptr [rsi + r14 + 15]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 15], 1
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 2
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 15], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 15], 6
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 15], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 10
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 15], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 14
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 16]
	vmovd	xmm0, edi
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 16], 1
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 2
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 16], 3
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 5
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 7
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 9
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 10
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 16], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 15
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 16]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 2
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 5
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 16], 7
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 16], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 12
	mov	r12, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 16], 13
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 16], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 16], 15
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 17]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 17], 1
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 17], 3
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 4
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 17], 6
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 8
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 17], 10
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 17], 11
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 13
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 17]
	vmovd	xmm3, edi
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 17], 1
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 17], 2
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 17], 3
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 6
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 17], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 17], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rax + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 18]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 18], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 4
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 5
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 18], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 7
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 9
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 11
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 18], 12
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 13
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 14
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 18], 15
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 18]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 18], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 18], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 18], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 4
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 5
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 18], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 18], 7
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 10
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 18], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 18], 14
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 18], 15
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 19]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 1
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 3
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 4
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 19], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 19], 6
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 7
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 19], 10
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 19], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 19], 13
	mov	r9, qword ptr [rsp + 8]         # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 19], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 15
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r10 + 19]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 1
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 19], 2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 19], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 19], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 19], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 20]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 1
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 3
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 20], 5
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 6
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 20], 7
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 20], 8
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 9
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 10
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 11
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 12
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 20], 14
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 20], 15
	movzx	edi, byte ptr [rsi + r10 + 20]
	vmovd	xmm1, edi
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 20], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 20], 2
	mov	r8, qword ptr [rsp + 24]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 20], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 5
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 6
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 20], 7
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 11
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 20], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 13
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 15
	movzx	edi, byte ptr [rsi + r11 + 21]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 2
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 3
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 4
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 5
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 21], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 21], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 11
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 13
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 21], 15
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 21]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 21], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 21], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 7
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 21], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 21], 10
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 21], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 21], 12
	mov	r8, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 21], 13
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + r10 + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 22]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 1
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 3
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 4
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 5
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 6
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 7
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 8
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 9
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 22], 10
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 22], 12
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 13
	mov	r9, qword ptr [rsp + 8]         # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 22], 14
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 15
	movzx	edi, byte ptr [rsi + r11 + 22]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 2
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 22], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 22], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 22], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 6
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 22], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 22], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 22], 11
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 22], 13
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 22], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 22], 15
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 23]
	vmovd	xmm2, edi
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 23], 1
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 23], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 3
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 4
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 5
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 23], 6
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 7
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 23], 10
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 11
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 23], 12
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 23], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 23], 14
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 15
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 23]
	vmovd	xmm3, edi
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 23], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 23], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 5
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 7
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 23], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 9
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 23], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 24]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 24], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 24], 2
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 24], 3
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 4
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 24], 6
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 24], 7
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 8
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 24], 9
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 10
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 24], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 24], 13
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 24], 15
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 24]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 1
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 2
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 5
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 6
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 14
	mov	r11, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 15
	movzx	edi, byte ptr [rsi + rcx + 25]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 1
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 25], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 25], 3
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 4
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 5
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 25], 7
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 25], 9
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 25], 10
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 25], 11
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 13
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 15
	movzx	edi, byte ptr [rsi + rdx + 25]
	vmovd	xmm3, edi
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 25], 2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 5
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 25], 6
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 8
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 25], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 25], 12
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 25], 13
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 25], 14
	vinserti128	ymm9, ymm1, xmm0, 1
	vpinsrb	xmm0, xmm3, byte ptr [rsi + r11 + 25], 15
	vinserti128	ymm8, ymm0, xmm2, 1
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 26]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 2
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 3
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 5
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 26], 6
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 8
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 26], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 11
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 12
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 26], 13
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 14
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 26], 15
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 26]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 1
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 2
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 4
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 26], 6
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 7
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 26], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 26], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 12
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 26], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 15
	movzx	edi, byte ptr [rsi + r11 + 27]
	vmovd	xmm2, edi
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 27], 1
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 27], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 4
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 27], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 7
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 8
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 27], 9
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 10
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 27], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 27], 13
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 14
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 15
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 27]
	vmovd	xmm3, edi
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 1
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 27], 2
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 3
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 27], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 27], 5
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 6
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 27], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 11
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 27], 13
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 27], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 28]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 1
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 3
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 28], 5
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 7
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 10
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 11
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 13
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 14
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 15
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r12 + 28]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 28], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 4
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 28], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 6
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 7
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 28], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 9
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 10
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 28], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 15
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 29]
	vmovd	xmm2, edi
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 2
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 29], 4
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 29], 5
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 6
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 7
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 8
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 9
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 10
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 29], 12
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 13
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 14
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 15
	movzx	edi, byte ptr [rsi + r12 + 29]
	vmovd	xmm3, edi
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 29], 1
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 2
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 3
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 29], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 29], 5
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 29], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 29], 8
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 29], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 29], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 29], 12
	mov	r14, rdx
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 13
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm3, byte ptr [rsi + r10 + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm4, byte ptr [rsi + rdx + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r8 + 30]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 30], 1
	movzx	edi, byte ptr [rsi + r8 + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 31], 1
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 31], 3
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 31], 5
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 6
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 7
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 11
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 13
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rsi + rax + 31], 15
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	eax, byte ptr [rsi + rcx + 30]
	vmovd	xmm1, eax
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 30], 1
	movzx	eax, byte ptr [rsi + rcx + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rbx + 31], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r12 + 31], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 31], 7
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 8
	mov	rax, r9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 31], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 11
	mov	rax, r14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 31], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 31], 14
	mov	rax, rdx
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 256], ymm0   # 32-byte Spill
	vmovdqa	ymm0, ymmword ptr [rsp + 608]   # 32-byte Reload
	vmovdqa	ymm1, ymmword ptr [rsp + 1280]  # 32-byte Reload
	vpcmpgtb	ymm2, ymm1, ymm0
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI7_0] # ymm1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	vpand	ymm7, ymm2, ymm1
	vpsubb	ymm11, ymm7, ymm2
	vpcmpgtb	ymm7, ymm15, ymm0
	vpand	ymm7, ymm7, ymm1
	vmovdqa	ymm2, ymmword ptr [rsp + 544]   # 32-byte Reload
	vpcmpgtb	ymm12, ymm2, ymm0
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI7_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpand	ymm12, ymm12, ymm6
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vmovdqa	ymm2, ymmword ptr [rsp + 448]   # 32-byte Reload
	vpcmpgtb	ymm7, ymm2, ymm0
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI7_2] # ymm3 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpand	ymm7, ymm7, ymm3
	vpcmpgtb	ymm12, ymm14, ymm0
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI7_3] # ymm4 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpand	ymm12, ymm12, ymm4
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm12, ymmword ptr [rsp + 416]  # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm0
	vmovdqa	ymm2, ymmword ptr [rip + .LCPI7_4] # ymm2 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpand	ymm12, ymm12, ymm2
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vmovdqa	ymm7, ymmword ptr [rsp + 512]   # 32-byte Reload
	vpcmpgtb	ymm7, ymm7, ymm0
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI7_5] # ymm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpand	ymm7, ymm7, ymm5
	vmovdqa	ymm12, ymmword ptr [rsp + 1248] # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm0
	vpsllw	ymm12, ymm12, 7
	vmovdqa	ymm15, ymmword ptr [rip + .LCPI7_6] # ymm15 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm12, ymm12, ymm15
	vpor	ymm7, ymm12, ymm7
	vpor	ymm13, ymm11, ymm7
	vmovdqa	ymm7, ymmword ptr [rsp + 1184]  # 32-byte Reload
	vpcmpgtb	ymm7, ymm7, ymm0
	vpand	ymm12, ymm7, ymm1
	vpsubb	ymm7, ymm12, ymm7
	vmovdqa	ymm11, ymmword ptr [rsp + 1216] # 32-byte Reload
	vpcmpgtb	ymm12, ymm11, ymm0
	vpand	ymm12, ymm12, ymm1
	vmovdqa	ymm11, ymmword ptr [rsp + 1152] # 32-byte Reload
	vpcmpgtb	ymm11, ymm11, ymm0
	vpand	ymm11, ymm11, ymm6
	vpor	ymm11, ymm12, ymm11
	vpor	ymm7, ymm11, ymm7
	vmovdqa	ymm11, ymmword ptr [rsp + 1120] # 32-byte Reload
	vpcmpgtb	ymm11, ymm11, ymm0
	vpand	ymm11, ymm11, ymm3
	vmovdqa	ymm12, ymmword ptr [rsp + 1088] # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm0
	vpand	ymm12, ymm12, ymm4
	vpor	ymm11, ymm11, ymm12
	vmovdqa	ymm12, ymmword ptr [rsp + 1056] # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm0
	vpand	ymm12, ymm12, ymm2
	vpor	ymm11, ymm11, ymm12
	vpor	ymm7, ymm11, ymm7
	vmovdqa	ymm11, ymmword ptr [rsp + 992]  # 32-byte Reload
	vpcmpgtb	ymm11, ymm11, ymm0
	vpand	ymm11, ymm11, ymm5
	vmovdqa	ymm12, ymmword ptr [rsp + 1024] # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm0
	vpsllw	ymm12, ymm12, 7
	vpand	ymm12, ymm12, ymm15
	vpor	ymm11, ymm11, ymm12
	vpor	ymm12, ymm11, ymm7
	vmovdqa	ymm7, ymmword ptr [rsp + 928]   # 32-byte Reload
	vpcmpgtb	ymm7, ymm7, ymm0
	vpand	ymm11, ymm7, ymm1
	vpsubb	ymm7, ymm11, ymm7
	vmovdqa	ymm11, ymmword ptr [rsp + 960]  # 32-byte Reload
	vpcmpgtb	ymm11, ymm11, ymm0
	vpand	ymm11, ymm11, ymm1
	vmovdqa	ymm14, ymmword ptr [rsp + 864]  # 32-byte Reload
	vpcmpgtb	ymm14, ymm14, ymm0
	vpand	ymm14, ymm14, ymm6
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vmovdqa	ymm11, ymmword ptr [rsp + 896]  # 32-byte Reload
	vpcmpgtb	ymm11, ymm11, ymm0
	vpand	ymm11, ymm11, ymm3
	vmovdqa	ymm14, ymmword ptr [rsp + 800]  # 32-byte Reload
	vpcmpgtb	ymm14, ymm14, ymm0
	vpand	ymm14, ymm14, ymm4
	vpor	ymm11, ymm11, ymm14
	vmovdqa	ymm14, ymmword ptr [rsp + 832]  # 32-byte Reload
	vpcmpgtb	ymm14, ymm14, ymm0
	vpand	ymm14, ymm14, ymm2
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpgtb	ymm10, ymm10, ymm0
	vmovdqa	ymm14, ymm5
	vpand	ymm10, ymm10, ymm5
	vmovdqa	ymm11, ymmword ptr [rsp + 768]  # 32-byte Reload
	vpcmpgtb	ymm11, ymm11, ymm0
	vpsllw	ymm11, ymm11, 7
	vpand	ymm11, ymm11, ymm15
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpgtb	ymm8, ymm8, ymm0
	vpand	ymm10, ymm8, ymm1
	vpsubb	ymm8, ymm10, ymm8
	vpcmpgtb	ymm9, ymm9, ymm0
	vpand	ymm9, ymm9, ymm1
	vmovdqa	ymm1, ymmword ptr [rsp + 640]   # 32-byte Reload
	vpcmpgtb	ymm5, ymm1, ymm0
	vpand	ymm5, ymm5, ymm6
	vpor	ymm5, ymm9, ymm5
	vpor	ymm5, ymm8, ymm5
	vmovdqa	ymm1, ymmword ptr [rsp + 672]   # 32-byte Reload
	vpcmpgtb	ymm6, ymm1, ymm0
	vpand	ymm6, ymm6, ymm3
	vmovdqa	ymm1, ymmword ptr [rsp + 736]   # 32-byte Reload
	vpcmpgtb	ymm3, ymm1, ymm0
	vpand	ymm3, ymm3, ymm4
	vpor	ymm3, ymm6, ymm3
	vmovdqa	ymm1, ymmword ptr [rsp + 704]   # 32-byte Reload
	vpcmpgtb	ymm4, ymm1, ymm0
	vpand	ymm4, ymm4, ymm2
	vpor	ymm3, ymm3, ymm4
	vpor	ymm3, ymm5, ymm3
	vmovdqa	ymm1, ymmword ptr [rsp + 288]   # 32-byte Reload
	vpcmpgtb	ymm1, ymm1, ymm0
	vpand	ymm1, ymm14, ymm1
	vmovdqa	ymm2, ymmword ptr [rsp + 256]   # 32-byte Reload
	vpcmpgtb	ymm2, ymm2, ymm0
	vpsllw	ymm2, ymm2, 7
	vpand	ymm2, ymm15, ymm2
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm13, ymm12      # ymm2 = ymm13[0],ymm12[0],ymm13[1],ymm12[1],ymm13[2],ymm12[2],ymm13[3],ymm12[3],ymm13[4],ymm12[4],ymm13[5],ymm12[5],ymm13[6],ymm12[6],ymm13[7],ymm12[7],ymm13[16],ymm12[16],ymm13[17],ymm12[17],ymm13[18],ymm12[18],ymm13[19],ymm12[19],ymm13[20],ymm12[20],ymm13[21],ymm12[21],ymm13[22],ymm12[22],ymm13[23],ymm12[23]
	vpunpckhbw	ymm0, ymm13, ymm12      # ymm0 = ymm13[8],ymm12[8],ymm13[9],ymm12[9],ymm13[10],ymm12[10],ymm13[11],ymm12[11],ymm13[12],ymm12[12],ymm13[13],ymm12[13],ymm13[14],ymm12[14],ymm13[15],ymm12[15],ymm13[24],ymm12[24],ymm13[25],ymm12[25],ymm13[26],ymm12[26],ymm13[27],ymm12[27],ymm13[28],ymm12[28],ymm13[29],ymm12[29],ymm13[30],ymm12[30],ymm13[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 368]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r11 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r11 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r11 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB7_66
# %bb.67:
	mov	r13, qword ptr [rsp + 360]      # 8-byte Reload
	cmp	r13, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 4]       # 4-byte Reload
	mov	r12, qword ptr [rsp + 576]      # 8-byte Reload
	jne	.LBB7_68
	jmp	.LBB7_71
.LBB7_47:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 504], rax      # 8-byte Spill
	mov	qword ptr [rsp + 360], r15      # 8-byte Spill
	lea	rax, [r11 + 4*r15]
	mov	qword ptr [rsp + 352], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	vmovdqa	ymm14, ymmword ptr [rsp + 576]  # 32-byte Reload
	.p2align	4, 0x90
.LBB7_48:                               # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 368], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 224], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 256], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rsi + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rsi + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rsi + rcx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rsi + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rsi + rcx + 2]
	mov	rdx, rcx
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	mov	rcx, rbx
	movzx	eax, byte ptr [rsi + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rdx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rsi + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rsi + rdx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 512], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 4]
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rsi + rdx + 5]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rsi + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rsi + rdx + 6]
	mov	qword ptr [rsp + 184], rdx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rsi + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rsi + rdx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rsi + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	r13, rbx
	or	r13, 544
	mov	qword ptr [rsp + 56], r13       # 8-byte Spill
	mov	r11, rbx
	or	r11, 576
	mov	r14, rbx
	or	r14, 608
	mov	qword ptr [rsp + 72], r14       # 8-byte Spill
	mov	r15, rbx
	or	r15, 640
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	or	rbx, 672
	mov	qword ptr [rsp + 144], rbx      # 8-byte Spill
	mov	r12, rcx
	or	r12, 704
	mov	qword ptr [rsp + 200], r12      # 8-byte Spill
	mov	rax, rcx
	or	rax, 736
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	r8, rcx
	or	r8, 768
	mov	qword ptr [rsp + 120], r8       # 8-byte Spill
	mov	rax, rcx
	or	rax, 800
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	r9, rcx
	or	r9, 832
	mov	qword ptr [rsp + 88], r9        # 8-byte Spill
	mov	rdi, rcx
	or	rdi, 864
	mov	qword ptr [rsp + 176], rdi      # 8-byte Spill
	mov	rdx, rcx
	or	rdx, 896
	mov	qword ptr [rsp + 160], rdx      # 8-byte Spill
	mov	r10, rcx
	or	r10, 928
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 232], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 208], rcx      # 8-byte Spill
	vpinsrb	xmm9, xmm0, byte ptr [rsi + r13], 1
	mov	qword ptr [rsp + 80], r11       # 8-byte Spill
	vpinsrb	xmm0, xmm9, byte ptr [rsi + r11], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12], 6
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8], 8
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx], 15
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10], 1
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9], 2
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15], 3
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 5
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14], 6
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 7
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi], 8
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 9
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 10
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 11
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 12
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 14
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 15
	vinserti128	ymm0, ymm3, xmm0, 1
	vpminub	ymm3, ymm14, ymm0
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 1], 2
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 3
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 4
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 1], 5
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 6
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 1], 7
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 9
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 10
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 11
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 12
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 13
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 14
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rsi + r10 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 1], 3
	mov	r10, r15
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 1], 4
	mov	r13, r8
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 11
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 1], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 13
	vpcmpeqb	ymm0, ymm0, ymm3
	vmovdqa	ymmword ptr [rsp + 1280], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 1], 14
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm9, edi
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 1], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm10, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 448]   # 16-byte Reload
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 2], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 2
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 3
	mov	r12, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 2], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 5
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 2], 6
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 2], 7
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 8
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 2], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 10
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 11
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 14
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 15
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 416]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 2], 1
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 2], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 2], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 2], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 2], 5
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 6
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 2], 7
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 2], 8
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 2], 9
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 10
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 11
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 2], 12
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rsi + r8 + 3], 1
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 2
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 3], 4
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 6
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 7
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 3], 9
	mov	r9, r15
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 10
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 12
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 13
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 14
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rsi + rax + 3], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 3], 2
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 3], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 3], 7
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 3], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 3], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 14
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 3], 15
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm8, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 512]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 1
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 4], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 4], 3
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 4], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 5
	mov	r8, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 6
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 4], 7
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 4], 9
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 4], 10
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 4], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 4], 12
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 4], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 14
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 15
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm13, byte ptr [rsi + rax + 4], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 4], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 4], 5
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 4], 6
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 7
	mov	rcx, r10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 8
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 11
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 13
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 4], 14
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 15
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm15, byte ptr [rsi + rax + 5], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 5], 2
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 4
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 5], 6
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 5], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 5], 11
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 5], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 5], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 14
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 15
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rsi + r11 + 5], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 5], 2
	mov	r9, r14
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 5], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 6
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 5], 8
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 5], 9
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 5], 10
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 5], 11
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 5], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 13
	vinserti128	ymm13, ymm3, xmm0, 1
	vpinsrb	xmm0, xmm5, byte ptr [rsi + r10 + 5], 14
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 10]
	vmovd	xmm3, edi
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 5], 15
	vinserti128	ymm15, ymm0, xmm4, 1
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 10]
	vmovd	xmm4, edi
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rsi + rax + 6], 1
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 6], 2
	mov	r8, r12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 6], 3
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 6], 5
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 6
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 6], 7
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 8
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 6], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 10
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 12
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 14
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 6], 15
	vpinsrb	xmm5, xmm7, byte ptr [rsi + r11 + 6], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 6], 2
	mov	r11, r14
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 6], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 5
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 6], 6
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 6], 7
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 6], 8
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 14
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 6], 15
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 7], 3
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 5
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 7], 7
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 9
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 10
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 11
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 13
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 7], 15
	mov	r15, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 7], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 7], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 7], 4
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 7], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 7], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 7], 8
	mov	r14, r10
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 7], 15
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 11]
	vmovd	xmm0, edi
	vinserti128	ymm1, ymm1, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1248], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 11]
	vmovd	xmm1, edi
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm2, xmm9, byte ptr [rsi + r8 + 8], 1
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 8], 2
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 3
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 5
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 8], 6
	mov	r11, r12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 8], 7
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 8], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 8], 9
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 8], 10
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 8], 11
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 14
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 8], 15
	mov	rcx, r15
	vpinsrb	xmm5, xmm10, byte ptr [rsi + r15 + 8], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 2
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 5
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 8], 8
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 8], 9
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 10
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 11
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 8], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 13
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 14
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 8], 15
	vinserti128	ymm2, ymm5, xmm2, 1
	vpminub	ymm5, ymm14, ymm2
	vpinsrb	xmm6, xmm8, byte ptr [rsi + r8 + 9], 1
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r9 + 9], 2
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 3
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r15 + 9], 4
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r10 + 9], 6
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r11 + 9], 7
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r12 + 9], 8
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 9
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r13 + 9], 10
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 11
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 12
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r9 + 9], 13
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 14
	mov	r12, rax
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 15
	vpinsrb	xmm7, xmm11, byte ptr [rsi + rcx + 9], 1
	mov	r8, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 9], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 5
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rbx + 9], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdi + 9], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 9], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 14
	vpcmpeqb	ymm2, ymm2, ymm5
	vmovdqa	ymmword ptr [rsp + 1216], ymm2  # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm2, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm5, edi
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 2
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 3
	mov	r13, r15
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 10], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 5
	mov	r14, r10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 10], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 10], 7
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 10], 8
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 10], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 10], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 10], 11
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 10], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 13
	mov	r9, r12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 10], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 10], 15
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 10], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 10], 2
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 3
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 10], 4
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 10], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 6
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 7
	mov	r8, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 10], 8
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 9
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 10
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 11
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 12
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 10], 13
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 10], 14
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 10], 15
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 11], 1
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 11], 2
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 11], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 11], 4
	mov	rbx, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 11], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 11], 6
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 11], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 11], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 11], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 11], 10
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 11], 11
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 11], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 11], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 11], 14
	mov	r10, r9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 11], 15
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 1
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 11], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 5
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 11], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 8
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 11], 9
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 10
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 11], 11
	mov	r12, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 11], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm3  # 32-byte Spill
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 11], 14
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 13]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 11], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm0  # 32-byte Spill
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 13]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm2, byte ptr [rsi + rdi + 12], 1
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 12], 2
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 12], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 12], 4
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 12], 5
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 12], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 12], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 12], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 12], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 12], 10
	mov	r9, r13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 12], 11
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 12], 12
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 12], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 12], 14
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 12], 15
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rsi + rcx + 12], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 12], 2
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 6
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 8
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 12], 10
	mov	r10, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 12], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 12], 12
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 12], 13
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 12], 14
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 15
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 5
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 13], 6
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 8
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 13], 12
	mov	rbx, r13
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 13], 15
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 13], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 13], 5
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 13], 7
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 13], 8
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 13], 11
	mov	r9, r10
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 13], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 13], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 15
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 14]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 2
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 14], 3
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 4
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 14], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 6
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 7
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 14], 9
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 14], 10
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 14], 12
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 14], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 14], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 14], 15
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 2
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 3
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 14], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 5
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 14], 8
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 14], 9
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 14], 11
	mov	r9, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 14], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 14], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 14
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 14], 15
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 15]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 1
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 15], 3
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 15], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 15], 5
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 7
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 11
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 14
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 15], 15
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 15]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 2
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 15], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 15], 4
	mov	r14, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 15], 5
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 6
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 7
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 15], 9
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 15], 10
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 15], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 15], 12
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 15], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 15], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 16]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 16], 2
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 16], 4
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 5
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 16], 7
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 16], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 11
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 12
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 14
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 16]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 16], 3
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 16], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 6
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 16], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 8
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 16], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 16], 10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 16], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 14
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 16], 15
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r15 + 17]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 1
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 2
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 4
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 17], 6
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 8
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 17], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 10
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 17], 11
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 12
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 13
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 17], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 15
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r12 + 17]
	vmovd	xmm3, edi
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 1
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 2
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 3
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 4
	mov	r8, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 17], 5
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 17], 7
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 17], 9
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 10
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vpinsrb	xmm1, xmm3, byte ptr [rsi + r11 + 17], 15
	vpminub	ymm3, ymm14, ymm0
	vpcmpeqb	ymm0, ymm0, ymm3
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	vinserti128	ymm0, ymm1, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r15 + 18]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 1
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 2
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 18], 3
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 4
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 18], 5
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 6
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 7
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 18], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 18], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 18], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 14
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 15
	movzx	edi, byte ptr [rsi + r12 + 18]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 1
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 18], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 18], 5
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 18], 6
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 7
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 18], 8
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 10
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 11
	mov	r9, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 18], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 18], 13
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 18], 14
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 15
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 19]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 19], 2
	mov	r13, r14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 19], 3
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 19], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 19], 5
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 19], 6
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 7
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 11
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 19], 12
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 14
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 19]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 19], 2
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 19], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 19], 8
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 9
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 19], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 19], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rcx + 19], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 20]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 20], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 20], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 20], 6
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 20], 7
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 20], 8
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 10
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 20], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 20], 12
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 20], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 14
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 15
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r8 + 20]
	vmovd	xmm1, edi
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 20], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 2
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 20], 3
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 5
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 6
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 7
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 8
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 9
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 10
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 14
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 15
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 21]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 1
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 21], 2
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 3
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 4
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 5
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 21], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 21], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 21], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 21], 11
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 21], 13
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 21], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 15
	mov	r9, rax
	movzx	edi, byte ptr [rsi + r8 + 21]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 1
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 21], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 5
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 7
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 21], 8
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 9
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 21], 10
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 11
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 14
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 15
	vinserti128	ymm11, ymm1, xmm0, 1
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 22]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 22], 2
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 3
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 5
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 22], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 7
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 22], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 22], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 11
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 22], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 22], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 22], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 22]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 1
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 2
	mov	r9, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 22], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 5
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 6
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 22], 8
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 22], 10
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 22], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 14
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 15
	movzx	edi, byte ptr [rsi + rcx + 23]
	vmovd	xmm2, edi
	mov	r11, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 23], 1
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 2
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 3
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 4
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 23], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 23], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 10
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 23], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 23], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 23], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 14
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 23], 15
	mov	r10, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r10 + 23]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 23], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 23], 3
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 23], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 5
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 23], 6
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 23], 7
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 23], 8
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 9
	mov	r9, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 23], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 23], 11
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 23], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 13
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 23], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rax + 23], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 24]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 24], 1
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 2
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 3
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 4
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 5
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 6
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 24], 7
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 8
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 24], 11
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 12
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 24], 15
	movzx	edi, byte ptr [rsi + r10 + 24]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 1
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 24], 2
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 4
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 24], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 24], 8
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 10
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 11
	mov	r8, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 24], 12
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 15
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r9 + 25]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 2
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 3
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 4
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 25], 5
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 25], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 25], 7
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 9
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 25], 10
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 11
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 25], 12
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 25], 14
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 25], 15
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 25]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 25], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 25], 2
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 25], 5
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 25], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 7
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 25], 8
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 9
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 25], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 25], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 25], 13
	vinserti128	ymm0, ymm1, xmm0, 1
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm3, byte ptr [rsi + rcx + 25], 14
	vpminub	ymm3, ymm14, ymm0
	vpcmpeqb	ymm0, ymm0, ymm3
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rcx + 25], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 384], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r9 + 26]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 1
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 2
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 3
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 26], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 7
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 8
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 26], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 11
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 26], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 14
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 15
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 26]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 1
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 26], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 26], 6
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 26], 8
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 26], 9
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 10
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 11
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 15
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r12 + 27]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 1
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 27], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 3
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 4
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 27], 5
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 6
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 7
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 8
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 27], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 10
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 27], 12
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 15
	mov	r9, rdx
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 27]
	vmovd	xmm3, edi
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 27], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 27], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 27], 4
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 5
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 6
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 27], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 9
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 10
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 11
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 13
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 14
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r12 + 28]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 2
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 28], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 28], 5
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 6
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 7
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 28], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 28], 9
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 10
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 11
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 28], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 13
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 28], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 28], 15
	mov	r8, qword ptr [rsp + 232]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r8 + 28]
	vmovd	xmm1, edi
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 28], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 28], 2
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 28], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 5
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 6
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 28], 8
	mov	r11, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 28], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 10
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 28], 11
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 28], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 14
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 28], 15
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 29]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 1
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 2
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 29], 3
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 29], 4
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 29], 6
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 29], 8
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 9
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 29], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 29], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 29], 12
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 29], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 29], 14
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 29], 15
	movzx	edi, byte ptr [rsi + r8 + 29]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 29], 1
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 29], 2
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 3
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 29], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 5
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 6
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 29], 7
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 29], 9
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 29], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 29], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 29], 13
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm3, byte ptr [rsi + r15 + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm4, byte ptr [rsi + r10 + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 30]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 1
	movzx	edi, byte ptr [rsi + r11 + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 3
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 4
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 6
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 7
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 9
	mov	rax, rbx
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 31], 10
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 11
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 31], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rsi + r14 + 31], 15
	mov	rdx, r8
	movzx	eax, byte ptr [rsi + r8 + 30]
	vmovd	xmm1, eax
	mov	r8, qword ptr [rsp + 24]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 30], 1
	movzx	eax, byte ptr [rsi + rdx + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 31], 1
	mov	rax, r13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r13 + 31], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 31], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r12 + 31], 7
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 11
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rcx + 31], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 31], 14
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 256], ymm0   # 32-byte Spill
	vmovdqa	ymm1, ymmword ptr [rsp + 544]   # 32-byte Reload
	vpminub	ymm0, ymm14, ymm1
	vpcmpeqb	ymm0, ymm1, ymm0
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI7_0] # ymm4 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	vpandn	ymm7, ymm0, ymm4
	vpaddb	ymm0, ymm7, ymm0
	vmovdqa	ymm2, ymmword ptr [rsp + 448]   # 32-byte Reload
	vpminub	ymm7, ymm14, ymm2
	vpcmpeqb	ymm7, ymm2, ymm7
	vmovdqa	ymm2, ymmword ptr [rsp + 1280]  # 32-byte Reload
	vpandn	ymm12, ymm2, ymm4
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI7_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpandn	ymm7, ymm7, ymm6
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm2, ymmword ptr [rsp + 416]   # 32-byte Reload
	vpminub	ymm12, ymm14, ymm2
	vpcmpeqb	ymm12, ymm12, ymm2
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI7_2] # ymm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpandn	ymm12, ymm12, ymm5
	vpor	ymm7, ymm12, ymm7
	vpcmpeqd	ymm1, ymm1, ymm1
	vpsubb	ymm0, ymm0, ymm1
	vpor	ymm0, ymm0, ymm7
	vpminub	ymm7, ymm13, ymm14
	vpcmpeqb	ymm7, ymm13, ymm7
	vpminub	ymm12, ymm15, ymm14
	vpcmpeqb	ymm12, ymm15, ymm12
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI7_3] # ymm3 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpandn	ymm7, ymm7, ymm3
	vmovdqa	ymm10, ymmword ptr [rip + .LCPI7_4] # ymm10 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpandn	ymm12, ymm12, ymm10
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm13, ymmword ptr [rsp + 512]  # 32-byte Reload
	vpminub	ymm12, ymm13, ymm14
	vpcmpeqb	ymm12, ymm13, ymm12
	vmovdqa	ymm2, ymmword ptr [rip + .LCPI7_5] # ymm2 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpandn	ymm12, ymm12, ymm2
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm13, ymmword ptr [rsp + 1248] # 32-byte Reload
	vpminub	ymm12, ymm13, ymm14
	vpcmpeqb	ymm12, ymm13, ymm12
	vpxor	ymm12, ymm12, ymm1
	vpsllw	ymm12, ymm12, 7
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI7_6] # ymm9 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm12, ymm12, ymm9
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vmovdqa	ymm12, ymmword ptr [rsp + 1184] # 32-byte Reload
	vpminub	ymm7, ymm12, ymm14
	vpcmpeqb	ymm7, ymm12, ymm7
	vpandn	ymm12, ymm7, ymm4
	vpaddb	ymm7, ymm12, ymm7
	vmovdqa	ymm13, ymmword ptr [rsp + 1152] # 32-byte Reload
	vpminub	ymm12, ymm13, ymm14
	vpcmpeqb	ymm12, ymm13, ymm12
	vmovdqa	ymm13, ymmword ptr [rsp + 1216] # 32-byte Reload
	vpandn	ymm13, ymm13, ymm4
	vpandn	ymm12, ymm12, ymm6
	vpor	ymm12, ymm13, ymm12
	vmovdqa	ymm15, ymmword ptr [rsp + 1120] # 32-byte Reload
	vpminub	ymm13, ymm15, ymm14
	vpcmpeqb	ymm13, ymm15, ymm13
	vpandn	ymm13, ymm13, ymm5
	vpor	ymm12, ymm12, ymm13
	vpsubb	ymm7, ymm7, ymm1
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm13, ymmword ptr [rsp + 1088] # 32-byte Reload
	vpminub	ymm12, ymm13, ymm14
	vpcmpeqb	ymm12, ymm13, ymm12
	vmovdqa	ymm15, ymmword ptr [rsp + 1056] # 32-byte Reload
	vpminub	ymm13, ymm15, ymm14
	vpcmpeqb	ymm13, ymm15, ymm13
	vpandn	ymm12, ymm12, ymm3
	vpandn	ymm13, ymm13, ymm10
	vpor	ymm12, ymm12, ymm13
	vmovdqa	ymm15, ymmword ptr [rsp + 960]  # 32-byte Reload
	vpminub	ymm13, ymm15, ymm14
	vpcmpeqb	ymm13, ymm15, ymm13
	vpandn	ymm13, ymm13, ymm2
	vpor	ymm12, ymm12, ymm13
	vmovdqa	ymm15, ymmword ptr [rsp + 992]  # 32-byte Reload
	vpminub	ymm13, ymm15, ymm14
	vpcmpeqb	ymm13, ymm15, ymm13
	vpxor	ymm13, ymm13, ymm1
	vpsllw	ymm13, ymm13, 7
	vpand	ymm13, ymm13, ymm9
	vpor	ymm12, ymm12, ymm13
	vpor	ymm12, ymm12, ymm7
	vmovdqa	ymm13, ymmword ptr [rsp + 928]  # 32-byte Reload
	vpminub	ymm7, ymm13, ymm14
	vpcmpeqb	ymm7, ymm13, ymm7
	vpandn	ymm13, ymm7, ymm4
	vpaddb	ymm7, ymm13, ymm7
	vmovdqa	ymm0, ymmword ptr [rsp + 864]   # 32-byte Reload
	vpminub	ymm13, ymm14, ymm0
	vpcmpeqb	ymm13, ymm13, ymm0
	vmovdqa	ymm15, ymmword ptr [rsp + 1024] # 32-byte Reload
	vpandn	ymm15, ymm15, ymm4
	vpandn	ymm13, ymm13, ymm6
	vpor	ymm13, ymm15, ymm13
	vmovdqa	ymm0, ymmword ptr [rsp + 896]   # 32-byte Reload
	vpminub	ymm15, ymm14, ymm0
	vpcmpeqb	ymm15, ymm15, ymm0
	vpandn	ymm15, ymm15, ymm5
	vpor	ymm13, ymm13, ymm15
	vpcmpeqd	ymm1, ymm1, ymm1
	vpsubb	ymm7, ymm7, ymm1
	vpor	ymm7, ymm13, ymm7
	vpminub	ymm13, ymm11, ymm14
	vpcmpeqb	ymm11, ymm11, ymm13
	vmovdqa	ymm0, ymmword ptr [rsp + 832]   # 32-byte Reload
	vpminub	ymm13, ymm14, ymm0
	vpcmpeqb	ymm13, ymm13, ymm0
	vpandn	ymm11, ymm11, ymm3
	vmovdqa	ymm15, ymm10
	vpandn	ymm13, ymm13, ymm10
	vpor	ymm11, ymm11, ymm13
	vmovdqa	ymm0, ymmword ptr [rsp + 608]   # 32-byte Reload
	vpminub	ymm13, ymm14, ymm0
	vpcmpeqb	ymm8, ymm13, ymm0
	vpandn	ymm8, ymm8, ymm2
	vpor	ymm8, ymm11, ymm8
	vmovdqa	ymm0, ymmword ptr [rsp + 640]   # 32-byte Reload
	vpminub	ymm11, ymm14, ymm0
	vpcmpeqb	ymm10, ymm11, ymm0
	vpxor	ymm10, ymm10, ymm1
	vpcmpeqd	ymm11, ymm11, ymm11
	vpsllw	ymm10, ymm10, 7
	vmovdqa	ymm13, ymm9
	vpand	ymm10, ymm10, ymm9
	vpor	ymm8, ymm8, ymm10
	vpor	ymm8, ymm8, ymm7
	vmovdqa	ymm0, ymmword ptr [rsp + 384]   # 32-byte Reload
	vpminub	ymm7, ymm14, ymm0
	vpcmpeqb	ymm7, ymm0, ymm7
	vpandn	ymm9, ymm7, ymm4
	vpaddb	ymm7, ymm9, ymm7
	vmovdqa	ymm0, ymmword ptr [rsp + 672]   # 32-byte Reload
	vpminub	ymm9, ymm14, ymm0
	vpcmpeqb	ymm5, ymm9, ymm0
	vmovdqa	ymm0, ymmword ptr [rsp + 800]   # 32-byte Reload
	vpandn	ymm9, ymm0, ymm4
	vpandn	ymm5, ymm5, ymm6
	vpor	ymm5, ymm9, ymm5
	vmovdqa	ymm0, ymmword ptr [rsp + 704]   # 32-byte Reload
	vpminub	ymm9, ymm14, ymm0
	vpcmpeqb	ymm6, ymm9, ymm0
	vpandn	ymm6, ymm6, ymmword ptr [rip + .LCPI7_2]
	vpor	ymm5, ymm5, ymm6
	vpsubb	ymm6, ymm7, ymm11
	vpor	ymm5, ymm6, ymm5
	vmovdqa	ymm0, ymmword ptr [rsp + 736]   # 32-byte Reload
	vpminub	ymm6, ymm14, ymm0
	vpcmpeqb	ymm3, ymm0, ymm6
	vmovdqa	ymm0, ymmword ptr [rsp + 768]   # 32-byte Reload
	vpminub	ymm6, ymm14, ymm0
	vpcmpeqb	ymm4, ymm0, ymm6
	vpandn	ymm3, ymm3, ymmword ptr [rip + .LCPI7_3]
	vpandn	ymm4, ymm4, ymm15
	vpor	ymm3, ymm3, ymm4
	vmovdqa	ymm0, ymmword ptr [rsp + 288]   # 32-byte Reload
	vpminub	ymm4, ymm14, ymm0
	vpcmpeqb	ymm1, ymm0, ymm4
	vpandn	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vmovdqa	ymm0, ymmword ptr [rsp + 256]   # 32-byte Reload
	vpminub	ymm3, ymm14, ymm0
	vpcmpeqb	ymm2, ymm0, ymm3
	vpxor	ymm2, ymm11, ymm2
	vpsllw	ymm2, ymm2, 7
	vpand	ymm2, ymm13, ymm2
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm5, ymm1
	vmovdqa	ymm0, ymmword ptr [rsp + 320]   # 32-byte Reload
	vpunpcklbw	ymm2, ymm0, ymm12       # ymm2 = ymm0[0],ymm12[0],ymm0[1],ymm12[1],ymm0[2],ymm12[2],ymm0[3],ymm12[3],ymm0[4],ymm12[4],ymm0[5],ymm12[5],ymm0[6],ymm12[6],ymm0[7],ymm12[7],ymm0[16],ymm12[16],ymm0[17],ymm12[17],ymm0[18],ymm12[18],ymm0[19],ymm12[19],ymm0[20],ymm12[20],ymm0[21],ymm12[21],ymm0[22],ymm12[22],ymm0[23],ymm12[23]
	vpunpckhbw	ymm0, ymm0, ymm12       # ymm0 = ymm0[8],ymm12[8],ymm0[9],ymm12[9],ymm0[10],ymm12[10],ymm0[11],ymm12[11],ymm0[12],ymm12[12],ymm0[13],ymm12[13],ymm0[14],ymm12[14],ymm0[15],ymm12[15],ymm0[24],ymm12[24],ymm0[25],ymm12[25],ymm0[26],ymm12[26],ymm0[27],ymm12[27],ymm0[28],ymm12[28],ymm0[29],ymm12[29],ymm0[30],ymm12[30],ymm0[31],ymm12[31]
	vpunpcklbw	ymm3, ymm8, ymm1        # ymm3 = ymm8[0],ymm1[0],ymm8[1],ymm1[1],ymm8[2],ymm1[2],ymm8[3],ymm1[3],ymm8[4],ymm1[4],ymm8[5],ymm1[5],ymm8[6],ymm1[6],ymm8[7],ymm1[7],ymm8[16],ymm1[16],ymm8[17],ymm1[17],ymm8[18],ymm1[18],ymm8[19],ymm1[19],ymm8[20],ymm1[20],ymm8[21],ymm1[21],ymm8[22],ymm1[22],ymm8[23],ymm1[23]
	vpunpckhbw	ymm1, ymm8, ymm1        # ymm1 = ymm8[8],ymm1[8],ymm8[9],ymm1[9],ymm8[10],ymm1[10],ymm8[11],ymm1[11],ymm8[12],ymm1[12],ymm8[13],ymm1[13],ymm8[14],ymm1[14],ymm8[15],ymm1[15],ymm8[24],ymm1[24],ymm8[25],ymm1[25],ymm8[26],ymm1[26],ymm8[27],ymm1[27],ymm8[28],ymm1[28],ymm8[29],ymm1[29],ymm8[30],ymm1[30],ymm8[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 368]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r11 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r11 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r11 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 360]      # 8-byte Folded Reload
	jne	.LBB7_48
# %bb.49:
	mov	r15, qword ptr [rsp + 376]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 360]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 4]       # 4-byte Reload
	mov	r12, qword ptr [rsp + 504]      # 8-byte Reload
	jne	.LBB7_50
	jmp	.LBB7_53
.Lfunc_end7:
	.size	comparison_greater_arr_scalar_avx2, .Lfunc_end7-comparison_greater_arr_scalar_avx2
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function comparison_greater_scalar_arr_avx2
.LCPI8_0:
	.zero	32,1
.LCPI8_1:
	.zero	32,4
.LCPI8_2:
	.zero	32,8
.LCPI8_3:
	.zero	32,16
.LCPI8_4:
	.zero	32,32
.LCPI8_5:
	.zero	32,64
.LCPI8_6:
	.zero	32,128
	.text
	.globl	comparison_greater_scalar_arr_avx2
	.p2align	4, 0x90
	.type	comparison_greater_scalar_arr_avx2,@function
comparison_greater_scalar_arr_avx2:     # @comparison_greater_scalar_arr_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -32
	sub	rsp, 1312
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r11, rcx
	cmp	edi, 6
	jg	.LBB8_13
# %bb.1:
	cmp	edi, 3
	jle	.LBB8_28
# %bb.2:
	cmp	edi, 4
	je	.LBB8_51
# %bb.3:
	cmp	edi, 5
	je	.LBB8_59
# %bb.4:
	cmp	edi, 6
	jne	.LBB8_179
# %bb.5:
	mov	r13d, dword ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_7:                                # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rdx], r13d
	lea	rdx, [rdx + 4]
	sbb	esi, esi
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_7
# %bb.8:
	add	r11, 1
.LBB8_9:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB8_115
# %bb.10:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_11:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 4]
	seta	dil
	cmp	r13d, dword ptr [rdx + 8]
	seta	r14b
	cmp	r13d, dword ptr [rdx + 12]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 16]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 20]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 24]
	seta	al
	cmp	r13d, dword ptr [rdx + 28]
	seta	r11b
	cmp	r13d, dword ptr [rdx + 32]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 36]
	seta	sil
	cmp	r13d, dword ptr [rdx + 40]
	seta	r8b
	cmp	r13d, dword ptr [rdx + 44]
	seta	r9b
	cmp	r13d, dword ptr [rdx + 48]
	seta	r10b
	cmp	r13d, dword ptr [rdx + 52]
	seta	r12b
	cmp	r13d, dword ptr [rdx + 56]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 60]
	seta	cl
	cmp	r13d, dword ptr [rdx + 64]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 68]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 72]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 76]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 80]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 84]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 88]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 92]
	seta	r15b
	cmp	r13d, dword ptr [rdx + 96]
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 100]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 104]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 108]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 112]
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 116]
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 120]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 124]
	seta	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 72]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 128
	add	rsi, 4
	mov	qword ptr [rsp + 232], rsi      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB8_11
# %bb.12:
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB8_116
	jmp	.LBB8_179
.LBB8_13:
	cmp	edi, 8
	jle	.LBB8_41
# %bb.14:
	cmp	edi, 9
	je	.LBB8_70
# %bb.15:
	cmp	edi, 11
	je	.LBB8_81
# %bb.16:
	cmp	edi, 12
	jne	.LBB8_179
# %bb.17:
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB8_21
# %bb.18:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_19:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	seta	bl
	add	rdx, 8
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_19
# %bb.20:
	add	r11, 1
.LBB8_21:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB8_25
# %bb.22:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_23:                               # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 8]
	seta	r8b
	vucomisd	xmm0, qword ptr [rdx + 16]
	seta	r14b
	vucomisd	xmm0, qword ptr [rdx + 24]
	seta	r13b
	vucomisd	xmm0, qword ptr [rdx + 32]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 40]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 48]
	seta	al
	vucomisd	xmm0, qword ptr [rdx + 56]
	seta	r11b
	vucomisd	xmm0, qword ptr [rdx + 64]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 72]
	seta	sil
	vucomisd	xmm0, qword ptr [rdx + 80]
	seta	dil
	vucomisd	xmm0, qword ptr [rdx + 88]
	seta	r9b
	vucomisd	xmm0, qword ptr [rdx + 96]
	seta	r10b
	vucomisd	xmm0, qword ptr [rdx + 104]
	seta	r12b
	vucomisd	xmm0, qword ptr [rdx + 112]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 120]
	seta	cl
	vucomisd	xmm0, qword ptr [rdx + 128]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 136]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 144]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 152]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 160]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 168]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 176]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 184]
	seta	r15b
	vucomisd	xmm0, qword ptr [rdx + 192]
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 200]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 208]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 216]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 224]
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 232]
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 240]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 248]
	seta	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	sil, sil
	add	sil, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, sil
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r13b
	mov	r8d, eax
	shl	r9b, 3
	or	r9b, dil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 256
	add	rsi, 4
	mov	qword ptr [rsp + 232], rsi      # 8-byte Spill
	add	qword ptr [rsp + 128], -1       # 8-byte Folded Spill
	jne	.LBB8_23
# %bb.24:
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
.LBB8_25:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB8_179
# %bb.26:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB8_133
# %bb.27:
	xor	edi, edi
	jmp	.LBB8_135
.LBB8_28:
	cmp	edi, 2
	je	.LBB8_92
# %bb.29:
	cmp	edi, 3
	jne	.LBB8_179
# %bb.30:
	mov	r14b, byte ptr [rsi]
	lea	r13, [r10 + 31]
	test	r10, r10
	cmovns	r13, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_128
# %bb.31:
	movsxd	rax, r9d
	mov	r15, r11
	.p2align	4, 0x90
.LBB8_32:                               # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setg	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_32
# %bb.33:
	add	r15, 1
	sar	r13, 5
	cmp	r10, 32
	jl	.LBB8_129
.LBB8_34:
	cmp	r13, 32
	mov	dword ptr [rsp + 4], r14d       # 4-byte Spill
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 360], r13      # 8-byte Spill
	jb	.LBB8_37
# %bb.35:
	mov	rax, r13
	shl	rax, 5
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB8_180
# %bb.36:
	lea	rax, [r15 + 4*r13]
	cmp	rdx, rax
	jae	.LBB8_180
.LBB8_37:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rdx
	mov	qword ptr [rsp + 352], r15      # 8-byte Spill
.LBB8_38:
	sub	r13, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 128], r13      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_39:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	r14b, byte ptr [r12]
	setg	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 1]
	setg	r10b
	cmp	r14b, byte ptr [r12 + 2]
	setg	bl
	cmp	r14b, byte ptr [r12 + 3]
	setg	r13b
	cmp	r14b, byte ptr [r12 + 4]
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 5]
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 6]
	setg	al
	cmp	r14b, byte ptr [r12 + 7]
	setg	r12b
	cmp	r14b, byte ptr [rcx + 8]
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 9]
	setg	sil
	cmp	r14b, byte ptr [rcx + 10]
	setg	dil
	cmp	r14b, byte ptr [rcx + 11]
	setg	r9b
	cmp	r14b, byte ptr [rcx + 12]
	setg	r11b
	cmp	r14b, byte ptr [rcx + 13]
	setg	r15b
	cmp	r14b, byte ptr [rcx + 14]
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 15]
	setg	r8b
	cmp	r14b, byte ptr [rcx + 16]
	setg	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 17]
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 18]
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 19]
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 20]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 21]
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 22]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 23]
	setg	r14b
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 24]
	setg	byte ptr [rsp + 232]            # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 25]
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 26]
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 27]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 28]
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 29]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 30]
	setg	byte ptr [rsp + 320]            # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 31]
	setg	dl
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 288]      # 1-byte Folded Reload
	shl	al, 6
	shl	r12b, 7
	or	r12b, al
	shl	bl, 2
	or	bl, r10b
	add	sil, sil
	add	sil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, bl
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r9b, 3
	or	r9b, dil
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r11b, 4
	or	r11b, r9b
	shl	r15b, 5
	or	r15b, r11b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r12b, bl
	or	r8b, r15b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 256]        # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, al
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	rsi, qword ptr [rsp + 352]      # 8-byte Reload
	mov	byte ptr [rsi], r12b
	movzx	edi, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r8b
	or	r14b, bl
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 232]        # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 4]       # 4-byte Reload
	mov	byte ptr [rsi + 3], dl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 352], rsi      # 8-byte Spill
	add	qword ptr [rsp + 128], -1       # 8-byte Folded Spill
	jne	.LBB8_39
# %bb.40:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r13, qword ptr [rsp + 360]      # 8-byte Reload
	jmp	.LBB8_130
.LBB8_41:
	cmp	edi, 7
	je	.LBB8_104
# %bb.42:
	cmp	edi, 8
	jne	.LBB8_179
# %bb.43:
	mov	r13, qword ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_47
# %bb.44:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_45:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rdx], r13
	lea	rdx, [rdx + 8]
	sbb	r9d, r9d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	r9b, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r9b
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_45
# %bb.46:
	add	r11, 1
.LBB8_47:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB8_118
# %bb.48:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_49:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	cmp	r13, qword ptr [rdx]
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 8]
	seta	dil
	cmp	r13, qword ptr [rdx + 16]
	seta	r14b
	cmp	r13, qword ptr [rdx + 24]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 32]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 40]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 48]
	seta	al
	cmp	r13, qword ptr [rdx + 56]
	seta	r11b
	cmp	r13, qword ptr [rdx + 64]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 72]
	seta	sil
	cmp	r13, qword ptr [rdx + 80]
	seta	r8b
	cmp	r13, qword ptr [rdx + 88]
	seta	r9b
	cmp	r13, qword ptr [rdx + 96]
	seta	r10b
	cmp	r13, qword ptr [rdx + 104]
	seta	r12b
	cmp	r13, qword ptr [rdx + 112]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 120]
	seta	cl
	cmp	r13, qword ptr [rdx + 128]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 136]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 144]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 152]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 160]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 168]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 176]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 184]
	seta	r15b
	cmp	r13, qword ptr [rdx + 192]
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 200]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 208]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 216]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 224]
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 232]
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 240]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 248]
	seta	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 72]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	edi, eax
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [r11 + 1], cl
	or	r15b, dil
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 256
	add	r11, 4
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB8_49
# %bb.50:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB8_119
	jmp	.LBB8_179
.LBB8_51:
	movzx	r13d, word ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_55
# %bb.52:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_53:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rdx], r13w
	lea	rdx, [rdx + 2]
	sbb	esi, esi
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_53
# %bb.54:
	add	r11, 1
.LBB8_55:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB8_121
# %bb.56:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_57:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	seta	al
	cmp	r13w, word ptr [rdx + 2]
	seta	dil
	cmp	r13w, word ptr [rdx + 4]
	seta	r14b
	cmp	r13w, word ptr [rdx + 6]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 8]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 10]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 12]
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 14]
	seta	r11b
	cmp	r13w, word ptr [rdx + 16]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 18]
	seta	sil
	cmp	r13w, word ptr [rdx + 20]
	seta	r8b
	cmp	r13w, word ptr [rdx + 22]
	seta	r9b
	cmp	r13w, word ptr [rdx + 24]
	seta	r10b
	cmp	r13w, word ptr [rdx + 26]
	seta	r12b
	cmp	r13w, word ptr [rdx + 28]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 30]
	seta	cl
	cmp	r13w, word ptr [rdx + 32]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 34]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 36]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 38]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 40]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 42]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 44]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 46]
	seta	r15b
	cmp	r13w, word ptr [rdx + 48]
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 50]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 52]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 54]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 56]
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 58]
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 60]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 62]
	seta	bl
	add	dil, dil
	or	dil, al
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 72]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 64
	add	rsi, 4
	mov	qword ptr [rsp + 232], rsi      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB8_57
# %bb.58:
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB8_122
	jmp	.LBB8_179
.LBB8_59:
	movzx	r13d, word ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_63
# %bb.60:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_61:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setg	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_61
# %bb.62:
	add	r11, 1
.LBB8_63:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB8_67
# %bb.64:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r14      # 8-byte Spill
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_65:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 2]
	setg	dil
	cmp	r13w, word ptr [rdx + 4]
	setg	r14b
	cmp	r13w, word ptr [rdx + 6]
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 8]
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 10]
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 12]
	setg	al
	cmp	r13w, word ptr [rdx + 14]
	setg	r11b
	cmp	r13w, word ptr [rdx + 16]
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 18]
	setg	sil
	cmp	r13w, word ptr [rdx + 20]
	setg	r8b
	cmp	r13w, word ptr [rdx + 22]
	setg	r9b
	cmp	r13w, word ptr [rdx + 24]
	setg	r10b
	cmp	r13w, word ptr [rdx + 26]
	setg	r12b
	cmp	r13w, word ptr [rdx + 28]
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 30]
	setg	cl
	cmp	r13w, word ptr [rdx + 32]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 34]
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 36]
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 38]
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 40]
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 42]
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 44]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 46]
	setg	r15b
	cmp	r13w, word ptr [rdx + 48]
	setg	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 50]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 52]
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 54]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 56]
	setg	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 58]
	setg	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 60]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 62]
	setg	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 72]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 64
	add	rsi, 4
	mov	qword ptr [rsp + 232], rsi      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB8_65
# %bb.66:
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
.LBB8_67:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB8_179
# %bb.68:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB8_137
# %bb.69:
	xor	edi, edi
	jmp	.LBB8_139
.LBB8_70:
	mov	r13, qword ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_74
# %bb.71:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_72:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setg	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_72
# %bb.73:
	add	r11, 1
.LBB8_74:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB8_78
# %bb.75:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r14      # 8-byte Spill
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_76:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 8]
	setg	dil
	cmp	r13, qword ptr [rdx + 16]
	setg	r14b
	cmp	r13, qword ptr [rdx + 24]
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 32]
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 40]
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 48]
	setg	al
	cmp	r13, qword ptr [rdx + 56]
	setg	r11b
	cmp	r13, qword ptr [rdx + 64]
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 72]
	setg	sil
	cmp	r13, qword ptr [rdx + 80]
	setg	r8b
	cmp	r13, qword ptr [rdx + 88]
	setg	r9b
	cmp	r13, qword ptr [rdx + 96]
	setg	r10b
	cmp	r13, qword ptr [rdx + 104]
	setg	r12b
	cmp	r13, qword ptr [rdx + 112]
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 120]
	setg	cl
	cmp	r13, qword ptr [rdx + 128]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 136]
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 144]
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 152]
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 160]
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 168]
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 176]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 184]
	setg	r15b
	cmp	r13, qword ptr [rdx + 192]
	setg	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 200]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 208]
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 216]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 224]
	setg	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 232]
	setg	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 240]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 248]
	setg	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 72]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 256
	add	rsi, 4
	mov	qword ptr [rsp + 232], rsi      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB8_76
# %bb.77:
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
.LBB8_78:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB8_179
# %bb.79:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB8_141
# %bb.80:
	xor	edi, edi
	jmp	.LBB8_143
.LBB8_81:
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB8_85
# %bb.82:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_83:                               # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	seta	bl
	add	rdx, 4
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_83
# %bb.84:
	add	r11, 1
.LBB8_85:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB8_89
# %bb.86:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_87:                               # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 4]
	seta	r8b
	vucomiss	xmm0, dword ptr [rdx + 8]
	seta	r14b
	vucomiss	xmm0, dword ptr [rdx + 12]
	seta	r13b
	vucomiss	xmm0, dword ptr [rdx + 16]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 20]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 24]
	seta	al
	vucomiss	xmm0, dword ptr [rdx + 28]
	seta	r11b
	vucomiss	xmm0, dword ptr [rdx + 32]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 36]
	seta	sil
	vucomiss	xmm0, dword ptr [rdx + 40]
	seta	dil
	vucomiss	xmm0, dword ptr [rdx + 44]
	seta	r9b
	vucomiss	xmm0, dword ptr [rdx + 48]
	seta	r10b
	vucomiss	xmm0, dword ptr [rdx + 52]
	seta	r12b
	vucomiss	xmm0, dword ptr [rdx + 56]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 60]
	seta	cl
	vucomiss	xmm0, dword ptr [rdx + 64]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 68]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 72]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 76]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 80]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 84]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 88]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 92]
	seta	r15b
	vucomiss	xmm0, dword ptr [rdx + 96]
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 100]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 104]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 108]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 112]
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 116]
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 120]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 124]
	seta	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	sil, sil
	add	sil, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, sil
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r13b
	mov	r8d, eax
	shl	r9b, 3
	or	r9b, dil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 128
	add	rsi, 4
	mov	qword ptr [rsp + 232], rsi      # 8-byte Spill
	add	qword ptr [rsp + 128], -1       # 8-byte Folded Spill
	jne	.LBB8_87
# %bb.88:
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
.LBB8_89:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB8_179
# %bb.90:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB8_145
# %bb.91:
	xor	edi, edi
	jmp	.LBB8_147
.LBB8_92:
	mov	r14b, byte ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_96
# %bb.93:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_94:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rdx], r14b
	lea	rdx, [rdx + 1]
	sbb	esi, esi
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	sil, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_94
# %bb.95:
	add	r11, 1
.LBB8_96:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB8_124
# %bb.97:
	cmp	r15, 32
	mov	dword ptr [rsp + 4], r14d       # 4-byte Spill
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 368], r15      # 8-byte Spill
	jb	.LBB8_100
# %bb.98:
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	cmp	r11, rax
	jae	.LBB8_183
# %bb.99:
	lea	rax, [r11 + 4*r15]
	cmp	rdx, rax
	jae	.LBB8_183
.LBB8_100:
	xor	eax, eax
	mov	qword ptr [rsp + 360], rax      # 8-byte Spill
	mov	r12, rdx
	mov	qword ptr [rsp + 352], r11      # 8-byte Spill
.LBB8_101:
	sub	r15, qword ptr [rsp + 360]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 128], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_102:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	r14b, byte ptr [r12]
	seta	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 1]
	seta	r10b
	cmp	r14b, byte ptr [r12 + 2]
	seta	bl
	cmp	r14b, byte ptr [r12 + 3]
	seta	r13b
	cmp	r14b, byte ptr [r12 + 4]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 5]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [r12 + 6]
	seta	al
	cmp	r14b, byte ptr [r12 + 7]
	seta	r12b
	cmp	r14b, byte ptr [rcx + 8]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 9]
	seta	sil
	cmp	r14b, byte ptr [rcx + 10]
	seta	dil
	cmp	r14b, byte ptr [rcx + 11]
	seta	r9b
	cmp	r14b, byte ptr [rcx + 12]
	seta	r11b
	cmp	r14b, byte ptr [rcx + 13]
	seta	r15b
	cmp	r14b, byte ptr [rcx + 14]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 15]
	seta	r8b
	cmp	r14b, byte ptr [rcx + 16]
	seta	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 17]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 18]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 19]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 20]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 21]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 22]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rcx + 23]
	seta	r14b
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 24]
	seta	byte ptr [rsp + 232]            # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 25]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 26]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 27]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 28]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 29]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 30]
	seta	byte ptr [rsp + 288]            # 1-byte Folded Spill
	mov	edx, dword ptr [rsp + 4]        # 4-byte Reload
	cmp	dl, byte ptr [rcx + 31]
	seta	dl
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 320]      # 1-byte Folded Reload
	shl	al, 6
	shl	r12b, 7
	or	r12b, al
	shl	bl, 2
	or	bl, r10b
	add	sil, sil
	add	sil, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, bl
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r9b, 3
	or	r9b, dil
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r11b, 4
	or	r11b, r9b
	shl	r15b, 5
	or	r15b, r11b
	movzx	esi, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r12b, bl
	or	r8b, r15b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 256]        # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, al
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	rsi, qword ptr [rsp + 352]      # 8-byte Reload
	mov	byte ptr [rsi], r12b
	movzx	edi, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r8b
	or	r14b, bl
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 232]        # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 4]       # 4-byte Reload
	mov	byte ptr [rsi + 3], dl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 352], rsi      # 8-byte Spill
	add	qword ptr [rsp + 128], -1       # 8-byte Folded Spill
	jne	.LBB8_102
# %bb.103:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 368]      # 8-byte Reload
	jmp	.LBB8_125
.LBB8_104:
	mov	r13d, dword ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_108
# %bb.105:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_106:                              # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setg	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r11 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_106
# %bb.107:
	add	r11, 1
.LBB8_108:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB8_112
# %bb.109:
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	mov	qword ptr [rsp + 144], r14      # 8-byte Spill
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_110:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	cmp	r13d, dword ptr [rdx]
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 4]
	setg	dil
	cmp	r13d, dword ptr [rdx + 8]
	setg	r14b
	cmp	r13d, dword ptr [rdx + 12]
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 16]
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 20]
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 24]
	setg	al
	cmp	r13d, dword ptr [rdx + 28]
	setg	r11b
	cmp	r13d, dword ptr [rdx + 32]
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 36]
	setg	sil
	cmp	r13d, dword ptr [rdx + 40]
	setg	r8b
	cmp	r13d, dword ptr [rdx + 44]
	setg	r9b
	cmp	r13d, dword ptr [rdx + 48]
	setg	r10b
	cmp	r13d, dword ptr [rdx + 52]
	setg	r12b
	cmp	r13d, dword ptr [rdx + 56]
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 60]
	setg	cl
	cmp	r13d, dword ptr [rdx + 64]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 68]
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 72]
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 76]
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 80]
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 84]
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 88]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 92]
	setg	r15b
	cmp	r13d, dword ptr [rdx + 96]
	setg	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 100]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 104]
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 108]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 112]
	setg	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 116]
	setg	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 120]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 124]
	setg	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 72]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	esi, eax
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [r11 + 1], cl
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 320]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], bl
	add	rdx, 128
	add	r11, 4
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB8_110
# %bb.111:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
.LBB8_112:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB8_179
# %bb.113:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB8_150
# %bb.114:
	xor	edi, edi
	jmp	.LBB8_152
.LBB8_115:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB8_179
.LBB8_116:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB8_156
# %bb.117:
	xor	r11d, r11d
	jmp	.LBB8_158
.LBB8_118:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB8_179
.LBB8_119:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB8_160
# %bb.120:
	xor	r11d, r11d
	jmp	.LBB8_162
.LBB8_121:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB8_179
.LBB8_122:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB8_164
# %bb.123:
	xor	r11d, r11d
	jmp	.LBB8_166
.LBB8_124:
	mov	qword ptr [rsp + 352], r11      # 8-byte Spill
	mov	r12, rdx
.LBB8_125:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB8_179
# %bb.126:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB8_169
# %bb.127:
	xor	eax, eax
	jmp	.LBB8_172
.LBB8_128:
	mov	r15, r11
	sar	r13, 5
	cmp	r10, 32
	jge	.LBB8_34
.LBB8_129:
	mov	qword ptr [rsp + 352], r15      # 8-byte Spill
	mov	r12, rdx
.LBB8_130:
	shl	r13, 5
	cmp	r13, r10
	jge	.LBB8_179
# %bb.131:
	mov	r8, r10
	sub	r8, r13
	not	r13
	add	r13, r10
	jne	.LBB8_174
# %bb.132:
	xor	esi, esi
	jmp	.LBB8_177
.LBB8_133:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r14, r11
	.p2align	4, 0x90
.LBB8_134:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	seta	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rsi], bl
	add	rdi, 2
	vucomisd	xmm0, qword ptr [rdx + 8]
	seta	r9b
	add	rdx, 16
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r14 + rsi], al
	cmp	r10, rdi
	jne	.LBB8_134
.LBB8_135:
	test	r8b, 1
	je	.LBB8_179
# %bb.136:
	vucomisd	xmm0, qword ptr [rdx]
	jmp	.LBB8_149
.LBB8_137:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r14, r11
	.p2align	4, 0x90
.LBB8_138:                              # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	setg	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rsi], bl
	add	rdi, 2
	cmp	r13w, word ptr [rdx + 2]
	lea	rdx, [rdx + 4]
	setg	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r14 + rsi], al
	cmp	r10, rdi
	jne	.LBB8_138
.LBB8_139:
	test	r8b, 1
	je	.LBB8_179
# %bb.140:
	cmp	r13w, word ptr [rdx]
	jmp	.LBB8_154
.LBB8_141:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r14, r11
	.p2align	4, 0x90
.LBB8_142:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	setg	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rsi], bl
	add	rdi, 2
	cmp	r13, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	setg	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r14 + rsi], al
	cmp	r10, rdi
	jne	.LBB8_142
.LBB8_143:
	test	r8b, 1
	je	.LBB8_179
# %bb.144:
	cmp	r13, qword ptr [rdx]
	jmp	.LBB8_154
.LBB8_145:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r14, r11
	.p2align	4, 0x90
.LBB8_146:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	seta	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rsi], bl
	add	rdi, 2
	vucomiss	xmm0, dword ptr [rdx + 4]
	seta	r9b
	add	rdx, 8
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r14 + rsi], al
	cmp	r10, rdi
	jne	.LBB8_146
.LBB8_147:
	test	r8b, 1
	je	.LBB8_179
# %bb.148:
	vucomiss	xmm0, dword ptr [rdx]
.LBB8_149:
	seta	al
	jmp	.LBB8_155
.LBB8_150:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r14, r11
	.p2align	4, 0x90
.LBB8_151:                              # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	setg	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rsi], bl
	add	rdi, 2
	cmp	r13d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	setg	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r14 + rsi], al
	cmp	r10, rdi
	jne	.LBB8_151
.LBB8_152:
	test	r8b, 1
	je	.LBB8_179
# %bb.153:
	cmp	r13d, dword ptr [rdx]
.LBB8_154:
	setg	al
.LBB8_155:
	neg	al
	mov	rdx, rdi
	shr	rdx, 3
	mov	sil, byte ptr [r11 + rdx]
	and	dil, 7
	mov	bl, 1
	mov	ecx, edi
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r11 + rdx], bl
	jmp	.LBB8_179
.LBB8_156:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB8_157:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rdx], r13d
	sbb	edi, edi
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	dword ptr [rdx + 4], r13d
	lea	rdx, [rdx + 8]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB8_157
.LBB8_158:
	test	r8b, 1
	je	.LBB8_179
# %bb.159:
	cmp	dword ptr [rdx], r13d
	jmp	.LBB8_168
.LBB8_160:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB8_161:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rdx], r13
	sbb	edi, edi
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	qword ptr [rdx + 8], r13
	lea	rdx, [rdx + 16]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB8_161
.LBB8_162:
	test	r8b, 1
	je	.LBB8_179
# %bb.163:
	cmp	qword ptr [rdx], r13
	jmp	.LBB8_168
.LBB8_164:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB8_165:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rdx], r13w
	sbb	edi, edi
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	word ptr [rdx + 2], r13w
	lea	rdx, [rdx + 4]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB8_165
.LBB8_166:
	test	r8b, 1
	je	.LBB8_179
# %bb.167:
	cmp	word ptr [rdx], r13w
.LBB8_168:
	sbb	eax, eax
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
	jmp	.LBB8_179
.LBB8_169:
	mov	r9, r8
	and	r9, -2
	xor	eax, eax
	mov	r10, qword ptr [rsp + 352]      # 8-byte Reload
	.p2align	4, 0x90
.LBB8_170:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r12 + rax], r14b
	sbb	esi, esi
	mov	rdi, rax
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	ebx, byte ptr [r10 + rdi]
	xor	sil, bl
	and	dl, sil
	xor	dl, bl
	mov	byte ptr [r10 + rdi], dl
	cmp	byte ptr [r12 + rax + 1], r14b
	lea	rax, [rax + 2]
	sbb	esi, esi
	xor	sil, dl
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, sil
	xor	bl, dl
	mov	byte ptr [r10 + rdi], bl
	cmp	r9, rax
	jne	.LBB8_170
# %bb.171:
	add	r12, rax
.LBB8_172:
	test	r8b, 1
	je	.LBB8_179
# %bb.173:
	cmp	byte ptr [r12], r14b
	sbb	edx, edx
	mov	rsi, rax
	shr	rsi, 3
	mov	r8, qword ptr [rsp + 352]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rsi]
	and	al, 7
	mov	bl, 1
	mov	ecx, eax
	shl	bl, cl
	xor	dl, dil
	and	bl, dl
	xor	bl, dil
	mov	byte ptr [r8 + rsi], bl
	jmp	.LBB8_179
.LBB8_174:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 352]      # 8-byte Reload
	.p2align	4, 0x90
.LBB8_175:                              # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [r12 + rsi]
	setg	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	r14b, byte ptr [r12 + rsi + 1]
	lea	rsi, [rsi + 2]
	setg	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB8_175
# %bb.176:
	add	r12, rsi
.LBB8_177:
	test	r8b, 1
	je	.LBB8_179
# %bb.178:
	cmp	r14b, byte ptr [r12]
	setg	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 352]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
.LBB8_179:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB8_180:
	and	r13, -32
	mov	rax, r13
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 368], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r13      # 8-byte Spill
	lea	rax, [r15 + 4*r13]
	mov	qword ptr [rsp + 352], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 232], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_181:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 240], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rdx + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rdx + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rdx + rcx + 1]
	mov	rsi, rcx
	vmovd	xmm4, eax
	mov	rcx, rbx
	movzx	eax, byte ptr [rdx + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rdx + rsi + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 544], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rsi + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rdx + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rdx + rsi + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 4]
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rdx + rsi + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rdx + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rdx + rsi + 6]
	mov	qword ptr [rsp + 216], rsi      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rdx + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rdx + rsi + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rdx + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 256], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 544
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	or	rbx, 576
	mov	qword ptr [rsp + 144], rbx      # 8-byte Spill
	mov	rax, rcx
	or	rax, 608
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	r12, rcx
	or	r12, 640
	mov	r14, rcx
	or	r14, 672
	mov	qword ptr [rsp + 24], r14       # 8-byte Spill
	mov	r10, rcx
	or	r10, 704
	mov	qword ptr [rsp + 104], r10      # 8-byte Spill
	mov	rdi, rcx
	or	rdi, 736
	mov	qword ptr [rsp + 176], rdi      # 8-byte Spill
	mov	rax, rcx
	or	rax, 768
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	r15, rcx
	or	r15, 800
	mov	qword ptr [rsp + 112], r15      # 8-byte Spill
	mov	r11, rcx
	or	r11, 832
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	r9, rcx
	or	r9, 864
	mov	qword ptr [rsp + 72], r9        # 8-byte Spill
	mov	r8, rcx
	or	r8, 896
	mov	qword ptr [rsp + 168], r8       # 8-byte Spill
	mov	rsi, rcx
	or	rsi, 928
	mov	qword ptr [rsp + 200], rsi      # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 224], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 152], rcx      # 8-byte Spill
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm9, xmm0, byte ptr [rdx + r13], 1
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rbx], 2
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12], 4
	mov	r13, r12
	mov	qword ptr [rsp + 160], r12      # 8-byte Spill
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx], 15
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14], 1
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11], 2
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12], 3
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8], 4
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9], 5
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10], 6
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15], 7
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 9
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 10
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx], 11
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 13
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 14
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 15
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 1
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 2
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 4
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 5
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 6
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 8
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 11
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 12
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 1], 14
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r14 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 1], 2
	mov	rdi, r11
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 11
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 14
	vinserti128	ymm15, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 1], 15
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 8]
	vmovd	xmm9, esi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1248], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 8]
	vmovd	xmm10, esi
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 544]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 2], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 2], 2
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 2], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 4
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 5
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 7
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 2], 8
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 2], 9
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 2], 10
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 2], 11
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 2], 12
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 2], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 2
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 3
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 4
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 5
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 6
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 7
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 9
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 10
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 11
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 13
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 14
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rdx + r8 + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 3], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 4
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 3], 5
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 3], 6
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 3], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 10
	mov	r8, r9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 3], 13
	mov	r12, r15
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 3], 14
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rdx + rax + 3], 1
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 3], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 3
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 4
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 3], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 9
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 10
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 11
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 3], 14
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 9]
	vmovd	xmm8, esi
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 9]
	vmovd	xmm11, esi
	vmovdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 1
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 4], 3
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 4], 4
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 5
	mov	r15, rdi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 4], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 4], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 4], 8
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 4], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 4], 10
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 4], 11
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 4], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 4], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 4], 15
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm13, byte ptr [rdx + rsi + 4], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 4], 2
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 4], 3
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 4], 4
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 4], 5
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 6
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 7
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 9
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 10
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 11
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 13
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 4], 14
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 15
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm14, byte ptr [rdx + r10 + 5], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 2
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 5], 6
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 5], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 9
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 5], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 5], 11
	mov	r8, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 5], 12
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rdx + rax + 5], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 5], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 5], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 5], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 7
	mov	r12, rbx
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 5], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 9
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 11
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 5], 15
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 10]
	vmovd	xmm3, esi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 10]
	vmovd	xmm4, esi
	vpinsrb	xmm0, xmm12, byte ptr [rdx + r10 + 6], 1
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 6], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 4
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 6], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 6], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 6], 12
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 15
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + r10 + 6], 1
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 6], 2
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 3
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 4
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 5
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 6], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 8
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 6], 9
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 6], 10
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 11
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 12
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 6], 13
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 6], 14
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 6], 15
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 7], 2
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 4
	mov	r14, rax
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 5
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 12
	mov	rbx, r8
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 14
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 7], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 7], 2
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 3
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 5
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 6
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 7
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 7], 9
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 7], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 7], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rcx + 7], 14
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 11]
	vmovd	xmm1, esi
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 11]
	vmovd	xmm2, esi
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rcx + 8], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 2
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 8], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 8], 4
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 5
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 6
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 8], 8
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 8], 9
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 8], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 8], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 8], 14
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 8], 15
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r11 + 8], 1
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 2
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 3
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 4
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 5
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 8], 6
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 8], 7
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 9
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 10
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 11
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 12
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 13
	mov	r14, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 14
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 15
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rdx + rbx + 9], 1
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r13 + 9], 3
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 5
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 9], 6
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 7
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 9], 8
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 9
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 9], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 11
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 9], 12
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 9], 13
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 9], 14
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 9], 15
	vpinsrb	xmm7, xmm11, byte ptr [rdx + r11 + 9], 1
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 9], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 9], 4
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 9], 6
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r12 + 9], 7
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 9], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 9
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 10
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r12 + 9], 11
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + r14 + 9], 15
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 12]
	vmovd	xmm0, esi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 12]
	vmovd	xmm5, esi
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 1
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 10], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 3
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 4
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 7
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 10
	mov	rcx, rbx
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 10], 11
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 10], 12
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 15
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 10], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 10], 2
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 10], 3
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 4
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 5
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 10], 6
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 8
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 9
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 10], 11
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 13
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 10], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 10], 15
	mov	r12, r14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 11], 2
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 11], 4
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 5
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 11], 8
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 11], 12
	mov	r8, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 11], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 14
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 15
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 1
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 11], 3
	mov	r14, rsi
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 4
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 11], 6
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 7
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 11], 9
	mov	r15, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 11], 10
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 11
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm3  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 14
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 13]
	vmovd	xmm3, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm1  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 13]
	vmovd	xmm1, esi
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 12], 3
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 12], 4
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 12], 5
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 12], 6
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 12], 7
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 12], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 12], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 12], 11
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 12], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 12], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 12], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 12], 15
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rdx + r8 + 12], 1
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 3
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 4
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 5
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 6
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 7
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 12], 10
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 11
	mov	r13, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 12], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 13
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 12], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 12], 15
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 2
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 13], 4
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 13], 5
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 13], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 13], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 13], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 13], 12
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 13], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 13], 14
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 13], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 2
	mov	r8, rsi
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 4
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 13], 5
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 6
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 7
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 8
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 13], 10
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 13], 11
	mov	r14, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 12
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm0  # 32-byte Spill
	vpinsrb	xmm0, xmm1, byte ptr [rdx + r12 + 13], 15
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 14]
	vmovd	xmm1, esi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 14]
	vmovd	xmm0, esi
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 1
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 2
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 5
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 14], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 10
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 14], 11
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 12
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 14
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 15
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 14], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 14], 2
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 14], 3
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 14], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 14], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 14], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 7
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 14], 8
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 14], 9
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 14], 11
	mov	rdi, r14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 14], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 14], 13
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 14
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 14], 15
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 15]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 1
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 2
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 4
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 5
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 15], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 8
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 9
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 15], 11
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 15], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 15], 15
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 15]
	vmovd	xmm3, esi
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 1
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 15], 3
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 4
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 15], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 6
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 15], 9
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 15], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 15], 13
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 15
	mov	r12, r14
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 16]
	vmovd	xmm0, esi
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 1
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 16], 2
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 16], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 4
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 5
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 11
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 12
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 16], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 16], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 16], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 16]
	vmovd	xmm1, esi
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 1
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 2
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 16], 5
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 6
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 7
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 16], 9
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 16], 10
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 11
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 16], 14
	mov	r13, r12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 16], 15
	mov	rcx, r15
	movzx	esi, byte ptr [rdx + r15 + 17]
	vmovd	xmm2, esi
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 17], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 17], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 4
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 5
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 17], 6
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 7
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 17], 8
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 17], 9
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 17], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 11
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 17], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 17], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 17], 15
	movzx	esi, byte ptr [rdx + rax + 17]
	vmovd	xmm3, esi
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 17], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 3
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 4
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 6
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 7
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 8
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 17], 10
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 11
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 12
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 13
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r13 + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	movzx	esi, byte ptr [rdx + rcx + 18]
	vmovd	xmm0, esi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 18], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 2
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 18], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 4
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 18], 6
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 18], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 18], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 18], 10
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 18], 11
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 18], 12
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 18], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 18], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 18], 15
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 18]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 18], 1
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 18], 2
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 18], 3
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 4
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 5
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 18], 6
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 9
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 10
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 18], 11
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 15
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 19]
	vmovd	xmm2, esi
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 1
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 19], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 19], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 5
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 6
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 19], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 19], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 19], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 19], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 19], 14
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 19], 15
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 19]
	vmovd	xmm3, esi
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 19], 2
	mov	r8, r12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 19], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 4
	mov	r11, rdi
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 19], 6
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 7
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 8
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 9
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 19], 11
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 12
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 13
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 14
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 20]
	vmovd	xmm0, esi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 1
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 4
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 5
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 20], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 11
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 12
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 20], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 20], 15
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rbx + 20]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 20], 1
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 20], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 20], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 20], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 20], 5
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 20], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 9
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 10
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 20], 11
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 13
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 20], 14
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 15
	movzx	esi, byte ptr [rdx + r15 + 21]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 1
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 21], 2
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 21], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 4
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 5
	mov	r15, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 21], 6
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 8
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 9
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 11
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 12
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 15
	movzx	esi, byte ptr [rdx + rbx + 21]
	vmovd	xmm3, esi
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 21], 2
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 3
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 4
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 21], 6
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 21], 7
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 8
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 21], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r9 + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 22]
	vmovd	xmm0, esi
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 22], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 22], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 22], 3
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 22], 4
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 22], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 22], 6
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 22], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 22], 9
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 22], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 22], 11
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 22], 12
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 22], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 22], 14
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 22], 15
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 22]
	vmovd	xmm1, esi
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 22], 2
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 3
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 4
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 5
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 22], 7
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 9
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 10
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 22], 11
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 12
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 13
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 14
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 22], 15
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 23]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 23], 1
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 23], 2
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 23], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 23], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 23], 5
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 23], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 23], 7
	mov	r12, rbx
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 23], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 23], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 11
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 12
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 23], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 23], 15
	mov	r8, qword ptr [rsp + 224]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r8 + 23]
	vmovd	xmm3, esi
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 23], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 23], 2
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 23], 3
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 23], 4
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 5
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 23], 7
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 8
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 9
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 23], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 13
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 24]
	vmovd	xmm0, esi
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 24], 1
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 2
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 4
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 24], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 24], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 8
	mov	r12, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 24], 9
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 11
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 12
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 24], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 15
	movzx	esi, byte ptr [rdx + r8 + 24]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 1
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 24], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 24], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 24], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 24], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 7
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 8
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 9
	mov	r15, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 24], 10
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 11
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 12
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 13
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 14
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 15
	movzx	esi, byte ptr [rdx + rcx + 25]
	vmovd	xmm2, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 25], 1
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 25], 2
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 25], 3
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 25], 4
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 5
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 25], 6
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 25], 7
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 25], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 25], 9
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 25], 10
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 25], 11
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 25], 12
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 25], 14
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 25], 15
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 25]
	vmovd	xmm3, esi
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 25], 2
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 3
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 4
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 5
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 6
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 25], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 25], 10
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 25], 11
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 25], 14
	vinserti128	ymm9, ymm1, xmm0, 1
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rax + 25], 15
	vinserti128	ymm8, ymm0, xmm2, 1
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 26]
	vmovd	xmm0, esi
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 26], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 26], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 26], 4
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 6
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 26], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 26], 11
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 26], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 26], 13
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 26], 14
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 26], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 26]
	vmovd	xmm1, esi
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 26], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 2
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 3
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 4
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 5
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 26], 6
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 7
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 8
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 26], 9
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 26], 11
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 12
	mov	r9, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 26], 13
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 14
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 15
	movzx	esi, byte ptr [rdx + r15 + 27]
	vmovd	xmm2, esi
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 27], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 27], 2
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 4
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 5
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 6
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 8
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 9
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 27], 12
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 27], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 27], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 27], 15
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r12 + 27]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 27], 1
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 27], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 3
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 27], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 7
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 27], 9
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 10
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 11
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 27], 13
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 14
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 28]
	vmovd	xmm0, esi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 28], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 28], 2
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 4
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 28], 5
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 6
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 28], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 9
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 28], 10
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 28], 11
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 28], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 28], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 15
	movzx	esi, byte ptr [rdx + r12 + 28]
	vmovd	xmm1, esi
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 28], 1
	mov	rdi, r11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 28], 2
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 3
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 28], 4
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 28], 5
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 6
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 9
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 10
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 28], 11
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 12
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 13
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 14
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 15
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 29]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 29], 1
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 29], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 29], 3
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 29], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 29], 5
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 29], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 29], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 29], 8
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 29], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 29], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 29], 11
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 29], 12
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 29], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 29], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 29], 15
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r13 + 29]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 29], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 2
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 29], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 29], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 29], 5
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 29], 6
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 29], 7
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 29], 9
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 29], 11
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 29], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 29], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm3, byte ptr [rdx + rax + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm4, byte ptr [rdx + rax + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 30]
	vmovd	xmm0, esi
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 1
	movzx	esi, byte ptr [rdx + r15 + 31]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 1
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 4
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 5
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 6
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 31], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 31], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 14
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rdx + rax + 31], 15
	movzx	eax, byte ptr [rdx + r13 + 30]
	vmovd	xmm1, eax
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 30], 1
	movzx	eax, byte ptr [rdx + r13 + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r8 + 31], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r12 + 31], 3
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 4
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 31], 7
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 31], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 31], 13
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 256], ymm0   # 32-byte Spill
	vmovdqa	ymm0, ymmword ptr [rsp + 576]   # 32-byte Reload
	vpcmpgtb	ymm2, ymm0, ymmword ptr [rsp + 1248] # 32-byte Folded Reload
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI8_0] # ymm1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	vpand	ymm7, ymm2, ymm1
	vpsubb	ymm11, ymm7, ymm2
	vpcmpgtb	ymm7, ymm0, ymm15
	vpand	ymm7, ymm7, ymm1
	vpcmpgtb	ymm12, ymm0, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI8_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpand	ymm12, ymm12, ymm6
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpgtb	ymm7, ymm0, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm2, ymmword ptr [rip + .LCPI8_2] # ymm2 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpand	ymm7, ymm7, ymm2
	vpcmpgtb	ymm12, ymm0, ymm14
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI8_3] # ymm4 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpand	ymm12, ymm12, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpgtb	ymm12, ymm0, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI8_4] # ymm13 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpand	ymm12, ymm12, ymm13
	vmovdqa	ymm14, ymm13
	vpor	ymm7, ymm12, ymm7
	vpor	ymm11, ymm11, ymm7
	vpcmpgtb	ymm7, ymm0, ymmword ptr [rsp + 512] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI8_5] # ymm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpand	ymm7, ymm7, ymm5
	vpcmpgtb	ymm12, ymm0, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vmovdqa	ymm15, ymmword ptr [rip + .LCPI8_6] # ymm15 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm12, ymm12, ymm15
	vpor	ymm7, ymm12, ymm7
	vpor	ymm13, ymm11, ymm7
	vpcmpgtb	ymm7, ymm0, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpand	ymm12, ymm7, ymm1
	vpsubb	ymm7, ymm12, ymm7
	vpcmpgtb	ymm12, ymm0, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm1
	vpcmpgtb	ymm11, ymm0, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm6
	vpor	ymm11, ymm12, ymm11
	vpor	ymm7, ymm11, ymm7
	vpcmpgtb	ymm11, ymm0, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpgtb	ymm12, ymm0, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm4
	vpor	ymm11, ymm11, ymm12
	vpcmpgtb	ymm12, ymm0, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpand	ymm12, ymm12, ymm14
	vmovdqa	ymm3, ymm14
	vpor	ymm11, ymm11, ymm12
	vpor	ymm7, ymm11, ymm7
	vpcmpgtb	ymm11, ymm0, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm5
	vpcmpgtb	ymm12, ymm0, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpsllw	ymm12, ymm12, 7
	vpand	ymm12, ymm12, ymm15
	vpor	ymm11, ymm11, ymm12
	vpor	ymm12, ymm11, ymm7
	vpcmpgtb	ymm7, ymm0, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpand	ymm11, ymm7, ymm1
	vpsubb	ymm7, ymm11, ymm7
	vpcmpgtb	ymm11, ymm0, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm1
	vpcmpgtb	ymm14, ymm0, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm6
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpgtb	ymm11, ymm0, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpand	ymm11, ymm11, ymm2
	vpcmpgtb	ymm14, ymm0, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm4
	vpor	ymm11, ymm11, ymm14
	vpcmpgtb	ymm14, ymm0, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpand	ymm14, ymm14, ymm3
	vpor	ymm11, ymm11, ymm14
	vpor	ymm7, ymm11, ymm7
	vpcmpgtb	ymm10, ymm0, ymm10
	vmovdqa	ymm14, ymm5
	vpand	ymm10, ymm10, ymm5
	vpcmpgtb	ymm11, ymm0, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpsllw	ymm11, ymm11, 7
	vpand	ymm11, ymm11, ymm15
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpgtb	ymm8, ymm0, ymm8
	vpand	ymm10, ymm8, ymm1
	vpsubb	ymm8, ymm10, ymm8
	vpcmpgtb	ymm9, ymm0, ymm9
	vpand	ymm9, ymm9, ymm1
	vpcmpgtb	ymm5, ymm0, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpand	ymm5, ymm5, ymm6
	vpor	ymm5, ymm9, ymm5
	vpor	ymm5, ymm8, ymm5
	vpcmpgtb	ymm6, ymm0, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpand	ymm6, ymm6, ymm2
	vpcmpgtb	ymm3, ymm0, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpand	ymm3, ymm3, ymm4
	vpor	ymm3, ymm6, ymm3
	vpcmpgtb	ymm4, ymm0, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpand	ymm4, ymm4, ymmword ptr [rip + .LCPI8_4]
	vpor	ymm3, ymm3, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpgtb	ymm1, ymm0, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpand	ymm1, ymm14, ymm1
	vpcmpgtb	ymm2, ymm0, ymmword ptr [rsp + 256] # 32-byte Folded Reload
	vpsllw	ymm2, ymm2, 7
	vpand	ymm2, ymm15, ymm2
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm13, ymm12      # ymm2 = ymm13[0],ymm12[0],ymm13[1],ymm12[1],ymm13[2],ymm12[2],ymm13[3],ymm12[3],ymm13[4],ymm12[4],ymm13[5],ymm12[5],ymm13[6],ymm12[6],ymm13[7],ymm12[7],ymm13[16],ymm12[16],ymm13[17],ymm12[17],ymm13[18],ymm12[18],ymm13[19],ymm12[19],ymm13[20],ymm12[20],ymm13[21],ymm12[21],ymm13[22],ymm12[22],ymm13[23],ymm12[23]
	vpunpckhbw	ymm0, ymm13, ymm12      # ymm0 = ymm13[8],ymm12[8],ymm13[9],ymm12[9],ymm13[10],ymm12[10],ymm13[11],ymm12[11],ymm13[12],ymm12[12],ymm13[13],ymm12[13],ymm13[14],ymm12[14],ymm13[15],ymm12[15],ymm13[24],ymm12[24],ymm13[25],ymm12[25],ymm13[26],ymm12[26],ymm13[27],ymm12[27],ymm13[28],ymm12[28],ymm13[29],ymm12[29],ymm13[30],ymm12[30],ymm13[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 376]      # 8-byte Reload
	vmovdqu	ymmword ptr [r15 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r15 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r15 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r15 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB8_181
# %bb.182:
	mov	r13, qword ptr [rsp + 360]      # 8-byte Reload
	cmp	r13, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 4]       # 4-byte Reload
	mov	r12, qword ptr [rsp + 368]      # 8-byte Reload
	jne	.LBB8_38
	jmp	.LBB8_130
.LBB8_183:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 504], rax      # 8-byte Spill
	mov	qword ptr [rsp + 360], r15      # 8-byte Spill
	lea	rax, [r11 + 4*r15]
	mov	qword ptr [rsp + 352], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	xor	eax, eax
	mov	qword ptr [rsp + 232], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_184:                              # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 176], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 168], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rdx + rax]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rdx + rbx]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rdx + rcx + 1]
	mov	rdi, rcx
	vmovd	xmm5, eax
	mov	rcx, rbx
	movzx	eax, byte ptr [rdx + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rdx + rdi + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 416], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rdi + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rdx + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rdx + rdi + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 512], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rdx + rdi + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rdx + rbx + 5]
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rdx + rdi + 6]
	mov	qword ptr [rsp + 200], rdi      # 8-byte Spill
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rdx + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rdx + rdi + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rdx + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 544
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 576
	mov	rbx, rax
	mov	qword ptr [rsp + 240], rax      # 8-byte Spill
	mov	rax, rcx
	or	rax, 608
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rcx
	or	rax, 640
	mov	r14, rax
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	r9, rcx
	or	r9, 672
	mov	qword ptr [rsp + 40], r9        # 8-byte Spill
	mov	rax, rcx
	or	rax, 704
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rcx
	or	rax, 736
	mov	rdi, rax
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	mov	rax, rcx
	or	rax, 768
	mov	r13, rax
	mov	qword ptr [rsp + 256], rax      # 8-byte Spill
	mov	r11, rcx
	or	r11, 800
	mov	qword ptr [rsp + 120], r11      # 8-byte Spill
	mov	r10, rcx
	or	r10, 832
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	mov	r8, rcx
	or	r8, 864
	mov	qword ptr [rsp + 216], r8       # 8-byte Spill
	mov	r15, rcx
	or	r15, 896
	mov	qword ptr [rsp + 88], r15       # 8-byte Spill
	mov	rsi, rcx
	or	rsi, 928
	mov	qword ptr [rsp + 136], rsi      # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 224], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 56], rcx       # 8-byte Spill
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm9, xmm3, byte ptr [rdx + r12], 1
	vpinsrb	xmm3, xmm9, byte ptr [rdx + rbx], 2
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9], 5
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx], 15
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14], 1
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10], 2
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11], 3
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12], 4
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8], 5
	mov	r9, qword ptr [rsp + 8]         # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9], 6
	mov	r15, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15], 7
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax], 9
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx], 10
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi], 13
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi], 14
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi], 15
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 1
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 2
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 3
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 1], 4
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 5
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 6
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 7
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 8
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 1], 9
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 1], 10
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 11
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 12
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 13
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 14
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 15
	vpinsrb	xmm6, xmm10, byte ptr [rdx + r14 + 1], 1
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 1], 2
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r11 + 1], 3
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 1], 4
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 1], 5
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 1], 6
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r15 + 1], 7
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 1], 8
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 1], 9
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 1], 10
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 1], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 1], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 1], 13
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 1], 14
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1248], ymm3  # 32-byte Spill
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm6, byte ptr [rdx + rax + 1], 15
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 8]
	vmovd	xmm9, esi
	vinserti128	ymm3, ymm3, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm3   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 8]
	vmovd	xmm10, esi
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 1
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 2], 2
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 2], 3
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 4
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 5
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 6
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 7
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 8
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 2], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 10
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 2], 11
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 2], 12
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 2], 13
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 2], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vmovdqa	xmm4, xmmword ptr [rsp + 416]   # 16-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 2], 1
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 2
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 3
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 5
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 6
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 7
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 8
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 9
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 10
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 13
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 14
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 15
	vpinsrb	xmm5, xmm11, byte ptr [rdx + rbx + 3], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 3], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 3], 3
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 4
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 3], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 3], 6
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 7
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 3], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 3], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 3], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 3], 11
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 3], 12
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 3], 13
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 3], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 3], 15
	vpinsrb	xmm6, xmm8, byte ptr [rdx + rax + 3], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 2
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 3], 3
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 3], 4
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 3], 5
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 3], 6
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 3], 7
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r14 + 3], 8
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 3], 9
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 3], 10
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 3], 11
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 3], 12
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 3], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm3   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm6, byte ptr [rdx + rcx + 3], 14
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 9]
	vmovd	xmm8, esi
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 3], 15
	vinserti128	ymm3, ymm3, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm3   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 9]
	vmovd	xmm11, esi
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 512]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 1
	mov	r11, r9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 4], 2
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 3
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 4], 4
	mov	rcx, r8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 4], 5
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 7
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 8
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 9
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 4], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 11
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 4], 13
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 4], 15
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm15, byte ptr [rdx + rsi + 4], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 4], 3
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 4], 4
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 4], 5
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 4], 6
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 4], 8
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 4], 9
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 10
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 4], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 13
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 4], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 4], 15
	mov	r14, r12
	vpinsrb	xmm5, xmm14, byte ptr [rdx + rbx + 5], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 5], 2
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 5], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 5], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 5], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 6
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 5], 8
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 5], 10
	mov	r13, r9
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 12
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 5], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm6, xmm12, byte ptr [rdx + rax + 5], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 5], 2
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 5], 3
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 5], 4
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 5], 5
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 5], 6
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 5], 7
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 5], 8
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r15 + 5], 9
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 5], 10
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 5], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 5], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 5], 13
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 5], 14
	vinserti128	ymm15, ymm4, xmm3, 1
	vpinsrb	xmm4, xmm6, byte ptr [rdx + r14 + 5], 15
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 10]
	vmovd	xmm12, esi
	vinserti128	ymm3, ymm4, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 512], ymm3   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 10]
	vmovd	xmm4, esi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm13, byte ptr [rdx + rax + 6], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 2
	mov	r14, r11
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 6], 3
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 4
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 5
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 6], 6
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 6], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 6], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 6], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 12
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 6], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 14
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 6], 15
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm6, xmm7, byte ptr [rdx + r13 + 6], 1
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 6], 2
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 6], 3
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 6], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 6], 5
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 6], 6
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 6], 7
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 6], 8
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 6], 9
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 6], 10
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 6], 11
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r11 + 6], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 6], 13
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 6], 14
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 6], 15
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 7], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 4
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 7], 7
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 8
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 9
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 11
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 7], 12
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 7], 13
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 7], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 7], 1
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 2
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 7], 3
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 5
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 6
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 7
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 7], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 7], 10
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 7], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 7], 12
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 13
	vinserti128	ymm3, ymm6, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm3  # 32-byte Spill
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm1, byte ptr [rdx + rsi + 7], 14
	mov	r13, rsi
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 11]
	vmovd	xmm1, esi
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 7], 15
	vinserti128	ymm2, ymm5, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm2  # 32-byte Spill
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 11]
	vmovd	xmm2, esi
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm9, byte ptr [rdx + rdi + 8], 1
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 2
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 3
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 8], 4
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 5
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 6
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 8
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 8], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 8], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 12
	mov	r10, r12
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 8], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 8], 15
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm6, xmm10, byte ptr [rdx + rcx + 8], 1
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 8], 2
	mov	r12, r8
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 8], 3
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 4
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 8], 5
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 8], 6
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 8], 7
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 8], 8
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r11 + 8], 9
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 8], 10
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r14 + 8], 11
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r14 + 8], 12
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rcx + 8], 13
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r13 + 8], 14
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r13 + 8], 15
	vpinsrb	xmm7, xmm8, byte ptr [rdx + rdi + 9], 1
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 2
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r15 + 9], 4
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rdi + 9], 5
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 6
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 7
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 9], 9
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 10
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 11
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 12
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r10 + 9], 13
	mov	rcx, r10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 14
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm11, byte ptr [rdx + rax + 9], 1
	mov	r10, rax
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 9], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 9], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 5
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 9], 6
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 9], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 9], 9
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 10
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 9], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 9], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 13
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 14
	vinserti128	ymm5, ymm6, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 15
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 12]
	vmovd	xmm5, esi
	vinserti128	ymm3, ymm3, xmm7, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm3  # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 12]
	vmovd	xmm6, esi
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm12, byte ptr [rdx + r9 + 10], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 2
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 10], 3
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 5
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 6
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 10], 7
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 8
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 9
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 10
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 10], 11
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 13
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 10], 15
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 10], 1
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 10], 2
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 10], 3
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 4
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 6
	mov	rbx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 7
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 8
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 10], 9
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 10], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 12
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 13
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 14
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 1
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 11], 4
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 11], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 11], 7
	mov	r8, r11
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 11], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 11], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 11], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 11], 3
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 5
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 6
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 7
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 11], 9
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 11], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 11], 11
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 12
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm3  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 14
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 13]
	vmovd	xmm3, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm1  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 13]
	vmovd	xmm1, esi
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rdx + r11 + 12], 1
	mov	r10, r9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 12], 2
	mov	rcx, r14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 3
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 4
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 12], 5
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 12], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 8
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 9
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 10
	mov	r8, r12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 12], 11
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 12], 12
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 12], 13
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 15
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm6, byte ptr [rdx + rsi + 12], 1
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 12], 2
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 12], 3
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 12], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 12], 5
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 12], 6
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 12], 7
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 12], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 12], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 12], 10
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 12], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 12], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 12], 13
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 12], 14
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 13], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 13], 5
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 6
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 13], 7
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 8
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 9
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 13], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 13], 13
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 15
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 2
	mov	r9, rsi
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 3
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 13], 4
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 5
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 6
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 13], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 13], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 9
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 10
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 13
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 14
	vinserti128	ymm2, ymm4, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm2  # 32-byte Spill
	mov	r12, r13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 13], 15
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r14 + 14]
	vmovd	xmm2, esi
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm1   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 14]
	vmovd	xmm1, esi
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 14], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 14], 2
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 14], 3
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 14], 4
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 14], 7
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 8
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 10
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 14], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 13
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 14], 14
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 14], 15
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 14], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 2
	mov	r9, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 5
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 6
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 7
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 8
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 9
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 10
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 11
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 12
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 13
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 14], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 14], 15
	movzx	esi, byte ptr [rdx + r14 + 15]
	vmovd	xmm3, esi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 15], 1
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 4
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 5
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 15], 6
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 7
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 8
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 9
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 15], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 11
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 12
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 15], 15
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 15]
	vmovd	xmm4, esi
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 15], 1
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 15], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 15], 3
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 15], 4
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 15], 5
	mov	r13, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 15], 6
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 15], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 8
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 15], 9
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 15], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 15], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 15], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 13
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 15], 14
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 15
	vinserti128	ymm1, ymm1, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm1   # 32-byte Spill
	vinserti128	ymm1, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm1   # 32-byte Spill
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 16]
	vmovd	xmm1, esi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 1
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 16], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 3
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 4
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 16], 6
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 8
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 16], 10
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 16], 11
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 13
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 15
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 16]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 16], 1
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 16], 2
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 16], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 16], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 16], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 16], 6
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 16], 7
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 16], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 16], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 16], 10
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 16], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 16], 12
	mov	r11, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 16], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 16], 14
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 16], 15
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rdi + 17]
	vmovd	xmm3, esi
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 17], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 17], 2
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 3
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 17], 4
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 17], 5
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 17], 6
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 8
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 9
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 17], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 17], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 17]
	vmovd	xmm4, esi
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 1
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 17], 2
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 17], 3
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 5
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 17], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 17], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 9
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 10
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 17], 13
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 17], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm1   # 32-byte Spill
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm4, byte ptr [rdx + rax + 17], 15
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm1   # 32-byte Spill
	movzx	esi, byte ptr [rdx + rdi + 18]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 2
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 18], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 18], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 18], 6
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 18], 7
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 8
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 9
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 18], 10
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 18], 11
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 12
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 13
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 18], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 15
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r9 + 18]
	vmovd	xmm2, esi
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 18], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 18], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 18], 3
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 4
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 18], 5
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 6
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 18], 7
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 8
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 9
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 10
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 11
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 12
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 13
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 18], 14
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 18], 15
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 19]
	vmovd	xmm3, esi
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 19], 3
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 4
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 19], 7
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 8
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 19], 11
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 19], 12
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 14
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 15
	movzx	esi, byte ptr [rdx + r9 + 19]
	vmovd	xmm4, esi
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 19], 1
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 19], 2
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 19], 3
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 19], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 19], 5
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 19], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 19], 7
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 19], 8
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 19], 9
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 19], 10
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 19], 11
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 19], 12
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 19], 13
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 19], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 19], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm1   # 32-byte Spill
	vinserti128	ymm1, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm1   # 32-byte Spill
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 20]
	vmovd	xmm1, esi
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 1
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 2
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 3
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 4
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 20], 5
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 6
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 20], 12
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 20], 13
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 20], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 15
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 20]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 20], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 20], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 20], 4
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 20], 5
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 6
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 20], 8
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 9
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 10
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 20], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 20], 12
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 13
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 14
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 15
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 21]
	vmovd	xmm3, esi
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 1
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 2
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 21], 3
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 21], 5
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 6
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 8
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 10
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 21], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 21], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 15
	movzx	esi, byte ptr [rdx + r15 + 21]
	mov	rbx, r15
	vmovd	xmm4, esi
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 1
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 21], 2
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 3
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 21], 5
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 6
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 21], 7
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 21], 8
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 21], 9
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 21], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 21], 11
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 21], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 13
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm1   # 32-byte Spill
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm4, byte ptr [rdx + rax + 21], 15
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm1   # 32-byte Spill
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 22]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 22], 3
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 4
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 5
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 6
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 8
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 22], 9
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 11
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 22], 12
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 13
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 22], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 15
	movzx	esi, byte ptr [rdx + rbx + 22]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 22], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 22], 2
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 22], 3
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 22], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 22], 5
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 22], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 22], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 22], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 22], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 22], 10
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 22], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 22], 12
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 22], 13
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 22], 14
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 22], 15
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 23]
	vmovd	xmm3, esi
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 23], 1
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 23], 2
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 23], 4
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 23], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 23], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 7
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 23], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 9
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 10
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 23], 12
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 23], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 15
	movzx	esi, byte ptr [rdx + rbx + 23]
	vmovd	xmm4, esi
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 1
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 2
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 23], 3
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 5
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 23], 6
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 7
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 8
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 9
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 23], 11
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 23], 13
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 23], 14
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 23], 15
	vinserti128	ymm11, ymm2, xmm1, 1
	vinserti128	ymm12, ymm4, xmm3, 1
	movzx	esi, byte ptr [rdx + r15 + 24]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 24], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 24], 2
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 3
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 4
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 5
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 24], 6
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 8
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 24], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 11
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 24], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 13
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 14
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 24], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 24]
	vmovd	xmm2, esi
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 24], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 24], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 24], 3
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 24], 4
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 24], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 24], 6
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 24], 7
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 24], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 24], 9
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 24], 10
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 24], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 24], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 24], 13
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 24], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 24], 15
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 25]
	vmovd	xmm3, esi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 25], 4
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 25], 6
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 25], 9
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 25], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 25], 12
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 25], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 25], 15
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r10 + 25]
	vmovd	xmm4, esi
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 25], 1
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 25], 2
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 25], 3
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 25], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 25], 5
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 25], 6
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 25], 7
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 25], 8
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 25], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 25], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 25], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 25], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 25], 13
	mov	r12, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 25], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 384], ymm1   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm4, byte ptr [rdx + rcx + 25], 15
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm1   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 26]
	vmovd	xmm1, esi
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 1
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 2
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 3
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 4
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 5
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 7
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 8
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 26], 10
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 12
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 26], 13
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 15
	movzx	esi, byte ptr [rdx + r10 + 26]
	vmovd	xmm2, esi
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 26], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 26], 2
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 26], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 26], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 26], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 26], 6
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 26], 7
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 26], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 26], 9
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 26], 10
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 26], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 26], 12
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 26], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 26], 14
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 26], 15
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + r15 + 27]
	vmovd	xmm3, esi
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 27], 1
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 27], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 4
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 27], 6
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 7
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 27], 8
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 9
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 27], 10
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 27], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 27], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 27]
	vmovd	xmm4, esi
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 1
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 27], 2
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 3
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 4
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 27], 5
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 6
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 27], 7
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 8
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 9
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 27], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 27], 13
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 27], 14
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 27], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm1   # 32-byte Spill
	vinserti128	ymm1, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm1   # 32-byte Spill
	movzx	esi, byte ptr [rdx + r15 + 28]
	vmovd	xmm1, esi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 28], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 28], 2
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 3
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 5
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 28], 6
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 28], 8
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 28], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 28], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 28], 11
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 12
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 13
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 14
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 28], 15
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 28]
	vmovd	xmm2, esi
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 28], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 28], 2
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 28], 3
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 28], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 28], 5
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 28], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 28], 7
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 28], 8
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 28], 9
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 28], 10
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 28], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 28], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 13
	mov	r12, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 28], 14
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 15
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 29]
	vmovd	xmm3, esi
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 1
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 2
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 3
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 4
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 29], 6
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 7
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 29], 9
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 10
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 29], 11
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 12
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 13
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 29], 15
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 29]
	vmovd	xmm4, esi
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 29], 1
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 29], 2
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 29], 3
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 29], 4
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 29], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 29], 6
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 29], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 29], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 29], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 29], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 29], 11
	mov	r13, rdi
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 29], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 29], 13
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 29], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm1   # 32-byte Spill
	vpinsrb	xmm1, xmm4, byte ptr [rdx + rax + 29], 15
	mov	r12, rax
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm1   # 32-byte Spill
	mov	r8, qword ptr [rsp + 200]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r8 + 30]
	vmovd	xmm1, esi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 1
	movzx	esi, byte ptr [rdx + r8 + 31]
	vmovd	xmm2, esi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 1
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 4
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 6
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 7
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 30], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 31], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 15
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	eax, byte ptr [rdx + rsi + 30]
	vmovd	xmm3, eax
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 30], 1
	movzx	eax, byte ptr [rdx + rsi + 31]
	vmovd	xmm4, eax
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 31], 1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 30], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 31], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 30], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 31], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 5
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 6
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 30], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 31], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 30], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 31], 9
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 30], 11
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 31], 11
	mov	rax, rbx
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 30], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 31], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 30], 13
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 31], 13
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 30], 15
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 31], 15
	vinserti128	ymm1, ymm3, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm1   # 32-byte Spill
	vinserti128	ymm1, ymm4, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 256], ymm1   # 32-byte Spill
	vpminub	ymm1, ymm0, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpcmpeqb	ymm1, ymm0, ymm1
	vmovdqa	ymm7, ymmword ptr [rip + .LCPI8_0] # ymm7 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	vpandn	ymm2, ymm1, ymm7
	vpaddb	ymm1, ymm2, ymm1
	vpminub	ymm2, ymm0, ymmword ptr [rsp + 1248] # 32-byte Folded Reload
	vpcmpeqb	ymm2, ymm0, ymm2
	vpandn	ymm2, ymm2, ymm7
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI8_1] # ymm9 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpandn	ymm14, ymm14, ymm9
	vpor	ymm2, ymm14, ymm2
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vmovdqa	ymm8, ymmword ptr [rip + .LCPI8_2] # ymm8 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpandn	ymm14, ymm14, ymm8
	vpor	ymm2, ymm14, ymm2
	vpcmpeqd	ymm3, ymm3, ymm3
	vpsubb	ymm1, ymm1, ymm3
	vpor	ymm1, ymm1, ymm2
	vpminub	ymm2, ymm15, ymm0
	vpcmpeqb	ymm2, ymm0, ymm2
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI8_3] # ymm6 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpandn	ymm2, ymm2, ymm6
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 512] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI8_4] # ymm4 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpandn	ymm14, ymm14, ymm4
	vpor	ymm2, ymm14, ymm2
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI8_5] # ymm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpandn	ymm14, ymm14, ymm5
	vpor	ymm2, ymm14, ymm2
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpxor	ymm14, ymm14, ymm3
	vpsllw	ymm14, ymm14, 7
	vmovdqa	ymm10, ymmword ptr [rip + .LCPI8_6] # ymm10 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm14, ymm14, ymm10
	vpor	ymm2, ymm14, ymm2
	vpor	ymm1, ymm1, ymm2
	vmovdqa	ymmword ptr [rsp + 320], ymm1   # 32-byte Spill
	vpminub	ymm1, ymm0, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpcmpeqb	ymm1, ymm0, ymm1
	vpandn	ymm14, ymm1, ymm7
	vpaddb	ymm1, ymm14, ymm1
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpandn	ymm14, ymm14, ymm7
	vpminub	ymm15, ymm0, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vmovdqa	ymm3, ymm9
	vpandn	ymm15, ymm15, ymm9
	vpor	ymm14, ymm14, ymm15
	vpminub	ymm15, ymm0, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm14, ymm14, ymm15
	vpcmpeqd	ymm2, ymm2, ymm2
	vpsubb	ymm1, ymm1, ymm2
	vpor	ymm1, ymm14, ymm1
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpandn	ymm14, ymm14, ymm6
	vpminub	ymm15, ymm0, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpandn	ymm15, ymm15, ymm4
	vpor	ymm14, ymm14, ymm15
	vpminub	ymm15, ymm0, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpandn	ymm15, ymm15, ymm5
	vpor	ymm14, ymm14, ymm15
	vpminub	ymm15, ymm0, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpxor	ymm15, ymm15, ymm2
	vpcmpeqd	ymm2, ymm2, ymm2
	vpsllw	ymm15, ymm15, 7
	vpand	ymm15, ymm15, ymm10
	vpor	ymm14, ymm14, ymm15
	vpor	ymm1, ymm14, ymm1
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpandn	ymm15, ymm14, ymm7
	vpaddb	ymm14, ymm15, ymm14
	vpminub	ymm15, ymm0, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpandn	ymm15, ymm15, ymm7
	vpminub	ymm13, ymm0, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpcmpeqb	ymm13, ymm13, ymm0
	vpandn	ymm13, ymm13, ymm9
	vpor	ymm13, ymm15, ymm13
	vpminub	ymm15, ymm0, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm13, ymm13, ymm15
	vpsubb	ymm14, ymm14, ymm2
	vpor	ymm13, ymm14, ymm13
	vpminub	ymm14, ymm0, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpandn	ymm14, ymm14, ymm6
	vpminub	ymm15, ymm0, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpandn	ymm15, ymm15, ymm4
	vpor	ymm14, ymm14, ymm15
	vpminub	ymm11, ymm11, ymm0
	vpcmpeqb	ymm11, ymm11, ymm0
	vmovdqa	ymm15, ymm5
	vpandn	ymm11, ymm11, ymm5
	vpor	ymm11, ymm14, ymm11
	vpminub	ymm12, ymm12, ymm0
	vpcmpeqb	ymm12, ymm12, ymm0
	vpxor	ymm12, ymm12, ymm2
	vpsllw	ymm12, ymm12, 7
	vmovdqa	ymm14, ymm10
	vpand	ymm12, ymm12, ymm10
	vpor	ymm11, ymm11, ymm12
	vpor	ymm11, ymm13, ymm11
	vpminub	ymm9, ymm0, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpcmpeqb	ymm9, ymm9, ymm0
	vpandn	ymm12, ymm9, ymm7
	vpaddb	ymm9, ymm12, ymm9
	vpminub	ymm10, ymm0, ymmword ptr [rsp + 384] # 32-byte Folded Reload
	vpcmpeqb	ymm10, ymm10, ymm0
	vpandn	ymm10, ymm10, ymm7
	vpminub	ymm7, ymm0, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpcmpeqb	ymm7, ymm0, ymm7
	vpandn	ymm7, ymm7, ymm3
	vpor	ymm7, ymm10, ymm7
	vpminub	ymm8, ymm0, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpcmpeqb	ymm8, ymm8, ymm0
	vpandn	ymm8, ymm8, ymmword ptr [rip + .LCPI8_2]
	vpor	ymm7, ymm8, ymm7
	vpsubb	ymm8, ymm9, ymm2
	vpor	ymm7, ymm8, ymm7
	vpminub	ymm5, ymm0, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpcmpeqb	ymm5, ymm0, ymm5
	vpandn	ymm5, ymm5, ymm6
	vpminub	ymm6, ymm0, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpcmpeqb	ymm6, ymm0, ymm6
	vpandn	ymm6, ymm6, ymm4
	vpor	ymm5, ymm5, ymm6
	vpminub	ymm3, ymm0, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpcmpeqb	ymm3, ymm0, ymm3
	vpandn	ymm3, ymm3, ymm15
	vpor	ymm3, ymm5, ymm3
	vpminub	ymm4, ymm0, ymmword ptr [rsp + 256] # 32-byte Folded Reload
	vpcmpeqb	ymm4, ymm0, ymm4
	vpxor	ymm4, ymm4, ymm2
	vpsllw	ymm4, ymm4, 7
	vpand	ymm4, ymm14, ymm4
	vpor	ymm3, ymm3, ymm4
	vpor	ymm3, ymm7, ymm3
	vmovdqa	ymm2, ymmword ptr [rsp + 320]   # 32-byte Reload
	vpunpcklbw	ymm4, ymm2, ymm1        # ymm4 = ymm2[0],ymm1[0],ymm2[1],ymm1[1],ymm2[2],ymm1[2],ymm2[3],ymm1[3],ymm2[4],ymm1[4],ymm2[5],ymm1[5],ymm2[6],ymm1[6],ymm2[7],ymm1[7],ymm2[16],ymm1[16],ymm2[17],ymm1[17],ymm2[18],ymm1[18],ymm2[19],ymm1[19],ymm2[20],ymm1[20],ymm2[21],ymm1[21],ymm2[22],ymm1[22],ymm2[23],ymm1[23]
	vpunpckhbw	ymm1, ymm2, ymm1        # ymm1 = ymm2[8],ymm1[8],ymm2[9],ymm1[9],ymm2[10],ymm1[10],ymm2[11],ymm1[11],ymm2[12],ymm1[12],ymm2[13],ymm1[13],ymm2[14],ymm1[14],ymm2[15],ymm1[15],ymm2[24],ymm1[24],ymm2[25],ymm1[25],ymm2[26],ymm1[26],ymm2[27],ymm1[27],ymm2[28],ymm1[28],ymm2[29],ymm1[29],ymm2[30],ymm1[30],ymm2[31],ymm1[31]
	vpunpcklbw	ymm2, ymm11, ymm3       # ymm2 = ymm11[0],ymm3[0],ymm11[1],ymm3[1],ymm11[2],ymm3[2],ymm11[3],ymm3[3],ymm11[4],ymm3[4],ymm11[5],ymm3[5],ymm11[6],ymm3[6],ymm11[7],ymm3[7],ymm11[16],ymm3[16],ymm11[17],ymm3[17],ymm11[18],ymm3[18],ymm11[19],ymm3[19],ymm11[20],ymm3[20],ymm11[21],ymm3[21],ymm11[22],ymm3[22],ymm11[23],ymm3[23]
	vpunpckhbw	ymm3, ymm11, ymm3       # ymm3 = ymm11[8],ymm3[8],ymm11[9],ymm3[9],ymm11[10],ymm3[10],ymm11[11],ymm3[11],ymm11[12],ymm3[12],ymm11[13],ymm3[13],ymm11[14],ymm3[14],ymm11[15],ymm3[15],ymm11[24],ymm3[24],ymm11[25],ymm3[25],ymm11[26],ymm3[26],ymm11[27],ymm3[27],ymm11[28],ymm3[28],ymm11[29],ymm3[29],ymm11[30],ymm3[30],ymm11[31],ymm3[31]
	vpunpcklwd	ymm5, ymm4, ymm2        # ymm5 = ymm4[0],ymm2[0],ymm4[1],ymm2[1],ymm4[2],ymm2[2],ymm4[3],ymm2[3],ymm4[8],ymm2[8],ymm4[9],ymm2[9],ymm4[10],ymm2[10],ymm4[11],ymm2[11]
	vpunpckhwd	ymm2, ymm4, ymm2        # ymm2 = ymm4[4],ymm2[4],ymm4[5],ymm2[5],ymm4[6],ymm2[6],ymm4[7],ymm2[7],ymm4[12],ymm2[12],ymm4[13],ymm2[13],ymm4[14],ymm2[14],ymm4[15],ymm2[15]
	vpunpcklwd	ymm4, ymm1, ymm3        # ymm4 = ymm1[0],ymm3[0],ymm1[1],ymm3[1],ymm1[2],ymm3[2],ymm1[3],ymm3[3],ymm1[8],ymm3[8],ymm1[9],ymm3[9],ymm1[10],ymm3[10],ymm1[11],ymm3[11]
	vpunpckhwd	ymm1, ymm1, ymm3        # ymm1 = ymm1[4],ymm3[4],ymm1[5],ymm3[5],ymm1[6],ymm3[6],ymm1[7],ymm3[7],ymm1[12],ymm3[12],ymm1[13],ymm3[13],ymm1[14],ymm3[14],ymm1[15],ymm3[15]
	vinserti128	ymm3, ymm5, xmm2, 1
	vperm2i128	ymm2, ymm5, ymm2, 49    # ymm2 = ymm5[2,3],ymm2[2,3]
	vinserti128	ymm5, ymm4, xmm1, 1
	vperm2i128	ymm1, ymm4, ymm1, 49    # ymm1 = ymm4[2,3],ymm1[2,3]
	mov	rcx, qword ptr [rsp + 376]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + 4*rcx + 96], ymm1
	vmovdqu	ymmword ptr [r11 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r11 + 4*rcx + 32], ymm5
	vmovdqu	ymmword ptr [r11 + 4*rcx], ymm3
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 360]      # 8-byte Folded Reload
	jne	.LBB8_184
# %bb.185:
	mov	r15, qword ptr [rsp + 368]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 360]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 4]       # 4-byte Reload
	mov	r12, qword ptr [rsp + 504]      # 8-byte Reload
	jne	.LBB8_101
	jmp	.LBB8_125
.Lfunc_end8:
	.size	comparison_greater_scalar_arr_avx2, .Lfunc_end8-comparison_greater_scalar_arr_avx2
                                        # -- End function
	.globl	comparison_greater_equal_arr_arr_avx2 # -- Begin function comparison_greater_equal_arr_arr_avx2
	.p2align	4, 0x90
	.type	comparison_greater_equal_arr_arr_avx2,@function
comparison_greater_equal_arr_arr_avx2:  # @comparison_greater_equal_arr_arr_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -8
	sub	rsp, 72
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB9_29
# %bb.1:
	cmp	edi, 3
	jle	.LBB9_2
# %bb.15:
	cmp	edi, 4
	je	.LBB9_68
# %bb.16:
	cmp	edi, 5
	je	.LBB9_79
# %bb.17:
	cmp	edi, 6
	jne	.LBB9_123
# %bb.18:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_22
# %bb.19:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_20:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_20
# %bb.21:
	add	r14, 1
.LBB9_22:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_26
# %bb.23:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_24:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setae	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setae	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setae	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setae	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setae	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setae	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setae	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setae	r12b
	cmp	eax, dword ptr [rdx + 80]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setae	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setae	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_24
# %bb.25:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_26:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.27:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_28:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [rsi + 4*rcx]
	cmp	eax, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_28
	jmp	.LBB9_123
.LBB9_29:
	cmp	edi, 8
	jle	.LBB9_30
# %bb.43:
	cmp	edi, 9
	je	.LBB9_101
# %bb.44:
	cmp	edi, 11
	je	.LBB9_112
# %bb.45:
	cmp	edi, 12
	jne	.LBB9_123
# %bb.46:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_50
# %bb.47:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_48:                               # =>This Inner Loop Header: Depth=1
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	add	rsi, 8
	vucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_48
# %bb.49:
	add	r14, 1
.LBB9_50:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_54
# %bb.51:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_52:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	vmovsd	xmm1, qword ptr [rsi + 8]       # xmm1 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomisd	xmm1, qword ptr [rdx + 8]
	setae	al
	vmovsd	xmm0, qword ptr [rsi + 16]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 16]
	vmovsd	xmm0, qword ptr [rsi + 24]      # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 24]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 32]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 32]
	vmovsd	xmm0, qword ptr [rsi + 40]      # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 40]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 48]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 48]
	vmovsd	xmm0, qword ptr [rsi + 56]      # xmm0 = mem[0],zero
	setae	r13b
	vucomisd	xmm0, qword ptr [rdx + 56]
	setae	r15b
	vmovsd	xmm0, qword ptr [rsi + 64]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 64]
	vmovsd	xmm0, qword ptr [rsi + 72]      # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 72]
	setae	cl
	vmovsd	xmm0, qword ptr [rsi + 80]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 80]
	vmovsd	xmm0, qword ptr [rsi + 88]      # xmm0 = mem[0],zero
	setae	r9b
	vucomisd	xmm0, qword ptr [rdx + 88]
	setae	r11b
	vmovsd	xmm0, qword ptr [rsi + 96]      # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 96]
	vmovsd	xmm0, qword ptr [rsi + 104]     # xmm0 = mem[0],zero
	setae	r10b
	vucomisd	xmm0, qword ptr [rdx + 104]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	vmovsd	xmm0, qword ptr [rsi + 112]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 112]
	vmovsd	xmm0, qword ptr [rsi + 120]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 120]
	setae	bl
	vmovsd	xmm0, qword ptr [rsi + 128]     # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 128]
	vmovsd	xmm0, qword ptr [rsi + 136]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 136]
	vmovsd	xmm0, qword ptr [rsi + 144]     # xmm0 = mem[0],zero
	setae	r14b
	vucomisd	xmm0, qword ptr [rdx + 144]
	vmovsd	xmm0, qword ptr [rsi + 152]     # xmm0 = mem[0],zero
	setae	r12b
	vucomisd	xmm0, qword ptr [rdx + 152]
	vmovsd	xmm0, qword ptr [rsi + 160]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 160]
	vmovsd	xmm0, qword ptr [rsi + 168]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 168]
	vmovsd	xmm0, qword ptr [rsi + 176]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 176]
	vmovsd	xmm0, qword ptr [rsi + 184]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 184]
	vmovsd	xmm0, qword ptr [rsi + 192]     # xmm0 = mem[0],zero
	setae	r8b
	vucomisd	xmm0, qword ptr [rdx + 192]
	vmovsd	xmm0, qword ptr [rsi + 200]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 200]
	vmovsd	xmm0, qword ptr [rsi + 208]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 208]
	vmovsd	xmm0, qword ptr [rsi + 216]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 216]
	vmovsd	xmm0, qword ptr [rsi + 224]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 224]
	vmovsd	xmm0, qword ptr [rsi + 232]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 232]
	vmovsd	xmm0, qword ptr [rsi + 240]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 240]
	vmovsd	xmm0, qword ptr [rsi + 248]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	add	rsi, 256
	vucomisd	xmm0, qword ptr [rdx + 248]
	setae	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB9_52
# %bb.53:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB9_54:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.55:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_56:                               # =>This Inner Loop Header: Depth=1
	vmovsd	xmm0, qword ptr [rsi + 8*rcx]   # xmm0 = mem[0],zero
	vucomisd	xmm0, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_56
	jmp	.LBB9_123
.LBB9_2:
	cmp	edi, 2
	je	.LBB9_57
# %bb.3:
	cmp	edi, 3
	jne	.LBB9_123
# %bb.4:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setge	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_6
# %bb.7:
	add	r14, 1
.LBB9_8:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_12
# %bb.9:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_10:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setge	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setge	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setge	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setge	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setge	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setge	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setge	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setge	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setge	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setge	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setge	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setge	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setge	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setge	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setge	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setge	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setge	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setge	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setge	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setge	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setge	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setge	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setge	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setge	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setge	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setge	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setge	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setge	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setge	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB9_10
# %bb.11:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB9_12:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.13:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_14:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	setge	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_14
	jmp	.LBB9_123
.LBB9_30:
	cmp	edi, 7
	je	.LBB9_90
# %bb.31:
	cmp	edi, 8
	jne	.LBB9_123
# %bb.32:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_36
# %bb.33:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_34:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_34
# %bb.35:
	add	r14, 1
.LBB9_36:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_40
# %bb.37:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_38:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setae	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setae	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setae	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setae	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setae	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setae	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setae	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setae	r12b
	cmp	rax, qword ptr [rdx + 160]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setae	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setae	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_38
# %bb.39:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_40:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.41:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_42:                               # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rsi + 8*rcx]
	cmp	rax, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_42
	jmp	.LBB9_123
.LBB9_68:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_72
# %bb.69:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_70:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_70
# %bb.71:
	add	r14, 1
.LBB9_72:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_76
# %bb.73:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_74:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setae	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setae	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setae	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setae	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setae	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setae	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setae	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setae	r12b
	cmp	ax, word ptr [rdx + 40]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setae	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setae	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_74
# %bb.75:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_76:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.77:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_78:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, word ptr [rsi + 2*rcx]
	cmp	ax, word ptr [rdx + 2*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_78
	jmp	.LBB9_123
.LBB9_79:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_81:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setge	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_81
# %bb.82:
	add	r14, 1
.LBB9_83:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_87
# %bb.84:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_85:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setge	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setge	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setge	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setge	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setge	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setge	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setge	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setge	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setge	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setge	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setge	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setge	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setge	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setge	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setge	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setge	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setge	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setge	r12b
	cmp	ax, word ptr [rdx + 40]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setge	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setge	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setge	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setge	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setge	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setge	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setge	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setge	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setge	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setge	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_85
# %bb.86:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_87:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.88:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_89:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	setge	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_89
	jmp	.LBB9_123
.LBB9_101:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_105
# %bb.102:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_103:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setge	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_103
# %bb.104:
	add	r14, 1
.LBB9_105:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_109
# %bb.106:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_107:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setge	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setge	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setge	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setge	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setge	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setge	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setge	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setge	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setge	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setge	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setge	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setge	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setge	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setge	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setge	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setge	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setge	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setge	r12b
	cmp	rax, qword ptr [rdx + 160]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setge	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setge	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setge	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setge	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setge	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setge	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setge	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setge	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setge	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setge	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_107
# %bb.108:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_109:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.110:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_111:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	setge	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_111
	jmp	.LBB9_123
.LBB9_112:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_116
# %bb.113:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_114:                              # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	add	rsi, 4
	vucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_114
# %bb.115:
	add	r14, 1
.LBB9_116:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_120
# %bb.117:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_118:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	vmovss	xmm1, dword ptr [rsi + 4]       # xmm1 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	vucomiss	xmm1, dword ptr [rdx + 4]
	setae	al
	vmovss	xmm0, dword ptr [rsi + 8]       # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 8]
	vmovss	xmm0, dword ptr [rsi + 12]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 12]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 16]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 16]
	vmovss	xmm0, dword ptr [rsi + 20]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 20]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 24]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 24]
	vmovss	xmm0, dword ptr [rsi + 28]      # xmm0 = mem[0],zero,zero,zero
	setae	r13b
	vucomiss	xmm0, dword ptr [rdx + 28]
	setae	r15b
	vmovss	xmm0, dword ptr [rsi + 32]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 32]
	vmovss	xmm0, dword ptr [rsi + 36]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 36]
	setae	cl
	vmovss	xmm0, dword ptr [rsi + 40]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 40]
	vmovss	xmm0, dword ptr [rsi + 44]      # xmm0 = mem[0],zero,zero,zero
	setae	r9b
	vucomiss	xmm0, dword ptr [rdx + 44]
	setae	r11b
	vmovss	xmm0, dword ptr [rsi + 48]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 48]
	vmovss	xmm0, dword ptr [rsi + 52]      # xmm0 = mem[0],zero,zero,zero
	setae	r10b
	vucomiss	xmm0, dword ptr [rdx + 52]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	vmovss	xmm0, dword ptr [rsi + 56]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 56]
	vmovss	xmm0, dword ptr [rsi + 60]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 60]
	setae	bl
	vmovss	xmm0, dword ptr [rsi + 64]      # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 64]
	vmovss	xmm0, dword ptr [rsi + 68]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 68]
	vmovss	xmm0, dword ptr [rsi + 72]      # xmm0 = mem[0],zero,zero,zero
	setae	r14b
	vucomiss	xmm0, dword ptr [rdx + 72]
	vmovss	xmm0, dword ptr [rsi + 76]      # xmm0 = mem[0],zero,zero,zero
	setae	r12b
	vucomiss	xmm0, dword ptr [rdx + 76]
	vmovss	xmm0, dword ptr [rsi + 80]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 80]
	vmovss	xmm0, dword ptr [rsi + 84]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 84]
	vmovss	xmm0, dword ptr [rsi + 88]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 88]
	vmovss	xmm0, dword ptr [rsi + 92]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 92]
	vmovss	xmm0, dword ptr [rsi + 96]      # xmm0 = mem[0],zero,zero,zero
	setae	r8b
	vucomiss	xmm0, dword ptr [rdx + 96]
	vmovss	xmm0, dword ptr [rsi + 100]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 100]
	vmovss	xmm0, dword ptr [rsi + 104]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 104]
	vmovss	xmm0, dword ptr [rsi + 108]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 108]
	vmovss	xmm0, dword ptr [rsi + 112]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 112]
	vmovss	xmm0, dword ptr [rsi + 116]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 116]
	vmovss	xmm0, dword ptr [rsi + 120]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 120]
	vmovss	xmm0, dword ptr [rsi + 124]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	sub	rsi, -128
	vucomiss	xmm0, dword ptr [rdx + 124]
	setae	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB9_118
# %bb.119:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB9_120:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.121:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_122:                              # =>This Inner Loop Header: Depth=1
	vmovss	xmm0, dword ptr [rsi + 4*rcx]   # xmm0 = mem[0],zero,zero,zero
	vucomiss	xmm0, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_122
	jmp	.LBB9_123
.LBB9_57:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_59:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_59
# %bb.60:
	add	r14, 1
.LBB9_61:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_65
# %bb.62:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_63:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setae	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setae	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setae	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setae	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setae	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setae	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setae	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setae	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setae	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setae	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setae	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB9_63
# %bb.64:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB9_65:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.66:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_67:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [rsi + rcx]
	cmp	al, byte ptr [rdx + rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_67
	jmp	.LBB9_123
.LBB9_90:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_94
# %bb.91:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_92:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setge	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_92
# %bb.93:
	add	r14, 1
.LBB9_94:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_98
# %bb.95:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_96:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setge	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setge	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setge	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setge	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setge	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setge	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setge	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setge	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setge	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setge	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setge	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setge	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setge	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setge	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setge	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setge	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setge	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setge	r12b
	cmp	eax, dword ptr [rdx + 80]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setge	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setge	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setge	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setge	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setge	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setge	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setge	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setge	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setge	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setge	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_96
# %bb.97:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_98:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.99:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_100:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	setge	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_100
.LBB9_123:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.Lfunc_end9:
	.size	comparison_greater_equal_arr_arr_avx2, .Lfunc_end9-comparison_greater_equal_arr_arr_avx2
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function comparison_greater_equal_arr_scalar_avx2
.LCPI10_0:
	.zero	32,2
.LCPI10_1:
	.zero	32,4
.LCPI10_2:
	.zero	32,8
.LCPI10_3:
	.zero	32,16
.LCPI10_4:
	.zero	32,32
.LCPI10_5:
	.zero	32,64
.LCPI10_6:
	.zero	32,128
	.text
	.globl	comparison_greater_equal_arr_scalar_avx2
	.p2align	4, 0x90
	.type	comparison_greater_equal_arr_scalar_avx2,@function
comparison_greater_equal_arr_scalar_avx2: # @comparison_greater_equal_arr_scalar_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -32
	sub	rsp, 1344
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r11, rcx
	cmp	edi, 6
	jg	.LBB10_13
# %bb.1:
	cmp	edi, 3
	jle	.LBB10_25
# %bb.2:
	cmp	edi, 4
	je	.LBB10_48
# %bb.3:
	cmp	edi, 5
	je	.LBB10_56
# %bb.4:
	cmp	edi, 6
	jne	.LBB10_175
# %bb.5:
	mov	r13d, dword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_7:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	mov	edx, 0
	adc	dl, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_7
# %bb.8:
	add	r11, 1
.LBB10_9:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_100
# %bb.10:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_11:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setae	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setae	dil
	cmp	dword ptr [rsi + 8], r13d
	setae	r14b
	cmp	dword ptr [rsi + 12], r13d
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setae	al
	cmp	dword ptr [rsi + 28], r13d
	setae	bl
	cmp	dword ptr [rsi + 32], r13d
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setae	dl
	cmp	dword ptr [rsi + 40], r13d
	setae	r9b
	cmp	dword ptr [rsi + 44], r13d
	setae	r10b
	cmp	dword ptr [rsi + 48], r13d
	setae	r11b
	cmp	dword ptr [rsi + 52], r13d
	setae	r12b
	cmp	dword ptr [rsi + 56], r13d
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setae	cl
	cmp	dword ptr [rsi + 64], r13d
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setae	r15b
	cmp	dword ptr [rsi + 96], r13d
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setae	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setae	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 128
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB10_11
# %bb.12:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB10_101
	jmp	.LBB10_175
.LBB10_13:
	cmp	edi, 8
	jle	.LBB10_38
# %bb.14:
	cmp	edi, 9
	je	.LBB10_64
# %bb.15:
	cmp	edi, 11
	je	.LBB10_72
# %bb.16:
	cmp	edi, 12
	jne	.LBB10_175
# %bb.17:
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB10_21
# %bb.18:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_19:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	setbe	dl
	add	rsi, 8
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_19
# %bb.20:
	add	r11, 1
.LBB10_21:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_103
# %bb.22:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_23:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	setbe	byte ptr [rsp + 160]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 8]
	setbe	r9b
	vucomisd	xmm0, qword ptr [rsi + 16]
	setbe	r14b
	vucomisd	xmm0, qword ptr [rsi + 24]
	setbe	r13b
	vucomisd	xmm0, qword ptr [rsi + 32]
	setbe	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 40]
	setbe	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 48]
	setbe	al
	vucomisd	xmm0, qword ptr [rsi + 56]
	setbe	bl
	vucomisd	xmm0, qword ptr [rsi + 64]
	setbe	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 72]
	setbe	dl
	vucomisd	xmm0, qword ptr [rsi + 80]
	setbe	dil
	vucomisd	xmm0, qword ptr [rsi + 88]
	setbe	r10b
	vucomisd	xmm0, qword ptr [rsi + 96]
	setbe	r11b
	vucomisd	xmm0, qword ptr [rsi + 104]
	setbe	r12b
	vucomisd	xmm0, qword ptr [rsi + 112]
	setbe	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 120]
	setbe	cl
	vucomisd	xmm0, qword ptr [rsi + 128]
	setbe	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 136]
	setbe	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 144]
	setbe	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 152]
	setbe	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 160]
	setbe	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 168]
	setbe	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 176]
	setbe	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 184]
	setbe	r15b
	vucomisd	xmm0, qword ptr [rsi + 192]
	setbe	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 200]
	setbe	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 208]
	setbe	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 216]
	setbe	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 224]
	setbe	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 232]
	setbe	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 240]
	setbe	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rsi + 248]
	setbe	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 120]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 80]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 256
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB10_23
# %bb.24:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB10_104
	jmp	.LBB10_175
.LBB10_25:
	cmp	edi, 2
	je	.LBB10_80
# %bb.26:
	cmp	edi, 3
	jne	.LBB10_175
# %bb.27:
	mov	r14b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_128
# %bb.28:
	movsxd	rax, r9d
	mov	r13, r11
	.p2align	4, 0x90
.LBB10_29:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r14b
	lea	rsi, [rsi + 1]
	setge	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r13 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r13 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_29
# %bb.30:
	add	r13, 1
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_129
.LBB10_31:
	cmp	r15, 32
	mov	dword ptr [rsp + 28], r14d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 608], r15      # 8-byte Spill
	jb	.LBB10_34
# %bb.32:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r13, rax
	jae	.LBB10_182
# %bb.33:
	lea	rax, [4*r15]
	add	rax, r13
	cmp	rsi, rax
	jae	.LBB10_182
.LBB10_34:
	xor	eax, eax
	mov	qword ptr [rsp + 416], rax      # 8-byte Spill
	mov	r12, rsi
	mov	qword ptr [rsp + 360], r13      # 8-byte Spill
.LBB10_35:
	mov	r13, r15
	sub	r13, qword ptr [rsp + 416]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r13      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_36:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	byte ptr [r12], r14b
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	byte ptr [r12 + 1], r14b
	setge	r8b
	cmp	byte ptr [r12 + 2], r14b
	setge	r15b
	cmp	byte ptr [r12 + 3], r14b
	setge	r13b
	cmp	byte ptr [r12 + 4], r14b
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 5], r14b
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 6], r14b
	setge	al
	cmp	byte ptr [r12 + 7], r14b
	setge	r11b
	cmp	byte ptr [r12 + 8], r14b
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 9], r14b
	setge	dl
	cmp	byte ptr [r12 + 10], r14b
	setge	sil
	cmp	byte ptr [r12 + 11], r14b
	setge	dil
	cmp	byte ptr [r12 + 12], r14b
	setge	r10b
	cmp	byte ptr [r12 + 13], r14b
	setge	r12b
	cmp	byte ptr [rcx + 14], r14b
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	setge	r9b
	cmp	byte ptr [rcx + 16], r14b
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	setge	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 18], r14b
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	setge	r14b
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 24], bl
	setge	byte ptr [rsp + 272]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 25], bl
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 26], bl
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 27], bl
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 28], bl
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 29], bl
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 30], bl
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 31], bl
	setge	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r15b, 2
	or	r15b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r15b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 288]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 360]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r14b, dl
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	byte ptr [rsi + 3], bl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 360], rsi      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB10_36
# %bb.37:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 608]      # 8-byte Reload
	jmp	.LBB10_130
.LBB10_38:
	cmp	edi, 7
	je	.LBB10_92
# %bb.39:
	cmp	edi, 8
	jne	.LBB10_175
# %bb.40:
	mov	r13, qword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_44
# %bb.41:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_42:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	mov	edx, 0
	adc	dl, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_42
# %bb.43:
	add	r11, 1
.LBB10_44:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_106
# %bb.45:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_46:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	setae	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setae	dil
	cmp	qword ptr [rsi + 16], r13
	setae	r14b
	cmp	qword ptr [rsi + 24], r13
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setae	al
	cmp	qword ptr [rsi + 56], r13
	setae	bl
	cmp	qword ptr [rsi + 64], r13
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setae	dl
	cmp	qword ptr [rsi + 80], r13
	setae	r9b
	cmp	qword ptr [rsi + 88], r13
	setae	r10b
	cmp	qword ptr [rsi + 96], r13
	setae	r11b
	cmp	qword ptr [rsi + 104], r13
	setae	r12b
	cmp	qword ptr [rsi + 112], r13
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setae	cl
	cmp	qword ptr [rsi + 128], r13
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setae	r15b
	cmp	qword ptr [rsi + 192], r13
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setae	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setae	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r11], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r11 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], r8b
	add	rsi, 256
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB10_46
# %bb.47:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB10_107
	jmp	.LBB10_175
.LBB10_48:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_52
# %bb.49:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_50:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	mov	edx, 0
	adc	dl, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_50
# %bb.51:
	add	r11, 1
.LBB10_52:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_109
# %bb.53:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_54:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setae	al
	cmp	word ptr [rsi + 2], r13w
	setae	dil
	cmp	word ptr [rsi + 4], r13w
	setae	r14b
	cmp	word ptr [rsi + 6], r13w
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	setae	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 14], r13w
	setae	bl
	cmp	word ptr [rsi + 16], r13w
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	setae	dl
	cmp	word ptr [rsi + 20], r13w
	setae	r9b
	cmp	word ptr [rsi + 22], r13w
	setae	r10b
	cmp	word ptr [rsi + 24], r13w
	setae	r11b
	cmp	word ptr [rsi + 26], r13w
	setae	r12b
	cmp	word ptr [rsi + 28], r13w
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	setae	cl
	cmp	word ptr [rsi + 32], r13w
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	setae	r15b
	cmp	word ptr [rsi + 48], r13w
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	setae	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	setae	r8b
	add	dil, dil
	or	dil, al
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 64
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB10_54
# %bb.55:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB10_110
	jmp	.LBB10_175
.LBB10_56:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_60
# %bb.57:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_58:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	setge	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_58
# %bb.59:
	add	r11, 1
.LBB10_60:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_112
# %bb.61:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_62:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setge	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	setge	dil
	cmp	word ptr [rsi + 4], r13w
	setge	r14b
	cmp	word ptr [rsi + 6], r13w
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	setge	al
	cmp	word ptr [rsi + 14], r13w
	setge	bl
	cmp	word ptr [rsi + 16], r13w
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	setge	dl
	cmp	word ptr [rsi + 20], r13w
	setge	r9b
	cmp	word ptr [rsi + 22], r13w
	setge	r10b
	cmp	word ptr [rsi + 24], r13w
	setge	r11b
	cmp	word ptr [rsi + 26], r13w
	setge	r12b
	cmp	word ptr [rsi + 28], r13w
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	setge	cl
	cmp	word ptr [rsi + 32], r13w
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	setge	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	setge	r15b
	cmp	word ptr [rsi + 48], r13w
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	setge	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	setge	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 64
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB10_62
# %bb.63:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB10_113
	jmp	.LBB10_175
.LBB10_64:
	mov	r13, qword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_68
# %bb.65:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_66:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	setge	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_66
# %bb.67:
	add	r11, 1
.LBB10_68:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_115
# %bb.69:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_70:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setge	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setge	dil
	cmp	qword ptr [rsi + 16], r13
	setge	r14b
	cmp	qword ptr [rsi + 24], r13
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setge	al
	cmp	qword ptr [rsi + 56], r13
	setge	bl
	cmp	qword ptr [rsi + 64], r13
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setge	dl
	cmp	qword ptr [rsi + 80], r13
	setge	r9b
	cmp	qword ptr [rsi + 88], r13
	setge	r10b
	cmp	qword ptr [rsi + 96], r13
	setge	r11b
	cmp	qword ptr [rsi + 104], r13
	setge	r12b
	cmp	qword ptr [rsi + 112], r13
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setge	cl
	cmp	qword ptr [rsi + 128], r13
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setge	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setge	r15b
	cmp	qword ptr [rsi + 192], r13
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setge	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setge	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 256
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB10_70
# %bb.71:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB10_116
	jmp	.LBB10_175
.LBB10_72:
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovss	xmm0, dword ptr [rdx]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB10_76
# %bb.73:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_74:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	setbe	dl
	add	rsi, 4
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_74
# %bb.75:
	add	r11, 1
.LBB10_76:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_118
# %bb.77:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_78:                              # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	setbe	byte ptr [rsp + 160]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 4]
	setbe	r9b
	vucomiss	xmm0, dword ptr [rsi + 8]
	setbe	r14b
	vucomiss	xmm0, dword ptr [rsi + 12]
	setbe	r13b
	vucomiss	xmm0, dword ptr [rsi + 16]
	setbe	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 20]
	setbe	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 24]
	setbe	al
	vucomiss	xmm0, dword ptr [rsi + 28]
	setbe	bl
	vucomiss	xmm0, dword ptr [rsi + 32]
	setbe	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 36]
	setbe	dl
	vucomiss	xmm0, dword ptr [rsi + 40]
	setbe	dil
	vucomiss	xmm0, dword ptr [rsi + 44]
	setbe	r10b
	vucomiss	xmm0, dword ptr [rsi + 48]
	setbe	r11b
	vucomiss	xmm0, dword ptr [rsi + 52]
	setbe	r12b
	vucomiss	xmm0, dword ptr [rsi + 56]
	setbe	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 60]
	setbe	cl
	vucomiss	xmm0, dword ptr [rsi + 64]
	setbe	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 68]
	setbe	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 72]
	setbe	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 76]
	setbe	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 80]
	setbe	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 84]
	setbe	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 88]
	setbe	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 92]
	setbe	r15b
	vucomiss	xmm0, dword ptr [rsi + 96]
	setbe	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 100]
	setbe	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 104]
	setbe	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 108]
	setbe	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 112]
	setbe	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 116]
	setbe	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 120]
	setbe	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rsi + 124]
	setbe	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 120]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 80]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	edi, edx
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	mov	byte ptr [rdx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rdx + 1], cl
	or	r15b, dil
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r8b, 7
	or	r8b, bl
	or	r8b, cl
	mov	byte ptr [rdx + 2], r15b
	mov	byte ptr [rdx + 3], r8b
	add	rsi, 128
	add	rdx, 4
	mov	qword ptr [rsp + 272], rdx      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB10_78
# %bb.79:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB10_119
	jmp	.LBB10_175
.LBB10_80:
	mov	r14b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_84
# %bb.81:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_82:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r14b
	lea	rsi, [rsi + 1]
	mov	edx, 0
	adc	dl, -1
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r11 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_82
# %bb.83:
	add	r11, 1
.LBB10_84:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_121
# %bb.85:
	cmp	r15, 32
	mov	dword ptr [rsp + 28], r14d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 368], r15      # 8-byte Spill
	jb	.LBB10_88
# %bb.86:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r11, rax
	jae	.LBB10_185
# %bb.87:
	lea	rax, [r11 + 4*r15]
	cmp	rsi, rax
	jae	.LBB10_185
.LBB10_88:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	r12, rsi
	mov	qword ptr [rsp + 360], r11      # 8-byte Spill
.LBB10_89:
	sub	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_90:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, r12
	cmp	byte ptr [r12], r14b
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	byte ptr [r12 + 1], r14b
	setae	r8b
	cmp	byte ptr [r12 + 2], r14b
	setae	r15b
	cmp	byte ptr [r12 + 3], r14b
	setae	r13b
	cmp	byte ptr [r12 + 4], r14b
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 5], r14b
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 6], r14b
	setae	al
	cmp	byte ptr [r12 + 7], r14b
	setae	r11b
	cmp	byte ptr [r12 + 8], r14b
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [r12 + 9], r14b
	setae	dl
	cmp	byte ptr [r12 + 10], r14b
	setae	sil
	cmp	byte ptr [r12 + 11], r14b
	setae	dil
	cmp	byte ptr [r12 + 12], r14b
	setae	r10b
	cmp	byte ptr [r12 + 13], r14b
	setae	r12b
	cmp	byte ptr [rcx + 14], r14b
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	setae	r9b
	cmp	byte ptr [rcx + 16], r14b
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 18], r14b
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	setae	r14b
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 24], bl
	setae	byte ptr [rsp + 272]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 25], bl
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 26], bl
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 27], bl
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 28], bl
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 29], bl
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 30], bl
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	byte ptr [rcx + 31], bl
	setae	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r15b, 2
	or	r15b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 320]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r15b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 288]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 360]      # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r14b, dl
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rsi + 2], r14b
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	byte ptr [rsi + 3], bl
	lea	r12, [rcx + 32]
	add	rsi, 4
	mov	qword ptr [rsp + 360], rsi      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB10_90
# %bb.91:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 368]      # 8-byte Reload
	jmp	.LBB10_122
.LBB10_92:
	mov	r13d, dword ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_96
# %bb.93:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_94:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	setge	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r11 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r11 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_94
# %bb.95:
	add	r11, 1
.LBB10_96:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_125
# %bb.97:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_98:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	setge	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setge	dil
	cmp	dword ptr [rsi + 8], r13d
	setge	r14b
	cmp	dword ptr [rsi + 12], r13d
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setge	al
	cmp	dword ptr [rsi + 28], r13d
	setge	bl
	cmp	dword ptr [rsi + 32], r13d
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setge	dl
	cmp	dword ptr [rsi + 40], r13d
	setge	r9b
	cmp	dword ptr [rsi + 44], r13d
	setge	r10b
	cmp	dword ptr [rsi + 48], r13d
	setge	r11b
	cmp	dword ptr [rsi + 52], r13d
	setge	r12b
	cmp	dword ptr [rsi + 56], r13d
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setge	cl
	cmp	dword ptr [rsi + 64], r13d
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setge	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setge	r15b
	cmp	dword ptr [rsi + 96], r13d
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setge	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setge	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r11], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r11 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r11 + 2], r15b
	mov	byte ptr [r11 + 3], r8b
	add	rsi, 128
	add	r11, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB10_98
# %bb.99:
	mov	r14, r11
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	shl	r15, 5
	cmp	r15, r10
	jl	.LBB10_126
	jmp	.LBB10_175
.LBB10_100:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
.LBB10_101:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_133
# %bb.102:
	xor	r11d, r11d
	jmp	.LBB10_135
.LBB10_103:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
.LBB10_104:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_137
# %bb.105:
	xor	r11d, r11d
	jmp	.LBB10_139
.LBB10_106:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
.LBB10_107:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_141
# %bb.108:
	xor	r11d, r11d
	jmp	.LBB10_143
.LBB10_109:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
.LBB10_110:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_145
# %bb.111:
	xor	r11d, r11d
	jmp	.LBB10_147
.LBB10_112:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
.LBB10_113:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_150
# %bb.114:
	xor	r11d, r11d
	jmp	.LBB10_152
.LBB10_115:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
.LBB10_116:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_154
# %bb.117:
	xor	r11d, r11d
	jmp	.LBB10_156
.LBB10_118:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
.LBB10_119:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_158
# %bb.120:
	xor	r11d, r11d
	jmp	.LBB10_160
.LBB10_121:
	mov	qword ptr [rsp + 360], r11      # 8-byte Spill
	mov	r12, rsi
.LBB10_122:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
# %bb.123:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_163
# %bb.124:
	xor	esi, esi
	jmp	.LBB10_166
.LBB10_125:
	mov	r14, r11
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
.LBB10_126:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_168
# %bb.127:
	xor	r11d, r11d
	jmp	.LBB10_170
.LBB10_128:
	mov	r13, r11
	sar	r15, 5
	cmp	r10, 32
	jge	.LBB10_31
.LBB10_129:
	mov	qword ptr [rsp + 360], r13      # 8-byte Spill
	mov	r12, rsi
.LBB10_130:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_175
# %bb.131:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_176
# %bb.132:
	xor	esi, esi
	jmp	.LBB10_179
.LBB10_133:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB10_134:                             # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	mov	edi, 0
	adc	dil, -1
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r15 + rdx]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rdx], al
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rdx], bl
	cmp	r9, r11
	jne	.LBB10_134
.LBB10_135:
	test	r8b, 1
	je	.LBB10_175
# %bb.136:
	xor	eax, eax
	cmp	dword ptr [rsi], r13d
	jmp	.LBB10_149
.LBB10_137:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB10_138:                             # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rsi]
	setbe	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	vucomisd	xmm0, qword ptr [rsi + 8]
	setbe	al
	add	rsi, 16
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB10_138
.LBB10_139:
	test	r8b, 1
	je	.LBB10_175
# %bb.140:
	vucomisd	xmm0, qword ptr [rsi]
	jmp	.LBB10_162
.LBB10_141:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB10_142:                             # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	mov	edi, 0
	adc	dil, -1
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r15 + rdx]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rdx], al
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rdx], bl
	cmp	r9, r11
	jne	.LBB10_142
.LBB10_143:
	test	r8b, 1
	je	.LBB10_175
# %bb.144:
	xor	eax, eax
	cmp	qword ptr [rsi], r13
	jmp	.LBB10_149
.LBB10_145:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB10_146:                             # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	mov	edi, 0
	adc	dil, -1
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r15 + rdx]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rdx], al
	add	r11, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rdx], bl
	cmp	r9, r11
	jne	.LBB10_146
.LBB10_147:
	test	r8b, 1
	je	.LBB10_175
# %bb.148:
	xor	eax, eax
	cmp	word ptr [rsi], r13w
.LBB10_149:
	adc	al, -1
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	jmp	.LBB10_174
.LBB10_150:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB10_151:                             # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	setge	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	setge	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB10_151
.LBB10_152:
	test	r8b, 1
	je	.LBB10_175
# %bb.153:
	cmp	word ptr [rsi], r13w
	jmp	.LBB10_172
.LBB10_154:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB10_155:                             # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setge	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	setge	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB10_155
.LBB10_156:
	test	r8b, 1
	je	.LBB10_175
# %bb.157:
	cmp	qword ptr [rsi], r13
	jmp	.LBB10_172
.LBB10_158:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB10_159:                             # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rsi]
	setbe	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	vucomiss	xmm0, dword ptr [rsi + 4]
	setbe	al
	add	rsi, 8
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB10_159
.LBB10_160:
	test	r8b, 1
	je	.LBB10_175
# %bb.161:
	vucomiss	xmm0, dword ptr [rsi]
.LBB10_162:
	setbe	al
	jmp	.LBB10_173
.LBB10_163:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 360]      # 8-byte Reload
	.p2align	4, 0x90
.LBB10_164:                             # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r12 + rsi], r14b
	mov	ebx, 0
	adc	bl, -1
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	byte ptr [r12 + rsi + 1], r14b
	lea	rsi, [rsi + 2]
	mov	ebx, 0
	adc	bl, -1
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB10_164
# %bb.165:
	add	r12, rsi
.LBB10_166:
	test	r8b, 1
	je	.LBB10_175
# %bb.167:
	xor	eax, eax
	cmp	byte ptr [r12], r14b
	adc	al, -1
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 360]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	jmp	.LBB10_181
.LBB10_168:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	mov	r15, r14
	.p2align	4, 0x90
.LBB10_169:                             # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setge	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	setge	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r15 + rdi], dl
	cmp	r10, r11
	jne	.LBB10_169
.LBB10_170:
	test	r8b, 1
	je	.LBB10_175
# %bb.171:
	cmp	dword ptr [rsi], r13d
.LBB10_172:
	setge	al
.LBB10_173:
	neg	al
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
.LBB10_174:
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
.LBB10_175:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB10_176:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 360]      # 8-byte Reload
	.p2align	4, 0x90
.LBB10_177:                             # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [r12 + rsi], r14b
	setge	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	byte ptr [r12 + rsi + 1], r14b
	lea	rsi, [rsi + 2]
	setge	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB10_177
# %bb.178:
	add	r12, rsi
.LBB10_179:
	test	r8b, 1
	je	.LBB10_175
# %bb.180:
	cmp	byte ptr [r12], r14b
	setge	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 360]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
.LBB10_181:
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB10_175
.LBB10_182:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 368], rax      # 8-byte Spill
	mov	qword ptr [rsp + 416], r15      # 8-byte Spill
	lea	rax, [4*r15]
	add	rax, r13
	mov	qword ptr [rsp + 360], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 384], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 272], r13      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_183:                             # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 200], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 168], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rsi + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rsi + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rsi + rcx + 1]
	mov	rdx, rcx
	vmovd	xmm4, eax
	mov	rcx, rbx
	movzx	eax, byte ptr [rsi + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rsi + rdx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 576], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rdx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rsi + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rsi + rdx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rsi + rdx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rsi + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rsi + rdx + 6]
	mov	qword ptr [rsp + 256], rdx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rsi + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rsi + rdx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rsi + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	or	rbx, 544
	mov	qword ptr [rsp + 248], rbx      # 8-byte Spill
	mov	rax, rcx
	or	rax, 576
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	rax, rcx
	or	rax, 608
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	r11, rcx
	or	r11, 640
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	rax, rcx
	or	rax, 672
	mov	r12, rax
	mov	qword ptr [rsp + 176], rax      # 8-byte Spill
	mov	rdi, rcx
	or	rdi, 704
	mov	qword ptr [rsp + 240], rdi      # 8-byte Spill
	mov	rdx, rcx
	or	rdx, 736
	mov	qword ptr [rsp + 216], rdx      # 8-byte Spill
	mov	rax, rcx
	or	rax, 768
	mov	qword ptr [rsp + 224], rax      # 8-byte Spill
	mov	r15, rcx
	or	r15, 800
	mov	qword ptr [rsp + 112], r15      # 8-byte Spill
	mov	r14, rcx
	or	r14, 832
	mov	qword ptr [rsp + 192], r14      # 8-byte Spill
	mov	r9, rcx
	or	r9, 864
	mov	qword ptr [rsp + 264], r9       # 8-byte Spill
	mov	r8, rcx
	or	r8, 896
	mov	qword ptr [rsp + 128], r8       # 8-byte Spill
	mov	r10, rcx
	or	r10, 928
	mov	qword ptr [rsp + 88], r10       # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 232], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 32], rcx       # 8-byte Spill
	vpinsrb	xmm9, xmm0, byte ptr [rsi + rbx], 1
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + r13], 2
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 7
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx], 15
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 1
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15], 2
	mov	r9, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9], 3
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10], 4
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11], 5
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8], 6
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14], 7
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 9
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 12
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 13
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12], 14
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 15
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 1
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 2
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 3
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 4
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 5
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 6
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 7
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 8
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 9
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 10
	mov	rdx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 12
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rsi + rbx + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 1], 6
	mov	rbx, r8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 9
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 1], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 13
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 1], 14
	vinserti128	ymm13, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 1], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1280], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm10, edi
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 576]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 2], 1
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 2], 2
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 2], 3
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 5
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 2], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 7
	mov	r12, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 8
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 9
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 2], 10
	mov	r11, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 2], 12
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 2], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 15
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 2], 1
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 2
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 4
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 7
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 9
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rsi + rcx + 3], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 2
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 3
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 4
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 3], 6
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 3], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 3], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 3], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 3], 13
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 3], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rsi + rax + 3], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 4
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 5
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 3], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 3], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 9
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 3], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm8, edi
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 448]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 1
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 4], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 3
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 4
	mov	rax, r10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 4], 5
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 4], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 4], 7
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 4], 8
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 9
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 4], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 12
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 4], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 4], 15
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm15, byte ptr [rsi + rcx + 4], 1
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 4], 2
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 4
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 5
	mov	rdi, r14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 7
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 4], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 9
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 11
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 12
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 4], 13
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 4], 15
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm4, xmm14, byte ptr [rsi + r14 + 5], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 2
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 5], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 7
	mov	r15, rax
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 5], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 5], 11
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 13
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 5], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 15
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rsi + rcx + 5], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 4
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 5], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 5], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 9
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	vpinsrb	xmm0, xmm5, byte ptr [rsi + r12 + 5], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm15, ymm0, xmm4, 1
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 10]
	vmovd	xmm4, edi
	mov	r11, r14
	vpinsrb	xmm0, xmm12, byte ptr [rsi + r14 + 6], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 6], 3
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 6], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 5
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 6], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 6], 8
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 6], 9
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 6], 10
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 6], 11
	mov	rax, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 15
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rcx + 6], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 2
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 4
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 5
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 6], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 6], 7
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 9
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 12
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 14
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 1
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 2
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 7], 4
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 7], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 7], 6
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 7], 7
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 7], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 7], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 7], 15
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 1
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 7], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 7], 6
	mov	r8, r13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 7
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 7], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 10
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 7], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rax + 7], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 11]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 11]
	vmovd	xmm2, edi
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rsi + r15 + 8], 1
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 8], 2
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 8], 3
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 8], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 8], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 8], 6
	mov	r11, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 8], 8
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 9
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 10
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 8], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 12
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 8], 15
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm10, byte ptr [rsi + rdx + 8], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 8], 2
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 4
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 8], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 8], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 9
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 8], 10
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 11
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 8], 12
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 13
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 8], 14
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r13 + 8], 15
	vpinsrb	xmm6, xmm8, byte ptr [rsi + r15 + 9], 1
	mov	r13, r15
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 3
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r14 + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 6
	mov	r9, rax
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r11 + 9], 7
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r10 + 9], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 9
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r15 + 9], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 11
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r11 + 9], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm7, xmm11, byte ptr [rsi + rax + 9], 1
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 9], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdi + 9], 4
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 9], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r12 + 9], 12
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 9], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1248], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm5, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 10], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 10], 4
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 10], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 7
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 10], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 10], 10
	mov	r9, qword ptr [rsp + 264]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 10], 12
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 10], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 15
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 10], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 2
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 3
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 10], 4
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 9
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 10], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 13
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 11], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 4
	mov	r13, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 11], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 8
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 11], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 11], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 11], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 11], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 11], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 11], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 9
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 11], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm3  # 32-byte Spill
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 11], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 13]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm1  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 13]
	vmovd	xmm1, edi
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 12], 1
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 12], 2
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 12], 4
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 12], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 6
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 12], 7
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 12], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 12], 9
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 12], 10
	mov	r14, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 12], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 12], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 12], 15
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rsi + rax + 12], 1
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 12], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 4
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 12], 9
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 12], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 11
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 12], 12
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 12], 14
	mov	r15, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 1
	mov	r15, r11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 13], 3
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 13], 5
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 13], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 13], 11
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 13], 12
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 13
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 13], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 15
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 13], 2
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 3
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 4
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 13], 5
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 13], 7
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 13], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 13], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 11
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 13], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rax + 13], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm0  # 32-byte Spill
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 14]
	vmovd	xmm0, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 2
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 14], 3
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 5
	mov	r12, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 14], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 8
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 14], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 14], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 14], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 15
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 14], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 3
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 14], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 14], 5
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 14], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 14], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 14], 9
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 14], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 14], 12
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 14], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 15]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 1
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 15], 3
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 4
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 15], 6
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 15], 7
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 15], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 9
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 10
	mov	r15, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 15], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 15
	movzx	edi, byte ptr [rsi + r13 + 15]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 1
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 2
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 15], 4
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 15], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 15], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 15], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 15], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 16]
	vmovd	xmm0, edi
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 16], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 3
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 4
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 16], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 16], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 16], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 16], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 16], 15
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 16]
	vmovd	xmm1, edi
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 16], 1
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 16], 2
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 3
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 16], 5
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 7
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 8
	mov	r11, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 16], 9
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 12
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 14
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 15
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r13 + 17]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 1
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 2
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 17], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 17], 5
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 17], 7
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 17], 8
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 9
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 17], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 17], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 17], 15
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 17]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 17], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 17], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 3
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 17], 4
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 6
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 17], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 17], 9
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 10
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 17], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rax + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r13 + 18]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 3
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 18], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 18], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 18], 9
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 18], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 18], 11
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 18], 12
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 18], 14
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 18], 15
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 18]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 1
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 2
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 18], 4
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 5
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 18], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 8
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 18], 9
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 18], 11
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 12
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 18], 13
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 18], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 15
	movzx	edi, byte ptr [rsi + r13 + 19]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 1
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 2
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 3
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 19], 4
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 5
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 6
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 7
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 9
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 19], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 19], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 19], 15
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 19]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 1
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 19], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 3
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 4
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 19], 5
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 19], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 19], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 19], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 11
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 19], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 19], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 20]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 1
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 2
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 20], 4
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 5
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 20], 6
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 7
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 8
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 9
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 10
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 20], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 20]
	vmovd	xmm1, edi
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 20], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 20], 2
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 20], 3
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 20], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 20], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 20], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 7
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 8
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 20], 9
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 12
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 13
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 20], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 15
	movzx	edi, byte ptr [rsi + r11 + 21]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 2
	mov	r11, rdx
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 3
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 21], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 21], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 21], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 21], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 15
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 21]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 21], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 21], 4
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 21], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 6
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 7
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 21], 9
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 21], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 11
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 21], 12
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rbx + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 22]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 3
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 4
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 5
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 22], 6
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 7
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 8
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 9
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 10
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 11
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 22], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 22]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 1
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 22], 2
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 3
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 22], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 22], 7
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 22], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 22], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 22], 12
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 22], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 22], 15
	movzx	edi, byte ptr [rsi + rcx + 23]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 1
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 3
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 23], 6
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 23], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 23], 10
	mov	r12, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 23], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 23], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 23], 15
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 23]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 23], 2
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 23], 3
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 23], 4
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 23], 5
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 23], 6
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 23], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 9
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 23], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 23], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 23], 13
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 23], 14
	mov	r11, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm11, ymm3, xmm2, 1
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 24]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 2
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 3
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 4
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 5
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 24], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 24], 7
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 9
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 24], 11
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 12
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 24], 15
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 24]
	vmovd	xmm1, edi
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 1
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 24], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 24], 6
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 24], 7
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 24], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 11
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 24], 12
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 24], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 24], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 25]
	vmovd	xmm2, edi
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 1
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 25], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 3
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 4
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 25], 5
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 6
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 8
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 25], 9
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 10
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 25], 11
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 25], 12
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 25], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 25], 14
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 25], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 25]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 25], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 2
	mov	r9, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 25], 3
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 4
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 25], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 9
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 10
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 25], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 25], 13
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 25], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rcx + 25], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 26]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 2
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 3
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 5
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 6
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 26], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 26], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 26], 12
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 13
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 26], 15
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 26]
	vmovd	xmm1, edi
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 1
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 26], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 4
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 5
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 6
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 7
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 26], 8
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 9
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 26], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 26], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 12
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 26], 13
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 15
	movzx	edi, byte ptr [rsi + rcx + 27]
	vmovd	xmm2, edi
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 27], 1
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 2
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 27], 3
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 4
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 27], 5
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 6
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 7
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 8
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 27], 9
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 27], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 27], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 27], 15
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 27]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 1
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 2
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 3
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 4
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 27], 5
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 27], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 27], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 10
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 11
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 27], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 27], 13
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 27], 14
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 28]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 28], 1
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 28], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 28], 3
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 28], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 28], 5
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 6
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 28], 7
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 28], 8
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 10
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 28], 11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 12
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 28], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 15
	movzx	edi, byte ptr [rsi + rax + 28]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 1
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 2
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 3
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 5
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 28], 6
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 7
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 28], 9
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 28], 10
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 28], 12
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 28], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 14
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 29]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 29], 2
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 29], 4
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 5
	mov	r12, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 29], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 29], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 29], 8
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 9
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 29], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 29], 11
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 29], 13
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 29], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 15
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r15 + 29]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 3
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 29], 4
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 29], 6
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 29], 7
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 29], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 11
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 29], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm3, byte ptr [rsi + rax + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm4, byte ptr [rsi + r13 + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 30]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 30], 1
	movzx	edi, byte ptr [rsi + rax + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 31], 1
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 3
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 4
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 31], 6
	mov	r13, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 7
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 31], 10
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 11
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 31], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rsi + rax + 31], 15
	movzx	eax, byte ptr [rsi + r15 + 30]
	vmovd	xmm1, eax
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 30], 1
	movzx	eax, byte ptr [rsi + r15 + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 31], 1
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r11 + 31], 4
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 31], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rbx + 31], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 31], 12
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 13
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm2, ymmword ptr [rsp + 384]   # 32-byte Reload
	vpcmpgtb	ymm0, ymm2, ymm13
	vpcmpgtb	ymm7, ymm2, ymmword ptr [rsp + 1280] # 32-byte Folded Reload
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI10_0] # ymm5 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	vpandn	ymm7, ymm7, ymm5
	vpaddb	ymm0, ymm7, ymm0
	vpcmpgtb	ymm7, ymm2, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI10_1] # ymm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpandn	ymm7, ymm7, ymm6
	vpcmpgtb	ymm12, ymm2, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI10_2] # ymm3 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpandn	ymm12, ymm12, ymm3
	vpor	ymm7, ymm12, ymm7
	vpcmpgtb	ymm12, ymm2, ymm14
	vmovdqa	ymm8, ymmword ptr [rip + .LCPI10_3] # ymm8 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpandn	ymm12, ymm12, ymm8
	vpor	ymm7, ymm12, ymm7
	vpcmpeqd	ymm1, ymm1, ymm1
	vpsubb	ymm0, ymm0, ymm1
	vpcmpeqd	ymm4, ymm4, ymm4
	vpor	ymm0, ymm0, ymm7
	vpcmpgtb	ymm7, ymm2, ymm15
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI10_4] # ymm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpandn	ymm7, ymm7, ymm1
	vpcmpgtb	ymm12, ymm2, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI10_5] # ymm13 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpandn	ymm12, ymm12, ymm13
	vpor	ymm7, ymm12, ymm7
	vpcmpgtb	ymm12, ymm2, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI10_6] # ymm9 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpandn	ymm12, ymm12, ymm9
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vpcmpgtb	ymm7, ymm2, ymmword ptr [rsp + 1248] # 32-byte Folded Reload
	vpcmpgtb	ymm12, ymm2, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm5
	vpaddb	ymm7, ymm12, ymm7
	vpcmpgtb	ymm12, ymm2, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm6
	vpcmpgtb	ymm15, ymm2, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm3
	vpor	ymm12, ymm12, ymm15
	vpcmpgtb	ymm15, ymm2, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm12, ymm12, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpgtb	ymm12, ymm2, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpandn	ymm12, ymm12, ymm1
	vpcmpgtb	ymm15, ymm2, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm13
	vpor	ymm12, ymm12, ymm15
	vpcmpgtb	ymm15, ymm2, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm9
	vpor	ymm12, ymm12, ymm15
	vpor	ymm12, ymm12, ymm7
	vpcmpgtb	ymm7, ymm2, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpcmpgtb	ymm15, ymm2, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm5
	vpaddb	ymm7, ymm15, ymm7
	vpcmpgtb	ymm15, ymm2, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm6
	vpcmpgtb	ymm14, ymm2, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm3
	vpor	ymm14, ymm15, ymm14
	vpcmpgtb	ymm15, ymm2, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpandn	ymm15, ymm15, ymm8
	vpor	ymm14, ymm14, ymm15
	vpsubb	ymm7, ymm7, ymm4
	vpor	ymm7, ymm14, ymm7
	vpcmpgtb	ymm14, ymm2, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpandn	ymm14, ymm14, ymm1
	vpcmpgtb	ymm10, ymm2, ymm10
	vpandn	ymm10, ymm10, ymm13
	vpor	ymm10, ymm14, ymm10
	vpcmpgtb	ymm11, ymm2, ymm11
	vmovdqa	ymm14, ymm9
	vpandn	ymm11, ymm11, ymm9
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vpcmpgtb	ymm9, ymm2, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpcmpgtb	ymm8, ymm2, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpandn	ymm8, ymm8, ymm5
	vpaddb	ymm8, ymm8, ymm9
	vpcmpgtb	ymm5, ymm2, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpandn	ymm5, ymm5, ymm6
	vpcmpgtb	ymm6, ymm2, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpandn	ymm6, ymm6, ymm3
	vpor	ymm5, ymm5, ymm6
	vpcmpgtb	ymm3, ymm2, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpandn	ymm3, ymm3, ymmword ptr [rip + .LCPI10_3]
	vpor	ymm3, ymm5, ymm3
	vpsubb	ymm5, ymm8, ymm4
	vpor	ymm3, ymm5, ymm3
	vpcmpgtb	ymm4, ymm2, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpandn	ymm4, ymm4, ymm1
	vpcmpgtb	ymm1, ymm2, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpandn	ymm1, ymm1, ymm13
	vpor	ymm1, ymm4, ymm1
	vpcmpgtb	ymm2, ymm2, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpandn	ymm2, ymm2, ymm14
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm0, ymm12       # ymm2 = ymm0[0],ymm12[0],ymm0[1],ymm12[1],ymm0[2],ymm12[2],ymm0[3],ymm12[3],ymm0[4],ymm12[4],ymm0[5],ymm12[5],ymm0[6],ymm12[6],ymm0[7],ymm12[7],ymm0[16],ymm12[16],ymm0[17],ymm12[17],ymm0[18],ymm12[18],ymm0[19],ymm12[19],ymm0[20],ymm12[20],ymm0[21],ymm12[21],ymm0[22],ymm12[22],ymm0[23],ymm12[23]
	vpunpckhbw	ymm0, ymm0, ymm12       # ymm0 = ymm0[8],ymm12[8],ymm0[9],ymm12[9],ymm0[10],ymm12[10],ymm0[11],ymm12[11],ymm0[12],ymm12[12],ymm0[13],ymm12[13],ymm0[14],ymm12[14],ymm0[15],ymm12[15],ymm0[24],ymm12[24],ymm0[25],ymm12[25],ymm0[26],ymm12[26],ymm0[27],ymm12[27],ymm0[28],ymm12[28],ymm0[29],ymm12[29],ymm0[30],ymm12[30],ymm0[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 376]      # 8-byte Reload
	vmovdqu	ymmword ptr [r13 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r13 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r13 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r13 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 416]      # 8-byte Folded Reload
	jne	.LBB10_183
# %bb.184:
	mov	r15, qword ptr [rsp + 608]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 416]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 368]      # 8-byte Reload
	jne	.LBB10_35
	jmp	.LBB10_130
.LBB10_185:
	and	r15, -32
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 536], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r15      # 8-byte Spill
	lea	rax, [r11 + 4*r15]
	mov	qword ptr [rsp + 360], rax      # 8-byte Spill
	vmovd	xmm0, r14d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 272], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_186:                             # =>This Inner Loop Header: Depth=1
	mov	rbx, rax
	mov	qword ptr [rsp + 376], rax      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 200], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rsi + rax]
	mov	rdx, rcx
	vmovd	xmm0, eax
	mov	rcx, rbx
	movzx	eax, byte ptr [rsi + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rsi + rdx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rsi + rbx + 1]
	vmovd	xmm5, eax
	movzx	eax, byte ptr [rsi + rdx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rdx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rsi + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rsi + rdx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 544], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rsi + rbx + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rsi + rdx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rsi + rbx + 5]
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rsi + rdx + 6]
	mov	qword ptr [rsp + 264], rdx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rsi + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rsi + rdx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rsi + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	r13, rbx
	or	r13, 544
	mov	rax, rbx
	or	rax, 576
	mov	r12, rax
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	r14, rbx
	or	r14, 608
	mov	qword ptr [rsp + 192], r14      # 8-byte Spill
	or	rbx, 640
	mov	qword ptr [rsp + 240], rbx      # 8-byte Spill
	mov	r9, rcx
	or	r9, 672
	mov	qword ptr [rsp + 136], r9       # 8-byte Spill
	mov	rax, rcx
	or	rax, 704
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	rax, rcx
	or	rax, 736
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	r11, rcx
	or	r11, 768
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	rdi, rcx
	or	rdi, 800
	mov	qword ptr [rsp + 88], rdi       # 8-byte Spill
	mov	r10, rcx
	or	r10, 832
	mov	qword ptr [rsp + 112], r10      # 8-byte Spill
	mov	r8, rcx
	or	r8, 864
	mov	qword ptr [rsp + 168], r8       # 8-byte Spill
	mov	rax, rcx
	or	rax, 896
	mov	r15, rax
	mov	qword ptr [rsp + 224], rax      # 8-byte Spill
	mov	rdx, rcx
	or	rdx, 928
	mov	qword ptr [rsp + 40], rdx       # 8-byte Spill
	mov	rax, rcx
	mov	qword ptr [rsp + 256], rcx      # 8-byte Spill
	or	rax, 960
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	or	rcx, 992
	mov	qword ptr [rsp + 216], rcx      # 8-byte Spill
	mov	qword ptr [rsp + 248], r13      # 8-byte Spill
	vpinsrb	xmm9, xmm0, byte ptr [rsi + r13], 1
	vpinsrb	xmm0, xmm9, byte ptr [rsi + r12], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9], 5
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 6
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx], 15
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8], 1
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10], 2
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 4
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9], 5
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14], 6
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15], 7
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi], 8
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax], 9
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11], 10
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 11
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx], 12
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 13
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12], 14
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx], 15
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymm10, ymmword ptr [rsp + 608]  # 32-byte Reload
	vpmaxub	ymm3, ymm10, ymm0
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 1
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 2
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 3
	mov	r13, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 1], 4
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 5
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 6
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 7
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 8
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 9
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 10
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 11
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 12
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 13
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 14
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 1], 15
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 1], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r10 + 1], 2
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 1], 3
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 1], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 1], 7
	mov	r14, r15
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 9
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 1], 10
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 11
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 1], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 1], 13
	mov	rbx, rax
	vpcmpeqb	ymm0, ymm0, ymm3
	vmovdqa	ymmword ptr [rsp + 1280], ymm0  # 32-byte Spill
	vpinsrb	xmm0, xmm5, byte ptr [rsi + r12 + 1], 14
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm9, edi
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 1], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 8]
	vmovd	xmm6, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 480]   # 16-byte Reload
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 2], 1
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 2
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 2], 4
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 2], 5
	mov	r9, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 2], 6
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 2], 7
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 8
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 9
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 10
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 11
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 2], 13
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 2], 14
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 2], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 2], 1
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 2
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 2], 4
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 2], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 2], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 2], 7
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 2], 8
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 2], 9
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 2], 10
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 2], 11
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 2], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rsi + r15 + 3], 1
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 2
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 3
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 4
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 3], 6
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r8 + 3], 7
	mov	r15, r8
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 3], 8
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 9
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 3], 10
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 11
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 12
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 3], 13
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 3], 14
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rsi + rax + 3], 1
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 3], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 3], 6
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 7
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 3], 8
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r12 + 3], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 10
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 11
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 3], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 3], 14
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rax + 3], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm8, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 9]
	vmovd	xmm11, edi
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vmovdqa	xmm0, xmmword ptr [rsp + 544]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 4], 1
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 4], 2
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 4], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 4
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 5
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 4], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 4], 7
	mov	r12, r13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 8
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 4], 9
	mov	r10, r11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 4], 10
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 4], 11
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 4], 12
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 4], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 14
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 4], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm15, byte ptr [rsi + rax + 4], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 4], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 4
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 4], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 6
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 8
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 10
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 4], 11
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 4], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 14
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 4], 15
	vpinsrb	xmm4, xmm14, byte ptr [rsi + rcx + 5], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 5], 2
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 5], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 4
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rcx + 5], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 5], 6
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r9 + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r12 + 5], 8
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 5], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 5], 10
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 5], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rbx + 5], 12
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r15 + 5], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 5], 14
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r10 + 5], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm13, byte ptr [rsi + rax + 5], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 5], 2
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 5], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 4
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 5], 5
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 5], 6
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 5], 7
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 8
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 9
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 10
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 11
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 5], 12
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdx + 5], 13
	vinserti128	ymm14, ymm3, xmm0, 1
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rsi + rdx + 5], 14
	mov	rdx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 10]
	vmovd	xmm3, edi
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 5], 15
	vinserti128	ymm15, ymm0, xmm4, 1
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 10]
	vmovd	xmm4, edi
	mov	r12, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rsi + r12 + 6], 1
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 6], 2
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 6], 3
	mov	rdx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 6], 4
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 6], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 6], 7
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 8
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 9
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 10
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 11
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 6], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 6], 15
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rdi + 6], 1
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 2
	mov	r10, r14
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 6], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 6], 4
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 5
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 6
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 7
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r8 + 6], 8
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r14 + 6], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 10
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 6], 11
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 6], 12
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 6], 13
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rcx + 6], 14
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r15 + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 7], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 7], 2
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 5
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 6
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 7
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 8
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 7], 9
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 10
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 11
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 13
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 14
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 7], 15
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 1
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 7], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 7], 4
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 5
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 6
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 7], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 7], 9
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 7], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 7], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 7], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 7], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 7], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 11]
	vmovd	xmm0, edi
	vinserti128	ymm1, ymm1, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1248], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 11]
	vmovd	xmm1, edi
	vpinsrb	xmm2, xmm9, byte ptr [rsi + r12 + 8], 1
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 2
	mov	r8, r13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 8], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 4
	mov	r13, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 8], 5
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 6
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 8], 7
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 8], 9
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 10
	mov	rdx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 8], 11
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 8], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 8], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 8], 14
	mov	r15, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 8], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm6, byte ptr [rsi + rax + 8], 1
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 4
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r9 + 8], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 6
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rdi + 8], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 8
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rax + 8], 9
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 8], 10
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 8], 11
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 8], 12
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 8], 13
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + rbx + 8], 14
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rsi + r11 + 8], 15
	vinserti128	ymm2, ymm5, xmm2, 1
	vpmaxub	ymm5, ymm10, ymm2
	vpinsrb	xmm6, xmm8, byte ptr [rsi + r12 + 9], 1
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r8 + 9], 3
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r13 + 9], 5
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 6
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r10 + 9], 7
	mov	r12, r10
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 8
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r10 + 9], 9
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rbx + 9], 10
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rdx + 9], 11
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r14 + 9], 12
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rsi + rcx + 9], 14
	vpinsrb	xmm6, xmm6, byte ptr [rsi + r15 + 9], 15
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm11, byte ptr [rsi + rcx + 9], 1
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r11 + 9], 2
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rcx + 9], 3
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rcx + 9], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r9 + 9], 5
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdx + 9], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rdi + 9], 7
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rcx + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 9
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 9], 10
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 11
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r13 + 9], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 9], 14
	vpcmpeqb	ymm2, ymm2, ymm5
	vmovdqa	ymmword ptr [rsp + 1216], ymm2  # 32-byte Spill
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rsi + rax + 9], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm2, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 12]
	vmovd	xmm5, edi
	mov	r15, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 10], 1
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 10], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 10], 3
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 10], 4
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 5
	mov	r9, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 10], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 10], 7
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 10], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 10], 9
	mov	r12, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 10], 10
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 11
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 10], 14
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 10], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 1
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 2
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdi + 10], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 5
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 10], 6
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r11 + 10], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rax + 10], 8
	mov	rdx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 10], 9
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 10
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r14 + 10], 11
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 10], 12
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 10], 13
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + rdx + 10], 14
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rsi + r13 + 10], 15
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 11], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 11], 2
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 11], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 11], 4
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 11], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 11], 6
	mov	rbx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 11], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 11], 8
	mov	r9, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 11], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 11], 10
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 11], 11
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 11], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 11], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 11], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 11], 15
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 11], 3
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 4
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 5
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 11], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 11], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 8
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 11], 11
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm3  # 32-byte Spill
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 11], 14
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 13]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 11], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 13]
	vmovd	xmm0, edi
	mov	r12, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm2, byte ptr [rsi + r12 + 12], 1
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 12], 2
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 12], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 12], 4
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 12], 5
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 12], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 12], 7
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 12], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 12], 9
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 12], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 12], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 12], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 12], 13
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 12], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 12], 15
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm5, byte ptr [rsi + r10 + 12], 1
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 12], 2
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 3
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 12], 4
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 5
	mov	r15, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 12], 6
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 7
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 8
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 12], 9
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 10
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 11
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 12
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 13
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 12], 14
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 13], 1
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 13], 4
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 5
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 13], 6
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 13], 8
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 9
	mov	r12, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 13], 10
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 11
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 13], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 13
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 13], 14
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 13], 15
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 13], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 13], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 13], 4
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 13], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 13], 6
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 13], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 13], 9
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 13], 10
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 11
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 13
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 13], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 13], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 14]
	vmovd	xmm0, edi
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 14], 1
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 14], 2
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 14], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 4
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 14], 6
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 14], 8
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 14], 10
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 14], 13
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 14], 14
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 14], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 1
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 14], 5
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 14], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 14], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 8
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 14], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 14], 10
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 11
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 13
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 14
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 14], 15
	mov	r15, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r15 + 15]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 15], 3
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 4
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 15], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 6
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 15], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 15], 8
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 15], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 15], 10
	mov	r14, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 15], 11
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 15], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 15], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 15], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 15], 15
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rbx + 15]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 15], 2
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 15], 3
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 15], 4
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 15], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 6
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 15], 7
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 15], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 10
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 11
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 15], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 15], 13
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 15], 14
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r15 + 16]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 1
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 2
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 3
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 16], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 16], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 7
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 16], 9
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 16], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 16], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 16], 13
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 16], 14
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 16], 15
	movzx	edi, byte ptr [rsi + rbx + 16]
	vmovd	xmm1, edi
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 16], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 16], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 16], 4
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 16], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 16], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 7
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 16], 8
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 16], 9
	mov	r10, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 16], 10
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 16], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 16], 14
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 16], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 17]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 1
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 2
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 17], 4
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 5
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 17], 6
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 7
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 8
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 9
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 17], 11
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 17], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 17], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 17], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 17]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 17], 1
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 2
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 17], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 5
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 17], 6
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 17], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 17], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 17], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 17], 11
	mov	r12, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 17], 12
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 13
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vpinsrb	xmm1, xmm3, byte ptr [rsi + r9 + 17], 15
	vpmaxub	ymm3, ymm10, ymm0
	vpcmpeqb	ymm0, ymm0, ymm3
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	vinserti128	ymm0, ymm1, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + rax + 18]
	vmovd	xmm0, edi
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 18], 1
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 2
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 18], 3
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 18], 4
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 18], 6
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 18], 7
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 18], 8
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 9
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 18], 10
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 18], 11
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 13
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 14
	mov	rdx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 18], 15
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 18]
	vmovd	xmm1, edi
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 1
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 2
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 3
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 18], 4
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 18], 6
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 7
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 8
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 9
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 10
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 18], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 18], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 14
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 18], 15
	movzx	edi, byte ptr [rsi + rax + 19]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 19], 1
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 19], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 19], 4
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 19], 5
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 19], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 19], 7
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 19], 8
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 19], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 19], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 19], 11
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 19], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 19], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 14
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 19], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 19]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 1
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 19], 2
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 19], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 4
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 19], 6
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 19], 7
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 8
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 19], 9
	mov	rdx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 10
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 11
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 12
	mov	rdx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 13
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 19], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + r9 + 19], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	mov	rdx, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 20]
	vmovd	xmm0, edi
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 1
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 20], 2
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 3
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 20], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 20], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 6
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 7
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 20], 9
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 10
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 20], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 20], 12
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 20], 14
	mov	rbx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 20], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 20]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 20], 3
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 20], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 20], 6
	mov	r10, r13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 20], 7
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 20], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 20], 9
	mov	r15, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 20], 10
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 11
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 12
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 20], 13
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 20], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 20], 15
	mov	r14, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r14 + 21]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 2
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 21], 3
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 4
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 5
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 21], 6
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 21], 7
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 21], 8
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 9
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 10
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 11
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 21], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 21], 14
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 21], 15
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rbx + 21]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 21], 1
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 2
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 4
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 6
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 21], 7
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 8
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 21], 10
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 21], 11
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 12
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 21], 13
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 21], 14
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 21], 15
	vinserti128	ymm11, ymm1, xmm0, 1
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r14 + 22]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 1
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 2
	mov	r15, rdx
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 3
	mov	r14, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 22], 4
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 22], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 22], 6
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 22], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 22], 8
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 9
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 10
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 11
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r12 + 22], 12
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 22], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 22], 14
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 22], 15
	movzx	edi, byte ptr [rsi + rbx + 22]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 1
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 22], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 22], 3
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 22], 4
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 6
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 7
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 8
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 9
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 22], 11
	mov	rbx, r10
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 22], 14
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 22], 15
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 23]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 1
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 23], 2
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 23], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 23], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 5
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 6
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 23], 7
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 23], 8
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 23], 9
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 23], 10
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 23], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r12 + 23], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 23], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 23], 14
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 23], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rcx + 23]
	vmovd	xmm3, edi
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 23], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 23], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 6
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 23], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 8
	mov	r11, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 23], 9
	mov	r12, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 23], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 23], 11
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 12
	mov	r8, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r8 + 23], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 23], 14
	vinserti128	ymm9, ymm1, xmm0, 1
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rsi + rbx + 23], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 24]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 1
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 24], 2
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 3
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 4
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 6
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 7
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 24], 8
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 24], 9
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 24], 10
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 24], 11
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 24], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 24], 15
	movzx	edi, byte ptr [rsi + rcx + 24]
	vmovd	xmm1, edi
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 24], 1
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 24], 2
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 24], 3
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 4
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 24], 5
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 24], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 7
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 10
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 24], 11
	mov	rdx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 24], 13
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdx + 24], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 24], 15
	mov	r8, qword ptr [rsp + 264]       # 8-byte Reload
	movzx	edi, byte ptr [rsi + r8 + 25]
	vmovd	xmm2, edi
	mov	rdx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 1
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 2
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r14 + 25], 3
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 25], 4
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 25], 5
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rbx + 25], 6
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 7
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 8
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 9
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 10
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 11
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 25], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 13
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 14
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 25], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 25]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 25], 1
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 25], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 25], 3
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 25], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 25], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 6
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 25], 8
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 9
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 10
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 25], 11
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 25], 12
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdi + 25], 13
	vinserti128	ymm0, ymm1, xmm0, 1
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm3, byte ptr [rsi + r10 + 25], 14
	vpmaxub	ymm3, ymm10, ymm0
	vpcmpeqb	ymm0, ymm0, ymm3
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rsi + rdi + 25], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + r8 + 26]
	vmovd	xmm0, edi
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 26], 1
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 2
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r14 + 26], 3
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 26], 4
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rbx + 26], 6
	mov	rdx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 7
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 8
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 9
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 10
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r11 + 26], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 26], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 13
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 26], 14
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 26], 15
	mov	r14, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r14 + 26]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 1
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 26], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 26], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 26], 5
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 6
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 26], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 8
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 26], 9
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 26], 10
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 26], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 26], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 26], 14
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 26], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 27]
	vmovd	xmm2, edi
	mov	r10, r8
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 1
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 27], 2
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 3
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 4
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 5
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 6
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 7
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 8
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 9
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r11 + 27], 11
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 27], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 27], 13
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 27], 14
	mov	r13, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r13 + 27], 15
	movzx	edi, byte ptr [rsi + r14 + 27]
	vmovd	xmm3, edi
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 27], 1
	mov	rdx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 2
	mov	rdx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 3
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 4
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 27], 5
	mov	rdx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 6
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 27], 7
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rdx + 27], 8
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 10
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 11
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r11 + 27], 12
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rbx + 27], 13
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rcx + 27], 14
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r9 + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rsi + rax + 28]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 28], 1
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 28], 2
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 3
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 28], 4
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 28], 5
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 6
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 28], 7
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 8
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 28], 9
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdx + 28], 10
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r10 + 28], 11
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 12
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r15 + 28], 13
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rdi + 28], 14
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r13 + 28], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdi + 28]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 1
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 2
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 28], 3
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 28], 4
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 5
	mov	r12, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 28], 6
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 7
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 8
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 28], 10
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rdi + 28], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 28], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 28], 13
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 28], 14
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r11 + 28], 15
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rax + 29]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 1
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 2
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdi + 29], 3
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 29], 4
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 29], 5
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r8 + 29], 6
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 7
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 8
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 9
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rdx + 29], 10
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r10 + 29], 11
	mov	r9, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r9 + 29], 12
	vpinsrb	xmm2, xmm2, byte ptr [rsi + r15 + 29], 13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rcx + 29], 14
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rsi + rax + 29], 15
	mov	rdx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + rdx + 29]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 1
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r15 + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 3
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 29], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 29], 6
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r12 + 29], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 8
	mov	r14, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r14 + 29], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 10
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r10 + 29], 11
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + r13 + 29], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rsi + rax + 29], 13
	vpinsrb	xmm4, xmm3, byte ptr [rsi + rbx + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm4, byte ptr [rsi + r11 + 29], 15
	mov	rbx, r11
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 264]      # 8-byte Reload
	movzx	edi, byte ptr [rsi + r11 + 30]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 1
	movzx	edi, byte ptr [rsi + r11 + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 1
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 2
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 3
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 4
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 5
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r8 + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 31], 6
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 7
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 8
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 9
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 10
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 11
	vpinsrb	xmm0, xmm0, byte ptr [rsi + r9 + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r9 + 31], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 31], 13
	mov	rax, rcx
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rcx + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rcx + 31], 14
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rsi + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rsi + rax + 31], 15
	movzx	eax, byte ptr [rsi + rdx + 30]
	vmovd	xmm1, eax
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r8 + 30], 1
	movzx	eax, byte ptr [rsi + rdx + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r8 + 31], 1
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r15 + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r15 + 31], 2
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 3
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 5
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r12 + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r12 + 31], 7
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 8
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r14 + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r14 + 31], 9
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 10
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r10 + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r10 + 31], 11
	vpinsrb	xmm1, xmm1, byte ptr [rsi + r13 + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rsi + r13 + 31], 12
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rax + 31], 14
	mov	rax, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rsi + rbx + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rsi + rbx + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm2, ymm10
	vmovdqa	ymm1, ymmword ptr [rsp + 576]   # 32-byte Reload
	vpmaxub	ymm0, ymm10, ymm1
	vpcmpeqb	ymm0, ymm1, ymm0
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI10_0] # ymm6 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	vpand	ymm0, ymm0, ymm6
	vpsubb	ymm0, ymm0, ymmword ptr [rsp + 1280] # 32-byte Folded Reload
	vmovdqa	ymm1, ymmword ptr [rsp + 480]   # 32-byte Reload
	vpmaxub	ymm7, ymm10, ymm1
	vpcmpeqb	ymm7, ymm1, ymm7
	vmovdqa	ymm1, ymmword ptr [rsp + 448]   # 32-byte Reload
	vpmaxub	ymm12, ymm10, ymm1
	vpcmpeqb	ymm12, ymm12, ymm1
	vmovdqa	ymm8, ymmword ptr [rip + .LCPI10_1] # ymm8 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpand	ymm7, ymm8, ymm7
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI10_2] # ymm4 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpand	ymm12, ymm12, ymm4
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vpmaxub	ymm7, ymm14, ymm10
	vpcmpeqb	ymm7, ymm14, ymm7
	vpmaxub	ymm12, ymm15, ymm10
	vpcmpeqb	ymm12, ymm15, ymm12
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI10_3] # ymm5 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpand	ymm7, ymm7, ymm5
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI10_4] # ymm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpand	ymm12, ymm12, ymm1
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm14, ymmword ptr [rsp + 544]  # 32-byte Reload
	vpmaxub	ymm12, ymm14, ymm10
	vpcmpeqb	ymm12, ymm14, ymm12
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI10_5] # ymm3 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpand	ymm12, ymm12, ymm3
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vmovdqa	ymm12, ymmword ptr [rsp + 1248] # 32-byte Reload
	vpmaxub	ymm7, ymm12, ymm10
	vpcmpeqb	ymm7, ymm12, ymm7
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI10_6] # ymm13 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm7, ymm13, ymm7
	vpor	ymm10, ymm0, ymm7
	vmovdqa	ymm12, ymmword ptr [rsp + 1184] # 32-byte Reload
	vpmaxub	ymm7, ymm12, ymm2
	vpcmpeqb	ymm7, ymm12, ymm7
	vpand	ymm7, ymm7, ymm6
	vpsubb	ymm7, ymm7, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vmovdqa	ymm14, ymmword ptr [rsp + 1152] # 32-byte Reload
	vpmaxub	ymm12, ymm14, ymm2
	vpcmpeqb	ymm12, ymm14, ymm12
	vmovdqa	ymm14, ymmword ptr [rsp + 1120] # 32-byte Reload
	vpmaxub	ymm15, ymm14, ymm2
	vpcmpeqb	ymm15, ymm14, ymm15
	vpand	ymm12, ymm12, ymm8
	vpand	ymm15, ymm15, ymm4
	vpor	ymm12, ymm12, ymm15
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm14, ymmword ptr [rsp + 1088] # 32-byte Reload
	vpmaxub	ymm12, ymm14, ymm2
	vpcmpeqb	ymm12, ymm14, ymm12
	vmovdqa	ymm14, ymmword ptr [rsp + 1056] # 32-byte Reload
	vpmaxub	ymm15, ymm14, ymm2
	vpcmpeqb	ymm15, ymm14, ymm15
	vpand	ymm12, ymm12, ymm5
	vpand	ymm15, ymm15, ymm1
	vpor	ymm12, ymm12, ymm15
	vmovdqa	ymm14, ymmword ptr [rsp + 960]  # 32-byte Reload
	vpmaxub	ymm15, ymm14, ymm2
	vpcmpeqb	ymm15, ymm14, ymm15
	vpand	ymm15, ymm15, ymm3
	vpor	ymm12, ymm12, ymm15
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm14, ymmword ptr [rsp + 992]  # 32-byte Reload
	vpmaxub	ymm12, ymm14, ymm2
	vpcmpeqb	ymm12, ymm14, ymm12
	vpand	ymm12, ymm12, ymm13
	vpor	ymm12, ymm12, ymm7
	vmovdqa	ymm14, ymmword ptr [rsp + 928]  # 32-byte Reload
	vpmaxub	ymm7, ymm14, ymm2
	vpcmpeqb	ymm7, ymm14, ymm7
	vpand	ymm7, ymm7, ymm6
	vpsubb	ymm7, ymm7, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vmovdqa	ymm0, ymmword ptr [rsp + 864]   # 32-byte Reload
	vpmaxub	ymm15, ymm0, ymm2
	vpcmpeqb	ymm15, ymm15, ymm0
	vmovdqa	ymm0, ymmword ptr [rsp + 896]   # 32-byte Reload
	vpmaxub	ymm14, ymm0, ymm2
	vpcmpeqb	ymm14, ymm14, ymm0
	vpand	ymm15, ymm15, ymm8
	vpand	ymm14, ymm14, ymm4
	vpor	ymm14, ymm15, ymm14
	vpor	ymm7, ymm14, ymm7
	vpmaxub	ymm14, ymm11, ymm2
	vpcmpeqb	ymm11, ymm11, ymm14
	vmovdqa	ymm0, ymmword ptr [rsp + 832]   # 32-byte Reload
	vpmaxub	ymm14, ymm0, ymm2
	vpcmpeqb	ymm14, ymm14, ymm0
	vmovdqa	ymm15, ymm5
	vpand	ymm11, ymm11, ymm5
	vpand	ymm14, ymm14, ymm1
	vpor	ymm11, ymm11, ymm14
	vpmaxub	ymm14, ymm9, ymm2
	vpcmpeqb	ymm9, ymm9, ymm14
	vmovdqa	ymm14, ymm3
	vpand	ymm9, ymm9, ymm3
	vpor	ymm9, ymm11, ymm9
	vpor	ymm7, ymm9, ymm7
	vmovdqa	ymm0, ymmword ptr [rsp + 800]   # 32-byte Reload
	vpmaxub	ymm9, ymm0, ymm2
	vpcmpeqb	ymm9, ymm9, ymm0
	vpand	ymm9, ymm9, ymm13
	vpor	ymm7, ymm9, ymm7
	vmovdqa	ymm0, ymmword ptr [rsp + 416]   # 32-byte Reload
	vpmaxub	ymm9, ymm0, ymm2
	vpcmpeqb	ymm8, ymm9, ymm0
	vpand	ymm8, ymm8, ymm6
	vpsubb	ymm8, ymm8, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vmovdqa	ymm0, ymmword ptr [rsp + 640]   # 32-byte Reload
	vpmaxub	ymm9, ymm0, ymm2
	vpcmpeqb	ymm5, ymm9, ymm0
	vmovdqa	ymm0, ymmword ptr [rsp + 672]   # 32-byte Reload
	vpmaxub	ymm9, ymm0, ymm2
	vpcmpeqb	ymm6, ymm9, ymm0
	vpand	ymm5, ymm5, ymmword ptr [rip + .LCPI10_1]
	vpand	ymm6, ymm6, ymm4
	vpor	ymm5, ymm5, ymm6
	vpor	ymm5, ymm8, ymm5
	vmovdqa	ymm0, ymmword ptr [rsp + 736]   # 32-byte Reload
	vpmaxub	ymm6, ymm0, ymm2
	vpcmpeqb	ymm3, ymm0, ymm6
	vmovdqa	ymm0, ymmword ptr [rsp + 704]   # 32-byte Reload
	vpmaxub	ymm6, ymm0, ymm2
	vpcmpeqb	ymm4, ymm0, ymm6
	vpand	ymm3, ymm15, ymm3
	vpand	ymm4, ymm4, ymm1
	vpor	ymm3, ymm3, ymm4
	vmovdqa	ymm0, ymmword ptr [rsp + 320]   # 32-byte Reload
	vpmaxub	ymm4, ymm0, ymm2
	vpcmpeqb	ymm1, ymm0, ymm4
	vpand	ymm1, ymm14, ymm1
	vpor	ymm1, ymm3, ymm1
	vpor	ymm1, ymm5, ymm1
	vmovdqa	ymm0, ymmword ptr [rsp + 288]   # 32-byte Reload
	vpmaxub	ymm3, ymm0, ymm2
	vpcmpeqb	ymm2, ymm0, ymm3
	vpand	ymm2, ymm13, ymm2
	vpor	ymm1, ymm1, ymm2
	vpunpcklbw	ymm2, ymm10, ymm12      # ymm2 = ymm10[0],ymm12[0],ymm10[1],ymm12[1],ymm10[2],ymm12[2],ymm10[3],ymm12[3],ymm10[4],ymm12[4],ymm10[5],ymm12[5],ymm10[6],ymm12[6],ymm10[7],ymm12[7],ymm10[16],ymm12[16],ymm10[17],ymm12[17],ymm10[18],ymm12[18],ymm10[19],ymm12[19],ymm10[20],ymm12[20],ymm10[21],ymm12[21],ymm10[22],ymm12[22],ymm10[23],ymm12[23]
	vpunpckhbw	ymm0, ymm10, ymm12      # ymm0 = ymm10[8],ymm12[8],ymm10[9],ymm12[9],ymm10[10],ymm12[10],ymm10[11],ymm12[11],ymm10[12],ymm12[12],ymm10[13],ymm12[13],ymm10[14],ymm12[14],ymm10[15],ymm12[15],ymm10[24],ymm12[24],ymm10[25],ymm12[25],ymm10[26],ymm12[26],ymm10[27],ymm12[27],ymm10[28],ymm12[28],ymm10[29],ymm12[29],ymm10[30],ymm12[30],ymm10[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 376]      # 8-byte Reload
	vmovdqu	ymmword ptr [r11 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r11 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r11 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r11 + 4*rcx], ymm1
	add	rcx, 32
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB10_186
# %bb.187:
	mov	r15, qword ptr [rsp + 368]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 536]      # 8-byte Reload
	jne	.LBB10_89
	jmp	.LBB10_122
.Lfunc_end10:
	.size	comparison_greater_equal_arr_scalar_avx2, .Lfunc_end10-comparison_greater_equal_arr_scalar_avx2
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function comparison_greater_equal_scalar_arr_avx2
.LCPI11_0:
	.zero	32,2
.LCPI11_1:
	.zero	32,4
.LCPI11_2:
	.zero	32,8
.LCPI11_3:
	.zero	32,16
.LCPI11_4:
	.zero	32,32
.LCPI11_5:
	.zero	32,64
.LCPI11_6:
	.zero	32,128
.LCPI11_7:
	.zero	32,255
	.text
	.globl	comparison_greater_equal_scalar_arr_avx2
	.p2align	4, 0x90
	.type	comparison_greater_equal_scalar_arr_avx2,@function
comparison_greater_equal_scalar_arr_avx2: # @comparison_greater_equal_scalar_arr_avx2
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -32
	sub	rsp, 1280
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r15, rcx
	cmp	edi, 6
	jg	.LBB11_26
# %bb.1:
	cmp	edi, 3
	jle	.LBB11_2
# %bb.10:
	cmp	edi, 4
	je	.LBB11_99
# %bb.11:
	cmp	edi, 5
	je	.LBB11_114
# %bb.12:
	cmp	edi, 6
	jne	.LBB11_185
# %bb.13:
	mov	r14d, dword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_17
# %bb.14:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_15:                              # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	mov	esi, 0
	adc	sil, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r15 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r15 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_15
# %bb.16:
	add	r15, 1
.LBB11_17:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB11_21
# %bb.18:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_19:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14d, dword ptr [rdx + 124]
	setae	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 120]
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 116]
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 112]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 108]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 104]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 100]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 92]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 88]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 84]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 80]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 76]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 72]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 68]
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 60]
	setae	r8b
	cmp	r14d, dword ptr [rdx + 56]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 52]
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 48]
	setae	r11b
	cmp	r14d, dword ptr [rdx + 44]
	setae	r10b
	cmp	r14d, dword ptr [rdx + 40]
	setae	r9b
	cmp	r14d, dword ptr [rdx + 36]
	setae	dil
	cmp	r14d, dword ptr [rdx + 28]
	setae	al
	cmp	r14d, dword ptr [rdx + 24]
	setae	bl
	cmp	r14d, dword ptr [rdx + 20]
	setae	sil
	cmp	r14d, dword ptr [rdx + 16]
	setae	cl
	cmp	r14d, dword ptr [rdx + 12]
	setae	r13b
	cmp	r14d, dword ptr [rdx + 8]
	setae	r12b
	cmp	r14d, dword ptr [rdx]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 4]
	setae	r15b
	cmp	r14d, dword ptr [rdx + 32]
	setae	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 64]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 96]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 160]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	sub	rdx, -128
	add	r15, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB11_19
# %bb.20:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB11_21:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB11_185
# %bb.22:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB11_130
# %bb.23:
	xor	r11d, r11d
	jmp	.LBB11_24
.LBB11_26:
	cmp	edi, 8
	jle	.LBB11_27
# %bb.42:
	cmp	edi, 9
	je	.LBB11_149
# %bb.43:
	cmp	edi, 11
	je	.LBB11_164
# %bb.44:
	cmp	edi, 12
	jne	.LBB11_185
# %bb.45:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB11_49
# %bb.46:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_47:                              # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	mov	esi, 0
	adc	sil, -1
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	sil, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_47
# %bb.48:
	add	r15, 1
.LBB11_49:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB11_53
# %bb.50:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_51:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	vucomisd	xmm0, qword ptr [rdx]
	setae	byte ptr [rsp + 168]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 8]
	setae	r9b
	vucomisd	xmm0, qword ptr [rdx + 16]
	setae	r11b
	vucomisd	xmm0, qword ptr [rdx + 24]
	setae	r13b
	vucomisd	xmm0, qword ptr [rdx + 32]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 40]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 48]
	setae	bl
	vucomisd	xmm0, qword ptr [rdx + 56]
	setae	r12b
	vucomisd	xmm0, qword ptr [rdx + 64]
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 72]
	setae	sil
	vucomisd	xmm0, qword ptr [rdx + 80]
	setae	dil
	vucomisd	xmm0, qword ptr [rdx + 88]
	setae	r8b
	vucomisd	xmm0, qword ptr [rdx + 96]
	setae	r10b
	vucomisd	xmm0, qword ptr [rdx + 104]
	setae	r15b
	vucomisd	xmm0, qword ptr [rdx + 112]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 120]
	setae	cl
	vucomisd	xmm0, qword ptr [rdx + 128]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 136]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 144]
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 152]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 160]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 168]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 176]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 184]
	setae	r14b
	vucomisd	xmm0, qword ptr [rdx + 192]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 200]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 208]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 216]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 224]
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 232]
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 240]
	setae	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomisd	xmm0, qword ptr [rdx + 248]
	setae	al
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r12b, 7
	or	r12b, bl
	shl	r11b, 2
	or	r11b, r9b
	add	sil, sil
	add	sil, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r11b
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r8b, 3
	or	r8b, dil
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r10b, 4
	or	r10b, r8b
	shl	r15b, 5
	or	r15b, r10b
	movzx	esi, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r12b, bl
	or	cl, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	byte ptr [r15], r12b
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r14b, 7
	or	r14b, sil
	mov	byte ptr [r15 + 1], cl
	or	r14b, bl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], r14b
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB11_51
# %bb.52:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB11_53:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB11_185
# %bb.54:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB11_179
# %bb.55:
	xor	r11d, r11d
	jmp	.LBB11_181
.LBB11_2:
	cmp	edi, 2
	je	.LBB11_56
# %bb.3:
	cmp	edi, 3
	jne	.LBB11_185
# %bb.4:
	mov	r11b, byte ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_6:                               # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setge	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_6
# %bb.7:
	add	r15, 1
.LBB11_8:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB11_9
# %bb.81:
	cmp	r14, 32
	mov	dword ptr [rsp + 28], r11d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	jb	.LBB11_82
# %bb.83:
	mov	rax, r14
	shl	rax, 5
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB11_85
# %bb.84:
	lea	rax, [r15 + 4*r14]
	cmp	rdx, rax
	jae	.LBB11_85
.LBB11_82:
	xor	eax, eax
	mov	qword ptr [rsp + 416], rax      # 8-byte Spill
	mov	r13, r15
.LBB11_88:
	sub	r14, qword ptr [rsp + 416]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_89:                              # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx + 31]
	setge	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 30]
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 29]
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 28]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 27]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 26]
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 25]
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 23]
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 22]
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 21]
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 20]
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 19]
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 18]
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 17]
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 15]
	setge	r14b
	cmp	r11b, byte ptr [rdx + 14]
	setge	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 13]
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdx + 12]
	setge	r12b
	cmp	r11b, byte ptr [rdx + 11]
	setge	r15b
	cmp	r11b, byte ptr [rdx + 10]
	setge	r11b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 9]
	setge	r10b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 7]
	setge	dil
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 6]
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 5]
	setge	r9b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 4]
	setge	r8b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 3]
	setge	sil
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 2]
	setge	cl
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx]
	setge	byte ptr [rsp + 152]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdx + 1]
	setge	al
	mov	rbx, r13
	mov	r13d, dword ptr [rsp + 28]      # 4-byte Reload
	cmp	r13b, byte ptr [rdx + 8]
	mov	r13, rbx
	setge	byte ptr [rsp + 168]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	bl, byte ptr [rdx + 16]
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	bl, byte ptr [rdx + 24]
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	add	al, al
	add	al, byte ptr [rsp + 152]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	shl	sil, 3
	or	sil, cl
	shl	r8b, 4
	or	r8b, sil
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, r9b
	mov	byte ptr [r13], dil
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 168]      # 1-byte Folded Reload
	shl	r11b, 2
	or	r11b, r10b
	shl	r15b, 3
	or	r15b, r11b
	mov	r11d, dword ptr [rsp + 28]      # 4-byte Reload
	shl	r12b, 4
	or	r12b, r15b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r12b
	movzx	ecx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r14b, 7
	or	r14b, cl
	or	r14b, al
	mov	byte ptr [r13 + 1], r14b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 104]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 272]       # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 3], al
	add	rdx, 32
	add	r13, 4
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB11_89
# %bb.90:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	jmp	.LBB11_91
.LBB11_27:
	cmp	edi, 7
	je	.LBB11_132
# %bb.28:
	cmp	edi, 8
	jne	.LBB11_185
# %bb.29:
	mov	r14, qword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_33
# %bb.30:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_31:                              # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	mov	esi, 0
	adc	sil, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r15 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r15 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_31
# %bb.32:
	add	r15, 1
.LBB11_33:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB11_37
# %bb.34:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_35:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14, qword ptr [rdx + 248]
	setae	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 240]
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 232]
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 224]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 216]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 208]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 200]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 184]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 176]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 168]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 160]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 152]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 144]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 136]
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 120]
	setae	r8b
	cmp	r14, qword ptr [rdx + 112]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 104]
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 96]
	setae	r11b
	cmp	r14, qword ptr [rdx + 88]
	setae	r10b
	cmp	r14, qword ptr [rdx + 80]
	setae	r9b
	cmp	r14, qword ptr [rdx + 72]
	setae	dil
	cmp	r14, qword ptr [rdx + 56]
	setae	al
	cmp	r14, qword ptr [rdx + 48]
	setae	bl
	cmp	r14, qword ptr [rdx + 40]
	setae	sil
	cmp	r14, qword ptr [rdx + 32]
	setae	cl
	cmp	r14, qword ptr [rdx + 24]
	setae	r13b
	cmp	r14, qword ptr [rdx + 16]
	setae	r12b
	cmp	r14, qword ptr [rdx]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 8]
	setae	r15b
	cmp	r14, qword ptr [rdx + 64]
	setae	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 128]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 192]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 160]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB11_35
# %bb.36:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB11_37:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB11_185
# %bb.38:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB11_147
# %bb.39:
	xor	r11d, r11d
	jmp	.LBB11_40
.LBB11_99:
	movzx	r14d, word ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_103
# %bb.100:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_101:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	mov	esi, 0
	adc	sil, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r15 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r15 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_101
# %bb.102:
	add	r15, 1
.LBB11_103:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB11_107
# %bb.104:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_105:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14w, word ptr [rdx + 62]
	setae	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 60]
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 58]
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 56]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 54]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 52]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 50]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 46]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 44]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 42]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 40]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 38]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 36]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 34]
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 30]
	setae	r8b
	cmp	r14w, word ptr [rdx + 28]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 26]
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 24]
	setae	r11b
	cmp	r14w, word ptr [rdx + 22]
	setae	r10b
	cmp	r14w, word ptr [rdx + 20]
	setae	r9b
	cmp	r14w, word ptr [rdx + 18]
	setae	dil
	cmp	r14w, word ptr [rdx + 14]
	setae	al
	cmp	r14w, word ptr [rdx + 12]
	setae	bl
	cmp	r14w, word ptr [rdx + 10]
	setae	sil
	cmp	r14w, word ptr [rdx + 8]
	setae	cl
	cmp	r14w, word ptr [rdx + 6]
	setae	r13b
	cmp	r14w, word ptr [rdx + 4]
	setae	r12b
	cmp	r14w, word ptr [rdx]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 2]
	setae	r15b
	cmp	r14w, word ptr [rdx + 16]
	setae	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 32]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 48]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 160]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 64
	add	r15, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB11_105
# %bb.106:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB11_107:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB11_185
# %bb.108:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB11_112
# %bb.109:
	xor	r11d, r11d
	jmp	.LBB11_110
.LBB11_114:
	movzx	r14d, word ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_118
# %bb.115:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_116:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setge	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_116
# %bb.117:
	add	r15, 1
.LBB11_118:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB11_122
# %bb.119:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_120:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14w, word ptr [rdx + 62]
	setge	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 60]
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 58]
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 56]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 54]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 52]
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 50]
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 46]
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 44]
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 42]
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 40]
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 38]
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 36]
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 34]
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 30]
	setge	r8b
	cmp	r14w, word ptr [rdx + 28]
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 26]
	setge	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 24]
	setge	r11b
	cmp	r14w, word ptr [rdx + 22]
	setge	r10b
	cmp	r14w, word ptr [rdx + 20]
	setge	r9b
	cmp	r14w, word ptr [rdx + 18]
	setge	dil
	cmp	r14w, word ptr [rdx + 14]
	setge	al
	cmp	r14w, word ptr [rdx + 12]
	setge	bl
	cmp	r14w, word ptr [rdx + 10]
	setge	sil
	cmp	r14w, word ptr [rdx + 8]
	setge	cl
	cmp	r14w, word ptr [rdx + 6]
	setge	r13b
	cmp	r14w, word ptr [rdx + 4]
	setge	r12b
	cmp	r14w, word ptr [rdx]
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 2]
	setge	r15b
	cmp	r14w, word ptr [rdx + 16]
	setge	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 32]
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 48]
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 160]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 64
	add	r15, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB11_120
# %bb.121:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB11_122:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB11_185
# %bb.123:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB11_128
# %bb.124:
	xor	edi, edi
	jmp	.LBB11_125
.LBB11_149:
	mov	r14, qword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_153
# %bb.150:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_151:                             # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setge	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_151
# %bb.152:
	add	r15, 1
.LBB11_153:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB11_157
# %bb.154:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_155:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14, qword ptr [rdx + 248]
	setge	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 240]
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 232]
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 224]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 216]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 208]
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 200]
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 184]
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 176]
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 168]
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 160]
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 152]
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 144]
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 136]
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 120]
	setge	r8b
	cmp	r14, qword ptr [rdx + 112]
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 104]
	setge	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 96]
	setge	r11b
	cmp	r14, qword ptr [rdx + 88]
	setge	r10b
	cmp	r14, qword ptr [rdx + 80]
	setge	r9b
	cmp	r14, qword ptr [rdx + 72]
	setge	dil
	cmp	r14, qword ptr [rdx + 56]
	setge	al
	cmp	r14, qword ptr [rdx + 48]
	setge	bl
	cmp	r14, qword ptr [rdx + 40]
	setge	sil
	cmp	r14, qword ptr [rdx + 32]
	setge	cl
	cmp	r14, qword ptr [rdx + 24]
	setge	r13b
	cmp	r14, qword ptr [rdx + 16]
	setge	r12b
	cmp	r14, qword ptr [rdx]
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 8]
	setge	r15b
	cmp	r14, qword ptr [rdx + 64]
	setge	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 128]
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 192]
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 160]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB11_155
# %bb.156:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB11_157:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB11_185
# %bb.158:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB11_162
# %bb.159:
	xor	edi, edi
	jmp	.LBB11_160
.LBB11_164:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	vmovss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB11_168
# %bb.165:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_166:                             # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	mov	esi, 0
	adc	sil, -1
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	sil, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_166
# %bb.167:
	add	r15, 1
.LBB11_168:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB11_172
# %bb.169:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_170:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	vucomiss	xmm0, dword ptr [rdx]
	setae	byte ptr [rsp + 168]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 4]
	setae	r9b
	vucomiss	xmm0, dword ptr [rdx + 8]
	setae	r11b
	vucomiss	xmm0, dword ptr [rdx + 12]
	setae	r13b
	vucomiss	xmm0, dword ptr [rdx + 16]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 20]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 24]
	setae	bl
	vucomiss	xmm0, dword ptr [rdx + 28]
	setae	r12b
	vucomiss	xmm0, dword ptr [rdx + 32]
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 36]
	setae	sil
	vucomiss	xmm0, dword ptr [rdx + 40]
	setae	dil
	vucomiss	xmm0, dword ptr [rdx + 44]
	setae	r8b
	vucomiss	xmm0, dword ptr [rdx + 48]
	setae	r10b
	vucomiss	xmm0, dword ptr [rdx + 52]
	setae	r15b
	vucomiss	xmm0, dword ptr [rdx + 56]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 60]
	setae	cl
	vucomiss	xmm0, dword ptr [rdx + 64]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 68]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 72]
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 76]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 80]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 84]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 88]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 92]
	setae	r14b
	vucomiss	xmm0, dword ptr [rdx + 96]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 100]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 104]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 108]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 112]
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 116]
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 120]
	setae	byte ptr [rsp + 28]             # 1-byte Folded Spill
	vucomiss	xmm0, dword ptr [rdx + 124]
	setae	al
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r12b, 7
	or	r12b, bl
	shl	r11b, 2
	or	r11b, r9b
	add	sil, sil
	add	sil, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r11b
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r8b, 3
	or	r8b, dil
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r10b, 4
	or	r10b, r8b
	shl	r15b, 5
	or	r15b, r10b
	movzx	esi, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r12b, bl
	or	cl, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	byte ptr [r15], r12b
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r14b, 7
	or	r14b, sil
	mov	byte ptr [r15 + 1], cl
	or	r14b, bl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], r14b
	mov	byte ptr [r15 + 3], al
	add	rdx, 128
	add	r15, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB11_170
# %bb.171:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB11_172:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB11_185
# %bb.173:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB11_177
# %bb.174:
	xor	r11d, r11d
	jmp	.LBB11_175
.LBB11_56:
	mov	r11b, byte ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_60
# %bb.57:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_58:                              # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	mov	esi, 0
	adc	sil, -1
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	sil, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_58
# %bb.59:
	add	r15, 1
.LBB11_60:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB11_61
# %bb.62:
	cmp	r14, 32
	mov	dword ptr [rsp + 28], r11d      # 4-byte Spill
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	jb	.LBB11_63
# %bb.64:
	mov	rax, r14
	shl	rax, 5
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB11_66
# %bb.65:
	lea	rax, [r15 + 4*r14]
	cmp	rdx, rax
	jae	.LBB11_66
.LBB11_63:
	xor	eax, eax
	mov	qword ptr [rsp + 384], rax      # 8-byte Spill
	mov	rdi, rdx
	mov	r13, r15
.LBB11_69:
	sub	r14, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_70:                              # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdi + 31]
	setae	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 30]
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 29]
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 28]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 27]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 26]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 25]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 23]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 22]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 21]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 20]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 19]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 18]
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 17]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 15]
	setae	r14b
	cmp	r11b, byte ptr [rdi + 14]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 13]
	setae	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rdi + 12]
	setae	r12b
	cmp	r11b, byte ptr [rdi + 11]
	setae	r15b
	cmp	r11b, byte ptr [rdi + 10]
	setae	r11b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi + 9]
	setae	r10b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi + 7]
	setae	sil
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi + 6]
	setae	byte ptr [rsp + 168]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi + 5]
	setae	r9b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi + 4]
	setae	r8b
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi + 3]
	setae	dl
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi + 2]
	setae	cl
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	al, byte ptr [rdi + 1]
	setae	al
	mov	rbx, r13
	mov	r13d, dword ptr [rsp + 28]      # 4-byte Reload
	cmp	r13b, byte ptr [rdi + 8]
	mov	r13, rbx
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	bl, byte ptr [rdi + 16]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 28]       # 4-byte Reload
	cmp	bl, byte ptr [rdi + 24]
	setae	bl
	add	al, al
	add	al, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	shl	dl, 3
	or	dl, cl
	shl	r8b, 4
	or	r8b, dl
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	al, 6
	shl	sil, 7
	or	sil, al
	or	sil, r9b
	mov	byte ptr [r13], sil
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 128]      # 1-byte Folded Reload
	shl	r11b, 2
	or	r11b, r10b
	shl	r15b, 3
	or	r15b, r11b
	mov	r11d, dword ptr [rsp + 28]      # 4-byte Reload
	shl	r12b, 4
	or	r12b, r15b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r12b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r14b, 7
	or	r14b, cl
	or	r14b, al
	mov	byte ptr [r13 + 1], r14b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r13 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	or	al, bl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 272]       # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r13 + 3], al
	add	rdi, 32
	add	r13, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB11_70
# %bb.71:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	jmp	.LBB11_72
.LBB11_132:
	mov	r14d, dword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_136
# %bb.133:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_134:                             # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setge	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_134
# %bb.135:
	add	r15, 1
.LBB11_136:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB11_140
# %bb.137:
	mov	qword ptr [rsp + 280], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r11      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_138:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	cmp	r14d, dword ptr [rdx + 124]
	setge	byte ptr [rsp + 28]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 120]
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 116]
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 112]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 108]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 104]
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 100]
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 92]
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 88]
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 84]
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 80]
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 76]
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 72]
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 68]
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 60]
	setge	r8b
	cmp	r14d, dword ptr [rdx + 56]
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 52]
	setge	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 48]
	setge	r11b
	cmp	r14d, dword ptr [rdx + 44]
	setge	r10b
	cmp	r14d, dword ptr [rdx + 40]
	setge	r9b
	cmp	r14d, dword ptr [rdx + 36]
	setge	dil
	cmp	r14d, dword ptr [rdx + 28]
	setge	al
	cmp	r14d, dword ptr [rdx + 24]
	setge	bl
	cmp	r14d, dword ptr [rdx + 20]
	setge	sil
	cmp	r14d, dword ptr [rdx + 16]
	setge	cl
	cmp	r14d, dword ptr [rdx + 12]
	setge	r13b
	cmp	r14d, dword ptr [rdx + 8]
	setge	r12b
	cmp	r14d, dword ptr [rdx]
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 4]
	setge	r15b
	cmp	r14d, dword ptr [rdx + 32]
	setge	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 64]
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 96]
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 160]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 168]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 320]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 28]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	sub	rdx, -128
	add	r15, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB11_138
# %bb.139:
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
.LBB11_140:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB11_185
# %bb.141:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB11_145
# %bb.142:
	xor	edi, edi
	jmp	.LBB11_143
.LBB11_9:
	mov	r13, r15
.LBB11_91:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB11_185
# %bb.92:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB11_94
# %bb.93:
	xor	esi, esi
	jmp	.LBB11_97
.LBB11_61:
	mov	r13, r15
	mov	rdi, rdx
.LBB11_72:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB11_185
# %bb.73:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB11_75
# %bb.74:
	xor	r9d, r9d
	jmp	.LBB11_78
.LBB11_130:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_131:                             # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	mov	edi, 0
	adc	dil, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	r14d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB11_131
.LBB11_24:
	test	r8b, 1
	je	.LBB11_185
# %bb.25:
	xor	eax, eax
	cmp	r14d, dword ptr [rdx]
	jmp	.LBB11_183
.LBB11_179:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_180:                             # =>This Inner Loop Header: Depth=1
	vucomisd	xmm0, qword ptr [rdx]
	mov	eax, 0
	adc	al, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	r11, 2
	vucomisd	xmm0, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	mov	edi, 0
	adc	dil, -1
	xor	dil, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, r11
	jne	.LBB11_180
.LBB11_181:
	test	r8b, 1
	je	.LBB11_185
# %bb.182:
	xor	eax, eax
	vucomisd	xmm0, qword ptr [rdx]
	jmp	.LBB11_183
.LBB11_147:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_148:                             # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	mov	edi, 0
	adc	dil, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	r14, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB11_148
.LBB11_40:
	test	r8b, 1
	je	.LBB11_185
# %bb.41:
	xor	eax, eax
	cmp	r14, qword ptr [rdx]
	jmp	.LBB11_183
.LBB11_112:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_113:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	mov	edi, 0
	adc	dil, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	r14w, word ptr [rdx + 2]
	lea	rdx, [rdx + 4]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB11_113
.LBB11_110:
	test	r8b, 1
	je	.LBB11_185
# %bb.111:
	xor	eax, eax
	cmp	r14w, word ptr [rdx]
	jmp	.LBB11_183
.LBB11_128:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB11_129:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	setge	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14w, word ptr [rdx + 2]
	lea	rdx, [rdx + 4]
	setge	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB11_129
.LBB11_125:
	test	r8b, 1
	je	.LBB11_185
# %bb.126:
	cmp	r14w, word ptr [rdx]
	jmp	.LBB11_127
.LBB11_162:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB11_163:                             # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	setge	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	setge	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB11_163
.LBB11_160:
	test	r8b, 1
	je	.LBB11_185
# %bb.161:
	cmp	r14, qword ptr [rdx]
	jmp	.LBB11_127
.LBB11_177:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_178:                             # =>This Inner Loop Header: Depth=1
	vucomiss	xmm0, dword ptr [rdx]
	mov	eax, 0
	adc	al, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	r11, 2
	vucomiss	xmm0, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	mov	edi, 0
	adc	dil, -1
	xor	dil, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, r11
	jne	.LBB11_178
.LBB11_175:
	test	r8b, 1
	je	.LBB11_185
# %bb.176:
	xor	eax, eax
	vucomiss	xmm0, dword ptr [rdx]
.LBB11_183:
	adc	al, -1
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r15 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	jmp	.LBB11_184
.LBB11_145:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB11_146:                             # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	setge	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	setge	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB11_146
.LBB11_143:
	test	r8b, 1
	je	.LBB11_185
# %bb.144:
	cmp	r14d, dword ptr [rdx]
.LBB11_127:
	setge	al
	neg	al
	mov	rdx, rdi
	shr	rdx, 3
	mov	sil, byte ptr [r15 + rdx]
	and	dil, 7
	mov	bl, 1
	mov	ecx, edi
	shl	bl, cl
	xor	al, sil
	and	bl, al
.LBB11_184:
	xor	bl, sil
	mov	byte ptr [r15 + rdx], bl
.LBB11_185:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	vzeroupper
	ret
.LBB11_94:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	.p2align	4, 0x90
.LBB11_95:                              # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx + rsi]
	setge	al
	neg	al
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	movzx	r9d, byte ptr [r13 + rdi]
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r13 + rdi], bl
	cmp	r11b, byte ptr [rdx + rsi + 1]
	lea	rsi, [rsi + 2]
	setge	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r13 + rdi], al
	cmp	r10, rsi
	jne	.LBB11_95
# %bb.96:
	add	rdx, rsi
.LBB11_97:
	test	r8b, 1
	je	.LBB11_185
# %bb.98:
	cmp	r11b, byte ptr [rdx]
	setge	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r13 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	jmp	.LBB11_80
.LBB11_75:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	.p2align	4, 0x90
.LBB11_76:                              # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	r11b, byte ptr [rdi + r9]
	mov	ebx, 0
	adc	bl, -1
	mov	rsi, r9
	shr	rsi, 3
	movzx	r9d, byte ptr [r13 + rsi]
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r13 + rsi], dl
	cmp	r11b, byte ptr [rdi + rax + 1]
	lea	r9, [rax + 2]
	mov	ebx, 0
	adc	bl, -1
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r13 + rsi], al
	cmp	r10, r9
	jne	.LBB11_76
# %bb.77:
	add	rdi, r9
.LBB11_78:
	test	r8b, 1
	je	.LBB11_185
# %bb.79:
	xor	eax, eax
	cmp	r11b, byte ptr [rdi]
	adc	al, -1
	mov	rdx, r9
	shr	rdx, 3
	mov	dil, byte ptr [r13 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	shl	bl, cl
	xor	al, dil
	and	bl, al
.LBB11_80:
	xor	bl, dil
	mov	byte ptr [r13 + rdx], bl
	jmp	.LBB11_185
.LBB11_85:
	and	r14, -32
	mov	rax, r14
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 360], rax      # 8-byte Spill
	mov	qword ptr [rsp + 416], r14      # 8-byte Spill
	lea	rax, [r15 + 4*r14]
	mov	qword ptr [rsp + 368], rax      # 8-byte Spill
	vmovd	xmm0, r11d
	vpbroadcastb	ymm0, xmm0
	vmovdqa	ymmword ptr [rsp + 384], ymm0   # 32-byte Spill
	xor	ebx, ebx
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_86:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 376], rbx      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 184], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 320
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rdx + rax]
	vmovd	xmm0, eax
	movzx	eax, byte ptr [rdx + rbx]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rdx + rcx + 1]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rdx + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rdx + rcx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 544], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rcx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rdx + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rdx + rcx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	mov	qword ptr [rsp + 248], rbx      # 8-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rdx + rcx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rdx + rbx + 5]
	vmovd	xmm6, eax
	movzx	eax, byte ptr [rdx + rcx + 6]
	mov	qword ptr [rsp + 224], rcx      # 8-byte Spill
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rdx + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rdx + rcx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rdx + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	r14, rbx
	or	r14, 544
	mov	qword ptr [rsp + 144], r14      # 8-byte Spill
	mov	rcx, rbx
	or	rcx, 576
	mov	qword ptr [rsp + 176], rcx      # 8-byte Spill
	mov	rax, rbx
	or	rax, 608
	mov	r13, rax
	mov	qword ptr [rsp + 200], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 640
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	r10, rbx
	or	r10, 672
	mov	qword ptr [rsp + 256], r10      # 8-byte Spill
	mov	r9, rbx
	or	r9, 704
	mov	qword ptr [rsp + 240], r9       # 8-byte Spill
	mov	r11, rbx
	or	r11, 736
	mov	qword ptr [rsp + 80], r11       # 8-byte Spill
	mov	r15, rbx
	or	r15, 768
	mov	qword ptr [rsp + 128], r15      # 8-byte Spill
	mov	r8, rbx
	or	r8, 800
	mov	qword ptr [rsp + 56], r8        # 8-byte Spill
	mov	r12, rbx
	or	r12, 832
	mov	qword ptr [rsp + 136], r12      # 8-byte Spill
	mov	rax, rbx
	or	rax, 864
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 896
	mov	rdi, rax
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 928
	mov	rsi, rax
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 960
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	or	rbx, 992
	vpinsrb	xmm9, xmm0, byte ptr [rdx + r14], 1
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rcx], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13], 3
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12], 10
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx], 15
	mov	r12, rbx
	mov	qword ptr [rsp + 168], rbx      # 8-byte Spill
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 3
	mov	r8, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8], 4
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 6
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi], 7
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15], 8
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 14
	mov	r14, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14], 15
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 1], 1
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 1], 2
	mov	r13, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 1], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 4
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 5
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 6
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 7
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 1], 11
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 1], 12
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 1], 13
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 1], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 1], 15
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r11 + 1], 1
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 2
	mov	r12, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 1], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 1], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 1], 5
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 1], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 1], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 1], 9
	mov	r13, rdi
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 1], 14
	vinserti128	ymm13, ymm3, xmm0, 1
	vpinsrb	xmm0, xmm5, byte ptr [rdx + r14 + 1], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 8]
	vmovd	xmm10, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 544]   # 16-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 2], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 4
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 5
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 2], 6
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 2], 7
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 2], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 2], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 2], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 14
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 2], 15
	mov	r10, qword ptr [rsp + 232]      # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 2], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 2], 3
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 2], 4
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 2], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 2], 8
	mov	rcx, r13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 9
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 2], 10
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 14
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 15
	vpinsrb	xmm4, xmm11, byte ptr [rdx + r15 + 3], 1
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 2
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 3
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 4
	mov	rbx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 3], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 3], 8
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 3], 9
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 11
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 12
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 3], 13
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 14
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 3], 15
	vpinsrb	xmm5, xmm8, byte ptr [rdx + r10 + 3], 1
	mov	rbx, r10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 3], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 3], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 3], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 3], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 3], 13
	vinserti128	ymm0, ymm3, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 3], 14
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 9]
	vmovd	xmm8, edi
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 3], 15
	vinserti128	ymm0, ymm0, xmm4, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm0, xmmword ptr [rsp + 448]   # 16-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 4], 1
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 4], 2
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 4], 3
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 4], 4
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 4], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 4], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 4], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 10
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 4], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 4], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 4], 14
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 4], 15
	vpinsrb	xmm3, xmm15, byte ptr [rdx + rbx + 4], 1
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 2
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 4], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 4
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 4], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 4], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 15
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm14, byte ptr [rdx + rax + 5], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 5], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 5], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 5], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 5], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 6
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 5], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 5], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 5], 11
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 5], 12
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 5], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 5], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 5], 15
	vpinsrb	xmm5, xmm6, byte ptr [rdx + rbx + 5], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 5], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 4
	mov	r9, r14
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 5], 7
	mov	r14, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 8
	mov	r12, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 5], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 5], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 5], 14
	vinserti128	ymm14, ymm3, xmm0, 1
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm5, byte ptr [rdx + rax + 5], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 10]
	vmovd	xmm3, edi
	vinserti128	ymm15, ymm0, xmm4, 1
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 10]
	vmovd	xmm4, edi
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm12, byte ptr [rdx + rax + 6], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 2
	mov	rbx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 6], 3
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 6], 4
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 6], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 7
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 8
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 6], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 6], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 6], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 6], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 13
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 6], 14
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 6], 15
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + r11 + 6], 1
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 2
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 4
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rdi + 6], 6
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 6], 8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 9
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 10
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 6], 11
	mov	r9, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 6], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 14
	mov	r12, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 6], 15
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 1
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 7], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 7], 5
	mov	r8, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 6
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 7
	mov	r10, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 7], 12
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 7], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 7], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 7], 1
	mov	r13, r11
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 7], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 7], 3
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 4
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 7
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 7], 8
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 9
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 7], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 7], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 13
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rdi + 7], 14
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 11]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 7], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 512], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 11]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm9, byte ptr [rdx + rdi + 8], 1
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 8], 2
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 8], 3
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 4
	mov	r9, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 8], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 8], 6
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 8], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 10
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 8], 11
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 8], 13
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 14
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 8], 15
	vpinsrb	xmm5, xmm10, byte ptr [rdx + r13 + 8], 1
	mov	r14, rsi
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 3
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 8], 4
	mov	rdi, r12
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 8], 5
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 6
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 8], 7
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 8], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 9
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 8], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 14
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 15
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rdx + rbx + 9], 1
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 2
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r15 + 9], 3
	mov	rbx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 4
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 9], 5
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 6
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r15 + 9], 7
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 9
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 10
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 9], 11
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 12
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 9], 13
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 14
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 9], 15
	vpinsrb	xmm7, xmm11, byte ptr [rdx + r13 + 9], 1
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 9], 2
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rdi + 9], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 9], 6
	mov	r14, rsi
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r12 + 9], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 9
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 9], 10
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 9], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 14
	vinserti128	ymm0, ymm5, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm5, xmm7, byte ptr [rdx + rax + 9], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 12]
	vmovd	xmm0, edi
	vinserti128	ymm5, ymm5, xmm6, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 12]
	vmovd	xmm5, edi
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 10], 1
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 10], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 3
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 10], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 10], 5
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 10], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 10], 7
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 9
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 14
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 15
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 1
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 10], 4
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 10], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 10], 6
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 10], 7
	mov	r8, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 10], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 10], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 12
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 10], 13
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 10], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 11], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 11], 4
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 11], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 7
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 11], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 12
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 13
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 11], 14
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 11], 15
	mov	r9, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 11], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 11], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 11], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 11], 8
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm3  # 32-byte Spill
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 11], 14
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 13]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm1  # 32-byte Spill
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 13]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 12], 1
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 12], 2
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 12], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 12], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 12], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 7
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 12
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 12], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 12], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 12], 15
	vpinsrb	xmm2, xmm5, byte ptr [rdx + r9 + 12], 1
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 3
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 12], 4
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 12], 5
	mov	r9, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 12], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 12], 7
	mov	r11, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 12], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 12], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 11
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 12
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 14
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 13], 5
	mov	r10, r12
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 6
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 7
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 8
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 9
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 11
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 13], 12
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 13
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 14
	mov	r12, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 13], 15
	mov	rbx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 3
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 13], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 13], 6
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 13], 8
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 14
	vinserti128	ymm0, ymm2, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm1, byte ptr [rdx + rax + 13], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 14]
	vmovd	xmm1, edi
	vinserti128	ymm0, ymm0, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm0  # 32-byte Spill
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 14]
	vmovd	xmm0, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 1
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 14], 2
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 14], 5
	mov	r13, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 14], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 14], 7
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 14], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 14], 9
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 14], 10
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 14], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 12
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 13
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 14], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 14], 15
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 1
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 9
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 10
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 11
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 14], 12
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 14], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 14], 15
	mov	r8, qword ptr [rsp + 224]       # 8-byte Reload
	movzx	edi, byte ptr [rdx + r8 + 15]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 15], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 15], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 3
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 4
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 15], 6
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 15], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 15], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 15], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 15], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 15], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 15], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 15], 14
	mov	r9, qword ptr [rsp + 168]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 15], 15
	mov	rbx, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rbx + 15]
	vmovd	xmm3, edi
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 1
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 2
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 3
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 4
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 5
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 15], 6
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 15], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 8
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 9
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 13
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 14
	mov	r15, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 15], 15
	vinserti128	ymm0, ymm0, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm0   # 32-byte Spill
	movzx	edi, byte ptr [rdx + r8 + 16]
	vmovd	xmm0, edi
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 1
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 2
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 3
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 4
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 16], 6
	mov	r12, r13
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 7
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 8
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 9
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 16], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 12
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 16], 13
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 16], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 16], 15
	movzx	edi, byte ptr [rdx + rbx + 16]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 16], 1
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 16], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 16], 3
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 4
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 16], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 16], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 16], 9
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 16], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 16], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 16], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 16], 13
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 16], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 16], 15
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 17]
	vmovd	xmm2, edi
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 1
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 17], 2
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 3
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 4
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 17], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 17], 6
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 17], 7
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 9
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 17], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 11
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 12
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 17], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 17], 14
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 17], 15
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 17]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 17], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 17], 5
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 17], 6
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 17], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 17], 10
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 17], 11
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 17], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 17], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rax + 17], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 18]
	vmovd	xmm0, edi
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 18], 1
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 2
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 3
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 18], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 18], 5
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 18], 7
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 18], 8
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 18], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 18], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 11
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 18], 13
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 14
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 18], 15
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 18]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 1
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 18], 2
	mov	r12, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 18], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 18], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 8
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 9
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 18], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 18], 12
	mov	r9, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 18], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 14
	mov	r8, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 18], 15
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 19]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 2
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 19], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 19], 4
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 19], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 19], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 19], 10
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 19], 11
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 19], 12
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 14
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 19], 15
	movzx	edi, byte ptr [rdx + r11 + 19]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 19], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 19], 3
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 4
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 19], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 7
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 19], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 9
	mov	r10, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 19], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 13
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 19], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 20]
	vmovd	xmm0, edi
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 1
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 20], 2
	mov	r12, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 20], 3
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 4
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 20], 5
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 20], 6
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 7
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 8
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 9
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 20], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 20], 12
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 20], 13
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 14
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 20], 15
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 20]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 1
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 2
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 20], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 20], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 8
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 20], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 20], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 14
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 15
	movzx	edi, byte ptr [rdx + rax + 21]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 21], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 21], 3
	mov	r13, r12
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 21], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 21], 6
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 21], 7
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 21], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 9
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 21], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 21], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 21], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 21], 15
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 21]
	vmovd	xmm3, edi
	mov	r14, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 21], 1
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 21], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 3
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 4
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 21], 5
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 6
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 7
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 8
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 9
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm0   # 32-byte Spill
	vpinsrb	xmm0, xmm3, byte ptr [rdx + r9 + 21], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm0   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 22]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 1
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 22], 3
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 22], 4
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 5
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 22], 7
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 22], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 22], 10
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 11
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 12
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 22], 13
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 22], 14
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 22], 15
	movzx	edi, byte ptr [rdx + r11 + 22]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 22], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 22], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 22], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 5
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 22], 6
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 22], 7
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 22], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 10
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 22], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 22], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 23]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 2
	mov	r14, r13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 23], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 23], 4
	mov	r13, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 23], 5
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 23], 6
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 23], 7
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 23], 9
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 11
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 23], 12
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 23], 13
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 23], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 23], 15
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 23]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 1
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 23], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 23], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 23], 8
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 23], 9
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 23], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 12
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 15
	vinserti128	ymm10, ymm1, xmm0, 1
	vinserti128	ymm11, ymm3, xmm2, 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 24]
	vmovd	xmm0, edi
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 1
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 24], 2
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 24], 3
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rdi + 24], 4
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 24], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 6
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 24], 7
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 24], 8
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 10
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 24], 11
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 24], 12
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 24], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 14
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 24], 15
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r14 + 24]
	vmovd	xmm1, edi
	mov	r9, qword ptr [rsp + 232]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 24], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 3
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 24], 4
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 8
	mov	r10, rbx
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 24], 9
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 24], 10
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 24], 11
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 24], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 13
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 24], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 15
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 25]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 25], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 25], 4
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 5
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 6
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 7
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 8
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 25], 11
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 12
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 13
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 25], 14
	mov	r15, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 25], 15
	movzx	edi, byte ptr [rdx + r14 + 25]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 25], 1
	mov	r9, qword ptr [rsp + 216]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 25], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 25], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 25], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 25], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 25], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 25], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 12
	mov	r13, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 25], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 25], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm3, byte ptr [rdx + rcx + 25], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm0   # 32-byte Spill
	mov	r11, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 26]
	vmovd	xmm0, edi
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 1
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 26], 2
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rcx + 26], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 4
	mov	rsi, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 26], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 7
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 9
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 26], 10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 12
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 26], 13
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r14 + 26], 14
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 26], 15
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 26]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 1
	mov	rax, r9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 26], 2
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 3
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 5
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 6
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 26], 7
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 26], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 26], 9
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 26], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 15
	movzx	edi, byte ptr [rdx + r11 + 27]
	vmovd	xmm2, edi
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 27], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 27], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 3
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 27], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 5
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 27], 6
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 7
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 8
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 27], 10
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 27], 11
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 12
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 27], 14
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 27], 15
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 27]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 3
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 27], 4
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 5
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 27], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 27], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 27], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 12
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 27], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm3, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm0   # 32-byte Spill
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r10 + 28]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 28], 1
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 28], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 3
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 4
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 28], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rsi + 28], 6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 7
	mov	r9, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 28], 8
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r8 + 28], 9
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r13 + 28], 11
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r11 + 28], 12
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 13
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rbx + 28], 14
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 28], 15
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 28]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 1
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 2
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 28], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 5
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 28], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 7
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 8
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 9
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 10
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 28], 11
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 14
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 15
	movzx	edi, byte ptr [rdx + r10 + 29]
	vmovd	xmm2, edi
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 29], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 29], 2
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 3
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 29], 5
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 29], 6
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 29], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 29], 9
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 29], 10
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 29], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 29], 12
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 29], 14
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 29], 15
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	movzx	edi, byte ptr [rdx + r8 + 29]
	vmovd	xmm3, edi
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 29], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 3
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 4
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 29], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 29], 11
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 29], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 29], 13
	vpinsrb	xmm4, xmm3, byte ptr [rdx + rcx + 29], 14
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm0   # 32-byte Spill
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm0, xmm4, byte ptr [rdx + rax + 29], 15
	vinserti128	ymm0, ymm0, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm0   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 30]
	vmovd	xmm0, edi
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r10 + 30], 1
	movzx	edi, byte ptr [rdx + rcx + 31]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 31], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 2
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 4
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 5
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r15 + 30], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 31], 6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 7
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 9
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r12 + 30], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 31], 10
	vpinsrb	xmm0, xmm0, byte ptr [rdx + r9 + 30], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 31], 11
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 13
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 31], 14
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm0, xmm0, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm2, xmm1, byte ptr [rdx + rax + 31], 15
	mov	rcx, r8
	movzx	eax, byte ptr [rdx + r8 + 30]
	vmovd	xmm1, eax
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 30], 1
	movzx	eax, byte ptr [rdx + r8 + 31]
	vmovd	xmm7, eax
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 31], 1
	mov	r10, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 30], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r10 + 31], 2
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 30], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 31], 4
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 30], 6
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 31], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 7
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 30], 12
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r13 + 31], 12
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 14
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 31], 15
	vinserti128	ymm0, ymm1, xmm0, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm0   # 32-byte Spill
	vinserti128	ymm0, ymm7, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm0   # 32-byte Spill
	vmovdqa	ymm2, ymmword ptr [rsp + 384]   # 32-byte Reload
	vpcmpgtb	ymm0, ymm13, ymm2
	vmovdqa	ymm1, ymmword ptr [rsp + 1216]  # 32-byte Reload
	vpcmpgtb	ymm7, ymm1, ymm2
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI11_0] # ymm5 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	vpandn	ymm7, ymm7, ymm5
	vpaddb	ymm0, ymm7, ymm0
	vmovdqa	ymm3, ymmword ptr [rsp + 544]   # 32-byte Reload
	vpcmpgtb	ymm7, ymm3, ymm2
	vmovdqa	ymm13, ymmword ptr [rip + .LCPI11_1] # ymm13 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpandn	ymm7, ymm7, ymm13
	vmovdqa	ymm3, ymmword ptr [rsp + 480]   # 32-byte Reload
	vpcmpgtb	ymm12, ymm3, ymm2
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI11_2] # ymm9 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpandn	ymm12, ymm12, ymm9
	vpor	ymm7, ymm12, ymm7
	vpcmpgtb	ymm12, ymm14, ymm2
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI11_3] # ymm4 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpandn	ymm12, ymm12, ymm4
	vpor	ymm7, ymm12, ymm7
	vpcmpeqd	ymm12, ymm12, ymm12
	vpsubb	ymm0, ymm0, ymm12
	vpcmpeqd	ymm8, ymm8, ymm8
	vpor	ymm0, ymm0, ymm7
	vpcmpgtb	ymm7, ymm15, ymm2
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI11_4] # ymm6 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpandn	ymm7, ymm7, ymm6
	vmovdqa	ymm12, ymmword ptr [rsp + 448]  # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm2
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI11_5] # ymm3 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpandn	ymm12, ymm12, ymm3
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm12, ymmword ptr [rsp + 512]  # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm2
	vmovdqa	ymm1, ymmword ptr [rip + .LCPI11_6] # ymm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpandn	ymm12, ymm12, ymm1
	vpor	ymm7, ymm12, ymm7
	vpor	ymm0, ymm0, ymm7
	vmovdqa	ymm7, ymmword ptr [rsp + 1184]  # 32-byte Reload
	vpcmpgtb	ymm7, ymm7, ymm2
	vmovdqa	ymm12, ymmword ptr [rsp + 1152] # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm2
	vpandn	ymm12, ymm12, ymm5
	vpaddb	ymm7, ymm12, ymm7
	vmovdqa	ymm12, ymmword ptr [rsp + 1120] # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm2
	vpandn	ymm12, ymm12, ymm13
	vmovdqa	ymm14, ymmword ptr [rsp + 1088] # 32-byte Reload
	vpcmpgtb	ymm15, ymm14, ymm2
	vpandn	ymm15, ymm15, ymm9
	vpor	ymm12, ymm12, ymm15
	vmovdqa	ymm14, ymmword ptr [rsp + 1024] # 32-byte Reload
	vpcmpgtb	ymm15, ymm14, ymm2
	vpandn	ymm15, ymm15, ymm4
	vpor	ymm12, ymm12, ymm15
	vpsubb	ymm7, ymm7, ymm8
	vpor	ymm7, ymm12, ymm7
	vmovdqa	ymm12, ymmword ptr [rsp + 1056] # 32-byte Reload
	vpcmpgtb	ymm12, ymm12, ymm2
	vpandn	ymm12, ymm12, ymm6
	vmovdqa	ymm14, ymmword ptr [rsp + 960]  # 32-byte Reload
	vpcmpgtb	ymm15, ymm14, ymm2
	vpandn	ymm15, ymm15, ymm3
	vpor	ymm12, ymm12, ymm15
	vmovdqa	ymm14, ymmword ptr [rsp + 992]  # 32-byte Reload
	vpcmpgtb	ymm15, ymm14, ymm2
	vpandn	ymm15, ymm15, ymm1
	vpor	ymm12, ymm12, ymm15
	vpor	ymm12, ymm12, ymm7
	vmovdqa	ymm7, ymmword ptr [rsp + 928]   # 32-byte Reload
	vpcmpgtb	ymm7, ymm7, ymm2
	vmovdqa	ymm14, ymmword ptr [rsp + 896]  # 32-byte Reload
	vpcmpgtb	ymm15, ymm14, ymm2
	vpandn	ymm15, ymm15, ymm5
	vpaddb	ymm7, ymm15, ymm7
	vmovdqa	ymm14, ymmword ptr [rsp + 832]  # 32-byte Reload
	vpcmpgtb	ymm15, ymm14, ymm2
	vpandn	ymm15, ymm15, ymm13
	vmovdqa	ymm14, ymmword ptr [rsp + 864]  # 32-byte Reload
	vpcmpgtb	ymm14, ymm14, ymm2
	vpandn	ymm14, ymm14, ymm9
	vpor	ymm14, ymm15, ymm14
	vmovdqa	ymm15, ymmword ptr [rsp + 768]  # 32-byte Reload
	vpcmpgtb	ymm15, ymm15, ymm2
	vpandn	ymm15, ymm15, ymm4
	vpor	ymm14, ymm14, ymm15
	vpsubb	ymm7, ymm7, ymm8
	vpor	ymm7, ymm14, ymm7
	vmovdqa	ymm14, ymmword ptr [rsp + 800]  # 32-byte Reload
	vpcmpgtb	ymm14, ymm14, ymm2
	vmovdqa	ymm15, ymm6
	vpandn	ymm14, ymm14, ymm6
	vpcmpgtb	ymm10, ymm10, ymm2
	vpandn	ymm10, ymm10, ymm3
	vpor	ymm10, ymm14, ymm10
	vpcmpgtb	ymm11, ymm11, ymm2
	vpandn	ymm11, ymm11, ymm1
	vmovdqa	ymm14, ymm1
	vpor	ymm10, ymm10, ymm11
	vpor	ymm7, ymm10, ymm7
	vmovdqa	ymm1, ymmword ptr [rsp + 576]   # 32-byte Reload
	vpcmpgtb	ymm9, ymm1, ymm2
	vmovdqa	ymm1, ymmword ptr [rsp + 608]   # 32-byte Reload
	vpcmpgtb	ymm8, ymm1, ymm2
	vpandn	ymm8, ymm8, ymm5
	vpaddb	ymm8, ymm8, ymm9
	vmovdqa	ymm1, ymmword ptr [rsp + 640]   # 32-byte Reload
	vpcmpgtb	ymm5, ymm1, ymm2
	vpandn	ymm5, ymm5, ymm13
	vmovdqa	ymm1, ymmword ptr [rsp + 672]   # 32-byte Reload
	vpcmpgtb	ymm6, ymm1, ymm2
	vpandn	ymm6, ymm6, ymmword ptr [rip + .LCPI11_2]
	vpor	ymm5, ymm5, ymm6
	vmovdqa	ymm1, ymmword ptr [rsp + 704]   # 32-byte Reload
	vpcmpgtb	ymm3, ymm1, ymm2
	vpandn	ymm3, ymm3, ymm4
	vpor	ymm3, ymm5, ymm3
	vpsubb	ymm5, ymm8, ymmword ptr [rip + .LCPI11_7]
	vpor	ymm3, ymm5, ymm3
	vmovdqa	ymm1, ymmword ptr [rsp + 736]   # 32-byte Reload
	vpcmpgtb	ymm4, ymm1, ymm2
	vpandn	ymm4, ymm4, ymm15
	vmovdqa	ymm1, ymmword ptr [rsp + 320]   # 32-byte Reload
	vpcmpgtb	ymm1, ymm1, ymm2
	vpandn	ymm1, ymm1, ymmword ptr [rip + .LCPI11_5]
	vpor	ymm1, ymm4, ymm1
	vmovdqa	ymm4, ymmword ptr [rsp + 288]   # 32-byte Reload
	vpcmpgtb	ymm2, ymm4, ymm2
	vpandn	ymm2, ymm2, ymm14
	vpor	ymm1, ymm1, ymm2
	vpor	ymm1, ymm3, ymm1
	vpunpcklbw	ymm2, ymm0, ymm12       # ymm2 = ymm0[0],ymm12[0],ymm0[1],ymm12[1],ymm0[2],ymm12[2],ymm0[3],ymm12[3],ymm0[4],ymm12[4],ymm0[5],ymm12[5],ymm0[6],ymm12[6],ymm0[7],ymm12[7],ymm0[16],ymm12[16],ymm0[17],ymm12[17],ymm0[18],ymm12[18],ymm0[19],ymm12[19],ymm0[20],ymm12[20],ymm0[21],ymm12[21],ymm0[22],ymm12[22],ymm0[23],ymm12[23]
	vpunpckhbw	ymm0, ymm0, ymm12       # ymm0 = ymm0[8],ymm12[8],ymm0[9],ymm12[9],ymm0[10],ymm12[10],ymm0[11],ymm12[11],ymm0[12],ymm12[12],ymm0[13],ymm12[13],ymm0[14],ymm12[14],ymm0[15],ymm12[15],ymm0[24],ymm12[24],ymm0[25],ymm12[25],ymm0[26],ymm12[26],ymm0[27],ymm12[27],ymm0[28],ymm12[28],ymm0[29],ymm12[29],ymm0[30],ymm12[30],ymm0[31],ymm12[31]
	vpunpcklbw	ymm3, ymm7, ymm1        # ymm3 = ymm7[0],ymm1[0],ymm7[1],ymm1[1],ymm7[2],ymm1[2],ymm7[3],ymm1[3],ymm7[4],ymm1[4],ymm7[5],ymm1[5],ymm7[6],ymm1[6],ymm7[7],ymm1[7],ymm7[16],ymm1[16],ymm7[17],ymm1[17],ymm7[18],ymm1[18],ymm7[19],ymm1[19],ymm7[20],ymm1[20],ymm7[21],ymm1[21],ymm7[22],ymm1[22],ymm7[23],ymm1[23]
	vpunpckhbw	ymm1, ymm7, ymm1        # ymm1 = ymm7[8],ymm1[8],ymm7[9],ymm1[9],ymm7[10],ymm1[10],ymm7[11],ymm1[11],ymm7[12],ymm1[12],ymm7[13],ymm1[13],ymm7[14],ymm1[14],ymm7[15],ymm1[15],ymm7[24],ymm1[24],ymm7[25],ymm1[25],ymm7[26],ymm1[26],ymm7[27],ymm1[27],ymm7[28],ymm1[28],ymm7[29],ymm1[29],ymm7[30],ymm1[30],ymm7[31],ymm1[31]
	vpunpcklwd	ymm4, ymm2, ymm3        # ymm4 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[8],ymm3[8],ymm2[9],ymm3[9],ymm2[10],ymm3[10],ymm2[11],ymm3[11]
	vpunpckhwd	ymm2, ymm2, ymm3        # ymm2 = ymm2[4],ymm3[4],ymm2[5],ymm3[5],ymm2[6],ymm3[6],ymm2[7],ymm3[7],ymm2[12],ymm3[12],ymm2[13],ymm3[13],ymm2[14],ymm3[14],ymm2[15],ymm3[15]
	vpunpcklwd	ymm3, ymm0, ymm1        # ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11]
	vpunpckhwd	ymm0, ymm0, ymm1        # ymm0 = ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15]
	vinserti128	ymm1, ymm4, xmm2, 1
	vperm2i128	ymm2, ymm4, ymm2, 49    # ymm2 = ymm4[2,3],ymm2[2,3]
	vinserti128	ymm4, ymm3, xmm0, 1
	vperm2i128	ymm0, ymm3, ymm0, 49    # ymm0 = ymm3[2,3],ymm0[2,3]
	mov	rcx, qword ptr [rsp + 376]      # 8-byte Reload
	vmovdqu	ymmword ptr [r15 + 4*rcx + 96], ymm0
	vmovdqu	ymmword ptr [r15 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r15 + 4*rcx + 32], ymm4
	vmovdqu	ymmword ptr [r15 + 4*rcx], ymm1
	add	rcx, 32
	mov	rbx, rcx
	cmp	rcx, qword ptr [rsp + 416]      # 8-byte Folded Reload
	jne	.LBB11_86
# %bb.87:
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	cmp	r14, qword ptr [rsp + 416]      # 8-byte Folded Reload
	mov	r11d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r13, qword ptr [rsp + 368]      # 8-byte Reload
	mov	rdx, qword ptr [rsp + 360]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	jne	.LBB11_88
	jmp	.LBB11_91
.LBB11_66:
	and	r14, -32
	mov	rax, r14
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 360], rax      # 8-byte Spill
	mov	qword ptr [rsp + 384], r14      # 8-byte Spill
	lea	rax, [r15 + 4*r14]
	mov	qword ptr [rsp + 368], rax      # 8-byte Spill
	vmovd	xmm0, r11d
	vpbroadcastb	ymm0, xmm0
	xor	ebx, ebx
	mov	qword ptr [rsp + 272], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_67:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 376], rbx      # 8-byte Spill
	shl	rbx, 5
	mov	rax, rbx
	or	rax, 32
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 64
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 96
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 128
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 160
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 192
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 224
	mov	qword ptr [rsp + 136], rax      # 8-byte Spill
	mov	rax, rbx
	or	rax, 256
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 288
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, rbx
	mov	qword ptr [rsp + 240], rbx      # 8-byte Spill
	or	rax, 320
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 512
	mov	rcx, rax
	movzx	eax, byte ptr [rdx + rax]
	vmovd	xmm3, eax
	movzx	eax, byte ptr [rdx + rbx]
	vmovd	xmm4, eax
	movzx	eax, byte ptr [rdx + rcx + 1]
	vmovd	xmm5, eax
	movzx	eax, byte ptr [rdx + rbx + 1]
	vmovd	xmm10, eax
	movzx	eax, byte ptr [rdx + rcx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 480], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 2]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 448], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rcx + 3]
	vmovd	xmm11, eax
	movzx	eax, byte ptr [rdx + rbx + 3]
	vmovd	xmm8, eax
	movzx	eax, byte ptr [rdx + rcx + 4]
	vmovd	xmm1, eax
	vmovdqa	xmmword ptr [rsp + 512], xmm1   # 16-byte Spill
	movzx	eax, byte ptr [rdx + rbx + 4]
	vmovd	xmm15, eax
	movzx	eax, byte ptr [rdx + rcx + 5]
	vmovd	xmm14, eax
	movzx	eax, byte ptr [rdx + rbx + 5]
	vmovd	xmm12, eax
	movzx	eax, byte ptr [rdx + rcx + 6]
	mov	qword ptr [rsp + 256], rcx      # 8-byte Spill
	vmovd	xmm13, eax
	movzx	eax, byte ptr [rdx + rbx + 6]
	vmovd	xmm7, eax
	movzx	eax, byte ptr [rdx + rcx + 7]
	vmovd	xmm2, eax
	movzx	eax, byte ptr [rdx + rbx + 7]
	vmovd	xmm1, eax
	mov	rax, rbx
	or	rax, 352
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 384
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 416
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 448
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rbx
	or	rax, 480
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rdi, rbx
	or	rdi, 544
	mov	qword ptr [rsp + 200], rdi      # 8-byte Spill
	mov	rax, rbx
	or	rax, 576
	mov	r13, rax
	mov	qword ptr [rsp + 224], rax      # 8-byte Spill
	mov	r11, rbx
	or	r11, 608
	mov	qword ptr [rsp + 168], r11      # 8-byte Spill
	mov	r14, rbx
	or	r14, 640
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	mov	r10, rbx
	or	r10, 672
	mov	qword ptr [rsp + 160], r10      # 8-byte Spill
	mov	rax, rbx
	or	rax, 704
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	r8, rbx
	or	r8, 736
	mov	qword ptr [rsp + 120], r8       # 8-byte Spill
	mov	r15, rbx
	or	r15, 768
	mov	qword ptr [rsp + 192], r15      # 8-byte Spill
	mov	rax, rbx
	or	rax, 800
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	r9, rbx
	or	r9, 832
	mov	qword ptr [rsp + 184], r9       # 8-byte Spill
	mov	r12, rbx
	or	r12, 864
	mov	qword ptr [rsp + 176], r12      # 8-byte Spill
	mov	rsi, rbx
	or	rsi, 896
	mov	qword ptr [rsp + 264], rsi      # 8-byte Spill
	mov	rcx, rbx
	or	rcx, 928
	mov	qword ptr [rsp + 232], rcx      # 8-byte Spill
	mov	rax, rbx
	or	rax, 960
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	or	rbx, 992
	mov	qword ptr [rsp + 248], rbx      # 8-byte Spill
	vpinsrb	xmm9, xmm3, byte ptr [rdx + rdi], 1
	vpinsrb	xmm3, xmm9, byte ptr [rdx + r13], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10], 5
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx], 15
	mov	r12, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12], 1
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14], 2
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11], 3
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8], 4
	mov	r9, qword ptr [rsp + 288]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9], 5
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx], 6
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi], 7
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax], 10
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10], 11
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx], 12
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx], 13
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx], 14
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13], 15
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 2
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 4
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 5
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 6
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 7
	mov	r13, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 1], 8
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 9
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 10
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 11
	mov	rcx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 12
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 13
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 14
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 1], 15
	vpinsrb	xmm6, xmm10, byte ptr [rdx + r12 + 1], 1
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r14 + 1], 2
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r11 + 1], 3
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r8 + 1], 4
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 1], 5
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 1], 6
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 1], 7
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r15 + 1], 8
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 1], 9
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 1], 10
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r10 + 1], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 1], 12
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 1], 13
	mov	r11, rax
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 1], 14
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1216], ymm3  # 32-byte Spill
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm6, byte ptr [rdx + rax + 1], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 8]
	vmovd	xmm9, edi
	vinserti128	ymm3, ymm3, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 544], ymm3   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 8]
	vmovd	xmm10, edi
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vmovdqa	xmm3, xmmword ptr [rsp + 480]   # 16-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 2], 1
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 2], 2
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 3
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 2], 4
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 5
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 2], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 8
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 9
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 2], 10
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 2], 11
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 2], 12
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 2], 13
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 2], 14
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 2], 15
	vmovdqa	xmm4, xmmword ptr [rsp + 448]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 2], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 2], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 3
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 2], 8
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 9
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 10
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 11
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 2], 13
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 2], 14
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 2], 15
	vpinsrb	xmm5, xmm11, byte ptr [rdx + r9 + 3], 1
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 3], 2
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 3
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 3], 4
	mov	r11, r15
	mov	r14, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 3], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 3], 6
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 7
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 3], 8
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 3], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r12 + 3], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 3], 11
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 3], 12
	mov	r13, rbx
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 3], 13
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 3], 14
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 3], 15
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm6, xmm8, byte ptr [rdx + rcx + 3], 1
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 5
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 3], 6
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 7
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 3], 8
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 3], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 12
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 3], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 480], ymm3   # 32-byte Spill
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm6, byte ptr [rdx + rax + 3], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 9]
	vmovd	xmm8, edi
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 3], 15
	vinserti128	ymm3, ymm3, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 448], ymm3   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 9]
	vmovd	xmm11, edi
	vmovdqa	xmm3, xmmword ptr [rsp + 512]   # 16-byte Reload
	mov	r8, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 4], 1
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 2
	mov	rbx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 4], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 4], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 5
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 6
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 4], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 4], 8
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 9
	mov	r15, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 4], 10
	mov	r14, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 4], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 4], 12
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 13
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 4], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 4], 15
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm15, byte ptr [rdx + r10 + 4], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 4], 6
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 4], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 4], 9
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 4], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 4], 11
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 4], 12
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 4], 13
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 4], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 4], 15
	vpinsrb	xmm5, xmm14, byte ptr [rdx + r8 + 5], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 5], 2
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 3
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 4
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 5], 5
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 5], 6
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 5], 7
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 8
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 5], 10
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 11
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 5], 12
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 5], 13
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 5], 14
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 5], 15
	vpinsrb	xmm6, xmm12, byte ptr [rdx + r10 + 5], 1
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 5], 2
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 5], 3
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 5], 4
	mov	rbx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 5], 5
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 5], 6
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 5], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 5], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 5], 9
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 5], 10
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 5], 11
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 5], 12
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 5], 13
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 5], 14
	vinserti128	ymm14, ymm4, xmm3, 1
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm6, byte ptr [rdx + rax + 5], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 10]
	vmovd	xmm12, edi
	vinserti128	ymm3, ymm4, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 512], ymm3   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 10]
	vmovd	xmm4, edi
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm13, byte ptr [rdx + r15 + 6], 1
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 2
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 4
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 6], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 6
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 6], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 8
	mov	r8, qword ptr [rsp + 320]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 6], 9
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 10
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 6], 11
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 6], 12
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 6], 13
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 6], 14
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 6], 15
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm6, xmm7, byte ptr [rdx + r11 + 6], 1
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r14 + 6], 2
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rbx + 6], 3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 6], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 6], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 6], 6
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 6], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 6], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rax + 6], 9
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 6], 10
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r9 + 6], 11
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 6], 12
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 6], 13
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 6], 14
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 6], 15
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 1
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 2
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 3
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 4
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 5
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 7], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 7
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 7], 9
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 7], 10
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 7], 12
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 7], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 7], 14
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 7], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 7], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 7], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 7], 3
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 7], 6
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 7], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 7], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 7], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 7], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 7], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 7], 13
	vinserti128	ymm3, ymm6, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 1184], ymm3  # 32-byte Spill
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm5, xmm1, byte ptr [rdx + rax + 7], 14
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 11]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 7], 15
	vinserti128	ymm2, ymm5, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 1152], ymm2  # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 11]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm5, xmm9, byte ptr [rdx + rax + 8], 1
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 2
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rcx + 8], 3
	mov	r10, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r10 + 8], 4
	mov	rbx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rbx + 8], 5
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r15 + 8], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rax + 8], 7
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r9 + 8], 8
	mov	rax, r8
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 8], 9
	vpinsrb	xmm5, xmm5, byte ptr [rdx + rsi + 8], 10
	mov	r8, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r8 + 8], 11
	mov	r11, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r11 + 8], 12
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 8], 13
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r13 + 8], 14
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm5, xmm5, byte ptr [rdx + r14 + 8], 15
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm6, xmm10, byte ptr [rdx + rsi + 8], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 2
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 3
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r15 + 8], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rdi + 8], 5
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 6
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 7
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 8
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 9
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 10
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 11
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 12
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 8], 13
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + r12 + 8], 14
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm6, xmm6, byte ptr [rdx + rsi + 8], 15
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm7, xmm8, byte ptr [rdx + rsi + 9], 1
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 9], 2
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 3
	mov	r12, rcx
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r10 + 9], 4
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rbx + 9], 5
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rsi + 9], 6
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 7
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r9 + 9], 8
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 9
	mov	rcx, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rcx + 9], 10
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r8 + 9], 11
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r11 + 9], 12
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm7, xmm7, byte ptr [rdx + rax + 9], 13
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r13 + 9], 14
	vpinsrb	xmm7, xmm7, byte ptr [rdx + r14 + 9], 15
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm3, xmm11, byte ptr [rdx + r13 + 9], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 9], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 9], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 6
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 9], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 12
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 14
	vinserti128	ymm5, ymm6, xmm5, 1
	vmovdqa	ymmword ptr [rsp + 1120], ymm5  # 32-byte Spill
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 9], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 12]
	vmovd	xmm5, edi
	vinserti128	ymm3, ymm3, xmm7, 1
	vmovdqa	ymmword ptr [rsp + 1088], ymm3  # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 12]
	vmovd	xmm6, edi
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm12, byte ptr [rdx + r10 + 10], 1
	mov	r8, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 10], 2
	mov	r9, r12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 10], 3
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 10], 4
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 10], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 10], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 7
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 10], 10
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 10], 11
	mov	r14, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 10], 12
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 13
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 10], 14
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 10], 15
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 10], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 10], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 10], 3
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 10], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 5
	mov	r13, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 10], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 10], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 8
	mov	rcx, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 10], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 10
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 10], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 12
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 14
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 10], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 11], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 11], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 11], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 11], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 11], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 11], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 8
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 9
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 11], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 11], 12
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 11], 13
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 11], 14
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 11], 15
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 11], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 11], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 11], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 11], 6
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 11], 7
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 11], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 9
	mov	r13, rcx
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 11], 11
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 12
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 13
	vinserti128	ymm3, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 1056], ymm3  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 14
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 13]
	vmovd	xmm3, edi
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 11], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 1024], ymm1  # 32-byte Spill
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 13]
	vmovd	xmm1, edi
	mov	rcx, r10
	vpinsrb	xmm2, xmm5, byte ptr [rdx + r10 + 12], 1
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 12], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 12], 3
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 12], 4
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 12], 5
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 6
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 7
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 12], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 9
	mov	r10, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 12], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 11
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 12
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 12], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 12], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 12], 15
	vpinsrb	xmm4, xmm6, byte ptr [rdx + rbx + 12], 1
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 12], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 12], 3
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 12], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 12], 5
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 12], 6
	mov	r12, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 12], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 12], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 12], 9
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r11 + 12], 10
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 12], 11
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 12], 12
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 12], 13
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 12], 14
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 12], 15
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 2
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 13], 5
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 6
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 13], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 13], 8
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 13], 10
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 11
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 13], 12
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 13
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 13], 14
	mov	r8, qword ptr [rsp + 248]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 13], 15
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 13], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 13], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 13], 3
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 4
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 13], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 13], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 8
	mov	r14, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 13], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 13], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 12
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 13], 13
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 13], 14
	vinserti128	ymm2, ymm4, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 992], ymm2   # 32-byte Spill
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 13], 15
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 14]
	vmovd	xmm2, edi
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 960], ymm1   # 32-byte Spill
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 14]
	vmovd	xmm1, edi
	mov	rsi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 14], 1
	mov	rax, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 2
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 4
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 5
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 14], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 14], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 8
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 9
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 10
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 14], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 14], 12
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 14], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 14], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 14], 15
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 14], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 3
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 5
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 14], 6
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 14], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 11
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 14], 12
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 14], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 14], 14
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 14], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 15]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 1
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 15], 2
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 3
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 4
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 6
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 15], 7
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 15], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 15], 9
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 15], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 11
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 15], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 15], 13
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 14
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 15], 15
	mov	rsi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rsi + 15]
	vmovd	xmm4, edi
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 15], 6
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 15], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 15], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 15], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 15], 10
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 15], 11
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 15], 12
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 15], 13
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 15], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 15], 15
	vinserti128	ymm1, ymm1, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 896], ymm1   # 32-byte Spill
	vinserti128	ymm1, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 928], ymm1   # 32-byte Spill
	movzx	edi, byte ptr [rdx + rcx + 16]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 16], 2
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 4
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 5
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 6
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 16], 8
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 9
	mov	r12, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r12 + 16], 10
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 16], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 16], 13
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 16], 14
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 16], 15
	movzx	edi, byte ptr [rdx + rsi + 16]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 16], 1
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 16], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 16], 3
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 16], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 16], 5
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 16], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 16], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 16], 8
	mov	rsi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 16], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 16], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 16], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 16], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 16], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 16], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 16], 15
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	movzx	edi, byte ptr [rdx + r8 + 17]
	vmovd	xmm3, edi
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 1
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 17], 2
	mov	r11, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 17], 3
	mov	r9, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 17], 4
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 5
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 6
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 8
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 17], 10
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 11
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 12
	mov	rax, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 17], 14
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 17], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 17]
	vmovd	xmm4, edi
	mov	r15, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 17], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 17], 2
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 17], 3
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 17], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 17], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 17], 6
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 17], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 17], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 17], 9
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 17], 10
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 17], 11
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 17], 12
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 17], 13
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 17], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 864], ymm1   # 32-byte Spill
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm4, byte ptr [rdx + rsi + 17], 15
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 832], ymm1   # 32-byte Spill
	movzx	edi, byte ptr [rdx + r8 + 18]
	vmovd	xmm1, edi
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 18], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 18], 3
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 18], 4
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 18], 5
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 7
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 18], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 9
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 11
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 12
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 13
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 18], 14
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 18], 15
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 18]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 18], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 18], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 18], 3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 18], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 18], 5
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 18], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 18], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 18], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 18], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 18], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 18], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 18], 12
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 18], 13
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 18], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 18], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 19]
	vmovd	xmm3, edi
	mov	r10, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 19], 1
	mov	rsi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 19], 2
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 19], 5
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 6
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 19], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 9
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 10
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 19], 11
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 12
	mov	r13, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 19], 13
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 14
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 19], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 19]
	vmovd	xmm4, edi
	mov	rdi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 19], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 19], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 19], 3
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 19], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 19], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 19], 6
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 19], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 19], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 19], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 19], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 19], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 19], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 19], 13
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 19], 14
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 19], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 768], ymm1   # 32-byte Spill
	vinserti128	ymm1, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 800], ymm1   # 32-byte Spill
	movzx	edi, byte ptr [rdx + rcx + 20]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 20], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 2
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 20], 3
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 20], 4
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 20], 5
	mov	r8, qword ptr [rsp + 152]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 20], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 20], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 8
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 20], 9
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 20], 11
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 20], 13
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 20], 14
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 20], 15
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 20]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 1
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 20], 2
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 20], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 20], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 6
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 7
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 20], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 11
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 12
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 13
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 14
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 20], 15
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r12 + 21]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 21], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 21], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 21], 6
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 21], 7
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 8
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 9
	mov	rsi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 21], 10
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r15 + 21], 11
	mov	rbx, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 21], 12
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 21], 13
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 21], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 21], 15
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 21]
	vmovd	xmm4, edi
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 21], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 21], 3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 4
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 21], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 6
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 21], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 9
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 21], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 11
	mov	r14, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 21], 12
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 21], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 704], ymm1   # 32-byte Spill
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm1, xmm4, byte ptr [rdx + rcx + 21], 15
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 736], ymm1   # 32-byte Spill
	movzx	edi, byte ptr [rdx + r12 + 22]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 2
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 4
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 5
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 22], 7
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 22], 8
	mov	rcx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 22], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 22], 12
	mov	rsi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 22], 13
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 14
	mov	rcx, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 22], 15
	movzx	edi, byte ptr [rdx + r11 + 22]
	vmovd	xmm2, edi
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 22], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 22], 2
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 22], 3
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 22], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 22], 5
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 22], 6
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 22], 7
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 22], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 22], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 22], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 22], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 22], 12
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 22], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 22], 14
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 22], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 23]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 1
	mov	r8, qword ptr [rsp + 224]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 23], 2
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 4
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 23], 5
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 23], 6
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 23], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 23], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 9
	mov	r9, qword ptr [rsp + 184]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 23], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 11
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 23], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 13
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 23], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 23], 15
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 23]
	vmovd	xmm4, edi
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 23], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 23], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 23], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 23], 4
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 23], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 23], 6
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 23], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 23], 8
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 23], 9
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 23], 10
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r13 + 23], 11
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 23], 12
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 23], 13
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 23], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 23], 15
	vinserti128	ymm11, ymm2, xmm1, 1
	vinserti128	ymm12, ymm4, xmm3, 1
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 24]
	vmovd	xmm1, edi
	mov	rax, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r8 + 24], 2
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 4
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 24], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 24], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 24], 7
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 24], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 24], 9
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 24], 10
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 24], 11
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 24], 12
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 24], 13
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 24], 14
	mov	rdi, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 24], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 24]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 24], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 24], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 24], 3
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 24], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 24], 5
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 24], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 24], 7
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 24], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 24], 9
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 24], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 24], 11
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 24], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 24], 13
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 24], 14
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 24], 15
	mov	rcx, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rcx + 25]
	vmovd	xmm3, edi
	mov	r9, qword ptr [rsp + 200]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 25], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 25], 2
	mov	r13, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 25], 3
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 25], 4
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 25], 5
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 25], 6
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 25], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 8
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 9
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 10
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 25], 11
	mov	rax, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 25], 12
	mov	rcx, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 25], 13
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 25], 14
	mov	r11, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 25], 15
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 25]
	vmovd	xmm4, edi
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 25], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 25], 2
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 25], 3
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 25], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 25], 5
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 25], 6
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 25], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 25], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 25], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 25], 10
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 25], 11
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 25], 12
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 25], 13
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 25], 14
	vinserti128	ymm10, ymm2, xmm1, 1
	vpinsrb	xmm1, xmm4, byte ptr [rdx + r10 + 25], 15
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 416], ymm1   # 32-byte Spill
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 26]
	vmovd	xmm1, edi
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 26], 1
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 2
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 3
	mov	r9, qword ptr [rsp + 128]       # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 26], 4
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 26], 5
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 6
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 7
	mov	rsi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 8
	mov	rsi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 9
	mov	r13, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 26], 10
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 26], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 26], 12
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 13
	mov	rax, rcx
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 26], 14
	mov	rsi, r11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 26], 15
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + r11 + 26]
	vmovd	xmm2, edi
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 26], 1
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r8 + 26], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 26], 3
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 26], 4
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 26], 5
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 26], 6
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 26], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 26], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 26], 9
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 26], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 26], 11
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 26], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r14 + 26], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rbx + 26], 14
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 26], 15
	mov	rdi, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rdi + 27]
	vmovd	xmm3, edi
	mov	rdi, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 1
	mov	r14, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 27], 2
	mov	rdi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 27], 4
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 5
	mov	rdi, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 7
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 27], 8
	mov	rbx, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 27], 9
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 27], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 11
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 27], 12
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 13
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 27], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 27], 15
	movzx	edi, byte ptr [rdx + r11 + 27]
	vmovd	xmm4, edi
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 27], 1
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 27], 2
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 27], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r10 + 27], 4
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 27], 5
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rsi + 27], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 27], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 27], 8
	mov	r12, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 27], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 27], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 27], 11
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 27], 12
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 27], 13
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 27], 14
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rcx + 27], 15
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 576], ymm1   # 32-byte Spill
	vinserti128	ymm1, ymm4, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 608], ymm1   # 32-byte Spill
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	movzx	edi, byte ptr [rdx + r8 + 28]
	vmovd	xmm1, edi
	mov	rcx, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 28], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 28], 2
	mov	rsi, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 28], 3
	mov	r10, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 28], 4
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 28], 5
	mov	r13, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 28], 6
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 7
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r9 + 28], 8
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rbx + 28], 9
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 10
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 11
	mov	rdi, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 12
	mov	rdi, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rdi + 28], 13
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 28], 14
	mov	r14, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r14 + 28], 15
	mov	rbx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rbx + 28]
	vmovd	xmm2, edi
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 6
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r9 + 28], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 28], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 28], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 28], 12
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 28], 13
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rdi + 28], 14
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r12 + 28], 15
	movzx	edi, byte ptr [rdx + r8 + 29]
	vmovd	xmm3, edi
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 29], 1
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rcx + 29], 2
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 29], 4
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 29], 5
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 29], 6
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rsi + 29], 7
	mov	rdi, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 8
	mov	rdi, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 9
	mov	rdi, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 10
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r13 + 29], 11
	mov	r10, qword ptr [rsp + 264]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r10 + 29], 12
	mov	r11, qword ptr [rsp + 232]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r11 + 29], 13
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rdi + 29], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 29], 15
	movzx	edi, byte ptr [rdx + rbx + 29]
	vmovd	xmm4, edi
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 29], 1
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 29], 2
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 29], 3
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 29], 4
	mov	rdi, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 29], 5
	mov	rbx, qword ptr [rsp + 144]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 29], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 29], 7
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 29], 8
	mov	rdi, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 29], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r15 + 29], 10
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rdi + 29], 11
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 29], 12
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 29], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 29], 14
	vinserti128	ymm1, ymm2, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 640], ymm1   # 32-byte Spill
	vpinsrb	xmm1, xmm4, byte ptr [rdx + r12 + 29], 15
	vinserti128	ymm1, ymm1, xmm3, 1
	vmovdqa	ymmword ptr [rsp + 672], ymm1   # 32-byte Spill
	mov	rax, qword ptr [rsp + 256]      # 8-byte Reload
	movzx	edi, byte ptr [rdx + rax + 30]
	vmovd	xmm1, edi
	mov	r15, qword ptr [rsp + 200]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r15 + 30], 1
	movzx	edi, byte ptr [rdx + rax + 31]
	vmovd	xmm2, edi
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r15 + 31], 1
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rcx + 30], 2
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rcx + 31], 2
	mov	rax, qword ptr [rsp + 168]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 4
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 4
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 5
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 6
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 6
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rsi + 30], 7
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rsi + 31], 7
	mov	r15, qword ptr [rsp + 272]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 192]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 8
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 8
	mov	rax, qword ptr [rsp + 320]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 184]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 10
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r13 + 30], 11
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r13 + 31], 11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r10 + 30], 12
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r10 + 31], 12
	mov	rax, r11
	vpinsrb	xmm1, xmm1, byte ptr [rdx + r11 + 30], 13
	vpinsrb	xmm2, xmm2, byte ptr [rdx + r11 + 31], 13
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 14
	mov	rax, qword ptr [rsp + 248]      # 8-byte Reload
	vpinsrb	xmm1, xmm1, byte ptr [rdx + rax + 30], 15
	vpinsrb	xmm2, xmm2, byte ptr [rdx + rax + 31], 15
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movzx	eax, byte ptr [rdx + rcx + 30]
	vmovd	xmm3, eax
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 30], 1
	movzx	eax, byte ptr [rdx + rcx + 31]
	vmovd	xmm4, eax
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 31], 1
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r8 + 30], 2
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r8 + 31], 2
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 3
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 3
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r14 + 30], 4
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r14 + 31], 4
	mov	rax, qword ptr [rsp + 288]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 5
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 5
	mov	rax, rbx
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rbx + 30], 6
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rbx + 31], 6
	mov	rax, qword ptr [rsp + 136]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 7
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 7
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r9 + 30], 8
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r9 + 31], 8
	mov	rax, qword ptr [rsp + 216]      # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 9
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 10
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 11
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 11
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 12
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 12
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 13
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 13
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	vpinsrb	xmm3, xmm3, byte ptr [rdx + rax + 30], 14
	vpinsrb	xmm4, xmm4, byte ptr [rdx + rax + 31], 14
	vpinsrb	xmm3, xmm3, byte ptr [rdx + r12 + 30], 15
	vpinsrb	xmm4, xmm4, byte ptr [rdx + r12 + 31], 15
	vinserti128	ymm1, ymm3, xmm1, 1
	vmovdqa	ymmword ptr [rsp + 320], ymm1   # 32-byte Spill
	vinserti128	ymm1, ymm4, xmm2, 1
	vmovdqa	ymmword ptr [rsp + 288], ymm1   # 32-byte Spill
	vpmaxub	ymm1, ymm0, ymmword ptr [rsp + 1216] # 32-byte Folded Reload
	vpcmpeqb	ymm1, ymm0, ymm1
	vpmaxub	ymm2, ymm0, ymmword ptr [rsp + 544] # 32-byte Folded Reload
	vpcmpeqb	ymm2, ymm0, ymm2
	vmovdqa	ymm7, ymmword ptr [rip + .LCPI11_0] # ymm7 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	vpand	ymm2, ymm2, ymm7
	vpsubb	ymm1, ymm2, ymm1
	vpmaxub	ymm2, ymm0, ymmword ptr [rsp + 480] # 32-byte Folded Reload
	vpcmpeqb	ymm2, ymm0, ymm2
	vmovdqa	ymm8, ymmword ptr [rip + .LCPI11_1] # ymm8 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	vpand	ymm2, ymm8, ymm2
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 448] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vmovdqa	ymm5, ymmword ptr [rip + .LCPI11_2] # ymm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	vpand	ymm15, ymm15, ymm5
	vpor	ymm2, ymm15, ymm2
	vpor	ymm1, ymm1, ymm2
	vpmaxub	ymm2, ymm14, ymm0
	vpcmpeqb	ymm2, ymm0, ymm2
	vmovdqa	ymm6, ymmword ptr [rip + .LCPI11_3] # ymm6 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	vpand	ymm2, ymm2, ymm6
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 512] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vmovdqa	ymm3, ymmword ptr [rip + .LCPI11_4] # ymm3 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	vpand	ymm15, ymm15, ymm3
	vpor	ymm2, ymm15, ymm2
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 1184] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vmovdqa	ymm4, ymmword ptr [rip + .LCPI11_5] # ymm4 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	vpand	ymm15, ymm15, ymm4
	vpor	ymm2, ymm15, ymm2
	vpor	ymm1, ymm1, ymm2
	vpmaxub	ymm2, ymm0, ymmword ptr [rsp + 1152] # 32-byte Folded Reload
	vpcmpeqb	ymm2, ymm0, ymm2
	vmovdqa	ymm9, ymmword ptr [rip + .LCPI11_6] # ymm9 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	vpand	ymm2, ymm9, ymm2
	vpor	ymm2, ymm1, ymm2
	vpmaxub	ymm1, ymm0, ymmword ptr [rsp + 1120] # 32-byte Folded Reload
	vpcmpeqb	ymm1, ymm0, ymm1
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 1088] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpand	ymm15, ymm15, ymm7
	vpsubb	ymm1, ymm15, ymm1
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 1056] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpand	ymm15, ymm15, ymm8
	vpmaxub	ymm14, ymm0, ymmword ptr [rsp + 1024] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpand	ymm14, ymm14, ymm5
	vpor	ymm14, ymm15, ymm14
	vpor	ymm1, ymm14, ymm1
	vpmaxub	ymm14, ymm0, ymmword ptr [rsp + 992] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpand	ymm14, ymm14, ymm6
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 960] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpand	ymm15, ymm15, ymm3
	vpor	ymm14, ymm14, ymm15
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 896] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpand	ymm15, ymm15, ymm4
	vpor	ymm14, ymm14, ymm15
	vpor	ymm1, ymm14, ymm1
	vpmaxub	ymm14, ymm0, ymmword ptr [rsp + 928] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpand	ymm14, ymm14, ymm9
	vpor	ymm1, ymm14, ymm1
	vpmaxub	ymm14, ymm0, ymmword ptr [rsp + 864] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 832] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpand	ymm15, ymm15, ymm7
	vpsubb	ymm14, ymm15, ymm14
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 768] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpand	ymm15, ymm15, ymm8
	vpmaxub	ymm13, ymm0, ymmword ptr [rsp + 800] # 32-byte Folded Reload
	vpcmpeqb	ymm13, ymm13, ymm0
	vpand	ymm13, ymm13, ymm5
	vpor	ymm13, ymm15, ymm13
	vpor	ymm13, ymm14, ymm13
	vpmaxub	ymm14, ymm0, ymmword ptr [rsp + 704] # 32-byte Folded Reload
	vpcmpeqb	ymm14, ymm14, ymm0
	vpand	ymm14, ymm14, ymm6
	vpmaxub	ymm15, ymm0, ymmword ptr [rsp + 736] # 32-byte Folded Reload
	vpcmpeqb	ymm15, ymm15, ymm0
	vpand	ymm15, ymm15, ymm3
	vpor	ymm14, ymm14, ymm15
	vpmaxub	ymm11, ymm11, ymm0
	vpcmpeqb	ymm11, ymm11, ymm0
	vpand	ymm11, ymm11, ymm4
	vpor	ymm11, ymm14, ymm11
	vpor	ymm11, ymm13, ymm11
	vpmaxub	ymm12, ymm12, ymm0
	vpcmpeqb	ymm12, ymm12, ymm0
	vmovdqa	ymm13, ymm9
	vpand	ymm12, ymm12, ymm9
	vpor	ymm11, ymm11, ymm12
	vpmaxub	ymm10, ymm10, ymm0
	vpcmpeqb	ymm10, ymm10, ymm0
	vpmaxub	ymm9, ymm0, ymmword ptr [rsp + 416] # 32-byte Folded Reload
	vpcmpeqb	ymm9, ymm9, ymm0
	vpand	ymm9, ymm9, ymm7
	vpsubb	ymm9, ymm9, ymm10
	vpmaxub	ymm7, ymm0, ymmword ptr [rsp + 576] # 32-byte Folded Reload
	vpcmpeqb	ymm7, ymm0, ymm7
	vpand	ymm7, ymm8, ymm7
	vpmaxub	ymm8, ymm0, ymmword ptr [rsp + 608] # 32-byte Folded Reload
	vpcmpeqb	ymm8, ymm8, ymm0
	vpand	ymm8, ymm8, ymm5
	vpor	ymm7, ymm8, ymm7
	vpor	ymm7, ymm9, ymm7
	vpmaxub	ymm5, ymm0, ymmword ptr [rsp + 640] # 32-byte Folded Reload
	vpcmpeqb	ymm5, ymm0, ymm5
	vpand	ymm5, ymm5, ymm6
	vpmaxub	ymm6, ymm0, ymmword ptr [rsp + 672] # 32-byte Folded Reload
	vpcmpeqb	ymm6, ymm0, ymm6
	vpand	ymm6, ymm6, ymm3
	vpor	ymm5, ymm5, ymm6
	vpmaxub	ymm3, ymm0, ymmword ptr [rsp + 320] # 32-byte Folded Reload
	vpcmpeqb	ymm3, ymm0, ymm3
	vpand	ymm3, ymm3, ymm4
	vpor	ymm3, ymm5, ymm3
	vpor	ymm3, ymm7, ymm3
	vpmaxub	ymm4, ymm0, ymmword ptr [rsp + 288] # 32-byte Folded Reload
	vpcmpeqb	ymm4, ymm0, ymm4
	vpand	ymm4, ymm13, ymm4
	vpor	ymm3, ymm3, ymm4
	vpunpcklbw	ymm4, ymm2, ymm1        # ymm4 = ymm2[0],ymm1[0],ymm2[1],ymm1[1],ymm2[2],ymm1[2],ymm2[3],ymm1[3],ymm2[4],ymm1[4],ymm2[5],ymm1[5],ymm2[6],ymm1[6],ymm2[7],ymm1[7],ymm2[16],ymm1[16],ymm2[17],ymm1[17],ymm2[18],ymm1[18],ymm2[19],ymm1[19],ymm2[20],ymm1[20],ymm2[21],ymm1[21],ymm2[22],ymm1[22],ymm2[23],ymm1[23]
	vpunpckhbw	ymm1, ymm2, ymm1        # ymm1 = ymm2[8],ymm1[8],ymm2[9],ymm1[9],ymm2[10],ymm1[10],ymm2[11],ymm1[11],ymm2[12],ymm1[12],ymm2[13],ymm1[13],ymm2[14],ymm1[14],ymm2[15],ymm1[15],ymm2[24],ymm1[24],ymm2[25],ymm1[25],ymm2[26],ymm1[26],ymm2[27],ymm1[27],ymm2[28],ymm1[28],ymm2[29],ymm1[29],ymm2[30],ymm1[30],ymm2[31],ymm1[31]
	vpunpcklbw	ymm2, ymm11, ymm3       # ymm2 = ymm11[0],ymm3[0],ymm11[1],ymm3[1],ymm11[2],ymm3[2],ymm11[3],ymm3[3],ymm11[4],ymm3[4],ymm11[5],ymm3[5],ymm11[6],ymm3[6],ymm11[7],ymm3[7],ymm11[16],ymm3[16],ymm11[17],ymm3[17],ymm11[18],ymm3[18],ymm11[19],ymm3[19],ymm11[20],ymm3[20],ymm11[21],ymm3[21],ymm11[22],ymm3[22],ymm11[23],ymm3[23]
	vpunpckhbw	ymm3, ymm11, ymm3       # ymm3 = ymm11[8],ymm3[8],ymm11[9],ymm3[9],ymm11[10],ymm3[10],ymm11[11],ymm3[11],ymm11[12],ymm3[12],ymm11[13],ymm3[13],ymm11[14],ymm3[14],ymm11[15],ymm3[15],ymm11[24],ymm3[24],ymm11[25],ymm3[25],ymm11[26],ymm3[26],ymm11[27],ymm3[27],ymm11[28],ymm3[28],ymm11[29],ymm3[29],ymm11[30],ymm3[30],ymm11[31],ymm3[31]
	vpunpcklwd	ymm5, ymm4, ymm2        # ymm5 = ymm4[0],ymm2[0],ymm4[1],ymm2[1],ymm4[2],ymm2[2],ymm4[3],ymm2[3],ymm4[8],ymm2[8],ymm4[9],ymm2[9],ymm4[10],ymm2[10],ymm4[11],ymm2[11]
	vpunpckhwd	ymm2, ymm4, ymm2        # ymm2 = ymm4[4],ymm2[4],ymm4[5],ymm2[5],ymm4[6],ymm2[6],ymm4[7],ymm2[7],ymm4[12],ymm2[12],ymm4[13],ymm2[13],ymm4[14],ymm2[14],ymm4[15],ymm2[15]
	vpunpcklwd	ymm4, ymm1, ymm3        # ymm4 = ymm1[0],ymm3[0],ymm1[1],ymm3[1],ymm1[2],ymm3[2],ymm1[3],ymm3[3],ymm1[8],ymm3[8],ymm1[9],ymm3[9],ymm1[10],ymm3[10],ymm1[11],ymm3[11]
	vpunpckhwd	ymm1, ymm1, ymm3        # ymm1 = ymm1[4],ymm3[4],ymm1[5],ymm3[5],ymm1[6],ymm3[6],ymm1[7],ymm3[7],ymm1[12],ymm3[12],ymm1[13],ymm3[13],ymm1[14],ymm3[14],ymm1[15],ymm3[15]
	vinserti128	ymm3, ymm5, xmm2, 1
	vperm2i128	ymm2, ymm5, ymm2, 49    # ymm2 = ymm5[2,3],ymm2[2,3]
	vinserti128	ymm5, ymm4, xmm1, 1
	vperm2i128	ymm1, ymm4, ymm1, 49    # ymm1 = ymm4[2,3],ymm1[2,3]
	mov	rcx, qword ptr [rsp + 376]      # 8-byte Reload
	vmovdqu	ymmword ptr [r15 + 4*rcx + 96], ymm1
	vmovdqu	ymmword ptr [r15 + 4*rcx + 64], ymm2
	vmovdqu	ymmword ptr [r15 + 4*rcx + 32], ymm5
	vmovdqu	ymmword ptr [r15 + 4*rcx], ymm3
	add	rcx, 32
	mov	rbx, rcx
	cmp	rcx, qword ptr [rsp + 384]      # 8-byte Folded Reload
	jne	.LBB11_67
# %bb.68:
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	cmp	r14, qword ptr [rsp + 384]      # 8-byte Folded Reload
	mov	r11d, dword ptr [rsp + 28]      # 4-byte Reload
	mov	r13, qword ptr [rsp + 368]      # 8-byte Reload
	mov	rdi, qword ptr [rsp + 360]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 280]      # 8-byte Reload
	jne	.LBB11_69
	jmp	.LBB11_72
.Lfunc_end11:
	.size	comparison_greater_equal_scalar_arr_avx2, .Lfunc_end11-comparison_greater_equal_scalar_arr_avx2
                                        # -- End function
	.ident	"Ubuntu clang version 11.1.0-6"
	.section	".note.GNU-stack","",@progbits
	.addrsig
