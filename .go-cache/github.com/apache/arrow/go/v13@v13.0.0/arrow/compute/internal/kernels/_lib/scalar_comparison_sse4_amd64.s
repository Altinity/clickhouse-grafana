	.text
	.intel_syntax noprefix
	.file	"scalar_comparison.cc"
	.globl	comparison_equal_arr_arr_sse4   # -- Begin function comparison_equal_arr_arr_sse4
	.p2align	4, 0x90
	.type	comparison_equal_arr_arr_sse4,@function
comparison_equal_arr_arr_sse4:          # @comparison_equal_arr_arr_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -8
	sub	rsp, 72
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB0_29
# %bb.1:
	cmp	edi, 3
	jle	.LBB0_2
# %bb.15:
	cmp	edi, 4
	je	.LBB0_68
# %bb.16:
	cmp	edi, 5
	je	.LBB0_79
# %bb.17:
	cmp	edi, 6
	jne	.LBB0_123
# %bb.18:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_22
# %bb.19:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_20:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_20
# %bb.21:
	add	r14, 1
.LBB0_22:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_26
# %bb.23:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_24:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	sete	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	sete	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	sete	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	sete	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	sete	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	sete	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	sete	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	sete	r12b
	cmp	eax, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	sete	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_24
# %bb.25:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_26:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.27:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_28:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_28
	jmp	.LBB0_123
.LBB0_29:
	cmp	edi, 8
	jle	.LBB0_30
# %bb.43:
	cmp	edi, 9
	je	.LBB0_101
# %bb.44:
	cmp	edi, 11
	je	.LBB0_112
# %bb.45:
	cmp	edi, 12
	jne	.LBB0_123
# %bb.46:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_50
# %bb.47:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_48:                               # =>This Inner Loop Header: Depth=1
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	add	rsi, 8
	ucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_48
# %bb.49:
	add	r14, 1
.LBB0_50:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_54
# %bb.51:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_52:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [rsi + 8]       # xmm1 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	ucomisd	xmm1, qword ptr [rdx + 8]
	sete	al
	movsd	xmm0, qword ptr [rsi + 16]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 16]
	movsd	xmm0, qword ptr [rsi + 24]      # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 32]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 32]
	movsd	xmm0, qword ptr [rsi + 40]      # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 48]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 48]
	movsd	xmm0, qword ptr [rsi + 56]      # xmm0 = mem[0],zero
	sete	r13b
	ucomisd	xmm0, qword ptr [rdx + 56]
	sete	r15b
	movsd	xmm0, qword ptr [rsi + 64]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 64]
	movsd	xmm0, qword ptr [rsi + 72]      # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 72]
	sete	cl
	movsd	xmm0, qword ptr [rsi + 80]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 80]
	movsd	xmm0, qword ptr [rsi + 88]      # xmm0 = mem[0],zero
	sete	r9b
	ucomisd	xmm0, qword ptr [rdx + 88]
	sete	r11b
	movsd	xmm0, qword ptr [rsi + 96]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 96]
	movsd	xmm0, qword ptr [rsi + 104]     # xmm0 = mem[0],zero
	sete	r10b
	ucomisd	xmm0, qword ptr [rdx + 104]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 112]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 112]
	movsd	xmm0, qword ptr [rsi + 120]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 120]
	sete	bl
	movsd	xmm0, qword ptr [rsi + 128]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 128]
	movsd	xmm0, qword ptr [rsi + 136]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 136]
	movsd	xmm0, qword ptr [rsi + 144]     # xmm0 = mem[0],zero
	sete	r14b
	ucomisd	xmm0, qword ptr [rdx + 144]
	movsd	xmm0, qword ptr [rsi + 152]     # xmm0 = mem[0],zero
	sete	r12b
	ucomisd	xmm0, qword ptr [rdx + 152]
	movsd	xmm0, qword ptr [rsi + 160]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 160]
	movsd	xmm0, qword ptr [rsi + 168]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 168]
	movsd	xmm0, qword ptr [rsi + 176]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 176]
	movsd	xmm0, qword ptr [rsi + 184]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 184]
	movsd	xmm0, qword ptr [rsi + 192]     # xmm0 = mem[0],zero
	sete	r8b
	ucomisd	xmm0, qword ptr [rdx + 192]
	movsd	xmm0, qword ptr [rsi + 200]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 200]
	movsd	xmm0, qword ptr [rsi + 208]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 208]
	movsd	xmm0, qword ptr [rsi + 216]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 216]
	movsd	xmm0, qword ptr [rsi + 224]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 224]
	movsd	xmm0, qword ptr [rsi + 232]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 232]
	movsd	xmm0, qword ptr [rsi + 240]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 240]
	movsd	xmm0, qword ptr [rsi + 248]     # xmm0 = mem[0],zero
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	add	rsi, 256
	ucomisd	xmm0, qword ptr [rdx + 248]
	sete	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB0_52
# %bb.53:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB0_54:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.55:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_56:                               # =>This Inner Loop Header: Depth=1
	movsd	xmm0, qword ptr [rsi + 8*rcx]   # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_56
	jmp	.LBB0_123
.LBB0_2:
	cmp	edi, 2
	je	.LBB0_57
# %bb.3:
	cmp	edi, 3
	jne	.LBB0_123
# %bb.4:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_6
# %bb.7:
	add	r14, 1
.LBB0_8:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_12
# %bb.9:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_10:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	sete	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	sete	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	sete	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	sete	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	sete	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	sete	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	sete	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	sete	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	sete	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	sete	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	sete	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB0_10
# %bb.11:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB0_12:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.13:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_14:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_14
	jmp	.LBB0_123
.LBB0_30:
	cmp	edi, 7
	je	.LBB0_90
# %bb.31:
	cmp	edi, 8
	jne	.LBB0_123
# %bb.32:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_36
# %bb.33:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_34:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_34
# %bb.35:
	add	r14, 1
.LBB0_36:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_40
# %bb.37:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_38:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	sete	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	sete	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	sete	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	sete	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	sete	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	sete	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	sete	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	sete	r12b
	cmp	rax, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	sete	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_38
# %bb.39:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_40:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.41:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_42:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_42
	jmp	.LBB0_123
.LBB0_68:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_72
# %bb.69:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_70:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_70
# %bb.71:
	add	r14, 1
.LBB0_72:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_76
# %bb.73:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_74:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	sete	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	sete	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	sete	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	sete	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	sete	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	sete	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	sete	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	sete	r12b
	cmp	ax, word ptr [rdx + 40]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	sete	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_74
# %bb.75:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_76:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.77:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_78:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_78
	jmp	.LBB0_123
.LBB0_79:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_81:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_81
# %bb.82:
	add	r14, 1
.LBB0_83:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_87
# %bb.84:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_85:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	sete	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	sete	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	sete	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	sete	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	sete	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	sete	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	sete	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	sete	r12b
	cmp	ax, word ptr [rdx + 40]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	sete	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_85
# %bb.86:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_87:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.88:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_89:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_89
	jmp	.LBB0_123
.LBB0_101:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_105
# %bb.102:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_103:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_103
# %bb.104:
	add	r14, 1
.LBB0_105:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_109
# %bb.106:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_107:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	sete	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	sete	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	sete	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	sete	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	sete	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	sete	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	sete	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	sete	r12b
	cmp	rax, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	sete	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_107
# %bb.108:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_109:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.110:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_111:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_111
	jmp	.LBB0_123
.LBB0_112:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_116
# %bb.113:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_114:                              # =>This Inner Loop Header: Depth=1
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	add	rsi, 4
	ucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_114
# %bb.115:
	add	r14, 1
.LBB0_116:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_120
# %bb.117:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_118:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	movss	xmm1, dword ptr [rsi + 4]       # xmm1 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	ucomiss	xmm1, dword ptr [rdx + 4]
	sete	al
	movss	xmm0, dword ptr [rsi + 8]       # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 8]
	movss	xmm0, dword ptr [rsi + 12]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 16]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 16]
	movss	xmm0, dword ptr [rsi + 20]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 24]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 24]
	movss	xmm0, dword ptr [rsi + 28]      # xmm0 = mem[0],zero,zero,zero
	sete	r13b
	ucomiss	xmm0, dword ptr [rdx + 28]
	sete	r15b
	movss	xmm0, dword ptr [rsi + 32]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 32]
	movss	xmm0, dword ptr [rsi + 36]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 36]
	sete	cl
	movss	xmm0, dword ptr [rsi + 40]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 40]
	movss	xmm0, dword ptr [rsi + 44]      # xmm0 = mem[0],zero,zero,zero
	sete	r9b
	ucomiss	xmm0, dword ptr [rdx + 44]
	sete	r11b
	movss	xmm0, dword ptr [rsi + 48]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 48]
	movss	xmm0, dword ptr [rsi + 52]      # xmm0 = mem[0],zero,zero,zero
	sete	r10b
	ucomiss	xmm0, dword ptr [rdx + 52]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 56]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 56]
	movss	xmm0, dword ptr [rsi + 60]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 60]
	sete	bl
	movss	xmm0, dword ptr [rsi + 64]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 64]
	movss	xmm0, dword ptr [rsi + 68]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 68]
	movss	xmm0, dword ptr [rsi + 72]      # xmm0 = mem[0],zero,zero,zero
	sete	r14b
	ucomiss	xmm0, dword ptr [rdx + 72]
	movss	xmm0, dword ptr [rsi + 76]      # xmm0 = mem[0],zero,zero,zero
	sete	r12b
	ucomiss	xmm0, dword ptr [rdx + 76]
	movss	xmm0, dword ptr [rsi + 80]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 80]
	movss	xmm0, dword ptr [rsi + 84]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 84]
	movss	xmm0, dword ptr [rsi + 88]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 88]
	movss	xmm0, dword ptr [rsi + 92]      # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 92]
	movss	xmm0, dword ptr [rsi + 96]      # xmm0 = mem[0],zero,zero,zero
	sete	r8b
	ucomiss	xmm0, dword ptr [rdx + 96]
	movss	xmm0, dword ptr [rsi + 100]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 100]
	movss	xmm0, dword ptr [rsi + 104]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 104]
	movss	xmm0, dword ptr [rsi + 108]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 108]
	movss	xmm0, dword ptr [rsi + 112]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 112]
	movss	xmm0, dword ptr [rsi + 116]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 116]
	movss	xmm0, dword ptr [rsi + 120]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 120]
	movss	xmm0, dword ptr [rsi + 124]     # xmm0 = mem[0],zero,zero,zero
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	sub	rsi, -128
	ucomiss	xmm0, dword ptr [rdx + 124]
	sete	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB0_118
# %bb.119:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB0_120:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.121:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_122:                              # =>This Inner Loop Header: Depth=1
	movss	xmm0, dword ptr [rsi + 4*rcx]   # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_122
	jmp	.LBB0_123
.LBB0_57:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_59:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_59
# %bb.60:
	add	r14, 1
.LBB0_61:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_65
# %bb.62:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_63:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	sete	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	sete	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	sete	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	sete	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	sete	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	sete	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	sete	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	sete	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	sete	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	sete	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	sete	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB0_63
# %bb.64:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB0_65:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.66:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_67:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_67
	jmp	.LBB0_123
.LBB0_90:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB0_94
# %bb.91:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB0_92:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB0_92
# %bb.93:
	add	r14, 1
.LBB0_94:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB0_98
# %bb.95:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB0_96:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	sete	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	sete	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	sete	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	sete	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	sete	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	sete	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	sete	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	sete	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	sete	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	sete	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	sete	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	sete	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	sete	r12b
	cmp	eax, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	sete	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	sete	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	sete	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	sete	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	sete	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	sete	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	sete	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	sete	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	sete	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	sete	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB0_96
# %bb.97:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB0_98:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB0_123
# %bb.99:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB0_100:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	sete	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB0_100
.LBB0_123:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.Lfunc_end0:
	.size	comparison_equal_arr_arr_sse4, .Lfunc_end0-comparison_equal_arr_arr_sse4
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function comparison_equal_arr_scalar_sse4
.LCPI1_0:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI1_1:
	.zero	16,252
.LCPI1_2:
	.zero	16,248
.LCPI1_3:
	.zero	16,240
.LCPI1_4:
	.zero	16,224
.LCPI1_5:
	.zero	16,192
.LCPI1_6:
	.zero	16,128
.LCPI1_7:
	.byte	0                               # 0x0
	.byte	8                               # 0x8
	.byte	1                               # 0x1
	.byte	9                               # 0x9
	.byte	2                               # 0x2
	.byte	10                              # 0xa
	.byte	3                               # 0x3
	.byte	11                              # 0xb
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
.LCPI1_8:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI1_9:
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI1_10:
	.zero	16,1
.LCPI1_11:
	.zero	16,4
.LCPI1_12:
	.zero	16,8
.LCPI1_13:
	.zero	16,16
.LCPI1_14:
	.zero	16,32
.LCPI1_15:
	.zero	16,64
	.text
	.globl	comparison_equal_arr_scalar_sse4
	.p2align	4, 0x90
	.type	comparison_equal_arr_scalar_sse4,@function
comparison_equal_arr_scalar_sse4:       # @comparison_equal_arr_scalar_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -16
	sub	rsp, 320
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB1_26
# %bb.1:
	cmp	edi, 3
	jle	.LBB1_2
# %bb.10:
	cmp	edi, 4
	je	.LBB1_100
# %bb.11:
	cmp	edi, 5
	je	.LBB1_123
# %bb.12:
	cmp	edi, 6
	jne	.LBB1_202
# %bb.13:
	mov	r13d, dword ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_17
# %bb.14:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_15:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_15
# %bb.16:
	add	r14, 1
.LBB1_17:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB1_21
# %bb.18:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_19:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	sete	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	sete	dil
	cmp	dword ptr [rsi + 8], r13d
	sete	r14b
	cmp	dword ptr [rsi + 12], r13d
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	sete	al
	cmp	dword ptr [rsi + 28], r13d
	sete	bl
	cmp	dword ptr [rsi + 32], r13d
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	sete	dl
	cmp	dword ptr [rsi + 40], r13d
	sete	r9b
	cmp	dword ptr [rsi + 44], r13d
	sete	r10b
	cmp	dword ptr [rsi + 48], r13d
	sete	r11b
	cmp	dword ptr [rsi + 52], r13d
	sete	r12b
	cmp	dword ptr [rsi + 56], r13d
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	sete	cl
	cmp	dword ptr [rsi + 64], r13d
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	sete	r15b
	cmp	dword ptr [rsi + 96], r13d
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 128
	add	r14, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB1_19
# %bb.20:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB1_21:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB1_202
# %bb.22:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	je	.LBB1_23
# %bb.146:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB1_147:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_147
	jmp	.LBB1_24
.LBB1_26:
	cmp	edi, 8
	jle	.LBB1_27
# %bb.42:
	cmp	edi, 9
	je	.LBB1_162
# %bb.43:
	cmp	edi, 11
	je	.LBB1_174
# %bb.44:
	cmp	edi, 12
	jne	.LBB1_202
# %bb.45:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB1_49
# %bb.46:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_47:                               # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_47
# %bb.48:
	add	r14, 1
.LBB1_49:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB1_53
# %bb.50:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	mov	qword ptr [rsp + 224], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_51:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	ucomisd	xmm0, qword ptr [rsi]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 8]
	sete	r9b
	ucomisd	xmm0, qword ptr [rsi + 16]
	sete	r14b
	ucomisd	xmm0, qword ptr [rsi + 24]
	sete	r13b
	ucomisd	xmm0, qword ptr [rsi + 32]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 40]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 48]
	sete	al
	ucomisd	xmm0, qword ptr [rsi + 56]
	sete	bl
	ucomisd	xmm0, qword ptr [rsi + 64]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 72]
	sete	dl
	ucomisd	xmm0, qword ptr [rsi + 80]
	sete	dil
	ucomisd	xmm0, qword ptr [rsi + 88]
	sete	r10b
	ucomisd	xmm0, qword ptr [rsi + 96]
	sete	r11b
	ucomisd	xmm0, qword ptr [rsi + 104]
	sete	r12b
	ucomisd	xmm0, qword ptr [rsi + 112]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 120]
	sete	cl
	ucomisd	xmm0, qword ptr [rsi + 128]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 136]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 144]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 152]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 160]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 168]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 176]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 184]
	sete	r15b
	ucomisd	xmm0, qword ptr [rsi + 192]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 200]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 208]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 216]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 224]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 232]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 240]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 248]
	sete	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB1_51
# %bb.52:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
.LBB1_53:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB1_202
# %bb.54:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB1_197
# %bb.55:
	xor	r11d, r11d
	jmp	.LBB1_199
.LBB1_2:
	cmp	edi, 2
	je	.LBB1_56
# %bb.3:
	cmp	edi, 3
	jne	.LBB1_202
# %bb.4:
	mov	r11b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_6:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r11b
	lea	rsi, [rsi + 1]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_6
# %bb.7:
	add	r14, 1
.LBB1_8:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_9
# %bb.82:
	cmp	r15, 16
	mov	byte ptr [rsp + 8], r11b        # 1-byte Spill
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 256], r15      # 8-byte Spill
	jb	.LBB1_83
# %bb.84:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB1_86
# %bb.85:
	lea	rax, [r14 + 4*r15]
	cmp	rsi, rax
	jae	.LBB1_86
.LBB1_83:
	xor	eax, eax
	mov	qword ptr [rsp + 248], rax      # 8-byte Spill
	mov	qword ptr [rsp + 120], r14      # 8-byte Spill
.LBB1_89:
	mov	r14, r15
	sub	r14, qword ptr [rsp + 248]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_90:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	byte ptr [rsi], r11b
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	byte ptr [rsi + 1], r11b
	sete	sil
	cmp	byte ptr [rcx + 2], r11b
	sete	r15b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 3], al
	sete	r12b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 4], al
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 5], al
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 6], al
	sete	byte ptr [rsp + 224]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 7], al
	sete	r9b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 8], al
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 9], al
	sete	dl
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 10], al
	sete	dil
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 11], al
	sete	r10b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 12], al
	sete	r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 13], al
	sete	r13b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 14], al
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 15], al
	sete	r8b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 16], bl
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 17], bl
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 18], bl
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 19], bl
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 20], bl
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 21], bl
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 22], bl
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 23], bl
	sete	r11b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 24], bl
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 25], bl
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 26], bl
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 27], bl
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 28], bl
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 29], bl
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 30], bl
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 31], bl
	sete	bl
	add	sil, sil
	add	sil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	al, 6
	shl	r9b, 7
	or	r9b, al
	shl	r15b, 2
	or	r15b, sil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	movzx	r15d, byte ptr [rsp + 8]        # 1-byte Folded Reload
	shl	dil, 2
	or	dil, dl
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, al
	shl	r14b, 4
	or	r14b, r10b
	shl	r13b, 5
	or	r13b, r14b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r9b, dl
	or	r8b, r13b
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	esi, edx
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	mov	byte ptr [rdx], r9b
	movzx	edi, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r11b, 7
	or	r11b, dil
	mov	byte ptr [rdx + 1], r8b
	or	r11b, sil
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 56]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	movzx	esi, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	sil, 6
	shl	bl, 7
	or	bl, sil
	or	bl, al
	mov	byte ptr [rdx + 2], r11b
	mov	r11d, r15d
	mov	byte ptr [rdx + 3], bl
	lea	rsi, [rcx + 32]
	add	rdx, 4
	mov	qword ptr [rsp + 120], rdx      # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB1_90
# %bb.91:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	jmp	.LBB1_92
.LBB1_27:
	cmp	edi, 7
	je	.LBB1_148
# %bb.28:
	cmp	edi, 8
	jne	.LBB1_202
# %bb.29:
	mov	r13, qword ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_33
# %bb.30:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_31:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_31
# %bb.32:
	add	r14, 1
.LBB1_33:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB1_37
# %bb.34:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_35:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	sete	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	sete	dil
	cmp	qword ptr [rsi + 16], r13
	sete	r14b
	cmp	qword ptr [rsi + 24], r13
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	sete	al
	cmp	qword ptr [rsi + 56], r13
	sete	bl
	cmp	qword ptr [rsi + 64], r13
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	sete	dl
	cmp	qword ptr [rsi + 80], r13
	sete	r9b
	cmp	qword ptr [rsi + 88], r13
	sete	r10b
	cmp	qword ptr [rsi + 96], r13
	sete	r11b
	cmp	qword ptr [rsi + 104], r13
	sete	r12b
	cmp	qword ptr [rsi + 112], r13
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	sete	cl
	cmp	qword ptr [rsi + 128], r13
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	sete	r15b
	cmp	qword ptr [rsi + 192], r13
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB1_35
# %bb.36:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB1_37:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB1_202
# %bb.38:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	je	.LBB1_39
# %bb.160:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB1_161:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_161
	jmp	.LBB1_40
.LBB1_56:
	mov	r11b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_60
# %bb.57:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_58:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r11b
	lea	rsi, [rsi + 1]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_58
# %bb.59:
	add	r14, 1
.LBB1_60:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_61
# %bb.62:
	cmp	r15, 16
	mov	byte ptr [rsp + 8], r11b        # 1-byte Spill
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 256], r15      # 8-byte Spill
	jb	.LBB1_63
# %bb.64:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB1_66
# %bb.65:
	lea	rax, [r14 + 4*r15]
	cmp	rsi, rax
	jae	.LBB1_66
.LBB1_63:
	xor	eax, eax
	mov	qword ptr [rsp + 248], rax      # 8-byte Spill
	mov	qword ptr [rsp + 80], r14       # 8-byte Spill
.LBB1_69:
	mov	r14, r15
	sub	r14, qword ptr [rsp + 248]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 152], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_70:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	byte ptr [rsi], r11b
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	byte ptr [rsi + 1], r11b
	sete	sil
	cmp	byte ptr [rcx + 2], r11b
	sete	r15b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 3], al
	sete	r12b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 4], al
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 5], al
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 6], al
	sete	byte ptr [rsp + 224]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 7], al
	sete	r9b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 8], al
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 9], al
	sete	dl
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 10], al
	sete	dil
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 11], al
	sete	r10b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 12], al
	sete	r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 13], al
	sete	r13b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 14], al
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 15], al
	sete	r8b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 16], bl
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 17], bl
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 18], bl
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 19], bl
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 20], bl
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 21], bl
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 22], bl
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 23], bl
	sete	r11b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 24], bl
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 25], bl
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 26], bl
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 27], bl
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 28], bl
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 29], bl
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 30], bl
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 31], bl
	sete	bl
	add	sil, sil
	add	sil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	al, 6
	shl	r9b, 7
	or	r9b, al
	shl	r15b, 2
	or	r15b, sil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	movzx	r15d, byte ptr [rsp + 8]        # 1-byte Folded Reload
	shl	dil, 2
	or	dil, dl
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, al
	shl	r14b, 4
	or	r14b, r10b
	shl	r13b, 5
	or	r13b, r14b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r9b, dl
	or	r8b, r13b
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	esi, edx
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	mov	byte ptr [rdx], r9b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	r11b, 7
	or	r11b, dil
	mov	byte ptr [rdx + 1], r8b
	or	r11b, sil
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 56]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	movzx	esi, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	sil, 6
	shl	bl, 7
	or	bl, sil
	or	bl, al
	mov	byte ptr [rdx + 2], r11b
	mov	r11d, r15d
	mov	byte ptr [rdx + 3], bl
	lea	rsi, [rcx + 32]
	add	rdx, 4
	mov	qword ptr [rsp + 80], rdx       # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB1_70
# %bb.71:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	jmp	.LBB1_72
.LBB1_148:
	mov	r13d, dword ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_152
# %bb.149:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_150:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_150
# %bb.151:
	add	r14, 1
.LBB1_152:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB1_156
# %bb.153:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_154:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	sete	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	sete	dil
	cmp	dword ptr [rsi + 8], r13d
	sete	r14b
	cmp	dword ptr [rsi + 12], r13d
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	sete	al
	cmp	dword ptr [rsi + 28], r13d
	sete	bl
	cmp	dword ptr [rsi + 32], r13d
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	sete	dl
	cmp	dword ptr [rsi + 40], r13d
	sete	r9b
	cmp	dword ptr [rsi + 44], r13d
	sete	r10b
	cmp	dword ptr [rsi + 48], r13d
	sete	r11b
	cmp	dword ptr [rsi + 52], r13d
	sete	r12b
	cmp	dword ptr [rsi + 56], r13d
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	sete	cl
	cmp	dword ptr [rsi + 64], r13d
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	sete	r15b
	cmp	dword ptr [rsi + 96], r13d
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 128
	add	r14, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB1_154
# %bb.155:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB1_156:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB1_202
# %bb.157:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB1_158
.LBB1_23:
	xor	r11d, r11d
	jmp	.LBB1_24
.LBB1_100:
	movzx	r13d, word ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_104
# %bb.101:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_102:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_102
# %bb.103:
	add	r14, 1
.LBB1_104:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB1_105
# %bb.106:
	cmp	r11, 8
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	jb	.LBB1_107
# %bb.108:
	mov	rax, r11
	shl	rax, 6
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB1_110
# %bb.109:
	lea	rax, [r14 + 4*r11]
	cmp	rax, rsi
	jbe	.LBB1_110
.LBB1_107:
	xor	eax, eax
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	qword ptr [rsp + 8], r14        # 8-byte Spill
.LBB1_113:
	sub	r11, qword ptr [rsp + 16]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_114:                              # =>This Inner Loop Header: Depth=1
	mov	r11, rsi
	cmp	word ptr [rsi], r13w
	sete	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	sete	r8b
	cmp	word ptr [rsi + 4], r13w
	sete	r14b
	cmp	word ptr [rsi + 6], r13w
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	sete	al
	cmp	word ptr [rsi + 14], r13w
	sete	bl
	cmp	word ptr [rsi + 16], r13w
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	sete	cl
	cmp	word ptr [rsi + 20], r13w
	sete	sil
	cmp	word ptr [r11 + 22], r13w
	sete	r9b
	cmp	word ptr [r11 + 24], r13w
	sete	r10b
	cmp	word ptr [r11 + 26], r13w
	sete	r12b
	cmp	word ptr [r11 + 28], r13w
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 30], r13w
	sete	dil
	cmp	word ptr [r11 + 32], r13w
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 34], r13w
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 36], r13w
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 38], r13w
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 40], r13w
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 42], r13w
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 44], r13w
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 46], r13w
	sete	r15b
	cmp	word ptr [r11 + 48], r13w
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 50], r13w
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 52], r13w
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 54], r13w
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 56], r13w
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 58], r13w
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 60], r13w
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 62], r13w
	sete	dl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	sil, 2
	or	sil, cl
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, sil
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	dil, 7
	or	dil, sil
	or	bl, cl
	or	dil, r12b
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, sil
	mov	esi, ecx
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rcx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rcx + 1], dil
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rcx + 2], r15b
	mov	byte ptr [rcx + 3], dl
	lea	rsi, [r11 + 64]
	add	rcx, 4
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB1_114
# %bb.115:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	jmp	.LBB1_116
.LBB1_123:
	movzx	r13d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_127
# %bb.124:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_125:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_125
# %bb.126:
	add	r14, 1
.LBB1_127:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB1_128
# %bb.129:
	cmp	r15, 8
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	jb	.LBB1_130
# %bb.131:
	mov	rax, r15
	shl	rax, 6
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB1_133
# %bb.132:
	lea	rax, [r14 + 4*r15]
	cmp	rax, rsi
	jbe	.LBB1_133
.LBB1_130:
	xor	eax, eax
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	r12, r14
.LBB1_136:
	mov	qword ptr [rsp + 8], r12        # 8-byte Spill
	mov	r14, r15
	sub	r14, qword ptr [rsp + 16]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 192], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_137:                              # =>This Inner Loop Header: Depth=1
	mov	r11, rsi
	cmp	word ptr [rsi], r13w
	sete	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	sete	r8b
	cmp	word ptr [rsi + 4], r13w
	sete	r14b
	cmp	word ptr [rsi + 6], r13w
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	sete	al
	cmp	word ptr [rsi + 14], r13w
	sete	bl
	cmp	word ptr [rsi + 16], r13w
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	sete	cl
	cmp	word ptr [rsi + 20], r13w
	sete	sil
	cmp	word ptr [r11 + 22], r13w
	sete	r9b
	cmp	word ptr [r11 + 24], r13w
	sete	r10b
	cmp	word ptr [r11 + 26], r13w
	sete	r12b
	cmp	word ptr [r11 + 28], r13w
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 30], r13w
	sete	dil
	cmp	word ptr [r11 + 32], r13w
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 34], r13w
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 36], r13w
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 38], r13w
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 40], r13w
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 42], r13w
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 44], r13w
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 46], r13w
	sete	r15b
	cmp	word ptr [r11 + 48], r13w
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 50], r13w
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 52], r13w
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 54], r13w
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 56], r13w
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 58], r13w
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 60], r13w
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 62], r13w
	sete	dl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	sil, 2
	or	sil, cl
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, sil
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	dil, 7
	or	dil, sil
	or	bl, cl
	or	dil, r12b
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, sil
	mov	esi, ecx
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rcx], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rcx + 1], dil
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rcx + 2], r15b
	mov	byte ptr [rcx + 3], dl
	lea	rsi, [r11 + 64]
	add	rcx, 4
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB1_137
# %bb.138:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	jmp	.LBB1_139
.LBB1_162:
	mov	r13, qword ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB1_166
# %bb.163:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_164:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	sete	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_164
# %bb.165:
	add	r14, 1
.LBB1_166:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB1_170
# %bb.167:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_168:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	sete	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	sete	dil
	cmp	qword ptr [rsi + 16], r13
	sete	r14b
	cmp	qword ptr [rsi + 24], r13
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	sete	al
	cmp	qword ptr [rsi + 56], r13
	sete	bl
	cmp	qword ptr [rsi + 64], r13
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	sete	dl
	cmp	qword ptr [rsi + 80], r13
	sete	r9b
	cmp	qword ptr [rsi + 88], r13
	sete	r10b
	cmp	qword ptr [rsi + 96], r13
	sete	r11b
	cmp	qword ptr [rsi + 104], r13
	sete	r12b
	cmp	qword ptr [rsi + 112], r13
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	sete	cl
	cmp	qword ptr [rsi + 128], r13
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	sete	r15b
	cmp	qword ptr [rsi + 192], r13
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	sete	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB1_168
# %bb.169:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB1_170:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB1_202
# %bb.171:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB1_172
.LBB1_39:
	xor	r11d, r11d
	jmp	.LBB1_40
.LBB1_174:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movss	xmm0, dword ptr [rdx]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB1_178
# %bb.175:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB1_176:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB1_176
# %bb.177:
	add	r14, 1
.LBB1_178:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB1_179
# %bb.180:
	cmp	r11, 4
	jb	.LBB1_181
# %bb.182:
	mov	rax, r11
	shl	rax, 7
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB1_184
# %bb.183:
	lea	rax, [r14 + 4*r11]
	cmp	rax, rsi
	jbe	.LBB1_184
.LBB1_181:
	xor	r8d, r8d
	mov	rbx, rsi
	mov	r15, r14
.LBB1_187:
	mov	qword ptr [rsp + 8], r15        # 8-byte Spill
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	sub	r11, r8
	mov	qword ptr [rsp + 224], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_188:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 4]
	sete	r8b
	ucomiss	xmm0, dword ptr [rbx + 8]
	sete	r14b
	ucomiss	xmm0, dword ptr [rbx + 12]
	sete	r13b
	ucomiss	xmm0, dword ptr [rbx + 16]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 20]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 24]
	sete	al
	ucomiss	xmm0, dword ptr [rbx + 28]
	sete	r11b
	ucomiss	xmm0, dword ptr [rbx + 32]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 36]
	sete	dl
	ucomiss	xmm0, dword ptr [rbx + 40]
	sete	sil
	ucomiss	xmm0, dword ptr [rbx + 44]
	sete	dil
	ucomiss	xmm0, dword ptr [rbx + 48]
	sete	r10b
	ucomiss	xmm0, dword ptr [rbx + 52]
	sete	r12b
	ucomiss	xmm0, dword ptr [rbx + 56]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 60]
	sete	r9b
	ucomiss	xmm0, dword ptr [rbx + 64]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 68]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 72]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 76]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 80]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 84]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 88]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 92]
	sete	r15b
	ucomiss	xmm0, dword ptr [rbx + 96]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 100]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 104]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 108]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 112]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 116]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 120]
	sete	byte ptr [rsp + 136]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 124]
	sete	cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 104]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r15b, dl
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dl, 6
	shl	cl, 7
	or	cl, dl
	or	cl, al
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], cl
	add	rbx, 128
	add	rsi, 4
	mov	qword ptr [rsp + 8], rsi        # 8-byte Spill
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB1_188
# %bb.189:
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	jmp	.LBB1_190
.LBB1_9:
	mov	qword ptr [rsp + 120], r14      # 8-byte Spill
.LBB1_92:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_202
# %bb.93:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_95
# %bb.94:
	xor	r9d, r9d
	jmp	.LBB1_98
.LBB1_61:
	mov	qword ptr [rsp + 80], r14       # 8-byte Spill
.LBB1_72:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_202
# %bb.73:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_75
# %bb.74:
	xor	r9d, r9d
	jmp	.LBB1_78
.LBB1_105:
	mov	qword ptr [rsp + 8], r14        # 8-byte Spill
.LBB1_116:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB1_202
# %bb.117:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB1_121
# %bb.118:
	xor	r14d, r14d
	jmp	.LBB1_119
.LBB1_128:
	mov	r12, r14
.LBB1_139:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB1_202
# %bb.140:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB1_144
# %bb.141:
	xor	r14d, r14d
	jmp	.LBB1_142
.LBB1_179:
	mov	r15, r14
	mov	rbx, rsi
.LBB1_190:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB1_202
# %bb.191:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB1_195
# %bb.192:
	xor	esi, esi
	jmp	.LBB1_193
.LBB1_158:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB1_159:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_159
.LBB1_24:
	test	r8b, 1
	je	.LBB1_202
# %bb.25:
	cmp	dword ptr [rsi], r13d
	jmp	.LBB1_201
.LBB1_95:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	.p2align	4, 0x90
.LBB1_96:                               # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	byte ptr [rsi + r9], r11b
	sete	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r14 + rdi], dl
	cmp	byte ptr [rsi + rax + 1], r11b
	lea	r9, [rax + 2]
	sete	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r14 + rdi], al
	cmp	r10, r9
	jne	.LBB1_96
# %bb.97:
	add	rsi, r9
.LBB1_98:
	test	r8b, 1
	je	.LBB1_202
# %bb.99:
	cmp	byte ptr [rsi], r11b
	sete	al
	neg	al
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	jmp	.LBB1_80
.LBB1_75:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	.p2align	4, 0x90
.LBB1_76:                               # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	byte ptr [rsi + r9], r11b
	sete	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r14 + rdi], dl
	cmp	byte ptr [rsi + rax + 1], r11b
	lea	r9, [rax + 2]
	sete	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r14 + rdi], al
	cmp	r10, r9
	jne	.LBB1_76
# %bb.77:
	add	rsi, r9
.LBB1_78:
	test	r8b, 1
	je	.LBB1_202
# %bb.79:
	cmp	byte ptr [rsi], r11b
	sete	al
	neg	al
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
.LBB1_80:
	mov	dil, byte ptr [r8 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	jmp	.LBB1_81
.LBB1_197:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB1_198:                              # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rsi]
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	ucomisd	xmm0, qword ptr [rsi + 8]
	lea	rsi, [rsi + 16]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_198
.LBB1_199:
	test	r8b, 1
	je	.LBB1_202
# %bb.200:
	ucomisd	xmm0, qword ptr [rsi]
	jmp	.LBB1_201
.LBB1_172:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB1_173:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	sete	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	sete	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB1_173
.LBB1_40:
	test	r8b, 1
	je	.LBB1_202
# %bb.41:
	cmp	qword ptr [rsi], r13
.LBB1_201:
	sete	al
	neg	al
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
	jmp	.LBB1_202
.LBB1_121:
	mov	r9, r8
	and	r9, -2
	xor	r14d, r14d
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB1_122:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	cmp	word ptr [rsi], r13w
	sete	dl
	neg	dl
	mov	rdi, r14
	shr	rdi, 3
	movzx	r10d, byte ptr [r11 + rdi]
	mov	ecx, r14d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r11 + rdi], bl
	add	r14, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r11 + rdi], al
	cmp	r9, r14
	jne	.LBB1_122
.LBB1_119:
	test	r8b, 1
	je	.LBB1_202
# %bb.120:
	cmp	word ptr [rsi], r13w
	sete	al
	neg	al
	mov	rdx, r14
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r14b, 7
	mov	bl, 1
	mov	ecx, r14d
.LBB1_81:
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB1_202
.LBB1_144:
	mov	r9, r8
	and	r9, -2
	xor	r14d, r14d
	.p2align	4, 0x90
.LBB1_145:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	cmp	word ptr [rsi], r13w
	sete	dl
	neg	dl
	mov	rdi, r14
	shr	rdi, 3
	movzx	r10d, byte ptr [r12 + rdi]
	mov	ecx, r14d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r12 + rdi], bl
	add	r14, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r12 + rdi], al
	cmp	r9, r14
	jne	.LBB1_145
.LBB1_142:
	test	r8b, 1
	je	.LBB1_202
# %bb.143:
	cmp	word ptr [rsi], r13w
	sete	al
	neg	al
	mov	rdx, r14
	shr	rdx, 3
	mov	dil, byte ptr [r12 + rdx]
	and	r14b, 7
	mov	bl, 1
	mov	ecx, r14d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r12 + rdx], bl
	jmp	.LBB1_202
.LBB1_195:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, r15
	.p2align	4, 0x90
.LBB1_196:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	sete	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	xor	dl, r9b
	mov	ecx, esi
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, r9b
	mov	byte ptr [r11 + rdi], al
	add	rsi, 2
	ucomiss	xmm0, dword ptr [rbx + 4]
	lea	rbx, [rbx + 8]
	sete	r9b
	neg	r9b
	xor	r9b, al
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, r9b
	xor	dl, al
	mov	byte ptr [r11 + rdi], dl
	cmp	r10, rsi
	jne	.LBB1_196
.LBB1_193:
	test	r8b, 1
	je	.LBB1_202
# %bb.194:
	ucomiss	xmm0, dword ptr [rbx]
	sete	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r14, r15
	mov	dil, byte ptr [r15 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r15 + rdx], bl
.LBB1_202:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB1_86:
	and	r15, -16
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	qword ptr [rsp + 248], r15      # 8-byte Spill
	lea	rax, [r14 + 4*r15]
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	movzx	eax, r11b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 208], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_87:                               # =>This Inner Loop Header: Depth=1
	mov	rdi, rax
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	shl	rdi, 5
	mov	r11, rdi
	mov	r14, rdi
	mov	rbx, rdi
	mov	r15, rdi
	mov	r10, rdi
	mov	r8, rdi
	mov	r12, rdi
	mov	r9, rdi
	mov	rdx, rdi
	mov	qword ptr [rsp + 88], rdi       # 8-byte Spill
	mov	qword ptr [rsp + 56], rdi       # 8-byte Spill
	movzx	ecx, byte ptr [rsi + rdi]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [rsi + rdi + 1]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rsi + rdi + 2]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rsi + rdi + 3]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rsi + rdi + 4]
	movd	xmm1, ecx
	movzx	ecx, byte ptr [rsi + rdi + 5]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rsi + rdi + 6]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rsi + rdi + 7]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 224], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdi + 8]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 272], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdi + 9]
	movd	xmm10, ecx
	movzx	ecx, byte ptr [rsi + rdi + 10]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 192], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdi + 11]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rsi + rdi + 12]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [rsi + rdi + 13]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rsi + rdi + 14]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 288], xmm0   # 16-byte Spill
	mov	qword ptr [rsp + 32], rdi       # 8-byte Spill
	mov	r13, rdi
	or	r13, 32
	mov	qword ptr [rsp + 40], r13       # 8-byte Spill
	mov	rcx, rdi
	or	rcx, 64
	mov	qword ptr [rsp + 64], rcx       # 8-byte Spill
	or	r11, 96
	or	rbx, 128
	or	r14, 160
	or	r15, 192
	or	r10, 224
	or	r12, 256
	or	r9, 288
	mov	qword ptr [rsp + 128], r9       # 8-byte Spill
	or	rdx, 320
	mov	qword ptr [rsp + 48], rdx       # 8-byte Spill
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	or	rdx, 352
	mov	qword ptr [rsp + 88], rdx       # 8-byte Spill
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	or	r8, 384
	mov	rax, rdi
	or	rax, 416
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	mov	rax, rdi
	or	rax, 448
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
	mov	rax, rdi
	or	rax, 480
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r13], 1
	pinsrb	xmm15, byte ptr [rsi + rcx], 2
	mov	qword ptr [rsp + 104], r11      # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r11], 3
	mov	qword ptr [rsp + 80], rbx       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + rbx], 4
	mov	qword ptr [rsp + 96], r14       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r14], 5
	pinsrb	xmm15, byte ptr [rsi + r15], 6
	mov	rdi, r10
	pinsrb	xmm15, byte ptr [rsi + r10], 7
	pinsrb	xmm15, byte ptr [rsi + r12], 8
	pinsrb	xmm15, byte ptr [rsi + r9], 9
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r13], 10
	pinsrb	xmm15, byte ptr [rsi + rdx], 11
	pinsrb	xmm15, byte ptr [rsi + r8], 12
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r9], 13
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rcx], 14
	pinsrb	xmm15, byte ptr [rsi + rax], 15
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r10 + 1], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rcx + 1], 2
	pinsrb	xmm5, byte ptr [rsi + r11 + 1], 3
	pinsrb	xmm5, byte ptr [rsi + rbx + 1], 4
	pinsrb	xmm5, byte ptr [rsi + r14 + 1], 5
	pinsrb	xmm5, byte ptr [rsi + r15 + 1], 6
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	pinsrb	xmm5, byte ptr [rsi + rdi + 1], 7
	mov	r14, rdi
	mov	qword ptr [rsp + 160], rdi      # 8-byte Spill
	pinsrb	xmm5, byte ptr [rsi + r12 + 1], 8
	mov	rbx, r12
	mov	qword ptr [rsp + 72], r12       # 8-byte Spill
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rcx + 1], 9
	pinsrb	xmm5, byte ptr [rsi + r13 + 1], 10
	pinsrb	xmm5, byte ptr [rsi + rdx + 1], 11
	pinsrb	xmm5, byte ptr [rsi + r8 + 1], 12
	mov	r10, r8
	mov	qword ptr [rsp + 56], r8        # 8-byte Spill
	pinsrb	xmm5, byte ptr [rsi + r9 + 1], 13
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r12 + 1], 14
	pinsrb	xmm5, byte ptr [rsi + rax + 1], 15
	movdqa	xmm9, xmmword ptr [rsp + 208]   # 16-byte Reload
	pcmpeqb	xmm5, xmm9
	movdqa	xmm7, xmm5
	movdqa	xmm4, xmmword ptr [rip + .LCPI1_10] # xmm4 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm7, xmm4
	psubb	xmm7, xmm5
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 15]
	movd	xmm14, edx
	pcmpeqb	xmm15, xmm9
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r8 + 2], 1
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r11 + 2], 2
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r13 + 2], 3
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 2], 4
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdi + 2], 5
	pinsrb	xmm6, byte ptr [rsi + r15 + 2], 6
	pinsrb	xmm6, byte ptr [rsi + r14 + 2], 7
	pinsrb	xmm6, byte ptr [rsi + rbx + 2], 8
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rbx + 2], 9
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r14 + 2], 10
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r15 + 2], 11
	pinsrb	xmm6, byte ptr [rsi + r10 + 2], 12
	mov	r10, r9
	pinsrb	xmm6, byte ptr [rsi + r9 + 2], 13
	pinsrb	xmm6, byte ptr [rsi + r12 + 2], 14
	mov	r9, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r9 + 2], 15
	pand	xmm15, xmm4
	pcmpeqb	xmm6, xmm9
	movdqa	xmm0, xmmword ptr [rip + .LCPI1_11] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm6, xmm0
	por	xmm6, xmm15
	movzx	edx, byte ptr [rsi + rax + 16]
	movd	xmm15, edx
	mov	rdx, r8
	pinsrb	xmm2, byte ptr [rsi + r8 + 3], 1
	mov	rax, r11
	pinsrb	xmm2, byte ptr [rsi + r11 + 3], 2
	pinsrb	xmm2, byte ptr [rsi + r13 + 3], 3
	pinsrb	xmm2, byte ptr [rsi + rcx + 3], 4
	mov	r11, rcx
	pinsrb	xmm2, byte ptr [rsi + rdi + 3], 5
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 3], 6
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdi + 3], 7
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r8 + 3], 8
	pinsrb	xmm2, byte ptr [rsi + rbx + 3], 9
	pinsrb	xmm2, byte ptr [rsi + r14 + 3], 10
	mov	r14, r15
	pinsrb	xmm2, byte ptr [rsi + r15 + 3], 11
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r15 + 3], 12
	pinsrb	xmm2, byte ptr [rsi + r10 + 3], 13
	pinsrb	xmm2, byte ptr [rsi + r12 + 3], 14
	pinsrb	xmm2, byte ptr [rsi + r9 + 3], 15
	pinsrb	xmm1, byte ptr [rsi + rdx + 4], 1
	pinsrb	xmm1, byte ptr [rsi + rax + 4], 2
	pinsrb	xmm1, byte ptr [rsi + r13 + 4], 3
	pinsrb	xmm1, byte ptr [rsi + r11 + 4], 4
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + r11 + 4], 5
	pinsrb	xmm1, byte ptr [rsi + rcx + 4], 6
	pinsrb	xmm1, byte ptr [rsi + rdi + 4], 7
	pinsrb	xmm1, byte ptr [rsi + r8 + 4], 8
	pinsrb	xmm1, byte ptr [rsi + rbx + 4], 9
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rcx + 4], 10
	pinsrb	xmm1, byte ptr [rsi + r14 + 4], 11
	pinsrb	xmm1, byte ptr [rsi + r15 + 4], 12
	pinsrb	xmm1, byte ptr [rsi + r10 + 4], 13
	mov	r15, r10
	pinsrb	xmm1, byte ptr [rsi + r12 + 4], 14
	mov	r10, r12
	pinsrb	xmm1, byte ptr [rsi + r9 + 4], 15
	por	xmm6, xmm7
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rdi + 17]
	movd	xmm0, edx
	pcmpeqb	xmm2, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI1_12] # xmm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm2, xmm5
	pcmpeqb	xmm1, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI1_13] # xmm5 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm1, xmm5
	por	xmm1, xmm2
	movzx	edx, byte ptr [rsi + rdi + 18]
	movd	xmm5, edx
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r9 + 5], 1
	pinsrb	xmm8, byte ptr [rsi + rax + 5], 2
	pinsrb	xmm8, byte ptr [rsi + r13 + 5], 3
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdx + 5], 4
	pinsrb	xmm8, byte ptr [rsi + r11 + 5], 5
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdi + 5], 6
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r8 + 5], 7
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdx + 5], 8
	pinsrb	xmm8, byte ptr [rsi + rbx + 5], 9
	pinsrb	xmm8, byte ptr [rsi + rcx + 5], 10
	pinsrb	xmm8, byte ptr [rsi + r14 + 5], 11
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rcx + 5], 12
	pinsrb	xmm8, byte ptr [rsi + r15 + 5], 13
	mov	r12, r15
	pinsrb	xmm8, byte ptr [rsi + r10 + 5], 14
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r10 + 5], 15
	pcmpeqb	xmm8, xmm9
	movdqa	xmm2, xmmword ptr [rip + .LCPI1_14] # xmm2 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm8, xmm2
	por	xmm8, xmm1
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 19]
	movd	xmm7, edx
	por	xmm8, xmm6
	movzx	edx, byte ptr [rsi + rcx + 20]
	movd	xmm6, edx
	pinsrb	xmm3, byte ptr [rsi + r9 + 6], 1
	pinsrb	xmm3, byte ptr [rsi + rax + 6], 2
	pinsrb	xmm3, byte ptr [rsi + r13 + 6], 3
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r11 + 6], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r15 + 6], 5
	mov	rcx, rdi
	pinsrb	xmm3, byte ptr [rsi + rdi + 6], 6
	mov	rdi, r8
	pinsrb	xmm3, byte ptr [rsi + r8 + 6], 7
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 6], 8
	pinsrb	xmm3, byte ptr [rsi + rbx + 6], 9
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r8 + 6], 10
	pinsrb	xmm3, byte ptr [rsi + r14 + 6], 11
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 6], 12
	pinsrb	xmm3, byte ptr [rsi + r12 + 6], 13
	mov	r13, r12
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 6], 14
	pinsrb	xmm3, byte ptr [rsi + r10 + 6], 15
	movdqa	xmm2, xmmword ptr [rsp + 224]   # 16-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r9 + 7], 1
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r12 + 7], 2
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdx + 7], 3
	pinsrb	xmm2, byte ptr [rsi + r11 + 7], 4
	pinsrb	xmm2, byte ptr [rsi + r15 + 7], 5
	pinsrb	xmm2, byte ptr [rsi + rcx + 7], 6
	pinsrb	xmm2, byte ptr [rsi + rdi + 7], 7
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r10 + 7], 8
	pinsrb	xmm2, byte ptr [rsi + rbx + 7], 9
	pinsrb	xmm2, byte ptr [rsi + r8 + 7], 10
	pinsrb	xmm2, byte ptr [rsi + r14 + 7], 11
	pinsrb	xmm2, byte ptr [rsi + rax + 7], 12
	pinsrb	xmm2, byte ptr [rsi + r13 + 7], 13
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdi + 7], 14
	mov	r9, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r9 + 7], 15
	pcmpeqb	xmm3, xmm9
	movdqa	xmm1, xmmword ptr [rip + .LCPI1_15] # xmm1 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm1
	pcmpeqb	xmm2, xmm9
	psllw	xmm2, 7
	movdqa	xmm1, xmmword ptr [rip + .LCPI1_6] # xmm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm2, xmm1
	por	xmm2, xmm3
	movdqa	xmm1, xmm2
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rbx + 21]
	movd	xmm2, edx
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r11 + 9], 1
	pinsrb	xmm10, byte ptr [rsi + r12 + 9], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax + 9], 3
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rcx + 9], 4
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r15 + 9], 5
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r12 + 9], 6
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax + 9], 7
	pinsrb	xmm10, byte ptr [rsi + r10 + 9], 8
	mov	r14, r10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax + 9], 9
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax + 9], 10
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdx + 9], 11
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdx + 9], 12
	mov	r10, r13
	pinsrb	xmm10, byte ptr [rsi + r13 + 9], 13
	pinsrb	xmm10, byte ptr [rsi + rdi + 9], 14
	pinsrb	xmm10, byte ptr [rsi + r9 + 9], 15
	por	xmm1, xmm8
	movdqa	xmmword ptr [rsp + 224], xmm1   # 16-byte Spill
	pcmpeqb	xmm10, xmm9
	movdqa	xmm1, xmm10
	movdqa	xmm8, xmm4
	pand	xmm1, xmm4
	psubb	xmm1, xmm10
	movzx	edx, byte ptr [rsi + rbx + 22]
	movd	xmm3, edx
	movdqa	xmm4, xmmword ptr [rsp + 272]   # 16-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r11 + 8], 1
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r13 + 8], 2
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r8 + 8], 3
	pinsrb	xmm4, byte ptr [rsi + rcx + 8], 4
	mov	r9, r15
	pinsrb	xmm4, byte ptr [rsi + r15 + 8], 5
	pinsrb	xmm4, byte ptr [rsi + r12 + 8], 6
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r15 + 8], 7
	pinsrb	xmm4, byte ptr [rsi + r14 + 8], 8
	mov	rbx, r14
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 8], 9
	pinsrb	xmm4, byte ptr [rsi + rax + 8], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 8], 11
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r14 + 8], 12
	pinsrb	xmm4, byte ptr [rsi + r10 + 8], 13
	pinsrb	xmm4, byte ptr [rsi + rdi + 8], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 8], 15
	pcmpeqb	xmm4, xmm9
	pand	xmm4, xmm8
	movdqa	xmm10, xmmword ptr [rsp + 192]  # 16-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r11 + 10], 1
	pinsrb	xmm10, byte ptr [rsi + r13 + 10], 2
	pinsrb	xmm10, byte ptr [rsi + r8 + 10], 3
	mov	r12, r8
	pinsrb	xmm10, byte ptr [rsi + rcx + 10], 4
	pinsrb	xmm10, byte ptr [rsi + r9 + 10], 5
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rcx + 10], 6
	mov	r8, r15
	pinsrb	xmm10, byte ptr [rsi + r15 + 10], 7
	pinsrb	xmm10, byte ptr [rsi + rbx + 10], 8
	pinsrb	xmm10, byte ptr [rsi + rdx + 10], 9
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdx + 10], 10
	mov	rbx, rdx
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r15 + 10], 11
	pinsrb	xmm10, byte ptr [rsi + r14 + 10], 12
	pinsrb	xmm10, byte ptr [rsi + r10 + 10], 13
	pinsrb	xmm10, byte ptr [rsi + rdi + 10], 14
	pinsrb	xmm10, byte ptr [rsi + rax + 10], 15
	pcmpeqb	xmm10, xmm9
	pand	xmm10, xmmword ptr [rip + .LCPI1_11]
	por	xmm10, xmm4
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 23]
	movd	xmm8, edx
	por	xmm10, xmm1
	movdqa	xmmword ptr [rsp + 192], xmm10  # 16-byte Spill
	movzx	edx, byte ptr [rsi + rax + 24]
	movd	xmm10, edx
	pinsrb	xmm11, byte ptr [rsi + r11 + 11], 1
	pinsrb	xmm11, byte ptr [rsi + r13 + 11], 2
	pinsrb	xmm11, byte ptr [rsi + r12 + 11], 3
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rax + 11], 4
	pinsrb	xmm11, byte ptr [rsi + r9 + 11], 5
	pinsrb	xmm11, byte ptr [rsi + rcx + 11], 6
	mov	rdi, r8
	pinsrb	xmm11, byte ptr [rsi + r8 + 11], 7
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r8 + 11], 8
	mov	r9, qword ptr [rsp + 128]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r9 + 11], 9
	pinsrb	xmm11, byte ptr [rsi + rbx + 11], 10
	mov	r14, r15
	pinsrb	xmm11, byte ptr [rsi + r15 + 11], 11
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r15 + 11], 12
	pinsrb	xmm11, byte ptr [rsi + r10 + 11], 13
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r12 + 11], 14
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 11], 15
	pinsrb	xmm13, byte ptr [rsi + r11 + 12], 1
	pinsrb	xmm13, byte ptr [rsi + r13 + 12], 2
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rbx + 12], 3
	pinsrb	xmm13, byte ptr [rsi + rax + 12], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rax + 12], 5
	pinsrb	xmm13, byte ptr [rsi + rcx + 12], 6
	pinsrb	xmm13, byte ptr [rsi + rdi + 12], 7
	pinsrb	xmm13, byte ptr [rsi + r8 + 12], 8
	pinsrb	xmm13, byte ptr [rsi + r9 + 12], 9
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rbx + 12], 10
	pinsrb	xmm13, byte ptr [rsi + r14 + 12], 11
	pinsrb	xmm13, byte ptr [rsi + r15 + 12], 12
	pinsrb	xmm13, byte ptr [rsi + r10 + 12], 13
	mov	r11, r10
	pinsrb	xmm13, byte ptr [rsi + r12 + 12], 14
	pinsrb	xmm13, byte ptr [rsi + rdx + 12], 15
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r10 + 13], 1
	pinsrb	xmm12, byte ptr [rsi + r13 + 13], 2
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r13 + 13], 3
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rbx + 13], 4
	pinsrb	xmm12, byte ptr [rsi + rax + 13], 5
	pinsrb	xmm12, byte ptr [rsi + rcx + 13], 6
	pinsrb	xmm12, byte ptr [rsi + rdi + 13], 7
	pinsrb	xmm12, byte ptr [rsi + r8 + 13], 8
	pinsrb	xmm12, byte ptr [rsi + r9 + 13], 9
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rbx + 13], 10
	pinsrb	xmm12, byte ptr [rsi + r14 + 13], 11
	pinsrb	xmm12, byte ptr [rsi + r15 + 13], 12
	pinsrb	xmm12, byte ptr [rsi + r11 + 13], 13
	pinsrb	xmm12, byte ptr [rsi + r12 + 13], 14
	pinsrb	xmm12, byte ptr [rsi + rdx + 13], 15
	pcmpeqb	xmm11, xmm9
	pand	xmm11, xmmword ptr [rip + .LCPI1_12]
	pcmpeqb	xmm13, xmm9
	pand	xmm13, xmmword ptr [rip + .LCPI1_13]
	por	xmm13, xmm11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 25]
	movd	xmm1, edx
	pcmpeqb	xmm12, xmm9
	pand	xmm12, xmmword ptr [rip + .LCPI1_14]
	por	xmm12, xmm13
	movzx	edx, byte ptr [rsi + rax + 26]
	movd	xmm11, edx
	movdqa	xmm4, xmmword ptr [rsp + 288]   # 16-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r10 + 14], 1
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r12 + 14], 2
	mov	r10, r13
	pinsrb	xmm4, byte ptr [rsi + r13 + 14], 3
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r11 + 14], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 14], 5
	pinsrb	xmm4, byte ptr [rsi + rcx + 14], 6
	pinsrb	xmm4, byte ptr [rsi + rdi + 14], 7
	pinsrb	xmm4, byte ptr [rsi + r8 + 14], 8
	pinsrb	xmm4, byte ptr [rsi + r9 + 14], 9
	pinsrb	xmm4, byte ptr [rsi + rbx + 14], 10
	pinsrb	xmm4, byte ptr [rsi + r14 + 14], 11
	pinsrb	xmm4, byte ptr [rsi + r15 + 14], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 14], 13
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r13 + 14], 14
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 14], 15
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 15], 1
	pinsrb	xmm14, byte ptr [rsi + r12 + 15], 2
	pinsrb	xmm14, byte ptr [rsi + r10 + 15], 3
	pinsrb	xmm14, byte ptr [rsi + r11 + 15], 4
	pinsrb	xmm14, byte ptr [rsi + rax + 15], 5
	pinsrb	xmm14, byte ptr [rsi + rcx + 15], 6
	pinsrb	xmm14, byte ptr [rsi + rdi + 15], 7
	pinsrb	xmm14, byte ptr [rsi + r8 + 15], 8
	pinsrb	xmm14, byte ptr [rsi + r9 + 15], 9
	pinsrb	xmm14, byte ptr [rsi + rbx + 15], 10
	pinsrb	xmm14, byte ptr [rsi + r14 + 15], 11
	pinsrb	xmm14, byte ptr [rsi + r15 + 15], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 15], 13
	pinsrb	xmm14, byte ptr [rsi + r13 + 15], 14
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 15], 15
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdx + 16], 1
	pinsrb	xmm15, byte ptr [rsi + r12 + 16], 2
	pinsrb	xmm15, byte ptr [rsi + r10 + 16], 3
	pinsrb	xmm15, byte ptr [rsi + r11 + 16], 4
	pinsrb	xmm15, byte ptr [rsi + rax + 16], 5
	pinsrb	xmm15, byte ptr [rsi + rcx + 16], 6
	pinsrb	xmm15, byte ptr [rsi + rdi + 16], 7
	pinsrb	xmm15, byte ptr [rsi + r8 + 16], 8
	pinsrb	xmm15, byte ptr [rsi + r9 + 16], 9
	pinsrb	xmm15, byte ptr [rsi + rbx + 16], 10
	pinsrb	xmm15, byte ptr [rsi + r14 + 16], 11
	pinsrb	xmm15, byte ptr [rsi + r15 + 16], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdx + 16], 13
	pinsrb	xmm15, byte ptr [rsi + r13 + 16], 14
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 17], 1
	pinsrb	xmm0, byte ptr [rsi + r12 + 17], 2
	pinsrb	xmm0, byte ptr [rsi + r10 + 17], 3
	pinsrb	xmm0, byte ptr [rsi + r11 + 17], 4
	pinsrb	xmm0, byte ptr [rsi + rax + 17], 5
	mov	r13, rax
	pinsrb	xmm0, byte ptr [rsi + rcx + 17], 6
	pinsrb	xmm0, byte ptr [rsi + rdi + 17], 7
	pinsrb	xmm0, byte ptr [rsi + r8 + 17], 8
	pinsrb	xmm0, byte ptr [rsi + r9 + 17], 9
	pinsrb	xmm0, byte ptr [rsi + rbx + 17], 10
	pinsrb	xmm0, byte ptr [rsi + r14 + 17], 11
	pinsrb	xmm0, byte ptr [rsi + r15 + 17], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 17], 13
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 17], 14
	por	xmm12, xmmword ptr [rsp + 192]  # 16-byte Folded Reload
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + r12 + 27]
	movd	xmm9, edx
	movdqa	xmm13, xmmword ptr [rsp + 208]  # 16-byte Reload
	pcmpeqb	xmm4, xmm13
	pand	xmm4, xmmword ptr [rip + .LCPI1_15]
	pcmpeqb	xmm14, xmm13
	psllw	xmm14, 7
	pand	xmm14, xmmword ptr [rip + .LCPI1_6]
	por	xmm14, xmm4
	movzx	edx, byte ptr [rsi + r12 + 28]
	movd	xmm4, edx
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r8 + 17], 15
	por	xmm14, xmm12
	pcmpeqb	xmm0, xmm13
	movdqa	xmm13, xmm0
	movdqa	xmm12, xmmword ptr [rip + .LCPI1_10] # xmm12 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm13, xmm12
	psubb	xmm13, xmm0
	movdqa	xmmword ptr [rsp + 192], xmm13  # 16-byte Spill
	movzx	edx, byte ptr [rsi + r12 + 29]
	movd	xmm13, edx
	pinsrb	xmm15, byte ptr [rsi + r8 + 16], 15
	movdqa	xmm0, xmmword ptr [rsp + 208]   # 16-byte Reload
	pcmpeqb	xmm15, xmm0
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r12 + 18], 1
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 18], 2
	pinsrb	xmm5, byte ptr [rsi + r10 + 18], 3
	pinsrb	xmm5, byte ptr [rsi + r11 + 18], 4
	pinsrb	xmm5, byte ptr [rsi + r13 + 18], 5
	pinsrb	xmm5, byte ptr [rsi + rcx + 18], 6
	pinsrb	xmm5, byte ptr [rsi + rdi + 18], 7
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 18], 8
	pinsrb	xmm5, byte ptr [rsi + r9 + 18], 9
	pinsrb	xmm5, byte ptr [rsi + rbx + 18], 10
	pinsrb	xmm5, byte ptr [rsi + r14 + 18], 11
	pinsrb	xmm5, byte ptr [rsi + r15 + 18], 12
	pinsrb	xmm5, byte ptr [rsi + rax + 18], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 18], 14
	pand	xmm15, xmm12
	pinsrb	xmm5, byte ptr [rsi + r8 + 18], 15
	pcmpeqb	xmm5, xmm0
	pand	xmm5, xmmword ptr [rip + .LCPI1_11]
	por	xmm5, xmm15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 30]
	movd	xmm12, edx
	pinsrb	xmm7, byte ptr [rsi + r12 + 19], 1
	pinsrb	xmm6, byte ptr [rsi + r12 + 20], 1
	pinsrb	xmm2, byte ptr [rsi + r12 + 21], 1
	pinsrb	xmm3, byte ptr [rsi + r12 + 22], 1
	pinsrb	xmm8, byte ptr [rsi + r12 + 23], 1
	pinsrb	xmm10, byte ptr [rsi + r12 + 24], 1
	pinsrb	xmm1, byte ptr [rsi + r12 + 25], 1
	pinsrb	xmm11, byte ptr [rsi + r12 + 26], 1
	pinsrb	xmm9, byte ptr [rsi + r12 + 27], 1
	pinsrb	xmm4, byte ptr [rsi + r12 + 28], 1
	pinsrb	xmm13, byte ptr [rsi + r12 + 29], 1
	pinsrb	xmm12, byte ptr [rsi + r12 + 30], 1
	movzx	edx, byte ptr [rsi + rax + 31]
	movd	xmm0, edx
	pinsrb	xmm0, byte ptr [rsi + r12 + 31], 1
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdx + 19], 2
	pinsrb	xmm6, byte ptr [rsi + rdx + 20], 2
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 2
	pinsrb	xmm3, byte ptr [rsi + rdx + 22], 2
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 2
	pinsrb	xmm10, byte ptr [rsi + rdx + 24], 2
	pinsrb	xmm1, byte ptr [rsi + rdx + 25], 2
	pinsrb	xmm11, byte ptr [rsi + rdx + 26], 2
	pinsrb	xmm9, byte ptr [rsi + rdx + 27], 2
	pinsrb	xmm4, byte ptr [rsi + rdx + 28], 2
	pinsrb	xmm13, byte ptr [rsi + rdx + 29], 2
	pinsrb	xmm12, byte ptr [rsi + rdx + 30], 2
	pinsrb	xmm0, byte ptr [rsi + rdx + 31], 2
	pinsrb	xmm7, byte ptr [rsi + r10 + 19], 3
	pinsrb	xmm7, byte ptr [rsi + r11 + 19], 4
	pinsrb	xmm7, byte ptr [rsi + r13 + 19], 5
	pinsrb	xmm7, byte ptr [rsi + rcx + 19], 6
	pinsrb	xmm7, byte ptr [rsi + rdi + 19], 7
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + r12 + 19], 8
	pinsrb	xmm7, byte ptr [rsi + r9 + 19], 9
	pinsrb	xmm7, byte ptr [rsi + rbx + 19], 10
	pinsrb	xmm7, byte ptr [rsi + r14 + 19], 11
	pinsrb	xmm7, byte ptr [rsi + r15 + 19], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdx + 19], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 19], 14
	pinsrb	xmm7, byte ptr [rsi + r8 + 19], 15
	pinsrb	xmm6, byte ptr [rsi + r10 + 20], 3
	pinsrb	xmm6, byte ptr [rsi + r11 + 20], 4
	pinsrb	xmm6, byte ptr [rsi + r13 + 20], 5
	pinsrb	xmm6, byte ptr [rsi + rcx + 20], 6
	pinsrb	xmm6, byte ptr [rsi + rdi + 20], 7
	pinsrb	xmm6, byte ptr [rsi + r12 + 20], 8
	pinsrb	xmm6, byte ptr [rsi + r9 + 20], 9
	pinsrb	xmm6, byte ptr [rsi + rbx + 20], 10
	pinsrb	xmm6, byte ptr [rsi + r14 + 20], 11
	pinsrb	xmm6, byte ptr [rsi + r15 + 20], 12
	pinsrb	xmm6, byte ptr [rsi + rdx + 20], 13
	pinsrb	xmm6, byte ptr [rsi + rax + 20], 14
	por	xmm5, xmmword ptr [rsp + 192]   # 16-byte Folded Reload
	pinsrb	xmm6, byte ptr [rsi + r8 + 20], 15
	movdqa	xmm15, xmmword ptr [rsp + 208]  # 16-byte Reload
	pcmpeqb	xmm7, xmm15
	pand	xmm7, xmmword ptr [rip + .LCPI1_12]
	pcmpeqb	xmm6, xmm15
	pand	xmm6, xmmword ptr [rip + .LCPI1_13]
	por	xmm6, xmm7
	pinsrb	xmm2, byte ptr [rsi + r10 + 21], 3
	pinsrb	xmm2, byte ptr [rsi + r11 + 21], 4
	pinsrb	xmm2, byte ptr [rsi + r13 + 21], 5
	pinsrb	xmm2, byte ptr [rsi + rcx + 21], 6
	pinsrb	xmm2, byte ptr [rsi + rdi + 21], 7
	pinsrb	xmm2, byte ptr [rsi + r12 + 21], 8
	pinsrb	xmm2, byte ptr [rsi + r9 + 21], 9
	pinsrb	xmm2, byte ptr [rsi + rbx + 21], 10
	pinsrb	xmm2, byte ptr [rsi + r14 + 21], 11
	pinsrb	xmm2, byte ptr [rsi + r15 + 21], 12
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 13
	pinsrb	xmm2, byte ptr [rsi + rax + 21], 14
	pinsrb	xmm2, byte ptr [rsi + r8 + 21], 15
	pcmpeqb	xmm2, xmm15
	movdqa	xmm7, xmmword ptr [rip + .LCPI1_14] # xmm7 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm2, xmm7
	por	xmm2, xmm6
	por	xmm2, xmm5
	pinsrb	xmm3, byte ptr [rsi + r10 + 22], 3
	pinsrb	xmm3, byte ptr [rsi + r11 + 22], 4
	pinsrb	xmm3, byte ptr [rsi + r13 + 22], 5
	pinsrb	xmm3, byte ptr [rsi + rcx + 22], 6
	pinsrb	xmm3, byte ptr [rsi + rdi + 22], 7
	pinsrb	xmm3, byte ptr [rsi + r12 + 22], 8
	pinsrb	xmm3, byte ptr [rsi + r9 + 22], 9
	pinsrb	xmm3, byte ptr [rsi + rbx + 22], 10
	pinsrb	xmm3, byte ptr [rsi + r14 + 22], 11
	pinsrb	xmm3, byte ptr [rsi + r15 + 22], 12
	pinsrb	xmm3, byte ptr [rsi + rdx + 22], 13
	pinsrb	xmm3, byte ptr [rsi + rax + 22], 14
	pinsrb	xmm3, byte ptr [rsi + r8 + 22], 15
	pinsrb	xmm8, byte ptr [rsi + r10 + 23], 3
	pinsrb	xmm8, byte ptr [rsi + r11 + 23], 4
	pinsrb	xmm8, byte ptr [rsi + r13 + 23], 5
	pinsrb	xmm8, byte ptr [rsi + rcx + 23], 6
	pinsrb	xmm8, byte ptr [rsi + rdi + 23], 7
	pinsrb	xmm8, byte ptr [rsi + r12 + 23], 8
	pinsrb	xmm8, byte ptr [rsi + r9 + 23], 9
	pinsrb	xmm8, byte ptr [rsi + rbx + 23], 10
	pinsrb	xmm8, byte ptr [rsi + r14 + 23], 11
	pinsrb	xmm8, byte ptr [rsi + r15 + 23], 12
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 13
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 14
	pinsrb	xmm8, byte ptr [rsi + r8 + 23], 15
	pcmpeqb	xmm3, xmm15
	movdqa	xmm5, xmmword ptr [rip + .LCPI1_15] # xmm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm5
	pcmpeqb	xmm8, xmm15
	psllw	xmm8, 7
	movdqa	xmm6, xmmword ptr [rip + .LCPI1_6] # xmm6 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm8, xmm6
	por	xmm8, xmm3
	pinsrb	xmm1, byte ptr [rsi + r10 + 25], 3
	pinsrb	xmm1, byte ptr [rsi + r11 + 25], 4
	pinsrb	xmm1, byte ptr [rsi + r13 + 25], 5
	pinsrb	xmm1, byte ptr [rsi + rcx + 25], 6
	pinsrb	xmm1, byte ptr [rsi + rdi + 25], 7
	pinsrb	xmm1, byte ptr [rsi + r12 + 25], 8
	pinsrb	xmm1, byte ptr [rsi + r9 + 25], 9
	pinsrb	xmm1, byte ptr [rsi + rbx + 25], 10
	pinsrb	xmm1, byte ptr [rsi + r14 + 25], 11
	pinsrb	xmm1, byte ptr [rsi + r15 + 25], 12
	pinsrb	xmm1, byte ptr [rsi + rdx + 25], 13
	pinsrb	xmm1, byte ptr [rsi + rax + 25], 14
	pinsrb	xmm1, byte ptr [rsi + r8 + 25], 15
	por	xmm8, xmm2
	pcmpeqb	xmm1, xmm15
	movdqa	xmm2, xmm1
	movdqa	xmm3, xmmword ptr [rip + .LCPI1_10] # xmm3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm2, xmm3
	psubb	xmm2, xmm1
	pinsrb	xmm10, byte ptr [rsi + r10 + 24], 3
	pinsrb	xmm10, byte ptr [rsi + r11 + 24], 4
	pinsrb	xmm10, byte ptr [rsi + r13 + 24], 5
	pinsrb	xmm10, byte ptr [rsi + rcx + 24], 6
	pinsrb	xmm10, byte ptr [rsi + rdi + 24], 7
	pinsrb	xmm10, byte ptr [rsi + r12 + 24], 8
	pinsrb	xmm10, byte ptr [rsi + r9 + 24], 9
	pinsrb	xmm10, byte ptr [rsi + rbx + 24], 10
	pinsrb	xmm10, byte ptr [rsi + r14 + 24], 11
	pinsrb	xmm10, byte ptr [rsi + r15 + 24], 12
	pinsrb	xmm10, byte ptr [rsi + rdx + 24], 13
	pinsrb	xmm10, byte ptr [rsi + rax + 24], 14
	pinsrb	xmm10, byte ptr [rsi + r8 + 24], 15
	pcmpeqb	xmm10, xmm15
	pand	xmm10, xmm3
	pinsrb	xmm11, byte ptr [rsi + r10 + 26], 3
	pinsrb	xmm11, byte ptr [rsi + r11 + 26], 4
	pinsrb	xmm11, byte ptr [rsi + r13 + 26], 5
	pinsrb	xmm11, byte ptr [rsi + rcx + 26], 6
	pinsrb	xmm11, byte ptr [rsi + rdi + 26], 7
	pinsrb	xmm11, byte ptr [rsi + r12 + 26], 8
	pinsrb	xmm11, byte ptr [rsi + r9 + 26], 9
	pinsrb	xmm11, byte ptr [rsi + rbx + 26], 10
	pinsrb	xmm11, byte ptr [rsi + r14 + 26], 11
	pinsrb	xmm11, byte ptr [rsi + r15 + 26], 12
	pinsrb	xmm11, byte ptr [rsi + rdx + 26], 13
	pinsrb	xmm11, byte ptr [rsi + rax + 26], 14
	pinsrb	xmm11, byte ptr [rsi + r8 + 26], 15
	pcmpeqb	xmm11, xmm15
	pand	xmm11, xmmword ptr [rip + .LCPI1_11]
	por	xmm11, xmm10
	por	xmm11, xmm2
	pinsrb	xmm9, byte ptr [rsi + r10 + 27], 3
	pinsrb	xmm9, byte ptr [rsi + r11 + 27], 4
	pinsrb	xmm9, byte ptr [rsi + r13 + 27], 5
	pinsrb	xmm9, byte ptr [rsi + rcx + 27], 6
	pinsrb	xmm9, byte ptr [rsi + rdi + 27], 7
	pinsrb	xmm9, byte ptr [rsi + r12 + 27], 8
	pinsrb	xmm9, byte ptr [rsi + r9 + 27], 9
	pinsrb	xmm9, byte ptr [rsi + rbx + 27], 10
	pinsrb	xmm9, byte ptr [rsi + r14 + 27], 11
	pinsrb	xmm9, byte ptr [rsi + r15 + 27], 12
	pinsrb	xmm9, byte ptr [rsi + rdx + 27], 13
	pinsrb	xmm9, byte ptr [rsi + rax + 27], 14
	pinsrb	xmm9, byte ptr [rsi + r8 + 27], 15
	pinsrb	xmm4, byte ptr [rsi + r10 + 28], 3
	pinsrb	xmm4, byte ptr [rsi + r11 + 28], 4
	pinsrb	xmm4, byte ptr [rsi + r13 + 28], 5
	pinsrb	xmm4, byte ptr [rsi + rcx + 28], 6
	pinsrb	xmm4, byte ptr [rsi + rdi + 28], 7
	pinsrb	xmm4, byte ptr [rsi + r12 + 28], 8
	pinsrb	xmm4, byte ptr [rsi + r9 + 28], 9
	pinsrb	xmm4, byte ptr [rsi + rbx + 28], 10
	pinsrb	xmm4, byte ptr [rsi + r14 + 28], 11
	pinsrb	xmm4, byte ptr [rsi + r15 + 28], 12
	pinsrb	xmm4, byte ptr [rsi + rdx + 28], 13
	pinsrb	xmm4, byte ptr [rsi + rax + 28], 14
	pinsrb	xmm4, byte ptr [rsi + r8 + 28], 15
	pinsrb	xmm13, byte ptr [rsi + r10 + 29], 3
	pinsrb	xmm13, byte ptr [rsi + r11 + 29], 4
	pinsrb	xmm13, byte ptr [rsi + r13 + 29], 5
	pinsrb	xmm13, byte ptr [rsi + rcx + 29], 6
	pinsrb	xmm13, byte ptr [rsi + rdi + 29], 7
	pinsrb	xmm13, byte ptr [rsi + r12 + 29], 8
	pinsrb	xmm13, byte ptr [rsi + r9 + 29], 9
	pinsrb	xmm13, byte ptr [rsi + rbx + 29], 10
	pinsrb	xmm13, byte ptr [rsi + r14 + 29], 11
	pinsrb	xmm13, byte ptr [rsi + r15 + 29], 12
	pinsrb	xmm13, byte ptr [rsi + rdx + 29], 13
	pinsrb	xmm13, byte ptr [rsi + rax + 29], 14
	movdqa	xmm1, xmm15
	pcmpeqb	xmm9, xmm15
	pand	xmm9, xmmword ptr [rip + .LCPI1_12]
	pcmpeqb	xmm4, xmm15
	pand	xmm4, xmmword ptr [rip + .LCPI1_13]
	por	xmm4, xmm9
	pinsrb	xmm13, byte ptr [rsi + r8 + 29], 15
	pcmpeqb	xmm13, xmm15
	pand	xmm13, xmm7
	por	xmm13, xmm4
	pinsrb	xmm12, byte ptr [rsi + r10 + 30], 3
	pinsrb	xmm0, byte ptr [rsi + r10 + 31], 3
	pinsrb	xmm12, byte ptr [rsi + r11 + 30], 4
	pinsrb	xmm0, byte ptr [rsi + r11 + 31], 4
	pinsrb	xmm12, byte ptr [rsi + r13 + 30], 5
	pinsrb	xmm0, byte ptr [rsi + r13 + 31], 5
	pinsrb	xmm12, byte ptr [rsi + rcx + 30], 6
	pinsrb	xmm0, byte ptr [rsi + rcx + 31], 6
	pinsrb	xmm12, byte ptr [rsi + rdi + 30], 7
	pinsrb	xmm0, byte ptr [rsi + rdi + 31], 7
	pinsrb	xmm12, byte ptr [rsi + r12 + 30], 8
	pinsrb	xmm0, byte ptr [rsi + r12 + 31], 8
	pinsrb	xmm12, byte ptr [rsi + r9 + 30], 9
	pinsrb	xmm0, byte ptr [rsi + r9 + 31], 9
	pinsrb	xmm12, byte ptr [rsi + rbx + 30], 10
	pinsrb	xmm0, byte ptr [rsi + rbx + 31], 10
	pinsrb	xmm12, byte ptr [rsi + r14 + 30], 11
	pinsrb	xmm0, byte ptr [rsi + r14 + 31], 11
	pinsrb	xmm12, byte ptr [rsi + r15 + 30], 12
	pinsrb	xmm0, byte ptr [rsi + r15 + 31], 12
	pinsrb	xmm12, byte ptr [rsi + rdx + 30], 13
	pinsrb	xmm0, byte ptr [rsi + rdx + 31], 13
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rax + 30], 14
	pinsrb	xmm0, byte ptr [rsi + rax + 31], 14
	pinsrb	xmm12, byte ptr [rsi + r8 + 30], 15
	pinsrb	xmm0, byte ptr [rsi + r8 + 31], 15
	por	xmm13, xmm11
	pcmpeqb	xmm12, xmm15
	pand	xmm12, xmm5
	pcmpeqb	xmm0, xmm15
	psllw	xmm0, 7
	pand	xmm0, xmm6
	por	xmm0, xmm12
	por	xmm0, xmm13
	movdqa	xmm1, xmm8
	punpcklbw	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	movdqa	xmm4, xmmword ptr [rsp + 224]   # 16-byte Reload
	movdqa	xmm2, xmm4
	punpcklbw	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0],xmm2[1],xmm14[1],xmm2[2],xmm14[2],xmm2[3],xmm14[3],xmm2[4],xmm14[4],xmm2[5],xmm14[5],xmm2[6],xmm14[6],xmm2[7],xmm14[7]
	movdqa	xmm3, xmm2
	punpcklwd	xmm3, xmm1              # xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1],xmm3[2],xmm1[2],xmm3[3],xmm1[3]
	punpckhwd	xmm2, xmm1              # xmm2 = xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
	punpckhbw	xmm8, xmm0              # xmm8 = xmm8[8],xmm0[8],xmm8[9],xmm0[9],xmm8[10],xmm0[10],xmm8[11],xmm0[11],xmm8[12],xmm0[12],xmm8[13],xmm0[13],xmm8[14],xmm0[14],xmm8[15],xmm0[15]
	punpckhbw	xmm4, xmm14             # xmm4 = xmm4[8],xmm14[8],xmm4[9],xmm14[9],xmm4[10],xmm14[10],xmm4[11],xmm14[11],xmm4[12],xmm14[12],xmm4[13],xmm14[13],xmm4[14],xmm14[14],xmm4[15],xmm14[15]
	movdqa	xmm0, xmm4
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm4, xmm8              # xmm4 = xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx + 48], xmm4
	movdqu	xmmword ptr [r14 + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm2
	movdqu	xmmword ptr [r14 + 4*rcx], xmm3
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 248]      # 8-byte Folded Reload
	jne	.LBB1_87
# %bb.88:
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 248]      # 8-byte Folded Reload
	mov	r11b, byte ptr [rsp + 8]        # 1-byte Reload
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	jne	.LBB1_89
	jmp	.LBB1_92
.LBB1_66:
	and	r15, -16
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	qword ptr [rsp + 248], r15      # 8-byte Spill
	lea	rax, [r14 + 4*r15]
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	movzx	eax, r11b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 176], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_67:                               # =>This Inner Loop Header: Depth=1
	mov	r15, rax
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	shl	r15, 5
	mov	rdi, r15
	mov	rcx, r15
	mov	r10, r15
	mov	r8, r15
	mov	r12, r15
	mov	r9, r15
	mov	r11, r15
	mov	rbx, r15
	mov	r14, r15
	mov	rax, r15
	mov	qword ptr [rsp + 112], r15      # 8-byte Spill
	movzx	edx, byte ptr [rsi + r15]
	movd	xmm15, edx
	movzx	edx, byte ptr [rsi + r15 + 1]
	movd	xmm5, edx
	movzx	edx, byte ptr [rsi + r15 + 2]
	movd	xmm6, edx
	movzx	edx, byte ptr [rsi + r15 + 3]
	movd	xmm2, edx
	movzx	edx, byte ptr [rsi + r15 + 4]
	movd	xmm1, edx
	movzx	edx, byte ptr [rsi + r15 + 5]
	movd	xmm8, edx
	movzx	edx, byte ptr [rsi + r15 + 6]
	movd	xmm3, edx
	movzx	edx, byte ptr [rsi + r15 + 7]
	movd	xmm0, edx
	movdqa	xmmword ptr [rsp + 208], xmm0   # 16-byte Spill
	movzx	edx, byte ptr [rsi + r15 + 8]
	movd	xmm0, edx
	movdqa	xmmword ptr [rsp + 288], xmm0   # 16-byte Spill
	movzx	edx, byte ptr [rsi + r15 + 9]
	movd	xmm10, edx
	movzx	edx, byte ptr [rsi + r15 + 10]
	movd	xmm0, edx
	movdqa	xmmword ptr [rsp + 160], xmm0   # 16-byte Spill
	movzx	edx, byte ptr [rsi + r15 + 11]
	movd	xmm11, edx
	movzx	edx, byte ptr [rsi + r15 + 12]
	movd	xmm13, edx
	movzx	edx, byte ptr [rsi + r15 + 13]
	movd	xmm12, edx
	movzx	edx, byte ptr [rsi + r15 + 14]
	movd	xmm0, edx
	movdqa	xmmword ptr [rsp + 272], xmm0   # 16-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	r13, r15
	or	r13, 32
	mov	qword ptr [rsp + 24], r13       # 8-byte Spill
	or	rdi, 64
	or	rcx, 96
	mov	qword ptr [rsp + 128], rcx      # 8-byte Spill
	or	r10, 128
	or	r8, 160
	or	r12, 192
	or	r9, 224
	or	r11, 256
	or	rbx, 288
	or	r14, 320
	or	rax, 352
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	or	rdx, 384
	mov	qword ptr [rsp + 112], rdx      # 8-byte Spill
	mov	rax, r15
	or	rax, 416
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rax, r15
	or	rax, 448
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, r15
	or	rax, 480
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r13], 1
	pinsrb	xmm15, byte ptr [rsi + rdi], 2
	pinsrb	xmm15, byte ptr [rsi + rcx], 3
	pinsrb	xmm15, byte ptr [rsi + r10], 4
	mov	r15, r8
	mov	qword ptr [rsp + 120], r8       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r8], 5
	mov	qword ptr [rsp + 104], r12      # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r12], 6
	mov	r8, r9
	pinsrb	xmm15, byte ptr [rsi + r9], 7
	mov	r9, r11
	mov	qword ptr [rsp + 16], r11       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r11], 8
	mov	qword ptr [rsp + 64], rbx       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + rbx], 9
	mov	qword ptr [rsp + 96], r14       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r14], 10
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r13], 11
	pinsrb	xmm15, byte ptr [rsi + rdx], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rcx], 13
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rcx], 14
	pinsrb	xmm15, byte ptr [rsi + rax], 15
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r11 + 1], 1
	pinsrb	xmm5, byte ptr [rsi + rdi + 1], 2
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r11 + 1], 3
	pinsrb	xmm5, byte ptr [rsi + r10 + 1], 4
	mov	qword ptr [rsp + 88], r10       # 8-byte Spill
	pinsrb	xmm5, byte ptr [rsi + r15 + 1], 5
	pinsrb	xmm5, byte ptr [rsi + r12 + 1], 6
	pinsrb	xmm5, byte ptr [rsi + r8 + 1], 7
	mov	r15, r8
	pinsrb	xmm5, byte ptr [rsi + r9 + 1], 8
	pinsrb	xmm5, byte ptr [rsi + rbx + 1], 9
	pinsrb	xmm5, byte ptr [rsi + r14 + 1], 10
	pinsrb	xmm5, byte ptr [rsi + r13 + 1], 11
	mov	r8, r13
	pinsrb	xmm5, byte ptr [rsi + rdx + 1], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 1], 13
	pinsrb	xmm5, byte ptr [rsi + rcx + 1], 14
	pinsrb	xmm5, byte ptr [rsi + rax + 1], 15
	movdqa	xmm9, xmmword ptr [rsp + 176]   # 16-byte Reload
	pcmpeqb	xmm5, xmm9
	movdqa	xmm7, xmm5
	movdqa	xmm4, xmmword ptr [rip + .LCPI1_10] # xmm4 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm7, xmm4
	psubb	xmm7, xmm5
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 15]
	movd	xmm14, edx
	pcmpeqb	xmm15, xmm9
	mov	rbx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rbx + 2], 1
	pinsrb	xmm6, byte ptr [rsi + rdi + 2], 2
	mov	r12, r11
	pinsrb	xmm6, byte ptr [rsi + r11 + 2], 3
	pinsrb	xmm6, byte ptr [rsi + r10 + 2], 4
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 2], 5
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r11 + 2], 6
	mov	qword ptr [rsp + 192], r15      # 8-byte Spill
	pinsrb	xmm6, byte ptr [rsi + r15 + 2], 7
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r13 + 2], 8
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r14 + 2], 9
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r9 + 2], 10
	pinsrb	xmm6, byte ptr [rsi + r8 + 2], 11
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdx + 2], 12
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r10 + 2], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdx + 2], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdx + 2], 15
	pand	xmm15, xmm4
	pcmpeqb	xmm6, xmm9
	movdqa	xmm0, xmmword ptr [rip + .LCPI1_11] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm6, xmm0
	por	xmm6, xmm15
	movzx	edx, byte ptr [rsi + rax + 16]
	movd	xmm15, edx
	pinsrb	xmm2, byte ptr [rsi + rbx + 3], 1
	pinsrb	xmm2, byte ptr [rsi + rdi + 3], 2
	mov	rax, r12
	pinsrb	xmm2, byte ptr [rsi + r12 + 3], 3
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r12 + 3], 4
	pinsrb	xmm2, byte ptr [rsi + rcx + 3], 5
	pinsrb	xmm2, byte ptr [rsi + r11 + 3], 6
	pinsrb	xmm2, byte ptr [rsi + r15 + 3], 7
	pinsrb	xmm2, byte ptr [rsi + r13 + 3], 8
	pinsrb	xmm2, byte ptr [rsi + r14 + 3], 9
	pinsrb	xmm2, byte ptr [rsi + r9 + 3], 10
	mov	r14, r9
	pinsrb	xmm2, byte ptr [rsi + r8 + 3], 11
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r15 + 3], 12
	pinsrb	xmm2, byte ptr [rsi + r10 + 3], 13
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r13 + 3], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdx + 3], 15
	pinsrb	xmm1, byte ptr [rsi + rbx + 4], 1
	pinsrb	xmm1, byte ptr [rsi + rdi + 4], 2
	pinsrb	xmm1, byte ptr [rsi + rax + 4], 3
	pinsrb	xmm1, byte ptr [rsi + r12 + 4], 4
	pinsrb	xmm1, byte ptr [rsi + rcx + 4], 5
	mov	rcx, r11
	pinsrb	xmm1, byte ptr [rsi + r11 + 4], 6
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + r11 + 4], 7
	mov	r9, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + r9 + 4], 8
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rbx + 4], 9
	pinsrb	xmm1, byte ptr [rsi + r14 + 4], 10
	mov	r12, r14
	pinsrb	xmm1, byte ptr [rsi + r8 + 4], 11
	mov	r14, r8
	pinsrb	xmm1, byte ptr [rsi + r15 + 4], 12
	pinsrb	xmm1, byte ptr [rsi + r10 + 4], 13
	pinsrb	xmm1, byte ptr [rsi + r13 + 4], 14
	pinsrb	xmm1, byte ptr [rsi + rdx + 4], 15
	mov	r10, rdx
	por	xmm6, xmm7
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rbx + 17]
	movd	xmm0, edx
	pcmpeqb	xmm2, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI1_12] # xmm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm2, xmm5
	pcmpeqb	xmm1, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI1_13] # xmm5 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm1, xmm5
	por	xmm1, xmm2
	movzx	edx, byte ptr [rsi + rbx + 18]
	movd	xmm5, edx
	mov	r8, qword ptr [rsp + 24]        # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r8 + 5], 1
	pinsrb	xmm8, byte ptr [rsi + rdi + 5], 2
	pinsrb	xmm8, byte ptr [rsi + rax + 5], 3
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdx + 5], 4
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdx + 5], 5
	pinsrb	xmm8, byte ptr [rsi + rcx + 5], 6
	pinsrb	xmm8, byte ptr [rsi + r11 + 5], 7
	pinsrb	xmm8, byte ptr [rsi + r9 + 5], 8
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rcx + 5], 9
	pinsrb	xmm8, byte ptr [rsi + r12 + 5], 10
	pinsrb	xmm8, byte ptr [rsi + r14 + 5], 11
	pinsrb	xmm8, byte ptr [rsi + r15 + 5], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rcx + 5], 13
	pinsrb	xmm8, byte ptr [rsi + r13 + 5], 14
	pinsrb	xmm8, byte ptr [rsi + r10 + 5], 15
	pcmpeqb	xmm8, xmm9
	movdqa	xmm2, xmmword ptr [rip + .LCPI1_14] # xmm2 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm8, xmm2
	por	xmm8, xmm1
	movzx	edx, byte ptr [rsi + rbx + 19]
	movd	xmm7, edx
	por	xmm8, xmm6
	movzx	edx, byte ptr [rsi + rbx + 20]
	movd	xmm6, edx
	mov	rdx, r8
	pinsrb	xmm3, byte ptr [rsi + r8 + 6], 1
	pinsrb	xmm3, byte ptr [rsi + rdi + 6], 2
	pinsrb	xmm3, byte ptr [rsi + rax + 6], 3
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r11 + 6], 4
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r9 + 6], 5
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r8 + 6], 6
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r12 + 6], 7
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 6], 8
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rbx + 6], 9
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r14 + 6], 10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 6], 11
	pinsrb	xmm3, byte ptr [rsi + r15 + 6], 12
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r10 + 6], 13
	pinsrb	xmm3, byte ptr [rsi + r13 + 6], 14
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 6], 15
	movdqa	xmm2, xmmword ptr [rsp + 208]   # 16-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdx + 7], 1
	pinsrb	xmm2, byte ptr [rsi + rdi + 7], 2
	mov	qword ptr [rsp + 224], rdi      # 8-byte Spill
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 7], 3
	pinsrb	xmm2, byte ptr [rsi + r11 + 7], 4
	pinsrb	xmm2, byte ptr [rsi + r9 + 7], 5
	pinsrb	xmm2, byte ptr [rsi + r8 + 7], 6
	pinsrb	xmm2, byte ptr [rsi + r12 + 7], 7
	mov	r11, r12
	pinsrb	xmm2, byte ptr [rsi + rax + 7], 8
	pinsrb	xmm2, byte ptr [rsi + rbx + 7], 9
	pinsrb	xmm2, byte ptr [rsi + r14 + 7], 10
	mov	r12, r14
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rax + 7], 11
	pinsrb	xmm2, byte ptr [rsi + r15 + 7], 12
	pinsrb	xmm2, byte ptr [rsi + r10 + 7], 13
	pinsrb	xmm2, byte ptr [rsi + r13 + 7], 14
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r14 + 7], 15
	pcmpeqb	xmm3, xmm9
	movdqa	xmm1, xmmword ptr [rip + .LCPI1_15] # xmm1 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm1
	pcmpeqb	xmm2, xmm9
	psllw	xmm2, 7
	movdqa	xmm1, xmmword ptr [rip + .LCPI1_6] # xmm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm2, xmm1
	por	xmm2, xmm3
	movdqa	xmm1, xmm2
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rbx + 21]
	movd	xmm2, edx
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdx + 9], 1
	pinsrb	xmm10, byte ptr [rsi + rdi + 9], 2
	pinsrb	xmm10, byte ptr [rsi + rcx + 9], 3
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdi + 9], 4
	pinsrb	xmm10, byte ptr [rsi + r9 + 9], 5
	pinsrb	xmm10, byte ptr [rsi + r8 + 9], 6
	pinsrb	xmm10, byte ptr [rsi + r11 + 9], 7
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rcx + 9], 8
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rcx + 9], 9
	pinsrb	xmm10, byte ptr [rsi + r12 + 9], 10
	pinsrb	xmm10, byte ptr [rsi + rax + 9], 11
	pinsrb	xmm10, byte ptr [rsi + r15 + 9], 12
	pinsrb	xmm10, byte ptr [rsi + r10 + 9], 13
	pinsrb	xmm10, byte ptr [rsi + r13 + 9], 14
	pinsrb	xmm10, byte ptr [rsi + r14 + 9], 15
	por	xmm1, xmm8
	movdqa	xmmword ptr [rsp + 208], xmm1   # 16-byte Spill
	pcmpeqb	xmm10, xmm9
	movdqa	xmm1, xmm10
	movdqa	xmm8, xmm4
	pand	xmm1, xmm4
	psubb	xmm1, xmm10
	movzx	edx, byte ptr [rsi + rbx + 22]
	movd	xmm3, edx
	movdqa	xmm4, xmmword ptr [rsp + 288]   # 16-byte Reload
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r10 + 8], 1
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r12 + 8], 2
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 8], 3
	pinsrb	xmm4, byte ptr [rsi + rdi + 8], 4
	pinsrb	xmm4, byte ptr [rsi + r9 + 8], 5
	pinsrb	xmm4, byte ptr [rsi + r8 + 8], 6
	mov	rbx, r11
	pinsrb	xmm4, byte ptr [rsi + r11 + 8], 7
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 8], 8
	pinsrb	xmm4, byte ptr [rsi + rcx + 8], 9
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 8], 10
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r14 + 8], 11
	pinsrb	xmm4, byte ptr [rsi + r15 + 8], 12
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdi + 8], 13
	pinsrb	xmm4, byte ptr [rsi + r13 + 8], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdi + 8], 15
	pcmpeqb	xmm4, xmm9
	pand	xmm4, xmm8
	movdqa	xmm10, xmmword ptr [rsp + 160]  # 16-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r10 + 10], 1
	pinsrb	xmm10, byte ptr [rsi + r12 + 10], 2
	pinsrb	xmm10, byte ptr [rsi + rax + 10], 3
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r11 + 10], 4
	pinsrb	xmm10, byte ptr [rsi + r9 + 10], 5
	pinsrb	xmm10, byte ptr [rsi + r8 + 10], 6
	pinsrb	xmm10, byte ptr [rsi + rbx + 10], 7
	mov	r10, rbx
	pinsrb	xmm10, byte ptr [rsi + rdx + 10], 8
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r8 + 10], 9
	pinsrb	xmm10, byte ptr [rsi + rcx + 10], 10
	pinsrb	xmm10, byte ptr [rsi + r14 + 10], 11
	mov	r13, r14
	pinsrb	xmm10, byte ptr [rsi + r15 + 10], 12
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rcx + 10], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdx + 10], 14
	pinsrb	xmm10, byte ptr [rsi + rdi + 10], 15
	pcmpeqb	xmm10, xmm9
	pand	xmm10, xmmword ptr [rip + .LCPI1_11]
	por	xmm10, xmm4
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rdi + 23]
	movd	xmm8, edx
	por	xmm10, xmm1
	movdqa	xmmword ptr [rsp + 160], xmm10  # 16-byte Spill
	movzx	edx, byte ptr [rsi + rdi + 24]
	movd	xmm10, edx
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 11], 1
	pinsrb	xmm11, byte ptr [rsi + r12 + 11], 2
	pinsrb	xmm11, byte ptr [rsi + rax + 11], 3
	pinsrb	xmm11, byte ptr [rsi + r11 + 11], 4
	pinsrb	xmm11, byte ptr [rsi + r9 + 11], 5
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rbx + 11], 6
	mov	r14, r10
	pinsrb	xmm11, byte ptr [rsi + r10 + 11], 7
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r10 + 11], 8
	pinsrb	xmm11, byte ptr [rsi + r8 + 11], 9
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r9 + 11], 10
	pinsrb	xmm11, byte ptr [rsi + r13 + 11], 11
	pinsrb	xmm11, byte ptr [rsi + r15 + 11], 12
	pinsrb	xmm11, byte ptr [rsi + rcx + 11], 13
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdi + 11], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdi + 11], 15
	pinsrb	xmm13, byte ptr [rsi + rdx + 12], 1
	pinsrb	xmm13, byte ptr [rsi + r12 + 12], 2
	pinsrb	xmm13, byte ptr [rsi + rax + 12], 3
	pinsrb	xmm13, byte ptr [rsi + r11 + 12], 4
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r13 + 12], 5
	pinsrb	xmm13, byte ptr [rsi + rbx + 12], 6
	pinsrb	xmm13, byte ptr [rsi + r14 + 12], 7
	pinsrb	xmm13, byte ptr [rsi + r10 + 12], 8
	pinsrb	xmm13, byte ptr [rsi + r8 + 12], 9
	mov	rbx, r8
	pinsrb	xmm13, byte ptr [rsi + r9 + 12], 10
	mov	r8, r9
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r13 + 12], 11
	pinsrb	xmm13, byte ptr [rsi + r15 + 12], 12
	pinsrb	xmm13, byte ptr [rsi + rcx + 12], 13
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r9 + 12], 14
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rdi + 12], 15
	pinsrb	xmm12, byte ptr [rsi + rdx + 13], 1
	pinsrb	xmm12, byte ptr [rsi + r12 + 13], 2
	pinsrb	xmm12, byte ptr [rsi + rax + 13], 3
	pinsrb	xmm12, byte ptr [rsi + r11 + 13], 4
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rax + 13], 5
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rdx + 13], 6
	pinsrb	xmm12, byte ptr [rsi + r14 + 13], 7
	pinsrb	xmm12, byte ptr [rsi + r10 + 13], 8
	pinsrb	xmm12, byte ptr [rsi + rbx + 13], 9
	pinsrb	xmm12, byte ptr [rsi + r8 + 13], 10
	pinsrb	xmm12, byte ptr [rsi + r13 + 13], 11
	pinsrb	xmm12, byte ptr [rsi + r15 + 13], 12
	pinsrb	xmm12, byte ptr [rsi + rcx + 13], 13
	mov	r13, r9
	pinsrb	xmm12, byte ptr [rsi + r9 + 13], 14
	pinsrb	xmm12, byte ptr [rsi + rdi + 13], 15
	pcmpeqb	xmm11, xmm9
	pand	xmm11, xmmword ptr [rip + .LCPI1_12]
	pcmpeqb	xmm13, xmm9
	pand	xmm13, xmmword ptr [rip + .LCPI1_13]
	por	xmm13, xmm11
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 25]
	movd	xmm1, edx
	pcmpeqb	xmm12, xmm9
	pand	xmm12, xmmword ptr [rip + .LCPI1_14]
	por	xmm12, xmm13
	movzx	edx, byte ptr [rsi + rcx + 26]
	movd	xmm11, edx
	movdqa	xmm4, xmmword ptr [rsp + 272]   # 16-byte Reload
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 14], 1
	pinsrb	xmm4, byte ptr [rsi + r12 + 14], 2
	mov	r10, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r10 + 14], 3
	pinsrb	xmm4, byte ptr [rsi + r11 + 14], 4
	pinsrb	xmm4, byte ptr [rsi + rax + 14], 5
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 14], 6
	mov	rdi, r14
	pinsrb	xmm4, byte ptr [rsi + r14 + 14], 7
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r8 + 14], 8
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r9 + 14], 9
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rbx + 14], 10
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r14 + 14], 11
	pinsrb	xmm4, byte ptr [rsi + r15 + 14], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 14], 13
	pinsrb	xmm4, byte ptr [rsi + r13 + 14], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 14], 15
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 15], 1
	pinsrb	xmm14, byte ptr [rsi + r12 + 15], 2
	pinsrb	xmm14, byte ptr [rsi + r10 + 15], 3
	pinsrb	xmm14, byte ptr [rsi + r11 + 15], 4
	pinsrb	xmm14, byte ptr [rsi + rax + 15], 5
	pinsrb	xmm14, byte ptr [rsi + rcx + 15], 6
	pinsrb	xmm14, byte ptr [rsi + rdi + 15], 7
	pinsrb	xmm14, byte ptr [rsi + r8 + 15], 8
	pinsrb	xmm14, byte ptr [rsi + r9 + 15], 9
	pinsrb	xmm14, byte ptr [rsi + rbx + 15], 10
	pinsrb	xmm14, byte ptr [rsi + r14 + 15], 11
	pinsrb	xmm14, byte ptr [rsi + r15 + 15], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 15], 13
	pinsrb	xmm14, byte ptr [rsi + r13 + 15], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 15], 15
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdx + 16], 1
	pinsrb	xmm15, byte ptr [rsi + r12 + 16], 2
	pinsrb	xmm15, byte ptr [rsi + r10 + 16], 3
	pinsrb	xmm15, byte ptr [rsi + r11 + 16], 4
	pinsrb	xmm15, byte ptr [rsi + rax + 16], 5
	pinsrb	xmm15, byte ptr [rsi + rcx + 16], 6
	pinsrb	xmm15, byte ptr [rsi + rdi + 16], 7
	pinsrb	xmm15, byte ptr [rsi + r8 + 16], 8
	pinsrb	xmm15, byte ptr [rsi + r9 + 16], 9
	pinsrb	xmm15, byte ptr [rsi + rbx + 16], 10
	pinsrb	xmm15, byte ptr [rsi + r14 + 16], 11
	pinsrb	xmm15, byte ptr [rsi + r15 + 16], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdx + 16], 13
	pinsrb	xmm15, byte ptr [rsi + r13 + 16], 14
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 17], 1
	pinsrb	xmm0, byte ptr [rsi + r12 + 17], 2
	pinsrb	xmm0, byte ptr [rsi + r10 + 17], 3
	pinsrb	xmm0, byte ptr [rsi + r11 + 17], 4
	pinsrb	xmm0, byte ptr [rsi + rax + 17], 5
	mov	r13, rax
	pinsrb	xmm0, byte ptr [rsi + rcx + 17], 6
	pinsrb	xmm0, byte ptr [rsi + rdi + 17], 7
	pinsrb	xmm0, byte ptr [rsi + r8 + 17], 8
	pinsrb	xmm0, byte ptr [rsi + r9 + 17], 9
	pinsrb	xmm0, byte ptr [rsi + rbx + 17], 10
	pinsrb	xmm0, byte ptr [rsi + r14 + 17], 11
	pinsrb	xmm0, byte ptr [rsi + r15 + 17], 12
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 17], 13
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 17], 14
	por	xmm12, xmmword ptr [rsp + 160]  # 16-byte Folded Reload
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + r12 + 27]
	movd	xmm9, edx
	movdqa	xmm13, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm4, xmm13
	pand	xmm4, xmmword ptr [rip + .LCPI1_15]
	pcmpeqb	xmm14, xmm13
	psllw	xmm14, 7
	pand	xmm14, xmmword ptr [rip + .LCPI1_6]
	por	xmm14, xmm4
	movzx	edx, byte ptr [rsi + r12 + 28]
	movd	xmm4, edx
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r8 + 17], 15
	por	xmm14, xmm12
	pcmpeqb	xmm0, xmm13
	movdqa	xmm13, xmm0
	movdqa	xmm12, xmmword ptr [rip + .LCPI1_10] # xmm12 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm13, xmm12
	psubb	xmm13, xmm0
	movdqa	xmmword ptr [rsp + 160], xmm13  # 16-byte Spill
	movzx	edx, byte ptr [rsi + r12 + 29]
	movd	xmm13, edx
	pinsrb	xmm15, byte ptr [rsi + r8 + 16], 15
	movdqa	xmm0, xmmword ptr [rsp + 176]   # 16-byte Reload
	pcmpeqb	xmm15, xmm0
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r12 + 18], 1
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 18], 2
	pinsrb	xmm5, byte ptr [rsi + r10 + 18], 3
	pinsrb	xmm5, byte ptr [rsi + r11 + 18], 4
	pinsrb	xmm5, byte ptr [rsi + r13 + 18], 5
	pinsrb	xmm5, byte ptr [rsi + rcx + 18], 6
	pinsrb	xmm5, byte ptr [rsi + rdi + 18], 7
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 18], 8
	pinsrb	xmm5, byte ptr [rsi + r9 + 18], 9
	pinsrb	xmm5, byte ptr [rsi + rbx + 18], 10
	pinsrb	xmm5, byte ptr [rsi + r14 + 18], 11
	pinsrb	xmm5, byte ptr [rsi + r15 + 18], 12
	pinsrb	xmm5, byte ptr [rsi + rax + 18], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 18], 14
	pand	xmm15, xmm12
	pinsrb	xmm5, byte ptr [rsi + r8 + 18], 15
	pcmpeqb	xmm5, xmm0
	pand	xmm5, xmmword ptr [rip + .LCPI1_11]
	por	xmm5, xmm15
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 30]
	movd	xmm12, edx
	pinsrb	xmm7, byte ptr [rsi + r12 + 19], 1
	pinsrb	xmm6, byte ptr [rsi + r12 + 20], 1
	pinsrb	xmm2, byte ptr [rsi + r12 + 21], 1
	pinsrb	xmm3, byte ptr [rsi + r12 + 22], 1
	pinsrb	xmm8, byte ptr [rsi + r12 + 23], 1
	pinsrb	xmm10, byte ptr [rsi + r12 + 24], 1
	pinsrb	xmm1, byte ptr [rsi + r12 + 25], 1
	pinsrb	xmm11, byte ptr [rsi + r12 + 26], 1
	pinsrb	xmm9, byte ptr [rsi + r12 + 27], 1
	pinsrb	xmm4, byte ptr [rsi + r12 + 28], 1
	pinsrb	xmm13, byte ptr [rsi + r12 + 29], 1
	pinsrb	xmm12, byte ptr [rsi + r12 + 30], 1
	movzx	edx, byte ptr [rsi + rax + 31]
	movd	xmm0, edx
	pinsrb	xmm0, byte ptr [rsi + r12 + 31], 1
	mov	rdx, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdx + 19], 2
	pinsrb	xmm6, byte ptr [rsi + rdx + 20], 2
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 2
	pinsrb	xmm3, byte ptr [rsi + rdx + 22], 2
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 2
	pinsrb	xmm10, byte ptr [rsi + rdx + 24], 2
	pinsrb	xmm1, byte ptr [rsi + rdx + 25], 2
	pinsrb	xmm11, byte ptr [rsi + rdx + 26], 2
	pinsrb	xmm9, byte ptr [rsi + rdx + 27], 2
	pinsrb	xmm4, byte ptr [rsi + rdx + 28], 2
	pinsrb	xmm13, byte ptr [rsi + rdx + 29], 2
	pinsrb	xmm12, byte ptr [rsi + rdx + 30], 2
	pinsrb	xmm0, byte ptr [rsi + rdx + 31], 2
	pinsrb	xmm7, byte ptr [rsi + r10 + 19], 3
	pinsrb	xmm7, byte ptr [rsi + r11 + 19], 4
	pinsrb	xmm7, byte ptr [rsi + r13 + 19], 5
	pinsrb	xmm7, byte ptr [rsi + rcx + 19], 6
	pinsrb	xmm7, byte ptr [rsi + rdi + 19], 7
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + r12 + 19], 8
	pinsrb	xmm7, byte ptr [rsi + r9 + 19], 9
	pinsrb	xmm7, byte ptr [rsi + rbx + 19], 10
	pinsrb	xmm7, byte ptr [rsi + r14 + 19], 11
	pinsrb	xmm7, byte ptr [rsi + r15 + 19], 12
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdx + 19], 13
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 19], 14
	pinsrb	xmm7, byte ptr [rsi + r8 + 19], 15
	pinsrb	xmm6, byte ptr [rsi + r10 + 20], 3
	pinsrb	xmm6, byte ptr [rsi + r11 + 20], 4
	pinsrb	xmm6, byte ptr [rsi + r13 + 20], 5
	pinsrb	xmm6, byte ptr [rsi + rcx + 20], 6
	pinsrb	xmm6, byte ptr [rsi + rdi + 20], 7
	pinsrb	xmm6, byte ptr [rsi + r12 + 20], 8
	pinsrb	xmm6, byte ptr [rsi + r9 + 20], 9
	pinsrb	xmm6, byte ptr [rsi + rbx + 20], 10
	pinsrb	xmm6, byte ptr [rsi + r14 + 20], 11
	pinsrb	xmm6, byte ptr [rsi + r15 + 20], 12
	pinsrb	xmm6, byte ptr [rsi + rdx + 20], 13
	pinsrb	xmm6, byte ptr [rsi + rax + 20], 14
	por	xmm5, xmmword ptr [rsp + 160]   # 16-byte Folded Reload
	pinsrb	xmm6, byte ptr [rsi + r8 + 20], 15
	movdqa	xmm15, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm7, xmm15
	pand	xmm7, xmmword ptr [rip + .LCPI1_12]
	pcmpeqb	xmm6, xmm15
	pand	xmm6, xmmword ptr [rip + .LCPI1_13]
	por	xmm6, xmm7
	pinsrb	xmm2, byte ptr [rsi + r10 + 21], 3
	pinsrb	xmm2, byte ptr [rsi + r11 + 21], 4
	pinsrb	xmm2, byte ptr [rsi + r13 + 21], 5
	pinsrb	xmm2, byte ptr [rsi + rcx + 21], 6
	pinsrb	xmm2, byte ptr [rsi + rdi + 21], 7
	pinsrb	xmm2, byte ptr [rsi + r12 + 21], 8
	pinsrb	xmm2, byte ptr [rsi + r9 + 21], 9
	pinsrb	xmm2, byte ptr [rsi + rbx + 21], 10
	pinsrb	xmm2, byte ptr [rsi + r14 + 21], 11
	pinsrb	xmm2, byte ptr [rsi + r15 + 21], 12
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 13
	pinsrb	xmm2, byte ptr [rsi + rax + 21], 14
	pinsrb	xmm2, byte ptr [rsi + r8 + 21], 15
	pcmpeqb	xmm2, xmm15
	movdqa	xmm7, xmmword ptr [rip + .LCPI1_14] # xmm7 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm2, xmm7
	por	xmm2, xmm6
	por	xmm2, xmm5
	pinsrb	xmm3, byte ptr [rsi + r10 + 22], 3
	pinsrb	xmm3, byte ptr [rsi + r11 + 22], 4
	pinsrb	xmm3, byte ptr [rsi + r13 + 22], 5
	pinsrb	xmm3, byte ptr [rsi + rcx + 22], 6
	pinsrb	xmm3, byte ptr [rsi + rdi + 22], 7
	pinsrb	xmm3, byte ptr [rsi + r12 + 22], 8
	pinsrb	xmm3, byte ptr [rsi + r9 + 22], 9
	pinsrb	xmm3, byte ptr [rsi + rbx + 22], 10
	pinsrb	xmm3, byte ptr [rsi + r14 + 22], 11
	pinsrb	xmm3, byte ptr [rsi + r15 + 22], 12
	pinsrb	xmm3, byte ptr [rsi + rdx + 22], 13
	pinsrb	xmm3, byte ptr [rsi + rax + 22], 14
	pinsrb	xmm3, byte ptr [rsi + r8 + 22], 15
	pinsrb	xmm8, byte ptr [rsi + r10 + 23], 3
	pinsrb	xmm8, byte ptr [rsi + r11 + 23], 4
	pinsrb	xmm8, byte ptr [rsi + r13 + 23], 5
	pinsrb	xmm8, byte ptr [rsi + rcx + 23], 6
	pinsrb	xmm8, byte ptr [rsi + rdi + 23], 7
	pinsrb	xmm8, byte ptr [rsi + r12 + 23], 8
	pinsrb	xmm8, byte ptr [rsi + r9 + 23], 9
	pinsrb	xmm8, byte ptr [rsi + rbx + 23], 10
	pinsrb	xmm8, byte ptr [rsi + r14 + 23], 11
	pinsrb	xmm8, byte ptr [rsi + r15 + 23], 12
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 13
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 14
	pinsrb	xmm8, byte ptr [rsi + r8 + 23], 15
	pcmpeqb	xmm3, xmm15
	movdqa	xmm5, xmmword ptr [rip + .LCPI1_15] # xmm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm5
	pcmpeqb	xmm8, xmm15
	psllw	xmm8, 7
	movdqa	xmm6, xmmword ptr [rip + .LCPI1_6] # xmm6 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm8, xmm6
	por	xmm8, xmm3
	pinsrb	xmm1, byte ptr [rsi + r10 + 25], 3
	pinsrb	xmm1, byte ptr [rsi + r11 + 25], 4
	pinsrb	xmm1, byte ptr [rsi + r13 + 25], 5
	pinsrb	xmm1, byte ptr [rsi + rcx + 25], 6
	pinsrb	xmm1, byte ptr [rsi + rdi + 25], 7
	pinsrb	xmm1, byte ptr [rsi + r12 + 25], 8
	pinsrb	xmm1, byte ptr [rsi + r9 + 25], 9
	pinsrb	xmm1, byte ptr [rsi + rbx + 25], 10
	pinsrb	xmm1, byte ptr [rsi + r14 + 25], 11
	pinsrb	xmm1, byte ptr [rsi + r15 + 25], 12
	pinsrb	xmm1, byte ptr [rsi + rdx + 25], 13
	pinsrb	xmm1, byte ptr [rsi + rax + 25], 14
	pinsrb	xmm1, byte ptr [rsi + r8 + 25], 15
	por	xmm8, xmm2
	pcmpeqb	xmm1, xmm15
	movdqa	xmm2, xmm1
	movdqa	xmm3, xmmword ptr [rip + .LCPI1_10] # xmm3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm2, xmm3
	psubb	xmm2, xmm1
	pinsrb	xmm10, byte ptr [rsi + r10 + 24], 3
	pinsrb	xmm10, byte ptr [rsi + r11 + 24], 4
	pinsrb	xmm10, byte ptr [rsi + r13 + 24], 5
	pinsrb	xmm10, byte ptr [rsi + rcx + 24], 6
	pinsrb	xmm10, byte ptr [rsi + rdi + 24], 7
	pinsrb	xmm10, byte ptr [rsi + r12 + 24], 8
	pinsrb	xmm10, byte ptr [rsi + r9 + 24], 9
	pinsrb	xmm10, byte ptr [rsi + rbx + 24], 10
	pinsrb	xmm10, byte ptr [rsi + r14 + 24], 11
	pinsrb	xmm10, byte ptr [rsi + r15 + 24], 12
	pinsrb	xmm10, byte ptr [rsi + rdx + 24], 13
	pinsrb	xmm10, byte ptr [rsi + rax + 24], 14
	pinsrb	xmm10, byte ptr [rsi + r8 + 24], 15
	pcmpeqb	xmm10, xmm15
	pand	xmm10, xmm3
	pinsrb	xmm11, byte ptr [rsi + r10 + 26], 3
	pinsrb	xmm11, byte ptr [rsi + r11 + 26], 4
	pinsrb	xmm11, byte ptr [rsi + r13 + 26], 5
	pinsrb	xmm11, byte ptr [rsi + rcx + 26], 6
	pinsrb	xmm11, byte ptr [rsi + rdi + 26], 7
	pinsrb	xmm11, byte ptr [rsi + r12 + 26], 8
	pinsrb	xmm11, byte ptr [rsi + r9 + 26], 9
	pinsrb	xmm11, byte ptr [rsi + rbx + 26], 10
	pinsrb	xmm11, byte ptr [rsi + r14 + 26], 11
	pinsrb	xmm11, byte ptr [rsi + r15 + 26], 12
	pinsrb	xmm11, byte ptr [rsi + rdx + 26], 13
	pinsrb	xmm11, byte ptr [rsi + rax + 26], 14
	pinsrb	xmm11, byte ptr [rsi + r8 + 26], 15
	pcmpeqb	xmm11, xmm15
	pand	xmm11, xmmword ptr [rip + .LCPI1_11]
	por	xmm11, xmm10
	por	xmm11, xmm2
	pinsrb	xmm9, byte ptr [rsi + r10 + 27], 3
	pinsrb	xmm9, byte ptr [rsi + r11 + 27], 4
	pinsrb	xmm9, byte ptr [rsi + r13 + 27], 5
	pinsrb	xmm9, byte ptr [rsi + rcx + 27], 6
	pinsrb	xmm9, byte ptr [rsi + rdi + 27], 7
	pinsrb	xmm9, byte ptr [rsi + r12 + 27], 8
	pinsrb	xmm9, byte ptr [rsi + r9 + 27], 9
	pinsrb	xmm9, byte ptr [rsi + rbx + 27], 10
	pinsrb	xmm9, byte ptr [rsi + r14 + 27], 11
	pinsrb	xmm9, byte ptr [rsi + r15 + 27], 12
	pinsrb	xmm9, byte ptr [rsi + rdx + 27], 13
	pinsrb	xmm9, byte ptr [rsi + rax + 27], 14
	pinsrb	xmm9, byte ptr [rsi + r8 + 27], 15
	pinsrb	xmm4, byte ptr [rsi + r10 + 28], 3
	pinsrb	xmm4, byte ptr [rsi + r11 + 28], 4
	pinsrb	xmm4, byte ptr [rsi + r13 + 28], 5
	pinsrb	xmm4, byte ptr [rsi + rcx + 28], 6
	pinsrb	xmm4, byte ptr [rsi + rdi + 28], 7
	pinsrb	xmm4, byte ptr [rsi + r12 + 28], 8
	pinsrb	xmm4, byte ptr [rsi + r9 + 28], 9
	pinsrb	xmm4, byte ptr [rsi + rbx + 28], 10
	pinsrb	xmm4, byte ptr [rsi + r14 + 28], 11
	pinsrb	xmm4, byte ptr [rsi + r15 + 28], 12
	pinsrb	xmm4, byte ptr [rsi + rdx + 28], 13
	pinsrb	xmm4, byte ptr [rsi + rax + 28], 14
	pinsrb	xmm4, byte ptr [rsi + r8 + 28], 15
	pinsrb	xmm13, byte ptr [rsi + r10 + 29], 3
	pinsrb	xmm13, byte ptr [rsi + r11 + 29], 4
	pinsrb	xmm13, byte ptr [rsi + r13 + 29], 5
	pinsrb	xmm13, byte ptr [rsi + rcx + 29], 6
	pinsrb	xmm13, byte ptr [rsi + rdi + 29], 7
	pinsrb	xmm13, byte ptr [rsi + r12 + 29], 8
	pinsrb	xmm13, byte ptr [rsi + r9 + 29], 9
	pinsrb	xmm13, byte ptr [rsi + rbx + 29], 10
	pinsrb	xmm13, byte ptr [rsi + r14 + 29], 11
	pinsrb	xmm13, byte ptr [rsi + r15 + 29], 12
	pinsrb	xmm13, byte ptr [rsi + rdx + 29], 13
	pinsrb	xmm13, byte ptr [rsi + rax + 29], 14
	movdqa	xmm1, xmm15
	pcmpeqb	xmm9, xmm15
	pand	xmm9, xmmword ptr [rip + .LCPI1_12]
	pcmpeqb	xmm4, xmm15
	pand	xmm4, xmmword ptr [rip + .LCPI1_13]
	por	xmm4, xmm9
	pinsrb	xmm13, byte ptr [rsi + r8 + 29], 15
	pcmpeqb	xmm13, xmm15
	pand	xmm13, xmm7
	por	xmm13, xmm4
	pinsrb	xmm12, byte ptr [rsi + r10 + 30], 3
	pinsrb	xmm0, byte ptr [rsi + r10 + 31], 3
	pinsrb	xmm12, byte ptr [rsi + r11 + 30], 4
	pinsrb	xmm0, byte ptr [rsi + r11 + 31], 4
	pinsrb	xmm12, byte ptr [rsi + r13 + 30], 5
	pinsrb	xmm0, byte ptr [rsi + r13 + 31], 5
	pinsrb	xmm12, byte ptr [rsi + rcx + 30], 6
	pinsrb	xmm0, byte ptr [rsi + rcx + 31], 6
	pinsrb	xmm12, byte ptr [rsi + rdi + 30], 7
	pinsrb	xmm0, byte ptr [rsi + rdi + 31], 7
	pinsrb	xmm12, byte ptr [rsi + r12 + 30], 8
	pinsrb	xmm0, byte ptr [rsi + r12 + 31], 8
	pinsrb	xmm12, byte ptr [rsi + r9 + 30], 9
	pinsrb	xmm0, byte ptr [rsi + r9 + 31], 9
	pinsrb	xmm12, byte ptr [rsi + rbx + 30], 10
	pinsrb	xmm0, byte ptr [rsi + rbx + 31], 10
	pinsrb	xmm12, byte ptr [rsi + r14 + 30], 11
	pinsrb	xmm0, byte ptr [rsi + r14 + 31], 11
	pinsrb	xmm12, byte ptr [rsi + r15 + 30], 12
	pinsrb	xmm0, byte ptr [rsi + r15 + 31], 12
	pinsrb	xmm12, byte ptr [rsi + rdx + 30], 13
	pinsrb	xmm0, byte ptr [rsi + rdx + 31], 13
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rax + 30], 14
	pinsrb	xmm0, byte ptr [rsi + rax + 31], 14
	pinsrb	xmm12, byte ptr [rsi + r8 + 30], 15
	pinsrb	xmm0, byte ptr [rsi + r8 + 31], 15
	por	xmm13, xmm11
	pcmpeqb	xmm12, xmm15
	pand	xmm12, xmm5
	pcmpeqb	xmm0, xmm15
	psllw	xmm0, 7
	pand	xmm0, xmm6
	por	xmm0, xmm12
	por	xmm0, xmm13
	movdqa	xmm1, xmm8
	punpcklbw	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	movdqa	xmm4, xmmword ptr [rsp + 208]   # 16-byte Reload
	movdqa	xmm2, xmm4
	punpcklbw	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0],xmm2[1],xmm14[1],xmm2[2],xmm14[2],xmm2[3],xmm14[3],xmm2[4],xmm14[4],xmm2[5],xmm14[5],xmm2[6],xmm14[6],xmm2[7],xmm14[7]
	movdqa	xmm3, xmm2
	punpcklwd	xmm3, xmm1              # xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1],xmm3[2],xmm1[2],xmm3[3],xmm1[3]
	punpckhwd	xmm2, xmm1              # xmm2 = xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
	punpckhbw	xmm8, xmm0              # xmm8 = xmm8[8],xmm0[8],xmm8[9],xmm0[9],xmm8[10],xmm0[10],xmm8[11],xmm0[11],xmm8[12],xmm0[12],xmm8[13],xmm0[13],xmm8[14],xmm0[14],xmm8[15],xmm0[15]
	punpckhbw	xmm4, xmm14             # xmm4 = xmm4[8],xmm14[8],xmm4[9],xmm14[9],xmm4[10],xmm14[10],xmm4[11],xmm14[11],xmm4[12],xmm14[12],xmm4[13],xmm14[13],xmm4[14],xmm14[14],xmm4[15],xmm14[15]
	movdqa	xmm0, xmm4
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm4, xmm8              # xmm4 = xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx + 48], xmm4
	movdqu	xmmword ptr [r14 + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm2
	movdqu	xmmword ptr [r14 + 4*rcx], xmm3
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 248]      # 8-byte Folded Reload
	jne	.LBB1_67
# %bb.68:
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 248]      # 8-byte Folded Reload
	mov	r11b, byte ptr [rsp + 8]        # 1-byte Reload
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	jne	.LBB1_69
	jmp	.LBB1_72
.LBB1_110:
	and	r11, -8
	mov	rax, r11
	shl	rax, 6
	add	rax, rsi
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	qword ptr [rsp + 16], r11       # 8-byte Spill
	lea	rax, [r14 + 4*r11]
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	dword ptr [rsp + 56], r13d      # 4-byte Spill
	movd	xmm0, r13d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm0, xmm0, 0                   # xmm0 = xmm0[0,0,0,0]
	xor	r15d, r15d
	movdqa	xmm15, xmmword ptr [rip + .LCPI1_8] # xmm15 = <1,1,1,1,1,1,1,1,u,u,u,u,u,u,u,u>
	movdqa	xmm9, xmmword ptr [rip + .LCPI1_1] # xmm9 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI1_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI1_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI1_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI1_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI1_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_111:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	shl	r15, 6
	mov	r9, r15
	mov	r12, r15
	mov	r13, r15
	mov	rcx, r15
	mov	rdi, r15
	mov	rbx, r15
	movzx	r14d, word ptr [rsi + r15]
	movzx	eax, word ptr [rsi + r15 + 2]
	movzx	edx, word ptr [rsi + r15 + 4]
	movzx	r11d, word ptr [rsi + r15 + 6]
	movzx	r10d, word ptr [rsi + r15 + 8]
	mov	r8, r15
	or	r8, 64
	or	r9, 128
	or	r12, 192
	or	r13, 256
	or	rcx, 320
	or	rdi, 384
	or	rbx, 448
	movd	xmm4, r14d
	pinsrw	xmm4, word ptr [rsi + r8], 1
	pinsrw	xmm4, word ptr [rsi + r9], 2
	pinsrw	xmm4, word ptr [rsi + r12], 3
	pinsrw	xmm4, word ptr [rsi + r13], 4
	pinsrw	xmm4, word ptr [rsi + rcx], 5
	pinsrw	xmm4, word ptr [rsi + rdi], 6
	pinsrw	xmm4, word ptr [rsi + rbx], 7
	movzx	r14d, word ptr [rsi + r15 + 10]
	movd	xmm6, eax
	pinsrw	xmm6, word ptr [rsi + r8 + 2], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 2], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 2], 3
	movzx	eax, word ptr [rsi + r15 + 12]
	mov	dword ptr [rsp + 32], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + r13 + 2], 4
	movd	xmm2, edx
	movzx	edx, word ptr [rsi + r15 + 14]
	pinsrw	xmm6, word ptr [rsi + rcx + 2], 5
	movd	xmm5, r11d
	movzx	eax, word ptr [rsi + r15 + 16]
	mov	dword ptr [rsp + 24], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + rdi + 2], 6
	movd	xmm3, r10d
	movzx	eax, word ptr [rsi + r15 + 18]
	mov	dword ptr [rsp + 48], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + rbx + 2], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	movdqa	xmm1, xmm6
	pand	xmm1, xmm15
	psubb	xmm1, xmm6
	movd	xmm6, r14d
	movzx	r11d, word ptr [rsi + r15 + 20]
	pcmpeqw	xmm4, xmm0
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	pinsrw	xmm2, word ptr [rsi + r8 + 4], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 4], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 4], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 4], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 4], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 4], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 4], 7
	pinsrw	xmm5, word ptr [rsi + r8 + 6], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 6], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 6], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 6], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 6], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 6], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 6], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 8], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 8], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 8], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 8], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 8], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 8], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 8], 7
	por	xmm1, xmm4
	movd	xmm7, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rsi + r15 + 22]
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 2
	pand	xmm2, xmm9
	por	xmm2, xmm1
	movd	xmm4, edx
	movzx	edx, word ptr [rsi + r15 + 24]
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm5
	movd	xmm1, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rsi + r15 + 26]
	pinsrw	xmm6, word ptr [rsi + r8 + 10], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 10], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 10], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 10], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 10], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 10], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 10], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 12], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 12], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 12], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 12], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 12], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 12], 6
	pinsrw	xmm7, word ptr [rsi + rbx + 12], 7
	por	xmm3, xmm2
	movd	xmm8, dword ptr [rsp + 48]      # 4-byte Folded Reload
                                        # xmm8 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rsi + r15 + 28]
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm5, r11d
	movzx	r11d, word ptr [rsi + r15 + 30]
	pinsrw	xmm4, word ptr [rsi + r8 + 14], 1
	pinsrw	xmm4, word ptr [rsi + r9 + 14], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 14], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 14], 4
	pinsrw	xmm4, word ptr [rsi + rcx + 14], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 14], 6
	pinsrw	xmm4, word ptr [rsi + rbx + 14], 7
	pinsrw	xmm8, word ptr [rsi + r8 + 18], 1
	pinsrw	xmm8, word ptr [rsi + r9 + 18], 2
	pinsrw	xmm8, word ptr [rsi + r12 + 18], 3
	pinsrw	xmm8, word ptr [rsi + r13 + 18], 4
	pinsrw	xmm8, word ptr [rsi + rcx + 18], 5
	pinsrw	xmm8, word ptr [rsi + rdi + 18], 6
	pinsrw	xmm8, word ptr [rsi + rbx + 18], 7
	pcmpeqw	xmm4, xmm0
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm7
	movd	xmm2, eax
	movzx	eax, word ptr [rsi + r15 + 32]
	por	xmm4, xmm3
	pcmpeqw	xmm8, xmm0
	packsswb	xmm8, xmm8
	movdqa	xmm7, xmm8
	pand	xmm7, xmm15
	psubb	xmm7, xmm8
	movd	xmm3, edx
	movzx	edx, word ptr [rsi + r15 + 34]
	mov	dword ptr [rsp + 32], edx       # 4-byte Spill
	pinsrw	xmm1, word ptr [rsi + r8 + 16], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 16], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 16], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 16], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 16], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 16], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 16], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	por	xmm7, xmm1
	movd	xmm6, r10d
	movzx	r10d, word ptr [rsi + r15 + 36]
	pinsrw	xmm5, word ptr [rsi + r8 + 20], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 20], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 20], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 20], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 20], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 20], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 20], 7
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm9
	por	xmm5, xmm7
	movd	xmm7, r14d
	movzx	edx, word ptr [rsi + r15 + 38]
	mov	dword ptr [rsp + 24], edx       # 4-byte Spill
	pinsrw	xmm2, word ptr [rsi + r8 + 22], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 22], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 22], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 22], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 22], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 22], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 22], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 24], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 24], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 24], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 24], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 24], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 24], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 24], 7
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm2
	movd	xmm2, r11d
	movzx	r14d, word ptr [rsi + r15 + 40]
	por	xmm3, xmm5
	movd	xmm5, eax
	movzx	r11d, word ptr [rsi + r15 + 42]
	pinsrw	xmm6, word ptr [rsi + r8 + 26], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 26], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 26], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 26], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 26], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 26], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 26], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 28], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 28], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 28], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 28], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 28], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 28], 6
	pinsrw	xmm7, word ptr [rsi + rbx + 28], 7
	pinsrw	xmm2, word ptr [rsi + r8 + 30], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 30], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 30], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 30], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 30], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 30], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 30], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm1, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	edx, word ptr [rsi + r15 + 44]
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	psllw	xmm2, 7
	pand	xmm2, xmm14
	por	xmm2, xmm7
	movd	xmm6, r10d
	movzx	eax, word ptr [rsi + r15 + 46]
	pinsrw	xmm5, word ptr [rsi + r8 + 32], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 32], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 32], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 32], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 32], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 32], 6
	pinsrw	xmm1, word ptr [rsi + r8 + 34], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 34], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 34], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 34], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 34], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 34], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 34], 7
	por	xmm2, xmm3
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm7, xmm1
	pand	xmm7, xmm15
	psubb	xmm7, xmm1
	movd	xmm3, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rsi + r15 + 48]
	pinsrw	xmm5, word ptr [rsi + rbx + 32], 7
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	pinsrw	xmm6, word ptr [rsi + r8 + 36], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 36], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 36], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 36], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 36], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 36], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 36], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 38], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 38], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 38], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 38], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 38], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 38], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 38], 7
	por	xmm7, xmm5
	movd	xmm5, r14d
	pinsrw	xmm5, word ptr [rsi + r8 + 40], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 40], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 40], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 40], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 40], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 40], 6
	movzx	r14d, word ptr [rsi + r15 + 50]
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 2
	pand	xmm6, xmm9
	por	xmm6, xmm7
	movd	xmm1, r11d
	movzx	r11d, word ptr [rsi + r15 + 52]
	pinsrw	xmm5, word ptr [rsi + rbx + 40], 7
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 3
	pand	xmm3, xmm10
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm3
	movd	xmm7, edx
	movzx	edx, word ptr [rsi + r15 + 54]
	pinsrw	xmm1, word ptr [rsi + r8 + 42], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 42], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 42], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 42], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 42], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 42], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 42], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 44], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 44], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 44], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 44], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 44], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 44], 6
	por	xmm5, xmm6
	movd	xmm3, eax
	movzx	eax, word ptr [rsi + r15 + 56]
	pinsrw	xmm7, word ptr [rsi + rbx + 44], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 5
	pand	xmm1, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm1
	movd	xmm6, r10d
	movzx	r10d, word ptr [rsi + r15 + 58]
	pinsrw	xmm3, word ptr [rsi + r8 + 46], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 46], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 46], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 46], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 46], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 46], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 46], 7
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm7
	movd	xmm1, r14d
	movzx	r14d, word ptr [rsi + r15 + 60]
	movzx	r15d, word ptr [rsi + r15 + 62]
	pinsrw	xmm1, word ptr [rsi + r8 + 50], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 50], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 50], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 50], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 50], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 50], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 50], 7
	por	xmm3, xmm5
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm5, xmm1
	pand	xmm5, xmm15
	psubb	xmm5, xmm1
	movd	xmm1, r11d
	pinsrw	xmm6, word ptr [rsi + r8 + 48], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 48], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 48], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 48], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 48], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 48], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 48], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pinsrw	xmm1, word ptr [rsi + r8 + 52], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 52], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 52], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 52], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 52], 5
	pand	xmm6, xmm15
	pinsrw	xmm1, word ptr [rsi + rdi + 52], 6
	por	xmm5, xmm6
	movd	xmm6, edx
	pinsrw	xmm1, word ptr [rsi + rbx + 52], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 2
	pand	xmm1, xmm9
	por	xmm1, xmm5
	movd	xmm5, eax
	pinsrw	xmm6, word ptr [rsi + r8 + 54], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 54], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 54], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 54], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 54], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 54], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 54], 7
	pinsrw	xmm5, word ptr [rsi + r8 + 56], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 56], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 56], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 56], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 56], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 56], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 56], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 3
	pand	xmm6, xmm10
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm6
	movd	xmm6, r10d
	pinsrw	xmm6, word ptr [rsi + r8 + 58], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 58], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 58], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 58], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 58], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 58], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 58], 7
	por	xmm5, xmm1
	movd	xmm1, r14d
	pinsrw	xmm1, word ptr [rsi + r8 + 60], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 60], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 60], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 60], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 60], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 60], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 60], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 6
	pand	xmm1, xmm13
	por	xmm1, xmm6
	movd	xmm6, r15d
	pinsrw	xmm6, word ptr [rsi + r8 + 62], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 62], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 62], 3
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrw	xmm6, word ptr [rsi + r13 + 62], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 62], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 62], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 62], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	psllw	xmm6, 7
	pand	xmm6, xmm14
	por	xmm6, xmm1
	por	xmm6, xmm5
	movdqa	xmm1, xmm4
	punpcklqdq	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0]
	movdqa	xmm5, xmm3
	punpcklqdq	xmm5, xmm6              # xmm5 = xmm5[0],xmm6[0]
	movdqa	xmm7, xmmword ptr [rip + .LCPI1_9] # xmm7 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm5, xmm7
	pshufb	xmm1, xmm7
	punpcklwd	xmm1, xmm5              # xmm1 = xmm1[0],xmm5[0],xmm1[1],xmm5[1],xmm1[2],xmm5[2],xmm1[3],xmm5[3]
	punpcklbw	xmm3, xmm6              # xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1],xmm3[2],xmm6[2],xmm3[3],xmm6[3],xmm3[4],xmm6[4],xmm3[5],xmm6[5],xmm3[6],xmm6[6],xmm3[7],xmm6[7]
	punpcklbw	xmm4, xmm2              # xmm4 = xmm4[0],xmm2[0],xmm4[1],xmm2[1],xmm4[2],xmm2[2],xmm4[3],xmm2[3],xmm4[4],xmm2[4],xmm4[5],xmm2[5],xmm4[6],xmm2[6],xmm4[7],xmm2[7]
	punpcklwd	xmm4, xmm3              # xmm4 = xmm4[0],xmm3[0],xmm4[1],xmm3[1],xmm4[2],xmm3[2],xmm4[3],xmm3[3]
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx], xmm4
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm1
	add	rcx, 8
	mov	r15, rcx
	cmp	rcx, qword ptr [rsp + 16]       # 8-byte Folded Reload
	jne	.LBB1_111
# %bb.112:
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	cmp	r11, qword ptr [rsp + 16]       # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r13d, dword ptr [rsp + 56]      # 4-byte Reload
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	jne	.LBB1_113
	jmp	.LBB1_116
.LBB1_133:
	and	r15, -8
	mov	rax, r15
	shl	rax, 6
	add	rax, rsi
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	qword ptr [rsp + 16], r15       # 8-byte Spill
	lea	rax, [r14 + 4*r15]
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	dword ptr [rsp + 56], r13d      # 4-byte Spill
	movd	xmm0, r13d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm0, xmm0, 0                   # xmm0 = xmm0[0,0,0,0]
	xor	r15d, r15d
	movdqa	xmm15, xmmword ptr [rip + .LCPI1_8] # xmm15 = <1,1,1,1,1,1,1,1,u,u,u,u,u,u,u,u>
	movdqa	xmm9, xmmword ptr [rip + .LCPI1_1] # xmm9 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI1_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI1_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI1_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI1_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI1_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB1_134:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	shl	r15, 6
	mov	r9, r15
	mov	r12, r15
	mov	r13, r15
	mov	rcx, r15
	mov	rdi, r15
	mov	rbx, r15
	movzx	r14d, word ptr [rsi + r15]
	movzx	eax, word ptr [rsi + r15 + 2]
	movzx	edx, word ptr [rsi + r15 + 4]
	movzx	r11d, word ptr [rsi + r15 + 6]
	movzx	r10d, word ptr [rsi + r15 + 8]
	mov	r8, r15
	or	r8, 64
	or	r9, 128
	or	r12, 192
	or	r13, 256
	or	rcx, 320
	or	rdi, 384
	or	rbx, 448
	movd	xmm4, r14d
	pinsrw	xmm4, word ptr [rsi + r8], 1
	pinsrw	xmm4, word ptr [rsi + r9], 2
	pinsrw	xmm4, word ptr [rsi + r12], 3
	pinsrw	xmm4, word ptr [rsi + r13], 4
	pinsrw	xmm4, word ptr [rsi + rcx], 5
	pinsrw	xmm4, word ptr [rsi + rdi], 6
	pinsrw	xmm4, word ptr [rsi + rbx], 7
	movzx	r14d, word ptr [rsi + r15 + 10]
	movd	xmm6, eax
	pinsrw	xmm6, word ptr [rsi + r8 + 2], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 2], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 2], 3
	movzx	eax, word ptr [rsi + r15 + 12]
	mov	dword ptr [rsp + 32], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + r13 + 2], 4
	movd	xmm2, edx
	movzx	edx, word ptr [rsi + r15 + 14]
	pinsrw	xmm6, word ptr [rsi + rcx + 2], 5
	movd	xmm5, r11d
	movzx	eax, word ptr [rsi + r15 + 16]
	mov	dword ptr [rsp + 24], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + rdi + 2], 6
	movd	xmm3, r10d
	movzx	eax, word ptr [rsi + r15 + 18]
	mov	dword ptr [rsp + 48], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + rbx + 2], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	movdqa	xmm1, xmm6
	pand	xmm1, xmm15
	psubb	xmm1, xmm6
	movd	xmm6, r14d
	movzx	r11d, word ptr [rsi + r15 + 20]
	pcmpeqw	xmm4, xmm0
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	pinsrw	xmm2, word ptr [rsi + r8 + 4], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 4], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 4], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 4], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 4], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 4], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 4], 7
	pinsrw	xmm5, word ptr [rsi + r8 + 6], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 6], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 6], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 6], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 6], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 6], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 6], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 8], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 8], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 8], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 8], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 8], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 8], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 8], 7
	por	xmm1, xmm4
	movd	xmm7, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rsi + r15 + 22]
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 2
	pand	xmm2, xmm9
	por	xmm2, xmm1
	movd	xmm4, edx
	movzx	edx, word ptr [rsi + r15 + 24]
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm5
	movd	xmm1, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rsi + r15 + 26]
	pinsrw	xmm6, word ptr [rsi + r8 + 10], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 10], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 10], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 10], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 10], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 10], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 10], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 12], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 12], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 12], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 12], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 12], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 12], 6
	pinsrw	xmm7, word ptr [rsi + rbx + 12], 7
	por	xmm3, xmm2
	movd	xmm8, dword ptr [rsp + 48]      # 4-byte Folded Reload
                                        # xmm8 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rsi + r15 + 28]
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm5, r11d
	movzx	r11d, word ptr [rsi + r15 + 30]
	pinsrw	xmm4, word ptr [rsi + r8 + 14], 1
	pinsrw	xmm4, word ptr [rsi + r9 + 14], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 14], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 14], 4
	pinsrw	xmm4, word ptr [rsi + rcx + 14], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 14], 6
	pinsrw	xmm4, word ptr [rsi + rbx + 14], 7
	pinsrw	xmm8, word ptr [rsi + r8 + 18], 1
	pinsrw	xmm8, word ptr [rsi + r9 + 18], 2
	pinsrw	xmm8, word ptr [rsi + r12 + 18], 3
	pinsrw	xmm8, word ptr [rsi + r13 + 18], 4
	pinsrw	xmm8, word ptr [rsi + rcx + 18], 5
	pinsrw	xmm8, word ptr [rsi + rdi + 18], 6
	pinsrw	xmm8, word ptr [rsi + rbx + 18], 7
	pcmpeqw	xmm4, xmm0
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm7
	movd	xmm2, eax
	movzx	eax, word ptr [rsi + r15 + 32]
	por	xmm4, xmm3
	pcmpeqw	xmm8, xmm0
	packsswb	xmm8, xmm8
	movdqa	xmm7, xmm8
	pand	xmm7, xmm15
	psubb	xmm7, xmm8
	movd	xmm3, edx
	movzx	edx, word ptr [rsi + r15 + 34]
	mov	dword ptr [rsp + 32], edx       # 4-byte Spill
	pinsrw	xmm1, word ptr [rsi + r8 + 16], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 16], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 16], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 16], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 16], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 16], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 16], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	por	xmm7, xmm1
	movd	xmm6, r10d
	movzx	r10d, word ptr [rsi + r15 + 36]
	pinsrw	xmm5, word ptr [rsi + r8 + 20], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 20], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 20], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 20], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 20], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 20], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 20], 7
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm9
	por	xmm5, xmm7
	movd	xmm7, r14d
	movzx	edx, word ptr [rsi + r15 + 38]
	mov	dword ptr [rsp + 24], edx       # 4-byte Spill
	pinsrw	xmm2, word ptr [rsi + r8 + 22], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 22], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 22], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 22], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 22], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 22], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 22], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 24], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 24], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 24], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 24], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 24], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 24], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 24], 7
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm2
	movd	xmm2, r11d
	movzx	r14d, word ptr [rsi + r15 + 40]
	por	xmm3, xmm5
	movd	xmm5, eax
	movzx	r11d, word ptr [rsi + r15 + 42]
	pinsrw	xmm6, word ptr [rsi + r8 + 26], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 26], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 26], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 26], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 26], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 26], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 26], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 28], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 28], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 28], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 28], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 28], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 28], 6
	pinsrw	xmm7, word ptr [rsi + rbx + 28], 7
	pinsrw	xmm2, word ptr [rsi + r8 + 30], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 30], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 30], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 30], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 30], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 30], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 30], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm1, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	edx, word ptr [rsi + r15 + 44]
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	psllw	xmm2, 7
	pand	xmm2, xmm14
	por	xmm2, xmm7
	movd	xmm6, r10d
	movzx	eax, word ptr [rsi + r15 + 46]
	pinsrw	xmm5, word ptr [rsi + r8 + 32], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 32], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 32], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 32], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 32], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 32], 6
	pinsrw	xmm1, word ptr [rsi + r8 + 34], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 34], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 34], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 34], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 34], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 34], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 34], 7
	por	xmm2, xmm3
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm7, xmm1
	pand	xmm7, xmm15
	psubb	xmm7, xmm1
	movd	xmm3, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rsi + r15 + 48]
	pinsrw	xmm5, word ptr [rsi + rbx + 32], 7
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	pinsrw	xmm6, word ptr [rsi + r8 + 36], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 36], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 36], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 36], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 36], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 36], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 36], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 38], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 38], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 38], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 38], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 38], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 38], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 38], 7
	por	xmm7, xmm5
	movd	xmm5, r14d
	pinsrw	xmm5, word ptr [rsi + r8 + 40], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 40], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 40], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 40], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 40], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 40], 6
	movzx	r14d, word ptr [rsi + r15 + 50]
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 2
	pand	xmm6, xmm9
	por	xmm6, xmm7
	movd	xmm1, r11d
	movzx	r11d, word ptr [rsi + r15 + 52]
	pinsrw	xmm5, word ptr [rsi + rbx + 40], 7
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 3
	pand	xmm3, xmm10
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm3
	movd	xmm7, edx
	movzx	edx, word ptr [rsi + r15 + 54]
	pinsrw	xmm1, word ptr [rsi + r8 + 42], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 42], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 42], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 42], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 42], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 42], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 42], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 44], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 44], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 44], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 44], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 44], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 44], 6
	por	xmm5, xmm6
	movd	xmm3, eax
	movzx	eax, word ptr [rsi + r15 + 56]
	pinsrw	xmm7, word ptr [rsi + rbx + 44], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 5
	pand	xmm1, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm1
	movd	xmm6, r10d
	movzx	r10d, word ptr [rsi + r15 + 58]
	pinsrw	xmm3, word ptr [rsi + r8 + 46], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 46], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 46], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 46], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 46], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 46], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 46], 7
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm7
	movd	xmm1, r14d
	movzx	r14d, word ptr [rsi + r15 + 60]
	movzx	r15d, word ptr [rsi + r15 + 62]
	pinsrw	xmm1, word ptr [rsi + r8 + 50], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 50], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 50], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 50], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 50], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 50], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 50], 7
	por	xmm3, xmm5
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm5, xmm1
	pand	xmm5, xmm15
	psubb	xmm5, xmm1
	movd	xmm1, r11d
	pinsrw	xmm6, word ptr [rsi + r8 + 48], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 48], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 48], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 48], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 48], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 48], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 48], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pinsrw	xmm1, word ptr [rsi + r8 + 52], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 52], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 52], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 52], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 52], 5
	pand	xmm6, xmm15
	pinsrw	xmm1, word ptr [rsi + rdi + 52], 6
	por	xmm5, xmm6
	movd	xmm6, edx
	pinsrw	xmm1, word ptr [rsi + rbx + 52], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 2
	pand	xmm1, xmm9
	por	xmm1, xmm5
	movd	xmm5, eax
	pinsrw	xmm6, word ptr [rsi + r8 + 54], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 54], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 54], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 54], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 54], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 54], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 54], 7
	pinsrw	xmm5, word ptr [rsi + r8 + 56], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 56], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 56], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 56], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 56], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 56], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 56], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 3
	pand	xmm6, xmm10
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm6
	movd	xmm6, r10d
	pinsrw	xmm6, word ptr [rsi + r8 + 58], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 58], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 58], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 58], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 58], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 58], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 58], 7
	por	xmm5, xmm1
	movd	xmm1, r14d
	pinsrw	xmm1, word ptr [rsi + r8 + 60], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 60], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 60], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 60], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 60], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 60], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 60], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 6
	pand	xmm1, xmm13
	por	xmm1, xmm6
	movd	xmm6, r15d
	pinsrw	xmm6, word ptr [rsi + r8 + 62], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 62], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 62], 3
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrw	xmm6, word ptr [rsi + r13 + 62], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 62], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 62], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 62], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	psllw	xmm6, 7
	pand	xmm6, xmm14
	por	xmm6, xmm1
	por	xmm6, xmm5
	movdqa	xmm1, xmm4
	punpcklqdq	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0]
	movdqa	xmm5, xmm3
	punpcklqdq	xmm5, xmm6              # xmm5 = xmm5[0],xmm6[0]
	movdqa	xmm7, xmmword ptr [rip + .LCPI1_9] # xmm7 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm5, xmm7
	pshufb	xmm1, xmm7
	punpcklwd	xmm1, xmm5              # xmm1 = xmm1[0],xmm5[0],xmm1[1],xmm5[1],xmm1[2],xmm5[2],xmm1[3],xmm5[3]
	punpcklbw	xmm3, xmm6              # xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1],xmm3[2],xmm6[2],xmm3[3],xmm6[3],xmm3[4],xmm6[4],xmm3[5],xmm6[5],xmm3[6],xmm6[6],xmm3[7],xmm6[7]
	punpcklbw	xmm4, xmm2              # xmm4 = xmm4[0],xmm2[0],xmm4[1],xmm2[1],xmm4[2],xmm2[2],xmm4[3],xmm2[3],xmm4[4],xmm2[4],xmm4[5],xmm2[5],xmm4[6],xmm2[6],xmm4[7],xmm2[7]
	punpcklwd	xmm4, xmm3              # xmm4 = xmm4[0],xmm3[0],xmm4[1],xmm3[1],xmm4[2],xmm3[2],xmm4[3],xmm3[3]
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx], xmm4
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm1
	add	rcx, 8
	mov	r15, rcx
	cmp	rcx, qword ptr [rsp + 16]       # 8-byte Folded Reload
	jne	.LBB1_134
# %bb.135:
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 16]       # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r13d, dword ptr [rsp + 56]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	jne	.LBB1_136
	jmp	.LBB1_139
.LBB1_184:
	mov	r8, r11
	and	r8, -4
	mov	rbx, r8
	shl	rbx, 7
	add	rbx, rsi
	lea	r15, [r14 + 4*r8]
	movaps	xmm1, xmm0
	shufps	xmm1, xmm0, 0                   # xmm1 = xmm1[0,0],xmm0[0,0]
	add	rsi, 508
	xor	ecx, ecx
	movdqa	xmm15, xmmword ptr [rip + .LCPI1_0] # xmm15 = <1,1,1,1,u,u,u,u,u,u,u,u,u,u,u,u>
	movdqa	xmm8, xmmword ptr [rip + .LCPI1_1] # xmm8 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI1_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI1_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI1_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI1_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI1_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	movdqa	xmm9, xmmword ptr [rip + .LCPI1_7] # xmm9 = [0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]
	.p2align	4, 0x90
.LBB1_185:                              # =>This Inner Loop Header: Depth=1
	movss	xmm6, dword ptr [rsi - 508]     # xmm6 = mem[0],zero,zero,zero
	movss	xmm7, dword ptr [rsi - 504]     # xmm7 = mem[0],zero,zero,zero
	movss	xmm5, dword ptr [rsi - 500]     # xmm5 = mem[0],zero,zero,zero
	movss	xmm4, dword ptr [rsi - 496]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 380], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 252], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 124], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	insertps	xmm7, dword ptr [rsi - 376], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 248], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 120], 48 # xmm7 = xmm7[0,1,2],mem[0]
	insertps	xmm5, dword ptr [rsi - 372], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 244], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 116], 48 # xmm5 = xmm5[0,1,2],mem[0]
	insertps	xmm4, dword ptr [rsi - 368], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rsi - 240], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rsi - 112], 48 # xmm4 = xmm4[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	movdqa	xmm2, xmm7
	pand	xmm2, xmm15
	psubb	xmm2, xmm7
	movss	xmm7, dword ptr [rsi - 492]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 364], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 236], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 108], 48 # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rsi - 488]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 360], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 232], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 104], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm8
	por	xmm5, xmm2
	movss	xmm3, dword ptr [rsi - 484]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 356], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 228], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 100], 48 # xmm3 = xmm3[0,1,2],mem[0]
	cmpeqps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 3
	pand	xmm4, xmm10
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 4
	pand	xmm7, xmm11
	por	xmm7, xmm4
	movss	xmm4, dword ptr [rsi - 480]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm4, dword ptr [rsi - 352], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rsi - 224], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rsi - 96], 48  # xmm4 = xmm4[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm5, dword ptr [rsi - 476]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 348], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 220], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 92], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 6
	pand	xmm3, xmm13
	por	xmm3, xmm6
	movss	xmm2, dword ptr [rsi - 472]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 344], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 216], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 88], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packsswb	xmm5, xmm5
	cmpeqps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm3
	movss	xmm3, dword ptr [rsi - 468]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 340], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 212], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm5, xmm15
	insertps	xmm3, dword ptr [rsi - 84], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm4, xmm7
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm7, dword ptr [rsi - 464]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 336], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 208], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 80], 48  # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm5
	movss	xmm5, dword ptr [rsi - 460]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 332], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 204], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 76], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rsi - 456]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 328], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 200], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 72], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 3
	pand	xmm7, xmm10
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm7
	movss	xmm2, dword ptr [rsi - 452]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 324], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 196], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 68], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm3
	movss	xmm7, dword ptr [rsi - 448]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 320], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 192], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 64], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rsi - 444]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 316], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 188], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 60], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	psllw	xmm7, 7
	pand	xmm7, xmm14
	por	xmm7, xmm2
	movss	xmm2, dword ptr [rsi - 440]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 312], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 184], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 56], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm3, dword ptr [rsi - 436]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 308], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 180], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm6, xmm15
	insertps	xmm3, dword ptr [rsi - 52], 48  # xmm3 = xmm3[0,1,2],mem[0]
	punpckldq	xmm4, xmm7              # xmm4 = xmm4[0],xmm7[0],xmm4[1],xmm7[1]
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm7, xmm2
	pand	xmm7, xmm15
	psubb	xmm7, xmm2
	movss	xmm5, dword ptr [rsi - 432]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 304], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 176], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 48], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm7, xmm6
	movss	xmm6, dword ptr [rsi - 428]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 300], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 172], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 44], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm7
	movss	xmm7, dword ptr [rsi - 424]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 296], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 168], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 40], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm5
	movss	xmm2, dword ptr [rsi - 420]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 292], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 164], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 36], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm5, dword ptr [rsi - 416]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 288], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 160], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 32], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm7, dword ptr [rsi - 412]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 284], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 156], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 28], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	psllw	xmm5, 7
	pand	xmm5, xmm14
	por	xmm5, xmm2
	movss	xmm2, dword ptr [rsi - 408]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 280], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 152], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	pand	xmm7, xmm15
	insertps	xmm2, dword ptr [rsi - 24], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm6
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm3, dword ptr [rsi - 404]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 276], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 148], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 20], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm6, xmm7
	movss	xmm2, dword ptr [rsi - 400]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 272], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 144], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 16], 48  # xmm2 = xmm2[0,1,2],mem[0]
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rsi - 396]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 268], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 140], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 12], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm2
	movss	xmm7, dword ptr [rsi - 392]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 264], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 136], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 8], 48   # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm2, dword ptr [rsi - 388]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 260], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 132], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 4], 48   # xmm2 = xmm2[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm3, dword ptr [rsi - 384]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 256], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 128], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi], 48       # xmm3 = xmm3[0,1,2],mem[0]
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm2
	por	xmm3, xmm6
	punpckldq	xmm5, xmm3              # xmm5 = xmm5[0],xmm3[0],xmm5[1],xmm3[1]
	punpcklbw	xmm4, xmm5              # xmm4 = xmm4[0],xmm5[0],xmm4[1],xmm5[1],xmm4[2],xmm5[2],xmm4[3],xmm5[3],xmm4[4],xmm5[4],xmm4[5],xmm5[5],xmm4[6],xmm5[6],xmm4[7],xmm5[7]
	pshufb	xmm4, xmm9
	movdqu	xmmword ptr [r14 + 4*rcx], xmm4
	add	rcx, 4
	add	rsi, 512
	cmp	r8, rcx
	jne	.LBB1_185
# %bb.186:
	cmp	r11, r8
	jne	.LBB1_187
	jmp	.LBB1_190
.Lfunc_end1:
	.size	comparison_equal_arr_scalar_sse4, .Lfunc_end1-comparison_equal_arr_scalar_sse4
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function comparison_equal_scalar_arr_sse4
.LCPI2_0:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI2_1:
	.zero	16,252
.LCPI2_2:
	.zero	16,248
.LCPI2_3:
	.zero	16,240
.LCPI2_4:
	.zero	16,224
.LCPI2_5:
	.zero	16,192
.LCPI2_6:
	.zero	16,128
.LCPI2_7:
	.byte	0                               # 0x0
	.byte	8                               # 0x8
	.byte	1                               # 0x1
	.byte	9                               # 0x9
	.byte	2                               # 0x2
	.byte	10                              # 0xa
	.byte	3                               # 0x3
	.byte	11                              # 0xb
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
.LCPI2_8:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI2_9:
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI2_10:
	.zero	16,1
.LCPI2_11:
	.zero	16,4
.LCPI2_12:
	.zero	16,8
.LCPI2_13:
	.zero	16,16
.LCPI2_14:
	.zero	16,32
.LCPI2_15:
	.zero	16,64
	.text
	.globl	comparison_equal_scalar_arr_sse4
	.p2align	4, 0x90
	.type	comparison_equal_scalar_arr_sse4,@function
comparison_equal_scalar_arr_sse4:       # @comparison_equal_scalar_arr_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -16
	sub	rsp, 304
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	qword ptr [rsp], rcx            # 8-byte Spill
	cmp	edi, 6
	jg	.LBB2_17
# %bb.1:
	cmp	edi, 3
	jle	.LBB2_32
# %bb.2:
	cmp	edi, 4
	je	.LBB2_83
# %bb.3:
	cmp	edi, 5
	je	.LBB2_95
# %bb.4:
	cmp	edi, 6
	jne	.LBB2_176
# %bb.5:
	mov	r13d, dword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_9
# %bb.6:
	movsxd	rax, r9d
	mov	r9, qword ptr [rsp]             # 8-byte Reload
	.p2align	4, 0x90
.LBB2_7:                                # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r9 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r9 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_7
# %bb.8:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_9:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB2_13
# %bb.10:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_11:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 4]
	sete	dil
	cmp	r13d, dword ptr [rdx + 8]
	sete	r14b
	cmp	r13d, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 24]
	sete	al
	cmp	r13d, dword ptr [rdx + 28]
	sete	r11b
	cmp	r13d, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 36]
	sete	sil
	cmp	r13d, dword ptr [rdx + 40]
	sete	r8b
	cmp	r13d, dword ptr [rdx + 44]
	sete	r9b
	cmp	r13d, dword ptr [rdx + 48]
	sete	r10b
	cmp	r13d, dword ptr [rdx + 52]
	sete	r12b
	cmp	r13d, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 60]
	sete	cl
	cmp	r13d, dword ptr [rdx + 64]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 68]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 72]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 76]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 84]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 88]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 92]
	sete	r15b
	cmp	r13d, dword ptr [rdx + 96]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 100]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 104]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 108]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 112]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 116]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 120]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 124]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 208]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	edi, eax
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [rsi + 1], cl
	or	r15b, dil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 128
	add	rsi, 4
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB2_11
# %bb.12:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB2_13:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB2_176
# %bb.14:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	je	.LBB2_82
# %bb.15:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_16:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_16
	jmp	.LBB2_152
.LBB2_17:
	cmp	edi, 8
	jle	.LBB2_46
# %bb.18:
	cmp	edi, 9
	je	.LBB2_107
# %bb.19:
	cmp	edi, 11
	je	.LBB2_118
# %bb.20:
	cmp	edi, 12
	jne	.LBB2_176
# %bb.21:
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB2_25
# %bb.22:
	movsxd	rax, r9d
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_23:                               # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_23
# %bb.24:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_25:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_29
# %bb.26:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	mov	qword ptr [rsp + 192], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_27:                               # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rdx]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 8]
	sete	r8b
	ucomisd	xmm0, qword ptr [rdx + 16]
	sete	r11b
	ucomisd	xmm0, qword ptr [rdx + 24]
	sete	r13b
	ucomisd	xmm0, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 48]
	sete	al
	ucomisd	xmm0, qword ptr [rdx + 56]
	sete	r14b
	ucomisd	xmm0, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 72]
	sete	sil
	ucomisd	xmm0, qword ptr [rdx + 80]
	sete	dil
	ucomisd	xmm0, qword ptr [rdx + 88]
	sete	r9b
	ucomisd	xmm0, qword ptr [rdx + 96]
	sete	r10b
	ucomisd	xmm0, qword ptr [rdx + 104]
	sete	r12b
	ucomisd	xmm0, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 120]
	sete	cl
	ucomisd	xmm0, qword ptr [rdx + 128]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 136]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 144]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 152]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 168]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 176]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 184]
	sete	r15b
	ucomisd	xmm0, qword ptr [rdx + 192]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 200]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 208]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 216]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 224]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 232]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 240]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 248]
	sete	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	r14b, 7
	or	r14b, al
	shl	r11b, 2
	or	r11b, r8b
	add	sil, sil
	add	sil, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r11b
	mov	r8, qword ptr [rsp]             # 8-byte Reload
	shl	dil, 2
	or	dil, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r13b
	mov	r11d, eax
	shl	r9b, 3
	or	r9b, dil
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r14b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r8], r14b
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r8 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r8 + 2], r15b
	mov	byte ptr [r8 + 3], bl
	add	rdx, 256
	add	r8, 4
	mov	qword ptr [rsp], r8             # 8-byte Spill
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB2_27
# %bb.28:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
.LBB2_29:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_176
# %bb.30:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB2_161
# %bb.31:
	xor	edi, edi
	jmp	.LBB2_163
.LBB2_32:
	cmp	edi, 2
	je	.LBB2_60
# %bb.33:
	cmp	edi, 3
	jne	.LBB2_176
# %bb.34:
	mov	r14b, byte ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_38
# %bb.35:
	movsxd	rax, r9d
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_36:                               # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_36
# %bb.37:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_38:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB2_130
# %bb.39:
	cmp	r15, 16
	mov	byte ptr [rsp + 8], r14b        # 1-byte Spill
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 240], r15      # 8-byte Spill
	jb	.LBB2_42
# %bb.40:
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	cmp	qword ptr [rsp], rax            # 8-byte Folded Reload
	jae	.LBB2_185
# %bb.41:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	lea	rax, [rax + 4*r15]
	cmp	rdx, rax
	jae	.LBB2_185
.LBB2_42:
	xor	eax, eax
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rsi, rdx
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
.LBB2_43:
	sub	r15, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_44:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	r14b, byte ptr [rsi]
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rsi + 1]
	sete	dil
	cmp	r14b, byte ptr [rsi + 2]
	sete	r11b
	cmp	r14b, byte ptr [rsi + 3]
	sete	r15b
	cmp	r14b, byte ptr [rsi + 4]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rsi + 5]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rsi + 6]
	sete	bl
	cmp	r14b, byte ptr [rsi + 7]
	sete	r13b
	cmp	r14b, byte ptr [rsi + 8]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rsi + 9]
	sete	sil
	cmp	r14b, byte ptr [rcx + 10]
	sete	r8b
	cmp	r14b, byte ptr [rcx + 11]
	sete	r9b
	cmp	r14b, byte ptr [rcx + 12]
	sete	r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 13]
	sete	r12b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 14]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 15]
	sete	al
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 16]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 17]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 18]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 19]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 20]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 21]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 22]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 23]
	sete	r10b
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 24]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 25]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 26]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 27]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 28]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 29]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 30]
	sete	byte ptr [rsp]                  # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 31]
	sete	dl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r13b, 7
	or	r13b, bl
	shl	r11b, 2
	or	r11b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	r15b, 3
	or	r15b, r11b
	shl	r8b, 2
	or	r8b, sil
	movzx	ebx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r15b
	mov	esi, ebx
	shl	r9b, 3
	or	r9b, r8b
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r14b, 4
	or	r14b, r9b
	shl	r12b, 5
	or	r12b, r14b
	movzx	r14d, byte ptr [rsp + 8]        # 1-byte Folded Reload
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	al, 7
	or	al, sil
	or	r13b, bl
	or	al, r12b
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 120]        # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	mov	byte ptr [rdi], r13b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r10b, 7
	or	r10b, sil
	mov	byte ptr [rdi + 1], al
	or	r10b, bl
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 56]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rdi + 2], r10b
	mov	byte ptr [rdi + 3], dl
	lea	rsi, [rcx + 32]
	add	rdi, 4
	mov	qword ptr [rsp + 104], rdi      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB2_44
# %bb.45:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	jmp	.LBB2_131
.LBB2_46:
	cmp	edi, 7
	je	.LBB2_72
# %bb.47:
	cmp	edi, 8
	jne	.LBB2_176
# %bb.48:
	mov	r13, qword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_52
# %bb.49:
	movsxd	rax, r9d
	mov	r9, qword ptr [rsp]             # 8-byte Reload
	.p2align	4, 0x90
.LBB2_50:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r9 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r9 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_50
# %bb.51:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_52:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB2_56
# %bb.53:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_54:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 8]
	sete	dil
	cmp	r13, qword ptr [rdx + 16]
	sete	r14b
	cmp	r13, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 48]
	sete	al
	cmp	r13, qword ptr [rdx + 56]
	sete	r11b
	cmp	r13, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 72]
	sete	sil
	cmp	r13, qword ptr [rdx + 80]
	sete	r8b
	cmp	r13, qword ptr [rdx + 88]
	sete	r9b
	cmp	r13, qword ptr [rdx + 96]
	sete	r10b
	cmp	r13, qword ptr [rdx + 104]
	sete	r12b
	cmp	r13, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 120]
	sete	cl
	cmp	r13, qword ptr [rdx + 128]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 136]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 144]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 152]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 168]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 176]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 184]
	sete	r15b
	cmp	r13, qword ptr [rdx + 192]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 200]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 208]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 216]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 224]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 232]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 240]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 248]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 208]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	edi, eax
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [rsi + 1], cl
	or	r15b, dil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 256
	add	rsi, 4
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB2_54
# %bb.55:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB2_56:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB2_176
# %bb.57:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	je	.LBB2_117
# %bb.58:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_59:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_59
	jmp	.LBB2_167
.LBB2_60:
	mov	r14b, byte ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_64
# %bb.61:
	movsxd	rax, r9d
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_62:                               # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_62
# %bb.63:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_64:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB2_134
# %bb.65:
	cmp	r15, 16
	mov	byte ptr [rsp + 8], r14b        # 1-byte Spill
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 240], r15      # 8-byte Spill
	jb	.LBB2_68
# %bb.66:
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	cmp	qword ptr [rsp], rax            # 8-byte Folded Reload
	jae	.LBB2_188
# %bb.67:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	lea	rax, [rax + 4*r15]
	cmp	rdx, rax
	jae	.LBB2_188
.LBB2_68:
	xor	eax, eax
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rsi, rdx
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
.LBB2_69:
	sub	r15, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_70:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	r14b, byte ptr [rsi]
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rsi + 1]
	sete	dil
	cmp	r14b, byte ptr [rsi + 2]
	sete	r11b
	cmp	r14b, byte ptr [rsi + 3]
	sete	r15b
	cmp	r14b, byte ptr [rsi + 4]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rsi + 5]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rsi + 6]
	sete	bl
	cmp	r14b, byte ptr [rsi + 7]
	sete	r13b
	cmp	r14b, byte ptr [rsi + 8]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rsi + 9]
	sete	sil
	cmp	r14b, byte ptr [rcx + 10]
	sete	r8b
	cmp	r14b, byte ptr [rcx + 11]
	sete	r9b
	cmp	r14b, byte ptr [rcx + 12]
	sete	r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 13]
	sete	r12b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 14]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 15]
	sete	al
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 16]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 17]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 18]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 19]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 20]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 21]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 22]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 23]
	sete	r10b
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 24]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 25]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 26]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 27]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 28]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 29]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 30]
	sete	byte ptr [rsp]                  # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 31]
	sete	dl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r13b, 7
	or	r13b, bl
	shl	r11b, 2
	or	r11b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	r15b, 3
	or	r15b, r11b
	shl	r8b, 2
	or	r8b, sil
	movzx	ebx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r15b
	mov	esi, ebx
	shl	r9b, 3
	or	r9b, r8b
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r14b, 4
	or	r14b, r9b
	shl	r12b, 5
	or	r12b, r14b
	movzx	r14d, byte ptr [rsp + 8]        # 1-byte Folded Reload
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	al, 7
	or	al, sil
	or	r13b, bl
	or	al, r12b
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 120]        # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	mov	byte ptr [rdi], r13b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r10b, 7
	or	r10b, sil
	mov	byte ptr [rdi + 1], al
	or	r10b, bl
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 56]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rdi + 2], r10b
	mov	byte ptr [rdi + 3], dl
	lea	rsi, [rcx + 32]
	add	rdi, 4
	mov	qword ptr [rsp + 104], rdi      # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB2_70
# %bb.71:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	jmp	.LBB2_135
.LBB2_72:
	mov	r13d, dword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_76
# %bb.73:
	movsxd	rax, r9d
	mov	r9, qword ptr [rsp]             # 8-byte Reload
	.p2align	4, 0x90
.LBB2_74:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r9 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r9 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_74
# %bb.75:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_76:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB2_80
# %bb.77:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_78:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 4]
	sete	dil
	cmp	r13d, dword ptr [rdx + 8]
	sete	r14b
	cmp	r13d, dword ptr [rdx + 12]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 16]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 20]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 24]
	sete	al
	cmp	r13d, dword ptr [rdx + 28]
	sete	r11b
	cmp	r13d, dword ptr [rdx + 32]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 36]
	sete	sil
	cmp	r13d, dword ptr [rdx + 40]
	sete	r8b
	cmp	r13d, dword ptr [rdx + 44]
	sete	r9b
	cmp	r13d, dword ptr [rdx + 48]
	sete	r10b
	cmp	r13d, dword ptr [rdx + 52]
	sete	r12b
	cmp	r13d, dword ptr [rdx + 56]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 60]
	sete	cl
	cmp	r13d, dword ptr [rdx + 64]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 68]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 72]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 76]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 80]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 84]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 88]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 92]
	sete	r15b
	cmp	r13d, dword ptr [rdx + 96]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 100]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 104]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 108]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 112]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 116]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 120]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 124]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 208]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	edi, eax
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [rsi + 1], cl
	or	r15b, dil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 128
	add	rsi, 4
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB2_78
# %bb.79:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB2_80:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB2_176
# %bb.81:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB2_150
.LBB2_82:
	xor	edi, edi
	jmp	.LBB2_152
.LBB2_83:
	movzx	r13d, word ptr [rsi]
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_87
# %bb.84:
	movsxd	rax, r9d
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_85:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_85
# %bb.86:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_87:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_138
# %bb.88:
	cmp	r14, 8
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r14      # 8-byte Spill
	jb	.LBB2_91
# %bb.89:
	mov	rax, r14
	shl	rax, 6
	add	rax, rdx
	cmp	qword ptr [rsp], rax            # 8-byte Folded Reload
	jae	.LBB2_191
# %bb.90:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	lea	rax, [rax + 4*r14]
	cmp	rax, rdx
	jbe	.LBB2_191
.LBB2_91:
	xor	eax, eax
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rsi, rdx
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
.LBB2_92:
	sub	r14, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_93:                               # =>This Inner Loop Header: Depth=1
	mov	r11, rsi
	cmp	r13w, word ptr [rsi]
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 2]
	sete	dil
	cmp	r13w, word ptr [rsi + 4]
	sete	r14b
	cmp	r13w, word ptr [rsi + 6]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 8]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 10]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 12]
	sete	al
	cmp	r13w, word ptr [rsi + 14]
	sete	r10b
	cmp	r13w, word ptr [rsi + 16]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 18]
	sete	cl
	cmp	r13w, word ptr [rsi + 20]
	sete	dl
	cmp	r13w, word ptr [rsi + 22]
	sete	sil
	cmp	r13w, word ptr [r11 + 24]
	sete	r9b
	cmp	r13w, word ptr [r11 + 26]
	sete	r12b
	cmp	r13w, word ptr [r11 + 28]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 30]
	sete	r8b
	cmp	r13w, word ptr [r11 + 32]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 34]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 36]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 38]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 40]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 42]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 44]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 46]
	sete	r15b
	cmp	r13w, word ptr [r11 + 48]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 50]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 52]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 54]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 56]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 58]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 60]
	sete	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 62]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r10b, 7
	or	r10b, al
	shl	r14b, 2
	or	r14b, dil
	add	cl, cl
	add	cl, byte ptr [rsp + 208]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	dl, 2
	or	dl, cl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	sil, 3
	or	sil, dl
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r9b, 4
	or	r9b, sil
	shl	r12b, 5
	or	r12b, r9b
	movzx	edx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r10b, cl
	or	r8b, r12b
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	esi, ecx
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rcx], r10b
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r15b, 7
	or	r15b, dl
	mov	byte ptr [rcx + 1], r8b
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rcx + 2], r15b
	mov	byte ptr [rcx + 3], bl
	lea	rsi, [r11 + 64]
	add	rcx, 4
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB2_93
# %bb.94:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	jmp	.LBB2_139
.LBB2_95:
	movzx	r13d, word ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_99
# %bb.96:
	movsxd	rax, r9d
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_97:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_97
# %bb.98:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_99:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB2_142
# %bb.100:
	cmp	r15, 8
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r15      # 8-byte Spill
	jb	.LBB2_103
# %bb.101:
	mov	rax, r15
	shl	rax, 6
	add	rax, rdx
	cmp	qword ptr [rsp], rax            # 8-byte Folded Reload
	jae	.LBB2_194
# %bb.102:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	lea	rax, [rax + 4*r15]
	cmp	rax, rdx
	jbe	.LBB2_194
.LBB2_103:
	xor	eax, eax
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rsi, rdx
	mov	r14, qword ptr [rsp]            # 8-byte Reload
.LBB2_104:
	mov	qword ptr [rsp + 8], r14        # 8-byte Spill
	sub	r15, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 136], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_105:                              # =>This Inner Loop Header: Depth=1
	mov	r11, rsi
	cmp	r13w, word ptr [rsi]
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 2]
	sete	dil
	cmp	r13w, word ptr [rsi + 4]
	sete	r14b
	cmp	r13w, word ptr [rsi + 6]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 8]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 10]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 12]
	sete	al
	cmp	r13w, word ptr [rsi + 14]
	sete	r10b
	cmp	r13w, word ptr [rsi + 16]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 18]
	sete	cl
	cmp	r13w, word ptr [rsi + 20]
	sete	dl
	cmp	r13w, word ptr [rsi + 22]
	sete	sil
	cmp	r13w, word ptr [r11 + 24]
	sete	r9b
	cmp	r13w, word ptr [r11 + 26]
	sete	r12b
	cmp	r13w, word ptr [r11 + 28]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 30]
	sete	r8b
	cmp	r13w, word ptr [r11 + 32]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 34]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 36]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 38]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 40]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 42]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 44]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 46]
	sete	r15b
	cmp	r13w, word ptr [r11 + 48]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 50]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 52]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 54]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 56]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 58]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 60]
	sete	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 62]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r10b, 7
	or	r10b, al
	shl	r14b, 2
	or	r14b, dil
	add	cl, cl
	add	cl, byte ptr [rsp + 208]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	dl, 2
	or	dl, cl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	sil, 3
	or	sil, dl
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r9b, 4
	or	r9b, sil
	shl	r12b, 5
	or	r12b, r9b
	movzx	edx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r10b, cl
	or	r8b, r12b
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	esi, ecx
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rcx], r10b
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r15b, 7
	or	r15b, dl
	mov	byte ptr [rcx + 1], r8b
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rcx + 2], r15b
	mov	byte ptr [rcx + 3], bl
	lea	rsi, [r11 + 64]
	add	rcx, 4
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB2_105
# %bb.106:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 8]        # 8-byte Reload
	jmp	.LBB2_143
.LBB2_107:
	mov	r13, qword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB2_111
# %bb.108:
	movsxd	rax, r9d
	mov	r9, qword ptr [rsp]             # 8-byte Reload
	.p2align	4, 0x90
.LBB2_109:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r9 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r9 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_109
# %bb.110:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_111:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB2_115
# %bb.112:
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r11      # 8-byte Spill
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_113:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	sete	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 8]
	sete	dil
	cmp	r13, qword ptr [rdx + 16]
	sete	r14b
	cmp	r13, qword ptr [rdx + 24]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 32]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 40]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 48]
	sete	al
	cmp	r13, qword ptr [rdx + 56]
	sete	r11b
	cmp	r13, qword ptr [rdx + 64]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 72]
	sete	sil
	cmp	r13, qword ptr [rdx + 80]
	sete	r8b
	cmp	r13, qword ptr [rdx + 88]
	sete	r9b
	cmp	r13, qword ptr [rdx + 96]
	sete	r10b
	cmp	r13, qword ptr [rdx + 104]
	sete	r12b
	cmp	r13, qword ptr [rdx + 112]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 120]
	sete	cl
	cmp	r13, qword ptr [rdx + 128]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 136]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 144]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 152]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 160]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 168]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 176]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 184]
	sete	r15b
	cmp	r13, qword ptr [rdx + 192]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 200]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 208]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 216]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 224]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 232]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 240]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 248]
	sete	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 208]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	edi, eax
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	byte ptr [rax], r11b
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	mov	byte ptr [rsi + 1], cl
	or	r15b, dil
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	or	bl, cl
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], bl
	add	rdx, 256
	add	rsi, 4
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	add	qword ptr [rsp + 136], -1       # 8-byte Folded Spill
	jne	.LBB2_113
# %bb.114:
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
.LBB2_115:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB2_176
# %bb.116:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB2_165
.LBB2_117:
	xor	edi, edi
	jmp	.LBB2_167
.LBB2_118:
	lea	r14, [r10 + 31]
	test	r10, r10
	cmovns	r14, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB2_122
# %bb.119:
	movsxd	rax, r9d
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_120:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	sete	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r11 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB2_120
# %bb.121:
	add	qword ptr [rsp], 1              # 8-byte Folded Spill
.LBB2_122:
	sar	r14, 5
	cmp	r10, 32
	jl	.LBB2_146
# %bb.123:
	cmp	r14, 4
	jb	.LBB2_126
# %bb.124:
	mov	rax, r14
	shl	rax, 7
	add	rax, rdx
	cmp	qword ptr [rsp], rax            # 8-byte Folded Reload
	jae	.LBB2_197
# %bb.125:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	lea	rax, [rax + 4*r14]
	cmp	rax, rdx
	jbe	.LBB2_197
.LBB2_126:
	xor	r8d, r8d
	mov	rbx, rdx
	mov	r11, qword ptr [rsp]            # 8-byte Reload
.LBB2_127:
	mov	qword ptr [rsp], r11            # 8-byte Spill
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	mov	qword ptr [rsp + 136], r14      # 8-byte Spill
	sub	r14, r8
	mov	qword ptr [rsp + 192], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB2_128:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	sete	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 4]
	sete	r8b
	ucomiss	xmm0, dword ptr [rbx + 8]
	sete	r14b
	ucomiss	xmm0, dword ptr [rbx + 12]
	sete	r13b
	ucomiss	xmm0, dword ptr [rbx + 16]
	sete	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 20]
	sete	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 24]
	sete	al
	ucomiss	xmm0, dword ptr [rbx + 28]
	sete	r11b
	ucomiss	xmm0, dword ptr [rbx + 32]
	sete	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 36]
	sete	dl
	ucomiss	xmm0, dword ptr [rbx + 40]
	sete	sil
	ucomiss	xmm0, dword ptr [rbx + 44]
	sete	dil
	ucomiss	xmm0, dword ptr [rbx + 48]
	sete	r10b
	ucomiss	xmm0, dword ptr [rbx + 52]
	sete	r12b
	ucomiss	xmm0, dword ptr [rbx + 56]
	sete	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 60]
	sete	r9b
	ucomiss	xmm0, dword ptr [rbx + 64]
	sete	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 68]
	sete	byte ptr [rsp + 208]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 72]
	sete	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 76]
	sete	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 80]
	sete	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 84]
	sete	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 88]
	sete	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 92]
	sete	r15b
	ucomiss	xmm0, dword ptr [rbx + 96]
	sete	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 100]
	sete	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 104]
	sete	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 108]
	sete	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 112]
	sete	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 116]
	sete	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 120]
	sete	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 124]
	sete	cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 72]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r15b, dl
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	cl, 7
	or	cl, dl
	or	cl, al
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], cl
	add	rbx, 128
	add	rsi, 4
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB2_128
# %bb.129:
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 136]      # 8-byte Reload
	jmp	.LBB2_147
.LBB2_130:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rsi, rdx
.LBB2_131:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB2_176
# %bb.132:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	je	.LBB2_137
# %bb.154:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	.p2align	4, 0x90
.LBB2_155:                              # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	r14b, byte ptr [rsi + r9]
	sete	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	r14b, byte ptr [rsi + rax + 1]
	lea	r9, [rax + 2]
	sete	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, r9
	jne	.LBB2_155
	jmp	.LBB2_158
.LBB2_134:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	mov	rsi, rdx
.LBB2_135:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB2_176
# %bb.136:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB2_156
.LBB2_137:
	xor	r9d, r9d
	test	r8b, 1
	je	.LBB2_176
	jmp	.LBB2_160
.LBB2_138:
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	rsi, rdx
.LBB2_139:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_176
# %bb.140:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB2_170
# %bb.141:
	xor	r14d, r14d
	jmp	.LBB2_172
.LBB2_142:
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	mov	rsi, rdx
.LBB2_143:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB2_176
# %bb.144:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB2_177
# %bb.145:
	xor	r15d, r15d
	jmp	.LBB2_179
.LBB2_146:
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	mov	rbx, rdx
.LBB2_147:
	shl	r14, 5
	cmp	r14, r10
	jge	.LBB2_176
# %bb.148:
	mov	r8, r10
	sub	r8, r14
	not	r14
	add	r14, r10
	jne	.LBB2_181
# %bb.149:
	xor	esi, esi
	jmp	.LBB2_183
.LBB2_150:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_151:                              # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_151
.LBB2_152:
	test	r8b, 1
	je	.LBB2_176
# %bb.153:
	cmp	r13d, dword ptr [rdx]
	jmp	.LBB2_169
.LBB2_156:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	.p2align	4, 0x90
.LBB2_157:                              # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	r14b, byte ptr [rsi + r9]
	sete	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	r14b, byte ptr [rsi + rax + 1]
	lea	r9, [rax + 2]
	sete	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, r9
	jne	.LBB2_157
.LBB2_158:
	add	rsi, r9
	test	r8b, 1
	je	.LBB2_176
.LBB2_160:
	cmp	r14b, byte ptr [rsi]
	sete	al
	neg	al
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	jmp	.LBB2_174
.LBB2_161:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_162:                              # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	xor	al, r9b
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	ucomisd	xmm0, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_162
.LBB2_163:
	test	r8b, 1
	je	.LBB2_176
# %bb.164:
	ucomisd	xmm0, qword ptr [rdx]
	jmp	.LBB2_169
.LBB2_165:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	mov	r11, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_166:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	sete	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r11 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r11 + rsi], bl
	add	rdi, 2
	cmp	r13, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	sete	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r11 + rsi], al
	cmp	r10, rdi
	jne	.LBB2_166
.LBB2_167:
	test	r8b, 1
	je	.LBB2_176
# %bb.168:
	cmp	r13, qword ptr [rdx]
.LBB2_169:
	sete	al
	neg	al
	mov	rdx, rdi
	shr	rdx, 3
	mov	r8, qword ptr [rsp]             # 8-byte Reload
	mov	sil, byte ptr [r8 + rdx]
	and	dil, 7
	mov	bl, 1
	mov	ecx, edi
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	jmp	.LBB2_175
.LBB2_170:
	mov	r9, r8
	and	r9, -2
	xor	r14d, r14d
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB2_171:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	cmp	r13w, word ptr [rsi]
	sete	dl
	neg	dl
	mov	rdi, r14
	shr	rdi, 3
	movzx	r10d, byte ptr [r11 + rdi]
	mov	ecx, r14d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r11 + rdi], bl
	add	r14, 2
	cmp	r13w, word ptr [rsi + 2]
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r11 + rdi], al
	cmp	r9, r14
	jne	.LBB2_171
.LBB2_172:
	test	r8b, 1
	je	.LBB2_176
# %bb.173:
	cmp	r13w, word ptr [rsi]
	sete	al
	neg	al
	mov	rdx, r14
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r14b, 7
	mov	bl, 1
	mov	ecx, r14d
.LBB2_174:
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
.LBB2_175:
	mov	byte ptr [r8 + rdx], bl
.LBB2_176:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB2_177:
	mov	r9, r8
	and	r9, -2
	xor	r15d, r15d
	.p2align	4, 0x90
.LBB2_178:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	cmp	r13w, word ptr [rsi]
	sete	dl
	neg	dl
	mov	rdi, r15
	shr	rdi, 3
	movzx	r10d, byte ptr [r14 + rdi]
	mov	ecx, r15d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r14 + rdi], bl
	add	r15, 2
	cmp	r13w, word ptr [rsi + 2]
	lea	rsi, [rsi + 4]
	sete	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r14 + rdi], al
	cmp	r9, r15
	jne	.LBB2_178
.LBB2_179:
	test	r8b, 1
	je	.LBB2_176
# %bb.180:
	cmp	r13w, word ptr [rsi]
	sete	al
	neg	al
	mov	rdx, r15
	shr	rdx, 3
	mov	dil, byte ptr [r14 + rdx]
	and	r15b, 7
	mov	bl, 1
	mov	ecx, r15d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r14 + rdx], bl
	jmp	.LBB2_176
.LBB2_181:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r14, r11
	.p2align	4, 0x90
.LBB2_182:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	sete	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	mov	ecx, esi
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	add	rsi, 2
	ucomiss	xmm0, dword ptr [rbx + 4]
	lea	rbx, [rbx + 8]
	sete	r9b
	neg	r9b
	xor	r9b, al
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, r9b
	xor	dl, al
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, rsi
	jne	.LBB2_182
.LBB2_183:
	test	r8b, 1
	je	.LBB2_176
# %bb.184:
	ucomiss	xmm0, dword ptr [rbx]
	sete	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r11 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r11 + rdx], bl
	jmp	.LBB2_176
.LBB2_185:
	and	r15, -16
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 248], rax      # 8-byte Spill
	mov	qword ptr [rsp + 232], r15      # 8-byte Spill
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	lea	rax, [rax + 4*r15]
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	movzx	eax, r14b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 176], xmm1   # 16-byte Spill
	xor	eax, eax
	.p2align	4, 0x90
.LBB2_186:                              # =>This Inner Loop Header: Depth=1
	mov	rdi, rax
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	shl	rdi, 5
	mov	rsi, rdi
	mov	r10, rdi
	mov	r14, rdi
	mov	r15, rdi
	mov	r12, rdi
	mov	r11, rdi
	mov	rax, rdi
	mov	r9, rdi
	mov	rbx, rdi
	mov	qword ptr [rsp + 80], rdi       # 8-byte Spill
	mov	qword ptr [rsp + 96], rdi       # 8-byte Spill
	movzx	ecx, byte ptr [rdx + rdi]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [rdx + rdi + 1]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rdx + rdi + 2]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rdx + rdi + 3]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rdx + rdi + 4]
	movd	xmm1, ecx
	movzx	ecx, byte ptr [rdx + rdi + 5]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rdx + rdi + 6]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rdx + rdi + 7]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 208], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rdi + 8]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 256], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rdi + 9]
	movd	xmm10, ecx
	movzx	ecx, byte ptr [rdx + rdi + 10]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 160], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rdi + 11]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rdx + rdi + 12]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [rdx + rdi + 13]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rdx + rdi + 14]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 272], xmm0   # 16-byte Spill
	mov	qword ptr [rsp + 64], rdi       # 8-byte Spill
	mov	r13, rdi
	or	r13, 32
	mov	qword ptr [rsp + 24], r13       # 8-byte Spill
	or	rsi, 64
	mov	qword ptr [rsp + 40], rsi       # 8-byte Spill
	mov	rcx, rdi
	or	rcx, 96
	or	r14, 128
	or	r15, 160
	or	r10, 192
	or	r11, 224
	or	r12, 256
	or	r9, 288
	mov	qword ptr [rsp + 72], r9        # 8-byte Spill
	or	rbx, 320
	mov	qword ptr [rsp + 120], rbx      # 8-byte Spill
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	or	rbx, 352
	mov	qword ptr [rsp + 80], rbx       # 8-byte Spill
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	or	r8, 384
	mov	qword ptr [rsp + 96], r8        # 8-byte Spill
	or	rax, 416
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, rdi
	or	rax, 448
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	rax, rdi
	or	rax, 480
	pinsrb	xmm15, byte ptr [rdx + r13], 1
	pinsrb	xmm15, byte ptr [rdx + rsi], 2
	mov	qword ptr [rsp + 32], rcx       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + rcx], 3
	mov	qword ptr [rsp + 112], r14      # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r14], 4
	mov	qword ptr [rsp + 128], r15      # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r15], 5
	mov	rdi, r10
	pinsrb	xmm15, byte ptr [rdx + r10], 6
	mov	r10, r11
	mov	qword ptr [rsp + 88], r11       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r11], 7
	pinsrb	xmm15, byte ptr [rdx + r12], 8
	pinsrb	xmm15, byte ptr [rdx + r9], 9
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r13], 10
	pinsrb	xmm15, byte ptr [rdx + rbx], 11
	pinsrb	xmm15, byte ptr [rdx + r8], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rsi], 13
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rsi], 14
	pinsrb	xmm15, byte ptr [rdx + rax], 15
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r11 + 1], 1
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 1], 2
	pinsrb	xmm5, byte ptr [rdx + rcx + 1], 3
	pinsrb	xmm5, byte ptr [rdx + r14 + 1], 4
	pinsrb	xmm5, byte ptr [rdx + r15 + 1], 5
	pinsrb	xmm5, byte ptr [rdx + rdi + 1], 6
	pinsrb	xmm5, byte ptr [rdx + r10 + 1], 7
	pinsrb	xmm5, byte ptr [rdx + r12 + 1], 8
	mov	r14, r12
	mov	qword ptr [rsp + 192], r12      # 8-byte Spill
	pinsrb	xmm5, byte ptr [rdx + r9 + 1], 9
	pinsrb	xmm5, byte ptr [rdx + r13 + 1], 10
	mov	r15, r13
	pinsrb	xmm5, byte ptr [rdx + rbx + 1], 11
	pinsrb	xmm5, byte ptr [rdx + r8 + 1], 12
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r9 + 1], 13
	mov	r11, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r11 + 1], 14
	pinsrb	xmm5, byte ptr [rdx + rax + 1], 15
	movdqa	xmm9, xmmword ptr [rsp + 176]   # 16-byte Reload
	pcmpeqb	xmm5, xmm9
	movdqa	xmm7, xmm5
	movdqa	xmm4, xmmword ptr [rip + .LCPI2_10] # xmm4 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm7, xmm4
	psubb	xmm7, xmm5
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r12 + 15]
	movd	xmm14, esi
	pcmpeqb	xmm15, xmm9
	mov	r8, qword ptr [rsp + 24]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r8 + 2], 1
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r10 + 2], 2
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rcx + 2], 3
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rbx + 2], 4
	mov	rsi, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 2], 5
	pinsrb	xmm6, byte ptr [rdx + rdi + 2], 6
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 2], 7
	pinsrb	xmm6, byte ptr [rdx + r14 + 2], 8
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r13 + 2], 9
	pinsrb	xmm6, byte ptr [rdx + r15 + 2], 10
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r14 + 2], 11
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r15 + 2], 12
	pinsrb	xmm6, byte ptr [rdx + r9 + 2], 13
	pinsrb	xmm6, byte ptr [rdx + r11 + 2], 14
	mov	r9, rax
	pinsrb	xmm6, byte ptr [rdx + rax + 2], 15
	pand	xmm15, xmm4
	pcmpeqb	xmm6, xmm9
	movdqa	xmm0, xmmword ptr [rip + .LCPI2_11] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm6, xmm0
	por	xmm6, xmm15
	movzx	esi, byte ptr [rdx + r12 + 16]
	movd	xmm15, esi
	mov	rsi, r8
	pinsrb	xmm2, byte ptr [rdx + r8 + 3], 1
	mov	rax, r10
	pinsrb	xmm2, byte ptr [rdx + r10 + 3], 2
	pinsrb	xmm2, byte ptr [rdx + rcx + 3], 3
	pinsrb	xmm2, byte ptr [rdx + rbx + 3], 4
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rcx + 3], 5
	mov	qword ptr [rsp + 136], rdi      # 8-byte Spill
	pinsrb	xmm2, byte ptr [rdx + rdi + 3], 6
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r8 + 3], 7
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r10 + 3], 8
	pinsrb	xmm2, byte ptr [rdx + r13 + 3], 9
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rbx + 3], 10
	pinsrb	xmm2, byte ptr [rdx + r14 + 3], 11
	pinsrb	xmm2, byte ptr [rdx + r15 + 3], 12
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r12 + 3], 13
	pinsrb	xmm2, byte ptr [rdx + r11 + 3], 14
	pinsrb	xmm2, byte ptr [rdx + r9 + 3], 15
	pinsrb	xmm1, byte ptr [rdx + rsi + 4], 1
	pinsrb	xmm1, byte ptr [rdx + rax + 4], 2
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rsi + 4], 3
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rsi + 4], 4
	pinsrb	xmm1, byte ptr [rdx + rcx + 4], 5
	pinsrb	xmm1, byte ptr [rdx + rdi + 4], 6
	pinsrb	xmm1, byte ptr [rdx + r8 + 4], 7
	pinsrb	xmm1, byte ptr [rdx + r10 + 4], 8
	pinsrb	xmm1, byte ptr [rdx + r13 + 4], 9
	pinsrb	xmm1, byte ptr [rdx + rbx + 4], 10
	pinsrb	xmm1, byte ptr [rdx + r14 + 4], 11
	pinsrb	xmm1, byte ptr [rdx + r15 + 4], 12
	pinsrb	xmm1, byte ptr [rdx + r12 + 4], 13
	pinsrb	xmm1, byte ptr [rdx + r11 + 4], 14
	pinsrb	xmm1, byte ptr [rdx + r9 + 4], 15
	mov	rcx, r9
	mov	qword ptr [rsp + 56], r9        # 8-byte Spill
	por	xmm6, xmm7
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	movzx	esi, byte ptr [rdx + r9 + 17]
	movd	xmm0, esi
	pcmpeqb	xmm2, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI2_12] # xmm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm2, xmm5
	pcmpeqb	xmm1, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI2_13] # xmm5 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm1, xmm5
	por	xmm1, xmm2
	movzx	esi, byte ptr [rdx + r9 + 18]
	movd	xmm5, esi
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r13 + 5], 1
	pinsrb	xmm8, byte ptr [rdx + rax + 5], 2
	mov	r11, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r11 + 5], 3
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rax + 5], 4
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rdi + 5], 5
	mov	r8, qword ptr [rsp + 136]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r8 + 5], 6
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r10 + 5], 7
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rbx + 5], 8
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rsi + 5], 9
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r14 + 5], 10
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r15 + 5], 11
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r12 + 5], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rsi + 5], 13
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rsi + 5], 14
	pinsrb	xmm8, byte ptr [rdx + rcx + 5], 15
	pcmpeqb	xmm8, xmm9
	movdqa	xmm2, xmmword ptr [rip + .LCPI2_14] # xmm2 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm8, xmm2
	por	xmm8, xmm1
	movzx	esi, byte ptr [rdx + r9 + 19]
	movd	xmm7, esi
	por	xmm8, xmm6
	movzx	esi, byte ptr [rdx + r9 + 20]
	movd	xmm6, esi
	pinsrb	xmm3, byte ptr [rdx + r13 + 6], 1
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r9 + 6], 2
	pinsrb	xmm3, byte ptr [rdx + r11 + 6], 3
	pinsrb	xmm3, byte ptr [rdx + rax + 6], 4
	mov	rcx, rdi
	pinsrb	xmm3, byte ptr [rdx + rdi + 6], 5
	mov	rdi, r8
	pinsrb	xmm3, byte ptr [rdx + r8 + 6], 6
	pinsrb	xmm3, byte ptr [rdx + r10 + 6], 7
	mov	r10, rbx
	pinsrb	xmm3, byte ptr [rdx + rbx + 6], 8
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rax + 6], 9
	mov	rbx, r14
	pinsrb	xmm3, byte ptr [rdx + r14 + 6], 10
	mov	rsi, r15
	pinsrb	xmm3, byte ptr [rdx + r15 + 6], 11
	mov	r15, r12
	pinsrb	xmm3, byte ptr [rdx + r12 + 6], 12
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r12 + 6], 13
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r14 + 6], 14
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r8 + 6], 15
	movdqa	xmm2, xmmword ptr [rsp + 208]   # 16-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r13 + 7], 1
	pinsrb	xmm2, byte ptr [rdx + r9 + 7], 2
	pinsrb	xmm2, byte ptr [rdx + r11 + 7], 3
	mov	r13, r11
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r9 + 7], 4
	pinsrb	xmm2, byte ptr [rdx + rcx + 7], 5
	pinsrb	xmm2, byte ptr [rdx + rdi + 7], 6
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rcx + 7], 7
	pinsrb	xmm2, byte ptr [rdx + r10 + 7], 8
	pinsrb	xmm2, byte ptr [rdx + rax + 7], 9
	pinsrb	xmm2, byte ptr [rdx + rbx + 7], 10
	pinsrb	xmm2, byte ptr [rdx + rsi + 7], 11
	pinsrb	xmm2, byte ptr [rdx + r15 + 7], 12
	pinsrb	xmm2, byte ptr [rdx + r12 + 7], 13
	mov	r15, r12
	pinsrb	xmm2, byte ptr [rdx + r14 + 7], 14
	pinsrb	xmm2, byte ptr [rdx + r8 + 7], 15
	pcmpeqb	xmm3, xmm9
	movdqa	xmm1, xmmword ptr [rip + .LCPI2_15] # xmm1 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm1
	pcmpeqb	xmm2, xmm9
	psllw	xmm2, 7
	movdqa	xmm1, xmmword ptr [rip + .LCPI2_6] # xmm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm2, xmm1
	por	xmm2, xmm3
	movdqa	xmm1, xmm2
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 21]
	movd	xmm2, esi
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rcx + 9], 1
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r11 + 9], 2
	pinsrb	xmm10, byte ptr [rdx + r13 + 9], 3
	pinsrb	xmm10, byte ptr [rdx + r9 + 9], 4
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r13 + 9], 5
	pinsrb	xmm10, byte ptr [rdx + rdi + 9], 6
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r8 + 9], 7
	pinsrb	xmm10, byte ptr [rdx + r10 + 9], 8
	mov	r14, r10
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 9], 9
	pinsrb	xmm10, byte ptr [rdx + rbx + 9], 10
	mov	r12, rbx
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r10 + 9], 11
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rbx + 9], 12
	pinsrb	xmm10, byte ptr [rdx + r15 + 9], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rdi + 9], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 9], 15
	por	xmm1, xmm8
	movdqa	xmmword ptr [rsp + 208], xmm1   # 16-byte Spill
	pcmpeqb	xmm10, xmm9
	movdqa	xmm1, xmm10
	movdqa	xmm8, xmm4
	pand	xmm1, xmm4
	psubb	xmm1, xmm10
	movzx	esi, byte ptr [rdx + rax + 22]
	movd	xmm3, esi
	movdqa	xmm4, xmmword ptr [rsp + 256]   # 16-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rcx + 8], 1
	pinsrb	xmm4, byte ptr [rdx + r11 + 8], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 8], 3
	pinsrb	xmm4, byte ptr [rdx + r9 + 8], 4
	pinsrb	xmm4, byte ptr [rdx + r13 + 8], 5
	mov	r15, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r15 + 8], 6
	pinsrb	xmm4, byte ptr [rdx + r8 + 8], 7
	pinsrb	xmm4, byte ptr [rdx + r14 + 8], 8
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rsi + 8], 9
	pinsrb	xmm4, byte ptr [rdx + r12 + 8], 10
	pinsrb	xmm4, byte ptr [rdx + r10 + 8], 11
	pinsrb	xmm4, byte ptr [rdx + rbx + 8], 12
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rbx + 8], 13
	pinsrb	xmm4, byte ptr [rdx + rdi + 8], 14
	mov	r10, rdi
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rcx + 8], 15
	pcmpeqb	xmm4, xmm9
	pand	xmm4, xmm8
	movdqa	xmm10, xmmword ptr [rsp + 160]  # 16-byte Reload
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rdi + 10], 1
	pinsrb	xmm10, byte ptr [rdx + r11 + 10], 2
	pinsrb	xmm10, byte ptr [rdx + rax + 10], 3
	pinsrb	xmm10, byte ptr [rdx + r9 + 10], 4
	mov	rax, r9
	mov	r11, r13
	pinsrb	xmm10, byte ptr [rdx + r13 + 10], 5
	mov	r9, r15
	pinsrb	xmm10, byte ptr [rdx + r15 + 10], 6
	pinsrb	xmm10, byte ptr [rdx + r8 + 10], 7
	pinsrb	xmm10, byte ptr [rdx + r14 + 10], 8
	pinsrb	xmm10, byte ptr [rdx + rsi + 10], 9
	pinsrb	xmm10, byte ptr [rdx + r12 + 10], 10
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r14 + 10], 11
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r15 + 10], 12
	pinsrb	xmm10, byte ptr [rdx + rbx + 10], 13
	mov	r13, rbx
	pinsrb	xmm10, byte ptr [rdx + r10 + 10], 14
	pinsrb	xmm10, byte ptr [rdx + rcx + 10], 15
	pcmpeqb	xmm10, xmm9
	pand	xmm10, xmmword ptr [rip + .LCPI2_11]
	por	xmm10, xmm4
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 23]
	movd	xmm8, esi
	por	xmm10, xmm1
	movdqa	xmmword ptr [rsp + 160], xmm10  # 16-byte Spill
	movzx	esi, byte ptr [rdx + rcx + 24]
	movd	xmm10, esi
	pinsrb	xmm11, byte ptr [rdx + rdi + 11], 1
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rcx + 11], 2
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rcx + 11], 3
	pinsrb	xmm11, byte ptr [rdx + rax + 11], 4
	mov	rcx, r11
	pinsrb	xmm11, byte ptr [rdx + r11 + 11], 5
	mov	rdi, r9
	pinsrb	xmm11, byte ptr [rdx + r9 + 11], 6
	pinsrb	xmm11, byte ptr [rdx + r8 + 11], 7
	mov	r9, qword ptr [rsp + 192]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r9 + 11], 8
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r11 + 11], 9
	pinsrb	xmm11, byte ptr [rdx + r12 + 11], 10
	pinsrb	xmm11, byte ptr [rdx + r14 + 11], 11
	pinsrb	xmm11, byte ptr [rdx + r15 + 11], 12
	mov	r10, rbx
	pinsrb	xmm11, byte ptr [rdx + rbx + 11], 13
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r12 + 11], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rsi + 11], 15
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + r13 + 12], 1
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rbx + 12], 2
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rbx + 12], 3
	pinsrb	xmm13, byte ptr [rdx + rax + 12], 4
	pinsrb	xmm13, byte ptr [rdx + rcx + 12], 5
	pinsrb	xmm13, byte ptr [rdx + rdi + 12], 6
	pinsrb	xmm13, byte ptr [rdx + r8 + 12], 7
	pinsrb	xmm13, byte ptr [rdx + r9 + 12], 8
	pinsrb	xmm13, byte ptr [rdx + r11 + 12], 9
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rbx + 12], 10
	pinsrb	xmm13, byte ptr [rdx + r14 + 12], 11
	pinsrb	xmm13, byte ptr [rdx + r15 + 12], 12
	pinsrb	xmm13, byte ptr [rdx + r10 + 12], 13
	mov	r13, r10
	pinsrb	xmm13, byte ptr [rdx + r12 + 12], 14
	pinsrb	xmm13, byte ptr [rdx + rsi + 12], 15
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + r10 + 13], 1
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rsi + 13], 2
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rsi + 13], 3
	pinsrb	xmm12, byte ptr [rdx + rax + 13], 4
	pinsrb	xmm12, byte ptr [rdx + rcx + 13], 5
	pinsrb	xmm12, byte ptr [rdx + rdi + 13], 6
	pinsrb	xmm12, byte ptr [rdx + r8 + 13], 7
	pinsrb	xmm12, byte ptr [rdx + r9 + 13], 8
	pinsrb	xmm12, byte ptr [rdx + r11 + 13], 9
	pinsrb	xmm12, byte ptr [rdx + rbx + 13], 10
	pinsrb	xmm12, byte ptr [rdx + r14 + 13], 11
	pinsrb	xmm12, byte ptr [rdx + r15 + 13], 12
	pinsrb	xmm12, byte ptr [rdx + r13 + 13], 13
	pinsrb	xmm12, byte ptr [rdx + r12 + 13], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rax + 13], 15
	pcmpeqb	xmm11, xmm9
	pand	xmm11, xmmword ptr [rip + .LCPI2_12]
	pcmpeqb	xmm13, xmm9
	pand	xmm13, xmmword ptr [rip + .LCPI2_13]
	por	xmm13, xmm11
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 25]
	movd	xmm1, esi
	pcmpeqb	xmm12, xmm9
	pand	xmm12, xmmword ptr [rip + .LCPI2_14]
	por	xmm12, xmm13
	movzx	esi, byte ptr [rdx + rax + 26]
	movd	xmm11, esi
	movdqa	xmm4, xmmword ptr [rsp + 272]   # 16-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r10 + 14], 1
	mov	rsi, r10
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r12 + 14], 2
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r10 + 14], 3
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r13 + 14], 4
	pinsrb	xmm4, byte ptr [rdx + rcx + 14], 5
	pinsrb	xmm4, byte ptr [rdx + rdi + 14], 6
	pinsrb	xmm4, byte ptr [rdx + r8 + 14], 7
	pinsrb	xmm4, byte ptr [rdx + r9 + 14], 8
	pinsrb	xmm4, byte ptr [rdx + r11 + 14], 9
	pinsrb	xmm4, byte ptr [rdx + rbx + 14], 10
	pinsrb	xmm4, byte ptr [rdx + r14 + 14], 11
	pinsrb	xmm4, byte ptr [rdx + r15 + 14], 12
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 14], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 14], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 14], 15
	pinsrb	xmm14, byte ptr [rdx + rsi + 15], 1
	pinsrb	xmm14, byte ptr [rdx + r12 + 15], 2
	pinsrb	xmm14, byte ptr [rdx + r10 + 15], 3
	pinsrb	xmm14, byte ptr [rdx + r13 + 15], 4
	pinsrb	xmm14, byte ptr [rdx + rcx + 15], 5
	pinsrb	xmm14, byte ptr [rdx + rdi + 15], 6
	pinsrb	xmm14, byte ptr [rdx + r8 + 15], 7
	pinsrb	xmm14, byte ptr [rdx + r9 + 15], 8
	pinsrb	xmm14, byte ptr [rdx + r11 + 15], 9
	pinsrb	xmm14, byte ptr [rdx + rbx + 15], 10
	pinsrb	xmm14, byte ptr [rdx + r14 + 15], 11
	pinsrb	xmm14, byte ptr [rdx + r15 + 15], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rsi + 15], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rax + 15], 14
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rsi + 15], 15
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rsi + 16], 1
	pinsrb	xmm15, byte ptr [rdx + r12 + 16], 2
	pinsrb	xmm15, byte ptr [rdx + r10 + 16], 3
	pinsrb	xmm15, byte ptr [rdx + r13 + 16], 4
	pinsrb	xmm15, byte ptr [rdx + rcx + 16], 5
	pinsrb	xmm15, byte ptr [rdx + rdi + 16], 6
	pinsrb	xmm15, byte ptr [rdx + r8 + 16], 7
	pinsrb	xmm15, byte ptr [rdx + r9 + 16], 8
	pinsrb	xmm15, byte ptr [rdx + r11 + 16], 9
	pinsrb	xmm15, byte ptr [rdx + rbx + 16], 10
	pinsrb	xmm15, byte ptr [rdx + r14 + 16], 11
	pinsrb	xmm15, byte ptr [rdx + r15 + 16], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rsi + 16], 13
	pinsrb	xmm15, byte ptr [rdx + rax + 16], 14
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 17], 1
	pinsrb	xmm0, byte ptr [rdx + r12 + 17], 2
	pinsrb	xmm0, byte ptr [rdx + r10 + 17], 3
	pinsrb	xmm0, byte ptr [rdx + r13 + 17], 4
	pinsrb	xmm0, byte ptr [rdx + rcx + 17], 5
	pinsrb	xmm0, byte ptr [rdx + rdi + 17], 6
	pinsrb	xmm0, byte ptr [rdx + r8 + 17], 7
	mov	rax, r8
	pinsrb	xmm0, byte ptr [rdx + r9 + 17], 8
	pinsrb	xmm0, byte ptr [rdx + r11 + 17], 9
	pinsrb	xmm0, byte ptr [rdx + rbx + 17], 10
	pinsrb	xmm0, byte ptr [rdx + r14 + 17], 11
	pinsrb	xmm0, byte ptr [rdx + r15 + 17], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 17], 13
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 17], 14
	por	xmm12, xmmword ptr [rsp + 160]  # 16-byte Folded Reload
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r12 + 27]
	movd	xmm9, esi
	movdqa	xmm13, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm4, xmm13
	pand	xmm4, xmmword ptr [rip + .LCPI2_15]
	pcmpeqb	xmm14, xmm13
	psllw	xmm14, 7
	pand	xmm14, xmmword ptr [rip + .LCPI2_6]
	por	xmm14, xmm4
	movzx	esi, byte ptr [rdx + r12 + 28]
	movd	xmm4, esi
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r8 + 17], 15
	por	xmm14, xmm12
	pcmpeqb	xmm0, xmm13
	movdqa	xmm13, xmm0
	movdqa	xmm12, xmmword ptr [rip + .LCPI2_10] # xmm12 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm13, xmm12
	psubb	xmm13, xmm0
	movdqa	xmmword ptr [rsp + 160], xmm13  # 16-byte Spill
	movzx	esi, byte ptr [rdx + r12 + 29]
	movd	xmm13, esi
	pinsrb	xmm15, byte ptr [rdx + r8 + 16], 15
	movdqa	xmm0, xmmword ptr [rsp + 176]   # 16-byte Reload
	pcmpeqb	xmm15, xmm0
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r12 + 18], 1
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 18], 2
	pinsrb	xmm5, byte ptr [rdx + r10 + 18], 3
	pinsrb	xmm5, byte ptr [rdx + r13 + 18], 4
	pinsrb	xmm5, byte ptr [rdx + rcx + 18], 5
	pinsrb	xmm5, byte ptr [rdx + rdi + 18], 6
	pinsrb	xmm5, byte ptr [rdx + rax + 18], 7
	pinsrb	xmm5, byte ptr [rdx + r9 + 18], 8
	pinsrb	xmm5, byte ptr [rdx + r11 + 18], 9
	pinsrb	xmm5, byte ptr [rdx + rbx + 18], 10
	pinsrb	xmm5, byte ptr [rdx + r14 + 18], 11
	pinsrb	xmm5, byte ptr [rdx + r15 + 18], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 18], 13
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 18], 14
	pand	xmm15, xmm12
	pinsrb	xmm5, byte ptr [rdx + r8 + 18], 15
	pcmpeqb	xmm5, xmm0
	pand	xmm5, xmmword ptr [rip + .LCPI2_11]
	por	xmm5, xmm15
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 30]
	movd	xmm12, esi
	pinsrb	xmm7, byte ptr [rdx + r12 + 19], 1
	pinsrb	xmm6, byte ptr [rdx + r12 + 20], 1
	pinsrb	xmm2, byte ptr [rdx + r12 + 21], 1
	pinsrb	xmm3, byte ptr [rdx + r12 + 22], 1
	pinsrb	xmm8, byte ptr [rdx + r12 + 23], 1
	pinsrb	xmm10, byte ptr [rdx + r12 + 24], 1
	pinsrb	xmm1, byte ptr [rdx + r12 + 25], 1
	pinsrb	xmm11, byte ptr [rdx + r12 + 26], 1
	pinsrb	xmm9, byte ptr [rdx + r12 + 27], 1
	pinsrb	xmm4, byte ptr [rdx + r12 + 28], 1
	pinsrb	xmm13, byte ptr [rdx + r12 + 29], 1
	pinsrb	xmm12, byte ptr [rdx + r12 + 30], 1
	movzx	esi, byte ptr [rdx + rax + 31]
	movd	xmm0, esi
	pinsrb	xmm0, byte ptr [rdx + r12 + 31], 1
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rsi + 19], 2
	pinsrb	xmm6, byte ptr [rdx + rsi + 20], 2
	pinsrb	xmm2, byte ptr [rdx + rsi + 21], 2
	pinsrb	xmm3, byte ptr [rdx + rsi + 22], 2
	pinsrb	xmm8, byte ptr [rdx + rsi + 23], 2
	pinsrb	xmm10, byte ptr [rdx + rsi + 24], 2
	pinsrb	xmm1, byte ptr [rdx + rsi + 25], 2
	pinsrb	xmm11, byte ptr [rdx + rsi + 26], 2
	pinsrb	xmm9, byte ptr [rdx + rsi + 27], 2
	pinsrb	xmm4, byte ptr [rdx + rsi + 28], 2
	pinsrb	xmm13, byte ptr [rdx + rsi + 29], 2
	pinsrb	xmm12, byte ptr [rdx + rsi + 30], 2
	pinsrb	xmm0, byte ptr [rdx + rsi + 31], 2
	pinsrb	xmm7, byte ptr [rdx + r10 + 19], 3
	pinsrb	xmm7, byte ptr [rdx + r13 + 19], 4
	pinsrb	xmm7, byte ptr [rdx + rcx + 19], 5
	pinsrb	xmm7, byte ptr [rdx + rdi + 19], 6
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 19], 7
	pinsrb	xmm7, byte ptr [rdx + r9 + 19], 8
	pinsrb	xmm7, byte ptr [rdx + r11 + 19], 9
	pinsrb	xmm7, byte ptr [rdx + rbx + 19], 10
	pinsrb	xmm7, byte ptr [rdx + r14 + 19], 11
	pinsrb	xmm7, byte ptr [rdx + r15 + 19], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rsi + 19], 13
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + r12 + 19], 14
	pinsrb	xmm7, byte ptr [rdx + r8 + 19], 15
	pinsrb	xmm6, byte ptr [rdx + r10 + 20], 3
	pinsrb	xmm6, byte ptr [rdx + r13 + 20], 4
	pinsrb	xmm6, byte ptr [rdx + rcx + 20], 5
	pinsrb	xmm6, byte ptr [rdx + rdi + 20], 6
	pinsrb	xmm6, byte ptr [rdx + rax + 20], 7
	pinsrb	xmm6, byte ptr [rdx + r9 + 20], 8
	pinsrb	xmm6, byte ptr [rdx + r11 + 20], 9
	pinsrb	xmm6, byte ptr [rdx + rbx + 20], 10
	pinsrb	xmm6, byte ptr [rdx + r14 + 20], 11
	pinsrb	xmm6, byte ptr [rdx + r15 + 20], 12
	pinsrb	xmm6, byte ptr [rdx + rsi + 20], 13
	pinsrb	xmm6, byte ptr [rdx + r12 + 20], 14
	por	xmm5, xmmword ptr [rsp + 160]   # 16-byte Folded Reload
	pinsrb	xmm6, byte ptr [rdx + r8 + 20], 15
	movdqa	xmm15, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm7, xmm15
	pand	xmm7, xmmword ptr [rip + .LCPI2_12]
	pcmpeqb	xmm6, xmm15
	pand	xmm6, xmmword ptr [rip + .LCPI2_13]
	por	xmm6, xmm7
	pinsrb	xmm2, byte ptr [rdx + r10 + 21], 3
	pinsrb	xmm2, byte ptr [rdx + r13 + 21], 4
	pinsrb	xmm2, byte ptr [rdx + rcx + 21], 5
	pinsrb	xmm2, byte ptr [rdx + rdi + 21], 6
	pinsrb	xmm2, byte ptr [rdx + rax + 21], 7
	pinsrb	xmm2, byte ptr [rdx + r9 + 21], 8
	pinsrb	xmm2, byte ptr [rdx + r11 + 21], 9
	pinsrb	xmm2, byte ptr [rdx + rbx + 21], 10
	pinsrb	xmm2, byte ptr [rdx + r14 + 21], 11
	pinsrb	xmm2, byte ptr [rdx + r15 + 21], 12
	pinsrb	xmm2, byte ptr [rdx + rsi + 21], 13
	pinsrb	xmm2, byte ptr [rdx + r12 + 21], 14
	pinsrb	xmm2, byte ptr [rdx + r8 + 21], 15
	pcmpeqb	xmm2, xmm15
	movdqa	xmm7, xmmword ptr [rip + .LCPI2_14] # xmm7 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm2, xmm7
	por	xmm2, xmm6
	por	xmm2, xmm5
	pinsrb	xmm3, byte ptr [rdx + r10 + 22], 3
	pinsrb	xmm3, byte ptr [rdx + r13 + 22], 4
	pinsrb	xmm3, byte ptr [rdx + rcx + 22], 5
	pinsrb	xmm3, byte ptr [rdx + rdi + 22], 6
	pinsrb	xmm3, byte ptr [rdx + rax + 22], 7
	pinsrb	xmm3, byte ptr [rdx + r9 + 22], 8
	pinsrb	xmm3, byte ptr [rdx + r11 + 22], 9
	pinsrb	xmm3, byte ptr [rdx + rbx + 22], 10
	pinsrb	xmm3, byte ptr [rdx + r14 + 22], 11
	pinsrb	xmm3, byte ptr [rdx + r15 + 22], 12
	pinsrb	xmm3, byte ptr [rdx + rsi + 22], 13
	pinsrb	xmm3, byte ptr [rdx + r12 + 22], 14
	pinsrb	xmm3, byte ptr [rdx + r8 + 22], 15
	pinsrb	xmm8, byte ptr [rdx + r10 + 23], 3
	pinsrb	xmm8, byte ptr [rdx + r13 + 23], 4
	pinsrb	xmm8, byte ptr [rdx + rcx + 23], 5
	pinsrb	xmm8, byte ptr [rdx + rdi + 23], 6
	pinsrb	xmm8, byte ptr [rdx + rax + 23], 7
	pinsrb	xmm8, byte ptr [rdx + r9 + 23], 8
	pinsrb	xmm8, byte ptr [rdx + r11 + 23], 9
	pinsrb	xmm8, byte ptr [rdx + rbx + 23], 10
	pinsrb	xmm8, byte ptr [rdx + r14 + 23], 11
	pinsrb	xmm8, byte ptr [rdx + r15 + 23], 12
	pinsrb	xmm8, byte ptr [rdx + rsi + 23], 13
	pinsrb	xmm8, byte ptr [rdx + r12 + 23], 14
	pinsrb	xmm8, byte ptr [rdx + r8 + 23], 15
	pcmpeqb	xmm3, xmm15
	movdqa	xmm5, xmmword ptr [rip + .LCPI2_15] # xmm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm5
	pcmpeqb	xmm8, xmm15
	psllw	xmm8, 7
	movdqa	xmm6, xmmword ptr [rip + .LCPI2_6] # xmm6 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm8, xmm6
	por	xmm8, xmm3
	pinsrb	xmm1, byte ptr [rdx + r10 + 25], 3
	pinsrb	xmm1, byte ptr [rdx + r13 + 25], 4
	pinsrb	xmm1, byte ptr [rdx + rcx + 25], 5
	pinsrb	xmm1, byte ptr [rdx + rdi + 25], 6
	pinsrb	xmm1, byte ptr [rdx + rax + 25], 7
	pinsrb	xmm1, byte ptr [rdx + r9 + 25], 8
	pinsrb	xmm1, byte ptr [rdx + r11 + 25], 9
	pinsrb	xmm1, byte ptr [rdx + rbx + 25], 10
	pinsrb	xmm1, byte ptr [rdx + r14 + 25], 11
	pinsrb	xmm1, byte ptr [rdx + r15 + 25], 12
	pinsrb	xmm1, byte ptr [rdx + rsi + 25], 13
	pinsrb	xmm1, byte ptr [rdx + r12 + 25], 14
	pinsrb	xmm1, byte ptr [rdx + r8 + 25], 15
	por	xmm8, xmm2
	pcmpeqb	xmm1, xmm15
	movdqa	xmm2, xmm1
	movdqa	xmm3, xmmword ptr [rip + .LCPI2_10] # xmm3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm2, xmm3
	psubb	xmm2, xmm1
	pinsrb	xmm10, byte ptr [rdx + r10 + 24], 3
	pinsrb	xmm10, byte ptr [rdx + r13 + 24], 4
	pinsrb	xmm10, byte ptr [rdx + rcx + 24], 5
	pinsrb	xmm10, byte ptr [rdx + rdi + 24], 6
	pinsrb	xmm10, byte ptr [rdx + rax + 24], 7
	pinsrb	xmm10, byte ptr [rdx + r9 + 24], 8
	pinsrb	xmm10, byte ptr [rdx + r11 + 24], 9
	pinsrb	xmm10, byte ptr [rdx + rbx + 24], 10
	pinsrb	xmm10, byte ptr [rdx + r14 + 24], 11
	pinsrb	xmm10, byte ptr [rdx + r15 + 24], 12
	pinsrb	xmm10, byte ptr [rdx + rsi + 24], 13
	pinsrb	xmm10, byte ptr [rdx + r12 + 24], 14
	pinsrb	xmm10, byte ptr [rdx + r8 + 24], 15
	pcmpeqb	xmm10, xmm15
	pand	xmm10, xmm3
	pinsrb	xmm11, byte ptr [rdx + r10 + 26], 3
	pinsrb	xmm11, byte ptr [rdx + r13 + 26], 4
	pinsrb	xmm11, byte ptr [rdx + rcx + 26], 5
	pinsrb	xmm11, byte ptr [rdx + rdi + 26], 6
	pinsrb	xmm11, byte ptr [rdx + rax + 26], 7
	pinsrb	xmm11, byte ptr [rdx + r9 + 26], 8
	pinsrb	xmm11, byte ptr [rdx + r11 + 26], 9
	pinsrb	xmm11, byte ptr [rdx + rbx + 26], 10
	pinsrb	xmm11, byte ptr [rdx + r14 + 26], 11
	pinsrb	xmm11, byte ptr [rdx + r15 + 26], 12
	pinsrb	xmm11, byte ptr [rdx + rsi + 26], 13
	pinsrb	xmm11, byte ptr [rdx + r12 + 26], 14
	pinsrb	xmm11, byte ptr [rdx + r8 + 26], 15
	pcmpeqb	xmm11, xmm15
	pand	xmm11, xmmword ptr [rip + .LCPI2_11]
	por	xmm11, xmm10
	por	xmm11, xmm2
	pinsrb	xmm9, byte ptr [rdx + r10 + 27], 3
	pinsrb	xmm9, byte ptr [rdx + r13 + 27], 4
	pinsrb	xmm9, byte ptr [rdx + rcx + 27], 5
	pinsrb	xmm9, byte ptr [rdx + rdi + 27], 6
	pinsrb	xmm9, byte ptr [rdx + rax + 27], 7
	pinsrb	xmm9, byte ptr [rdx + r9 + 27], 8
	pinsrb	xmm9, byte ptr [rdx + r11 + 27], 9
	pinsrb	xmm9, byte ptr [rdx + rbx + 27], 10
	pinsrb	xmm9, byte ptr [rdx + r14 + 27], 11
	pinsrb	xmm9, byte ptr [rdx + r15 + 27], 12
	pinsrb	xmm9, byte ptr [rdx + rsi + 27], 13
	pinsrb	xmm9, byte ptr [rdx + r12 + 27], 14
	pinsrb	xmm9, byte ptr [rdx + r8 + 27], 15
	pinsrb	xmm4, byte ptr [rdx + r10 + 28], 3
	pinsrb	xmm4, byte ptr [rdx + r13 + 28], 4
	pinsrb	xmm4, byte ptr [rdx + rcx + 28], 5
	pinsrb	xmm4, byte ptr [rdx + rdi + 28], 6
	pinsrb	xmm4, byte ptr [rdx + rax + 28], 7
	pinsrb	xmm4, byte ptr [rdx + r9 + 28], 8
	pinsrb	xmm4, byte ptr [rdx + r11 + 28], 9
	pinsrb	xmm4, byte ptr [rdx + rbx + 28], 10
	pinsrb	xmm4, byte ptr [rdx + r14 + 28], 11
	pinsrb	xmm4, byte ptr [rdx + r15 + 28], 12
	pinsrb	xmm4, byte ptr [rdx + rsi + 28], 13
	pinsrb	xmm4, byte ptr [rdx + r12 + 28], 14
	pinsrb	xmm4, byte ptr [rdx + r8 + 28], 15
	pinsrb	xmm13, byte ptr [rdx + r10 + 29], 3
	pinsrb	xmm13, byte ptr [rdx + r13 + 29], 4
	pinsrb	xmm13, byte ptr [rdx + rcx + 29], 5
	pinsrb	xmm13, byte ptr [rdx + rdi + 29], 6
	pinsrb	xmm13, byte ptr [rdx + rax + 29], 7
	pinsrb	xmm13, byte ptr [rdx + r9 + 29], 8
	pinsrb	xmm13, byte ptr [rdx + r11 + 29], 9
	pinsrb	xmm13, byte ptr [rdx + rbx + 29], 10
	pinsrb	xmm13, byte ptr [rdx + r14 + 29], 11
	pinsrb	xmm13, byte ptr [rdx + r15 + 29], 12
	pinsrb	xmm13, byte ptr [rdx + rsi + 29], 13
	pinsrb	xmm13, byte ptr [rdx + r12 + 29], 14
	movdqa	xmm1, xmm15
	pcmpeqb	xmm9, xmm15
	pand	xmm9, xmmword ptr [rip + .LCPI2_12]
	pcmpeqb	xmm4, xmm15
	pand	xmm4, xmmword ptr [rip + .LCPI2_13]
	por	xmm4, xmm9
	pinsrb	xmm13, byte ptr [rdx + r8 + 29], 15
	pcmpeqb	xmm13, xmm15
	pand	xmm13, xmm7
	por	xmm13, xmm4
	pinsrb	xmm12, byte ptr [rdx + r10 + 30], 3
	pinsrb	xmm0, byte ptr [rdx + r10 + 31], 3
	pinsrb	xmm12, byte ptr [rdx + r13 + 30], 4
	pinsrb	xmm0, byte ptr [rdx + r13 + 31], 4
	pinsrb	xmm12, byte ptr [rdx + rcx + 30], 5
	pinsrb	xmm0, byte ptr [rdx + rcx + 31], 5
	pinsrb	xmm12, byte ptr [rdx + rdi + 30], 6
	pinsrb	xmm0, byte ptr [rdx + rdi + 31], 6
	pinsrb	xmm12, byte ptr [rdx + rax + 30], 7
	pinsrb	xmm0, byte ptr [rdx + rax + 31], 7
	pinsrb	xmm12, byte ptr [rdx + r9 + 30], 8
	pinsrb	xmm0, byte ptr [rdx + r9 + 31], 8
	pinsrb	xmm12, byte ptr [rdx + r11 + 30], 9
	pinsrb	xmm0, byte ptr [rdx + r11 + 31], 9
	pinsrb	xmm12, byte ptr [rdx + rbx + 30], 10
	pinsrb	xmm0, byte ptr [rdx + rbx + 31], 10
	pinsrb	xmm12, byte ptr [rdx + r14 + 30], 11
	pinsrb	xmm0, byte ptr [rdx + r14 + 31], 11
	pinsrb	xmm12, byte ptr [rdx + r15 + 30], 12
	pinsrb	xmm0, byte ptr [rdx + r15 + 31], 12
	pinsrb	xmm12, byte ptr [rdx + rsi + 30], 13
	pinsrb	xmm0, byte ptr [rdx + rsi + 31], 13
	pinsrb	xmm12, byte ptr [rdx + r12 + 30], 14
	pinsrb	xmm0, byte ptr [rdx + r12 + 31], 14
	pinsrb	xmm12, byte ptr [rdx + r8 + 30], 15
	pinsrb	xmm0, byte ptr [rdx + r8 + 31], 15
	por	xmm13, xmm11
	pcmpeqb	xmm12, xmm15
	pand	xmm12, xmm5
	pcmpeqb	xmm0, xmm15
	psllw	xmm0, 7
	pand	xmm0, xmm6
	por	xmm0, xmm12
	por	xmm0, xmm13
	movdqa	xmm1, xmm8
	punpcklbw	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	movdqa	xmm4, xmmword ptr [rsp + 208]   # 16-byte Reload
	movdqa	xmm2, xmm4
	punpcklbw	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0],xmm2[1],xmm14[1],xmm2[2],xmm14[2],xmm2[3],xmm14[3],xmm2[4],xmm14[4],xmm2[5],xmm14[5],xmm2[6],xmm14[6],xmm2[7],xmm14[7]
	movdqa	xmm3, xmm2
	punpcklwd	xmm3, xmm1              # xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1],xmm3[2],xmm1[2],xmm3[3],xmm1[3]
	punpckhwd	xmm2, xmm1              # xmm2 = xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
	punpckhbw	xmm8, xmm0              # xmm8 = xmm8[8],xmm0[8],xmm8[9],xmm0[9],xmm8[10],xmm0[10],xmm8[11],xmm0[11],xmm8[12],xmm0[12],xmm8[13],xmm0[13],xmm8[14],xmm0[14],xmm8[15],xmm0[15]
	punpckhbw	xmm4, xmm14             # xmm4 = xmm4[8],xmm14[8],xmm4[9],xmm14[9],xmm4[10],xmm14[10],xmm4[11],xmm14[11],xmm4[12],xmm14[12],xmm4[13],xmm14[13],xmm4[14],xmm14[14],xmm4[15],xmm14[15]
	movdqa	xmm0, xmm4
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm4, xmm8              # xmm4 = xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	movdqu	xmmword ptr [rax + 4*rcx + 48], xmm4
	movdqu	xmmword ptr [rax + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [rax + 4*rcx + 16], xmm2
	movdqu	xmmword ptr [rax + 4*rcx], xmm3
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 232]      # 8-byte Folded Reload
	jne	.LBB2_186
# %bb.187:
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	r14b, byte ptr [rsp + 8]        # 1-byte Reload
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	jne	.LBB2_43
	jmp	.LBB2_131
.LBB2_188:
	and	r15, -16
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 248], rax      # 8-byte Spill
	mov	qword ptr [rsp + 232], r15      # 8-byte Spill
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	lea	rax, [rax + 4*r15]
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	movzx	eax, r14b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 176], xmm1   # 16-byte Spill
	xor	eax, eax
	.p2align	4, 0x90
.LBB2_189:                              # =>This Inner Loop Header: Depth=1
	mov	r15, rax
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	shl	r15, 5
	mov	rbx, r15
	mov	rax, r15
	mov	rcx, r15
	mov	rdi, r15
	mov	r8, r15
	mov	r9, r15
	mov	r11, r15
	mov	r12, r15
	mov	r10, r15
	mov	r13, r15
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	movzx	esi, byte ptr [rdx + r15]
	movd	xmm15, esi
	movzx	esi, byte ptr [rdx + r15 + 1]
	movd	xmm5, esi
	movzx	esi, byte ptr [rdx + r15 + 2]
	movd	xmm6, esi
	movzx	esi, byte ptr [rdx + r15 + 3]
	movd	xmm2, esi
	movzx	esi, byte ptr [rdx + r15 + 4]
	movd	xmm1, esi
	movzx	esi, byte ptr [rdx + r15 + 5]
	movd	xmm8, esi
	movzx	esi, byte ptr [rdx + r15 + 6]
	movd	xmm3, esi
	movzx	esi, byte ptr [rdx + r15 + 7]
	movd	xmm0, esi
	movdqa	xmmword ptr [rsp + 192], xmm0   # 16-byte Spill
	movzx	esi, byte ptr [rdx + r15 + 8]
	movd	xmm0, esi
	movdqa	xmmword ptr [rsp + 272], xmm0   # 16-byte Spill
	movzx	esi, byte ptr [rdx + r15 + 9]
	movd	xmm10, esi
	movzx	esi, byte ptr [rdx + r15 + 10]
	movd	xmm0, esi
	movdqa	xmmword ptr [rsp + 160], xmm0   # 16-byte Spill
	movzx	esi, byte ptr [rdx + r15 + 11]
	movd	xmm11, esi
	movzx	esi, byte ptr [rdx + r15 + 12]
	movd	xmm13, esi
	movzx	esi, byte ptr [rdx + r15 + 13]
	movd	xmm12, esi
	movzx	esi, byte ptr [rdx + r15 + 14]
	movd	xmm0, esi
	movdqa	xmmword ptr [rsp + 256], xmm0   # 16-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	r14, r15
	or	r14, 32
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	or	rbx, 64
	mov	qword ptr [rsp + 72], rbx       # 8-byte Spill
	or	rax, 96
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	or	rcx, 128
	or	rdi, 160
	or	r8, 192
	or	r9, 224
	or	r11, 256
	or	r12, 288
	mov	qword ptr [rsp + 64], r12       # 8-byte Spill
	or	r10, 320
	mov	qword ptr [rsp + 88], r10       # 8-byte Spill
	mov	r10, r15
	or	r10, 352
	mov	qword ptr [rsp + 80], r10       # 8-byte Spill
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	or	r12, 384
	mov	rsi, r15
	or	rsi, 416
	mov	qword ptr [rsp + 16], rsi       # 8-byte Spill
	or	r13, 448
	mov	qword ptr [rsp + 24], r13       # 8-byte Spill
	mov	rsi, r15
	or	rsi, 480
	mov	qword ptr [rsp + 40], rsi       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r14], 1
	pinsrb	xmm15, byte ptr [rdx + rbx], 2
	pinsrb	xmm15, byte ptr [rdx + rax], 3
	mov	qword ptr [rsp + 128], rcx      # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + rcx], 4
	pinsrb	xmm15, byte ptr [rdx + rdi], 5
	mov	qword ptr [rsp + 96], r8        # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r8], 6
	mov	qword ptr [rsp + 208], r9       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r9], 7
	mov	qword ptr [rsp + 120], r11      # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r11], 8
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r14], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r15], 10
	pinsrb	xmm15, byte ptr [rdx + r10], 11
	mov	qword ptr [rsp + 32], r12       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r12], 12
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r10], 13
	pinsrb	xmm15, byte ptr [rdx + r13], 14
	pinsrb	xmm15, byte ptr [rdx + rsi], 15
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rbx + 1], 1
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rbx + 1], 2
	pinsrb	xmm5, byte ptr [rdx + rax + 1], 3
	pinsrb	xmm5, byte ptr [rdx + rcx + 1], 4
	pinsrb	xmm5, byte ptr [rdx + rdi + 1], 5
	pinsrb	xmm5, byte ptr [rdx + r8 + 1], 6
	pinsrb	xmm5, byte ptr [rdx + r9 + 1], 7
	pinsrb	xmm5, byte ptr [rdx + r11 + 1], 8
	pinsrb	xmm5, byte ptr [rdx + r14 + 1], 9
	mov	rax, r14
	pinsrb	xmm5, byte ptr [rdx + r15 + 1], 10
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rcx + 1], 11
	pinsrb	xmm5, byte ptr [rdx + r12 + 1], 12
	pinsrb	xmm5, byte ptr [rdx + r10 + 1], 13
	pinsrb	xmm5, byte ptr [rdx + r13 + 1], 14
	pinsrb	xmm5, byte ptr [rdx + rsi + 1], 15
	movdqa	xmm9, xmmword ptr [rsp + 176]   # 16-byte Reload
	pcmpeqb	xmm5, xmm9
	movdqa	xmm7, xmm5
	movdqa	xmm4, xmmword ptr [rip + .LCPI2_10] # xmm4 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm7, xmm4
	psubb	xmm7, xmm5
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r13 + 15]
	movd	xmm14, esi
	pcmpeqb	xmm15, xmm9
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rcx + 2], 1
	pinsrb	xmm6, byte ptr [rdx + rbx + 2], 2
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r11 + 2], 3
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r8 + 2], 4
	pinsrb	xmm6, byte ptr [rdx + rdi + 2], 5
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r12 + 2], 6
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r14 + 2], 7
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r15 + 2], 8
	pinsrb	xmm6, byte ptr [rdx + rax + 2], 9
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 2], 10
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r10 + 2], 11
	mov	r9, qword ptr [rsp + 32]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r9 + 2], 12
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 2], 13
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 2], 14
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 2], 15
	pand	xmm15, xmm4
	pcmpeqb	xmm6, xmm9
	movdqa	xmm0, xmmword ptr [rip + .LCPI2_11] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm6, xmm0
	por	xmm6, xmm15
	movzx	esi, byte ptr [rdx + r13 + 16]
	movd	xmm15, esi
	pinsrb	xmm2, byte ptr [rdx + rcx + 3], 1
	pinsrb	xmm2, byte ptr [rdx + rbx + 3], 2
	mov	rcx, r11
	pinsrb	xmm2, byte ptr [rdx + r11 + 3], 3
	pinsrb	xmm2, byte ptr [rdx + r8 + 3], 4
	mov	qword ptr [rsp + 136], rdi      # 8-byte Spill
	pinsrb	xmm2, byte ptr [rdx + rdi + 3], 5
	mov	r11, r12
	pinsrb	xmm2, byte ptr [rdx + r12 + 3], 6
	pinsrb	xmm2, byte ptr [rdx + r14 + 3], 7
	mov	rsi, r15
	pinsrb	xmm2, byte ptr [rdx + r15 + 3], 8
	pinsrb	xmm2, byte ptr [rdx + rax + 3], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r15 + 3], 10
	pinsrb	xmm2, byte ptr [rdx + r10 + 3], 11
	pinsrb	xmm2, byte ptr [rdx + r9 + 3], 12
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r12 + 3], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 3], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 3], 15
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r13 + 4], 1
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rbx + 4], 2
	pinsrb	xmm1, byte ptr [rdx + rcx + 4], 3
	pinsrb	xmm1, byte ptr [rdx + r8 + 4], 4
	pinsrb	xmm1, byte ptr [rdx + rdi + 4], 5
	pinsrb	xmm1, byte ptr [rdx + r11 + 4], 6
	pinsrb	xmm1, byte ptr [rdx + r14 + 4], 7
	mov	r8, r14
	pinsrb	xmm1, byte ptr [rdx + rsi + 4], 8
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rsi + 4], 9
	pinsrb	xmm1, byte ptr [rdx + r15 + 4], 10
	pinsrb	xmm1, byte ptr [rdx + r10 + 4], 11
	mov	r15, r10
	pinsrb	xmm1, byte ptr [rdx + r9 + 4], 12
	pinsrb	xmm1, byte ptr [rdx + r12 + 4], 13
	mov	rbx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rbx + 4], 14
	pinsrb	xmm1, byte ptr [rdx + rax + 4], 15
	mov	r10, rax
	por	xmm6, xmm7
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rdi + 17]
	movd	xmm0, esi
	pcmpeqb	xmm2, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI2_12] # xmm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm2, xmm5
	pcmpeqb	xmm1, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI2_13] # xmm5 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm1, xmm5
	por	xmm1, xmm2
	movzx	esi, byte ptr [rdx + rdi + 18]
	movd	xmm5, esi
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r13 + 5], 1
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r11 + 5], 2
	pinsrb	xmm8, byte ptr [rdx + rcx + 5], 3
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r14 + 5], 4
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r9 + 5], 5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rax + 5], 6
	mov	rcx, r8
	pinsrb	xmm8, byte ptr [rdx + r8 + 5], 7
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r8 + 5], 8
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rsi + 5], 9
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rsi + 5], 10
	pinsrb	xmm8, byte ptr [rdx + r15 + 5], 11
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r12 + 5], 12
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rsi + 5], 13
	pinsrb	xmm8, byte ptr [rdx + rbx + 5], 14
	pinsrb	xmm8, byte ptr [rdx + r10 + 5], 15
	pcmpeqb	xmm8, xmm9
	movdqa	xmm2, xmmword ptr [rip + .LCPI2_14] # xmm2 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm8, xmm2
	por	xmm8, xmm1
	movzx	esi, byte ptr [rdx + rdi + 19]
	movd	xmm7, esi
	por	xmm8, xmm6
	movzx	esi, byte ptr [rdx + rdi + 20]
	movd	xmm6, esi
	pinsrb	xmm3, byte ptr [rdx + r13 + 6], 1
	mov	rsi, r11
	pinsrb	xmm3, byte ptr [rdx + r11 + 6], 2
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r10 + 6], 3
	mov	r11, r14
	pinsrb	xmm3, byte ptr [rdx + r14 + 6], 4
	pinsrb	xmm3, byte ptr [rdx + r9 + 6], 5
	pinsrb	xmm3, byte ptr [rdx + rax + 6], 6
	pinsrb	xmm3, byte ptr [rdx + rcx + 6], 7
	mov	r14, rcx
	pinsrb	xmm3, byte ptr [rdx + r8 + 6], 8
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rdi + 6], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r15 + 6], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rax + 6], 11
	mov	rbx, r12
	pinsrb	xmm3, byte ptr [rdx + r12 + 6], 12
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r12 + 6], 13
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rcx + 6], 14
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rcx + 6], 15
	movdqa	xmm2, xmmword ptr [rsp + 192]   # 16-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r13 + 7], 1
	pinsrb	xmm2, byte ptr [rdx + rsi + 7], 2
	mov	r13, rsi
	pinsrb	xmm2, byte ptr [rdx + r10 + 7], 3
	mov	r10, r11
	pinsrb	xmm2, byte ptr [rdx + r11 + 7], 4
	pinsrb	xmm2, byte ptr [rdx + r9 + 7], 5
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rcx + 7], 6
	pinsrb	xmm2, byte ptr [rdx + r14 + 7], 7
	pinsrb	xmm2, byte ptr [rdx + r8 + 7], 8
	mov	rcx, r8
	pinsrb	xmm2, byte ptr [rdx + rdi + 7], 9
	pinsrb	xmm2, byte ptr [rdx + r15 + 7], 10
	pinsrb	xmm2, byte ptr [rdx + rax + 7], 11
	pinsrb	xmm2, byte ptr [rdx + rbx + 7], 12
	pinsrb	xmm2, byte ptr [rdx + r12 + 7], 13
	mov	r11, r12
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r12 + 7], 14
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rbx + 7], 15
	pcmpeqb	xmm3, xmm9
	movdqa	xmm1, xmmword ptr [rip + .LCPI2_15] # xmm1 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm1
	pcmpeqb	xmm2, xmm9
	psllw	xmm2, 7
	movdqa	xmm1, xmmword ptr [rip + .LCPI2_6] # xmm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm2, xmm1
	por	xmm2, xmm3
	movdqa	xmm1, xmm2
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 21]
	movd	xmm2, esi
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r9 + 9], 1
	pinsrb	xmm10, byte ptr [rdx + r13 + 9], 2
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r8 + 9], 3
	pinsrb	xmm10, byte ptr [rdx + r10 + 9], 4
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rdi + 9], 5
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r13 + 9], 6
	pinsrb	xmm10, byte ptr [rdx + r14 + 9], 7
	pinsrb	xmm10, byte ptr [rdx + rcx + 9], 8
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 9], 9
	pinsrb	xmm10, byte ptr [rdx + r15 + 9], 10
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 9], 11
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 9], 12
	pinsrb	xmm10, byte ptr [rdx + r11 + 9], 13
	pinsrb	xmm10, byte ptr [rdx + r12 + 9], 14
	pinsrb	xmm10, byte ptr [rdx + rbx + 9], 15
	por	xmm1, xmm8
	movdqa	xmmword ptr [rsp + 192], xmm1   # 16-byte Spill
	pcmpeqb	xmm10, xmm9
	movdqa	xmm1, xmm10
	movdqa	xmm8, xmm4
	pand	xmm1, xmm4
	psubb	xmm1, xmm10
	movzx	esi, byte ptr [rdx + rax + 22]
	movd	xmm3, esi
	movdqa	xmm4, xmmword ptr [rsp + 272]   # 16-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r9 + 8], 1
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r12 + 8], 2
	pinsrb	xmm4, byte ptr [rdx + r8 + 8], 3
	mov	r8, r10
	pinsrb	xmm4, byte ptr [rdx + r10 + 8], 4
	pinsrb	xmm4, byte ptr [rdx + rdi + 8], 5
	pinsrb	xmm4, byte ptr [rdx + r13 + 8], 6
	pinsrb	xmm4, byte ptr [rdx + r14 + 8], 7
	pinsrb	xmm4, byte ptr [rdx + rcx + 8], 8
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rbx + 8], 9
	pinsrb	xmm4, byte ptr [rdx + r15 + 8], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 8], 11
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rsi + 8], 12
	pinsrb	xmm4, byte ptr [rdx + r11 + 8], 13
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r10 + 8], 14
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rcx + 8], 15
	pcmpeqb	xmm4, xmm9
	pand	xmm4, xmm8
	movdqa	xmm10, xmmword ptr [rsp + 160]  # 16-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r9 + 10], 1
	pinsrb	xmm10, byte ptr [rdx + r12 + 10], 2
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r9 + 10], 3
	pinsrb	xmm10, byte ptr [rdx + r8 + 10], 4
	pinsrb	xmm10, byte ptr [rdx + rdi + 10], 5
	pinsrb	xmm10, byte ptr [rdx + r13 + 10], 6
	mov	r8, r13
	pinsrb	xmm10, byte ptr [rdx + r14 + 10], 7
	mov	r13, r14
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r14 + 10], 8
	pinsrb	xmm10, byte ptr [rdx + rbx + 10], 9
	pinsrb	xmm10, byte ptr [rdx + r15 + 10], 10
	mov	rbx, r15
	pinsrb	xmm10, byte ptr [rdx + rax + 10], 11
	pinsrb	xmm10, byte ptr [rdx + rsi + 10], 12
	pinsrb	xmm10, byte ptr [rdx + r11 + 10], 13
	pinsrb	xmm10, byte ptr [rdx + r10 + 10], 14
	pinsrb	xmm10, byte ptr [rdx + rcx + 10], 15
	pcmpeqb	xmm10, xmm9
	pand	xmm10, xmmword ptr [rip + .LCPI2_11]
	por	xmm10, xmm4
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 23]
	movd	xmm8, esi
	por	xmm10, xmm1
	movdqa	xmmword ptr [rsp + 160], xmm10  # 16-byte Spill
	movzx	esi, byte ptr [rdx + rcx + 24]
	movd	xmm10, esi
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r10 + 11], 1
	pinsrb	xmm11, byte ptr [rdx + r12 + 11], 2
	mov	rcx, r9
	pinsrb	xmm11, byte ptr [rdx + r9 + 11], 3
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r11 + 11], 4
	pinsrb	xmm11, byte ptr [rdx + rdi + 11], 5
	pinsrb	xmm11, byte ptr [rdx + r8 + 11], 6
	mov	r15, r8
	pinsrb	xmm11, byte ptr [rdx + r13 + 11], 7
	pinsrb	xmm11, byte ptr [rdx + r14 + 11], 8
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r8 + 11], 9
	pinsrb	xmm11, byte ptr [rdx + rbx + 11], 10
	mov	rbx, rax
	pinsrb	xmm11, byte ptr [rdx + rax + 11], 11
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r13 + 11], 12
	mov	r9, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r9 + 11], 13
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rsi + 11], 14
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rax + 11], 15
	pinsrb	xmm13, byte ptr [rdx + r10 + 12], 1
	pinsrb	xmm13, byte ptr [rdx + r12 + 12], 2
	pinsrb	xmm13, byte ptr [rdx + rcx + 12], 3
	pinsrb	xmm13, byte ptr [rdx + r11 + 12], 4
	pinsrb	xmm13, byte ptr [rdx + rdi + 12], 5
	pinsrb	xmm13, byte ptr [rdx + r15 + 12], 6
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + r11 + 12], 7
	pinsrb	xmm13, byte ptr [rdx + r14 + 12], 8
	pinsrb	xmm13, byte ptr [rdx + r8 + 12], 9
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + r15 + 12], 10
	pinsrb	xmm13, byte ptr [rdx + rbx + 12], 11
	pinsrb	xmm13, byte ptr [rdx + r13 + 12], 12
	pinsrb	xmm13, byte ptr [rdx + r9 + 12], 13
	pinsrb	xmm13, byte ptr [rdx + rsi + 12], 14
	pinsrb	xmm13, byte ptr [rdx + rax + 12], 15
	pinsrb	xmm12, byte ptr [rdx + r10 + 13], 1
	pinsrb	xmm12, byte ptr [rdx + r12 + 13], 2
	pinsrb	xmm12, byte ptr [rdx + rcx + 13], 3
	mov	r10, rcx
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rcx + 13], 4
	pinsrb	xmm12, byte ptr [rdx + rdi + 13], 5
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rdi + 13], 6
	pinsrb	xmm12, byte ptr [rdx + r11 + 13], 7
	pinsrb	xmm12, byte ptr [rdx + r14 + 13], 8
	mov	r14, r8
	pinsrb	xmm12, byte ptr [rdx + r8 + 13], 9
	pinsrb	xmm12, byte ptr [rdx + r15 + 13], 10
	pinsrb	xmm12, byte ptr [rdx + rbx + 13], 11
	pinsrb	xmm12, byte ptr [rdx + r13 + 13], 12
	pinsrb	xmm12, byte ptr [rdx + r9 + 13], 13
	mov	r13, r9
	pinsrb	xmm12, byte ptr [rdx + rsi + 13], 14
	pinsrb	xmm12, byte ptr [rdx + rax + 13], 15
	pcmpeqb	xmm11, xmm9
	pand	xmm11, xmmword ptr [rip + .LCPI2_12]
	pcmpeqb	xmm13, xmm9
	pand	xmm13, xmmword ptr [rip + .LCPI2_13]
	por	xmm13, xmm11
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rbx + 25]
	movd	xmm1, esi
	pcmpeqb	xmm12, xmm9
	pand	xmm12, xmmword ptr [rip + .LCPI2_14]
	por	xmm12, xmm13
	movzx	esi, byte ptr [rdx + rbx + 26]
	movd	xmm11, esi
	movdqa	xmm4, xmmword ptr [rsp + 256]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 14], 1
	pinsrb	xmm4, byte ptr [rdx + r12 + 14], 2
	pinsrb	xmm4, byte ptr [rdx + r10 + 14], 3
	mov	rax, rcx
	pinsrb	xmm4, byte ptr [rdx + rcx + 14], 4
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rcx + 14], 5
	pinsrb	xmm4, byte ptr [rdx + rdi + 14], 6
	mov	r8, r11
	pinsrb	xmm4, byte ptr [rdx + r11 + 14], 7
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r9 + 14], 8
	mov	rbx, r14
	pinsrb	xmm4, byte ptr [rdx + r14 + 14], 9
	mov	r11, r15
	pinsrb	xmm4, byte ptr [rdx + r15 + 14], 10
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r14 + 14], 11
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r15 + 14], 12
	pinsrb	xmm4, byte ptr [rdx + r13 + 14], 13
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r13 + 14], 14
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rsi + 14], 15
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rsi + 15], 1
	pinsrb	xmm14, byte ptr [rdx + r12 + 15], 2
	pinsrb	xmm14, byte ptr [rdx + r10 + 15], 3
	pinsrb	xmm14, byte ptr [rdx + rax + 15], 4
	pinsrb	xmm14, byte ptr [rdx + rcx + 15], 5
	pinsrb	xmm14, byte ptr [rdx + rdi + 15], 6
	pinsrb	xmm14, byte ptr [rdx + r8 + 15], 7
	pinsrb	xmm14, byte ptr [rdx + r9 + 15], 8
	pinsrb	xmm14, byte ptr [rdx + rbx + 15], 9
	pinsrb	xmm14, byte ptr [rdx + r11 + 15], 10
	pinsrb	xmm14, byte ptr [rdx + r14 + 15], 11
	pinsrb	xmm14, byte ptr [rdx + r15 + 15], 12
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rsi + 15], 13
	pinsrb	xmm14, byte ptr [rdx + r13 + 15], 14
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rsi + 15], 15
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rsi + 16], 1
	pinsrb	xmm15, byte ptr [rdx + r12 + 16], 2
	pinsrb	xmm15, byte ptr [rdx + r10 + 16], 3
	pinsrb	xmm15, byte ptr [rdx + rax + 16], 4
	pinsrb	xmm15, byte ptr [rdx + rcx + 16], 5
	pinsrb	xmm15, byte ptr [rdx + rdi + 16], 6
	pinsrb	xmm15, byte ptr [rdx + r8 + 16], 7
	pinsrb	xmm15, byte ptr [rdx + r9 + 16], 8
	pinsrb	xmm15, byte ptr [rdx + rbx + 16], 9
	pinsrb	xmm15, byte ptr [rdx + r11 + 16], 10
	pinsrb	xmm15, byte ptr [rdx + r14 + 16], 11
	pinsrb	xmm15, byte ptr [rdx + r15 + 16], 12
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rsi + 16], 13
	pinsrb	xmm15, byte ptr [rdx + r13 + 16], 14
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 17], 1
	pinsrb	xmm0, byte ptr [rdx + r12 + 17], 2
	pinsrb	xmm0, byte ptr [rdx + r10 + 17], 3
	pinsrb	xmm0, byte ptr [rdx + rax + 17], 4
	mov	r13, rax
	pinsrb	xmm0, byte ptr [rdx + rcx + 17], 5
	pinsrb	xmm0, byte ptr [rdx + rdi + 17], 6
	pinsrb	xmm0, byte ptr [rdx + r8 + 17], 7
	mov	rax, r8
	pinsrb	xmm0, byte ptr [rdx + r9 + 17], 8
	pinsrb	xmm0, byte ptr [rdx + rbx + 17], 9
	pinsrb	xmm0, byte ptr [rdx + r11 + 17], 10
	pinsrb	xmm0, byte ptr [rdx + r14 + 17], 11
	pinsrb	xmm0, byte ptr [rdx + r15 + 17], 12
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 17], 13
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 17], 14
	por	xmm12, xmmword ptr [rsp + 160]  # 16-byte Folded Reload
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r12 + 27]
	movd	xmm9, esi
	movdqa	xmm13, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm4, xmm13
	pand	xmm4, xmmword ptr [rip + .LCPI2_15]
	pcmpeqb	xmm14, xmm13
	psllw	xmm14, 7
	pand	xmm14, xmmword ptr [rip + .LCPI2_6]
	por	xmm14, xmm4
	movzx	esi, byte ptr [rdx + r12 + 28]
	movd	xmm4, esi
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r8 + 17], 15
	por	xmm14, xmm12
	pcmpeqb	xmm0, xmm13
	movdqa	xmm13, xmm0
	movdqa	xmm12, xmmword ptr [rip + .LCPI2_10] # xmm12 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm13, xmm12
	psubb	xmm13, xmm0
	movdqa	xmmword ptr [rsp + 160], xmm13  # 16-byte Spill
	movzx	esi, byte ptr [rdx + r12 + 29]
	movd	xmm13, esi
	pinsrb	xmm15, byte ptr [rdx + r8 + 16], 15
	movdqa	xmm0, xmmword ptr [rsp + 176]   # 16-byte Reload
	pcmpeqb	xmm15, xmm0
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r12 + 18], 1
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 18], 2
	pinsrb	xmm5, byte ptr [rdx + r10 + 18], 3
	pinsrb	xmm5, byte ptr [rdx + r13 + 18], 4
	pinsrb	xmm5, byte ptr [rdx + rcx + 18], 5
	pinsrb	xmm5, byte ptr [rdx + rdi + 18], 6
	pinsrb	xmm5, byte ptr [rdx + rax + 18], 7
	pinsrb	xmm5, byte ptr [rdx + r9 + 18], 8
	pinsrb	xmm5, byte ptr [rdx + rbx + 18], 9
	pinsrb	xmm5, byte ptr [rdx + r11 + 18], 10
	pinsrb	xmm5, byte ptr [rdx + r14 + 18], 11
	pinsrb	xmm5, byte ptr [rdx + r15 + 18], 12
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 18], 13
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 18], 14
	pand	xmm15, xmm12
	pinsrb	xmm5, byte ptr [rdx + r8 + 18], 15
	pcmpeqb	xmm5, xmm0
	pand	xmm5, xmmword ptr [rip + .LCPI2_11]
	por	xmm5, xmm15
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 30]
	movd	xmm12, esi
	pinsrb	xmm7, byte ptr [rdx + r12 + 19], 1
	pinsrb	xmm6, byte ptr [rdx + r12 + 20], 1
	pinsrb	xmm2, byte ptr [rdx + r12 + 21], 1
	pinsrb	xmm3, byte ptr [rdx + r12 + 22], 1
	pinsrb	xmm8, byte ptr [rdx + r12 + 23], 1
	pinsrb	xmm10, byte ptr [rdx + r12 + 24], 1
	pinsrb	xmm1, byte ptr [rdx + r12 + 25], 1
	pinsrb	xmm11, byte ptr [rdx + r12 + 26], 1
	pinsrb	xmm9, byte ptr [rdx + r12 + 27], 1
	pinsrb	xmm4, byte ptr [rdx + r12 + 28], 1
	pinsrb	xmm13, byte ptr [rdx + r12 + 29], 1
	pinsrb	xmm12, byte ptr [rdx + r12 + 30], 1
	movzx	esi, byte ptr [rdx + rax + 31]
	movd	xmm0, esi
	pinsrb	xmm0, byte ptr [rdx + r12 + 31], 1
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rsi + 19], 2
	pinsrb	xmm6, byte ptr [rdx + rsi + 20], 2
	pinsrb	xmm2, byte ptr [rdx + rsi + 21], 2
	pinsrb	xmm3, byte ptr [rdx + rsi + 22], 2
	pinsrb	xmm8, byte ptr [rdx + rsi + 23], 2
	pinsrb	xmm10, byte ptr [rdx + rsi + 24], 2
	pinsrb	xmm1, byte ptr [rdx + rsi + 25], 2
	pinsrb	xmm11, byte ptr [rdx + rsi + 26], 2
	pinsrb	xmm9, byte ptr [rdx + rsi + 27], 2
	pinsrb	xmm4, byte ptr [rdx + rsi + 28], 2
	pinsrb	xmm13, byte ptr [rdx + rsi + 29], 2
	pinsrb	xmm12, byte ptr [rdx + rsi + 30], 2
	pinsrb	xmm0, byte ptr [rdx + rsi + 31], 2
	pinsrb	xmm7, byte ptr [rdx + r10 + 19], 3
	pinsrb	xmm7, byte ptr [rdx + r13 + 19], 4
	pinsrb	xmm7, byte ptr [rdx + rcx + 19], 5
	pinsrb	xmm7, byte ptr [rdx + rdi + 19], 6
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 19], 7
	pinsrb	xmm7, byte ptr [rdx + r9 + 19], 8
	pinsrb	xmm7, byte ptr [rdx + rbx + 19], 9
	pinsrb	xmm7, byte ptr [rdx + r11 + 19], 10
	pinsrb	xmm7, byte ptr [rdx + r14 + 19], 11
	pinsrb	xmm7, byte ptr [rdx + r15 + 19], 12
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rsi + 19], 13
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + r12 + 19], 14
	pinsrb	xmm7, byte ptr [rdx + r8 + 19], 15
	pinsrb	xmm6, byte ptr [rdx + r10 + 20], 3
	pinsrb	xmm6, byte ptr [rdx + r13 + 20], 4
	pinsrb	xmm6, byte ptr [rdx + rcx + 20], 5
	pinsrb	xmm6, byte ptr [rdx + rdi + 20], 6
	pinsrb	xmm6, byte ptr [rdx + rax + 20], 7
	pinsrb	xmm6, byte ptr [rdx + r9 + 20], 8
	pinsrb	xmm6, byte ptr [rdx + rbx + 20], 9
	pinsrb	xmm6, byte ptr [rdx + r11 + 20], 10
	pinsrb	xmm6, byte ptr [rdx + r14 + 20], 11
	pinsrb	xmm6, byte ptr [rdx + r15 + 20], 12
	pinsrb	xmm6, byte ptr [rdx + rsi + 20], 13
	pinsrb	xmm6, byte ptr [rdx + r12 + 20], 14
	por	xmm5, xmmword ptr [rsp + 160]   # 16-byte Folded Reload
	pinsrb	xmm6, byte ptr [rdx + r8 + 20], 15
	movdqa	xmm15, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm7, xmm15
	pand	xmm7, xmmword ptr [rip + .LCPI2_12]
	pcmpeqb	xmm6, xmm15
	pand	xmm6, xmmword ptr [rip + .LCPI2_13]
	por	xmm6, xmm7
	pinsrb	xmm2, byte ptr [rdx + r10 + 21], 3
	pinsrb	xmm2, byte ptr [rdx + r13 + 21], 4
	pinsrb	xmm2, byte ptr [rdx + rcx + 21], 5
	pinsrb	xmm2, byte ptr [rdx + rdi + 21], 6
	pinsrb	xmm2, byte ptr [rdx + rax + 21], 7
	pinsrb	xmm2, byte ptr [rdx + r9 + 21], 8
	pinsrb	xmm2, byte ptr [rdx + rbx + 21], 9
	pinsrb	xmm2, byte ptr [rdx + r11 + 21], 10
	pinsrb	xmm2, byte ptr [rdx + r14 + 21], 11
	pinsrb	xmm2, byte ptr [rdx + r15 + 21], 12
	pinsrb	xmm2, byte ptr [rdx + rsi + 21], 13
	pinsrb	xmm2, byte ptr [rdx + r12 + 21], 14
	pinsrb	xmm2, byte ptr [rdx + r8 + 21], 15
	pcmpeqb	xmm2, xmm15
	movdqa	xmm7, xmmword ptr [rip + .LCPI2_14] # xmm7 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm2, xmm7
	por	xmm2, xmm6
	por	xmm2, xmm5
	pinsrb	xmm3, byte ptr [rdx + r10 + 22], 3
	pinsrb	xmm3, byte ptr [rdx + r13 + 22], 4
	pinsrb	xmm3, byte ptr [rdx + rcx + 22], 5
	pinsrb	xmm3, byte ptr [rdx + rdi + 22], 6
	pinsrb	xmm3, byte ptr [rdx + rax + 22], 7
	pinsrb	xmm3, byte ptr [rdx + r9 + 22], 8
	pinsrb	xmm3, byte ptr [rdx + rbx + 22], 9
	pinsrb	xmm3, byte ptr [rdx + r11 + 22], 10
	pinsrb	xmm3, byte ptr [rdx + r14 + 22], 11
	pinsrb	xmm3, byte ptr [rdx + r15 + 22], 12
	pinsrb	xmm3, byte ptr [rdx + rsi + 22], 13
	pinsrb	xmm3, byte ptr [rdx + r12 + 22], 14
	pinsrb	xmm3, byte ptr [rdx + r8 + 22], 15
	pinsrb	xmm8, byte ptr [rdx + r10 + 23], 3
	pinsrb	xmm8, byte ptr [rdx + r13 + 23], 4
	pinsrb	xmm8, byte ptr [rdx + rcx + 23], 5
	pinsrb	xmm8, byte ptr [rdx + rdi + 23], 6
	pinsrb	xmm8, byte ptr [rdx + rax + 23], 7
	pinsrb	xmm8, byte ptr [rdx + r9 + 23], 8
	pinsrb	xmm8, byte ptr [rdx + rbx + 23], 9
	pinsrb	xmm8, byte ptr [rdx + r11 + 23], 10
	pinsrb	xmm8, byte ptr [rdx + r14 + 23], 11
	pinsrb	xmm8, byte ptr [rdx + r15 + 23], 12
	pinsrb	xmm8, byte ptr [rdx + rsi + 23], 13
	pinsrb	xmm8, byte ptr [rdx + r12 + 23], 14
	pinsrb	xmm8, byte ptr [rdx + r8 + 23], 15
	pcmpeqb	xmm3, xmm15
	movdqa	xmm5, xmmword ptr [rip + .LCPI2_15] # xmm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm5
	pcmpeqb	xmm8, xmm15
	psllw	xmm8, 7
	movdqa	xmm6, xmmword ptr [rip + .LCPI2_6] # xmm6 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm8, xmm6
	por	xmm8, xmm3
	pinsrb	xmm1, byte ptr [rdx + r10 + 25], 3
	pinsrb	xmm1, byte ptr [rdx + r13 + 25], 4
	pinsrb	xmm1, byte ptr [rdx + rcx + 25], 5
	pinsrb	xmm1, byte ptr [rdx + rdi + 25], 6
	pinsrb	xmm1, byte ptr [rdx + rax + 25], 7
	pinsrb	xmm1, byte ptr [rdx + r9 + 25], 8
	pinsrb	xmm1, byte ptr [rdx + rbx + 25], 9
	pinsrb	xmm1, byte ptr [rdx + r11 + 25], 10
	pinsrb	xmm1, byte ptr [rdx + r14 + 25], 11
	pinsrb	xmm1, byte ptr [rdx + r15 + 25], 12
	pinsrb	xmm1, byte ptr [rdx + rsi + 25], 13
	pinsrb	xmm1, byte ptr [rdx + r12 + 25], 14
	pinsrb	xmm1, byte ptr [rdx + r8 + 25], 15
	por	xmm8, xmm2
	pcmpeqb	xmm1, xmm15
	movdqa	xmm2, xmm1
	movdqa	xmm3, xmmword ptr [rip + .LCPI2_10] # xmm3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm2, xmm3
	psubb	xmm2, xmm1
	pinsrb	xmm10, byte ptr [rdx + r10 + 24], 3
	pinsrb	xmm10, byte ptr [rdx + r13 + 24], 4
	pinsrb	xmm10, byte ptr [rdx + rcx + 24], 5
	pinsrb	xmm10, byte ptr [rdx + rdi + 24], 6
	pinsrb	xmm10, byte ptr [rdx + rax + 24], 7
	pinsrb	xmm10, byte ptr [rdx + r9 + 24], 8
	pinsrb	xmm10, byte ptr [rdx + rbx + 24], 9
	pinsrb	xmm10, byte ptr [rdx + r11 + 24], 10
	pinsrb	xmm10, byte ptr [rdx + r14 + 24], 11
	pinsrb	xmm10, byte ptr [rdx + r15 + 24], 12
	pinsrb	xmm10, byte ptr [rdx + rsi + 24], 13
	pinsrb	xmm10, byte ptr [rdx + r12 + 24], 14
	pinsrb	xmm10, byte ptr [rdx + r8 + 24], 15
	pcmpeqb	xmm10, xmm15
	pand	xmm10, xmm3
	pinsrb	xmm11, byte ptr [rdx + r10 + 26], 3
	pinsrb	xmm11, byte ptr [rdx + r13 + 26], 4
	pinsrb	xmm11, byte ptr [rdx + rcx + 26], 5
	pinsrb	xmm11, byte ptr [rdx + rdi + 26], 6
	pinsrb	xmm11, byte ptr [rdx + rax + 26], 7
	pinsrb	xmm11, byte ptr [rdx + r9 + 26], 8
	pinsrb	xmm11, byte ptr [rdx + rbx + 26], 9
	pinsrb	xmm11, byte ptr [rdx + r11 + 26], 10
	pinsrb	xmm11, byte ptr [rdx + r14 + 26], 11
	pinsrb	xmm11, byte ptr [rdx + r15 + 26], 12
	pinsrb	xmm11, byte ptr [rdx + rsi + 26], 13
	pinsrb	xmm11, byte ptr [rdx + r12 + 26], 14
	pinsrb	xmm11, byte ptr [rdx + r8 + 26], 15
	pcmpeqb	xmm11, xmm15
	pand	xmm11, xmmword ptr [rip + .LCPI2_11]
	por	xmm11, xmm10
	por	xmm11, xmm2
	pinsrb	xmm9, byte ptr [rdx + r10 + 27], 3
	pinsrb	xmm9, byte ptr [rdx + r13 + 27], 4
	pinsrb	xmm9, byte ptr [rdx + rcx + 27], 5
	pinsrb	xmm9, byte ptr [rdx + rdi + 27], 6
	pinsrb	xmm9, byte ptr [rdx + rax + 27], 7
	pinsrb	xmm9, byte ptr [rdx + r9 + 27], 8
	pinsrb	xmm9, byte ptr [rdx + rbx + 27], 9
	pinsrb	xmm9, byte ptr [rdx + r11 + 27], 10
	pinsrb	xmm9, byte ptr [rdx + r14 + 27], 11
	pinsrb	xmm9, byte ptr [rdx + r15 + 27], 12
	pinsrb	xmm9, byte ptr [rdx + rsi + 27], 13
	pinsrb	xmm9, byte ptr [rdx + r12 + 27], 14
	pinsrb	xmm9, byte ptr [rdx + r8 + 27], 15
	pinsrb	xmm4, byte ptr [rdx + r10 + 28], 3
	pinsrb	xmm4, byte ptr [rdx + r13 + 28], 4
	pinsrb	xmm4, byte ptr [rdx + rcx + 28], 5
	pinsrb	xmm4, byte ptr [rdx + rdi + 28], 6
	pinsrb	xmm4, byte ptr [rdx + rax + 28], 7
	pinsrb	xmm4, byte ptr [rdx + r9 + 28], 8
	pinsrb	xmm4, byte ptr [rdx + rbx + 28], 9
	pinsrb	xmm4, byte ptr [rdx + r11 + 28], 10
	pinsrb	xmm4, byte ptr [rdx + r14 + 28], 11
	pinsrb	xmm4, byte ptr [rdx + r15 + 28], 12
	pinsrb	xmm4, byte ptr [rdx + rsi + 28], 13
	pinsrb	xmm4, byte ptr [rdx + r12 + 28], 14
	pinsrb	xmm4, byte ptr [rdx + r8 + 28], 15
	pinsrb	xmm13, byte ptr [rdx + r10 + 29], 3
	pinsrb	xmm13, byte ptr [rdx + r13 + 29], 4
	pinsrb	xmm13, byte ptr [rdx + rcx + 29], 5
	pinsrb	xmm13, byte ptr [rdx + rdi + 29], 6
	pinsrb	xmm13, byte ptr [rdx + rax + 29], 7
	pinsrb	xmm13, byte ptr [rdx + r9 + 29], 8
	pinsrb	xmm13, byte ptr [rdx + rbx + 29], 9
	pinsrb	xmm13, byte ptr [rdx + r11 + 29], 10
	pinsrb	xmm13, byte ptr [rdx + r14 + 29], 11
	pinsrb	xmm13, byte ptr [rdx + r15 + 29], 12
	pinsrb	xmm13, byte ptr [rdx + rsi + 29], 13
	pinsrb	xmm13, byte ptr [rdx + r12 + 29], 14
	movdqa	xmm1, xmm15
	pcmpeqb	xmm9, xmm15
	pand	xmm9, xmmword ptr [rip + .LCPI2_12]
	pcmpeqb	xmm4, xmm15
	pand	xmm4, xmmword ptr [rip + .LCPI2_13]
	por	xmm4, xmm9
	pinsrb	xmm13, byte ptr [rdx + r8 + 29], 15
	pcmpeqb	xmm13, xmm15
	pand	xmm13, xmm7
	por	xmm13, xmm4
	pinsrb	xmm12, byte ptr [rdx + r10 + 30], 3
	pinsrb	xmm0, byte ptr [rdx + r10 + 31], 3
	pinsrb	xmm12, byte ptr [rdx + r13 + 30], 4
	pinsrb	xmm0, byte ptr [rdx + r13 + 31], 4
	pinsrb	xmm12, byte ptr [rdx + rcx + 30], 5
	pinsrb	xmm0, byte ptr [rdx + rcx + 31], 5
	pinsrb	xmm12, byte ptr [rdx + rdi + 30], 6
	pinsrb	xmm0, byte ptr [rdx + rdi + 31], 6
	pinsrb	xmm12, byte ptr [rdx + rax + 30], 7
	pinsrb	xmm0, byte ptr [rdx + rax + 31], 7
	pinsrb	xmm12, byte ptr [rdx + r9 + 30], 8
	pinsrb	xmm0, byte ptr [rdx + r9 + 31], 8
	pinsrb	xmm12, byte ptr [rdx + rbx + 30], 9
	pinsrb	xmm0, byte ptr [rdx + rbx + 31], 9
	pinsrb	xmm12, byte ptr [rdx + r11 + 30], 10
	pinsrb	xmm0, byte ptr [rdx + r11 + 31], 10
	pinsrb	xmm12, byte ptr [rdx + r14 + 30], 11
	pinsrb	xmm0, byte ptr [rdx + r14 + 31], 11
	pinsrb	xmm12, byte ptr [rdx + r15 + 30], 12
	pinsrb	xmm0, byte ptr [rdx + r15 + 31], 12
	pinsrb	xmm12, byte ptr [rdx + rsi + 30], 13
	pinsrb	xmm0, byte ptr [rdx + rsi + 31], 13
	pinsrb	xmm12, byte ptr [rdx + r12 + 30], 14
	pinsrb	xmm0, byte ptr [rdx + r12 + 31], 14
	pinsrb	xmm12, byte ptr [rdx + r8 + 30], 15
	pinsrb	xmm0, byte ptr [rdx + r8 + 31], 15
	por	xmm13, xmm11
	pcmpeqb	xmm12, xmm15
	pand	xmm12, xmm5
	pcmpeqb	xmm0, xmm15
	psllw	xmm0, 7
	pand	xmm0, xmm6
	por	xmm0, xmm12
	por	xmm0, xmm13
	movdqa	xmm1, xmm8
	punpcklbw	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	movdqa	xmm4, xmmword ptr [rsp + 192]   # 16-byte Reload
	movdqa	xmm2, xmm4
	punpcklbw	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0],xmm2[1],xmm14[1],xmm2[2],xmm14[2],xmm2[3],xmm14[3],xmm2[4],xmm14[4],xmm2[5],xmm14[5],xmm2[6],xmm14[6],xmm2[7],xmm14[7]
	movdqa	xmm3, xmm2
	punpcklwd	xmm3, xmm1              # xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1],xmm3[2],xmm1[2],xmm3[3],xmm1[3]
	punpckhwd	xmm2, xmm1              # xmm2 = xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
	punpckhbw	xmm8, xmm0              # xmm8 = xmm8[8],xmm0[8],xmm8[9],xmm0[9],xmm8[10],xmm0[10],xmm8[11],xmm0[11],xmm8[12],xmm0[12],xmm8[13],xmm0[13],xmm8[14],xmm0[14],xmm8[15],xmm0[15]
	punpckhbw	xmm4, xmm14             # xmm4 = xmm4[8],xmm14[8],xmm4[9],xmm14[9],xmm4[10],xmm14[10],xmm4[11],xmm14[11],xmm4[12],xmm14[12],xmm4[13],xmm14[13],xmm4[14],xmm14[14],xmm4[15],xmm14[15]
	movdqa	xmm0, xmm4
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm4, xmm8              # xmm4 = xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	movdqu	xmmword ptr [rax + 4*rcx + 48], xmm4
	movdqu	xmmword ptr [rax + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [rax + 4*rcx + 16], xmm2
	movdqu	xmmword ptr [rax + 4*rcx], xmm3
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 232]      # 8-byte Folded Reload
	jne	.LBB2_189
# %bb.190:
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	r14b, byte ptr [rsp + 8]        # 1-byte Reload
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	jne	.LBB2_69
	jmp	.LBB2_135
.LBB2_191:
	and	r14, -8
	mov	rax, r14
	shl	rax, 6
	add	rax, rdx
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 32], r14       # 8-byte Spill
	lea	rax, [rax + 4*r14]
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	dword ptr [rsp + 56], r13d      # 4-byte Spill
	movd	xmm0, r13d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm0, xmm0, 0                   # xmm0 = xmm0[0,0,0,0]
	xor	r15d, r15d
	movdqa	xmm15, xmmword ptr [rip + .LCPI2_8] # xmm15 = <1,1,1,1,1,1,1,1,u,u,u,u,u,u,u,u>
	movdqa	xmm9, xmmword ptr [rip + .LCPI2_1] # xmm9 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI2_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI2_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI2_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI2_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI2_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	.p2align	4, 0x90
.LBB2_192:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r15       # 8-byte Spill
	shl	r15, 6
	mov	r9, r15
	mov	r12, r15
	mov	r13, r15
	mov	rcx, r15
	mov	rdi, r15
	mov	rbx, r15
	movzx	eax, word ptr [rdx + r15]
	movzx	r10d, word ptr [rdx + r15 + 2]
	movzx	r14d, word ptr [rdx + r15 + 4]
	movzx	esi, word ptr [rdx + r15 + 6]
	movzx	r11d, word ptr [rdx + r15 + 8]
	mov	r8, r15
	or	r8, 64
	or	r9, 128
	or	r12, 192
	or	r13, 256
	or	rcx, 320
	or	rdi, 384
	or	rbx, 448
	movd	xmm4, eax
	pinsrw	xmm4, word ptr [rdx + r8], 1
	pinsrw	xmm4, word ptr [rdx + r9], 2
	pinsrw	xmm4, word ptr [rdx + r12], 3
	pinsrw	xmm4, word ptr [rdx + r13], 4
	pinsrw	xmm4, word ptr [rdx + rcx], 5
	pinsrw	xmm4, word ptr [rdx + rdi], 6
	pinsrw	xmm4, word ptr [rdx + rbx], 7
	movzx	eax, word ptr [rdx + r15 + 10]
	mov	dword ptr [rsp + 24], eax       # 4-byte Spill
	movd	xmm6, r10d
	pinsrw	xmm6, word ptr [rdx + r8 + 2], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 2], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 2], 3
	movzx	eax, word ptr [rdx + r15 + 12]
	mov	dword ptr [rsp + 16], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rdx + r13 + 2], 4
	movd	xmm2, r14d
	movzx	r14d, word ptr [rdx + r15 + 14]
	pinsrw	xmm6, word ptr [rdx + rcx + 2], 5
	movd	xmm5, esi
	movzx	esi, word ptr [rdx + r15 + 16]
	pinsrw	xmm6, word ptr [rdx + rdi + 2], 6
	movd	xmm3, r11d
	movzx	eax, word ptr [rdx + r15 + 18]
	mov	dword ptr [rsp + 40], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rdx + rbx + 2], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	movdqa	xmm1, xmm6
	pand	xmm1, xmm15
	psubb	xmm1, xmm6
	movd	xmm6, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm6 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rdx + r15 + 20]
	pcmpeqw	xmm4, xmm0
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	pinsrw	xmm2, word ptr [rdx + r8 + 4], 1
	pinsrw	xmm2, word ptr [rdx + r9 + 4], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 4], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 4], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 4], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 4], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 4], 7
	pinsrw	xmm5, word ptr [rdx + r8 + 6], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 6], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 6], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 6], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 6], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 6], 6
	pinsrw	xmm5, word ptr [rdx + rbx + 6], 7
	pinsrw	xmm3, word ptr [rdx + r8 + 8], 1
	pinsrw	xmm3, word ptr [rdx + r9 + 8], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 8], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 8], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 8], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 8], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 8], 7
	por	xmm1, xmm4
	movd	xmm7, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rdx + r15 + 22]
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 2
	pand	xmm2, xmm9
	por	xmm2, xmm1
	movd	xmm4, r14d
	movzx	r11d, word ptr [rdx + r15 + 24]
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm5
	movd	xmm1, esi
	movzx	esi, word ptr [rdx + r15 + 26]
	pinsrw	xmm6, word ptr [rdx + r8 + 10], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 10], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 10], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 10], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 10], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 10], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 10], 7
	pinsrw	xmm7, word ptr [rdx + r8 + 12], 1
	pinsrw	xmm7, word ptr [rdx + r9 + 12], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 12], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 12], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 12], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 12], 6
	pinsrw	xmm7, word ptr [rdx + rbx + 12], 7
	por	xmm3, xmm2
	movd	xmm8, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm8 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rdx + r15 + 28]
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm5, r10d
	movzx	r10d, word ptr [rdx + r15 + 30]
	pinsrw	xmm4, word ptr [rdx + r8 + 14], 1
	pinsrw	xmm4, word ptr [rdx + r9 + 14], 2
	pinsrw	xmm4, word ptr [rdx + r12 + 14], 3
	pinsrw	xmm4, word ptr [rdx + r13 + 14], 4
	pinsrw	xmm4, word ptr [rdx + rcx + 14], 5
	pinsrw	xmm4, word ptr [rdx + rdi + 14], 6
	pinsrw	xmm4, word ptr [rdx + rbx + 14], 7
	pinsrw	xmm8, word ptr [rdx + r8 + 18], 1
	pinsrw	xmm8, word ptr [rdx + r9 + 18], 2
	pinsrw	xmm8, word ptr [rdx + r12 + 18], 3
	pinsrw	xmm8, word ptr [rdx + r13 + 18], 4
	pinsrw	xmm8, word ptr [rdx + rcx + 18], 5
	pinsrw	xmm8, word ptr [rdx + rdi + 18], 6
	pinsrw	xmm8, word ptr [rdx + rbx + 18], 7
	pcmpeqw	xmm4, xmm0
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm7
	movd	xmm2, eax
	movzx	eax, word ptr [rdx + r15 + 32]
	por	xmm4, xmm3
	pcmpeqw	xmm8, xmm0
	packsswb	xmm8, xmm8
	movdqa	xmm7, xmm8
	pand	xmm7, xmm15
	psubb	xmm7, xmm8
	movd	xmm3, r11d
	movzx	r11d, word ptr [rdx + r15 + 34]
	pinsrw	xmm1, word ptr [rdx + r8 + 16], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 16], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 16], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 16], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 16], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 16], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 16], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	por	xmm7, xmm1
	movd	xmm6, esi
	movzx	esi, word ptr [rdx + r15 + 36]
	mov	dword ptr [rsp + 40], esi       # 4-byte Spill
	pinsrw	xmm5, word ptr [rdx + r8 + 20], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 20], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 20], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 20], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 20], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 20], 6
	pinsrw	xmm5, word ptr [rdx + rbx + 20], 7
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm9
	por	xmm5, xmm7
	movd	xmm7, r14d
	movzx	esi, word ptr [rdx + r15 + 38]
	mov	dword ptr [rsp + 16], esi       # 4-byte Spill
	pinsrw	xmm2, word ptr [rdx + r8 + 22], 1
	pinsrw	xmm2, word ptr [rdx + r9 + 22], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 22], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 22], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 22], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 22], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 22], 7
	pinsrw	xmm3, word ptr [rdx + r8 + 24], 1
	pinsrw	xmm3, word ptr [rdx + r9 + 24], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 24], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 24], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 24], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 24], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 24], 7
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm2
	movd	xmm2, r10d
	movzx	r14d, word ptr [rdx + r15 + 40]
	por	xmm3, xmm5
	movd	xmm5, eax
	movzx	eax, word ptr [rdx + r15 + 42]
	mov	dword ptr [rsp + 24], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rdx + r8 + 26], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 26], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 26], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 26], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 26], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 26], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 26], 7
	pinsrw	xmm7, word ptr [rdx + r8 + 28], 1
	pinsrw	xmm7, word ptr [rdx + r9 + 28], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 28], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 28], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 28], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 28], 6
	pinsrw	xmm7, word ptr [rdx + rbx + 28], 7
	pinsrw	xmm2, word ptr [rdx + r8 + 30], 1
	pinsrw	xmm2, word ptr [rdx + r9 + 30], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 30], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 30], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 30], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 30], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 30], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm1, r11d
	movzx	r10d, word ptr [rdx + r15 + 44]
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	psllw	xmm2, 7
	pand	xmm2, xmm14
	por	xmm2, xmm7
	movd	xmm6, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm6 = mem[0],zero,zero,zero
	movzx	esi, word ptr [rdx + r15 + 46]
	pinsrw	xmm5, word ptr [rdx + r8 + 32], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 32], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 32], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 32], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 32], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 32], 6
	pinsrw	xmm1, word ptr [rdx + r8 + 34], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 34], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 34], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 34], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 34], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 34], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 34], 7
	por	xmm2, xmm3
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm7, xmm1
	pand	xmm7, xmm15
	psubb	xmm7, xmm1
	movd	xmm3, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	r11d, word ptr [rdx + r15 + 48]
	pinsrw	xmm5, word ptr [rdx + rbx + 32], 7
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	pinsrw	xmm6, word ptr [rdx + r8 + 36], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 36], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 36], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 36], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 36], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 36], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 36], 7
	pinsrw	xmm3, word ptr [rdx + r8 + 38], 1
	pinsrw	xmm3, word ptr [rdx + r9 + 38], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 38], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 38], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 38], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 38], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 38], 7
	por	xmm7, xmm5
	movd	xmm5, r14d
	pinsrw	xmm5, word ptr [rdx + r8 + 40], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 40], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 40], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 40], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 40], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 40], 6
	movzx	eax, word ptr [rdx + r15 + 50]
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 2
	pand	xmm6, xmm9
	por	xmm6, xmm7
	movd	xmm1, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rdx + r15 + 52]
	pinsrw	xmm5, word ptr [rdx + rbx + 40], 7
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 3
	pand	xmm3, xmm10
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm3
	movd	xmm7, r10d
	movzx	r10d, word ptr [rdx + r15 + 54]
	pinsrw	xmm1, word ptr [rdx + r8 + 42], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 42], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 42], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 42], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 42], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 42], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 42], 7
	pinsrw	xmm7, word ptr [rdx + r8 + 44], 1
	pinsrw	xmm7, word ptr [rdx + r9 + 44], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 44], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 44], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 44], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 44], 6
	por	xmm5, xmm6
	movd	xmm3, esi
	movzx	esi, word ptr [rdx + r15 + 56]
	pinsrw	xmm7, word ptr [rdx + rbx + 44], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 5
	pand	xmm1, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm1
	movd	xmm6, r11d
	movzx	r11d, word ptr [rdx + r15 + 58]
	pinsrw	xmm3, word ptr [rdx + r8 + 46], 1
	pinsrw	xmm3, word ptr [rdx + r9 + 46], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 46], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 46], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 46], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 46], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 46], 7
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm7
	movd	xmm1, eax
	movzx	eax, word ptr [rdx + r15 + 60]
	movzx	r15d, word ptr [rdx + r15 + 62]
	pinsrw	xmm1, word ptr [rdx + r8 + 50], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 50], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 50], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 50], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 50], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 50], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 50], 7
	por	xmm3, xmm5
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm5, xmm1
	pand	xmm5, xmm15
	psubb	xmm5, xmm1
	movd	xmm1, r14d
	pinsrw	xmm6, word ptr [rdx + r8 + 48], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 48], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 48], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 48], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 48], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 48], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 48], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pinsrw	xmm1, word ptr [rdx + r8 + 52], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 52], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 52], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 52], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 52], 5
	pand	xmm6, xmm15
	pinsrw	xmm1, word ptr [rdx + rdi + 52], 6
	por	xmm5, xmm6
	movd	xmm6, r10d
	pinsrw	xmm1, word ptr [rdx + rbx + 52], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 2
	pand	xmm1, xmm9
	por	xmm1, xmm5
	movd	xmm5, esi
	pinsrw	xmm6, word ptr [rdx + r8 + 54], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 54], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 54], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 54], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 54], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 54], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 54], 7
	pinsrw	xmm5, word ptr [rdx + r8 + 56], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 56], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 56], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 56], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 56], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 56], 6
	pinsrw	xmm5, word ptr [rdx + rbx + 56], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 3
	pand	xmm6, xmm10
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm6
	movd	xmm6, r11d
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	pinsrw	xmm6, word ptr [rdx + r8 + 58], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 58], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 58], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 58], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 58], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 58], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 58], 7
	por	xmm5, xmm1
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rdx + r8 + 60], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 60], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 60], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 60], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 60], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 60], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 60], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 6
	pand	xmm1, xmm13
	por	xmm1, xmm6
	movd	xmm6, r15d
	pinsrw	xmm6, word ptr [rdx + r8 + 62], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 62], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 62], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 62], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 62], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 62], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 62], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	psllw	xmm6, 7
	pand	xmm6, xmm14
	por	xmm6, xmm1
	por	xmm6, xmm5
	movdqa	xmm1, xmm4
	punpcklqdq	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0]
	movdqa	xmm5, xmm3
	punpcklqdq	xmm5, xmm6              # xmm5 = xmm5[0],xmm6[0]
	movdqa	xmm7, xmmword ptr [rip + .LCPI2_9] # xmm7 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm5, xmm7
	pshufb	xmm1, xmm7
	punpcklwd	xmm1, xmm5              # xmm1 = xmm1[0],xmm5[0],xmm1[1],xmm5[1],xmm1[2],xmm5[2],xmm1[3],xmm5[3]
	punpcklbw	xmm3, xmm6              # xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1],xmm3[2],xmm6[2],xmm3[3],xmm6[3],xmm3[4],xmm6[4],xmm3[5],xmm6[5],xmm3[6],xmm6[6],xmm3[7],xmm6[7]
	punpcklbw	xmm4, xmm2              # xmm4 = xmm4[0],xmm2[0],xmm4[1],xmm2[1],xmm4[2],xmm2[2],xmm4[3],xmm2[3],xmm4[4],xmm2[4],xmm4[5],xmm2[5],xmm4[6],xmm2[6],xmm4[7],xmm2[7]
	punpcklwd	xmm4, xmm3              # xmm4 = xmm4[0],xmm3[0],xmm4[1],xmm3[1],xmm4[2],xmm3[2],xmm4[3],xmm3[3]
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	movdqu	xmmword ptr [rsi + 4*rcx], xmm4
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	movdqu	xmmword ptr [rsi + 4*rcx + 16], xmm1
	add	rcx, 8
	mov	r15, rcx
	cmp	rcx, qword ptr [rsp + 32]       # 8-byte Folded Reload
	jne	.LBB2_192
# %bb.193:
	mov	r14, qword ptr [rsp + 152]      # 8-byte Reload
	cmp	r14, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r13d, dword ptr [rsp + 56]      # 4-byte Reload
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	jne	.LBB2_92
	jmp	.LBB2_139
.LBB2_194:
	and	r15, -8
	mov	rax, r15
	shl	rax, 6
	add	rax, rdx
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	lea	rax, [rax + 4*r15]
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	dword ptr [rsp + 56], r13d      # 4-byte Spill
	movd	xmm0, r13d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm0, xmm0, 0                   # xmm0 = xmm0[0,0,0,0]
	xor	r15d, r15d
	movdqa	xmm15, xmmword ptr [rip + .LCPI2_8] # xmm15 = <1,1,1,1,1,1,1,1,u,u,u,u,u,u,u,u>
	movdqa	xmm9, xmmword ptr [rip + .LCPI2_1] # xmm9 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI2_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI2_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI2_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI2_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI2_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	.p2align	4, 0x90
.LBB2_195:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r15       # 8-byte Spill
	shl	r15, 6
	mov	r9, r15
	mov	r12, r15
	mov	r13, r15
	mov	rcx, r15
	mov	rdi, r15
	mov	rbx, r15
	movzx	eax, word ptr [rdx + r15]
	movzx	r10d, word ptr [rdx + r15 + 2]
	movzx	r14d, word ptr [rdx + r15 + 4]
	movzx	esi, word ptr [rdx + r15 + 6]
	movzx	r11d, word ptr [rdx + r15 + 8]
	mov	r8, r15
	or	r8, 64
	or	r9, 128
	or	r12, 192
	or	r13, 256
	or	rcx, 320
	or	rdi, 384
	or	rbx, 448
	movd	xmm4, eax
	pinsrw	xmm4, word ptr [rdx + r8], 1
	pinsrw	xmm4, word ptr [rdx + r9], 2
	pinsrw	xmm4, word ptr [rdx + r12], 3
	pinsrw	xmm4, word ptr [rdx + r13], 4
	pinsrw	xmm4, word ptr [rdx + rcx], 5
	pinsrw	xmm4, word ptr [rdx + rdi], 6
	pinsrw	xmm4, word ptr [rdx + rbx], 7
	movzx	eax, word ptr [rdx + r15 + 10]
	mov	dword ptr [rsp + 24], eax       # 4-byte Spill
	movd	xmm6, r10d
	pinsrw	xmm6, word ptr [rdx + r8 + 2], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 2], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 2], 3
	movzx	eax, word ptr [rdx + r15 + 12]
	mov	dword ptr [rsp + 16], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rdx + r13 + 2], 4
	movd	xmm2, r14d
	movzx	r14d, word ptr [rdx + r15 + 14]
	pinsrw	xmm6, word ptr [rdx + rcx + 2], 5
	movd	xmm5, esi
	movzx	esi, word ptr [rdx + r15 + 16]
	pinsrw	xmm6, word ptr [rdx + rdi + 2], 6
	movd	xmm3, r11d
	movzx	eax, word ptr [rdx + r15 + 18]
	mov	dword ptr [rsp + 40], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rdx + rbx + 2], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	movdqa	xmm1, xmm6
	pand	xmm1, xmm15
	psubb	xmm1, xmm6
	movd	xmm6, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm6 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rdx + r15 + 20]
	pcmpeqw	xmm4, xmm0
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	pinsrw	xmm2, word ptr [rdx + r8 + 4], 1
	pinsrw	xmm2, word ptr [rdx + r9 + 4], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 4], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 4], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 4], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 4], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 4], 7
	pinsrw	xmm5, word ptr [rdx + r8 + 6], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 6], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 6], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 6], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 6], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 6], 6
	pinsrw	xmm5, word ptr [rdx + rbx + 6], 7
	pinsrw	xmm3, word ptr [rdx + r8 + 8], 1
	pinsrw	xmm3, word ptr [rdx + r9 + 8], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 8], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 8], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 8], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 8], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 8], 7
	por	xmm1, xmm4
	movd	xmm7, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rdx + r15 + 22]
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 2
	pand	xmm2, xmm9
	por	xmm2, xmm1
	movd	xmm4, r14d
	movzx	r11d, word ptr [rdx + r15 + 24]
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm5
	movd	xmm1, esi
	movzx	esi, word ptr [rdx + r15 + 26]
	pinsrw	xmm6, word ptr [rdx + r8 + 10], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 10], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 10], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 10], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 10], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 10], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 10], 7
	pinsrw	xmm7, word ptr [rdx + r8 + 12], 1
	pinsrw	xmm7, word ptr [rdx + r9 + 12], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 12], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 12], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 12], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 12], 6
	pinsrw	xmm7, word ptr [rdx + rbx + 12], 7
	por	xmm3, xmm2
	movd	xmm8, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm8 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rdx + r15 + 28]
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm5, r10d
	movzx	r10d, word ptr [rdx + r15 + 30]
	pinsrw	xmm4, word ptr [rdx + r8 + 14], 1
	pinsrw	xmm4, word ptr [rdx + r9 + 14], 2
	pinsrw	xmm4, word ptr [rdx + r12 + 14], 3
	pinsrw	xmm4, word ptr [rdx + r13 + 14], 4
	pinsrw	xmm4, word ptr [rdx + rcx + 14], 5
	pinsrw	xmm4, word ptr [rdx + rdi + 14], 6
	pinsrw	xmm4, word ptr [rdx + rbx + 14], 7
	pinsrw	xmm8, word ptr [rdx + r8 + 18], 1
	pinsrw	xmm8, word ptr [rdx + r9 + 18], 2
	pinsrw	xmm8, word ptr [rdx + r12 + 18], 3
	pinsrw	xmm8, word ptr [rdx + r13 + 18], 4
	pinsrw	xmm8, word ptr [rdx + rcx + 18], 5
	pinsrw	xmm8, word ptr [rdx + rdi + 18], 6
	pinsrw	xmm8, word ptr [rdx + rbx + 18], 7
	pcmpeqw	xmm4, xmm0
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm7
	movd	xmm2, eax
	movzx	eax, word ptr [rdx + r15 + 32]
	por	xmm4, xmm3
	pcmpeqw	xmm8, xmm0
	packsswb	xmm8, xmm8
	movdqa	xmm7, xmm8
	pand	xmm7, xmm15
	psubb	xmm7, xmm8
	movd	xmm3, r11d
	movzx	r11d, word ptr [rdx + r15 + 34]
	pinsrw	xmm1, word ptr [rdx + r8 + 16], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 16], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 16], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 16], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 16], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 16], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 16], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	por	xmm7, xmm1
	movd	xmm6, esi
	movzx	esi, word ptr [rdx + r15 + 36]
	mov	dword ptr [rsp + 40], esi       # 4-byte Spill
	pinsrw	xmm5, word ptr [rdx + r8 + 20], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 20], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 20], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 20], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 20], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 20], 6
	pinsrw	xmm5, word ptr [rdx + rbx + 20], 7
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm9
	por	xmm5, xmm7
	movd	xmm7, r14d
	movzx	esi, word ptr [rdx + r15 + 38]
	mov	dword ptr [rsp + 16], esi       # 4-byte Spill
	pinsrw	xmm2, word ptr [rdx + r8 + 22], 1
	pinsrw	xmm2, word ptr [rdx + r9 + 22], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 22], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 22], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 22], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 22], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 22], 7
	pinsrw	xmm3, word ptr [rdx + r8 + 24], 1
	pinsrw	xmm3, word ptr [rdx + r9 + 24], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 24], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 24], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 24], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 24], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 24], 7
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm2
	movd	xmm2, r10d
	movzx	r14d, word ptr [rdx + r15 + 40]
	por	xmm3, xmm5
	movd	xmm5, eax
	movzx	eax, word ptr [rdx + r15 + 42]
	mov	dword ptr [rsp + 24], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rdx + r8 + 26], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 26], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 26], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 26], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 26], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 26], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 26], 7
	pinsrw	xmm7, word ptr [rdx + r8 + 28], 1
	pinsrw	xmm7, word ptr [rdx + r9 + 28], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 28], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 28], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 28], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 28], 6
	pinsrw	xmm7, word ptr [rdx + rbx + 28], 7
	pinsrw	xmm2, word ptr [rdx + r8 + 30], 1
	pinsrw	xmm2, word ptr [rdx + r9 + 30], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 30], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 30], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 30], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 30], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 30], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm1, r11d
	movzx	r10d, word ptr [rdx + r15 + 44]
	pcmpeqw	xmm2, xmm0
	packsswb	xmm2, xmm2
	psllw	xmm2, 7
	pand	xmm2, xmm14
	por	xmm2, xmm7
	movd	xmm6, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm6 = mem[0],zero,zero,zero
	movzx	esi, word ptr [rdx + r15 + 46]
	pinsrw	xmm5, word ptr [rdx + r8 + 32], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 32], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 32], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 32], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 32], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 32], 6
	pinsrw	xmm1, word ptr [rdx + r8 + 34], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 34], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 34], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 34], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 34], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 34], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 34], 7
	por	xmm2, xmm3
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm7, xmm1
	pand	xmm7, xmm15
	psubb	xmm7, xmm1
	movd	xmm3, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	r11d, word ptr [rdx + r15 + 48]
	pinsrw	xmm5, word ptr [rdx + rbx + 32], 7
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	pinsrw	xmm6, word ptr [rdx + r8 + 36], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 36], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 36], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 36], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 36], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 36], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 36], 7
	pinsrw	xmm3, word ptr [rdx + r8 + 38], 1
	pinsrw	xmm3, word ptr [rdx + r9 + 38], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 38], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 38], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 38], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 38], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 38], 7
	por	xmm7, xmm5
	movd	xmm5, r14d
	pinsrw	xmm5, word ptr [rdx + r8 + 40], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 40], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 40], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 40], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 40], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 40], 6
	movzx	eax, word ptr [rdx + r15 + 50]
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 2
	pand	xmm6, xmm9
	por	xmm6, xmm7
	movd	xmm1, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rdx + r15 + 52]
	pinsrw	xmm5, word ptr [rdx + rbx + 40], 7
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 3
	pand	xmm3, xmm10
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm3
	movd	xmm7, r10d
	movzx	r10d, word ptr [rdx + r15 + 54]
	pinsrw	xmm1, word ptr [rdx + r8 + 42], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 42], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 42], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 42], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 42], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 42], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 42], 7
	pinsrw	xmm7, word ptr [rdx + r8 + 44], 1
	pinsrw	xmm7, word ptr [rdx + r9 + 44], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 44], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 44], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 44], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 44], 6
	por	xmm5, xmm6
	movd	xmm3, esi
	movzx	esi, word ptr [rdx + r15 + 56]
	pinsrw	xmm7, word ptr [rdx + rbx + 44], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 5
	pand	xmm1, xmm12
	pcmpeqw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm1
	movd	xmm6, r11d
	movzx	r11d, word ptr [rdx + r15 + 58]
	pinsrw	xmm3, word ptr [rdx + r8 + 46], 1
	pinsrw	xmm3, word ptr [rdx + r9 + 46], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 46], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 46], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 46], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 46], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 46], 7
	pcmpeqw	xmm3, xmm0
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm7
	movd	xmm1, eax
	movzx	eax, word ptr [rdx + r15 + 60]
	movzx	r15d, word ptr [rdx + r15 + 62]
	pinsrw	xmm1, word ptr [rdx + r8 + 50], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 50], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 50], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 50], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 50], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 50], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 50], 7
	por	xmm3, xmm5
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm5, xmm1
	pand	xmm5, xmm15
	psubb	xmm5, xmm1
	movd	xmm1, r14d
	pinsrw	xmm6, word ptr [rdx + r8 + 48], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 48], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 48], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 48], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 48], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 48], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 48], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pinsrw	xmm1, word ptr [rdx + r8 + 52], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 52], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 52], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 52], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 52], 5
	pand	xmm6, xmm15
	pinsrw	xmm1, word ptr [rdx + rdi + 52], 6
	por	xmm5, xmm6
	movd	xmm6, r10d
	pinsrw	xmm1, word ptr [rdx + rbx + 52], 7
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 2
	pand	xmm1, xmm9
	por	xmm1, xmm5
	movd	xmm5, esi
	pinsrw	xmm6, word ptr [rdx + r8 + 54], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 54], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 54], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 54], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 54], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 54], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 54], 7
	pinsrw	xmm5, word ptr [rdx + r8 + 56], 1
	pinsrw	xmm5, word ptr [rdx + r9 + 56], 2
	pinsrw	xmm5, word ptr [rdx + r12 + 56], 3
	pinsrw	xmm5, word ptr [rdx + r13 + 56], 4
	pinsrw	xmm5, word ptr [rdx + rcx + 56], 5
	pinsrw	xmm5, word ptr [rdx + rdi + 56], 6
	pinsrw	xmm5, word ptr [rdx + rbx + 56], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 3
	pand	xmm6, xmm10
	pcmpeqw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm6
	movd	xmm6, r11d
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	pinsrw	xmm6, word ptr [rdx + r8 + 58], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 58], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 58], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 58], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 58], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 58], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 58], 7
	por	xmm5, xmm1
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rdx + r8 + 60], 1
	pinsrw	xmm1, word ptr [rdx + r9 + 60], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 60], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 60], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 60], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 60], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 60], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpeqw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 6
	pand	xmm1, xmm13
	por	xmm1, xmm6
	movd	xmm6, r15d
	pinsrw	xmm6, word ptr [rdx + r8 + 62], 1
	pinsrw	xmm6, word ptr [rdx + r9 + 62], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 62], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 62], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 62], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 62], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 62], 7
	pcmpeqw	xmm6, xmm0
	packsswb	xmm6, xmm6
	psllw	xmm6, 7
	pand	xmm6, xmm14
	por	xmm6, xmm1
	por	xmm6, xmm5
	movdqa	xmm1, xmm4
	punpcklqdq	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0]
	movdqa	xmm5, xmm3
	punpcklqdq	xmm5, xmm6              # xmm5 = xmm5[0],xmm6[0]
	movdqa	xmm7, xmmword ptr [rip + .LCPI2_9] # xmm7 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm5, xmm7
	pshufb	xmm1, xmm7
	punpcklwd	xmm1, xmm5              # xmm1 = xmm1[0],xmm5[0],xmm1[1],xmm5[1],xmm1[2],xmm5[2],xmm1[3],xmm5[3]
	punpcklbw	xmm3, xmm6              # xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1],xmm3[2],xmm6[2],xmm3[3],xmm6[3],xmm3[4],xmm6[4],xmm3[5],xmm6[5],xmm3[6],xmm6[6],xmm3[7],xmm6[7]
	punpcklbw	xmm4, xmm2              # xmm4 = xmm4[0],xmm2[0],xmm4[1],xmm2[1],xmm4[2],xmm2[2],xmm4[3],xmm2[3],xmm4[4],xmm2[4],xmm4[5],xmm2[5],xmm4[6],xmm2[6],xmm4[7],xmm2[7]
	punpcklwd	xmm4, xmm3              # xmm4 = xmm4[0],xmm3[0],xmm4[1],xmm3[1],xmm4[2],xmm3[2],xmm4[3],xmm3[3]
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	movdqu	xmmword ptr [rsi + 4*rcx], xmm4
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	movdqu	xmmword ptr [rsi + 4*rcx + 16], xmm1
	add	rcx, 8
	mov	r15, rcx
	cmp	rcx, qword ptr [rsp + 32]       # 8-byte Folded Reload
	jne	.LBB2_195
# %bb.196:
	mov	r15, qword ptr [rsp + 152]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r13d, dword ptr [rsp + 56]      # 4-byte Reload
	mov	r14, qword ptr [rsp + 8]        # 8-byte Reload
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	jne	.LBB2_104
	jmp	.LBB2_143
.LBB2_197:
	mov	r8, r14
	and	r8, -4
	mov	rbx, r8
	shl	rbx, 7
	add	rbx, rdx
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	lea	r11, [rax + 4*r8]
	movaps	xmm1, xmm0
	shufps	xmm1, xmm0, 0                   # xmm1 = xmm1[0,0],xmm0[0,0]
	add	rdx, 508
	xor	ecx, ecx
	movdqa	xmm15, xmmword ptr [rip + .LCPI2_0] # xmm15 = <1,1,1,1,u,u,u,u,u,u,u,u,u,u,u,u>
	movdqa	xmm8, xmmword ptr [rip + .LCPI2_1] # xmm8 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI2_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI2_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI2_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI2_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI2_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	movdqa	xmm9, xmmword ptr [rip + .LCPI2_7] # xmm9 = [0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	.p2align	4, 0x90
.LBB2_198:                              # =>This Inner Loop Header: Depth=1
	movss	xmm6, dword ptr [rdx - 508]     # xmm6 = mem[0],zero,zero,zero
	movss	xmm7, dword ptr [rdx - 504]     # xmm7 = mem[0],zero,zero,zero
	movss	xmm5, dword ptr [rdx - 500]     # xmm5 = mem[0],zero,zero,zero
	movss	xmm4, dword ptr [rdx - 496]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 380], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 252], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 124], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	insertps	xmm7, dword ptr [rdx - 376], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 248], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 120], 48 # xmm7 = xmm7[0,1,2],mem[0]
	insertps	xmm5, dword ptr [rdx - 372], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 244], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 116], 48 # xmm5 = xmm5[0,1,2],mem[0]
	insertps	xmm4, dword ptr [rdx - 368], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rdx - 240], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rdx - 112], 48 # xmm4 = xmm4[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	movdqa	xmm2, xmm7
	pand	xmm2, xmm15
	psubb	xmm2, xmm7
	movss	xmm7, dword ptr [rdx - 492]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 364], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 236], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 108], 48 # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rdx - 488]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 360], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 232], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 104], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm8
	por	xmm5, xmm2
	movss	xmm3, dword ptr [rdx - 484]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 356], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 228], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx - 100], 48 # xmm3 = xmm3[0,1,2],mem[0]
	cmpeqps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 3
	pand	xmm4, xmm10
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 4
	pand	xmm7, xmm11
	por	xmm7, xmm4
	movss	xmm4, dword ptr [rdx - 480]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm4, dword ptr [rdx - 352], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rdx - 224], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rdx - 96], 48  # xmm4 = xmm4[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm5, dword ptr [rdx - 476]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 348], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 220], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 92], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 6
	pand	xmm3, xmm13
	por	xmm3, xmm6
	movss	xmm2, dword ptr [rdx - 472]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 344], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 216], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 88], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packsswb	xmm5, xmm5
	cmpeqps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm3
	movss	xmm3, dword ptr [rdx - 468]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 340], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 212], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm5, xmm15
	insertps	xmm3, dword ptr [rdx - 84], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm4, xmm7
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm7, dword ptr [rdx - 464]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 336], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 208], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 80], 48  # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm5
	movss	xmm5, dword ptr [rdx - 460]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 332], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 204], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 76], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rdx - 456]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 328], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 200], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 72], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 3
	pand	xmm7, xmm10
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm7
	movss	xmm2, dword ptr [rdx - 452]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 324], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 196], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 68], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm3
	movss	xmm7, dword ptr [rdx - 448]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 320], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 192], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 64], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rdx - 444]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 316], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 188], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 60], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	psllw	xmm7, 7
	pand	xmm7, xmm14
	por	xmm7, xmm2
	movss	xmm2, dword ptr [rdx - 440]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 312], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 184], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 56], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm3, dword ptr [rdx - 436]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 308], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 180], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm6, xmm15
	insertps	xmm3, dword ptr [rdx - 52], 48  # xmm3 = xmm3[0,1,2],mem[0]
	punpckldq	xmm4, xmm7              # xmm4 = xmm4[0],xmm7[0],xmm4[1],xmm7[1]
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm7, xmm2
	pand	xmm7, xmm15
	psubb	xmm7, xmm2
	movss	xmm5, dword ptr [rdx - 432]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 304], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 176], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 48], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm7, xmm6
	movss	xmm6, dword ptr [rdx - 428]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 300], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 172], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 44], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm7
	movss	xmm7, dword ptr [rdx - 424]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 296], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 168], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 40], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm5
	movss	xmm2, dword ptr [rdx - 420]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 292], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 164], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 36], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm5, dword ptr [rdx - 416]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 288], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 160], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 32], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm7, dword ptr [rdx - 412]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 284], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 156], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 28], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	cmpeqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	psllw	xmm5, 7
	pand	xmm5, xmm14
	por	xmm5, xmm2
	movss	xmm2, dword ptr [rdx - 408]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 280], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 152], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	pand	xmm7, xmm15
	insertps	xmm2, dword ptr [rdx - 24], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm6
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm3, dword ptr [rdx - 404]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 276], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 148], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx - 20], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm6, xmm7
	movss	xmm2, dword ptr [rdx - 400]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 272], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 144], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 16], 48  # xmm2 = xmm2[0,1,2],mem[0]
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rdx - 396]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 268], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 140], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 12], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	cmpeqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm2
	movss	xmm7, dword ptr [rdx - 392]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 264], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 136], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 8], 48   # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm2, dword ptr [rdx - 388]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 260], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 132], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 4], 48   # xmm2 = xmm2[0,1,2],mem[0]
	cmpeqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpeqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm3, dword ptr [rdx - 384]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 256], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 128], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx], 48       # xmm3 = xmm3[0,1,2],mem[0]
	cmpeqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm2
	por	xmm3, xmm6
	punpckldq	xmm5, xmm3              # xmm5 = xmm5[0],xmm3[0],xmm5[1],xmm3[1]
	punpcklbw	xmm4, xmm5              # xmm4 = xmm4[0],xmm5[0],xmm4[1],xmm5[1],xmm4[2],xmm5[2],xmm4[3],xmm5[3],xmm4[4],xmm5[4],xmm4[5],xmm5[5],xmm4[6],xmm5[6],xmm4[7],xmm5[7]
	pshufb	xmm4, xmm9
	movdqu	xmmword ptr [rax + 4*rcx], xmm4
	add	rcx, 4
	add	rdx, 512
	cmp	r8, rcx
	jne	.LBB2_198
# %bb.199:
	cmp	r14, r8
	jne	.LBB2_127
	jmp	.LBB2_147
.Lfunc_end2:
	.size	comparison_equal_scalar_arr_sse4, .Lfunc_end2-comparison_equal_scalar_arr_sse4
                                        # -- End function
	.globl	comparison_not_equal_arr_arr_sse4 # -- Begin function comparison_not_equal_arr_arr_sse4
	.p2align	4, 0x90
	.type	comparison_not_equal_arr_arr_sse4,@function
comparison_not_equal_arr_arr_sse4:      # @comparison_not_equal_arr_arr_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -8
	sub	rsp, 72
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB3_29
# %bb.1:
	cmp	edi, 3
	jle	.LBB3_2
# %bb.15:
	cmp	edi, 4
	je	.LBB3_68
# %bb.16:
	cmp	edi, 5
	je	.LBB3_79
# %bb.17:
	cmp	edi, 6
	jne	.LBB3_123
# %bb.18:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_22
# %bb.19:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_20:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_20
# %bb.21:
	add	r14, 1
.LBB3_22:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_26
# %bb.23:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_24:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setne	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setne	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setne	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setne	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setne	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setne	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setne	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setne	r12b
	cmp	eax, dword ptr [rdx + 80]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setne	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_24
# %bb.25:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_26:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.27:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_28:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_28
	jmp	.LBB3_123
.LBB3_29:
	cmp	edi, 8
	jle	.LBB3_30
# %bb.43:
	cmp	edi, 9
	je	.LBB3_101
# %bb.44:
	cmp	edi, 11
	je	.LBB3_112
# %bb.45:
	cmp	edi, 12
	jne	.LBB3_123
# %bb.46:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_50
# %bb.47:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_48:                               # =>This Inner Loop Header: Depth=1
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	add	rsi, 8
	ucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_48
# %bb.49:
	add	r14, 1
.LBB3_50:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_54
# %bb.51:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_52:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [rsi + 8]       # xmm1 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	ucomisd	xmm1, qword ptr [rdx + 8]
	setne	al
	movsd	xmm0, qword ptr [rsi + 16]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 16]
	movsd	xmm0, qword ptr [rsi + 24]      # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 24]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 32]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 32]
	movsd	xmm0, qword ptr [rsi + 40]      # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 40]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 48]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 48]
	movsd	xmm0, qword ptr [rsi + 56]      # xmm0 = mem[0],zero
	setne	r13b
	ucomisd	xmm0, qword ptr [rdx + 56]
	setne	r15b
	movsd	xmm0, qword ptr [rsi + 64]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 64]
	movsd	xmm0, qword ptr [rsi + 72]      # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 72]
	setne	cl
	movsd	xmm0, qword ptr [rsi + 80]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 80]
	movsd	xmm0, qword ptr [rsi + 88]      # xmm0 = mem[0],zero
	setne	r9b
	ucomisd	xmm0, qword ptr [rdx + 88]
	setne	r11b
	movsd	xmm0, qword ptr [rsi + 96]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 96]
	movsd	xmm0, qword ptr [rsi + 104]     # xmm0 = mem[0],zero
	setne	r10b
	ucomisd	xmm0, qword ptr [rdx + 104]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 112]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 112]
	movsd	xmm0, qword ptr [rsi + 120]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 120]
	setne	bl
	movsd	xmm0, qword ptr [rsi + 128]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 128]
	movsd	xmm0, qword ptr [rsi + 136]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 136]
	movsd	xmm0, qword ptr [rsi + 144]     # xmm0 = mem[0],zero
	setne	r14b
	ucomisd	xmm0, qword ptr [rdx + 144]
	movsd	xmm0, qword ptr [rsi + 152]     # xmm0 = mem[0],zero
	setne	r12b
	ucomisd	xmm0, qword ptr [rdx + 152]
	movsd	xmm0, qword ptr [rsi + 160]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 160]
	movsd	xmm0, qword ptr [rsi + 168]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 168]
	movsd	xmm0, qword ptr [rsi + 176]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 176]
	movsd	xmm0, qword ptr [rsi + 184]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 184]
	movsd	xmm0, qword ptr [rsi + 192]     # xmm0 = mem[0],zero
	setne	r8b
	ucomisd	xmm0, qword ptr [rdx + 192]
	movsd	xmm0, qword ptr [rsi + 200]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 200]
	movsd	xmm0, qword ptr [rsi + 208]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 208]
	movsd	xmm0, qword ptr [rsi + 216]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 216]
	movsd	xmm0, qword ptr [rsi + 224]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 224]
	movsd	xmm0, qword ptr [rsi + 232]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 232]
	movsd	xmm0, qword ptr [rsi + 240]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 240]
	movsd	xmm0, qword ptr [rsi + 248]     # xmm0 = mem[0],zero
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	add	rsi, 256
	ucomisd	xmm0, qword ptr [rdx + 248]
	setne	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB3_52
# %bb.53:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB3_54:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.55:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_56:                               # =>This Inner Loop Header: Depth=1
	movsd	xmm0, qword ptr [rsi + 8*rcx]   # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_56
	jmp	.LBB3_123
.LBB3_2:
	cmp	edi, 2
	je	.LBB3_57
# %bb.3:
	cmp	edi, 3
	jne	.LBB3_123
# %bb.4:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_6
# %bb.7:
	add	r14, 1
.LBB3_8:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_12
# %bb.9:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_10:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setne	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setne	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setne	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setne	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setne	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setne	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setne	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setne	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setne	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setne	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setne	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB3_10
# %bb.11:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB3_12:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.13:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_14:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_14
	jmp	.LBB3_123
.LBB3_30:
	cmp	edi, 7
	je	.LBB3_90
# %bb.31:
	cmp	edi, 8
	jne	.LBB3_123
# %bb.32:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_36
# %bb.33:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_34:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_34
# %bb.35:
	add	r14, 1
.LBB3_36:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_40
# %bb.37:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_38:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setne	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setne	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setne	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setne	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setne	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setne	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setne	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setne	r12b
	cmp	rax, qword ptr [rdx + 160]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setne	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_38
# %bb.39:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_40:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.41:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_42:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_42
	jmp	.LBB3_123
.LBB3_68:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_72
# %bb.69:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_70:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_70
# %bb.71:
	add	r14, 1
.LBB3_72:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_76
# %bb.73:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_74:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setne	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setne	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setne	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setne	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setne	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setne	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setne	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setne	r12b
	cmp	ax, word ptr [rdx + 40]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setne	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_74
# %bb.75:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_76:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.77:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_78:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_78
	jmp	.LBB3_123
.LBB3_79:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_81:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_81
# %bb.82:
	add	r14, 1
.LBB3_83:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_87
# %bb.84:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_85:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setne	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setne	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setne	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setne	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setne	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setne	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setne	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setne	r12b
	cmp	ax, word ptr [rdx + 40]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setne	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_85
# %bb.86:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_87:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.88:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_89:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_89
	jmp	.LBB3_123
.LBB3_101:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_105
# %bb.102:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_103:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_103
# %bb.104:
	add	r14, 1
.LBB3_105:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_109
# %bb.106:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_107:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setne	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setne	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setne	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setne	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setne	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setne	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setne	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setne	r12b
	cmp	rax, qword ptr [rdx + 160]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setne	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_107
# %bb.108:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_109:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.110:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_111:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_111
	jmp	.LBB3_123
.LBB3_112:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_116
# %bb.113:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_114:                              # =>This Inner Loop Header: Depth=1
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	add	rsi, 4
	ucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_114
# %bb.115:
	add	r14, 1
.LBB3_116:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_120
# %bb.117:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_118:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	movss	xmm1, dword ptr [rsi + 4]       # xmm1 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	ucomiss	xmm1, dword ptr [rdx + 4]
	setne	al
	movss	xmm0, dword ptr [rsi + 8]       # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 8]
	movss	xmm0, dword ptr [rsi + 12]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 12]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 16]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 16]
	movss	xmm0, dword ptr [rsi + 20]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 20]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 24]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 24]
	movss	xmm0, dword ptr [rsi + 28]      # xmm0 = mem[0],zero,zero,zero
	setne	r13b
	ucomiss	xmm0, dword ptr [rdx + 28]
	setne	r15b
	movss	xmm0, dword ptr [rsi + 32]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 32]
	movss	xmm0, dword ptr [rsi + 36]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 36]
	setne	cl
	movss	xmm0, dword ptr [rsi + 40]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 40]
	movss	xmm0, dword ptr [rsi + 44]      # xmm0 = mem[0],zero,zero,zero
	setne	r9b
	ucomiss	xmm0, dword ptr [rdx + 44]
	setne	r11b
	movss	xmm0, dword ptr [rsi + 48]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 48]
	movss	xmm0, dword ptr [rsi + 52]      # xmm0 = mem[0],zero,zero,zero
	setne	r10b
	ucomiss	xmm0, dword ptr [rdx + 52]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 56]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 56]
	movss	xmm0, dword ptr [rsi + 60]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 60]
	setne	bl
	movss	xmm0, dword ptr [rsi + 64]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 64]
	movss	xmm0, dword ptr [rsi + 68]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 68]
	movss	xmm0, dword ptr [rsi + 72]      # xmm0 = mem[0],zero,zero,zero
	setne	r14b
	ucomiss	xmm0, dword ptr [rdx + 72]
	movss	xmm0, dword ptr [rsi + 76]      # xmm0 = mem[0],zero,zero,zero
	setne	r12b
	ucomiss	xmm0, dword ptr [rdx + 76]
	movss	xmm0, dword ptr [rsi + 80]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 80]
	movss	xmm0, dword ptr [rsi + 84]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 84]
	movss	xmm0, dword ptr [rsi + 88]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 88]
	movss	xmm0, dword ptr [rsi + 92]      # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 92]
	movss	xmm0, dword ptr [rsi + 96]      # xmm0 = mem[0],zero,zero,zero
	setne	r8b
	ucomiss	xmm0, dword ptr [rdx + 96]
	movss	xmm0, dword ptr [rsi + 100]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 100]
	movss	xmm0, dword ptr [rsi + 104]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 104]
	movss	xmm0, dword ptr [rsi + 108]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 108]
	movss	xmm0, dword ptr [rsi + 112]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 112]
	movss	xmm0, dword ptr [rsi + 116]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 116]
	movss	xmm0, dword ptr [rsi + 120]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 120]
	movss	xmm0, dword ptr [rsi + 124]     # xmm0 = mem[0],zero,zero,zero
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	sub	rsi, -128
	ucomiss	xmm0, dword ptr [rdx + 124]
	setne	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB3_118
# %bb.119:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB3_120:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.121:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_122:                              # =>This Inner Loop Header: Depth=1
	movss	xmm0, dword ptr [rsi + 4*rcx]   # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_122
	jmp	.LBB3_123
.LBB3_57:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_59:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_59
# %bb.60:
	add	r14, 1
.LBB3_61:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_65
# %bb.62:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_63:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setne	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setne	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setne	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setne	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setne	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setne	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setne	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setne	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setne	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setne	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setne	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB3_63
# %bb.64:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB3_65:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.66:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_67:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_67
	jmp	.LBB3_123
.LBB3_90:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB3_94
# %bb.91:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB3_92:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setne	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB3_92
# %bb.93:
	add	r14, 1
.LBB3_94:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB3_98
# %bb.95:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB3_96:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setne	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setne	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setne	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setne	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setne	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setne	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setne	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setne	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setne	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setne	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setne	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setne	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setne	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setne	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setne	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setne	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setne	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setne	r12b
	cmp	eax, dword ptr [rdx + 80]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setne	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setne	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setne	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setne	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setne	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setne	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setne	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setne	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setne	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setne	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB3_96
# %bb.97:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB3_98:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB3_123
# %bb.99:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB3_100:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	setne	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB3_100
.LBB3_123:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.Lfunc_end3:
	.size	comparison_not_equal_arr_arr_sse4, .Lfunc_end3-comparison_not_equal_arr_arr_sse4
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function comparison_not_equal_arr_scalar_sse4
.LCPI4_0:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_1:
	.zero	16,252
.LCPI4_2:
	.zero	16,248
.LCPI4_3:
	.zero	16,240
.LCPI4_4:
	.zero	16,224
.LCPI4_5:
	.zero	16,192
.LCPI4_6:
	.zero	16,128
.LCPI4_7:
	.byte	0                               # 0x0
	.byte	8                               # 0x8
	.byte	1                               # 0x1
	.byte	9                               # 0x9
	.byte	2                               # 0x2
	.byte	10                              # 0xa
	.byte	3                               # 0x3
	.byte	11                              # 0xb
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
.LCPI4_8:
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_9:
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_10:
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_11:
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_12:
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_13:
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_14:
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_15:
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI4_16:
	.zero	16,2
.LCPI4_17:
	.zero	16,4
.LCPI4_18:
	.zero	16,8
.LCPI4_19:
	.zero	16,16
.LCPI4_20:
	.zero	16,32
.LCPI4_21:
	.zero	16,64
.LCPI4_22:
	.zero	16,255
	.text
	.globl	comparison_not_equal_arr_scalar_sse4
	.p2align	4, 0x90
	.type	comparison_not_equal_arr_scalar_sse4,@function
comparison_not_equal_arr_scalar_sse4:   # @comparison_not_equal_arr_scalar_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -16
	sub	rsp, 304
                                        # kill: def $r9d killed $r9d def $r9
	mov	r15, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB4_17
# %bb.1:
	cmp	edi, 3
	jle	.LBB4_32
# %bb.2:
	cmp	edi, 4
	je	.LBB4_83
# %bb.3:
	cmp	edi, 5
	je	.LBB4_95
# %bb.4:
	cmp	edi, 6
	jne	.LBB4_179
# %bb.5:
	mov	r13d, dword ptr [rdx]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_7:                                # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_7
# %bb.8:
	add	r14, 1
.LBB4_9:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_13
# %bb.10:
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_11:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setne	dil
	cmp	dword ptr [rsi + 8], r13d
	setne	r14b
	cmp	dword ptr [rsi + 12], r13d
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setne	al
	cmp	dword ptr [rsi + 28], r13d
	setne	bl
	cmp	dword ptr [rsi + 32], r13d
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setne	dl
	cmp	dword ptr [rsi + 40], r13d
	setne	r9b
	cmp	dword ptr [rsi + 44], r13d
	setne	r10b
	cmp	dword ptr [rsi + 48], r13d
	setne	r11b
	cmp	dword ptr [rsi + 52], r13d
	setne	r12b
	cmp	dword ptr [rsi + 56], r13d
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setne	cl
	cmp	dword ptr [rsi + 64], r13d
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setne	r15b
	cmp	dword ptr [rsi + 96], r13d
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 192]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 128
	add	r14, 4
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB4_11
# %bb.12:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
.LBB4_13:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.14:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	je	.LBB4_82
# %bb.15:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB4_16:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_16
	jmp	.LBB4_153
.LBB4_17:
	cmp	edi, 8
	jle	.LBB4_46
# %bb.18:
	cmp	edi, 9
	je	.LBB4_107
# %bb.19:
	cmp	edi, 11
	je	.LBB4_118
# %bb.20:
	cmp	edi, 12
	jne	.LBB4_179
# %bb.21:
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB4_25
# %bb.22:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_23:                               # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_23
# %bb.24:
	add	r14, 1
.LBB4_25:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_29
# %bb.26:
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_27:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	ucomisd	xmm0, qword ptr [rsi]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 8]
	setne	r9b
	ucomisd	xmm0, qword ptr [rsi + 16]
	setne	r14b
	ucomisd	xmm0, qword ptr [rsi + 24]
	setne	r13b
	ucomisd	xmm0, qword ptr [rsi + 32]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 40]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 48]
	setne	al
	ucomisd	xmm0, qword ptr [rsi + 56]
	setne	bl
	ucomisd	xmm0, qword ptr [rsi + 64]
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 72]
	setne	dl
	ucomisd	xmm0, qword ptr [rsi + 80]
	setne	dil
	ucomisd	xmm0, qword ptr [rsi + 88]
	setne	r10b
	ucomisd	xmm0, qword ptr [rsi + 96]
	setne	r11b
	ucomisd	xmm0, qword ptr [rsi + 104]
	setne	r12b
	ucomisd	xmm0, qword ptr [rsi + 112]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 120]
	setne	cl
	ucomisd	xmm0, qword ptr [rsi + 128]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 136]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 144]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 152]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 160]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 168]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 176]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 184]
	setne	r15b
	ucomisd	xmm0, qword ptr [rsi + 192]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 200]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 208]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 216]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 224]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 232]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 240]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 248]
	setne	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 192]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB4_27
# %bb.28:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
.LBB4_29:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.30:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB4_162
# %bb.31:
	xor	r11d, r11d
	jmp	.LBB4_164
.LBB4_32:
	cmp	edi, 2
	je	.LBB4_60
# %bb.33:
	cmp	edi, 3
	jne	.LBB4_179
# %bb.34:
	mov	r11b, byte ptr [rdx]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_38
# %bb.35:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_36:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r11b
	lea	rsi, [rsi + 1]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_36
# %bb.37:
	add	r14, 1
.LBB4_38:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_130
# %bb.39:
	cmp	r10, 16
	mov	byte ptr [rsp + 8], r11b        # 1-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	jb	.LBB4_42
# %bb.40:
	mov	rax, r10
	shl	rax, 5
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB4_180
# %bb.41:
	lea	rax, [r14 + 4*r10]
	cmp	rsi, rax
	jae	.LBB4_180
.LBB4_42:
	xor	eax, eax
	mov	qword ptr [rsp + 240], rax      # 8-byte Spill
	mov	qword ptr [rsp + 104], r14      # 8-byte Spill
.LBB4_43:
	sub	r10, qword ptr [rsp + 240]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_44:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	byte ptr [rsi], r11b
	setne	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	byte ptr [rsi + 1], r11b
	setne	sil
	cmp	byte ptr [rcx + 2], r11b
	setne	r15b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 3], al
	setne	r12b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 4], al
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 5], al
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 6], al
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 7], al
	setne	r9b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 8], al
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 9], al
	setne	dl
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 10], al
	setne	dil
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 11], al
	setne	r10b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 12], al
	setne	r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 13], al
	setne	r13b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 14], al
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 15], al
	setne	r8b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 16], bl
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 17], bl
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 18], bl
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 19], bl
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 20], bl
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 21], bl
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 22], bl
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 23], bl
	setne	r11b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 24], bl
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 25], bl
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 26], bl
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 27], bl
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 28], bl
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 29], bl
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 30], bl
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 31], bl
	setne	bl
	add	sil, sil
	add	sil, byte ptr [rsp + 224]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	r9b, 7
	or	r9b, al
	shl	r15b, 2
	or	r15b, sil
	add	dl, dl
	add	dl, byte ptr [rsp + 192]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	movzx	r15d, byte ptr [rsp + 8]        # 1-byte Folded Reload
	shl	dil, 2
	or	dil, dl
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, al
	shl	r14b, 4
	or	r14b, r10b
	shl	r13b, 5
	or	r13b, r14b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r9b, dl
	or	r8b, r13b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	esi, edx
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	mov	byte ptr [rdx], r9b
	movzx	edi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r11b, 7
	or	r11b, dil
	mov	byte ptr [rdx + 1], r8b
	or	r11b, sil
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	movzx	esi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	sil, 6
	shl	bl, 7
	or	bl, sil
	or	bl, al
	mov	byte ptr [rdx + 2], r11b
	mov	r11d, r15d
	mov	byte ptr [rdx + 3], bl
	lea	rsi, [rcx + 32]
	add	rdx, 4
	mov	qword ptr [rsp + 104], rdx      # 8-byte Spill
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB4_44
# %bb.45:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	jmp	.LBB4_131
.LBB4_46:
	cmp	edi, 7
	je	.LBB4_72
# %bb.47:
	cmp	edi, 8
	jne	.LBB4_179
# %bb.48:
	mov	r13, qword ptr [rdx]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_52
# %bb.49:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_50:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_50
# %bb.51:
	add	r14, 1
.LBB4_52:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_56
# %bb.53:
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_54:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setne	dil
	cmp	qword ptr [rsi + 16], r13
	setne	r14b
	cmp	qword ptr [rsi + 24], r13
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setne	al
	cmp	qword ptr [rsi + 56], r13
	setne	bl
	cmp	qword ptr [rsi + 64], r13
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setne	dl
	cmp	qword ptr [rsi + 80], r13
	setne	r9b
	cmp	qword ptr [rsi + 88], r13
	setne	r10b
	cmp	qword ptr [rsi + 96], r13
	setne	r11b
	cmp	qword ptr [rsi + 104], r13
	setne	r12b
	cmp	qword ptr [rsi + 112], r13
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setne	cl
	cmp	qword ptr [rsi + 128], r13
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setne	r15b
	cmp	qword ptr [rsi + 192], r13
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 192]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB4_54
# %bb.55:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
.LBB4_56:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.57:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	je	.LBB4_117
# %bb.58:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB4_59:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_59
	jmp	.LBB4_168
.LBB4_60:
	mov	r11b, byte ptr [rdx]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_64
# %bb.61:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_62:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r11b
	lea	rsi, [rsi + 1]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_62
# %bb.63:
	add	r14, 1
.LBB4_64:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_134
# %bb.65:
	cmp	r10, 16
	mov	byte ptr [rsp + 8], r11b        # 1-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 256], r10      # 8-byte Spill
	jb	.LBB4_68
# %bb.66:
	mov	rax, r10
	shl	rax, 5
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB4_183
# %bb.67:
	lea	rax, [r14 + 4*r10]
	cmp	rsi, rax
	jae	.LBB4_183
.LBB4_68:
	xor	eax, eax
	mov	qword ptr [rsp + 240], rax      # 8-byte Spill
	mov	qword ptr [rsp + 104], r14      # 8-byte Spill
.LBB4_69:
	sub	r10, qword ptr [rsp + 240]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_70:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	byte ptr [rsi], r11b
	setne	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	byte ptr [rsi + 1], r11b
	setne	sil
	cmp	byte ptr [rcx + 2], r11b
	setne	r15b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 3], al
	setne	r12b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 4], al
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 5], al
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 6], al
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 7], al
	setne	r9b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 8], al
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 9], al
	setne	dl
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 10], al
	setne	dil
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 11], al
	setne	r10b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 12], al
	setne	r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 13], al
	setne	r13b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 14], al
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 15], al
	setne	r8b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 16], bl
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 17], bl
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 18], bl
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 19], bl
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 20], bl
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 21], bl
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 22], bl
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 23], bl
	setne	r11b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 24], bl
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 25], bl
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 26], bl
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 27], bl
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 28], bl
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 29], bl
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 30], bl
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 31], bl
	setne	bl
	add	sil, sil
	add	sil, byte ptr [rsp + 224]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	r9b, 7
	or	r9b, al
	shl	r15b, 2
	or	r15b, sil
	add	dl, dl
	add	dl, byte ptr [rsp + 192]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	movzx	r15d, byte ptr [rsp + 8]        # 1-byte Folded Reload
	shl	dil, 2
	or	dil, dl
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, al
	shl	r14b, 4
	or	r14b, r10b
	shl	r13b, 5
	or	r13b, r14b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r9b, dl
	or	r8b, r13b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	esi, edx
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	mov	byte ptr [rdx], r9b
	movzx	edi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r11b, 7
	or	r11b, dil
	mov	byte ptr [rdx + 1], r8b
	or	r11b, sil
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	movzx	esi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	sil, 6
	shl	bl, 7
	or	bl, sil
	or	bl, al
	mov	byte ptr [rdx + 2], r11b
	mov	r11d, r15d
	mov	byte ptr [rdx + 3], bl
	lea	rsi, [rcx + 32]
	add	rdx, 4
	mov	qword ptr [rsp + 104], rdx      # 8-byte Spill
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB4_70
# %bb.71:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	jmp	.LBB4_135
.LBB4_72:
	mov	r13d, dword ptr [rdx]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_76
# %bb.73:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_74:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_74
# %bb.75:
	add	r14, 1
.LBB4_76:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_80
# %bb.77:
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_78:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setne	dil
	cmp	dword ptr [rsi + 8], r13d
	setne	r14b
	cmp	dword ptr [rsi + 12], r13d
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setne	al
	cmp	dword ptr [rsi + 28], r13d
	setne	bl
	cmp	dword ptr [rsi + 32], r13d
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setne	dl
	cmp	dword ptr [rsi + 40], r13d
	setne	r9b
	cmp	dword ptr [rsi + 44], r13d
	setne	r10b
	cmp	dword ptr [rsi + 48], r13d
	setne	r11b
	cmp	dword ptr [rsi + 52], r13d
	setne	r12b
	cmp	dword ptr [rsi + 56], r13d
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setne	cl
	cmp	dword ptr [rsi + 64], r13d
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setne	r15b
	cmp	dword ptr [rsi + 96], r13d
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 192]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 128
	add	r14, 4
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB4_78
# %bb.79:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
.LBB4_80:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.81:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB4_151
.LBB4_82:
	xor	r11d, r11d
	jmp	.LBB4_153
.LBB4_83:
	movzx	r13d, word ptr [rdx]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_87
# %bb.84:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_85:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_85
# %bb.86:
	add	r14, 1
.LBB4_87:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_138
# %bb.88:
	cmp	r10, 8
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	jb	.LBB4_91
# %bb.89:
	mov	rax, r10
	shl	rax, 6
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB4_186
# %bb.90:
	lea	rax, [r14 + 4*r10]
	cmp	rax, rsi
	jbe	.LBB4_186
.LBB4_91:
	xor	eax, eax
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
	mov	r12, r14
.LBB4_92:
	mov	qword ptr [rsp + 8], r12        # 8-byte Spill
	sub	r10, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_93:                               # =>This Inner Loop Header: Depth=1
	mov	r11, rsi
	cmp	word ptr [rsi], r13w
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	setne	sil
	cmp	word ptr [r11 + 4], r13w
	setne	r15b
	cmp	word ptr [r11 + 6], r13w
	setne	r12b
	cmp	word ptr [r11 + 8], r13w
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 10], r13w
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 12], r13w
	setne	al
	cmp	word ptr [r11 + 14], r13w
	setne	bl
	cmp	word ptr [r11 + 16], r13w
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 18], r13w
	setne	cl
	cmp	word ptr [r11 + 20], r13w
	setne	r8b
	cmp	word ptr [r11 + 22], r13w
	setne	r9b
	cmp	word ptr [r11 + 24], r13w
	setne	r14b
	cmp	word ptr [r11 + 26], r13w
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 28], r13w
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 30], r13w
	setne	dil
	cmp	word ptr [r11 + 32], r13w
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 34], r13w
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 36], r13w
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 38], r13w
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 40], r13w
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 42], r13w
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 44], r13w
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 46], r13w
	setne	r10b
	cmp	word ptr [r11 + 48], r13w
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 50], r13w
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 52], r13w
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 54], r13w
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 56], r13w
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 58], r13w
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 60], r13w
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 62], r13w
	setne	dl
	add	sil, sil
	add	sil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r15b, 2
	or	r15b, sil
	add	cl, cl
	add	cl, byte ptr [rsp + 192]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	shl	r8b, 2
	or	r8b, cl
	movzx	ecx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r12b
	mov	esi, ecx
	shl	r9b, 3
	or	r9b, r8b
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, sil
	shl	r14b, 4
	or	r14b, r9b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	dil, 7
	or	dil, sil
	or	bl, cl
	or	dil, al
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, sil
	mov	esi, ecx
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rcx], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r10b, 7
	or	r10b, bl
	mov	byte ptr [rcx + 1], dil
	or	r10b, sil
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rcx + 2], r10b
	mov	byte ptr [rcx + 3], dl
	lea	rsi, [r11 + 64]
	add	rcx, 4
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB4_93
# %bb.94:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	jmp	.LBB4_139
.LBB4_95:
	movzx	r13d, word ptr [rdx]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_99
# %bb.96:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_97:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_97
# %bb.98:
	add	r14, 1
.LBB4_99:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_143
# %bb.100:
	cmp	r10, 8
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	jb	.LBB4_103
# %bb.101:
	mov	rax, r10
	shl	rax, 6
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB4_189
# %bb.102:
	lea	rax, [r14 + 4*r10]
	cmp	rax, rsi
	jbe	.LBB4_189
.LBB4_103:
	xor	eax, eax
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
	mov	r12, r14
.LBB4_104:
	mov	qword ptr [rsp + 8], r12        # 8-byte Spill
	sub	r10, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_105:                              # =>This Inner Loop Header: Depth=1
	mov	r11, rsi
	cmp	word ptr [rsi], r13w
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	setne	sil
	cmp	word ptr [r11 + 4], r13w
	setne	r15b
	cmp	word ptr [r11 + 6], r13w
	setne	r12b
	cmp	word ptr [r11 + 8], r13w
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 10], r13w
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 12], r13w
	setne	al
	cmp	word ptr [r11 + 14], r13w
	setne	bl
	cmp	word ptr [r11 + 16], r13w
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 18], r13w
	setne	cl
	cmp	word ptr [r11 + 20], r13w
	setne	r8b
	cmp	word ptr [r11 + 22], r13w
	setne	r9b
	cmp	word ptr [r11 + 24], r13w
	setne	r14b
	cmp	word ptr [r11 + 26], r13w
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 28], r13w
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 30], r13w
	setne	dil
	cmp	word ptr [r11 + 32], r13w
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 34], r13w
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 36], r13w
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 38], r13w
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 40], r13w
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 42], r13w
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 44], r13w
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 46], r13w
	setne	r10b
	cmp	word ptr [r11 + 48], r13w
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 50], r13w
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 52], r13w
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 54], r13w
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 56], r13w
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 58], r13w
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 60], r13w
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 62], r13w
	setne	dl
	add	sil, sil
	add	sil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r15b, 2
	or	r15b, sil
	add	cl, cl
	add	cl, byte ptr [rsp + 192]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	shl	r8b, 2
	or	r8b, cl
	movzx	ecx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r12b
	mov	esi, ecx
	shl	r9b, 3
	or	r9b, r8b
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, sil
	shl	r14b, 4
	or	r14b, r9b
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	dil, 7
	or	dil, sil
	or	bl, cl
	or	dil, al
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, sil
	mov	esi, ecx
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rcx], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r10b, 7
	or	r10b, bl
	mov	byte ptr [rcx + 1], dil
	or	r10b, sil
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rcx + 2], r10b
	mov	byte ptr [rcx + 3], dl
	lea	rsi, [r11 + 64]
	add	rcx, 4
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB4_105
# %bb.106:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	jmp	.LBB4_144
.LBB4_107:
	mov	r13, qword ptr [rdx]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB4_111
# %bb.108:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_109:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	setne	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_109
# %bb.110:
	add	r14, 1
.LBB4_111:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_115
# %bb.112:
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_113:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setne	dil
	cmp	qword ptr [rsi + 16], r13
	setne	r14b
	cmp	qword ptr [rsi + 24], r13
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setne	al
	cmp	qword ptr [rsi + 56], r13
	setne	bl
	cmp	qword ptr [rsi + 64], r13
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setne	dl
	cmp	qword ptr [rsi + 80], r13
	setne	r9b
	cmp	qword ptr [rsi + 88], r13
	setne	r10b
	cmp	qword ptr [rsi + 96], r13
	setne	r11b
	cmp	qword ptr [rsi + 104], r13
	setne	r12b
	cmp	qword ptr [rsi + 112], r13
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setne	cl
	cmp	qword ptr [rsi + 128], r13
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setne	r15b
	cmp	qword ptr [rsi + 192], r13
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setne	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 152]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 192]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB4_113
# %bb.114:
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
.LBB4_115:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.116:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB4_166
.LBB4_117:
	xor	r11d, r11d
	jmp	.LBB4_168
.LBB4_118:
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movss	xmm0, dword ptr [rdx]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB4_122
# %bb.119:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB4_120:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	setne	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB4_120
# %bb.121:
	add	r14, 1
.LBB4_122:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB4_147
# %bb.123:
	cmp	r10, 4
	jb	.LBB4_126
# %bb.124:
	mov	rax, r10
	shl	rax, 7
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB4_192
# %bb.125:
	lea	rax, [r14 + 4*r10]
	cmp	rax, rsi
	jbe	.LBB4_192
.LBB4_126:
	xor	r8d, r8d
	mov	rbx, rsi
	mov	r11, r14
.LBB4_127:
	mov	qword ptr [rsp + 8], r11        # 8-byte Spill
	mov	qword ptr [rsp + 144], r15      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	sub	r10, r8
	mov	qword ptr [rsp + 152], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_128:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 4]
	setne	r8b
	ucomiss	xmm0, dword ptr [rbx + 8]
	setne	r14b
	ucomiss	xmm0, dword ptr [rbx + 12]
	setne	r13b
	ucomiss	xmm0, dword ptr [rbx + 16]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 20]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 24]
	setne	al
	ucomiss	xmm0, dword ptr [rbx + 28]
	setne	r11b
	ucomiss	xmm0, dword ptr [rbx + 32]
	setne	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 36]
	setne	dl
	ucomiss	xmm0, dword ptr [rbx + 40]
	setne	sil
	ucomiss	xmm0, dword ptr [rbx + 44]
	setne	dil
	ucomiss	xmm0, dword ptr [rbx + 48]
	setne	r10b
	ucomiss	xmm0, dword ptr [rbx + 52]
	setne	r12b
	ucomiss	xmm0, dword ptr [rbx + 56]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 60]
	setne	r9b
	ucomiss	xmm0, dword ptr [rbx + 64]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 68]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 72]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 76]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 80]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 84]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 88]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 92]
	setne	r15b
	ucomiss	xmm0, dword ptr [rbx + 96]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 100]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 104]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 108]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 112]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 116]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 120]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 124]
	setne	cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 192]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r15b, dl
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 6
	shl	cl, 7
	or	cl, dl
	or	cl, al
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], cl
	add	rbx, 128
	add	rsi, 4
	mov	qword ptr [rsp + 8], rsi        # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB4_128
# %bb.129:
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	jmp	.LBB4_148
.LBB4_130:
	mov	qword ptr [rsp + 104], r14      # 8-byte Spill
.LBB4_131:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.132:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	je	.LBB4_137
# %bb.155:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	.p2align	4, 0x90
.LBB4_156:                              # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	byte ptr [rsi + r9], r11b
	setne	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r14 + rdi], dl
	cmp	byte ptr [rsi + rax + 1], r11b
	lea	r9, [rax + 2]
	setne	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r14 + rdi], al
	cmp	r10, r9
	jne	.LBB4_156
	jmp	.LBB4_159
.LBB4_134:
	mov	qword ptr [rsp + 104], r14      # 8-byte Spill
.LBB4_135:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.136:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB4_157
.LBB4_137:
	xor	r9d, r9d
	test	r8b, 1
	je	.LBB4_179
	jmp	.LBB4_161
.LBB4_138:
	mov	r12, r14
.LBB4_139:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.140:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	je	.LBB4_146
# %bb.141:
	mov	r9, r8
	and	r9, -2
	xor	r14d, r14d
	.p2align	4, 0x90
.LBB4_142:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	cmp	word ptr [rsi], r13w
	setne	dl
	neg	dl
	mov	rdi, r14
	shr	rdi, 3
	movzx	r10d, byte ptr [r12 + rdi]
	mov	ecx, r14d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r12 + rdi], bl
	add	r14, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	setne	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r12 + rdi], al
	cmp	r9, r14
	jne	.LBB4_142
	jmp	.LBB4_173
.LBB4_143:
	mov	r12, r14
.LBB4_144:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.145:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB4_171
.LBB4_146:
	xor	r14d, r14d
	jmp	.LBB4_173
.LBB4_147:
	mov	r11, r14
	mov	rbx, rsi
.LBB4_148:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB4_179
# %bb.149:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB4_175
# %bb.150:
	xor	esi, esi
	jmp	.LBB4_177
.LBB4_151:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB4_152:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_152
.LBB4_153:
	test	r8b, 1
	je	.LBB4_179
# %bb.154:
	cmp	dword ptr [rsi], r13d
	jmp	.LBB4_170
.LBB4_157:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	.p2align	4, 0x90
.LBB4_158:                              # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	byte ptr [rsi + r9], r11b
	setne	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r14 + rdi], dl
	cmp	byte ptr [rsi + rax + 1], r11b
	lea	r9, [rax + 2]
	setne	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r14 + rdi], al
	cmp	r10, r9
	jne	.LBB4_158
.LBB4_159:
	add	rsi, r9
	test	r8b, 1
	je	.LBB4_179
.LBB4_161:
	cmp	byte ptr [rsi], r11b
	setne	al
	neg	al
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB4_179
.LBB4_162:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB4_163:                              # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rsi]
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	ucomisd	xmm0, qword ptr [rsi + 8]
	lea	rsi, [rsi + 16]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_163
.LBB4_164:
	test	r8b, 1
	je	.LBB4_179
# %bb.165:
	ucomisd	xmm0, qword ptr [rsi]
	jmp	.LBB4_170
.LBB4_166:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB4_167:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setne	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	setne	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB4_167
.LBB4_168:
	test	r8b, 1
	je	.LBB4_179
# %bb.169:
	cmp	qword ptr [rsi], r13
.LBB4_170:
	setne	al
	neg	al
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
	jmp	.LBB4_179
.LBB4_171:
	mov	r9, r8
	and	r9, -2
	xor	r14d, r14d
	.p2align	4, 0x90
.LBB4_172:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	cmp	word ptr [rsi], r13w
	setne	dl
	neg	dl
	mov	rdi, r14
	shr	rdi, 3
	movzx	r10d, byte ptr [r12 + rdi]
	mov	ecx, r14d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r12 + rdi], bl
	add	r14, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	setne	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r12 + rdi], al
	cmp	r9, r14
	jne	.LBB4_172
.LBB4_173:
	test	r8b, 1
	je	.LBB4_179
# %bb.174:
	cmp	word ptr [rsi], r13w
	setne	al
	neg	al
	mov	rdx, r14
	shr	rdx, 3
	mov	dil, byte ptr [r12 + rdx]
	and	r14b, 7
	mov	bl, 1
	mov	ecx, r14d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r12 + rdx], bl
	jmp	.LBB4_179
.LBB4_175:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r14, r11
	.p2align	4, 0x90
.LBB4_176:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	setne	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	mov	ecx, esi
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	add	rsi, 2
	ucomiss	xmm0, dword ptr [rbx + 4]
	lea	rbx, [rbx + 8]
	setne	r9b
	neg	r9b
	xor	r9b, al
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, r9b
	xor	dl, al
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, rsi
	jne	.LBB4_176
.LBB4_177:
	test	r8b, 1
	je	.LBB4_179
# %bb.178:
	ucomiss	xmm0, dword ptr [rbx]
	setne	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r11 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r11 + rdx], bl
.LBB4_179:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB4_180:
	and	r10, -16
	mov	rax, r10
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	mov	qword ptr [rsp + 240], r10      # 8-byte Spill
	lea	rax, [r14 + 4*r10]
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	movzx	eax, r11b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 256], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_181:                              # =>This Inner Loop Header: Depth=1
	mov	r9, rax
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	mov	rcx, rax
	shl	rcx, 5
	mov	r11, rcx
	mov	r8, rcx
	mov	r14, rcx
	mov	r13, rcx
	mov	rbx, rcx
	mov	r12, rcx
	mov	r15, rcx
	mov	rdi, rcx
	mov	r9, rcx
	mov	qword ptr [rsp + 48], rcx       # 8-byte Spill
	mov	rax, rcx
	mov	rdx, rcx
	movzx	ecx, byte ptr [rsi + rcx]
	movd	xmm4, ecx
	movzx	ecx, byte ptr [rsi + rdx + 1]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rsi + rdx + 2]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rsi + rdx + 3]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [rsi + rdx + 4]
	movd	xmm1, ecx
	movzx	ecx, byte ptr [rsi + rdx + 5]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rsi + rdx + 6]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rsi + rdx + 7]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [rsi + rdx + 8]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [rsi + rdx + 9]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 208], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdx + 10]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rsi + rdx + 11]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [rsi + rdx + 12]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 224], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdx + 13]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rsi + rdx + 14]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [rsi + rdx + 15]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 176], xmm0   # 16-byte Spill
	mov	qword ptr [rsp + 24], rdx       # 8-byte Spill
	mov	rcx, rdx
	or	rcx, 32
	mov	qword ptr [rsp + 40], rcx       # 8-byte Spill
	or	r11, 64
	mov	qword ptr [rsp + 112], r11      # 8-byte Spill
	or	r8, 96
	mov	qword ptr [rsp + 64], r8        # 8-byte Spill
	or	r14, 128
	or	r13, 160
	mov	r10, rbx
	or	r10, 192
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	or	r12, 224
	or	r15, 256
	or	rdi, 288
	mov	qword ptr [rsp + 192], rdi      # 8-byte Spill
	or	r9, 320
	mov	qword ptr [rsp + 32], r9        # 8-byte Spill
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	or	rbx, 352
	mov	qword ptr [rsp + 48], rbx       # 8-byte Spill
	or	rax, 384
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	rax, rdx
	or	rax, 416
	mov	rcx, rdx
	or	rcx, 448
	mov	qword ptr [rsp + 16], rcx       # 8-byte Spill
	mov	rcx, rdx
	or	rcx, 480
	mov	qword ptr [rsp + 56], rcx       # 8-byte Spill
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx], 1
	pinsrb	xmm4, byte ptr [rsi + r11], 2
	pinsrb	xmm4, byte ptr [rsi + r8], 3
	pinsrb	xmm4, byte ptr [rsi + r14], 4
	pinsrb	xmm4, byte ptr [rsi + r13], 5
	pinsrb	xmm4, byte ptr [rsi + r10], 6
	pinsrb	xmm4, byte ptr [rsi + r12], 7
	pinsrb	xmm4, byte ptr [rsi + r15], 8
	pinsrb	xmm4, byte ptr [rsi + rdi], 9
	pinsrb	xmm4, byte ptr [rsi + r9], 10
	pinsrb	xmm4, byte ptr [rsi + rbx], 11
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx], 12
	pinsrb	xmm4, byte ptr [rsi + rax], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rbx], 14
	pinsrb	xmm4, byte ptr [rsi + rcx], 15
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rbx + 1], 1
	pinsrb	xmm3, byte ptr [rsi + r11 + 1], 2
	pinsrb	xmm3, byte ptr [rsi + r8 + 1], 3
	pinsrb	xmm3, byte ptr [rsi + r14 + 1], 4
	pinsrb	xmm3, byte ptr [rsi + r13 + 1], 5
	mov	r11, r13
	pinsrb	xmm3, byte ptr [rsi + r10 + 1], 6
	pinsrb	xmm3, byte ptr [rsi + r12 + 1], 7
	mov	r13, r12
	pinsrb	xmm3, byte ptr [rsi + r15 + 1], 8
	pinsrb	xmm3, byte ptr [rsi + rdi + 1], 9
	pinsrb	xmm3, byte ptr [rsi + r9 + 1], 10
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r12 + 1], 11
	pinsrb	xmm3, byte ptr [rsi + rdx + 1], 12
	pinsrb	xmm3, byte ptr [rsi + rax + 1], 13
	mov	r8, rax
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 1], 14
	movdqa	xmm6, xmmword ptr [rsp + 256]   # 16-byte Reload
	pcmpeqb	xmm4, xmm6
	pinsrb	xmm3, byte ptr [rsi + rcx + 1], 15
	pcmpeqb	xmm3, xmm6
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_16] # xmm0 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm3, xmm0
	paddb	xmm3, xmm4
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 16]
	movd	xmm10, edx
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 2], 1
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r10 + 2], 2
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdi + 2], 3
	pinsrb	xmm5, byte ptr [rsi + r14 + 2], 4
	pinsrb	xmm5, byte ptr [rsi + r11 + 2], 5
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r9 + 2], 6
	mov	rbx, r13
	pinsrb	xmm5, byte ptr [rsi + r13 + 2], 7
	pinsrb	xmm5, byte ptr [rsi + r15 + 2], 8
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 2], 9
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 2], 10
	pinsrb	xmm5, byte ptr [rsi + r12 + 2], 11
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rcx + 2], 12
	pinsrb	xmm5, byte ptr [rsi + r8 + 2], 13
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r13 + 2], 14
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r8 + 2], 15
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 3], 1
	pinsrb	xmm7, byte ptr [rsi + r10 + 3], 2
	pinsrb	xmm7, byte ptr [rsi + rdi + 3], 3
	pinsrb	xmm7, byte ptr [rsi + r14 + 3], 4
	pinsrb	xmm7, byte ptr [rsi + r11 + 3], 5
	pinsrb	xmm7, byte ptr [rsi + r9 + 3], 6
	pinsrb	xmm7, byte ptr [rsi + rbx + 3], 7
	pinsrb	xmm7, byte ptr [rsi + r15 + 3], 8
	pinsrb	xmm7, byte ptr [rsi + rdx + 3], 9
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 3], 10
	pinsrb	xmm7, byte ptr [rsi + r12 + 3], 11
	pinsrb	xmm7, byte ptr [rsi + rcx + 3], 12
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 3], 13
	pinsrb	xmm7, byte ptr [rsi + r13 + 3], 14
	pinsrb	xmm7, byte ptr [rsi + r8 + 3], 15
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rax + 4], 1
	pinsrb	xmm1, byte ptr [rsi + r10 + 4], 2
	pinsrb	xmm1, byte ptr [rsi + rdi + 4], 3
	pinsrb	xmm1, byte ptr [rsi + r14 + 4], 4
	pinsrb	xmm1, byte ptr [rsi + r11 + 4], 5
	mov	rax, r11
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	pinsrb	xmm1, byte ptr [rsi + r9 + 4], 6
	pinsrb	xmm1, byte ptr [rsi + rbx + 4], 7
	mov	rdi, rbx
	pinsrb	xmm1, byte ptr [rsi + r15 + 4], 8
	pinsrb	xmm1, byte ptr [rsi + rdx + 4], 9
	mov	rbx, rdx
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rdx + 4], 10
	pinsrb	xmm1, byte ptr [rsi + r12 + 4], 11
	pinsrb	xmm1, byte ptr [rsi + rcx + 4], 12
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + r11 + 4], 13
	pinsrb	xmm1, byte ptr [rsi + r13 + 4], 14
	pinsrb	xmm1, byte ptr [rsi + r8 + 4], 15
	pcmpeqb	xmm5, xmm6
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_17] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm5, xmm0
	pcmpeqb	xmm7, xmm6
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_18] # xmm0 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm7, xmm0
	por	xmm7, xmm5
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 17]
	movd	xmm4, edx
	pcmpeqb	xmm1, xmm6
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_19] # xmm0 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm1, xmm0
	por	xmm1, xmm7
	movzx	edx, byte ptr [rsi + rcx + 18]
	movd	xmm7, edx
	pcmpeqd	xmm0, xmm0
	psubb	xmm3, xmm0
	por	xmm1, xmm3
	movzx	edx, byte ptr [rsi + rcx + 19]
	movd	xmm5, edx
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdx + 5], 1
	pinsrb	xmm2, byte ptr [rsi + r10 + 5], 2
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 5], 3
	mov	qword ptr [rsp + 120], r14      # 8-byte Spill
	pinsrb	xmm2, byte ptr [rsi + r14 + 5], 4
	pinsrb	xmm2, byte ptr [rsi + rax + 5], 5
	mov	r12, r9
	pinsrb	xmm2, byte ptr [rsi + r9 + 5], 6
	mov	qword ptr [rsp + 160], rdi      # 8-byte Spill
	pinsrb	xmm2, byte ptr [rsi + rdi + 5], 7
	pinsrb	xmm2, byte ptr [rsi + r15 + 5], 8
	mov	r9, rbx
	pinsrb	xmm2, byte ptr [rsi + rbx + 5], 9
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rax + 5], 10
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 5], 11
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r13 + 5], 12
	mov	r8, r11
	pinsrb	xmm2, byte ptr [rsi + r11 + 5], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 5], 14
	mov	r11, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r11 + 5], 15
	pinsrb	xmm8, byte ptr [rsi + rdx + 6], 1
	pinsrb	xmm8, byte ptr [rsi + r10 + 6], 2
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rbx + 6], 3
	pinsrb	xmm8, byte ptr [rsi + r14 + 6], 4
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rbx + 6], 5
	pinsrb	xmm8, byte ptr [rsi + r12 + 6], 6
	pinsrb	xmm8, byte ptr [rsi + rdi + 6], 7
	pinsrb	xmm8, byte ptr [rsi + r15 + 6], 8
	pinsrb	xmm8, byte ptr [rsi + r9 + 6], 9
	pinsrb	xmm8, byte ptr [rsi + rax + 6], 10
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rbx + 6], 11
	pinsrb	xmm8, byte ptr [rsi + r13 + 6], 12
	pinsrb	xmm8, byte ptr [rsi + r8 + 6], 13
	pinsrb	xmm8, byte ptr [rsi + rcx + 6], 14
	pinsrb	xmm8, byte ptr [rsi + r11 + 6], 15
	mov	rcx, r11
	pinsrb	xmm14, byte ptr [rsi + rdx + 7], 1
	pinsrb	xmm14, byte ptr [rsi + r10 + 7], 2
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 7], 3
	pinsrb	xmm14, byte ptr [rsi + r14 + 7], 4
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r11 + 7], 5
	pinsrb	xmm14, byte ptr [rsi + r12 + 7], 6
	pinsrb	xmm14, byte ptr [rsi + rdi + 7], 7
	pinsrb	xmm14, byte ptr [rsi + r15 + 7], 8
	mov	r12, r15
	mov	qword ptr [rsp + 96], r15       # 8-byte Spill
	pinsrb	xmm14, byte ptr [rsi + r9 + 7], 9
	pinsrb	xmm14, byte ptr [rsi + rax + 7], 10
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rbx + 7], 11
	pinsrb	xmm14, byte ptr [rsi + r13 + 7], 12
	mov	r14, r13
	mov	rdi, r8
	pinsrb	xmm14, byte ptr [rsi + r8 + 7], 13
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r13 + 7], 14
	pcmpeqb	xmm2, xmm6
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_20] # xmm0 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm0
	pcmpeqb	xmm8, xmm6
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_21] # xmm0 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm8, xmm0
	por	xmm8, xmm2
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	movzx	edx, byte ptr [rsi + r9 + 20]
	movd	xmm3, edx
	mov	rax, rcx
	pinsrb	xmm14, byte ptr [rsi + rcx + 7], 15
	pcmpeqb	xmm14, xmm6
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm14, xmm0
	por	xmm14, xmm8
	movzx	edx, byte ptr [rsi + r9 + 21]
	movd	xmm2, edx
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rcx + 8], 1
	pinsrb	xmm9, byte ptr [rsi + r10 + 8], 2
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r8 + 8], 3
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdx + 8], 4
	pinsrb	xmm9, byte ptr [rsi + r11 + 8], 5
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdx + 8], 6
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r15 + 8], 7
	pinsrb	xmm9, byte ptr [rsi + r12 + 8], 8
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r12 + 8], 9
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdx + 8], 10
	pinsrb	xmm9, byte ptr [rsi + rbx + 8], 11
	pinsrb	xmm9, byte ptr [rsi + r14 + 8], 12
	pinsrb	xmm9, byte ptr [rsi + rdi + 8], 13
	pinsrb	xmm9, byte ptr [rsi + r13 + 8], 14
	pinsrb	xmm9, byte ptr [rsi + rax + 8], 15
	por	xmm14, xmm1
	movdqa	xmmword ptr [rsp + 272], xmm14  # 16-byte Spill
	movzx	edx, byte ptr [rsi + r9 + 22]
	movd	xmm1, edx
	movdqa	xmm0, xmm6
	pcmpeqb	xmm9, xmm6
	movdqa	xmm14, xmmword ptr [rsp + 208]  # 16-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rcx + 9], 1
	pinsrb	xmm14, byte ptr [rsi + r10 + 9], 2
	pinsrb	xmm14, byte ptr [rsi + r8 + 9], 3
	mov	rax, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rax + 9], 4
	pinsrb	xmm14, byte ptr [rsi + r11 + 9], 5
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 9], 6
	mov	rdi, r15
	pinsrb	xmm14, byte ptr [rsi + r15 + 9], 7
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r15 + 9], 8
	mov	r9, r12
	pinsrb	xmm14, byte ptr [rsi + r12 + 9], 9
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r13 + 9], 10
	pinsrb	xmm14, byte ptr [rsi + rbx + 9], 11
	mov	r12, r14
	pinsrb	xmm14, byte ptr [rsi + r14 + 9], 12
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r14 + 9], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rax + 9], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rax + 9], 15
	mov	r10, rcx
	pinsrb	xmm12, byte ptr [rsi + rcx + 10], 1
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rcx + 10], 2
	pinsrb	xmm12, byte ptr [rsi + r8 + 10], 3
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rcx + 10], 4
	pinsrb	xmm12, byte ptr [rsi + r11 + 10], 5
	pinsrb	xmm12, byte ptr [rsi + rdx + 10], 6
	pinsrb	xmm12, byte ptr [rsi + rdi + 10], 7
	pinsrb	xmm12, byte ptr [rsi + r15 + 10], 8
	pinsrb	xmm12, byte ptr [rsi + r9 + 10], 9
	pinsrb	xmm12, byte ptr [rsi + r13 + 10], 10
	pinsrb	xmm12, byte ptr [rsi + rbx + 10], 11
	pinsrb	xmm12, byte ptr [rsi + r12 + 10], 12
	pinsrb	xmm12, byte ptr [rsi + r14 + 10], 13
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r14 + 10], 14
	pinsrb	xmm12, byte ptr [rsi + rax + 10], 15
	pinsrb	xmm13, byte ptr [rsi + r10 + 11], 1
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r10 + 11], 2
	pinsrb	xmm13, byte ptr [rsi + r8 + 11], 3
	pinsrb	xmm13, byte ptr [rsi + rcx + 11], 4
	pinsrb	xmm13, byte ptr [rsi + r11 + 11], 5
	pinsrb	xmm13, byte ptr [rsi + rdx + 11], 6
	pinsrb	xmm13, byte ptr [rsi + rdi + 11], 7
	pinsrb	xmm13, byte ptr [rsi + r15 + 11], 8
	pinsrb	xmm13, byte ptr [rsi + r9 + 11], 9
	pinsrb	xmm13, byte ptr [rsi + r13 + 11], 10
	pinsrb	xmm13, byte ptr [rsi + rbx + 11], 11
	mov	r15, rbx
	pinsrb	xmm13, byte ptr [rsi + r12 + 11], 12
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r13 + 11], 13
	pinsrb	xmm13, byte ptr [rsi + r14 + 11], 14
	pinsrb	xmm13, byte ptr [rsi + rax + 11], 15
	pcmpeqb	xmm14, xmm6
	pandn	xmm14, xmmword ptr [rip + .LCPI4_16]
	paddb	xmm14, xmm9
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 23]
	movd	xmm8, edx
	pcmpeqb	xmm12, xmm6
	pandn	xmm12, xmmword ptr [rip + .LCPI4_17]
	pcmpeqb	xmm13, xmm6
	pandn	xmm13, xmmword ptr [rip + .LCPI4_18]
	por	xmm13, xmm12
	movzx	edx, byte ptr [rsi + rax + 24]
	movd	xmm12, edx
	movdqa	xmm9, xmmword ptr [rsp + 224]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rax + 12], 1
	pinsrb	xmm9, byte ptr [rsi + r10 + 12], 2
	mov	rax, r8
	pinsrb	xmm9, byte ptr [rsi + r8 + 12], 3
	mov	r14, rcx
	pinsrb	xmm9, byte ptr [rsi + rcx + 12], 4
	mov	r8, r11
	pinsrb	xmm9, byte ptr [rsi + r11 + 12], 5
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r11 + 12], 6
	mov	rbx, rdi
	pinsrb	xmm9, byte ptr [rsi + rdi + 12], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rcx + 12], 8
	pinsrb	xmm9, byte ptr [rsi + r9 + 12], 9
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdi + 12], 10
	pinsrb	xmm9, byte ptr [rsi + r15 + 12], 11
	pinsrb	xmm9, byte ptr [rsi + r12 + 12], 12
	pinsrb	xmm9, byte ptr [rsi + r13 + 12], 13
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdx + 12], 14
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdx + 12], 15
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 13], 1
	pinsrb	xmm11, byte ptr [rsi + r10 + 13], 2
	pinsrb	xmm11, byte ptr [rsi + rax + 13], 3
	pinsrb	xmm11, byte ptr [rsi + r14 + 13], 4
	pinsrb	xmm11, byte ptr [rsi + r8 + 13], 5
	pinsrb	xmm11, byte ptr [rsi + r11 + 13], 6
	pinsrb	xmm11, byte ptr [rsi + rbx + 13], 7
	pinsrb	xmm11, byte ptr [rsi + rcx + 13], 8
	pinsrb	xmm11, byte ptr [rsi + r9 + 13], 9
	pinsrb	xmm11, byte ptr [rsi + rdi + 13], 10
	pinsrb	xmm11, byte ptr [rsi + r15 + 13], 11
	pinsrb	xmm11, byte ptr [rsi + r12 + 13], 12
	pinsrb	xmm11, byte ptr [rsi + r13 + 13], 13
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 13], 14
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 13], 15
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdx + 14], 1
	pinsrb	xmm15, byte ptr [rsi + r10 + 14], 2
	pinsrb	xmm15, byte ptr [rsi + rax + 14], 3
	pinsrb	xmm15, byte ptr [rsi + r14 + 14], 4
	pinsrb	xmm15, byte ptr [rsi + r8 + 14], 5
	pinsrb	xmm15, byte ptr [rsi + r11 + 14], 6
	pinsrb	xmm15, byte ptr [rsi + rbx + 14], 7
	pinsrb	xmm15, byte ptr [rsi + rcx + 14], 8
	pinsrb	xmm15, byte ptr [rsi + r9 + 14], 9
	pinsrb	xmm15, byte ptr [rsi + rdi + 14], 10
	pinsrb	xmm15, byte ptr [rsi + r15 + 14], 11
	pinsrb	xmm15, byte ptr [rsi + r12 + 14], 12
	pinsrb	xmm15, byte ptr [rsi + r13 + 14], 13
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r15 + 14], 14
	pcmpeqb	xmm9, xmm6
	pandn	xmm9, xmmword ptr [rip + .LCPI4_19]
	por	xmm9, xmm13
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 25]
	movd	xmm13, edx
	psubb	xmm14, xmmword ptr [rip + .LCPI4_22]
	por	xmm9, xmm14
	movzx	edx, byte ptr [rsi + rcx + 26]
	movd	xmm0, edx
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rax + 14], 15
	pcmpeqb	xmm11, xmm6
	pandn	xmm11, xmmword ptr [rip + .LCPI4_20]
	pcmpeqb	xmm15, xmm6
	movdqa	xmm14, xmm6
	pandn	xmm15, xmmword ptr [rip + .LCPI4_21]
	por	xmm15, xmm11
	movzx	edx, byte ptr [rsi + rcx + 27]
	movd	xmm11, edx
	movdqa	xmm6, xmmword ptr [rsp + 176]   # 16-byte Reload
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r11 + 15], 1
	pinsrb	xmm6, byte ptr [rsi + r10 + 15], 2
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rbx + 15], 3
	pinsrb	xmm6, byte ptr [rsi + r14 + 15], 4
	pinsrb	xmm6, byte ptr [rsi + r8 + 15], 5
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r12 + 15], 6
	mov	rcx, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 15], 7
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 15], 8
	pinsrb	xmm6, byte ptr [rsi + r9 + 15], 9
	pinsrb	xmm6, byte ptr [rsi + rdi + 15], 10
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 15], 11
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r14 + 15], 12
	pinsrb	xmm6, byte ptr [rsi + r13 + 15], 13
	pinsrb	xmm6, byte ptr [rsi + r15 + 15], 14
	pinsrb	xmm6, byte ptr [rsi + rax + 15], 15
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI4_6]
	por	xmm6, xmm15
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 28]
	movd	xmm15, edx
	por	xmm6, xmm9
	movdqa	xmmword ptr [rsp + 176], xmm6   # 16-byte Spill
	movzx	edx, byte ptr [rsi + rax + 29]
	movd	xmm9, edx
	pinsrb	xmm10, byte ptr [rsi + r11 + 16], 1
	pinsrb	xmm10, byte ptr [rsi + r10 + 16], 2
	pinsrb	xmm10, byte ptr [rsi + rbx + 16], 3
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r13 + 16], 4
	pinsrb	xmm10, byte ptr [rsi + r8 + 16], 5
	pinsrb	xmm10, byte ptr [rsi + r12 + 16], 6
	mov	r12, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r12 + 16], 7
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdx + 16], 8
	pinsrb	xmm10, byte ptr [rsi + r9 + 16], 9
	pinsrb	xmm10, byte ptr [rsi + rdi + 16], 10
	pinsrb	xmm10, byte ptr [rsi + rcx + 16], 11
	pinsrb	xmm10, byte ptr [rsi + r14 + 16], 12
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r14 + 16], 13
	pinsrb	xmm10, byte ptr [rsi + r15 + 16], 14
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax + 16], 15
	pinsrb	xmm4, byte ptr [rsi + r11 + 17], 1
	pinsrb	xmm4, byte ptr [rsi + r10 + 17], 2
	pinsrb	xmm4, byte ptr [rsi + rbx + 17], 3
	mov	r10, r13
	pinsrb	xmm4, byte ptr [rsi + r13 + 17], 4
	pinsrb	xmm4, byte ptr [rsi + r8 + 17], 5
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r11 + 17], 6
	mov	rbx, r12
	pinsrb	xmm4, byte ptr [rsi + r12 + 17], 7
	pinsrb	xmm4, byte ptr [rsi + rdx + 17], 8
	pinsrb	xmm4, byte ptr [rsi + r9 + 17], 9
	pinsrb	xmm4, byte ptr [rsi + rdi + 17], 10
	pinsrb	xmm4, byte ptr [rsi + rcx + 17], 11
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 17], 12
	mov	r13, r14
	pinsrb	xmm4, byte ptr [rsi + r14 + 17], 13
	pinsrb	xmm4, byte ptr [rsi + r15 + 17], 14
	mov	r12, r15
	pinsrb	xmm4, byte ptr [rsi + rax + 17], 15
	mov	r15, rax
	movdqa	xmm6, xmm14
	pcmpeqb	xmm10, xmm14
	pcmpeqb	xmm4, xmm14
	pandn	xmm4, xmmword ptr [rip + .LCPI4_16]
	paddb	xmm4, xmm10
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rdi + 30]
	movd	xmm10, edx
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 18], 1
	pinsrb	xmm5, byte ptr [rsi + rax + 19], 1
	pinsrb	xmm3, byte ptr [rsi + rax + 20], 1
	pinsrb	xmm2, byte ptr [rsi + rax + 21], 1
	pinsrb	xmm1, byte ptr [rsi + rax + 22], 1
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 1
	pinsrb	xmm12, byte ptr [rsi + rax + 24], 1
	pinsrb	xmm13, byte ptr [rsi + rax + 25], 1
	pinsrb	xmm0, byte ptr [rsi + rax + 26], 1
	pinsrb	xmm11, byte ptr [rsi + rax + 27], 1
	pinsrb	xmm15, byte ptr [rsi + rax + 28], 1
	pinsrb	xmm9, byte ptr [rsi + rax + 29], 1
	pinsrb	xmm10, byte ptr [rsi + rax + 30], 1
	movzx	edx, byte ptr [rsi + rdi + 31]
	movd	xmm6, edx
	pinsrb	xmm6, byte ptr [rsi + rax + 31], 1
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdx + 18], 2
	pinsrb	xmm5, byte ptr [rsi + rdx + 19], 2
	pinsrb	xmm3, byte ptr [rsi + rdx + 20], 2
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 2
	pinsrb	xmm1, byte ptr [rsi + rdx + 22], 2
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 2
	pinsrb	xmm12, byte ptr [rsi + rdx + 24], 2
	pinsrb	xmm13, byte ptr [rsi + rdx + 25], 2
	pinsrb	xmm0, byte ptr [rsi + rdx + 26], 2
	pinsrb	xmm11, byte ptr [rsi + rdx + 27], 2
	pinsrb	xmm15, byte ptr [rsi + rdx + 28], 2
	pinsrb	xmm9, byte ptr [rsi + rdx + 29], 2
	pinsrb	xmm10, byte ptr [rsi + rdx + 30], 2
	pinsrb	xmm6, byte ptr [rsi + rdx + 31], 2
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdx + 18], 3
	mov	r14, r10
	pinsrb	xmm7, byte ptr [rsi + r10 + 18], 4
	pinsrb	xmm7, byte ptr [rsi + r8 + 18], 5
	pinsrb	xmm7, byte ptr [rsi + r11 + 18], 6
	pinsrb	xmm7, byte ptr [rsi + rbx + 18], 7
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 18], 8
	pinsrb	xmm7, byte ptr [rsi + r9 + 18], 9
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 18], 10
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + r10 + 18], 11
	pinsrb	xmm7, byte ptr [rsi + rcx + 18], 12
	pinsrb	xmm7, byte ptr [rsi + r13 + 18], 13
	pinsrb	xmm7, byte ptr [rsi + r12 + 18], 14
	pinsrb	xmm7, byte ptr [rsi + r15 + 18], 15
	pinsrb	xmm5, byte ptr [rsi + rdx + 19], 3
	pinsrb	xmm5, byte ptr [rsi + r14 + 19], 4
	pinsrb	xmm5, byte ptr [rsi + r8 + 19], 5
	pinsrb	xmm5, byte ptr [rsi + r11 + 19], 6
	pinsrb	xmm5, byte ptr [rsi + rbx + 19], 7
	pinsrb	xmm5, byte ptr [rsi + rax + 19], 8
	pinsrb	xmm5, byte ptr [rsi + r9 + 19], 9
	pinsrb	xmm5, byte ptr [rsi + rdi + 19], 10
	pinsrb	xmm5, byte ptr [rsi + r10 + 19], 11
	pinsrb	xmm5, byte ptr [rsi + rcx + 19], 12
	pinsrb	xmm5, byte ptr [rsi + r13 + 19], 13
	pinsrb	xmm5, byte ptr [rsi + r12 + 19], 14
	pinsrb	xmm5, byte ptr [rsi + r15 + 19], 15
	pinsrb	xmm3, byte ptr [rsi + rdx + 20], 3
	pinsrb	xmm3, byte ptr [rsi + r14 + 20], 4
	pinsrb	xmm3, byte ptr [rsi + r8 + 20], 5
	pinsrb	xmm3, byte ptr [rsi + r11 + 20], 6
	pinsrb	xmm3, byte ptr [rsi + rbx + 20], 7
	pinsrb	xmm3, byte ptr [rsi + rax + 20], 8
	pinsrb	xmm3, byte ptr [rsi + r9 + 20], 9
	pinsrb	xmm3, byte ptr [rsi + rdi + 20], 10
	pinsrb	xmm3, byte ptr [rsi + r10 + 20], 11
	pinsrb	xmm3, byte ptr [rsi + rcx + 20], 12
	pinsrb	xmm3, byte ptr [rsi + r13 + 20], 13
	pinsrb	xmm3, byte ptr [rsi + r12 + 20], 14
	pcmpeqb	xmm7, xmm14
	pandn	xmm7, xmmword ptr [rip + .LCPI4_17]
	pcmpeqb	xmm5, xmm14
	pandn	xmm5, xmmword ptr [rip + .LCPI4_18]
	por	xmm5, xmm7
	pinsrb	xmm3, byte ptr [rsi + r15 + 20], 15
	pcmpeqb	xmm3, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI4_19] # xmm7 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm3, xmm7
	por	xmm3, xmm5
	pcmpeqd	xmm5, xmm5
	psubb	xmm4, xmm5
	por	xmm3, xmm4
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 3
	pinsrb	xmm2, byte ptr [rsi + r14 + 21], 4
	pinsrb	xmm2, byte ptr [rsi + r8 + 21], 5
	pinsrb	xmm2, byte ptr [rsi + r11 + 21], 6
	pinsrb	xmm2, byte ptr [rsi + rbx + 21], 7
	pinsrb	xmm2, byte ptr [rsi + rax + 21], 8
	pinsrb	xmm2, byte ptr [rsi + r9 + 21], 9
	pinsrb	xmm2, byte ptr [rsi + rdi + 21], 10
	pinsrb	xmm2, byte ptr [rsi + r10 + 21], 11
	pinsrb	xmm2, byte ptr [rsi + rcx + 21], 12
	pinsrb	xmm2, byte ptr [rsi + r13 + 21], 13
	pinsrb	xmm2, byte ptr [rsi + r12 + 21], 14
	pinsrb	xmm2, byte ptr [rsi + r15 + 21], 15
	pinsrb	xmm1, byte ptr [rsi + rdx + 22], 3
	pinsrb	xmm1, byte ptr [rsi + r14 + 22], 4
	pinsrb	xmm1, byte ptr [rsi + r8 + 22], 5
	pinsrb	xmm1, byte ptr [rsi + r11 + 22], 6
	pinsrb	xmm1, byte ptr [rsi + rbx + 22], 7
	pinsrb	xmm1, byte ptr [rsi + rax + 22], 8
	pinsrb	xmm1, byte ptr [rsi + r9 + 22], 9
	pinsrb	xmm1, byte ptr [rsi + rdi + 22], 10
	pinsrb	xmm1, byte ptr [rsi + r10 + 22], 11
	pinsrb	xmm1, byte ptr [rsi + rcx + 22], 12
	pinsrb	xmm1, byte ptr [rsi + r13 + 22], 13
	pinsrb	xmm1, byte ptr [rsi + r12 + 22], 14
	pinsrb	xmm1, byte ptr [rsi + r15 + 22], 15
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 3
	pinsrb	xmm8, byte ptr [rsi + r14 + 23], 4
	pinsrb	xmm8, byte ptr [rsi + r8 + 23], 5
	pinsrb	xmm8, byte ptr [rsi + r11 + 23], 6
	pinsrb	xmm8, byte ptr [rsi + rbx + 23], 7
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 8
	pinsrb	xmm8, byte ptr [rsi + r9 + 23], 9
	pinsrb	xmm8, byte ptr [rsi + rdi + 23], 10
	pinsrb	xmm8, byte ptr [rsi + r10 + 23], 11
	pinsrb	xmm8, byte ptr [rsi + rcx + 23], 12
	pinsrb	xmm8, byte ptr [rsi + r13 + 23], 13
	pinsrb	xmm8, byte ptr [rsi + r12 + 23], 14
	movdqa	xmm4, xmm14
	pcmpeqb	xmm2, xmm14
	movdqa	xmm5, xmmword ptr [rip + .LCPI4_20] # xmm5 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm5
	pcmpeqb	xmm1, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI4_21] # xmm7 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm1, xmm7
	por	xmm1, xmm2
	pinsrb	xmm8, byte ptr [rsi + r15 + 23], 15
	pcmpeqb	xmm8, xmm14
	movdqa	xmm2, xmm14
	movdqa	xmm4, xmmword ptr [rip + .LCPI4_6] # xmm4 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm8, xmm4
	por	xmm8, xmm1
	pinsrb	xmm12, byte ptr [rsi + rdx + 24], 3
	pinsrb	xmm12, byte ptr [rsi + r14 + 24], 4
	pinsrb	xmm12, byte ptr [rsi + r8 + 24], 5
	pinsrb	xmm12, byte ptr [rsi + r11 + 24], 6
	pinsrb	xmm12, byte ptr [rsi + rbx + 24], 7
	pinsrb	xmm12, byte ptr [rsi + rax + 24], 8
	pinsrb	xmm12, byte ptr [rsi + r9 + 24], 9
	pinsrb	xmm12, byte ptr [rsi + rdi + 24], 10
	pinsrb	xmm12, byte ptr [rsi + r10 + 24], 11
	pinsrb	xmm12, byte ptr [rsi + rcx + 24], 12
	pinsrb	xmm12, byte ptr [rsi + r13 + 24], 13
	pinsrb	xmm12, byte ptr [rsi + r12 + 24], 14
	pinsrb	xmm12, byte ptr [rsi + r15 + 24], 15
	por	xmm8, xmm3
	pcmpeqb	xmm12, xmm14
	pinsrb	xmm13, byte ptr [rsi + rdx + 25], 3
	pinsrb	xmm13, byte ptr [rsi + r14 + 25], 4
	pinsrb	xmm13, byte ptr [rsi + r8 + 25], 5
	pinsrb	xmm13, byte ptr [rsi + r11 + 25], 6
	pinsrb	xmm13, byte ptr [rsi + rbx + 25], 7
	pinsrb	xmm13, byte ptr [rsi + rax + 25], 8
	pinsrb	xmm13, byte ptr [rsi + r9 + 25], 9
	pinsrb	xmm13, byte ptr [rsi + rdi + 25], 10
	pinsrb	xmm13, byte ptr [rsi + r10 + 25], 11
	pinsrb	xmm13, byte ptr [rsi + rcx + 25], 12
	pinsrb	xmm13, byte ptr [rsi + r13 + 25], 13
	pinsrb	xmm13, byte ptr [rsi + r12 + 25], 14
	pinsrb	xmm13, byte ptr [rsi + r15 + 25], 15
	pinsrb	xmm0, byte ptr [rsi + rdx + 26], 3
	pinsrb	xmm0, byte ptr [rsi + r14 + 26], 4
	pinsrb	xmm0, byte ptr [rsi + r8 + 26], 5
	pinsrb	xmm0, byte ptr [rsi + r11 + 26], 6
	pinsrb	xmm0, byte ptr [rsi + rbx + 26], 7
	pinsrb	xmm0, byte ptr [rsi + rax + 26], 8
	pinsrb	xmm0, byte ptr [rsi + r9 + 26], 9
	pinsrb	xmm0, byte ptr [rsi + rdi + 26], 10
	pinsrb	xmm0, byte ptr [rsi + r10 + 26], 11
	pinsrb	xmm0, byte ptr [rsi + rcx + 26], 12
	pinsrb	xmm0, byte ptr [rsi + r13 + 26], 13
	pinsrb	xmm0, byte ptr [rsi + r12 + 26], 14
	pinsrb	xmm0, byte ptr [rsi + r15 + 26], 15
	pinsrb	xmm11, byte ptr [rsi + rdx + 27], 3
	pinsrb	xmm11, byte ptr [rsi + r14 + 27], 4
	pinsrb	xmm11, byte ptr [rsi + r8 + 27], 5
	pinsrb	xmm11, byte ptr [rsi + r11 + 27], 6
	pinsrb	xmm11, byte ptr [rsi + rbx + 27], 7
	pinsrb	xmm11, byte ptr [rsi + rax + 27], 8
	pinsrb	xmm11, byte ptr [rsi + r9 + 27], 9
	pinsrb	xmm11, byte ptr [rsi + rdi + 27], 10
	pinsrb	xmm11, byte ptr [rsi + r10 + 27], 11
	pinsrb	xmm11, byte ptr [rsi + rcx + 27], 12
	pinsrb	xmm11, byte ptr [rsi + r13 + 27], 13
	pinsrb	xmm11, byte ptr [rsi + r12 + 27], 14
	pcmpeqb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI4_16]
	paddb	xmm13, xmm12
	pinsrb	xmm11, byte ptr [rsi + r15 + 27], 15
	pcmpeqb	xmm0, xmm14
	pandn	xmm0, xmmword ptr [rip + .LCPI4_17]
	pcmpeqb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI4_18]
	por	xmm11, xmm0
	pinsrb	xmm15, byte ptr [rsi + rdx + 28], 3
	pinsrb	xmm9, byte ptr [rsi + rdx + 29], 3
	pinsrb	xmm10, byte ptr [rsi + rdx + 30], 3
	pinsrb	xmm6, byte ptr [rsi + rdx + 31], 3
	pinsrb	xmm15, byte ptr [rsi + r14 + 28], 4
	pinsrb	xmm9, byte ptr [rsi + r14 + 29], 4
	pinsrb	xmm10, byte ptr [rsi + r14 + 30], 4
	pinsrb	xmm6, byte ptr [rsi + r14 + 31], 4
	pinsrb	xmm15, byte ptr [rsi + r8 + 28], 5
	pinsrb	xmm9, byte ptr [rsi + r8 + 29], 5
	pinsrb	xmm10, byte ptr [rsi + r8 + 30], 5
	pinsrb	xmm6, byte ptr [rsi + r8 + 31], 5
	mov	rdx, r11
	pinsrb	xmm15, byte ptr [rsi + r11 + 28], 6
	pinsrb	xmm9, byte ptr [rsi + r11 + 29], 6
	pinsrb	xmm10, byte ptr [rsi + r11 + 30], 6
	pinsrb	xmm6, byte ptr [rsi + r11 + 31], 6
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	mov	rdx, rbx
	pinsrb	xmm15, byte ptr [rsi + rbx + 28], 7
	pinsrb	xmm9, byte ptr [rsi + rbx + 29], 7
	pinsrb	xmm10, byte ptr [rsi + rbx + 30], 7
	pinsrb	xmm6, byte ptr [rsi + rbx + 31], 7
	pinsrb	xmm15, byte ptr [rsi + rax + 28], 8
	pinsrb	xmm9, byte ptr [rsi + rax + 29], 8
	pinsrb	xmm10, byte ptr [rsi + rax + 30], 8
	pinsrb	xmm6, byte ptr [rsi + rax + 31], 8
	pinsrb	xmm15, byte ptr [rsi + r9 + 28], 9
	pinsrb	xmm9, byte ptr [rsi + r9 + 29], 9
	pinsrb	xmm10, byte ptr [rsi + r9 + 30], 9
	pinsrb	xmm6, byte ptr [rsi + r9 + 31], 9
	pinsrb	xmm15, byte ptr [rsi + rdi + 28], 10
	pinsrb	xmm9, byte ptr [rsi + rdi + 29], 10
	pinsrb	xmm10, byte ptr [rsi + rdi + 30], 10
	pinsrb	xmm6, byte ptr [rsi + rdi + 31], 10
	mov	rax, r10
	pinsrb	xmm15, byte ptr [rsi + r10 + 28], 11
	pinsrb	xmm9, byte ptr [rsi + r10 + 29], 11
	pinsrb	xmm10, byte ptr [rsi + r10 + 30], 11
	pinsrb	xmm6, byte ptr [rsi + r10 + 31], 11
	pinsrb	xmm15, byte ptr [rsi + rcx + 28], 12
	pinsrb	xmm9, byte ptr [rsi + rcx + 29], 12
	pinsrb	xmm10, byte ptr [rsi + rcx + 30], 12
	pinsrb	xmm6, byte ptr [rsi + rcx + 31], 12
	mov	rax, r13
	pinsrb	xmm15, byte ptr [rsi + r13 + 28], 13
	pinsrb	xmm9, byte ptr [rsi + r13 + 29], 13
	pinsrb	xmm10, byte ptr [rsi + r13 + 30], 13
	pinsrb	xmm6, byte ptr [rsi + r13 + 31], 13
	mov	rax, r12
	pinsrb	xmm15, byte ptr [rsi + r12 + 28], 14
	pinsrb	xmm9, byte ptr [rsi + r12 + 29], 14
	pinsrb	xmm10, byte ptr [rsi + r12 + 30], 14
	pinsrb	xmm6, byte ptr [rsi + r12 + 31], 14
	pinsrb	xmm15, byte ptr [rsi + r15 + 28], 15
	pinsrb	xmm9, byte ptr [rsi + r15 + 29], 15
	pinsrb	xmm10, byte ptr [rsi + r15 + 30], 15
	pcmpeqb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI4_19]
	por	xmm15, xmm11
	pinsrb	xmm6, byte ptr [rsi + r15 + 31], 15
	psubb	xmm13, xmmword ptr [rip + .LCPI4_22]
	por	xmm15, xmm13
	pcmpeqb	xmm9, xmm14
	pandn	xmm9, xmm5
	pcmpeqb	xmm10, xmm14
	pandn	xmm10, xmm7
	por	xmm10, xmm9
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmm4
	por	xmm6, xmm10
	por	xmm6, xmm15
	movdqa	xmm0, xmm8
	punpcklbw	xmm0, xmm6              # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	movdqa	xmm4, xmmword ptr [rsp + 272]   # 16-byte Reload
	movdqa	xmm1, xmm4
	movdqa	xmm3, xmmword ptr [rsp + 176]   # 16-byte Reload
	punpcklbw	xmm1, xmm3              # xmm1 = xmm1[0],xmm3[0],xmm1[1],xmm3[1],xmm1[2],xmm3[2],xmm1[3],xmm3[3],xmm1[4],xmm3[4],xmm1[5],xmm3[5],xmm1[6],xmm3[6],xmm1[7],xmm3[7]
	movdqa	xmm2, xmm1
	punpcklwd	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
	punpckhwd	xmm1, xmm0              # xmm1 = xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpckhbw	xmm8, xmm6              # xmm8 = xmm8[8],xmm6[8],xmm8[9],xmm6[9],xmm8[10],xmm6[10],xmm8[11],xmm6[11],xmm8[12],xmm6[12],xmm8[13],xmm6[13],xmm8[14],xmm6[14],xmm8[15],xmm6[15]
	punpckhbw	xmm4, xmm3              # xmm4 = xmm4[8],xmm3[8],xmm4[9],xmm3[9],xmm4[10],xmm3[10],xmm4[11],xmm3[11],xmm4[12],xmm3[12],xmm4[13],xmm3[13],xmm4[14],xmm3[14],xmm4[15],xmm3[15]
	movdqa	xmm0, xmm4
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm4, xmm8              # xmm4 = xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx + 48], xmm4
	movdqu	xmmword ptr [r14 + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm1
	movdqu	xmmword ptr [r14 + 4*rcx], xmm2
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 240]      # 8-byte Folded Reload
	jne	.LBB4_181
# %bb.182:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 240]      # 8-byte Folded Reload
	mov	r11b, byte ptr [rsp + 8]        # 1-byte Reload
	mov	rsi, qword ptr [rsp + 288]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	jne	.LBB4_43
	jmp	.LBB4_131
.LBB4_183:
	and	r10, -16
	mov	rax, r10
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 248], rax      # 8-byte Spill
	mov	qword ptr [rsp + 240], r10      # 8-byte Spill
	lea	rax, [r14 + 4*r10]
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	movzx	eax, r11b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 160], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB4_184:                              # =>This Inner Loop Header: Depth=1
	mov	r9, rax
	mov	qword ptr [rsp + 152], rax      # 8-byte Spill
	shl	r9, 5
	mov	r12, r9
	mov	r13, r9
	mov	r10, r9
	mov	qword ptr [rsp + 64], r9        # 8-byte Spill
	mov	r15, r9
	mov	r11, r9
	mov	r14, r9
	mov	rdx, r9
	mov	r8, r9
	mov	rbx, r9
	mov	rdi, r9
	movzx	eax, byte ptr [rsi + r9]
	movd	xmm4, eax
	movzx	eax, byte ptr [rsi + r9 + 1]
	movd	xmm3, eax
	movzx	eax, byte ptr [rsi + r9 + 2]
	movd	xmm5, eax
	movzx	eax, byte ptr [rsi + r9 + 3]
	movd	xmm7, eax
	movzx	eax, byte ptr [rsi + r9 + 4]
	movd	xmm9, eax
	movzx	eax, byte ptr [rsi + r9 + 5]
	movd	xmm2, eax
	movzx	eax, byte ptr [rsi + r9 + 6]
	movd	xmm8, eax
	movzx	eax, byte ptr [rsi + r9 + 7]
	movd	xmm14, eax
	movzx	eax, byte ptr [rsi + r9 + 8]
	movd	xmm0, eax
	movdqa	xmmword ptr [rsp + 208], xmm0   # 16-byte Spill
	movzx	eax, byte ptr [rsi + r9 + 9]
	movd	xmm11, eax
	movzx	eax, byte ptr [rsi + r9 + 10]
	movd	xmm12, eax
	movzx	eax, byte ptr [rsi + r9 + 11]
	movd	xmm13, eax
	movzx	eax, byte ptr [rsi + r9 + 12]
	movd	xmm0, eax
	movdqa	xmmword ptr [rsp + 224], xmm0   # 16-byte Spill
	movzx	eax, byte ptr [rsi + r9 + 13]
	movd	xmm6, eax
	movzx	eax, byte ptr [rsi + r9 + 14]
	movd	xmm15, eax
	movzx	eax, byte ptr [rsi + r9 + 15]
	movd	xmm0, eax
	movdqa	xmmword ptr [rsp + 192], xmm0   # 16-byte Spill
	mov	qword ptr [rsp + 72], r9        # 8-byte Spill
	mov	rcx, r9
	or	rcx, 32
	mov	qword ptr [rsp + 48], rcx       # 8-byte Spill
	or	r12, 64
	or	r13, 96
	or	r10, 128
	mov	qword ptr [rsp + 112], r10      # 8-byte Spill
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	or	r10, 160
	mov	qword ptr [rsp + 64], r10       # 8-byte Spill
	or	r15, 192
	mov	qword ptr [rsp + 24], r15       # 8-byte Spill
	or	r11, 224
	or	r14, 256
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	or	rdx, 288
	or	r8, 320
	mov	qword ptr [rsp + 120], r8       # 8-byte Spill
	or	rbx, 352
	mov	qword ptr [rsp + 88], rbx       # 8-byte Spill
	or	rdi, 384
	mov	qword ptr [rsp + 32], rdi       # 8-byte Spill
	mov	rax, r9
	or	rax, 416
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	mov	rax, r9
	or	rax, 448
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	rdi, r9
	or	rdi, 480
	pinsrb	xmm4, byte ptr [rsi + rcx], 1
	mov	qword ptr [rsp + 96], r12       # 8-byte Spill
	pinsrb	xmm4, byte ptr [rsi + r12], 2
	pinsrb	xmm4, byte ptr [rsi + r13], 3
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx], 4
	pinsrb	xmm4, byte ptr [rsi + r10], 5
	pinsrb	xmm4, byte ptr [rsi + r15], 6
	pinsrb	xmm4, byte ptr [rsi + r11], 7
	pinsrb	xmm4, byte ptr [rsi + r14], 8
	pinsrb	xmm4, byte ptr [rsi + rdx], 9
	pinsrb	xmm4, byte ptr [rsi + r8], 10
	pinsrb	xmm4, byte ptr [rsi + rbx], 11
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx], 12
	mov	r9, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r9], 13
	pinsrb	xmm4, byte ptr [rsi + rax], 14
	pinsrb	xmm4, byte ptr [rsi + rdi], 15
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r9 + 1], 1
	pinsrb	xmm3, byte ptr [rsi + r12 + 1], 2
	pinsrb	xmm3, byte ptr [rsi + r13 + 1], 3
	mov	r12, r13
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r13 + 1], 4
	pinsrb	xmm3, byte ptr [rsi + r10 + 1], 5
	pinsrb	xmm3, byte ptr [rsi + r15 + 1], 6
	pinsrb	xmm3, byte ptr [rsi + r11 + 1], 7
	mov	r10, r11
	pinsrb	xmm3, byte ptr [rsi + r14 + 1], 8
	pinsrb	xmm3, byte ptr [rsi + rdx + 1], 9
	mov	r14, rdx
	pinsrb	xmm3, byte ptr [rsi + r8 + 1], 10
	pinsrb	xmm3, byte ptr [rsi + rbx + 1], 11
	pinsrb	xmm3, byte ptr [rsi + rcx + 1], 12
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 1], 13
	pinsrb	xmm3, byte ptr [rsi + rax + 1], 14
	movdqa	xmm1, xmmword ptr [rsp + 160]   # 16-byte Reload
	pcmpeqb	xmm4, xmm1
	pinsrb	xmm3, byte ptr [rsi + rdi + 1], 15
	mov	rcx, rdi
	pcmpeqb	xmm3, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_16] # xmm0 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm3, xmm0
	paddb	xmm3, xmm4
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 16]
	movd	xmm10, edx
	mov	rdx, r9
	pinsrb	xmm5, byte ptr [rsi + r9 + 2], 1
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdi + 2], 2
	mov	qword ptr [rsp + 56], r12       # 8-byte Spill
	pinsrb	xmm5, byte ptr [rsi + r12 + 2], 3
	mov	r8, r13
	pinsrb	xmm5, byte ptr [rsi + r13 + 2], 4
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r11 + 2], 5
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r13 + 2], 6
	mov	rbx, r10
	pinsrb	xmm5, byte ptr [rsi + r10 + 2], 7
	mov	r15, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r15 + 2], 8
	mov	r9, r14
	pinsrb	xmm5, byte ptr [rsi + r14 + 2], 9
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r10 + 2], 10
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r14 + 2], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 2], 12
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 2], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 2], 14
	mov	qword ptr [rsp + 80], rcx       # 8-byte Spill
	pinsrb	xmm5, byte ptr [rsi + rcx + 2], 15
	pinsrb	xmm7, byte ptr [rsi + rdx + 3], 1
	pinsrb	xmm7, byte ptr [rsi + rdi + 3], 2
	pinsrb	xmm7, byte ptr [rsi + r12 + 3], 3
	pinsrb	xmm7, byte ptr [rsi + r8 + 3], 4
	pinsrb	xmm7, byte ptr [rsi + r11 + 3], 5
	pinsrb	xmm7, byte ptr [rsi + r13 + 3], 6
	pinsrb	xmm7, byte ptr [rsi + rbx + 3], 7
	pinsrb	xmm7, byte ptr [rsi + r15 + 3], 8
	pinsrb	xmm7, byte ptr [rsi + r9 + 3], 9
	pinsrb	xmm7, byte ptr [rsi + r10 + 3], 10
	pinsrb	xmm7, byte ptr [rsi + r14 + 3], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 3], 12
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 3], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 3], 14
	pinsrb	xmm7, byte ptr [rsi + rcx + 3], 15
	pinsrb	xmm9, byte ptr [rsi + rdx + 4], 1
	pinsrb	xmm9, byte ptr [rsi + rdi + 4], 2
	pinsrb	xmm9, byte ptr [rsi + r12 + 4], 3
	pinsrb	xmm9, byte ptr [rsi + r8 + 4], 4
	mov	rdi, r8
	pinsrb	xmm9, byte ptr [rsi + r11 + 4], 5
	pinsrb	xmm9, byte ptr [rsi + r13 + 4], 6
	pinsrb	xmm9, byte ptr [rsi + rbx + 4], 7
	pinsrb	xmm9, byte ptr [rsi + r15 + 4], 8
	pinsrb	xmm9, byte ptr [rsi + r9 + 4], 9
	pinsrb	xmm9, byte ptr [rsi + r10 + 4], 10
	pinsrb	xmm9, byte ptr [rsi + r14 + 4], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rax + 4], 12
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r8 + 4], 13
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdx + 4], 14
	pinsrb	xmm9, byte ptr [rsi + rcx + 4], 15
	pcmpeqb	xmm5, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_17] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm5, xmm0
	pcmpeqb	xmm7, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_18] # xmm0 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm7, xmm0
	por	xmm7, xmm5
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 17]
	movd	xmm4, edx
	pcmpeqb	xmm9, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_19] # xmm0 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm9, xmm0
	por	xmm9, xmm7
	movzx	edx, byte ptr [rsi + rcx + 18]
	movd	xmm7, edx
	pcmpeqd	xmm0, xmm0
	psubb	xmm3, xmm0
	por	xmm9, xmm3
	movzx	edx, byte ptr [rsi + rcx + 19]
	movd	xmm5, edx
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r12 + 5], 1
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r13 + 5], 2
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rax + 5], 3
	pinsrb	xmm2, byte ptr [rsi + rdi + 5], 4
	mov	rdi, r11
	pinsrb	xmm2, byte ptr [rsi + r11 + 5], 5
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rax + 5], 6
	mov	qword ptr [rsp + 272], rbx      # 8-byte Spill
	pinsrb	xmm2, byte ptr [rsi + rbx + 5], 7
	pinsrb	xmm2, byte ptr [rsi + r15 + 5], 8
	mov	qword ptr [rsp + 136], r9       # 8-byte Spill
	pinsrb	xmm2, byte ptr [rsi + r9 + 5], 9
	pinsrb	xmm2, byte ptr [rsi + r10 + 5], 10
	pinsrb	xmm2, byte ptr [rsi + r14 + 5], 11
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdx + 5], 12
	mov	rcx, r8
	pinsrb	xmm2, byte ptr [rsi + r8 + 5], 13
	mov	r8, qword ptr [rsp + 40]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r8 + 5], 14
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r11 + 5], 15
	pinsrb	xmm8, byte ptr [rsi + r12 + 6], 1
	pinsrb	xmm8, byte ptr [rsi + r13 + 6], 2
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rax + 6], 3
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r13 + 6], 4
	pinsrb	xmm8, byte ptr [rsi + rdi + 6], 5
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rax + 6], 6
	mov	r13, rax
	pinsrb	xmm8, byte ptr [rsi + rbx + 6], 7
	pinsrb	xmm8, byte ptr [rsi + r15 + 6], 8
	pinsrb	xmm8, byte ptr [rsi + r9 + 6], 9
	pinsrb	xmm8, byte ptr [rsi + r10 + 6], 10
	pinsrb	xmm8, byte ptr [rsi + r14 + 6], 11
	pinsrb	xmm8, byte ptr [rsi + rdx + 6], 12
	pinsrb	xmm8, byte ptr [rsi + rcx + 6], 13
	pinsrb	xmm8, byte ptr [rsi + r8 + 6], 14
	pinsrb	xmm8, byte ptr [rsi + r11 + 6], 15
	pinsrb	xmm14, byte ptr [rsi + r12 + 7], 1
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r12 + 7], 2
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rax + 7], 3
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r11 + 7], 4
	pinsrb	xmm14, byte ptr [rsi + rdi + 7], 5
	mov	rax, r13
	pinsrb	xmm14, byte ptr [rsi + r13 + 7], 6
	pinsrb	xmm14, byte ptr [rsi + rbx + 7], 7
	pinsrb	xmm14, byte ptr [rsi + r15 + 7], 8
	mov	rbx, r15
	pinsrb	xmm14, byte ptr [rsi + r9 + 7], 9
	pinsrb	xmm14, byte ptr [rsi + r10 + 7], 10
	pinsrb	xmm14, byte ptr [rsi + r14 + 7], 11
	pinsrb	xmm14, byte ptr [rsi + rdx + 7], 12
	pinsrb	xmm14, byte ptr [rsi + rcx + 7], 13
	mov	r13, rcx
	pinsrb	xmm14, byte ptr [rsi + r8 + 7], 14
	movdqa	xmm1, xmm14
	movdqa	xmm14, xmmword ptr [rsp + 160]  # 16-byte Reload
	pcmpeqb	xmm2, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_20] # xmm0 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm0
	pcmpeqb	xmm8, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_21] # xmm0 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm8, xmm0
	por	xmm8, xmm2
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rdi + 20]
	movd	xmm3, edx
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rcx + 7], 15
	pcmpeqb	xmm1, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm1, xmm0
	por	xmm1, xmm8
	movzx	edx, byte ptr [rsi + rdi + 21]
	movd	xmm2, edx
	movdqa	xmm0, xmmword ptr [rsp + 208]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 8], 1
	pinsrb	xmm0, byte ptr [rsi + r12 + 8], 2
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r12 + 8], 3
	pinsrb	xmm0, byte ptr [rsi + r11 + 8], 4
	mov	r8, r11
	mov	r14, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r14 + 8], 5
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 8], 6
	mov	r11, qword ptr [rsp + 272]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r11 + 8], 7
	pinsrb	xmm0, byte ptr [rsi + r15 + 8], 8
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r10 + 8], 9
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r15 + 8], 10
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 8], 11
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 8], 12
	pinsrb	xmm0, byte ptr [rsi + r13 + 8], 13
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 8], 14
	pinsrb	xmm0, byte ptr [rsi + rcx + 8], 15
	por	xmm1, xmm9
	movdqa	xmmword ptr [rsp + 208], xmm1   # 16-byte Spill
	movzx	edx, byte ptr [rsi + rdi + 22]
	movd	xmm1, edx
	pcmpeqb	xmm0, xmm14
	pinsrb	xmm11, byte ptr [rsi + rax + 9], 1
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdi + 9], 2
	pinsrb	xmm11, byte ptr [rsi + r12 + 9], 3
	pinsrb	xmm11, byte ptr [rsi + r8 + 9], 4
	pinsrb	xmm11, byte ptr [rsi + r14 + 9], 5
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r13 + 9], 6
	pinsrb	xmm11, byte ptr [rsi + r11 + 9], 7
	pinsrb	xmm11, byte ptr [rsi + rbx + 9], 8
	mov	rcx, r10
	pinsrb	xmm11, byte ptr [rsi + r10 + 9], 9
	mov	r9, r15
	pinsrb	xmm11, byte ptr [rsi + r15 + 9], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r10 + 9], 11
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r15 + 9], 12
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 9], 13
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 9], 14
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 9], 15
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rax + 10], 1
	pinsrb	xmm12, byte ptr [rsi + rdi + 10], 2
	pinsrb	xmm12, byte ptr [rsi + r12 + 10], 3
	pinsrb	xmm12, byte ptr [rsi + r8 + 10], 4
	pinsrb	xmm12, byte ptr [rsi + r14 + 10], 5
	pinsrb	xmm12, byte ptr [rsi + r13 + 10], 6
	pinsrb	xmm12, byte ptr [rsi + r11 + 10], 7
	pinsrb	xmm12, byte ptr [rsi + rbx + 10], 8
	pinsrb	xmm12, byte ptr [rsi + rcx + 10], 9
	pinsrb	xmm12, byte ptr [rsi + r9 + 10], 10
	pinsrb	xmm12, byte ptr [rsi + r10 + 10], 11
	pinsrb	xmm12, byte ptr [rsi + r15 + 10], 12
	mov	r14, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r14 + 10], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rax + 10], 14
	pinsrb	xmm12, byte ptr [rsi + rdx + 10], 15
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rax + 11], 1
	pinsrb	xmm13, byte ptr [rsi + rdi + 11], 2
	mov	r14, rdi
	pinsrb	xmm13, byte ptr [rsi + r12 + 11], 3
	pinsrb	xmm13, byte ptr [rsi + r8 + 11], 4
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rax + 11], 5
	pinsrb	xmm13, byte ptr [rsi + r13 + 11], 6
	pinsrb	xmm13, byte ptr [rsi + r11 + 11], 7
	mov	r12, r11
	pinsrb	xmm13, byte ptr [rsi + rbx + 11], 8
	pinsrb	xmm13, byte ptr [rsi + rcx + 11], 9
	pinsrb	xmm13, byte ptr [rsi + r9 + 11], 10
	pinsrb	xmm13, byte ptr [rsi + r10 + 11], 11
	pinsrb	xmm13, byte ptr [rsi + r15 + 11], 12
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rdi + 11], 13
	mov	r13, rdi
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r9 + 11], 14
	pinsrb	xmm13, byte ptr [rsi + rdx + 11], 15
	pcmpeqb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI4_16]
	paddb	xmm11, xmm0
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rdi + 23]
	movd	xmm8, edx
	pcmpeqb	xmm12, xmm14
	pandn	xmm12, xmmword ptr [rip + .LCPI4_17]
	pcmpeqb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI4_18]
	por	xmm13, xmm12
	movzx	edx, byte ptr [rsi + rdi + 24]
	movd	xmm12, edx
	movdqa	xmm9, xmmword ptr [rsp + 224]   # 16-byte Reload
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r11 + 12], 1
	mov	r8, r14
	pinsrb	xmm9, byte ptr [rsi + r14 + 12], 2
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdi + 12], 3
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r14 + 12], 4
	pinsrb	xmm9, byte ptr [rsi + rax + 12], 5
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdx + 12], 6
	mov	r15, r12
	pinsrb	xmm9, byte ptr [rsi + r12 + 12], 7
	pinsrb	xmm9, byte ptr [rsi + rbx + 12], 8
	pinsrb	xmm9, byte ptr [rsi + rcx + 12], 9
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r12 + 12], 10
	pinsrb	xmm9, byte ptr [rsi + r10 + 12], 11
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r10 + 12], 12
	pinsrb	xmm9, byte ptr [rsi + r13 + 12], 13
	pinsrb	xmm9, byte ptr [rsi + r9 + 12], 14
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r13 + 12], 15
	pinsrb	xmm6, byte ptr [rsi + r11 + 13], 1
	pinsrb	xmm6, byte ptr [rsi + r8 + 13], 2
	pinsrb	xmm6, byte ptr [rsi + rdi + 13], 3
	pinsrb	xmm6, byte ptr [rsi + r14 + 13], 4
	pinsrb	xmm6, byte ptr [rsi + rax + 13], 5
	pinsrb	xmm6, byte ptr [rsi + rdx + 13], 6
	pinsrb	xmm6, byte ptr [rsi + r15 + 13], 7
	pinsrb	xmm6, byte ptr [rsi + rbx + 13], 8
	pinsrb	xmm6, byte ptr [rsi + rcx + 13], 9
	pinsrb	xmm6, byte ptr [rsi + r12 + 13], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rbx + 13], 11
	pinsrb	xmm6, byte ptr [rsi + r10 + 13], 12
	mov	r13, r10
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r10 + 13], 13
	pinsrb	xmm6, byte ptr [rsi + r9 + 13], 14
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r9 + 13], 15
	pinsrb	xmm15, byte ptr [rsi + r11 + 14], 1
	pinsrb	xmm15, byte ptr [rsi + r8 + 14], 2
	pinsrb	xmm15, byte ptr [rsi + rdi + 14], 3
	pinsrb	xmm15, byte ptr [rsi + r14 + 14], 4
	pinsrb	xmm15, byte ptr [rsi + rax + 14], 5
	pinsrb	xmm15, byte ptr [rsi + rdx + 14], 6
	pinsrb	xmm15, byte ptr [rsi + r15 + 14], 7
	mov	rdi, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdi + 14], 8
	pinsrb	xmm15, byte ptr [rsi + rcx + 14], 9
	mov	r11, r12
	pinsrb	xmm15, byte ptr [rsi + r12 + 14], 10
	pinsrb	xmm15, byte ptr [rsi + rbx + 14], 11
	mov	r12, r13
	pinsrb	xmm15, byte ptr [rsi + r13 + 14], 12
	mov	r13, r10
	pinsrb	xmm15, byte ptr [rsi + r10 + 14], 13
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r10 + 14], 14
	pcmpeqb	xmm9, xmm14
	pandn	xmm9, xmmword ptr [rip + .LCPI4_19]
	por	xmm9, xmm13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 25]
	movd	xmm13, edx
	psubb	xmm11, xmmword ptr [rip + .LCPI4_22]
	por	xmm9, xmm11
	movzx	edx, byte ptr [rsi + rax + 26]
	movd	xmm0, edx
	pinsrb	xmm15, byte ptr [rsi + r9 + 14], 15
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI4_20]
	pcmpeqb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI4_21]
	por	xmm15, xmm6
	movzx	edx, byte ptr [rsi + rax + 27]
	movd	xmm11, edx
	movdqa	xmm6, xmmword ptr [rsp + 192]   # 16-byte Reload
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 15], 1
	pinsrb	xmm6, byte ptr [rsi + r8 + 15], 2
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r9 + 15], 3
	pinsrb	xmm6, byte ptr [rsi + r14 + 15], 4
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 15], 5
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdx + 15], 6
	pinsrb	xmm6, byte ptr [rsi + r15 + 15], 7
	pinsrb	xmm6, byte ptr [rsi + rdi + 15], 8
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdi + 15], 9
	pinsrb	xmm6, byte ptr [rsi + r11 + 15], 10
	pinsrb	xmm6, byte ptr [rsi + rbx + 15], 11
	pinsrb	xmm6, byte ptr [rsi + r12 + 15], 12
	pinsrb	xmm6, byte ptr [rsi + r13 + 15], 13
	pinsrb	xmm6, byte ptr [rsi + r10 + 15], 14
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r10 + 15], 15
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI4_6]
	por	xmm6, xmm15
	movzx	edx, byte ptr [rsi + rax + 28]
	movd	xmm15, edx
	por	xmm6, xmm9
	movdqa	xmmword ptr [rsp + 192], xmm6   # 16-byte Spill
	movzx	edx, byte ptr [rsi + rax + 29]
	movd	xmm9, edx
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdx + 16], 1
	pinsrb	xmm10, byte ptr [rsi + r8 + 16], 2
	pinsrb	xmm10, byte ptr [rsi + r9 + 16], 3
	pinsrb	xmm10, byte ptr [rsi + r14 + 16], 4
	pinsrb	xmm10, byte ptr [rsi + rcx + 16], 5
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r12 + 16], 6
	pinsrb	xmm10, byte ptr [rsi + r15 + 16], 7
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rcx + 16], 8
	pinsrb	xmm10, byte ptr [rsi + rdi + 16], 9
	pinsrb	xmm10, byte ptr [rsi + r11 + 16], 10
	pinsrb	xmm10, byte ptr [rsi + rbx + 16], 11
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax + 16], 12
	mov	rax, r13
	pinsrb	xmm10, byte ptr [rsi + r13 + 16], 13
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r13 + 16], 14
	pinsrb	xmm10, byte ptr [rsi + r10 + 16], 15
	pinsrb	xmm4, byte ptr [rsi + rdx + 17], 1
	pinsrb	xmm4, byte ptr [rsi + r8 + 17], 2
	pinsrb	xmm4, byte ptr [rsi + r9 + 17], 3
	pinsrb	xmm4, byte ptr [rsi + r14 + 17], 4
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r8 + 17], 5
	mov	r9, r12
	pinsrb	xmm4, byte ptr [rsi + r12 + 17], 6
	pinsrb	xmm4, byte ptr [rsi + r15 + 17], 7
	pinsrb	xmm4, byte ptr [rsi + rcx + 17], 8
	pinsrb	xmm4, byte ptr [rsi + rdi + 17], 9
	pinsrb	xmm4, byte ptr [rsi + r11 + 17], 10
	pinsrb	xmm4, byte ptr [rsi + rbx + 17], 11
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r12 + 17], 12
	pinsrb	xmm4, byte ptr [rsi + rax + 17], 13
	pinsrb	xmm4, byte ptr [rsi + r13 + 17], 14
	pinsrb	xmm4, byte ptr [rsi + r10 + 17], 15
	mov	rdi, r10
	pcmpeqb	xmm10, xmm14
	pcmpeqb	xmm4, xmm14
	movdqa	xmm6, xmmword ptr [rip + .LCPI4_16] # xmm6 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm4, xmm6
	paddb	xmm4, xmm10
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 30]
	movd	xmm10, edx
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 18], 1
	pinsrb	xmm5, byte ptr [rsi + rax + 19], 1
	pinsrb	xmm3, byte ptr [rsi + rax + 20], 1
	pinsrb	xmm2, byte ptr [rsi + rax + 21], 1
	pinsrb	xmm1, byte ptr [rsi + rax + 22], 1
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 1
	pinsrb	xmm12, byte ptr [rsi + rax + 24], 1
	pinsrb	xmm13, byte ptr [rsi + rax + 25], 1
	pinsrb	xmm0, byte ptr [rsi + rax + 26], 1
	pinsrb	xmm11, byte ptr [rsi + rax + 27], 1
	pinsrb	xmm15, byte ptr [rsi + rax + 28], 1
	pinsrb	xmm9, byte ptr [rsi + rax + 29], 1
	pinsrb	xmm10, byte ptr [rsi + rax + 30], 1
	movzx	edx, byte ptr [rsi + rcx + 31]
	movd	xmm6, edx
	pinsrb	xmm6, byte ptr [rsi + rax + 31], 1
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdx + 18], 2
	pinsrb	xmm5, byte ptr [rsi + rdx + 19], 2
	pinsrb	xmm3, byte ptr [rsi + rdx + 20], 2
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 2
	pinsrb	xmm1, byte ptr [rsi + rdx + 22], 2
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 2
	pinsrb	xmm12, byte ptr [rsi + rdx + 24], 2
	pinsrb	xmm13, byte ptr [rsi + rdx + 25], 2
	pinsrb	xmm0, byte ptr [rsi + rdx + 26], 2
	pinsrb	xmm11, byte ptr [rsi + rdx + 27], 2
	pinsrb	xmm15, byte ptr [rsi + rdx + 28], 2
	pinsrb	xmm9, byte ptr [rsi + rdx + 29], 2
	pinsrb	xmm10, byte ptr [rsi + rdx + 30], 2
	pinsrb	xmm6, byte ptr [rsi + rdx + 31], 2
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdx + 18], 3
	pinsrb	xmm7, byte ptr [rsi + r14 + 18], 4
	pinsrb	xmm7, byte ptr [rsi + r8 + 18], 5
	mov	rbx, r9
	pinsrb	xmm7, byte ptr [rsi + r9 + 18], 6
	pinsrb	xmm7, byte ptr [rsi + r15 + 18], 7
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + r11 + 18], 8
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rcx + 18], 9
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + r9 + 18], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + r10 + 18], 11
	mov	rax, r12
	pinsrb	xmm7, byte ptr [rsi + r12 + 18], 12
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + r12 + 18], 13
	pinsrb	xmm7, byte ptr [rsi + r13 + 18], 14
	pinsrb	xmm7, byte ptr [rsi + rdi + 18], 15
	pinsrb	xmm5, byte ptr [rsi + rdx + 19], 3
	pinsrb	xmm5, byte ptr [rsi + r14 + 19], 4
	pinsrb	xmm5, byte ptr [rsi + r8 + 19], 5
	pinsrb	xmm5, byte ptr [rsi + rbx + 19], 6
	pinsrb	xmm5, byte ptr [rsi + r15 + 19], 7
	pinsrb	xmm5, byte ptr [rsi + r11 + 19], 8
	pinsrb	xmm5, byte ptr [rsi + rcx + 19], 9
	pinsrb	xmm5, byte ptr [rsi + r9 + 19], 10
	pinsrb	xmm5, byte ptr [rsi + r10 + 19], 11
	pinsrb	xmm5, byte ptr [rsi + rax + 19], 12
	pinsrb	xmm5, byte ptr [rsi + r12 + 19], 13
	pinsrb	xmm5, byte ptr [rsi + r13 + 19], 14
	pinsrb	xmm5, byte ptr [rsi + rdi + 19], 15
	pinsrb	xmm3, byte ptr [rsi + rdx + 20], 3
	pinsrb	xmm3, byte ptr [rsi + r14 + 20], 4
	pinsrb	xmm3, byte ptr [rsi + r8 + 20], 5
	pinsrb	xmm3, byte ptr [rsi + rbx + 20], 6
	pinsrb	xmm3, byte ptr [rsi + r15 + 20], 7
	pinsrb	xmm3, byte ptr [rsi + r11 + 20], 8
	pinsrb	xmm3, byte ptr [rsi + rcx + 20], 9
	pinsrb	xmm3, byte ptr [rsi + r9 + 20], 10
	pinsrb	xmm3, byte ptr [rsi + r10 + 20], 11
	pinsrb	xmm3, byte ptr [rsi + rax + 20], 12
	pinsrb	xmm3, byte ptr [rsi + r12 + 20], 13
	pinsrb	xmm3, byte ptr [rsi + r13 + 20], 14
	pcmpeqb	xmm7, xmm14
	movdqa	xmm14, xmmword ptr [rip + .LCPI4_17] # xmm14 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm7, xmm14
	pcmpeqb	xmm5, xmmword ptr [rsp + 160]   # 16-byte Folded Reload
	movdqa	xmm14, xmmword ptr [rip + .LCPI4_18] # xmm14 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm5, xmm14
	por	xmm5, xmm7
	pinsrb	xmm3, byte ptr [rsi + rdi + 20], 15
	movdqa	xmm14, xmmword ptr [rsp + 160]  # 16-byte Reload
	pcmpeqb	xmm3, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI4_19] # xmm7 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm3, xmm7
	por	xmm3, xmm5
	pcmpeqd	xmm5, xmm5
	psubb	xmm4, xmm5
	por	xmm3, xmm4
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 3
	pinsrb	xmm2, byte ptr [rsi + r14 + 21], 4
	pinsrb	xmm2, byte ptr [rsi + r8 + 21], 5
	pinsrb	xmm2, byte ptr [rsi + rbx + 21], 6
	pinsrb	xmm2, byte ptr [rsi + r15 + 21], 7
	pinsrb	xmm2, byte ptr [rsi + r11 + 21], 8
	pinsrb	xmm2, byte ptr [rsi + rcx + 21], 9
	pinsrb	xmm2, byte ptr [rsi + r9 + 21], 10
	pinsrb	xmm2, byte ptr [rsi + r10 + 21], 11
	pinsrb	xmm2, byte ptr [rsi + rax + 21], 12
	pinsrb	xmm2, byte ptr [rsi + r12 + 21], 13
	pinsrb	xmm2, byte ptr [rsi + r13 + 21], 14
	pinsrb	xmm2, byte ptr [rsi + rdi + 21], 15
	pinsrb	xmm1, byte ptr [rsi + rdx + 22], 3
	pinsrb	xmm1, byte ptr [rsi + r14 + 22], 4
	pinsrb	xmm1, byte ptr [rsi + r8 + 22], 5
	pinsrb	xmm1, byte ptr [rsi + rbx + 22], 6
	pinsrb	xmm1, byte ptr [rsi + r15 + 22], 7
	pinsrb	xmm1, byte ptr [rsi + r11 + 22], 8
	pinsrb	xmm1, byte ptr [rsi + rcx + 22], 9
	pinsrb	xmm1, byte ptr [rsi + r9 + 22], 10
	pinsrb	xmm1, byte ptr [rsi + r10 + 22], 11
	pinsrb	xmm1, byte ptr [rsi + rax + 22], 12
	pinsrb	xmm1, byte ptr [rsi + r12 + 22], 13
	pinsrb	xmm1, byte ptr [rsi + r13 + 22], 14
	pinsrb	xmm1, byte ptr [rsi + rdi + 22], 15
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 3
	pinsrb	xmm8, byte ptr [rsi + r14 + 23], 4
	pinsrb	xmm8, byte ptr [rsi + r8 + 23], 5
	pinsrb	xmm8, byte ptr [rsi + rbx + 23], 6
	pinsrb	xmm8, byte ptr [rsi + r15 + 23], 7
	pinsrb	xmm8, byte ptr [rsi + r11 + 23], 8
	pinsrb	xmm8, byte ptr [rsi + rcx + 23], 9
	pinsrb	xmm8, byte ptr [rsi + r9 + 23], 10
	pinsrb	xmm8, byte ptr [rsi + r10 + 23], 11
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 12
	pinsrb	xmm8, byte ptr [rsi + r12 + 23], 13
	pinsrb	xmm8, byte ptr [rsi + r13 + 23], 14
	pcmpeqb	xmm2, xmm14
	movdqa	xmm5, xmmword ptr [rip + .LCPI4_20] # xmm5 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm5
	pcmpeqb	xmm1, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI4_21] # xmm7 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm1, xmm7
	por	xmm1, xmm2
	pinsrb	xmm8, byte ptr [rsi + rdi + 23], 15
	pcmpeqb	xmm8, xmm14
	movdqa	xmm4, xmmword ptr [rip + .LCPI4_6] # xmm4 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm8, xmm4
	por	xmm8, xmm1
	pinsrb	xmm12, byte ptr [rsi + rdx + 24], 3
	pinsrb	xmm12, byte ptr [rsi + r14 + 24], 4
	pinsrb	xmm12, byte ptr [rsi + r8 + 24], 5
	pinsrb	xmm12, byte ptr [rsi + rbx + 24], 6
	pinsrb	xmm12, byte ptr [rsi + r15 + 24], 7
	pinsrb	xmm12, byte ptr [rsi + r11 + 24], 8
	pinsrb	xmm12, byte ptr [rsi + rcx + 24], 9
	pinsrb	xmm12, byte ptr [rsi + r9 + 24], 10
	pinsrb	xmm12, byte ptr [rsi + r10 + 24], 11
	pinsrb	xmm12, byte ptr [rsi + rax + 24], 12
	pinsrb	xmm12, byte ptr [rsi + r12 + 24], 13
	pinsrb	xmm12, byte ptr [rsi + r13 + 24], 14
	pinsrb	xmm12, byte ptr [rsi + rdi + 24], 15
	por	xmm8, xmm3
	pcmpeqb	xmm12, xmm14
	pinsrb	xmm13, byte ptr [rsi + rdx + 25], 3
	pinsrb	xmm13, byte ptr [rsi + r14 + 25], 4
	pinsrb	xmm13, byte ptr [rsi + r8 + 25], 5
	pinsrb	xmm13, byte ptr [rsi + rbx + 25], 6
	pinsrb	xmm13, byte ptr [rsi + r15 + 25], 7
	pinsrb	xmm13, byte ptr [rsi + r11 + 25], 8
	pinsrb	xmm13, byte ptr [rsi + rcx + 25], 9
	pinsrb	xmm13, byte ptr [rsi + r9 + 25], 10
	pinsrb	xmm13, byte ptr [rsi + r10 + 25], 11
	pinsrb	xmm13, byte ptr [rsi + rax + 25], 12
	pinsrb	xmm13, byte ptr [rsi + r12 + 25], 13
	pinsrb	xmm13, byte ptr [rsi + r13 + 25], 14
	pinsrb	xmm13, byte ptr [rsi + rdi + 25], 15
	pinsrb	xmm0, byte ptr [rsi + rdx + 26], 3
	pinsrb	xmm0, byte ptr [rsi + r14 + 26], 4
	pinsrb	xmm0, byte ptr [rsi + r8 + 26], 5
	pinsrb	xmm0, byte ptr [rsi + rbx + 26], 6
	pinsrb	xmm0, byte ptr [rsi + r15 + 26], 7
	pinsrb	xmm0, byte ptr [rsi + r11 + 26], 8
	pinsrb	xmm0, byte ptr [rsi + rcx + 26], 9
	pinsrb	xmm0, byte ptr [rsi + r9 + 26], 10
	pinsrb	xmm0, byte ptr [rsi + r10 + 26], 11
	pinsrb	xmm0, byte ptr [rsi + rax + 26], 12
	pinsrb	xmm0, byte ptr [rsi + r12 + 26], 13
	pinsrb	xmm0, byte ptr [rsi + r13 + 26], 14
	pinsrb	xmm0, byte ptr [rsi + rdi + 26], 15
	pinsrb	xmm11, byte ptr [rsi + rdx + 27], 3
	pinsrb	xmm11, byte ptr [rsi + r14 + 27], 4
	pinsrb	xmm11, byte ptr [rsi + r8 + 27], 5
	pinsrb	xmm11, byte ptr [rsi + rbx + 27], 6
	pinsrb	xmm11, byte ptr [rsi + r15 + 27], 7
	pinsrb	xmm11, byte ptr [rsi + r11 + 27], 8
	pinsrb	xmm11, byte ptr [rsi + rcx + 27], 9
	pinsrb	xmm11, byte ptr [rsi + r9 + 27], 10
	pinsrb	xmm11, byte ptr [rsi + r10 + 27], 11
	pinsrb	xmm11, byte ptr [rsi + rax + 27], 12
	pinsrb	xmm11, byte ptr [rsi + r12 + 27], 13
	pinsrb	xmm11, byte ptr [rsi + r13 + 27], 14
	pcmpeqb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI4_16]
	paddb	xmm13, xmm12
	pinsrb	xmm11, byte ptr [rsi + rdi + 27], 15
	pcmpeqb	xmm0, xmm14
	pandn	xmm0, xmmword ptr [rip + .LCPI4_17]
	pcmpeqb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI4_18]
	por	xmm11, xmm0
	pinsrb	xmm15, byte ptr [rsi + rdx + 28], 3
	pinsrb	xmm9, byte ptr [rsi + rdx + 29], 3
	pinsrb	xmm10, byte ptr [rsi + rdx + 30], 3
	pinsrb	xmm6, byte ptr [rsi + rdx + 31], 3
	pinsrb	xmm15, byte ptr [rsi + r14 + 28], 4
	pinsrb	xmm9, byte ptr [rsi + r14 + 29], 4
	pinsrb	xmm10, byte ptr [rsi + r14 + 30], 4
	pinsrb	xmm6, byte ptr [rsi + r14 + 31], 4
	mov	rdx, r8
	pinsrb	xmm15, byte ptr [rsi + r8 + 28], 5
	pinsrb	xmm9, byte ptr [rsi + r8 + 29], 5
	pinsrb	xmm10, byte ptr [rsi + r8 + 30], 5
	pinsrb	xmm6, byte ptr [rsi + r8 + 31], 5
	pinsrb	xmm15, byte ptr [rsi + rbx + 28], 6
	pinsrb	xmm9, byte ptr [rsi + rbx + 29], 6
	pinsrb	xmm10, byte ptr [rsi + rbx + 30], 6
	pinsrb	xmm6, byte ptr [rsi + rbx + 31], 6
	pinsrb	xmm15, byte ptr [rsi + r15 + 28], 7
	pinsrb	xmm9, byte ptr [rsi + r15 + 29], 7
	pinsrb	xmm10, byte ptr [rsi + r15 + 30], 7
	pinsrb	xmm6, byte ptr [rsi + r15 + 31], 7
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r11 + 28], 8
	pinsrb	xmm9, byte ptr [rsi + r11 + 29], 8
	pinsrb	xmm10, byte ptr [rsi + r11 + 30], 8
	pinsrb	xmm6, byte ptr [rsi + r11 + 31], 8
	pinsrb	xmm15, byte ptr [rsi + rcx + 28], 9
	pinsrb	xmm9, byte ptr [rsi + rcx + 29], 9
	pinsrb	xmm10, byte ptr [rsi + rcx + 30], 9
	pinsrb	xmm6, byte ptr [rsi + rcx + 31], 9
	mov	rdx, r9
	pinsrb	xmm15, byte ptr [rsi + r9 + 28], 10
	pinsrb	xmm9, byte ptr [rsi + r9 + 29], 10
	pinsrb	xmm10, byte ptr [rsi + r9 + 30], 10
	pinsrb	xmm6, byte ptr [rsi + r9 + 31], 10
	mov	rdx, r10
	pinsrb	xmm15, byte ptr [rsi + r10 + 28], 11
	pinsrb	xmm9, byte ptr [rsi + r10 + 29], 11
	pinsrb	xmm10, byte ptr [rsi + r10 + 30], 11
	pinsrb	xmm6, byte ptr [rsi + r10 + 31], 11
	pinsrb	xmm15, byte ptr [rsi + rax + 28], 12
	pinsrb	xmm9, byte ptr [rsi + rax + 29], 12
	pinsrb	xmm10, byte ptr [rsi + rax + 30], 12
	pinsrb	xmm6, byte ptr [rsi + rax + 31], 12
	mov	rax, r12
	pinsrb	xmm15, byte ptr [rsi + r12 + 28], 13
	pinsrb	xmm9, byte ptr [rsi + r12 + 29], 13
	pinsrb	xmm10, byte ptr [rsi + r12 + 30], 13
	pinsrb	xmm6, byte ptr [rsi + r12 + 31], 13
	pinsrb	xmm15, byte ptr [rsi + r13 + 28], 14
	pinsrb	xmm9, byte ptr [rsi + r13 + 29], 14
	pinsrb	xmm10, byte ptr [rsi + r13 + 30], 14
	pinsrb	xmm6, byte ptr [rsi + r13 + 31], 14
	mov	rax, rdi
	pinsrb	xmm15, byte ptr [rsi + rdi + 28], 15
	pinsrb	xmm9, byte ptr [rsi + rdi + 29], 15
	pinsrb	xmm10, byte ptr [rsi + rdi + 30], 15
	pcmpeqb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI4_19]
	por	xmm15, xmm11
	pinsrb	xmm6, byte ptr [rsi + rdi + 31], 15
	psubb	xmm13, xmmword ptr [rip + .LCPI4_22]
	por	xmm15, xmm13
	pcmpeqb	xmm9, xmm14
	pandn	xmm9, xmm5
	pcmpeqb	xmm10, xmm14
	pandn	xmm10, xmm7
	por	xmm10, xmm9
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmm4
	por	xmm6, xmm10
	por	xmm6, xmm15
	movdqa	xmm0, xmm8
	punpcklbw	xmm0, xmm6              # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	movdqa	xmm3, xmmword ptr [rsp + 208]   # 16-byte Reload
	movdqa	xmm1, xmm3
	movdqa	xmm4, xmmword ptr [rsp + 192]   # 16-byte Reload
	punpcklbw	xmm1, xmm4              # xmm1 = xmm1[0],xmm4[0],xmm1[1],xmm4[1],xmm1[2],xmm4[2],xmm1[3],xmm4[3],xmm1[4],xmm4[4],xmm1[5],xmm4[5],xmm1[6],xmm4[6],xmm1[7],xmm4[7]
	movdqa	xmm2, xmm1
	punpcklwd	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
	punpckhwd	xmm1, xmm0              # xmm1 = xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpckhbw	xmm8, xmm6              # xmm8 = xmm8[8],xmm6[8],xmm8[9],xmm6[9],xmm8[10],xmm6[10],xmm8[11],xmm6[11],xmm8[12],xmm6[12],xmm8[13],xmm6[13],xmm8[14],xmm6[14],xmm8[15],xmm6[15]
	punpckhbw	xmm3, xmm4              # xmm3 = xmm3[8],xmm4[8],xmm3[9],xmm4[9],xmm3[10],xmm4[10],xmm3[11],xmm4[11],xmm3[12],xmm4[12],xmm3[13],xmm4[13],xmm3[14],xmm4[14],xmm3[15],xmm4[15]
	movdqa	xmm0, xmm3
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm3, xmm8              # xmm3 = xmm3[4],xmm8[4],xmm3[5],xmm8[5],xmm3[6],xmm8[6],xmm3[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 152]      # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx + 48], xmm3
	movdqu	xmmword ptr [r14 + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm1
	movdqu	xmmword ptr [r14 + 4*rcx], xmm2
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 240]      # 8-byte Folded Reload
	jne	.LBB4_184
# %bb.185:
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 240]      # 8-byte Folded Reload
	mov	r11b, byte ptr [rsp + 8]        # 1-byte Reload
	mov	rsi, qword ptr [rsp + 248]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	jne	.LBB4_69
	jmp	.LBB4_135
.LBB4_186:
	and	r10, -8
	mov	rax, r10
	shl	rax, 6
	add	rax, rsi
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	qword ptr [rsp + 24], r10       # 8-byte Spill
	lea	rax, [r14 + 4*r10]
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	dword ptr [rsp + 64], r13d      # 4-byte Spill
	movd	xmm0, r13d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm11, xmm0, 0                  # xmm11 = xmm0[0,0,0,0]
	xor	r15d, r15d
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	pxor	xmm15, xmm15
	.p2align	4, 0x90
.LBB4_187:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	shl	r15, 6
	mov	r8, r15
	mov	r12, r15
	mov	r13, r15
	mov	rbx, r15
	mov	rdi, r15
	mov	r9, r15
	movzx	eax, word ptr [rsi + r15]
	movd	xmm5, eax
	movzx	eax, word ptr [rsi + r15 + 2]
	movd	xmm0, eax
	movzx	eax, word ptr [rsi + r15 + 4]
	movd	xmm1, eax
	movzx	eax, word ptr [rsi + r15 + 6]
	movd	xmm7, eax
	movzx	eax, word ptr [rsi + r15 + 8]
	movd	xmm8, eax
	movzx	eax, word ptr [rsi + r15 + 10]
	movd	xmm4, eax
	movzx	eax, word ptr [rsi + r15 + 12]
	movzx	r10d, word ptr [rsi + r15 + 14]
	movzx	r11d, word ptr [rsi + r15 + 16]
	movzx	edx, word ptr [rsi + r15 + 18]
	movzx	r14d, word ptr [rsi + r15 + 20]
	mov	rcx, r15
	or	rcx, 64
	or	r8, 128
	or	r12, 192
	or	r13, 256
	or	rbx, 320
	or	rdi, 384
	pinsrw	xmm5, word ptr [rsi + rcx], 1
	pinsrw	xmm5, word ptr [rsi + r8], 2
	pinsrw	xmm5, word ptr [rsi + r12], 3
	pinsrw	xmm5, word ptr [rsi + r13], 4
	pinsrw	xmm5, word ptr [rsi + rbx], 5
	pinsrw	xmm5, word ptr [rsi + rdi], 6
	pinsrw	xmm0, word ptr [rsi + rcx + 2], 1
	pinsrw	xmm0, word ptr [rsi + r8 + 2], 2
	pinsrw	xmm0, word ptr [rsi + r12 + 2], 3
	pinsrw	xmm0, word ptr [rsi + r13 + 2], 4
	pinsrw	xmm0, word ptr [rsi + rbx + 2], 5
	pinsrw	xmm0, word ptr [rsi + rdi + 2], 6
	or	r9, 448
	pinsrw	xmm0, word ptr [rsi + r9 + 2], 7
	movd	xmm2, eax
	movzx	eax, word ptr [rsi + r15 + 22]
	mov	dword ptr [rsp + 16], eax       # 4-byte Spill
	pcmpeqw	xmm0, xmm11
	pinsrw	xmm1, word ptr [rsi + rcx + 4], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 4], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 4], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 4], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 4], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 4], 6
	pinsrw	xmm1, word ptr [rsi + r9 + 4], 7
	packsswb	xmm0, xmm0
	pcmpeqw	xmm1, xmm11
	movdqa	xmm9, xmmword ptr [rip + .LCPI4_8] # xmm9 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm3, xmm9
	pblendvb	xmm3, xmm15, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_9] # xmm0 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm0
	movdqa	xmm14, xmm0
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm1, r10d
	movzx	r10d, word ptr [rsi + r15 + 24]
	pinsrw	xmm5, word ptr [rsi + r9], 7
	pcmpeqw	xmm5, xmm11
	pcmpeqd	xmm0, xmm0
	pxor	xmm5, xmm0
	packsswb	xmm5, xmm5
	pinsrw	xmm7, word ptr [rsi + rcx + 6], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 6], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 6], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 6], 4
	pinsrw	xmm7, word ptr [rsi + rbx + 6], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 6], 6
	pinsrw	xmm7, word ptr [rsi + r9 + 6], 7
	pcmpeqw	xmm7, xmm11
	packsswb	xmm7, xmm7
	pinsrw	xmm8, word ptr [rsi + rcx + 8], 1
	pinsrw	xmm8, word ptr [rsi + r8 + 8], 2
	pinsrw	xmm8, word ptr [rsi + r12 + 8], 3
	pinsrw	xmm8, word ptr [rsi + r13 + 8], 4
	pinsrw	xmm8, word ptr [rsi + rbx + 8], 5
	pinsrw	xmm8, word ptr [rsi + rdi + 8], 6
	pinsrw	xmm8, word ptr [rsi + r9 + 8], 7
	psubb	xmm3, xmm5
	movdqa	xmm12, xmmword ptr [rip + .LCPI4_10] # xmm12 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm7
	pblendvb	xmm12, xmm15, xmm0
	movd	xmm7, r11d
	movzx	eax, word ptr [rsi + r15 + 26]
	pcmpeqw	xmm8, xmm11
	packsswb	xmm8, xmm8
	por	xmm12, xmm6
	movdqa	xmm13, xmmword ptr [rip + .LCPI4_11] # xmm13 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm8
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm6, edx
	movzx	r11d, word ptr [rsi + r15 + 28]
	pinsrw	xmm4, word ptr [rsi + rcx + 10], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 10], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 10], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 10], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 10], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 10], 6
	pinsrw	xmm4, word ptr [rsi + r9 + 10], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	pinsrw	xmm2, word ptr [rsi + rcx + 12], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 12], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 12], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 12], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 12], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 12], 6
	por	xmm12, xmm3
	movdqa	xmm5, xmmword ptr [rip + .LCPI4_12] # xmm5 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm4, r14d
	movzx	edx, word ptr [rsi + r15 + 30]
	mov	dword ptr [rsp + 48], edx       # 4-byte Spill
	pinsrw	xmm2, word ptr [rsi + r9 + 12], 7
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm13
	movdqa	xmm13, xmmword ptr [rip + .LCPI4_13] # xmm13 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm3, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	edx, word ptr [rsi + r15 + 32]
	mov	dword ptr [rsp + 32], edx       # 4-byte Spill
	pinsrw	xmm1, word ptr [rsi + rcx + 14], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 14], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 14], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 14], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 14], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 14], 6
	por	xmm13, xmm5
	movd	xmm2, r10d
	movzx	edx, word ptr [rsi + r15 + 34]
	mov	dword ptr [rsp + 16], edx       # 4-byte Spill
	pinsrw	xmm1, word ptr [rsi + r9 + 14], 7
	pcmpeqw	xmm1, xmm11
	pinsrw	xmm6, word ptr [rsi + rcx + 18], 1
	pinsrw	xmm6, word ptr [rsi + r8 + 18], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 18], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 18], 4
	pinsrw	xmm6, word ptr [rsi + rbx + 18], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 18], 6
	packsswb	xmm1, xmm1
	pinsrw	xmm6, word ptr [rsi + r9 + 18], 7
	pcmpeqw	xmm6, xmm11
	packsswb	xmm6, xmm6
	por	xmm13, xmm12
	movdqa	xmm12, xmmword ptr [rip + .LCPI4_14] # xmm12 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm12, xmm15, xmm0
	movdqa	xmm8, xmm9
	movdqa	xmm0, xmm6
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm1, eax
	movzx	r14d, word ptr [rsi + r15 + 36]
	pinsrw	xmm7, word ptr [rsi + rcx + 16], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 16], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 16], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 16], 4
	pinsrw	xmm7, word ptr [rsi + rbx + 16], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 16], 6
	pinsrw	xmm4, word ptr [rsi + rcx + 20], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 20], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 20], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 20], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 20], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 20], 6
	pinsrw	xmm4, word ptr [rsi + r9 + 20], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm12, xmm13
	movdqa	xmm5, xmm14
	movdqa	xmm0, xmm4
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm4, r11d
	movzx	r11d, word ptr [rsi + r15 + 38]
	pinsrw	xmm7, word ptr [rsi + r9 + 16], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI4_22]
	packsswb	xmm7, xmm7
	pinsrw	xmm3, word ptr [rsi + rcx + 22], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 22], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 22], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 22], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 22], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 22], 6
	pinsrw	xmm3, word ptr [rsi + r9 + 22], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [rsi + rcx + 24], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 24], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 24], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 24], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 24], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 24], 6
	pinsrw	xmm2, word ptr [rsi + r9 + 24], 7
	psubb	xmm8, xmm7
	movdqa	xmm10, xmmword ptr [rip + .LCPI4_10] # xmm10 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm14, xmm10
	movdqa	xmm0, xmm3
	pblendvb	xmm14, xmm15, xmm0
	movd	xmm3, dword ptr [rsp + 48]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rsi + r15 + 40]
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm14, xmm5
	movdqa	xmm9, xmmword ptr [rip + .LCPI4_11] # xmm9 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm13, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm7, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rsi + r15 + 42]
	pinsrw	xmm1, word ptr [rsi + rcx + 26], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 26], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 26], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 26], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 26], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 26], 6
	pinsrw	xmm1, word ptr [rsi + r9 + 26], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm4, word ptr [rsi + rcx + 28], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 28], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 28], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 28], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 28], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 28], 6
	por	xmm14, xmm8
	movdqa	xmm5, xmmword ptr [rip + .LCPI4_12] # xmm5 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm2, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm2 = mem[0],zero,zero,zero
	movzx	edx, word ptr [rsi + r15 + 44]
	mov	dword ptr [rsp + 32], edx       # 4-byte Spill
	pinsrw	xmm4, word ptr [rsi + r9 + 28], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm5, xmm13
	movdqa	xmm6, xmmword ptr [rip + .LCPI4_13] # xmm6 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm4, r14d
	movzx	edx, word ptr [rsi + r15 + 46]
	mov	dword ptr [rsp + 16], edx       # 4-byte Spill
	pinsrw	xmm3, word ptr [rsi + rcx + 30], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 30], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 30], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 30], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 30], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 30], 6
	por	xmm6, xmm5
	movd	xmm1, r11d
	movzx	r11d, word ptr [rsi + r15 + 48]
	pinsrw	xmm3, word ptr [rsi + r9 + 30], 7
	pcmpeqw	xmm3, xmm11
	pinsrw	xmm2, word ptr [rsi + rcx + 34], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 34], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 34], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 34], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 34], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 34], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [rsi + r9 + 34], 7
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm6, xmm14
	movdqa	xmm14, xmmword ptr [rip + .LCPI4_14] # xmm14 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm13, xmm14
	movdqa	xmm0, xmm3
	pblendvb	xmm13, xmm15, xmm0
	movdqa	xmm8, xmmword ptr [rip + .LCPI4_8] # xmm8 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm2, eax
	movzx	r14d, word ptr [rsi + r15 + 50]
	pinsrw	xmm7, word ptr [rsi + rcx + 32], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 32], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 32], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 32], 4
	pinsrw	xmm7, word ptr [rsi + rbx + 32], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 32], 6
	pinsrw	xmm4, word ptr [rsi + rcx + 36], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 36], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 36], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 36], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 36], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 36], 6
	pinsrw	xmm4, word ptr [rsi + r9 + 36], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm13, xmm6
	movdqa	xmm6, xmmword ptr [rip + .LCPI4_9] # xmm6 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm3, r10d
	movzx	edx, word ptr [rsi + r15 + 52]
	pinsrw	xmm7, word ptr [rsi + r9 + 32], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI4_22]
	packsswb	xmm7, xmm7
	pinsrw	xmm1, word ptr [rsi + rcx + 38], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 38], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 38], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 38], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 38], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 38], 6
	pinsrw	xmm1, word ptr [rsi + r9 + 38], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm2, word ptr [rsi + rcx + 40], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 40], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 40], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 40], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 40], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 40], 6
	pinsrw	xmm2, word ptr [rsi + r9 + 40], 7
	psubb	xmm8, xmm7
	movdqa	xmm5, xmm10
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm1, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rsi + r15 + 54]
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm6
	movdqa	xmm6, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm4, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm4 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rsi + r15 + 56]
	pinsrw	xmm3, word ptr [rsi + rcx + 42], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 42], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 42], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 42], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 42], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 42], 6
	pinsrw	xmm3, word ptr [rsi + r9 + 42], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [rsi + rcx + 44], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 44], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 44], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 44], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 44], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 44], 6
	por	xmm5, xmm8
	movdqa	xmm9, xmmword ptr [rip + .LCPI4_12] # xmm9 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm2, xmm9
	movdqa	xmm0, xmm3
	pblendvb	xmm2, xmm15, xmm0
	movd	xmm7, r11d
	movzx	r11d, word ptr [rsi + r15 + 58]
	pinsrw	xmm1, word ptr [rsi + r9 + 44], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm2, xmm6
	movdqa	xmm10, xmmword ptr [rip + .LCPI4_13] # xmm10 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm10
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm1, r14d
	movzx	r14d, word ptr [rsi + r15 + 60]
	por	xmm6, xmm2
	movd	xmm2, edx
	pinsrw	xmm4, word ptr [rsi + rcx + 46], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 46], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 46], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 46], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 46], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 46], 6
	pinsrw	xmm4, word ptr [rsi + r9 + 46], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm6, xmm5
	movdqa	xmm8, xmm14
	movdqa	xmm0, xmm4
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm3, r10d
	pinsrw	xmm1, word ptr [rsi + rcx + 50], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 50], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 50], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 50], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 50], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 50], 6
	pinsrw	xmm1, word ptr [rsi + r9 + 50], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm8, xmm6
	movdqa	xmm4, xmmword ptr [rip + .LCPI4_8] # xmm4 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm15, xmm0
	movd	xmm1, eax
	pinsrw	xmm7, word ptr [rsi + rcx + 48], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 48], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 48], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 48], 4
	pinsrw	xmm7, word ptr [rsi + rbx + 48], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 48], 6
	pinsrw	xmm7, word ptr [rsi + r9 + 48], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI4_22]
	pinsrw	xmm2, word ptr [rsi + rcx + 52], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 52], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 52], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 52], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 52], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 52], 6
	packsswb	xmm7, xmm7
	pinsrw	xmm2, word ptr [rsi + r9 + 52], 7
	pcmpeqw	xmm2, xmm11
	pinsrw	xmm3, word ptr [rsi + rcx + 54], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 54], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 54], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 54], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 54], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 54], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [rsi + r9 + 54], 7
	pcmpeqw	xmm3, xmm11
	pinsrw	xmm1, word ptr [rsi + rcx + 56], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 56], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 56], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 56], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 56], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 56], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [rsi + r9 + 56], 7
	psubb	xmm4, xmm7
	movdqa	xmm5, xmmword ptr [rip + .LCPI4_9] # xmm5 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm5, xmm15, xmm0
	movdqa	xmm6, xmmword ptr [rip + .LCPI4_10] # xmm6 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm3
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm2, r11d
	pcmpeqw	xmm1, xmm11
	pinsrw	xmm2, word ptr [rsi + rcx + 58], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 58], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 58], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 58], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 58], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 58], 6
	pinsrw	xmm2, word ptr [rsi + r9 + 58], 7
	packsswb	xmm1, xmm1
	pcmpeqw	xmm2, xmm11
	por	xmm6, xmm5
	movd	xmm3, r14d
	pinsrw	xmm3, word ptr [rsi + rcx + 60], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 60], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 60], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 60], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 60], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 60], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [rsi + r9 + 60], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	por	xmm6, xmm4
	movdqa	xmm4, xmmword ptr [rip + .LCPI4_11] # xmm4 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm15, xmm0
	movdqa	xmm1, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm1, xmm15, xmm0
	movdqa	xmm0, xmm3
	pblendvb	xmm10, xmm15, xmm0
	por	xmm1, xmm4
	movzx	eax, word ptr [rsi + r15 + 62]
	por	xmm10, xmm1
	movd	xmm0, eax
	pinsrw	xmm0, word ptr [rsi + rcx + 62], 1
	pinsrw	xmm0, word ptr [rsi + r8 + 62], 2
	pinsrw	xmm0, word ptr [rsi + r12 + 62], 3
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrw	xmm0, word ptr [rsi + r13 + 62], 4
	pinsrw	xmm0, word ptr [rsi + rbx + 62], 5
	pinsrw	xmm0, word ptr [rsi + rdi + 62], 6
	pinsrw	xmm0, word ptr [rsi + r9 + 62], 7
	pcmpeqw	xmm0, xmm11
	packsswb	xmm0, xmm0
	por	xmm10, xmm6
	pblendvb	xmm14, xmm15, xmm0
	por	xmm14, xmm10
	movdqa	xmm0, xmm12
	punpcklqdq	xmm0, xmm13             # xmm0 = xmm0[0],xmm13[0]
	movdqa	xmm2, xmm8
	punpcklqdq	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0]
	movdqa	xmm3, xmmword ptr [rip + .LCPI4_15] # xmm3 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm2, xmm3
	pshufb	xmm0, xmm3
	punpcklwd	xmm0, xmm2              # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	punpcklbw	xmm8, xmm14             # xmm8 = xmm8[0],xmm14[0],xmm8[1],xmm14[1],xmm8[2],xmm14[2],xmm8[3],xmm14[3],xmm8[4],xmm14[4],xmm8[5],xmm14[5],xmm8[6],xmm14[6],xmm8[7],xmm14[7]
	punpcklbw	xmm12, xmm13            # xmm12 = xmm12[0],xmm13[0],xmm12[1],xmm13[1],xmm12[2],xmm13[2],xmm12[3],xmm13[3],xmm12[4],xmm13[4],xmm12[5],xmm13[5],xmm12[6],xmm13[6],xmm12[7],xmm13[7]
	punpcklwd	xmm12, xmm8             # xmm12 = xmm12[0],xmm8[0],xmm12[1],xmm8[1],xmm12[2],xmm8[2],xmm12[3],xmm8[3]
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx], xmm12
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm0
	add	rcx, 8
	mov	r15, rcx
	cmp	rcx, qword ptr [rsp + 24]       # 8-byte Folded Reload
	jne	.LBB4_187
# %bb.188:
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r13d, dword ptr [rsp + 64]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	jne	.LBB4_92
	jmp	.LBB4_139
.LBB4_189:
	and	r10, -8
	mov	rax, r10
	shl	rax, 6
	add	rax, rsi
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	qword ptr [rsp + 24], r10       # 8-byte Spill
	lea	rax, [r14 + 4*r10]
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	dword ptr [rsp + 64], r13d      # 4-byte Spill
	movd	xmm0, r13d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm11, xmm0, 0                  # xmm11 = xmm0[0,0,0,0]
	xor	r15d, r15d
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	pxor	xmm15, xmm15
	.p2align	4, 0x90
.LBB4_190:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	shl	r15, 6
	mov	r8, r15
	mov	r12, r15
	mov	r13, r15
	mov	rbx, r15
	mov	rdi, r15
	mov	r9, r15
	movzx	eax, word ptr [rsi + r15]
	movd	xmm5, eax
	movzx	eax, word ptr [rsi + r15 + 2]
	movd	xmm0, eax
	movzx	eax, word ptr [rsi + r15 + 4]
	movd	xmm1, eax
	movzx	eax, word ptr [rsi + r15 + 6]
	movd	xmm7, eax
	movzx	eax, word ptr [rsi + r15 + 8]
	movd	xmm8, eax
	movzx	eax, word ptr [rsi + r15 + 10]
	movd	xmm4, eax
	movzx	eax, word ptr [rsi + r15 + 12]
	movzx	r10d, word ptr [rsi + r15 + 14]
	movzx	r11d, word ptr [rsi + r15 + 16]
	movzx	edx, word ptr [rsi + r15 + 18]
	movzx	r14d, word ptr [rsi + r15 + 20]
	mov	rcx, r15
	or	rcx, 64
	or	r8, 128
	or	r12, 192
	or	r13, 256
	or	rbx, 320
	or	rdi, 384
	pinsrw	xmm5, word ptr [rsi + rcx], 1
	pinsrw	xmm5, word ptr [rsi + r8], 2
	pinsrw	xmm5, word ptr [rsi + r12], 3
	pinsrw	xmm5, word ptr [rsi + r13], 4
	pinsrw	xmm5, word ptr [rsi + rbx], 5
	pinsrw	xmm5, word ptr [rsi + rdi], 6
	pinsrw	xmm0, word ptr [rsi + rcx + 2], 1
	pinsrw	xmm0, word ptr [rsi + r8 + 2], 2
	pinsrw	xmm0, word ptr [rsi + r12 + 2], 3
	pinsrw	xmm0, word ptr [rsi + r13 + 2], 4
	pinsrw	xmm0, word ptr [rsi + rbx + 2], 5
	pinsrw	xmm0, word ptr [rsi + rdi + 2], 6
	or	r9, 448
	pinsrw	xmm0, word ptr [rsi + r9 + 2], 7
	movd	xmm2, eax
	movzx	eax, word ptr [rsi + r15 + 22]
	mov	dword ptr [rsp + 16], eax       # 4-byte Spill
	pcmpeqw	xmm0, xmm11
	pinsrw	xmm1, word ptr [rsi + rcx + 4], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 4], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 4], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 4], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 4], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 4], 6
	pinsrw	xmm1, word ptr [rsi + r9 + 4], 7
	packsswb	xmm0, xmm0
	pcmpeqw	xmm1, xmm11
	movdqa	xmm9, xmmword ptr [rip + .LCPI4_8] # xmm9 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm3, xmm9
	pblendvb	xmm3, xmm15, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI4_9] # xmm0 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm0
	movdqa	xmm14, xmm0
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm1, r10d
	movzx	r10d, word ptr [rsi + r15 + 24]
	pinsrw	xmm5, word ptr [rsi + r9], 7
	pcmpeqw	xmm5, xmm11
	pcmpeqd	xmm0, xmm0
	pxor	xmm5, xmm0
	packsswb	xmm5, xmm5
	pinsrw	xmm7, word ptr [rsi + rcx + 6], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 6], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 6], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 6], 4
	pinsrw	xmm7, word ptr [rsi + rbx + 6], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 6], 6
	pinsrw	xmm7, word ptr [rsi + r9 + 6], 7
	pcmpeqw	xmm7, xmm11
	packsswb	xmm7, xmm7
	pinsrw	xmm8, word ptr [rsi + rcx + 8], 1
	pinsrw	xmm8, word ptr [rsi + r8 + 8], 2
	pinsrw	xmm8, word ptr [rsi + r12 + 8], 3
	pinsrw	xmm8, word ptr [rsi + r13 + 8], 4
	pinsrw	xmm8, word ptr [rsi + rbx + 8], 5
	pinsrw	xmm8, word ptr [rsi + rdi + 8], 6
	pinsrw	xmm8, word ptr [rsi + r9 + 8], 7
	psubb	xmm3, xmm5
	movdqa	xmm12, xmmword ptr [rip + .LCPI4_10] # xmm12 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm7
	pblendvb	xmm12, xmm15, xmm0
	movd	xmm7, r11d
	movzx	eax, word ptr [rsi + r15 + 26]
	pcmpeqw	xmm8, xmm11
	packsswb	xmm8, xmm8
	por	xmm12, xmm6
	movdqa	xmm13, xmmword ptr [rip + .LCPI4_11] # xmm13 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm8
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm6, edx
	movzx	r11d, word ptr [rsi + r15 + 28]
	pinsrw	xmm4, word ptr [rsi + rcx + 10], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 10], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 10], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 10], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 10], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 10], 6
	pinsrw	xmm4, word ptr [rsi + r9 + 10], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	pinsrw	xmm2, word ptr [rsi + rcx + 12], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 12], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 12], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 12], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 12], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 12], 6
	por	xmm12, xmm3
	movdqa	xmm5, xmmword ptr [rip + .LCPI4_12] # xmm5 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm4, r14d
	movzx	edx, word ptr [rsi + r15 + 30]
	mov	dword ptr [rsp + 48], edx       # 4-byte Spill
	pinsrw	xmm2, word ptr [rsi + r9 + 12], 7
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm13
	movdqa	xmm13, xmmword ptr [rip + .LCPI4_13] # xmm13 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm3, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	edx, word ptr [rsi + r15 + 32]
	mov	dword ptr [rsp + 32], edx       # 4-byte Spill
	pinsrw	xmm1, word ptr [rsi + rcx + 14], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 14], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 14], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 14], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 14], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 14], 6
	por	xmm13, xmm5
	movd	xmm2, r10d
	movzx	edx, word ptr [rsi + r15 + 34]
	mov	dword ptr [rsp + 16], edx       # 4-byte Spill
	pinsrw	xmm1, word ptr [rsi + r9 + 14], 7
	pcmpeqw	xmm1, xmm11
	pinsrw	xmm6, word ptr [rsi + rcx + 18], 1
	pinsrw	xmm6, word ptr [rsi + r8 + 18], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 18], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 18], 4
	pinsrw	xmm6, word ptr [rsi + rbx + 18], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 18], 6
	packsswb	xmm1, xmm1
	pinsrw	xmm6, word ptr [rsi + r9 + 18], 7
	pcmpeqw	xmm6, xmm11
	packsswb	xmm6, xmm6
	por	xmm13, xmm12
	movdqa	xmm12, xmmword ptr [rip + .LCPI4_14] # xmm12 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm12, xmm15, xmm0
	movdqa	xmm8, xmm9
	movdqa	xmm0, xmm6
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm1, eax
	movzx	r14d, word ptr [rsi + r15 + 36]
	pinsrw	xmm7, word ptr [rsi + rcx + 16], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 16], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 16], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 16], 4
	pinsrw	xmm7, word ptr [rsi + rbx + 16], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 16], 6
	pinsrw	xmm4, word ptr [rsi + rcx + 20], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 20], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 20], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 20], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 20], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 20], 6
	pinsrw	xmm4, word ptr [rsi + r9 + 20], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm12, xmm13
	movdqa	xmm5, xmm14
	movdqa	xmm0, xmm4
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm4, r11d
	movzx	r11d, word ptr [rsi + r15 + 38]
	pinsrw	xmm7, word ptr [rsi + r9 + 16], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI4_22]
	packsswb	xmm7, xmm7
	pinsrw	xmm3, word ptr [rsi + rcx + 22], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 22], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 22], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 22], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 22], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 22], 6
	pinsrw	xmm3, word ptr [rsi + r9 + 22], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [rsi + rcx + 24], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 24], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 24], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 24], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 24], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 24], 6
	pinsrw	xmm2, word ptr [rsi + r9 + 24], 7
	psubb	xmm8, xmm7
	movdqa	xmm10, xmmword ptr [rip + .LCPI4_10] # xmm10 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm14, xmm10
	movdqa	xmm0, xmm3
	pblendvb	xmm14, xmm15, xmm0
	movd	xmm3, dword ptr [rsp + 48]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rsi + r15 + 40]
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm14, xmm5
	movdqa	xmm9, xmmword ptr [rip + .LCPI4_11] # xmm9 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm13, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm7, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rsi + r15 + 42]
	pinsrw	xmm1, word ptr [rsi + rcx + 26], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 26], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 26], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 26], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 26], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 26], 6
	pinsrw	xmm1, word ptr [rsi + r9 + 26], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm4, word ptr [rsi + rcx + 28], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 28], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 28], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 28], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 28], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 28], 6
	por	xmm14, xmm8
	movdqa	xmm5, xmmword ptr [rip + .LCPI4_12] # xmm5 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm2, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm2 = mem[0],zero,zero,zero
	movzx	edx, word ptr [rsi + r15 + 44]
	mov	dword ptr [rsp + 32], edx       # 4-byte Spill
	pinsrw	xmm4, word ptr [rsi + r9 + 28], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm5, xmm13
	movdqa	xmm6, xmmword ptr [rip + .LCPI4_13] # xmm6 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm4, r14d
	movzx	edx, word ptr [rsi + r15 + 46]
	mov	dword ptr [rsp + 16], edx       # 4-byte Spill
	pinsrw	xmm3, word ptr [rsi + rcx + 30], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 30], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 30], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 30], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 30], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 30], 6
	por	xmm6, xmm5
	movd	xmm1, r11d
	movzx	r11d, word ptr [rsi + r15 + 48]
	pinsrw	xmm3, word ptr [rsi + r9 + 30], 7
	pcmpeqw	xmm3, xmm11
	pinsrw	xmm2, word ptr [rsi + rcx + 34], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 34], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 34], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 34], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 34], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 34], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [rsi + r9 + 34], 7
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm6, xmm14
	movdqa	xmm14, xmmword ptr [rip + .LCPI4_14] # xmm14 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm13, xmm14
	movdqa	xmm0, xmm3
	pblendvb	xmm13, xmm15, xmm0
	movdqa	xmm8, xmmword ptr [rip + .LCPI4_8] # xmm8 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm2, eax
	movzx	r14d, word ptr [rsi + r15 + 50]
	pinsrw	xmm7, word ptr [rsi + rcx + 32], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 32], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 32], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 32], 4
	pinsrw	xmm7, word ptr [rsi + rbx + 32], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 32], 6
	pinsrw	xmm4, word ptr [rsi + rcx + 36], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 36], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 36], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 36], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 36], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 36], 6
	pinsrw	xmm4, word ptr [rsi + r9 + 36], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm13, xmm6
	movdqa	xmm6, xmmword ptr [rip + .LCPI4_9] # xmm6 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm3, r10d
	movzx	edx, word ptr [rsi + r15 + 52]
	pinsrw	xmm7, word ptr [rsi + r9 + 32], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI4_22]
	packsswb	xmm7, xmm7
	pinsrw	xmm1, word ptr [rsi + rcx + 38], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 38], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 38], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 38], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 38], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 38], 6
	pinsrw	xmm1, word ptr [rsi + r9 + 38], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm2, word ptr [rsi + rcx + 40], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 40], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 40], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 40], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 40], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 40], 6
	pinsrw	xmm2, word ptr [rsi + r9 + 40], 7
	psubb	xmm8, xmm7
	movdqa	xmm5, xmm10
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm1, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rsi + r15 + 54]
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm6
	movdqa	xmm6, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm4, dword ptr [rsp + 16]      # 4-byte Folded Reload
                                        # xmm4 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rsi + r15 + 56]
	pinsrw	xmm3, word ptr [rsi + rcx + 42], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 42], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 42], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 42], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 42], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 42], 6
	pinsrw	xmm3, word ptr [rsi + r9 + 42], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [rsi + rcx + 44], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 44], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 44], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 44], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 44], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 44], 6
	por	xmm5, xmm8
	movdqa	xmm9, xmmword ptr [rip + .LCPI4_12] # xmm9 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm2, xmm9
	movdqa	xmm0, xmm3
	pblendvb	xmm2, xmm15, xmm0
	movd	xmm7, r11d
	movzx	r11d, word ptr [rsi + r15 + 58]
	pinsrw	xmm1, word ptr [rsi + r9 + 44], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm2, xmm6
	movdqa	xmm10, xmmword ptr [rip + .LCPI4_13] # xmm10 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm10
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm1, r14d
	movzx	r14d, word ptr [rsi + r15 + 60]
	por	xmm6, xmm2
	movd	xmm2, edx
	pinsrw	xmm4, word ptr [rsi + rcx + 46], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 46], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 46], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 46], 4
	pinsrw	xmm4, word ptr [rsi + rbx + 46], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 46], 6
	pinsrw	xmm4, word ptr [rsi + r9 + 46], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm6, xmm5
	movdqa	xmm8, xmm14
	movdqa	xmm0, xmm4
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm3, r10d
	pinsrw	xmm1, word ptr [rsi + rcx + 50], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 50], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 50], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 50], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 50], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 50], 6
	pinsrw	xmm1, word ptr [rsi + r9 + 50], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm8, xmm6
	movdqa	xmm4, xmmword ptr [rip + .LCPI4_8] # xmm4 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm15, xmm0
	movd	xmm1, eax
	pinsrw	xmm7, word ptr [rsi + rcx + 48], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 48], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 48], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 48], 4
	pinsrw	xmm7, word ptr [rsi + rbx + 48], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 48], 6
	pinsrw	xmm7, word ptr [rsi + r9 + 48], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI4_22]
	pinsrw	xmm2, word ptr [rsi + rcx + 52], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 52], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 52], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 52], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 52], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 52], 6
	packsswb	xmm7, xmm7
	pinsrw	xmm2, word ptr [rsi + r9 + 52], 7
	pcmpeqw	xmm2, xmm11
	pinsrw	xmm3, word ptr [rsi + rcx + 54], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 54], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 54], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 54], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 54], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 54], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [rsi + r9 + 54], 7
	pcmpeqw	xmm3, xmm11
	pinsrw	xmm1, word ptr [rsi + rcx + 56], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 56], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 56], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 56], 4
	pinsrw	xmm1, word ptr [rsi + rbx + 56], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 56], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [rsi + r9 + 56], 7
	psubb	xmm4, xmm7
	movdqa	xmm5, xmmword ptr [rip + .LCPI4_9] # xmm5 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm5, xmm15, xmm0
	movdqa	xmm6, xmmword ptr [rip + .LCPI4_10] # xmm6 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm3
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm2, r11d
	pcmpeqw	xmm1, xmm11
	pinsrw	xmm2, word ptr [rsi + rcx + 58], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 58], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 58], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 58], 4
	pinsrw	xmm2, word ptr [rsi + rbx + 58], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 58], 6
	pinsrw	xmm2, word ptr [rsi + r9 + 58], 7
	packsswb	xmm1, xmm1
	pcmpeqw	xmm2, xmm11
	por	xmm6, xmm5
	movd	xmm3, r14d
	pinsrw	xmm3, word ptr [rsi + rcx + 60], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 60], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 60], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 60], 4
	pinsrw	xmm3, word ptr [rsi + rbx + 60], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 60], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [rsi + r9 + 60], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	por	xmm6, xmm4
	movdqa	xmm4, xmmword ptr [rip + .LCPI4_11] # xmm4 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm15, xmm0
	movdqa	xmm1, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm1, xmm15, xmm0
	movdqa	xmm0, xmm3
	pblendvb	xmm10, xmm15, xmm0
	por	xmm1, xmm4
	movzx	eax, word ptr [rsi + r15 + 62]
	por	xmm10, xmm1
	movd	xmm0, eax
	pinsrw	xmm0, word ptr [rsi + rcx + 62], 1
	pinsrw	xmm0, word ptr [rsi + r8 + 62], 2
	pinsrw	xmm0, word ptr [rsi + r12 + 62], 3
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrw	xmm0, word ptr [rsi + r13 + 62], 4
	pinsrw	xmm0, word ptr [rsi + rbx + 62], 5
	pinsrw	xmm0, word ptr [rsi + rdi + 62], 6
	pinsrw	xmm0, word ptr [rsi + r9 + 62], 7
	pcmpeqw	xmm0, xmm11
	packsswb	xmm0, xmm0
	por	xmm10, xmm6
	pblendvb	xmm14, xmm15, xmm0
	por	xmm14, xmm10
	movdqa	xmm0, xmm12
	punpcklqdq	xmm0, xmm13             # xmm0 = xmm0[0],xmm13[0]
	movdqa	xmm2, xmm8
	punpcklqdq	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0]
	movdqa	xmm3, xmmword ptr [rip + .LCPI4_15] # xmm3 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm2, xmm3
	pshufb	xmm0, xmm3
	punpcklwd	xmm0, xmm2              # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	punpcklbw	xmm8, xmm14             # xmm8 = xmm8[0],xmm14[0],xmm8[1],xmm14[1],xmm8[2],xmm14[2],xmm8[3],xmm14[3],xmm8[4],xmm14[4],xmm8[5],xmm14[5],xmm8[6],xmm14[6],xmm8[7],xmm14[7]
	punpcklbw	xmm12, xmm13            # xmm12 = xmm12[0],xmm13[0],xmm12[1],xmm13[1],xmm12[2],xmm13[2],xmm12[3],xmm13[3],xmm12[4],xmm13[4],xmm12[5],xmm13[5],xmm12[6],xmm13[6],xmm12[7],xmm13[7]
	punpcklwd	xmm12, xmm8             # xmm12 = xmm12[0],xmm8[0],xmm12[1],xmm8[1],xmm12[2],xmm8[2],xmm12[3],xmm8[3]
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx], xmm12
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm0
	add	rcx, 8
	mov	r15, rcx
	cmp	rcx, qword ptr [rsp + 24]       # 8-byte Folded Reload
	jne	.LBB4_190
# %bb.191:
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	mov	r13d, dword ptr [rsp + 64]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	jne	.LBB4_104
	jmp	.LBB4_144
.LBB4_192:
	mov	r8, r10
	and	r8, -4
	mov	rbx, r8
	shl	rbx, 7
	add	rbx, rsi
	lea	r11, [r14 + 4*r8]
	movaps	xmm1, xmm0
	shufps	xmm1, xmm0, 0                   # xmm1 = xmm1[0,0],xmm0[0,0]
	add	rsi, 508
	xor	ecx, ecx
	movdqa	xmm15, xmmword ptr [rip + .LCPI4_0] # xmm15 = <1,1,1,1,u,u,u,u,u,u,u,u,u,u,u,u>
	movdqa	xmm8, xmmword ptr [rip + .LCPI4_1] # xmm8 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI4_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI4_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI4_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI4_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI4_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	movdqa	xmm9, xmmword ptr [rip + .LCPI4_7] # xmm9 = [0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]
	.p2align	4, 0x90
.LBB4_193:                              # =>This Inner Loop Header: Depth=1
	movss	xmm6, dword ptr [rsi - 508]     # xmm6 = mem[0],zero,zero,zero
	movss	xmm7, dword ptr [rsi - 504]     # xmm7 = mem[0],zero,zero,zero
	movss	xmm5, dword ptr [rsi - 500]     # xmm5 = mem[0],zero,zero,zero
	movss	xmm4, dword ptr [rsi - 496]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 380], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 252], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 124], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	insertps	xmm7, dword ptr [rsi - 376], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 248], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 120], 48 # xmm7 = xmm7[0,1,2],mem[0]
	insertps	xmm5, dword ptr [rsi - 372], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 244], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 116], 48 # xmm5 = xmm5[0,1,2],mem[0]
	insertps	xmm4, dword ptr [rsi - 368], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rsi - 240], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rsi - 112], 48 # xmm4 = xmm4[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	movdqa	xmm2, xmm7
	pand	xmm2, xmm15
	psubb	xmm2, xmm7
	movss	xmm7, dword ptr [rsi - 492]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 364], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 236], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 108], 48 # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rsi - 488]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 360], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 232], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 104], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm8
	por	xmm5, xmm2
	movss	xmm3, dword ptr [rsi - 484]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 356], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 228], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 100], 48 # xmm3 = xmm3[0,1,2],mem[0]
	cmpneqps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 3
	pand	xmm4, xmm10
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 4
	pand	xmm7, xmm11
	por	xmm7, xmm4
	movss	xmm4, dword ptr [rsi - 480]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm4, dword ptr [rsi - 352], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rsi - 224], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rsi - 96], 48  # xmm4 = xmm4[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm5, dword ptr [rsi - 476]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 348], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 220], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 92], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 6
	pand	xmm3, xmm13
	por	xmm3, xmm6
	movss	xmm2, dword ptr [rsi - 472]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 344], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 216], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 88], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packsswb	xmm5, xmm5
	cmpneqps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm3
	movss	xmm3, dword ptr [rsi - 468]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 340], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 212], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm5, xmm15
	insertps	xmm3, dword ptr [rsi - 84], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm4, xmm7
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm7, dword ptr [rsi - 464]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 336], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 208], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 80], 48  # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm5
	movss	xmm5, dword ptr [rsi - 460]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 332], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 204], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 76], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rsi - 456]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 328], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 200], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 72], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 3
	pand	xmm7, xmm10
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm7
	movss	xmm2, dword ptr [rsi - 452]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 324], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 196], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 68], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm3
	movss	xmm7, dword ptr [rsi - 448]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 320], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 192], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 64], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rsi - 444]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 316], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 188], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 60], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	psllw	xmm7, 7
	pand	xmm7, xmm14
	por	xmm7, xmm2
	movss	xmm2, dword ptr [rsi - 440]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 312], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 184], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 56], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm3, dword ptr [rsi - 436]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 308], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 180], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm6, xmm15
	insertps	xmm3, dword ptr [rsi - 52], 48  # xmm3 = xmm3[0,1,2],mem[0]
	punpckldq	xmm4, xmm7              # xmm4 = xmm4[0],xmm7[0],xmm4[1],xmm7[1]
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm7, xmm2
	pand	xmm7, xmm15
	psubb	xmm7, xmm2
	movss	xmm5, dword ptr [rsi - 432]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 304], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 176], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 48], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm7, xmm6
	movss	xmm6, dword ptr [rsi - 428]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 300], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 172], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 44], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm7
	movss	xmm7, dword ptr [rsi - 424]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 296], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 168], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 40], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm5
	movss	xmm2, dword ptr [rsi - 420]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 292], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 164], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 36], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm5, dword ptr [rsi - 416]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 288], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 160], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 32], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm7, dword ptr [rsi - 412]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 284], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 156], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 28], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	psllw	xmm5, 7
	pand	xmm5, xmm14
	por	xmm5, xmm2
	movss	xmm2, dword ptr [rsi - 408]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 280], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 152], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	pand	xmm7, xmm15
	insertps	xmm2, dword ptr [rsi - 24], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm6
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm3, dword ptr [rsi - 404]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 276], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 148], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 20], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm6, xmm7
	movss	xmm2, dword ptr [rsi - 400]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 272], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 144], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 16], 48  # xmm2 = xmm2[0,1,2],mem[0]
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rsi - 396]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 268], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 140], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rsi - 12], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm2
	movss	xmm7, dword ptr [rsi - 392]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 264], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 136], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rsi - 8], 48   # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm2, dword ptr [rsi - 388]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 260], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 132], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 4], 48   # xmm2 = xmm2[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm3, dword ptr [rsi - 384]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 256], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 128], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi], 48       # xmm3 = xmm3[0,1,2],mem[0]
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm2
	por	xmm3, xmm6
	punpckldq	xmm5, xmm3              # xmm5 = xmm5[0],xmm3[0],xmm5[1],xmm3[1]
	punpcklbw	xmm4, xmm5              # xmm4 = xmm4[0],xmm5[0],xmm4[1],xmm5[1],xmm4[2],xmm5[2],xmm4[3],xmm5[3],xmm4[4],xmm5[4],xmm4[5],xmm5[5],xmm4[6],xmm5[6],xmm4[7],xmm5[7]
	pshufb	xmm4, xmm9
	movdqu	xmmword ptr [r14 + 4*rcx], xmm4
	add	rcx, 4
	add	rsi, 512
	cmp	r8, rcx
	jne	.LBB4_193
# %bb.194:
	cmp	r10, r8
	jne	.LBB4_127
	jmp	.LBB4_148
.Lfunc_end4:
	.size	comparison_not_equal_arr_scalar_sse4, .Lfunc_end4-comparison_not_equal_arr_scalar_sse4
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function comparison_not_equal_scalar_arr_sse4
.LCPI5_0:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_1:
	.zero	16,252
.LCPI5_2:
	.zero	16,248
.LCPI5_3:
	.zero	16,240
.LCPI5_4:
	.zero	16,224
.LCPI5_5:
	.zero	16,192
.LCPI5_6:
	.zero	16,128
.LCPI5_7:
	.byte	0                               # 0x0
	.byte	8                               # 0x8
	.byte	1                               # 0x1
	.byte	9                               # 0x9
	.byte	2                               # 0x2
	.byte	10                              # 0xa
	.byte	3                               # 0x3
	.byte	11                              # 0xb
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
.LCPI5_8:
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_9:
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_10:
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_11:
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_12:
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_13:
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_14:
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_15:
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI5_16:
	.zero	16,2
.LCPI5_17:
	.zero	16,4
.LCPI5_18:
	.zero	16,8
.LCPI5_19:
	.zero	16,16
.LCPI5_20:
	.zero	16,32
.LCPI5_21:
	.zero	16,64
.LCPI5_22:
	.zero	16,255
	.text
	.globl	comparison_not_equal_scalar_arr_sse4
	.p2align	4, 0x90
	.type	comparison_not_equal_scalar_arr_sse4,@function
comparison_not_equal_scalar_arr_sse4:   # @comparison_not_equal_scalar_arr_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -16
	sub	rsp, 288
                                        # kill: def $r9d killed $r9d def $r9
	mov	r15, r8
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	mov	r14, rdx
	cmp	edi, 6
	jg	.LBB5_26
# %bb.1:
	cmp	edi, 3
	jle	.LBB5_2
# %bb.10:
	cmp	edi, 4
	je	.LBB5_99
# %bb.11:
	cmp	edi, 5
	je	.LBB5_122
# %bb.12:
	cmp	edi, 6
	jne	.LBB5_199
# %bb.13:
	mov	r11d, dword ptr [rsi]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_17
# %bb.14:
	movsxd	rax, r9d
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_15:                               # =>This Inner Loop Header: Depth=1
	cmp	r11d, dword ptr [r14]
	lea	r14, [r14 + 4]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [rdx + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [rdx + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_15
# %bb.16:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_17:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_21
# %bb.18:
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_19:                               # =>This Inner Loop Header: Depth=1
	cmp	r11d, dword ptr [r14 + 124]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 120]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 116]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 112]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 108]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 104]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 100]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 92]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 88]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 84]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 80]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 76]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 72]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 68]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 60]
	setne	r8b
	cmp	r11d, dword ptr [r14 + 56]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 52]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 48]
	setne	dil
	cmp	r11d, dword ptr [r14 + 44]
	setne	r10b
	cmp	r11d, dword ptr [r14 + 40]
	setne	r9b
	cmp	r11d, dword ptr [r14 + 36]
	setne	sil
	cmp	r11d, dword ptr [r14 + 28]
	setne	al
	cmp	r11d, dword ptr [r14 + 24]
	setne	bl
	cmp	r11d, dword ptr [r14 + 20]
	setne	dl
	cmp	r11d, dword ptr [r14 + 16]
	setne	cl
	cmp	r11d, dword ptr [r14 + 12]
	setne	r12b
	cmp	r11d, dword ptr [r14 + 8]
	setne	r15b
	cmp	r11d, dword ptr [r14]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 4]
	mov	r13, r14
	setne	r14b
	cmp	r11d, dword ptr [r13 + 32]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r13 + 64]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r13 + 96]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 152]      # 1-byte Folded Reload
	shl	r15b, 2
	or	r15b, r14b
	mov	r14, r13
	shl	r12b, 3
	or	r12b, r15b
	shl	cl, 4
	or	cl, r12b
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	shl	dl, 5
	or	dl, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, dl
	mov	byte ptr [r15], al
	add	sil, sil
	add	sil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, sil
	shl	r10b, 3
	or	r10b, r9b
	shl	dil, 4
	or	dil, r10b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	movzx	ecx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	sub	r14, -128
	add	r15, 4
	mov	qword ptr [rsp + 8], r15        # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB5_19
# %bb.20:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
.LBB5_21:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.22:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	je	.LBB5_23
# %bb.142:
	mov	r9, r8
	and	r9, -2
	xor	edi, edi
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_143:                              # =>This Inner Loop Header: Depth=1
	cmp	r11d, dword ptr [r14]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	xor	al, r10b
	and	dl, al
	xor	dl, r10b
	mov	byte ptr [r15 + rsi], dl
	add	rdi, 2
	cmp	r11d, dword ptr [r14 + 4]
	lea	r14, [r14 + 8]
	setne	al
	neg	al
	xor	al, dl
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, dl
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, rdi
	jne	.LBB5_143
	jmp	.LBB5_24
.LBB5_26:
	cmp	edi, 8
	jle	.LBB5_27
# %bb.42:
	cmp	edi, 9
	je	.LBB5_158
# %bb.43:
	cmp	edi, 11
	je	.LBB5_170
# %bb.44:
	cmp	edi, 12
	jne	.LBB5_199
# %bb.45:
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB5_49
# %bb.46:
	movsxd	rax, r9d
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	.p2align	4, 0x90
.LBB5_47:                               # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [r14]
	lea	r14, [r14 + 8]
	setne	dl
	neg	dl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	ebx, byte ptr [r8 + rsi]
	xor	dl, bl
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, bl
	mov	byte ptr [r8 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_47
# %bb.48:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_49:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_53
# %bb.50:
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r10      # 8-byte Spill
	mov	qword ptr [rsp + 152], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_51:                               # =>This Inner Loop Header: Depth=1
	mov	rdx, r14
	ucomisd	xmm0, qword ptr [r14]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 8]
	setne	r9b
	ucomisd	xmm0, qword ptr [r14 + 16]
	setne	r11b
	ucomisd	xmm0, qword ptr [r14 + 24]
	setne	r13b
	ucomisd	xmm0, qword ptr [r14 + 32]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 40]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 48]
	setne	bl
	ucomisd	xmm0, qword ptr [r14 + 56]
	setne	r12b
	ucomisd	xmm0, qword ptr [r14 + 64]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 72]
	setne	sil
	ucomisd	xmm0, qword ptr [r14 + 80]
	setne	dil
	ucomisd	xmm0, qword ptr [r14 + 88]
	setne	r8b
	ucomisd	xmm0, qword ptr [r14 + 96]
	setne	r10b
	ucomisd	xmm0, qword ptr [r14 + 104]
	setne	r15b
	ucomisd	xmm0, qword ptr [r14 + 112]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 120]
	setne	cl
	ucomisd	xmm0, qword ptr [r14 + 128]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 136]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 144]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 152]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 160]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 168]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 176]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [r14 + 184]
	setne	r14b
	ucomisd	xmm0, qword ptr [rdx + 192]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 200]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 208]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 216]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 224]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 232]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 240]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 248]
	setne	al
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r12b, 7
	or	r12b, bl
	shl	r11b, 2
	or	r11b, r9b
	add	sil, sil
	add	sil, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r11b
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	r9d, ebx
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	shl	r8b, 3
	or	r8b, dil
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, r9b
	shl	r10b, 4
	or	r10b, r8b
	shl	r15b, 5
	or	r15b, r10b
	movzx	edi, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	r12b, bl
	or	cl, r15b
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 120]        # 1-byte Folded Reload
	mov	edi, ebx
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, dil
	mov	edi, ebx
	movzx	ebx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, dil
	mov	edi, ebx
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, dil
	mov	edi, ebx
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 5
	or	bl, dil
	mov	byte ptr [rsi], r12b
	movzx	edi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r14b, 7
	or	r14b, dil
	mov	byte ptr [rsi + 1], cl
	or	r14b, bl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [rsi + 2], r14b
	mov	byte ptr [rsi + 3], al
	lea	r14, [rdx + 256]
	add	rsi, 4
	mov	qword ptr [rsp + 8], rsi        # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB5_51
# %bb.52:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
.LBB5_53:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.54:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB5_193
# %bb.55:
	xor	edi, edi
	jmp	.LBB5_195
.LBB5_2:
	cmp	edi, 2
	je	.LBB5_56
# %bb.3:
	cmp	edi, 3
	jne	.LBB5_199
# %bb.4:
	mov	al, byte ptr [rsi]
	mov	byte ptr [rsp + 64], al         # 1-byte Spill
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_8
# %bb.5:
	movsxd	rax, r9d
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	cmp	cl, byte ptr [r14]
	lea	r14, [r14 + 1]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [rdx + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [rdx + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_6
# %bb.7:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_8:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_9
# %bb.81:
	cmp	r10, 16
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	jb	.LBB5_82
# %bb.83:
	mov	rax, r10
	shl	rax, 5
	add	rax, r14
	cmp	qword ptr [rsp + 8], rax        # 8-byte Folded Reload
	jae	.LBB5_85
# %bb.84:
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	lea	rax, [rax + 4*r10]
	cmp	r14, rax
	jae	.LBB5_85
.LBB5_82:
	xor	eax, eax
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
.LBB5_88:
	sub	r10, qword ptr [rsp + 216]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_89:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	cmp	al, byte ptr [r14 + 31]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 30]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 29]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 28]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 27]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 26]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 25]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 23]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 22]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 21]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 20]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 19]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 18]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 17]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 15]
	setne	r10b
	cmp	al, byte ptr [r14 + 14]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 13]
	setne	r13b
	cmp	al, byte ptr [r14 + 12]
	setne	r12b
	cmp	al, byte ptr [r14 + 11]
	setne	r15b
	cmp	al, byte ptr [r14 + 10]
	setne	bl
	cmp	al, byte ptr [r14 + 9]
	setne	r11b
	cmp	al, byte ptr [r14 + 7]
	setne	sil
	cmp	al, byte ptr [r14 + 6]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 5]
	setne	r9b
	cmp	al, byte ptr [r14 + 4]
	setne	r8b
	cmp	al, byte ptr [r14 + 3]
	setne	dil
	cmp	al, byte ptr [r14 + 2]
	setne	dl
	cmp	al, byte ptr [r14]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 1]
	setne	cl
	cmp	al, byte ptr [r14 + 8]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 16]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 24]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	add	cl, cl
	add	cl, byte ptr [rsp + 168]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, cl
	shl	dil, 3
	or	dil, dl
	shl	r8b, 4
	or	r8b, dil
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	sil, 7
	or	sil, al
	or	sil, r9b
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	mov	byte ptr [rax], sil
	add	r11b, r11b
	add	r11b, byte ptr [rsp + 152]      # 1-byte Folded Reload
	shl	bl, 2
	or	bl, r11b
	shl	r15b, 3
	or	r15b, bl
	shl	r12b, 4
	or	r12b, r15b
	shl	r13b, 5
	or	r13b, r12b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r10b, 7
	or	r10b, cl
	or	r10b, r13b
	mov	byte ptr [rax + 1], r10b
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	edx, ecx
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 7
	or	cl, bl
	or	cl, dl
	mov	byte ptr [rax + 2], cl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 136]        # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	edx, ecx
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 7
	or	cl, bl
	or	cl, dl
	mov	byte ptr [rax + 3], cl
	add	r14, 32
	add	rax, 4
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB5_89
# %bb.90:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	jmp	.LBB5_91
.LBB5_27:
	cmp	edi, 7
	je	.LBB5_144
# %bb.28:
	cmp	edi, 8
	jne	.LBB5_199
# %bb.29:
	mov	r11, qword ptr [rsi]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_33
# %bb.30:
	movsxd	rax, r9d
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	.p2align	4, 0x90
.LBB5_31:                               # =>This Inner Loop Header: Depth=1
	cmp	r11, qword ptr [r14]
	lea	r14, [r14 + 8]
	setne	dl
	neg	dl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	ebx, byte ptr [r8 + rsi]
	xor	dl, bl
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, bl
	mov	byte ptr [r8 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_31
# %bb.32:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_33:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_37
# %bb.34:
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_35:                               # =>This Inner Loop Header: Depth=1
	cmp	r11, qword ptr [r14 + 248]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 240]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 232]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 224]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 216]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 208]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 200]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 184]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 176]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 168]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 160]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 152]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 144]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 136]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 120]
	setne	r8b
	cmp	r11, qword ptr [r14 + 112]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 104]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 96]
	setne	dil
	cmp	r11, qword ptr [r14 + 88]
	setne	r10b
	cmp	r11, qword ptr [r14 + 80]
	setne	r9b
	cmp	r11, qword ptr [r14 + 72]
	setne	sil
	cmp	r11, qword ptr [r14 + 56]
	setne	al
	cmp	r11, qword ptr [r14 + 48]
	setne	bl
	cmp	r11, qword ptr [r14 + 40]
	setne	cl
	cmp	r11, qword ptr [r14 + 32]
	setne	dl
	cmp	r11, qword ptr [r14 + 24]
	setne	r15b
	cmp	r11, qword ptr [r14 + 16]
	setne	r13b
	cmp	r11, qword ptr [r14]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 8]
	setne	r12b
	cmp	r11, qword ptr [r14 + 64]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 128]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 192]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 152]      # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	shl	r15b, 3
	or	r15b, r13b
	shl	dl, 4
	or	dl, r15b
	shl	cl, 5
	or	cl, dl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r12], al
	add	sil, sil
	add	sil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, sil
	shl	r10b, 3
	or	r10b, r9b
	shl	dil, 4
	or	dil, r10b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	movzx	ecx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r12 + 1], r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 3], al
	add	r14, 256
	add	r12, 4
	mov	qword ptr [rsp + 8], r12        # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB5_35
# %bb.36:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
.LBB5_37:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.38:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	je	.LBB5_39
# %bb.156:
	mov	r9, r8
	and	r9, -2
	xor	edi, edi
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_157:                              # =>This Inner Loop Header: Depth=1
	cmp	r11, qword ptr [r14]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	xor	al, r10b
	and	dl, al
	xor	dl, r10b
	mov	byte ptr [r15 + rsi], dl
	add	rdi, 2
	cmp	r11, qword ptr [r14 + 8]
	lea	r14, [r14 + 16]
	setne	al
	neg	al
	xor	al, dl
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, dl
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, rdi
	jne	.LBB5_157
	jmp	.LBB5_40
.LBB5_56:
	mov	al, byte ptr [rsi]
	mov	byte ptr [rsp + 40], al         # 1-byte Spill
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_60
# %bb.57:
	movsxd	rax, r9d
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_58:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	cmp	cl, byte ptr [r14]
	lea	r14, [r14 + 1]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [rdx + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [rdx + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_58
# %bb.59:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_60:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_61
# %bb.62:
	cmp	r10, 16
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	jb	.LBB5_63
# %bb.64:
	mov	rax, r10
	shl	rax, 5
	add	rax, r14
	cmp	qword ptr [rsp + 8], rax        # 8-byte Folded Reload
	jae	.LBB5_66
# %bb.65:
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	lea	rax, [rax + 4*r10]
	cmp	r14, rax
	jae	.LBB5_66
.LBB5_63:
	xor	eax, eax
	mov	qword ptr [rsp + 216], rax      # 8-byte Spill
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
.LBB5_69:
	sub	r10, qword ptr [rsp + 216]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_70:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	cmp	al, byte ptr [r14 + 31]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 30]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 29]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 28]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 27]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 26]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 25]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 23]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 22]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 21]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 20]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 19]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 18]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 17]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 15]
	setne	r10b
	cmp	al, byte ptr [r14 + 14]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 13]
	setne	r13b
	cmp	al, byte ptr [r14 + 12]
	setne	r12b
	cmp	al, byte ptr [r14 + 11]
	setne	r15b
	cmp	al, byte ptr [r14 + 10]
	setne	bl
	cmp	al, byte ptr [r14 + 9]
	setne	r11b
	cmp	al, byte ptr [r14 + 7]
	setne	sil
	cmp	al, byte ptr [r14 + 6]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 5]
	setne	r9b
	cmp	al, byte ptr [r14 + 4]
	setne	r8b
	cmp	al, byte ptr [r14 + 3]
	setne	dil
	cmp	al, byte ptr [r14 + 2]
	setne	dl
	cmp	al, byte ptr [r14]
	setne	byte ptr [rsp + 168]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 1]
	setne	cl
	cmp	al, byte ptr [r14 + 8]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 16]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	al, byte ptr [r14 + 24]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	add	cl, cl
	add	cl, byte ptr [rsp + 168]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, cl
	shl	dil, 3
	or	dil, dl
	shl	r8b, 4
	or	r8b, dil
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	sil, 7
	or	sil, al
	or	sil, r9b
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	mov	byte ptr [rax], sil
	add	r11b, r11b
	add	r11b, byte ptr [rsp + 152]      # 1-byte Folded Reload
	shl	bl, 2
	or	bl, r11b
	shl	r15b, 3
	or	r15b, bl
	shl	r12b, 4
	or	r12b, r15b
	shl	r13b, 5
	or	r13b, r12b
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r10b, 7
	or	r10b, cl
	or	r10b, r13b
	mov	byte ptr [rax + 1], r10b
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	edx, ecx
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	ecx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	cl, 7
	or	cl, bl
	or	cl, dl
	mov	byte ptr [rax + 2], cl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 136]        # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	edx, ecx
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 7
	or	cl, bl
	or	cl, dl
	mov	byte ptr [rax + 3], cl
	add	r14, 32
	add	rax, 4
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB5_70
# %bb.71:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	jmp	.LBB5_72
.LBB5_144:
	mov	r11d, dword ptr [rsi]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_148
# %bb.145:
	movsxd	rax, r9d
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	.p2align	4, 0x90
.LBB5_146:                              # =>This Inner Loop Header: Depth=1
	cmp	r11d, dword ptr [r14]
	lea	r14, [r14 + 4]
	setne	dl
	neg	dl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	ebx, byte ptr [r8 + rsi]
	xor	dl, bl
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, bl
	mov	byte ptr [r8 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_146
# %bb.147:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_148:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_152
# %bb.149:
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_150:                              # =>This Inner Loop Header: Depth=1
	cmp	r11d, dword ptr [r14 + 124]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 120]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 116]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 112]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 108]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 104]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 100]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 92]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 88]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 84]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 80]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 76]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 72]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 68]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 60]
	setne	r8b
	cmp	r11d, dword ptr [r14 + 56]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 52]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 48]
	setne	dil
	cmp	r11d, dword ptr [r14 + 44]
	setne	r10b
	cmp	r11d, dword ptr [r14 + 40]
	setne	r9b
	cmp	r11d, dword ptr [r14 + 36]
	setne	sil
	cmp	r11d, dword ptr [r14 + 28]
	setne	al
	cmp	r11d, dword ptr [r14 + 24]
	setne	bl
	cmp	r11d, dword ptr [r14 + 20]
	setne	cl
	cmp	r11d, dword ptr [r14 + 16]
	setne	dl
	cmp	r11d, dword ptr [r14 + 12]
	setne	r15b
	cmp	r11d, dword ptr [r14 + 8]
	setne	r13b
	cmp	r11d, dword ptr [r14]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 4]
	setne	r12b
	cmp	r11d, dword ptr [r14 + 32]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 64]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r11d, dword ptr [r14 + 96]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 152]      # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	shl	r15b, 3
	or	r15b, r13b
	shl	dl, 4
	or	dl, r15b
	shl	cl, 5
	or	cl, dl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r12], al
	add	sil, sil
	add	sil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, sil
	shl	r10b, 3
	or	r10b, r9b
	shl	dil, 4
	or	dil, r10b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	movzx	ecx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r12 + 1], r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 3], al
	sub	r14, -128
	add	r12, 4
	mov	qword ptr [rsp + 8], r12        # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB5_150
# %bb.151:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
.LBB5_152:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.153:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB5_154
.LBB5_23:
	xor	edi, edi
	jmp	.LBB5_24
.LBB5_99:
	movzx	r11d, word ptr [rsi]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_103
# %bb.100:
	movsxd	rax, r9d
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_101:                              # =>This Inner Loop Header: Depth=1
	cmp	r11w, word ptr [r14]
	lea	r14, [r14 + 2]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [rdx + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [rdx + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_101
# %bb.102:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_103:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_104
# %bb.105:
	cmp	r10, 8
	mov	dword ptr [rsp + 16], r11d      # 4-byte Spill
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	jb	.LBB5_106
# %bb.107:
	mov	rax, r10
	shl	rax, 6
	add	rax, r14
	cmp	qword ptr [rsp + 8], rax        # 8-byte Folded Reload
	jae	.LBB5_109
# %bb.108:
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	lea	rax, [rax + 4*r10]
	cmp	rax, r14
	jbe	.LBB5_109
.LBB5_106:
	xor	eax, eax
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
.LBB5_112:
	sub	r10, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 168], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_113:                              # =>This Inner Loop Header: Depth=1
	cmp	r11w, word ptr [r14 + 62]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 60]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 58]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 56]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 54]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 52]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 50]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 46]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 44]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 42]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 40]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 38]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 36]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 34]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 30]
	setne	r9b
	cmp	r11w, word ptr [r14 + 28]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 26]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 24]
	setne	r13b
	cmp	r11w, word ptr [r14 + 22]
	setne	r15b
	cmp	r11w, word ptr [r14 + 20]
	setne	r11b
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 18]
	setne	r10b
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 14]
	setne	dl
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 12]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 10]
	setne	r8b
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 8]
	setne	dil
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 6]
	setne	sil
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 4]
	setne	cl
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 2]
	setne	al
	mov	rbx, r12
	mov	r12d, dword ptr [rsp + 16]      # 4-byte Reload
	cmp	r12w, word ptr [r14 + 16]
	mov	r12, rbx
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	bx, word ptr [r14 + 32]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	bx, word ptr [r14 + 48]
	setne	bl
	add	al, al
	add	al, byte ptr [rsp + 152]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	shl	sil, 3
	or	sil, cl
	shl	dil, 4
	or	dil, sil
	shl	r8b, 5
	or	r8b, dil
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	al, 6
	shl	dl, 7
	or	dl, al
	or	dl, r8b
	mov	byte ptr [r12], dl
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 192]      # 1-byte Folded Reload
	shl	r11b, 2
	or	r11b, r10b
	shl	r15b, 3
	or	r15b, r11b
	mov	r11d, dword ptr [rsp + 16]      # 4-byte Reload
	shl	r13b, 4
	or	r13b, r15b
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 5
	or	al, r13b
	movzx	ecx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	or	r9b, al
	mov	byte ptr [r12 + 1], r9b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 144]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	or	al, bl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 3], al
	add	r14, 64
	add	r12, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB5_113
# %bb.114:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	jmp	.LBB5_115
.LBB5_122:
	movzx	r11d, word ptr [rsi]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_126
# %bb.123:
	movsxd	rax, r9d
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_124:                              # =>This Inner Loop Header: Depth=1
	cmp	r11w, word ptr [r14]
	lea	r14, [r14 + 2]
	setne	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [rdx + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [rdx + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_124
# %bb.125:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_126:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_127
# %bb.128:
	cmp	r10, 8
	mov	dword ptr [rsp + 16], r11d      # 4-byte Spill
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	jb	.LBB5_129
# %bb.130:
	mov	rax, r10
	shl	rax, 6
	add	rax, r14
	cmp	qword ptr [rsp + 8], rax        # 8-byte Folded Reload
	jae	.LBB5_132
# %bb.131:
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	lea	rax, [rax + 4*r10]
	cmp	rax, r14
	jbe	.LBB5_132
.LBB5_129:
	xor	eax, eax
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
.LBB5_135:
	sub	r10, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 168], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_136:                              # =>This Inner Loop Header: Depth=1
	cmp	r11w, word ptr [r14 + 62]
	setne	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 60]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 58]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 56]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 54]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 52]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 50]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 46]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 44]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 42]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 40]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 38]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 36]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 34]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 30]
	setne	r9b
	cmp	r11w, word ptr [r14 + 28]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 26]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r11w, word ptr [r14 + 24]
	setne	r13b
	cmp	r11w, word ptr [r14 + 22]
	setne	r15b
	cmp	r11w, word ptr [r14 + 20]
	setne	r11b
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 18]
	setne	r10b
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 14]
	setne	dl
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 12]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 10]
	setne	r8b
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 8]
	setne	dil
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 6]
	setne	sil
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 4]
	setne	cl
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	ax, word ptr [r14 + 2]
	setne	al
	mov	rbx, r12
	mov	r12d, dword ptr [rsp + 16]      # 4-byte Reload
	cmp	r12w, word ptr [r14 + 16]
	mov	r12, rbx
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	bx, word ptr [r14 + 32]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp + 16]       # 4-byte Reload
	cmp	bx, word ptr [r14 + 48]
	setne	bl
	add	al, al
	add	al, byte ptr [rsp + 152]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	shl	sil, 3
	or	sil, cl
	shl	dil, 4
	or	dil, sil
	shl	r8b, 5
	or	r8b, dil
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	al, 6
	shl	dl, 7
	or	dl, al
	or	dl, r8b
	mov	byte ptr [r12], dl
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 192]      # 1-byte Folded Reload
	shl	r11b, 2
	or	r11b, r10b
	shl	r15b, 3
	or	r15b, r11b
	mov	r11d, dword ptr [rsp + 16]      # 4-byte Reload
	shl	r13b, 4
	or	r13b, r15b
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 5
	or	al, r13b
	movzx	ecx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	or	r9b, al
	mov	byte ptr [r12 + 1], r9b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 144]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	or	al, bl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 3], al
	add	r14, 64
	add	r12, 4
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB5_136
# %bb.137:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	jmp	.LBB5_138
.LBB5_158:
	mov	r11, qword ptr [rsi]
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB5_162
# %bb.159:
	movsxd	rax, r9d
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	.p2align	4, 0x90
.LBB5_160:                              # =>This Inner Loop Header: Depth=1
	cmp	r11, qword ptr [r14]
	lea	r14, [r14 + 8]
	setne	dl
	neg	dl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	ebx, byte ptr [r8 + rsi]
	xor	dl, bl
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, bl
	mov	byte ptr [r8 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_160
# %bb.161:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_162:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_166
# %bb.163:
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	mov	qword ptr [rsp + 168], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_164:                              # =>This Inner Loop Header: Depth=1
	cmp	r11, qword ptr [r14 + 248]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 240]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 232]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 224]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 216]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 208]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 200]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 184]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 176]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 168]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 160]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 152]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 144]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 136]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 120]
	setne	r8b
	cmp	r11, qword ptr [r14 + 112]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 104]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 96]
	setne	dil
	cmp	r11, qword ptr [r14 + 88]
	setne	r10b
	cmp	r11, qword ptr [r14 + 80]
	setne	r9b
	cmp	r11, qword ptr [r14 + 72]
	setne	sil
	cmp	r11, qword ptr [r14 + 56]
	setne	al
	cmp	r11, qword ptr [r14 + 48]
	setne	bl
	cmp	r11, qword ptr [r14 + 40]
	setne	cl
	cmp	r11, qword ptr [r14 + 32]
	setne	dl
	cmp	r11, qword ptr [r14 + 24]
	setne	r15b
	cmp	r11, qword ptr [r14 + 16]
	setne	r13b
	cmp	r11, qword ptr [r14]
	setne	byte ptr [rsp + 152]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 8]
	setne	r12b
	cmp	r11, qword ptr [r14 + 64]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 128]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r11, qword ptr [r14 + 192]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 152]      # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	shl	r15b, 3
	or	r15b, r13b
	shl	dl, 4
	or	dl, r15b
	shl	cl, 5
	or	cl, dl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r12], al
	add	sil, sil
	add	sil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, sil
	shl	r10b, 3
	or	r10b, r9b
	shl	dil, 4
	or	dil, r10b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	movzx	ecx, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r12 + 1], r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 7
	or	al, dl
	or	al, cl
	mov	byte ptr [r12 + 3], al
	add	r14, 256
	add	r12, 4
	mov	qword ptr [rsp + 8], r12        # 8-byte Spill
	add	qword ptr [rsp + 168], -1       # 8-byte Folded Spill
	jne	.LBB5_164
# %bb.165:
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
.LBB5_166:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.167:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB5_168
.LBB5_39:
	xor	edi, edi
	jmp	.LBB5_40
.LBB5_170:
	lea	r10, [r15 + 31]
	test	r15, r15
	cmovns	r10, r15
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB5_174
# %bb.171:
	movsxd	rax, r9d
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	.p2align	4, 0x90
.LBB5_172:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [r14]
	lea	r14, [r14 + 4]
	setne	dl
	neg	dl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	ebx, byte ptr [r8 + rsi]
	xor	dl, bl
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, bl
	mov	byte ptr [r8 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB5_172
# %bb.173:
	add	qword ptr [rsp + 8], 1          # 8-byte Folded Spill
.LBB5_174:
	sar	r10, 5
	cmp	r15, 32
	jl	.LBB5_175
# %bb.176:
	cmp	r10, 4
	jb	.LBB5_177
# %bb.178:
	mov	rax, r10
	shl	rax, 7
	add	rax, r14
	cmp	qword ptr [rsp + 8], rax        # 8-byte Folded Reload
	jae	.LBB5_180
# %bb.179:
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	lea	rax, [rax + 4*r10]
	cmp	rax, r14
	jbe	.LBB5_180
.LBB5_177:
	xor	r8d, r8d
	mov	rbx, r14
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
.LBB5_183:
	mov	qword ptr [rsp + 8], r11        # 8-byte Spill
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	mov	qword ptr [rsp + 168], r10      # 8-byte Spill
	sub	r10, r8
	mov	qword ptr [rsp + 152], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB5_184:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	setne	byte ptr [rsp + 192]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 4]
	setne	r8b
	ucomiss	xmm0, dword ptr [rbx + 8]
	setne	r14b
	ucomiss	xmm0, dword ptr [rbx + 12]
	setne	r13b
	ucomiss	xmm0, dword ptr [rbx + 16]
	setne	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 20]
	setne	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 24]
	setne	al
	ucomiss	xmm0, dword ptr [rbx + 28]
	setne	r11b
	ucomiss	xmm0, dword ptr [rbx + 32]
	setne	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 36]
	setne	dl
	ucomiss	xmm0, dword ptr [rbx + 40]
	setne	sil
	ucomiss	xmm0, dword ptr [rbx + 44]
	setne	dil
	ucomiss	xmm0, dword ptr [rbx + 48]
	setne	r10b
	ucomiss	xmm0, dword ptr [rbx + 52]
	setne	r12b
	ucomiss	xmm0, dword ptr [rbx + 56]
	setne	byte ptr [rsp + 136]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 60]
	setne	r9b
	ucomiss	xmm0, dword ptr [rbx + 64]
	setne	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 68]
	setne	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 72]
	setne	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 76]
	setne	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 80]
	setne	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 84]
	setne	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 88]
	setne	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 92]
	setne	r15b
	ucomiss	xmm0, dword ptr [rbx + 96]
	setne	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 100]
	setne	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 104]
	setne	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 108]
	setne	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 112]
	setne	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 116]
	setne	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 120]
	setne	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 124]
	setne	cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 144]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 136]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 120]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r15b, dl
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	dl, 6
	shl	cl, 7
	or	cl, dl
	or	cl, al
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], cl
	add	rbx, 128
	add	rsi, 4
	mov	qword ptr [rsp + 8], rsi        # 8-byte Spill
	add	qword ptr [rsp + 152], -1       # 8-byte Folded Spill
	jne	.LBB5_184
# %bb.185:
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 168]      # 8-byte Reload
	jmp	.LBB5_186
.LBB5_9:
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
.LBB5_91:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.92:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB5_94
# %bb.93:
	xor	esi, esi
	jmp	.LBB5_97
.LBB5_61:
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
.LBB5_72:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.73:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB5_75
# %bb.74:
	xor	esi, esi
	jmp	.LBB5_78
.LBB5_104:
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
.LBB5_115:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.116:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	je	.LBB5_117
# %bb.120:
	mov	r9, r8
	and	r9, -2
	xor	esi, esi
	.p2align	4, 0x90
.LBB5_121:                              # =>This Inner Loop Header: Depth=1
	cmp	r11w, word ptr [r14]
	setne	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r10d, byte ptr [r12 + rdi]
	mov	ecx, esi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r12 + rdi], bl
	add	rsi, 2
	cmp	r11w, word ptr [r14 + 2]
	lea	r14, [r14 + 4]
	setne	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r12 + rdi], al
	cmp	r9, rsi
	jne	.LBB5_121
	jmp	.LBB5_118
.LBB5_127:
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
.LBB5_138:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.139:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB5_140
.LBB5_117:
	xor	esi, esi
	jmp	.LBB5_118
.LBB5_175:
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	mov	rbx, r14
.LBB5_186:
	shl	r10, 5
	cmp	r10, r15
	jge	.LBB5_199
# %bb.187:
	mov	r8, r15
	sub	r8, r10
	not	r10
	add	r10, r15
	jne	.LBB5_191
# %bb.188:
	xor	esi, esi
	jmp	.LBB5_189
.LBB5_154:
	mov	r9, r8
	and	r9, -2
	xor	edi, edi
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_155:                              # =>This Inner Loop Header: Depth=1
	cmp	r11d, dword ptr [r14]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	xor	al, r10b
	and	dl, al
	xor	dl, r10b
	mov	byte ptr [r15 + rsi], dl
	add	rdi, 2
	cmp	r11d, dword ptr [r14 + 4]
	lea	r14, [r14 + 8]
	setne	al
	neg	al
	xor	al, dl
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, dl
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, rdi
	jne	.LBB5_155
.LBB5_24:
	test	r8b, 1
	je	.LBB5_199
# %bb.25:
	cmp	r11d, dword ptr [r14]
	jmp	.LBB5_197
.LBB5_94:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 128]      # 8-byte Reload
	.p2align	4, 0x90
.LBB5_95:                               # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	cmp	sil, byte ptr [r14 + rax]
	setne	bl
	neg	bl
	mov	rdi, rax
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	sil, byte ptr [r14 + rax + 1]
	lea	rsi, [rax + 2]
	setne	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB5_95
# %bb.96:
	add	r14, rsi
.LBB5_97:
	test	r8b, 1
	je	.LBB5_199
# %bb.98:
	mov	al, byte ptr [rsp + 64]         # 1-byte Reload
	cmp	al, byte ptr [r14]
	setne	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	jmp	.LBB5_80
.LBB5_75:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	.p2align	4, 0x90
.LBB5_76:                               # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	movzx	esi, byte ptr [rsp + 40]        # 1-byte Folded Reload
	cmp	sil, byte ptr [r14 + rax]
	setne	bl
	neg	bl
	mov	rdi, rax
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	sil, byte ptr [r14 + rax + 1]
	lea	rsi, [rax + 2]
	setne	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, rsi
	jne	.LBB5_76
# %bb.77:
	add	r14, rsi
.LBB5_78:
	test	r8b, 1
	je	.LBB5_199
# %bb.79:
	mov	al, byte ptr [rsp + 40]         # 1-byte Reload
	cmp	al, byte ptr [r14]
	setne	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
.LBB5_80:
	mov	dil, byte ptr [r8 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	jmp	.LBB5_198
.LBB5_193:
	mov	r9, r8
	and	r9, -2
	xor	edi, edi
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_194:                              # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [r14]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r10d, byte ptr [r11 + rsi]
	xor	al, r10b
	mov	ecx, edi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, r10b
	mov	byte ptr [r11 + rsi], dl
	add	rdi, 2
	ucomisd	xmm0, qword ptr [r14 + 8]
	lea	r14, [r14 + 16]
	setne	al
	neg	al
	xor	al, dl
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, dl
	mov	byte ptr [r11 + rsi], bl
	cmp	r9, rdi
	jne	.LBB5_194
.LBB5_195:
	test	r8b, 1
	je	.LBB5_199
# %bb.196:
	ucomisd	xmm0, qword ptr [r14]
	jmp	.LBB5_197
.LBB5_168:
	mov	r9, r8
	and	r9, -2
	xor	edi, edi
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_169:                              # =>This Inner Loop Header: Depth=1
	cmp	r11, qword ptr [r14]
	setne	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	xor	al, r10b
	and	dl, al
	xor	dl, r10b
	mov	byte ptr [r15 + rsi], dl
	add	rdi, 2
	cmp	r11, qword ptr [r14 + 8]
	lea	r14, [r14 + 16]
	setne	al
	neg	al
	xor	al, dl
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, dl
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, rdi
	jne	.LBB5_169
.LBB5_40:
	test	r8b, 1
	je	.LBB5_199
# %bb.41:
	cmp	r11, qword ptr [r14]
.LBB5_197:
	setne	al
	neg	al
	mov	rdx, rdi
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	mov	sil, byte ptr [r8 + rdx]
	and	dil, 7
	mov	bl, 1
	mov	ecx, edi
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
.LBB5_198:
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB5_199
.LBB5_140:
	mov	r9, r8
	and	r9, -2
	xor	esi, esi
	.p2align	4, 0x90
.LBB5_141:                              # =>This Inner Loop Header: Depth=1
	cmp	r11w, word ptr [r14]
	setne	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r10d, byte ptr [r12 + rdi]
	mov	ecx, esi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r12 + rdi], bl
	add	rsi, 2
	cmp	r11w, word ptr [r14 + 2]
	lea	r14, [r14 + 4]
	setne	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r12 + rdi], al
	cmp	r9, rsi
	jne	.LBB5_141
.LBB5_118:
	test	r8b, 1
	je	.LBB5_199
# %bb.119:
	cmp	r11w, word ptr [r14]
	setne	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r12 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r12 + rdx], bl
	jmp	.LBB5_199
.LBB5_191:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r14, r11
	.p2align	4, 0x90
.LBB5_192:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	setne	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	mov	ecx, esi
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	add	rsi, 2
	ucomiss	xmm0, dword ptr [rbx + 4]
	lea	rbx, [rbx + 8]
	setne	r9b
	neg	r9b
	xor	r9b, al
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, r9b
	xor	dl, al
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, rsi
	jne	.LBB5_192
.LBB5_189:
	test	r8b, 1
	je	.LBB5_199
# %bb.190:
	ucomiss	xmm0, dword ptr [rbx]
	setne	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r11 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r11 + rdx], bl
.LBB5_199:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB5_85:
	and	r10, -16
	mov	rax, r10
	shl	rax, 5
	add	rax, r14
	mov	qword ptr [rsp + 272], rax      # 8-byte Spill
	mov	qword ptr [rsp + 216], r10      # 8-byte Spill
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	lea	rax, [rax + 4*r10]
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 176], xmm1   # 16-byte Spill
	xor	eax, eax
	.p2align	4, 0x90
.LBB5_86:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 168], rax      # 8-byte Spill
	shl	rax, 5
	mov	r9, rax
	mov	rbx, rax
	mov	r15, rax
	mov	rdx, rax
	mov	r13, rax
	mov	r8, rax
	mov	r12, rax
	mov	r10, rax
	mov	r11, rax
	mov	rsi, rax
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	movzx	ecx, byte ptr [r14 + rax]
	movd	xmm4, ecx
	movzx	ecx, byte ptr [r14 + rax + 1]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [r14 + rax + 2]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [r14 + rax + 3]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [r14 + rax + 4]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [r14 + rax + 5]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [r14 + rax + 6]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [r14 + rax + 7]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [r14 + rax + 8]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 256], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [r14 + rax + 9]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [r14 + rax + 10]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [r14 + rax + 11]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [r14 + rax + 12]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 224], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [r14 + rax + 13]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [r14 + rax + 14]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [r14 + rax + 15]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 192], xmm0   # 16-byte Spill
	mov	rcx, rax
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	rdi, rax
	or	rdi, 32
	mov	qword ptr [rsp + 24], rdi       # 8-byte Spill
	or	r9, 64
	mov	qword ptr [rsp + 72], r9        # 8-byte Spill
	or	rbx, 96
	mov	qword ptr [rsp + 32], rbx       # 8-byte Spill
	or	r15, 128
	mov	qword ptr [rsp + 48], r15       # 8-byte Spill
	or	rdx, 160
	or	r13, 192
	or	r8, 224
	or	r12, 256
	or	r10, 288
	or	r11, 320
	or	rsi, 352
	mov	qword ptr [rsp + 88], rsi       # 8-byte Spill
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	or	rsi, 384
	mov	qword ptr [rsp + 56], rsi       # 8-byte Spill
	or	rax, 416
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	mov	rax, rcx
	or	rax, 448
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	or	rcx, 480
	mov	qword ptr [rsp + 16], rcx       # 8-byte Spill
	pinsrb	xmm4, byte ptr [r14 + rdi], 1
	pinsrb	xmm4, byte ptr [r14 + r9], 2
	pinsrb	xmm4, byte ptr [r14 + rbx], 3
	pinsrb	xmm4, byte ptr [r14 + r15], 4
	mov	rdi, rdx
	pinsrb	xmm4, byte ptr [r14 + rdx], 5
	mov	rdx, r13
	mov	qword ptr [rsp + 152], r13      # 8-byte Spill
	pinsrb	xmm4, byte ptr [r14 + r13], 6
	mov	r13, r8
	pinsrb	xmm4, byte ptr [r14 + r8], 7
	mov	r8, r12
	pinsrb	xmm4, byte ptr [r14 + r12], 8
	pinsrb	xmm4, byte ptr [r14 + r10], 9
	mov	qword ptr [rsp + 112], r11      # 8-byte Spill
	pinsrb	xmm4, byte ptr [r14 + r11], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rax], 11
	pinsrb	xmm4, byte ptr [r14 + rsi], 12
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rcx], 13
	mov	r12, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + r12], 14
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rbx], 15
	mov	r15, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [r14 + r15 + 1], 1
	pinsrb	xmm3, byte ptr [r14 + r9 + 1], 2
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [r14 + rbx + 1], 3
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [r14 + r9 + 1], 4
	pinsrb	xmm3, byte ptr [r14 + rdi + 1], 5
	mov	qword ptr [rsp + 96], rdi       # 8-byte Spill
	pinsrb	xmm3, byte ptr [r14 + rdx + 1], 6
	pinsrb	xmm3, byte ptr [r14 + r13 + 1], 7
	mov	rbx, r13
	pinsrb	xmm3, byte ptr [r14 + r8 + 1], 8
	mov	r13, r8
	pinsrb	xmm3, byte ptr [r14 + r10 + 1], 9
	mov	rdx, r10
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	pinsrb	xmm3, byte ptr [r14 + r11 + 1], 10
	pinsrb	xmm3, byte ptr [r14 + rax + 1], 11
	pinsrb	xmm3, byte ptr [r14 + rsi + 1], 12
	pinsrb	xmm3, byte ptr [r14 + rcx + 1], 13
	pinsrb	xmm3, byte ptr [r14 + r12 + 1], 14
	movdqa	xmm1, xmmword ptr [rsp + 176]   # 16-byte Reload
	pcmpeqb	xmm4, xmm1
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [r14 + rax + 1], 15
	pcmpeqb	xmm3, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_16] # xmm0 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm3, xmm0
	paddb	xmm3, xmm4
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [r14 + rax + 16]
	movd	xmm10, esi
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + r12 + 2], 1
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rcx + 2], 2
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + r15 + 2], 3
	mov	r11, r9
	pinsrb	xmm5, byte ptr [r14 + r9 + 2], 4
	pinsrb	xmm5, byte ptr [r14 + rdi + 2], 5
	mov	r10, qword ptr [rsp + 152]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + r10 + 2], 6
	mov	r8, rbx
	pinsrb	xmm5, byte ptr [r14 + rbx + 2], 7
	mov	qword ptr [rsp + 104], r13      # 8-byte Spill
	pinsrb	xmm5, byte ptr [r14 + r13 + 2], 8
	pinsrb	xmm5, byte ptr [r14 + rdx + 2], 9
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rdi + 2], 10
	mov	rsi, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rsi + 2], 11
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rax + 2], 12
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rbx + 2], 13
	mov	r9, qword ptr [rsp + 40]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + r9 + 2], 14
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rdx + 2], 15
	pinsrb	xmm7, byte ptr [r14 + r12 + 3], 1
	pinsrb	xmm7, byte ptr [r14 + rcx + 3], 2
	pinsrb	xmm7, byte ptr [r14 + r15 + 3], 3
	pinsrb	xmm7, byte ptr [r14 + r11 + 3], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rax + 3], 5
	pinsrb	xmm7, byte ptr [r14 + r10 + 3], 6
	pinsrb	xmm7, byte ptr [r14 + r8 + 3], 7
	pinsrb	xmm7, byte ptr [r14 + r13 + 3], 8
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rax + 3], 9
	pinsrb	xmm7, byte ptr [r14 + rdi + 3], 10
	pinsrb	xmm7, byte ptr [r14 + rsi + 3], 11
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rax + 3], 12
	pinsrb	xmm7, byte ptr [r14 + rbx + 3], 13
	pinsrb	xmm7, byte ptr [r14 + r9 + 3], 14
	pinsrb	xmm7, byte ptr [r14 + rdx + 3], 15
	pinsrb	xmm9, byte ptr [r14 + r12 + 4], 1
	pinsrb	xmm9, byte ptr [r14 + rcx + 4], 2
	pinsrb	xmm9, byte ptr [r14 + r15 + 4], 3
	pinsrb	xmm9, byte ptr [r14 + r11 + 4], 4
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r12 + 4], 5
	pinsrb	xmm9, byte ptr [r14 + r10 + 4], 6
	pinsrb	xmm9, byte ptr [r14 + r8 + 4], 7
	pinsrb	xmm9, byte ptr [r14 + r13 + 4], 8
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rcx + 4], 9
	pinsrb	xmm9, byte ptr [r14 + rdi + 4], 10
	pinsrb	xmm9, byte ptr [r14 + rsi + 4], 11
	pinsrb	xmm9, byte ptr [r14 + rax + 4], 12
	pinsrb	xmm9, byte ptr [r14 + rbx + 4], 13
	pinsrb	xmm9, byte ptr [r14 + r9 + 4], 14
	pinsrb	xmm9, byte ptr [r14 + rdx + 4], 15
	pcmpeqb	xmm5, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_17] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm5, xmm0
	pcmpeqb	xmm7, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_18] # xmm0 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm7, xmm0
	por	xmm7, xmm5
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [r14 + rdx + 17]
	movd	xmm4, esi
	pcmpeqb	xmm9, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_19] # xmm0 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm9, xmm0
	por	xmm9, xmm7
	movzx	esi, byte ptr [r14 + rdx + 18]
	movd	xmm7, esi
	pcmpeqd	xmm0, xmm0
	psubb	xmm3, xmm0
	por	xmm9, xmm3
	movzx	esi, byte ptr [r14 + rdx + 19]
	movd	xmm5, esi
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + rdx + 5], 1
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + rdi + 5], 2
	pinsrb	xmm2, byte ptr [r14 + r15 + 5], 3
	pinsrb	xmm2, byte ptr [r14 + r11 + 5], 4
	mov	r9, r12
	pinsrb	xmm2, byte ptr [r14 + r12 + 5], 5
	pinsrb	xmm2, byte ptr [r14 + r10 + 5], 6
	mov	r13, r8
	pinsrb	xmm2, byte ptr [r14 + r8 + 5], 7
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r11 + 5], 8
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r12 + 5], 9
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + rsi + 5], 10
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r8 + 5], 11
	mov	rcx, rax
	pinsrb	xmm2, byte ptr [r14 + rax + 5], 12
	pinsrb	xmm2, byte ptr [r14 + rbx + 5], 13
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r15 + 5], 14
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r15 + 5], 15
	pinsrb	xmm8, byte ptr [r14 + rdx + 6], 1
	pinsrb	xmm8, byte ptr [r14 + rdi + 6], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [r14 + rax + 6], 3
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [r14 + rax + 6], 4
	pinsrb	xmm8, byte ptr [r14 + r9 + 6], 5
	pinsrb	xmm8, byte ptr [r14 + r10 + 6], 6
	pinsrb	xmm8, byte ptr [r14 + r13 + 6], 7
	mov	r10, r13
	mov	qword ptr [rsp + 136], r13      # 8-byte Spill
	pinsrb	xmm8, byte ptr [r14 + r11 + 6], 8
	pinsrb	xmm8, byte ptr [r14 + r12 + 6], 9
	pinsrb	xmm8, byte ptr [r14 + rsi + 6], 10
	pinsrb	xmm8, byte ptr [r14 + r8 + 6], 11
	pinsrb	xmm8, byte ptr [r14 + rcx + 6], 12
	pinsrb	xmm8, byte ptr [r14 + rbx + 6], 13
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [r14 + r13 + 6], 14
	mov	r8, r15
	pinsrb	xmm8, byte ptr [r14 + r15 + 6], 15
	pinsrb	xmm14, byte ptr [r14 + rdx + 7], 1
	pinsrb	xmm14, byte ptr [r14 + rdi + 7], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + rax + 7], 3
	mov	rdx, rax
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + r11 + 7], 4
	pinsrb	xmm14, byte ptr [r14 + r9 + 7], 5
	mov	r9, qword ptr [rsp + 152]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + r9 + 7], 6
	pinsrb	xmm14, byte ptr [r14 + r10 + 7], 7
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + rax + 7], 8
	pinsrb	xmm14, byte ptr [r14 + r12 + 7], 9
	pinsrb	xmm14, byte ptr [r14 + rsi + 7], 10
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + rax + 7], 11
	pinsrb	xmm14, byte ptr [r14 + rcx + 7], 12
	pinsrb	xmm14, byte ptr [r14 + rbx + 7], 13
	pinsrb	xmm14, byte ptr [r14 + r13 + 7], 14
	movdqa	xmm1, xmm14
	movdqa	xmm14, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm2, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_20] # xmm0 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm0
	pcmpeqb	xmm8, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_21] # xmm0 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm8, xmm0
	por	xmm8, xmm2
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [r14 + r10 + 20]
	movd	xmm3, esi
	pinsrb	xmm1, byte ptr [r14 + r15 + 7], 15
	pcmpeqb	xmm1, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm1, xmm0
	por	xmm1, xmm8
	movzx	esi, byte ptr [r14 + r10 + 21]
	movd	xmm2, esi
	movdqa	xmm0, xmmword ptr [rsp + 256]   # 16-byte Reload
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rcx + 8], 1
	pinsrb	xmm0, byte ptr [r14 + rdi + 8], 2
	mov	r13, rdx
	pinsrb	xmm0, byte ptr [r14 + rdx + 8], 3
	pinsrb	xmm0, byte ptr [r14 + r11 + 8], 4
	mov	rdx, r11
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + r8 + 8], 5
	pinsrb	xmm0, byte ptr [r14 + r9 + 8], 6
	mov	r15, r9
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rdi + 8], 7
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rbx + 8], 8
	pinsrb	xmm0, byte ptr [r14 + r12 + 8], 9
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rsi + 8], 10
	pinsrb	xmm0, byte ptr [r14 + rax + 8], 11
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rax + 8], 12
	mov	r9, qword ptr [rsp + 120]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + r9 + 8], 13
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + r11 + 8], 14
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rsi + 8], 15
	por	xmm1, xmm9
	movdqa	xmmword ptr [rsp + 256], xmm1   # 16-byte Spill
	movzx	esi, byte ptr [r14 + r10 + 22]
	movd	xmm1, esi
	pcmpeqb	xmm0, xmm14
	pinsrb	xmm11, byte ptr [r14 + rcx + 9], 1
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rax + 9], 2
	pinsrb	xmm11, byte ptr [r14 + r13 + 9], 3
	pinsrb	xmm11, byte ptr [r14 + rdx + 9], 4
	pinsrb	xmm11, byte ptr [r14 + r8 + 9], 5
	mov	r10, r15
	pinsrb	xmm11, byte ptr [r14 + r15 + 9], 6
	pinsrb	xmm11, byte ptr [r14 + rdi + 9], 7
	mov	r15, rdi
	pinsrb	xmm11, byte ptr [r14 + rbx + 9], 8
	pinsrb	xmm11, byte ptr [r14 + r12 + 9], 9
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rsi + 9], 10
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rdx + 9], 11
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rdi + 9], 12
	pinsrb	xmm11, byte ptr [r14 + r9 + 9], 13
	pinsrb	xmm11, byte ptr [r14 + r11 + 9], 14
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + r8 + 9], 15
	pinsrb	xmm12, byte ptr [r14 + rcx + 10], 1
	pinsrb	xmm12, byte ptr [r14 + rax + 10], 2
	pinsrb	xmm12, byte ptr [r14 + r13 + 10], 3
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [r14 + rbx + 10], 4
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [r14 + r13 + 10], 5
	pinsrb	xmm12, byte ptr [r14 + r10 + 10], 6
	pinsrb	xmm12, byte ptr [r14 + r15 + 10], 7
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [r14 + rbx + 10], 8
	pinsrb	xmm12, byte ptr [r14 + r12 + 10], 9
	pinsrb	xmm12, byte ptr [r14 + rsi + 10], 10
	pinsrb	xmm12, byte ptr [r14 + rdx + 10], 11
	pinsrb	xmm12, byte ptr [r14 + rdi + 10], 12
	pinsrb	xmm12, byte ptr [r14 + r9 + 10], 13
	pinsrb	xmm12, byte ptr [r14 + r11 + 10], 14
	pinsrb	xmm12, byte ptr [r14 + r8 + 10], 15
	pinsrb	xmm13, byte ptr [r14 + rcx + 11], 1
	pinsrb	xmm13, byte ptr [r14 + rax + 11], 2
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [r14 + rax + 11], 3
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [r14 + rax + 11], 4
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [r14 + rax + 11], 5
	pinsrb	xmm13, byte ptr [r14 + r10 + 11], 6
	pinsrb	xmm13, byte ptr [r14 + r15 + 11], 7
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [r14 + r13 + 11], 8
	pinsrb	xmm13, byte ptr [r14 + r12 + 11], 9
	pinsrb	xmm13, byte ptr [r14 + rsi + 11], 10
	pinsrb	xmm13, byte ptr [r14 + rdx + 11], 11
	pinsrb	xmm13, byte ptr [r14 + rdi + 11], 12
	pinsrb	xmm13, byte ptr [r14 + r9 + 11], 13
	pinsrb	xmm13, byte ptr [r14 + r11 + 11], 14
	mov	rax, r11
	pinsrb	xmm13, byte ptr [r14 + r8 + 11], 15
	pcmpeqb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI5_16]
	paddb	xmm11, xmm0
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [r14 + rbx + 23]
	movd	xmm8, esi
	pcmpeqb	xmm12, xmm14
	pandn	xmm12, xmmword ptr [rip + .LCPI5_17]
	pcmpeqb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI5_18]
	por	xmm13, xmm12
	movzx	esi, byte ptr [r14 + rbx + 24]
	movd	xmm12, esi
	movdqa	xmm9, xmmword ptr [rsp + 224]   # 16-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rcx + 12], 1
	mov	r12, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r12 + 12], 2
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r15 + 12], 3
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rbx + 12], 4
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r9 + 12], 5
	mov	r8, r10
	pinsrb	xmm9, byte ptr [r14 + r10 + 12], 6
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r11 + 12], 7
	pinsrb	xmm9, byte ptr [r14 + r13 + 12], 8
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rcx + 12], 9
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r10 + 12], 10
	pinsrb	xmm9, byte ptr [r14 + rdx + 12], 11
	pinsrb	xmm9, byte ptr [r14 + rdi + 12], 12
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rsi + 12], 13
	pinsrb	xmm9, byte ptr [r14 + rax + 12], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rax + 12], 15
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rax + 13], 1
	pinsrb	xmm6, byte ptr [r14 + r12 + 13], 2
	pinsrb	xmm6, byte ptr [r14 + r15 + 13], 3
	pinsrb	xmm6, byte ptr [r14 + rbx + 13], 4
	pinsrb	xmm6, byte ptr [r14 + r9 + 13], 5
	pinsrb	xmm6, byte ptr [r14 + r8 + 13], 6
	pinsrb	xmm6, byte ptr [r14 + r11 + 13], 7
	pinsrb	xmm6, byte ptr [r14 + r13 + 13], 8
	pinsrb	xmm6, byte ptr [r14 + rcx + 13], 9
	pinsrb	xmm6, byte ptr [r14 + r10 + 13], 10
	pinsrb	xmm6, byte ptr [r14 + rdx + 13], 11
	pinsrb	xmm6, byte ptr [r14 + rdi + 13], 12
	pinsrb	xmm6, byte ptr [r14 + rsi + 13], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rax + 13], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rax + 13], 15
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [r14 + rax + 14], 1
	pinsrb	xmm15, byte ptr [r14 + r12 + 14], 2
	pinsrb	xmm15, byte ptr [r14 + r15 + 14], 3
	pinsrb	xmm15, byte ptr [r14 + rbx + 14], 4
	pinsrb	xmm15, byte ptr [r14 + r9 + 14], 5
	mov	rbx, r9
	pinsrb	xmm15, byte ptr [r14 + r8 + 14], 6
	mov	r12, r8
	pinsrb	xmm15, byte ptr [r14 + r11 + 14], 7
	pinsrb	xmm15, byte ptr [r14 + r13 + 14], 8
	pinsrb	xmm15, byte ptr [r14 + rcx + 14], 9
	mov	r11, rcx
	pinsrb	xmm15, byte ptr [r14 + r10 + 14], 10
	pinsrb	xmm15, byte ptr [r14 + rdx + 14], 11
	pinsrb	xmm15, byte ptr [r14 + rdi + 14], 12
	pinsrb	xmm15, byte ptr [r14 + rsi + 14], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [r14 + rax + 14], 14
	pcmpeqb	xmm9, xmm14
	pandn	xmm9, xmmword ptr [rip + .LCPI5_19]
	por	xmm9, xmm13
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [r14 + rax + 25]
	movd	xmm13, esi
	psubb	xmm11, xmmword ptr [rip + .LCPI5_22]
	por	xmm9, xmm11
	movzx	esi, byte ptr [r14 + rax + 26]
	movd	xmm0, esi
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [r14 + rcx + 14], 15
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI5_20]
	pcmpeqb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI5_21]
	por	xmm15, xmm6
	movzx	esi, byte ptr [r14 + rax + 27]
	movd	xmm11, esi
	movdqa	xmm6, xmmword ptr [rsp + 192]   # 16-byte Reload
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rdi + 15], 1
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + r9 + 15], 2
	pinsrb	xmm6, byte ptr [r14 + r15 + 15], 3
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + r8 + 15], 4
	pinsrb	xmm6, byte ptr [r14 + rbx + 15], 5
	pinsrb	xmm6, byte ptr [r14 + r12 + 15], 6
	mov	rsi, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rsi + 15], 7
	mov	r15, r13
	pinsrb	xmm6, byte ptr [r14 + r13 + 15], 8
	pinsrb	xmm6, byte ptr [r14 + r11 + 15], 9
	pinsrb	xmm6, byte ptr [r14 + r10 + 15], 10
	pinsrb	xmm6, byte ptr [r14 + rdx + 15], 11
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + r10 + 15], 12
	mov	r13, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + r13 + 15], 13
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rdx + 15], 14
	pinsrb	xmm6, byte ptr [r14 + rcx + 15], 15
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI5_6]
	por	xmm6, xmm15
	movzx	esi, byte ptr [r14 + rax + 28]
	movd	xmm15, esi
	por	xmm6, xmm9
	movdqa	xmmword ptr [rsp + 192], xmm6   # 16-byte Spill
	movzx	esi, byte ptr [r14 + rax + 29]
	movd	xmm9, esi
	mov	rsi, rdi
	pinsrb	xmm10, byte ptr [r14 + rdi + 16], 1
	pinsrb	xmm10, byte ptr [r14 + r9 + 16], 2
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + rdx + 16], 3
	pinsrb	xmm10, byte ptr [r14 + r8 + 16], 4
	pinsrb	xmm10, byte ptr [r14 + rbx + 16], 5
	pinsrb	xmm10, byte ptr [r14 + r12 + 16], 6
	mov	rdi, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + rdi + 16], 7
	mov	rax, r15
	pinsrb	xmm10, byte ptr [r14 + r15 + 16], 8
	pinsrb	xmm10, byte ptr [r14 + r11 + 16], 9
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + r15 + 16], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + rcx + 16], 11
	pinsrb	xmm10, byte ptr [r14 + r10 + 16], 12
	pinsrb	xmm10, byte ptr [r14 + r13 + 16], 13
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + rcx + 16], 14
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + r13 + 16], 15
	pinsrb	xmm4, byte ptr [r14 + rsi + 17], 1
	pinsrb	xmm4, byte ptr [r14 + r9 + 17], 2
	pinsrb	xmm4, byte ptr [r14 + rdx + 17], 3
	pinsrb	xmm4, byte ptr [r14 + r8 + 17], 4
	pinsrb	xmm4, byte ptr [r14 + rbx + 17], 5
	pinsrb	xmm4, byte ptr [r14 + r12 + 17], 6
	pinsrb	xmm4, byte ptr [r14 + rdi + 17], 7
	pinsrb	xmm4, byte ptr [r14 + rax + 17], 8
	mov	r9, r11
	pinsrb	xmm4, byte ptr [r14 + r11 + 17], 9
	mov	r10, r15
	pinsrb	xmm4, byte ptr [r14 + r15 + 17], 10
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + r8 + 17], 11
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rdi + 17], 12
	mov	rdx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rdx + 17], 13
	pinsrb	xmm4, byte ptr [r14 + rcx + 17], 14
	mov	r11, rcx
	pinsrb	xmm4, byte ptr [r14 + r13 + 17], 15
	pcmpeqb	xmm10, xmm14
	pcmpeqb	xmm4, xmm14
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_16] # xmm6 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm4, xmm6
	paddb	xmm4, xmm10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [r14 + rax + 30]
	movd	xmm10, esi
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rsi + 18], 1
	pinsrb	xmm5, byte ptr [r14 + rsi + 19], 1
	pinsrb	xmm3, byte ptr [r14 + rsi + 20], 1
	pinsrb	xmm2, byte ptr [r14 + rsi + 21], 1
	pinsrb	xmm1, byte ptr [r14 + rsi + 22], 1
	pinsrb	xmm8, byte ptr [r14 + rsi + 23], 1
	pinsrb	xmm12, byte ptr [r14 + rsi + 24], 1
	pinsrb	xmm13, byte ptr [r14 + rsi + 25], 1
	pinsrb	xmm0, byte ptr [r14 + rsi + 26], 1
	pinsrb	xmm11, byte ptr [r14 + rsi + 27], 1
	pinsrb	xmm15, byte ptr [r14 + rsi + 28], 1
	pinsrb	xmm9, byte ptr [r14 + rsi + 29], 1
	pinsrb	xmm10, byte ptr [r14 + rsi + 30], 1
	movzx	eax, byte ptr [r14 + rax + 31]
	movd	xmm6, eax
	pinsrb	xmm6, byte ptr [r14 + rsi + 31], 1
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rax + 18], 2
	pinsrb	xmm5, byte ptr [r14 + rax + 19], 2
	pinsrb	xmm3, byte ptr [r14 + rax + 20], 2
	pinsrb	xmm2, byte ptr [r14 + rax + 21], 2
	pinsrb	xmm1, byte ptr [r14 + rax + 22], 2
	pinsrb	xmm8, byte ptr [r14 + rax + 23], 2
	pinsrb	xmm12, byte ptr [r14 + rax + 24], 2
	pinsrb	xmm13, byte ptr [r14 + rax + 25], 2
	pinsrb	xmm0, byte ptr [r14 + rax + 26], 2
	pinsrb	xmm11, byte ptr [r14 + rax + 27], 2
	pinsrb	xmm15, byte ptr [r14 + rax + 28], 2
	pinsrb	xmm9, byte ptr [r14 + rax + 29], 2
	pinsrb	xmm10, byte ptr [r14 + rax + 30], 2
	pinsrb	xmm6, byte ptr [r14 + rax + 31], 2
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + r15 + 18], 3
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rax + 18], 4
	pinsrb	xmm7, byte ptr [r14 + rbx + 18], 5
	pinsrb	xmm7, byte ptr [r14 + r12 + 18], 6
	mov	rcx, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rcx + 18], 7
	mov	rsi, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rsi + 18], 8
	pinsrb	xmm7, byte ptr [r14 + r9 + 18], 9
	pinsrb	xmm7, byte ptr [r14 + r10 + 18], 10
	pinsrb	xmm7, byte ptr [r14 + r8 + 18], 11
	pinsrb	xmm7, byte ptr [r14 + rdi + 18], 12
	pinsrb	xmm7, byte ptr [r14 + rdx + 18], 13
	pinsrb	xmm7, byte ptr [r14 + r11 + 18], 14
	pinsrb	xmm7, byte ptr [r14 + r13 + 18], 15
	pinsrb	xmm5, byte ptr [r14 + r15 + 19], 3
	pinsrb	xmm5, byte ptr [r14 + rax + 19], 4
	pinsrb	xmm5, byte ptr [r14 + rbx + 19], 5
	pinsrb	xmm5, byte ptr [r14 + r12 + 19], 6
	pinsrb	xmm5, byte ptr [r14 + rcx + 19], 7
	pinsrb	xmm5, byte ptr [r14 + rsi + 19], 8
	pinsrb	xmm5, byte ptr [r14 + r9 + 19], 9
	pinsrb	xmm5, byte ptr [r14 + r10 + 19], 10
	pinsrb	xmm5, byte ptr [r14 + r8 + 19], 11
	pinsrb	xmm5, byte ptr [r14 + rdi + 19], 12
	pinsrb	xmm5, byte ptr [r14 + rdx + 19], 13
	pinsrb	xmm5, byte ptr [r14 + r11 + 19], 14
	pinsrb	xmm5, byte ptr [r14 + r13 + 19], 15
	pinsrb	xmm3, byte ptr [r14 + r15 + 20], 3
	pinsrb	xmm3, byte ptr [r14 + rax + 20], 4
	pinsrb	xmm3, byte ptr [r14 + rbx + 20], 5
	pinsrb	xmm3, byte ptr [r14 + r12 + 20], 6
	pinsrb	xmm3, byte ptr [r14 + rcx + 20], 7
	pinsrb	xmm3, byte ptr [r14 + rsi + 20], 8
	pinsrb	xmm3, byte ptr [r14 + r9 + 20], 9
	pinsrb	xmm3, byte ptr [r14 + r10 + 20], 10
	pinsrb	xmm3, byte ptr [r14 + r8 + 20], 11
	pinsrb	xmm3, byte ptr [r14 + rdi + 20], 12
	pinsrb	xmm3, byte ptr [r14 + rdx + 20], 13
	pinsrb	xmm3, byte ptr [r14 + r11 + 20], 14
	pcmpeqb	xmm7, xmm14
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_17] # xmm14 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm7, xmm14
	pcmpeqb	xmm5, xmmword ptr [rsp + 176]   # 16-byte Folded Reload
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_18] # xmm14 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm5, xmm14
	por	xmm5, xmm7
	pinsrb	xmm3, byte ptr [r14 + r13 + 20], 15
	movdqa	xmm14, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm3, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI5_19] # xmm7 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm3, xmm7
	por	xmm3, xmm5
	pcmpeqd	xmm5, xmm5
	psubb	xmm4, xmm5
	por	xmm3, xmm4
	pinsrb	xmm2, byte ptr [r14 + r15 + 21], 3
	pinsrb	xmm2, byte ptr [r14 + rax + 21], 4
	pinsrb	xmm2, byte ptr [r14 + rbx + 21], 5
	pinsrb	xmm2, byte ptr [r14 + r12 + 21], 6
	pinsrb	xmm2, byte ptr [r14 + rcx + 21], 7
	pinsrb	xmm2, byte ptr [r14 + rsi + 21], 8
	pinsrb	xmm2, byte ptr [r14 + r9 + 21], 9
	pinsrb	xmm2, byte ptr [r14 + r10 + 21], 10
	pinsrb	xmm2, byte ptr [r14 + r8 + 21], 11
	pinsrb	xmm2, byte ptr [r14 + rdi + 21], 12
	pinsrb	xmm2, byte ptr [r14 + rdx + 21], 13
	pinsrb	xmm2, byte ptr [r14 + r11 + 21], 14
	pinsrb	xmm2, byte ptr [r14 + r13 + 21], 15
	pinsrb	xmm1, byte ptr [r14 + r15 + 22], 3
	pinsrb	xmm1, byte ptr [r14 + rax + 22], 4
	pinsrb	xmm1, byte ptr [r14 + rbx + 22], 5
	pinsrb	xmm1, byte ptr [r14 + r12 + 22], 6
	pinsrb	xmm1, byte ptr [r14 + rcx + 22], 7
	pinsrb	xmm1, byte ptr [r14 + rsi + 22], 8
	pinsrb	xmm1, byte ptr [r14 + r9 + 22], 9
	pinsrb	xmm1, byte ptr [r14 + r10 + 22], 10
	pinsrb	xmm1, byte ptr [r14 + r8 + 22], 11
	pinsrb	xmm1, byte ptr [r14 + rdi + 22], 12
	pinsrb	xmm1, byte ptr [r14 + rdx + 22], 13
	pinsrb	xmm1, byte ptr [r14 + r11 + 22], 14
	pinsrb	xmm1, byte ptr [r14 + r13 + 22], 15
	pinsrb	xmm8, byte ptr [r14 + r15 + 23], 3
	pinsrb	xmm8, byte ptr [r14 + rax + 23], 4
	pinsrb	xmm8, byte ptr [r14 + rbx + 23], 5
	pinsrb	xmm8, byte ptr [r14 + r12 + 23], 6
	pinsrb	xmm8, byte ptr [r14 + rcx + 23], 7
	pinsrb	xmm8, byte ptr [r14 + rsi + 23], 8
	pinsrb	xmm8, byte ptr [r14 + r9 + 23], 9
	pinsrb	xmm8, byte ptr [r14 + r10 + 23], 10
	pinsrb	xmm8, byte ptr [r14 + r8 + 23], 11
	pinsrb	xmm8, byte ptr [r14 + rdi + 23], 12
	pinsrb	xmm8, byte ptr [r14 + rdx + 23], 13
	pinsrb	xmm8, byte ptr [r14 + r11 + 23], 14
	pcmpeqb	xmm2, xmm14
	movdqa	xmm5, xmmword ptr [rip + .LCPI5_20] # xmm5 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm5
	pcmpeqb	xmm1, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI5_21] # xmm7 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm1, xmm7
	por	xmm1, xmm2
	pinsrb	xmm8, byte ptr [r14 + r13 + 23], 15
	pcmpeqb	xmm8, xmm14
	movdqa	xmm4, xmmword ptr [rip + .LCPI5_6] # xmm4 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm8, xmm4
	por	xmm8, xmm1
	pinsrb	xmm12, byte ptr [r14 + r15 + 24], 3
	pinsrb	xmm12, byte ptr [r14 + rax + 24], 4
	pinsrb	xmm12, byte ptr [r14 + rbx + 24], 5
	pinsrb	xmm12, byte ptr [r14 + r12 + 24], 6
	pinsrb	xmm12, byte ptr [r14 + rcx + 24], 7
	pinsrb	xmm12, byte ptr [r14 + rsi + 24], 8
	pinsrb	xmm12, byte ptr [r14 + r9 + 24], 9
	pinsrb	xmm12, byte ptr [r14 + r10 + 24], 10
	pinsrb	xmm12, byte ptr [r14 + r8 + 24], 11
	pinsrb	xmm12, byte ptr [r14 + rdi + 24], 12
	pinsrb	xmm12, byte ptr [r14 + rdx + 24], 13
	pinsrb	xmm12, byte ptr [r14 + r11 + 24], 14
	pinsrb	xmm12, byte ptr [r14 + r13 + 24], 15
	por	xmm8, xmm3
	pcmpeqb	xmm12, xmm14
	pinsrb	xmm13, byte ptr [r14 + r15 + 25], 3
	pinsrb	xmm13, byte ptr [r14 + rax + 25], 4
	pinsrb	xmm13, byte ptr [r14 + rbx + 25], 5
	pinsrb	xmm13, byte ptr [r14 + r12 + 25], 6
	pinsrb	xmm13, byte ptr [r14 + rcx + 25], 7
	pinsrb	xmm13, byte ptr [r14 + rsi + 25], 8
	pinsrb	xmm13, byte ptr [r14 + r9 + 25], 9
	pinsrb	xmm13, byte ptr [r14 + r10 + 25], 10
	pinsrb	xmm13, byte ptr [r14 + r8 + 25], 11
	pinsrb	xmm13, byte ptr [r14 + rdi + 25], 12
	pinsrb	xmm13, byte ptr [r14 + rdx + 25], 13
	pinsrb	xmm13, byte ptr [r14 + r11 + 25], 14
	pinsrb	xmm13, byte ptr [r14 + r13 + 25], 15
	pinsrb	xmm0, byte ptr [r14 + r15 + 26], 3
	pinsrb	xmm0, byte ptr [r14 + rax + 26], 4
	pinsrb	xmm0, byte ptr [r14 + rbx + 26], 5
	pinsrb	xmm0, byte ptr [r14 + r12 + 26], 6
	pinsrb	xmm0, byte ptr [r14 + rcx + 26], 7
	pinsrb	xmm0, byte ptr [r14 + rsi + 26], 8
	pinsrb	xmm0, byte ptr [r14 + r9 + 26], 9
	pinsrb	xmm0, byte ptr [r14 + r10 + 26], 10
	pinsrb	xmm0, byte ptr [r14 + r8 + 26], 11
	pinsrb	xmm0, byte ptr [r14 + rdi + 26], 12
	pinsrb	xmm0, byte ptr [r14 + rdx + 26], 13
	pinsrb	xmm0, byte ptr [r14 + r11 + 26], 14
	pinsrb	xmm0, byte ptr [r14 + r13 + 26], 15
	pinsrb	xmm11, byte ptr [r14 + r15 + 27], 3
	pinsrb	xmm11, byte ptr [r14 + rax + 27], 4
	pinsrb	xmm11, byte ptr [r14 + rbx + 27], 5
	pinsrb	xmm11, byte ptr [r14 + r12 + 27], 6
	pinsrb	xmm11, byte ptr [r14 + rcx + 27], 7
	pinsrb	xmm11, byte ptr [r14 + rsi + 27], 8
	pinsrb	xmm11, byte ptr [r14 + r9 + 27], 9
	pinsrb	xmm11, byte ptr [r14 + r10 + 27], 10
	pinsrb	xmm11, byte ptr [r14 + r8 + 27], 11
	pinsrb	xmm11, byte ptr [r14 + rdi + 27], 12
	pinsrb	xmm11, byte ptr [r14 + rdx + 27], 13
	pinsrb	xmm11, byte ptr [r14 + r11 + 27], 14
	pcmpeqb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI5_16]
	paddb	xmm13, xmm12
	pinsrb	xmm11, byte ptr [r14 + r13 + 27], 15
	pcmpeqb	xmm0, xmm14
	pandn	xmm0, xmmword ptr [rip + .LCPI5_17]
	pcmpeqb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI5_18]
	por	xmm11, xmm0
	pinsrb	xmm15, byte ptr [r14 + r15 + 28], 3
	pinsrb	xmm9, byte ptr [r14 + r15 + 29], 3
	pinsrb	xmm10, byte ptr [r14 + r15 + 30], 3
	pinsrb	xmm6, byte ptr [r14 + r15 + 31], 3
	pinsrb	xmm15, byte ptr [r14 + rax + 28], 4
	pinsrb	xmm9, byte ptr [r14 + rax + 29], 4
	pinsrb	xmm10, byte ptr [r14 + rax + 30], 4
	pinsrb	xmm6, byte ptr [r14 + rax + 31], 4
	pinsrb	xmm15, byte ptr [r14 + rbx + 28], 5
	pinsrb	xmm9, byte ptr [r14 + rbx + 29], 5
	pinsrb	xmm10, byte ptr [r14 + rbx + 30], 5
	pinsrb	xmm6, byte ptr [r14 + rbx + 31], 5
	pinsrb	xmm15, byte ptr [r14 + r12 + 28], 6
	pinsrb	xmm9, byte ptr [r14 + r12 + 29], 6
	pinsrb	xmm10, byte ptr [r14 + r12 + 30], 6
	pinsrb	xmm6, byte ptr [r14 + r12 + 31], 6
	mov	rax, rcx
	pinsrb	xmm15, byte ptr [r14 + rcx + 28], 7
	pinsrb	xmm9, byte ptr [r14 + rcx + 29], 7
	pinsrb	xmm10, byte ptr [r14 + rcx + 30], 7
	pinsrb	xmm6, byte ptr [r14 + rcx + 31], 7
	mov	rax, rsi
	pinsrb	xmm15, byte ptr [r14 + rsi + 28], 8
	pinsrb	xmm9, byte ptr [r14 + rsi + 29], 8
	pinsrb	xmm10, byte ptr [r14 + rsi + 30], 8
	pinsrb	xmm6, byte ptr [r14 + rsi + 31], 8
	mov	rax, r9
	pinsrb	xmm15, byte ptr [r14 + r9 + 28], 9
	pinsrb	xmm9, byte ptr [r14 + r9 + 29], 9
	pinsrb	xmm10, byte ptr [r14 + r9 + 30], 9
	pinsrb	xmm6, byte ptr [r14 + r9 + 31], 9
	mov	rax, r10
	pinsrb	xmm15, byte ptr [r14 + r10 + 28], 10
	pinsrb	xmm9, byte ptr [r14 + r10 + 29], 10
	pinsrb	xmm10, byte ptr [r14 + r10 + 30], 10
	pinsrb	xmm6, byte ptr [r14 + r10 + 31], 10
	mov	rax, r8
	pinsrb	xmm15, byte ptr [r14 + r8 + 28], 11
	pinsrb	xmm9, byte ptr [r14 + r8 + 29], 11
	pinsrb	xmm10, byte ptr [r14 + r8 + 30], 11
	pinsrb	xmm6, byte ptr [r14 + r8 + 31], 11
	mov	rax, rdi
	pinsrb	xmm15, byte ptr [r14 + rdi + 28], 12
	pinsrb	xmm9, byte ptr [r14 + rdi + 29], 12
	pinsrb	xmm10, byte ptr [r14 + rdi + 30], 12
	pinsrb	xmm6, byte ptr [r14 + rdi + 31], 12
	mov	rax, rdx
	pinsrb	xmm15, byte ptr [r14 + rdx + 28], 13
	pinsrb	xmm9, byte ptr [r14 + rdx + 29], 13
	pinsrb	xmm10, byte ptr [r14 + rdx + 30], 13
	pinsrb	xmm6, byte ptr [r14 + rdx + 31], 13
	mov	rax, r11
	pinsrb	xmm15, byte ptr [r14 + r11 + 28], 14
	pinsrb	xmm9, byte ptr [r14 + r11 + 29], 14
	pinsrb	xmm10, byte ptr [r14 + r11 + 30], 14
	pinsrb	xmm6, byte ptr [r14 + r11 + 31], 14
	pinsrb	xmm15, byte ptr [r14 + r13 + 28], 15
	pinsrb	xmm9, byte ptr [r14 + r13 + 29], 15
	pinsrb	xmm10, byte ptr [r14 + r13 + 30], 15
	pcmpeqb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI5_19]
	por	xmm15, xmm11
	pinsrb	xmm6, byte ptr [r14 + r13 + 31], 15
	psubb	xmm13, xmmword ptr [rip + .LCPI5_22]
	por	xmm15, xmm13
	pcmpeqb	xmm9, xmm14
	pandn	xmm9, xmm5
	pcmpeqb	xmm10, xmm14
	pandn	xmm10, xmm7
	por	xmm10, xmm9
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmm4
	por	xmm6, xmm10
	por	xmm6, xmm15
	movdqa	xmm0, xmm8
	punpcklbw	xmm0, xmm6              # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	movdqa	xmm3, xmmword ptr [rsp + 256]   # 16-byte Reload
	movdqa	xmm1, xmm3
	movdqa	xmm4, xmmword ptr [rsp + 192]   # 16-byte Reload
	punpcklbw	xmm1, xmm4              # xmm1 = xmm1[0],xmm4[0],xmm1[1],xmm4[1],xmm1[2],xmm4[2],xmm1[3],xmm4[3],xmm1[4],xmm4[4],xmm1[5],xmm4[5],xmm1[6],xmm4[6],xmm1[7],xmm4[7]
	movdqa	xmm2, xmm1
	punpcklwd	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
	punpckhwd	xmm1, xmm0              # xmm1 = xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpckhbw	xmm8, xmm6              # xmm8 = xmm8[8],xmm6[8],xmm8[9],xmm6[9],xmm8[10],xmm6[10],xmm8[11],xmm6[11],xmm8[12],xmm6[12],xmm8[13],xmm6[13],xmm8[14],xmm6[14],xmm8[15],xmm6[15]
	punpckhbw	xmm3, xmm4              # xmm3 = xmm3[8],xmm4[8],xmm3[9],xmm4[9],xmm3[10],xmm4[10],xmm3[11],xmm4[11],xmm3[12],xmm4[12],xmm3[13],xmm4[13],xmm3[14],xmm4[14],xmm3[15],xmm4[15]
	movdqa	xmm0, xmm3
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm3, xmm8              # xmm3 = xmm3[4],xmm8[4],xmm3[5],xmm8[5],xmm3[6],xmm8[6],xmm3[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	movdqu	xmmword ptr [rax + 4*rcx + 48], xmm3
	movdqu	xmmword ptr [rax + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [rax + 4*rcx + 16], xmm1
	movdqu	xmmword ptr [rax + 4*rcx], xmm2
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 216]      # 8-byte Folded Reload
	jne	.LBB5_86
# %bb.87:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 216]      # 8-byte Folded Reload
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	jne	.LBB5_88
	jmp	.LBB5_91
.LBB5_66:
	and	r10, -16
	mov	rax, r10
	shl	rax, 5
	add	rax, r14
	mov	qword ptr [rsp + 272], rax      # 8-byte Spill
	mov	qword ptr [rsp + 216], r10      # 8-byte Spill
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	lea	rax, [rax + 4*r10]
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 176], xmm1   # 16-byte Spill
	xor	eax, eax
	.p2align	4, 0x90
.LBB5_67:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 168], rax      # 8-byte Spill
	shl	rax, 5
	mov	r8, rax
	mov	r11, rax
	mov	r9, rax
	mov	r13, rax
	mov	r15, rax
	mov	rdi, rax
	mov	r10, rax
	mov	r12, rax
	mov	rbx, rax
	mov	rdx, rax
	mov	rsi, rax
	movzx	ecx, byte ptr [r14 + rax]
	movd	xmm4, ecx
	movzx	ecx, byte ptr [r14 + rax + 1]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [r14 + rax + 2]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [r14 + rax + 3]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [r14 + rax + 4]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [r14 + rax + 5]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [r14 + rax + 6]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [r14 + rax + 7]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [r14 + rax + 8]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 256], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [r14 + rax + 9]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [r14 + rax + 10]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [r14 + rax + 11]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [r14 + rax + 12]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 224], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [r14 + rax + 13]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [r14 + rax + 14]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [r14 + rax + 15]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 192], xmm0   # 16-byte Spill
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	mov	rcx, rax
	or	rcx, 32
	mov	qword ptr [rsp + 16], rcx       # 8-byte Spill
	or	r8, 64
	mov	qword ptr [rsp + 32], r8        # 8-byte Spill
	or	r11, 96
	mov	qword ptr [rsp + 80], r11       # 8-byte Spill
	or	r9, 128
	mov	qword ptr [rsp + 24], r9        # 8-byte Spill
	or	r13, 160
	or	r15, 192
	or	rdi, 224
	mov	qword ptr [rsp + 104], rdi      # 8-byte Spill
	or	r10, 256
	mov	qword ptr [rsp + 152], r10      # 8-byte Spill
	or	r12, 288
	or	rbx, 320
	mov	qword ptr [rsp + 144], rbx      # 8-byte Spill
	or	rdx, 352
	mov	qword ptr [rsp + 112], rdx      # 8-byte Spill
	mov	rbx, rax
	or	rbx, 384
	mov	qword ptr [rsp + 120], rbx      # 8-byte Spill
	mov	rdx, rax
	or	rdx, 416
	mov	rcx, rax
	or	rcx, 448
	mov	qword ptr [rsp + 64], rcx       # 8-byte Spill
	or	rsi, 480
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rax], 1
	pinsrb	xmm4, byte ptr [r14 + r8], 2
	pinsrb	xmm4, byte ptr [r14 + r11], 3
	pinsrb	xmm4, byte ptr [r14 + r9], 4
	pinsrb	xmm4, byte ptr [r14 + r13], 5
	pinsrb	xmm4, byte ptr [r14 + r15], 6
	pinsrb	xmm4, byte ptr [r14 + rdi], 7
	pinsrb	xmm4, byte ptr [r14 + r10], 8
	pinsrb	xmm4, byte ptr [r14 + r12], 9
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rax], 10
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rax], 11
	pinsrb	xmm4, byte ptr [r14 + rbx], 12
	pinsrb	xmm4, byte ptr [r14 + rdx], 13
	pinsrb	xmm4, byte ptr [r14 + rcx], 14
	pinsrb	xmm4, byte ptr [r14 + rsi], 15
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [r14 + rax + 1], 1
	pinsrb	xmm3, byte ptr [r14 + r8 + 1], 2
	pinsrb	xmm3, byte ptr [r14 + r11 + 1], 3
	pinsrb	xmm3, byte ptr [r14 + r9 + 1], 4
	pinsrb	xmm3, byte ptr [r14 + r13 + 1], 5
	mov	r9, r13
	pinsrb	xmm3, byte ptr [r14 + r15 + 1], 6
	mov	r11, r15
	pinsrb	xmm3, byte ptr [r14 + rdi + 1], 7
	pinsrb	xmm3, byte ptr [r14 + r10 + 1], 8
	pinsrb	xmm3, byte ptr [r14 + r12 + 1], 9
	mov	rdi, r12
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [r14 + r12 + 1], 10
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [r14 + rax + 1], 11
	pinsrb	xmm3, byte ptr [r14 + rbx + 1], 12
	pinsrb	xmm3, byte ptr [r14 + rdx + 1], 13
	mov	qword ptr [rsp + 48], rdx       # 8-byte Spill
	pinsrb	xmm3, byte ptr [r14 + rcx + 1], 14
	movdqa	xmm1, xmmword ptr [rsp + 176]   # 16-byte Reload
	pcmpeqb	xmm4, xmm1
	pinsrb	xmm3, byte ptr [r14 + rsi + 1], 15
	mov	r8, rsi
	pcmpeqb	xmm3, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_16] # xmm0 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm3, xmm0
	paddb	xmm3, xmm4
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	esi, byte ptr [r14 + rax + 16]
	movd	xmm10, esi
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rax + 2], 1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + r13 + 2], 2
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + r15 + 2], 3
	mov	rbx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rbx + 2], 4
	pinsrb	xmm5, byte ptr [r14 + r9 + 2], 5
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	pinsrb	xmm5, byte ptr [r14 + r11 + 2], 6
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + r10 + 2], 7
	mov	rax, qword ptr [rsp + 152]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rax + 2], 8
	mov	qword ptr [rsp + 96], rdi       # 8-byte Spill
	pinsrb	xmm5, byte ptr [r14 + rdi + 2], 9
	pinsrb	xmm5, byte ptr [r14 + r12 + 2], 10
	mov	rsi, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rsi + 2], 11
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rcx + 2], 12
	pinsrb	xmm5, byte ptr [r14 + rdx + 2], 13
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [r14 + rdx + 2], 14
	pinsrb	xmm5, byte ptr [r14 + r8 + 2], 15
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rdx + 3], 1
	pinsrb	xmm7, byte ptr [r14 + r13 + 3], 2
	pinsrb	xmm7, byte ptr [r14 + r15 + 3], 3
	pinsrb	xmm7, byte ptr [r14 + rbx + 3], 4
	pinsrb	xmm7, byte ptr [r14 + r9 + 3], 5
	pinsrb	xmm7, byte ptr [r14 + r11 + 3], 6
	pinsrb	xmm7, byte ptr [r14 + r10 + 3], 7
	pinsrb	xmm7, byte ptr [r14 + rax + 3], 8
	pinsrb	xmm7, byte ptr [r14 + rdi + 3], 9
	pinsrb	xmm7, byte ptr [r14 + r12 + 3], 10
	pinsrb	xmm7, byte ptr [r14 + rsi + 3], 11
	pinsrb	xmm7, byte ptr [r14 + rcx + 3], 12
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rdx + 3], 13
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rdx + 3], 14
	pinsrb	xmm7, byte ptr [r14 + r8 + 3], 15
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rdx + 4], 1
	pinsrb	xmm9, byte ptr [r14 + r13 + 4], 2
	pinsrb	xmm9, byte ptr [r14 + r15 + 4], 3
	pinsrb	xmm9, byte ptr [r14 + rbx + 4], 4
	pinsrb	xmm9, byte ptr [r14 + r9 + 4], 5
	mov	r15, r9
	mov	qword ptr [rsp + 56], r9        # 8-byte Spill
	pinsrb	xmm9, byte ptr [r14 + r11 + 4], 6
	pinsrb	xmm9, byte ptr [r14 + r10 + 4], 7
	mov	r9, r10
	pinsrb	xmm9, byte ptr [r14 + rax + 4], 8
	pinsrb	xmm9, byte ptr [r14 + rdi + 4], 9
	pinsrb	xmm9, byte ptr [r14 + r12 + 4], 10
	pinsrb	xmm9, byte ptr [r14 + rsi + 4], 11
	mov	rdi, rsi
	pinsrb	xmm9, byte ptr [r14 + rcx + 4], 12
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r12 + 4], 13
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rdx + 4], 14
	pinsrb	xmm9, byte ptr [r14 + r8 + 4], 15
	pcmpeqb	xmm5, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_17] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm5, xmm0
	pcmpeqb	xmm7, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_18] # xmm0 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm7, xmm0
	por	xmm7, xmm5
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	esi, byte ptr [r14 + rdx + 17]
	movd	xmm4, esi
	pcmpeqb	xmm9, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_19] # xmm0 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm9, xmm0
	por	xmm9, xmm7
	movzx	esi, byte ptr [r14 + rdx + 18]
	movd	xmm7, esi
	pcmpeqd	xmm0, xmm0
	psubb	xmm3, xmm0
	por	xmm9, xmm3
	movzx	esi, byte ptr [r14 + rdx + 19]
	movd	xmm5, esi
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + rdx + 5], 1
	mov	r11, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r11 + 5], 2
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r13 + 5], 3
	pinsrb	xmm2, byte ptr [r14 + rbx + 5], 4
	pinsrb	xmm2, byte ptr [r14 + r15 + 5], 5
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r10 + 5], 6
	pinsrb	xmm2, byte ptr [r14 + r9 + 5], 7
	pinsrb	xmm2, byte ptr [r14 + rax + 5], 8
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + rsi + 5], 9
	mov	r15, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + r15 + 5], 10
	mov	r9, rdi
	pinsrb	xmm2, byte ptr [r14 + rdi + 5], 11
	pinsrb	xmm2, byte ptr [r14 + rcx + 5], 12
	pinsrb	xmm2, byte ptr [r14 + r12 + 5], 13
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [r14 + rdi + 5], 14
	mov	qword ptr [rsp + 72], r8        # 8-byte Spill
	pinsrb	xmm2, byte ptr [r14 + r8 + 5], 15
	pinsrb	xmm8, byte ptr [r14 + rdx + 6], 1
	pinsrb	xmm8, byte ptr [r14 + r11 + 6], 2
	mov	r11, r13
	pinsrb	xmm8, byte ptr [r14 + r13 + 6], 3
	pinsrb	xmm8, byte ptr [r14 + rbx + 6], 4
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [r14 + r13 + 6], 5
	pinsrb	xmm8, byte ptr [r14 + r10 + 6], 6
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [r14 + rbx + 6], 7
	pinsrb	xmm8, byte ptr [r14 + rax + 6], 8
	pinsrb	xmm8, byte ptr [r14 + rsi + 6], 9
	pinsrb	xmm8, byte ptr [r14 + r15 + 6], 10
	pinsrb	xmm8, byte ptr [r14 + r9 + 6], 11
	pinsrb	xmm8, byte ptr [r14 + rcx + 6], 12
	pinsrb	xmm8, byte ptr [r14 + r12 + 6], 13
	pinsrb	xmm8, byte ptr [r14 + rdi + 6], 14
	pinsrb	xmm8, byte ptr [r14 + r8 + 6], 15
	pinsrb	xmm14, byte ptr [r14 + rdx + 7], 1
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + rbx + 7], 2
	mov	r8, r11
	pinsrb	xmm14, byte ptr [r14 + r11 + 7], 3
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + rdx + 7], 4
	pinsrb	xmm14, byte ptr [r14 + r13 + 7], 5
	mov	rdx, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + rdx + 7], 6
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + r9 + 7], 7
	pinsrb	xmm14, byte ptr [r14 + rax + 7], 8
	mov	r13, rax
	pinsrb	xmm14, byte ptr [r14 + rsi + 7], 9
	pinsrb	xmm14, byte ptr [r14 + r15 + 7], 10
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [r14 + r10 + 7], 11
	pinsrb	xmm14, byte ptr [r14 + rcx + 7], 12
	pinsrb	xmm14, byte ptr [r14 + r12 + 7], 13
	pinsrb	xmm14, byte ptr [r14 + rdi + 7], 14
	movdqa	xmm1, xmm14
	movdqa	xmm14, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm2, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_20] # xmm0 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm0
	pcmpeqb	xmm8, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_21] # xmm0 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm8, xmm0
	por	xmm8, xmm2
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	esi, byte ptr [r14 + r15 + 20]
	movd	xmm3, esi
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [r14 + rax + 7], 15
	pcmpeqb	xmm1, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI5_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm1, xmm0
	por	xmm1, xmm8
	movzx	esi, byte ptr [r14 + r15 + 21]
	movd	xmm2, esi
	movdqa	xmm0, xmmword ptr [rsp + 256]   # 16-byte Reload
	mov	r11, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + r11 + 8], 1
	pinsrb	xmm0, byte ptr [r14 + rbx + 8], 2
	pinsrb	xmm0, byte ptr [r14 + r8 + 8], 3
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rcx + 8], 4
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rsi + 8], 5
	pinsrb	xmm0, byte ptr [r14 + rdx + 8], 6
	pinsrb	xmm0, byte ptr [r14 + r9 + 8], 7
	pinsrb	xmm0, byte ptr [r14 + r13 + 8], 8
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rsi + 8], 9
	mov	r12, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + r12 + 8], 10
	pinsrb	xmm0, byte ptr [r14 + r10 + 8], 11
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rsi + 8], 12
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [r14 + rbx + 8], 13
	pinsrb	xmm0, byte ptr [r14 + rdi + 8], 14
	pinsrb	xmm0, byte ptr [r14 + rax + 8], 15
	por	xmm1, xmm9
	movdqa	xmmword ptr [rsp + 256], xmm1   # 16-byte Spill
	movzx	esi, byte ptr [r14 + r15 + 22]
	movd	xmm1, esi
	pcmpeqb	xmm0, xmm14
	pinsrb	xmm11, byte ptr [r14 + r11 + 9], 1
	mov	r15, r11
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + r10 + 9], 2
	pinsrb	xmm11, byte ptr [r14 + r8 + 9], 3
	mov	r13, r8
	pinsrb	xmm11, byte ptr [r14 + rcx + 9], 4
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + r9 + 9], 5
	pinsrb	xmm11, byte ptr [r14 + rdx + 9], 6
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + r11 + 9], 7
	mov	rsi, qword ptr [rsp + 152]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rsi + 9], 8
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + r8 + 9], 9
	pinsrb	xmm11, byte ptr [r14 + r12 + 9], 10
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rdx + 9], 11
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rdi + 9], 12
	pinsrb	xmm11, byte ptr [r14 + rbx + 9], 13
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rax + 9], 14
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [r14 + rcx + 9], 15
	pinsrb	xmm12, byte ptr [r14 + r15 + 10], 1
	pinsrb	xmm12, byte ptr [r14 + r10 + 10], 2
	pinsrb	xmm12, byte ptr [r14 + r13 + 10], 3
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [r14 + r10 + 10], 4
	pinsrb	xmm12, byte ptr [r14 + r9 + 10], 5
	mov	r9, qword ptr [rsp + 136]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [r14 + r9 + 10], 6
	pinsrb	xmm12, byte ptr [r14 + r11 + 10], 7
	pinsrb	xmm12, byte ptr [r14 + rsi + 10], 8
	pinsrb	xmm12, byte ptr [r14 + r8 + 10], 9
	pinsrb	xmm12, byte ptr [r14 + r12 + 10], 10
	pinsrb	xmm12, byte ptr [r14 + rdx + 10], 11
	pinsrb	xmm12, byte ptr [r14 + rdi + 10], 12
	pinsrb	xmm12, byte ptr [r14 + rbx + 10], 13
	pinsrb	xmm12, byte ptr [r14 + rax + 10], 14
	mov	rbx, rax
	pinsrb	xmm12, byte ptr [r14 + rcx + 10], 15
	pinsrb	xmm13, byte ptr [r14 + r15 + 11], 1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [r14 + r13 + 11], 2
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [r14 + rax + 11], 3
	pinsrb	xmm13, byte ptr [r14 + r10 + 11], 4
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [r14 + rax + 11], 5
	pinsrb	xmm13, byte ptr [r14 + r9 + 11], 6
	pinsrb	xmm13, byte ptr [r14 + r11 + 11], 7
	pinsrb	xmm13, byte ptr [r14 + rsi + 11], 8
	pinsrb	xmm13, byte ptr [r14 + r8 + 11], 9
	mov	rax, r8
	pinsrb	xmm13, byte ptr [r14 + r12 + 11], 10
	pinsrb	xmm13, byte ptr [r14 + rdx + 11], 11
	pinsrb	xmm13, byte ptr [r14 + rdi + 11], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [r14 + rsi + 11], 13
	pinsrb	xmm13, byte ptr [r14 + rbx + 11], 14
	pinsrb	xmm13, byte ptr [r14 + rcx + 11], 15
	pcmpeqb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI5_16]
	paddb	xmm11, xmm0
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	esi, byte ptr [r14 + rcx + 23]
	movd	xmm8, esi
	pcmpeqb	xmm12, xmm14
	pandn	xmm12, xmmword ptr [rip + .LCPI5_17]
	pcmpeqb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI5_18]
	por	xmm13, xmm12
	movzx	esi, byte ptr [r14 + rcx + 24]
	movd	xmm12, esi
	movdqa	xmm9, xmmword ptr [rsp + 224]   # 16-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r15 + 12], 1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r13 + 12], 2
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r15 + 12], 3
	mov	rbx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rbx + 12], 4
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r10 + 12], 5
	pinsrb	xmm9, byte ptr [r14 + r9 + 12], 6
	mov	r8, r11
	pinsrb	xmm9, byte ptr [r14 + r11 + 12], 7
	mov	r11, qword ptr [rsp + 152]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + r11 + 12], 8
	mov	r12, rax
	pinsrb	xmm9, byte ptr [r14 + rax + 12], 9
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rcx + 12], 10
	pinsrb	xmm9, byte ptr [r14 + rdx + 12], 11
	pinsrb	xmm9, byte ptr [r14 + rdi + 12], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rsi + 12], 13
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rax + 12], 14
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [r14 + rax + 12], 15
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rax + 13], 1
	pinsrb	xmm6, byte ptr [r14 + r13 + 13], 2
	pinsrb	xmm6, byte ptr [r14 + r15 + 13], 3
	pinsrb	xmm6, byte ptr [r14 + rbx + 13], 4
	pinsrb	xmm6, byte ptr [r14 + r10 + 13], 5
	pinsrb	xmm6, byte ptr [r14 + r9 + 13], 6
	pinsrb	xmm6, byte ptr [r14 + r8 + 13], 7
	pinsrb	xmm6, byte ptr [r14 + r11 + 13], 8
	pinsrb	xmm6, byte ptr [r14 + r12 + 13], 9
	pinsrb	xmm6, byte ptr [r14 + rcx + 13], 10
	pinsrb	xmm6, byte ptr [r14 + rdx + 13], 11
	pinsrb	xmm6, byte ptr [r14 + rdi + 13], 12
	pinsrb	xmm6, byte ptr [r14 + rsi + 13], 13
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rax + 13], 14
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rax + 13], 15
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [r14 + rax + 14], 1
	pinsrb	xmm15, byte ptr [r14 + r13 + 14], 2
	pinsrb	xmm15, byte ptr [r14 + r15 + 14], 3
	pinsrb	xmm15, byte ptr [r14 + rbx + 14], 4
	pinsrb	xmm15, byte ptr [r14 + r10 + 14], 5
	mov	rbx, r10
	pinsrb	xmm15, byte ptr [r14 + r9 + 14], 6
	pinsrb	xmm15, byte ptr [r14 + r8 + 14], 7
	pinsrb	xmm15, byte ptr [r14 + r11 + 14], 8
	pinsrb	xmm15, byte ptr [r14 + r12 + 14], 9
	pinsrb	xmm15, byte ptr [r14 + rcx + 14], 10
	mov	r12, rcx
	pinsrb	xmm15, byte ptr [r14 + rdx + 14], 11
	mov	r10, rdx
	pinsrb	xmm15, byte ptr [r14 + rdi + 14], 12
	pinsrb	xmm15, byte ptr [r14 + rsi + 14], 13
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [r14 + rax + 14], 14
	pcmpeqb	xmm9, xmm14
	pandn	xmm9, xmmword ptr [rip + .LCPI5_19]
	por	xmm9, xmm13
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	esi, byte ptr [r14 + rax + 25]
	movd	xmm13, esi
	psubb	xmm11, xmmword ptr [rip + .LCPI5_22]
	por	xmm9, xmm11
	movzx	esi, byte ptr [r14 + rax + 26]
	movd	xmm0, esi
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [r14 + rcx + 14], 15
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI5_20]
	pcmpeqb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI5_21]
	por	xmm15, xmm6
	movzx	esi, byte ptr [r14 + rax + 27]
	movd	xmm11, esi
	movdqa	xmm6, xmmword ptr [rsp + 192]   # 16-byte Reload
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rdi + 15], 1
	mov	rdx, r13
	pinsrb	xmm6, byte ptr [r14 + r13 + 15], 2
	pinsrb	xmm6, byte ptr [r14 + r15 + 15], 3
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + r9 + 15], 4
	pinsrb	xmm6, byte ptr [r14 + rbx + 15], 5
	mov	rbx, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rbx + 15], 6
	pinsrb	xmm6, byte ptr [r14 + r8 + 15], 7
	pinsrb	xmm6, byte ptr [r14 + r11 + 15], 8
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + r8 + 15], 9
	pinsrb	xmm6, byte ptr [r14 + r12 + 15], 10
	pinsrb	xmm6, byte ptr [r14 + r10 + 15], 11
	mov	r15, r10
	mov	r10, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + r10 + 15], 12
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + r13 + 15], 13
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [r14 + rsi + 15], 14
	pinsrb	xmm6, byte ptr [r14 + rcx + 15], 15
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI5_6]
	por	xmm6, xmm15
	movzx	esi, byte ptr [r14 + rax + 28]
	movd	xmm15, esi
	por	xmm6, xmm9
	movdqa	xmmword ptr [rsp + 192], xmm6   # 16-byte Spill
	movzx	esi, byte ptr [r14 + rax + 29]
	movd	xmm9, esi
	mov	rsi, rdi
	pinsrb	xmm10, byte ptr [r14 + rdi + 16], 1
	mov	rax, rdx
	pinsrb	xmm10, byte ptr [r14 + rdx + 16], 2
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + rdx + 16], 3
	pinsrb	xmm10, byte ptr [r14 + r9 + 16], 4
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + rdi + 16], 5
	pinsrb	xmm10, byte ptr [r14 + rbx + 16], 6
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + rbx + 16], 7
	pinsrb	xmm10, byte ptr [r14 + r11 + 16], 8
	pinsrb	xmm10, byte ptr [r14 + r8 + 16], 9
	pinsrb	xmm10, byte ptr [r14 + r12 + 16], 10
	pinsrb	xmm10, byte ptr [r14 + r15 + 16], 11
	pinsrb	xmm10, byte ptr [r14 + r10 + 16], 12
	pinsrb	xmm10, byte ptr [r14 + r13 + 16], 13
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + rcx + 16], 14
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [r14 + r13 + 16], 15
	pinsrb	xmm4, byte ptr [r14 + rsi + 17], 1
	pinsrb	xmm4, byte ptr [r14 + rax + 17], 2
	pinsrb	xmm4, byte ptr [r14 + rdx + 17], 3
	pinsrb	xmm4, byte ptr [r14 + r9 + 17], 4
	pinsrb	xmm4, byte ptr [r14 + rdi + 17], 5
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + r10 + 17], 6
	mov	r9, rbx
	pinsrb	xmm4, byte ptr [r14 + rbx + 17], 7
	pinsrb	xmm4, byte ptr [r14 + r11 + 17], 8
	pinsrb	xmm4, byte ptr [r14 + r8 + 17], 9
	pinsrb	xmm4, byte ptr [r14 + r12 + 17], 10
	mov	r8, r15
	pinsrb	xmm4, byte ptr [r14 + r15 + 17], 11
	mov	rdi, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rdi + 17], 12
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [r14 + rdx + 17], 13
	pinsrb	xmm4, byte ptr [r14 + rcx + 17], 14
	pinsrb	xmm4, byte ptr [r14 + r13 + 17], 15
	pcmpeqb	xmm10, xmm14
	pcmpeqb	xmm4, xmm14
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_16] # xmm6 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm4, xmm6
	paddb	xmm4, xmm10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	esi, byte ptr [r14 + rax + 30]
	movd	xmm10, esi
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rsi + 18], 1
	pinsrb	xmm5, byte ptr [r14 + rsi + 19], 1
	pinsrb	xmm3, byte ptr [r14 + rsi + 20], 1
	pinsrb	xmm2, byte ptr [r14 + rsi + 21], 1
	pinsrb	xmm1, byte ptr [r14 + rsi + 22], 1
	pinsrb	xmm8, byte ptr [r14 + rsi + 23], 1
	pinsrb	xmm12, byte ptr [r14 + rsi + 24], 1
	pinsrb	xmm13, byte ptr [r14 + rsi + 25], 1
	pinsrb	xmm0, byte ptr [r14 + rsi + 26], 1
	pinsrb	xmm11, byte ptr [r14 + rsi + 27], 1
	pinsrb	xmm15, byte ptr [r14 + rsi + 28], 1
	pinsrb	xmm9, byte ptr [r14 + rsi + 29], 1
	pinsrb	xmm10, byte ptr [r14 + rsi + 30], 1
	movzx	eax, byte ptr [r14 + rax + 31]
	movd	xmm6, eax
	pinsrb	xmm6, byte ptr [r14 + rsi + 31], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rax + 18], 2
	pinsrb	xmm5, byte ptr [r14 + rax + 19], 2
	pinsrb	xmm3, byte ptr [r14 + rax + 20], 2
	pinsrb	xmm2, byte ptr [r14 + rax + 21], 2
	pinsrb	xmm1, byte ptr [r14 + rax + 22], 2
	pinsrb	xmm8, byte ptr [r14 + rax + 23], 2
	pinsrb	xmm12, byte ptr [r14 + rax + 24], 2
	pinsrb	xmm13, byte ptr [r14 + rax + 25], 2
	pinsrb	xmm0, byte ptr [r14 + rax + 26], 2
	pinsrb	xmm11, byte ptr [r14 + rax + 27], 2
	pinsrb	xmm15, byte ptr [r14 + rax + 28], 2
	pinsrb	xmm9, byte ptr [r14 + rax + 29], 2
	pinsrb	xmm10, byte ptr [r14 + rax + 30], 2
	pinsrb	xmm6, byte ptr [r14 + rax + 31], 2
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + r15 + 18], 3
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rax + 18], 4
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rbx + 18], 5
	pinsrb	xmm7, byte ptr [r14 + r10 + 18], 6
	pinsrb	xmm7, byte ptr [r14 + r9 + 18], 7
	pinsrb	xmm7, byte ptr [r14 + r11 + 18], 8
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [r14 + rsi + 18], 9
	pinsrb	xmm7, byte ptr [r14 + r12 + 18], 10
	pinsrb	xmm7, byte ptr [r14 + r8 + 18], 11
	pinsrb	xmm7, byte ptr [r14 + rdi + 18], 12
	pinsrb	xmm7, byte ptr [r14 + rdx + 18], 13
	pinsrb	xmm7, byte ptr [r14 + rcx + 18], 14
	pinsrb	xmm7, byte ptr [r14 + r13 + 18], 15
	pinsrb	xmm5, byte ptr [r14 + r15 + 19], 3
	pinsrb	xmm5, byte ptr [r14 + rax + 19], 4
	pinsrb	xmm5, byte ptr [r14 + rbx + 19], 5
	pinsrb	xmm5, byte ptr [r14 + r10 + 19], 6
	pinsrb	xmm5, byte ptr [r14 + r9 + 19], 7
	pinsrb	xmm5, byte ptr [r14 + r11 + 19], 8
	pinsrb	xmm5, byte ptr [r14 + rsi + 19], 9
	pinsrb	xmm5, byte ptr [r14 + r12 + 19], 10
	pinsrb	xmm5, byte ptr [r14 + r8 + 19], 11
	pinsrb	xmm5, byte ptr [r14 + rdi + 19], 12
	pinsrb	xmm5, byte ptr [r14 + rdx + 19], 13
	pinsrb	xmm5, byte ptr [r14 + rcx + 19], 14
	pinsrb	xmm5, byte ptr [r14 + r13 + 19], 15
	pinsrb	xmm3, byte ptr [r14 + r15 + 20], 3
	pinsrb	xmm3, byte ptr [r14 + rax + 20], 4
	pinsrb	xmm3, byte ptr [r14 + rbx + 20], 5
	pinsrb	xmm3, byte ptr [r14 + r10 + 20], 6
	pinsrb	xmm3, byte ptr [r14 + r9 + 20], 7
	pinsrb	xmm3, byte ptr [r14 + r11 + 20], 8
	pinsrb	xmm3, byte ptr [r14 + rsi + 20], 9
	pinsrb	xmm3, byte ptr [r14 + r12 + 20], 10
	pinsrb	xmm3, byte ptr [r14 + r8 + 20], 11
	pinsrb	xmm3, byte ptr [r14 + rdi + 20], 12
	pinsrb	xmm3, byte ptr [r14 + rdx + 20], 13
	pinsrb	xmm3, byte ptr [r14 + rcx + 20], 14
	pcmpeqb	xmm7, xmm14
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_17] # xmm14 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm7, xmm14
	pcmpeqb	xmm5, xmmword ptr [rsp + 176]   # 16-byte Folded Reload
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_18] # xmm14 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm5, xmm14
	por	xmm5, xmm7
	pinsrb	xmm3, byte ptr [r14 + r13 + 20], 15
	movdqa	xmm14, xmmword ptr [rsp + 176]  # 16-byte Reload
	pcmpeqb	xmm3, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI5_19] # xmm7 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm3, xmm7
	por	xmm3, xmm5
	pcmpeqd	xmm5, xmm5
	psubb	xmm4, xmm5
	por	xmm3, xmm4
	pinsrb	xmm2, byte ptr [r14 + r15 + 21], 3
	pinsrb	xmm2, byte ptr [r14 + rax + 21], 4
	pinsrb	xmm2, byte ptr [r14 + rbx + 21], 5
	pinsrb	xmm2, byte ptr [r14 + r10 + 21], 6
	pinsrb	xmm2, byte ptr [r14 + r9 + 21], 7
	pinsrb	xmm2, byte ptr [r14 + r11 + 21], 8
	pinsrb	xmm2, byte ptr [r14 + rsi + 21], 9
	pinsrb	xmm2, byte ptr [r14 + r12 + 21], 10
	pinsrb	xmm2, byte ptr [r14 + r8 + 21], 11
	pinsrb	xmm2, byte ptr [r14 + rdi + 21], 12
	pinsrb	xmm2, byte ptr [r14 + rdx + 21], 13
	pinsrb	xmm2, byte ptr [r14 + rcx + 21], 14
	pinsrb	xmm2, byte ptr [r14 + r13 + 21], 15
	pinsrb	xmm1, byte ptr [r14 + r15 + 22], 3
	pinsrb	xmm1, byte ptr [r14 + rax + 22], 4
	pinsrb	xmm1, byte ptr [r14 + rbx + 22], 5
	pinsrb	xmm1, byte ptr [r14 + r10 + 22], 6
	pinsrb	xmm1, byte ptr [r14 + r9 + 22], 7
	pinsrb	xmm1, byte ptr [r14 + r11 + 22], 8
	pinsrb	xmm1, byte ptr [r14 + rsi + 22], 9
	pinsrb	xmm1, byte ptr [r14 + r12 + 22], 10
	pinsrb	xmm1, byte ptr [r14 + r8 + 22], 11
	pinsrb	xmm1, byte ptr [r14 + rdi + 22], 12
	pinsrb	xmm1, byte ptr [r14 + rdx + 22], 13
	pinsrb	xmm1, byte ptr [r14 + rcx + 22], 14
	pinsrb	xmm1, byte ptr [r14 + r13 + 22], 15
	pinsrb	xmm8, byte ptr [r14 + r15 + 23], 3
	pinsrb	xmm8, byte ptr [r14 + rax + 23], 4
	pinsrb	xmm8, byte ptr [r14 + rbx + 23], 5
	pinsrb	xmm8, byte ptr [r14 + r10 + 23], 6
	pinsrb	xmm8, byte ptr [r14 + r9 + 23], 7
	pinsrb	xmm8, byte ptr [r14 + r11 + 23], 8
	pinsrb	xmm8, byte ptr [r14 + rsi + 23], 9
	pinsrb	xmm8, byte ptr [r14 + r12 + 23], 10
	pinsrb	xmm8, byte ptr [r14 + r8 + 23], 11
	pinsrb	xmm8, byte ptr [r14 + rdi + 23], 12
	pinsrb	xmm8, byte ptr [r14 + rdx + 23], 13
	pinsrb	xmm8, byte ptr [r14 + rcx + 23], 14
	pcmpeqb	xmm2, xmm14
	movdqa	xmm5, xmmword ptr [rip + .LCPI5_20] # xmm5 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm5
	pcmpeqb	xmm1, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI5_21] # xmm7 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm1, xmm7
	por	xmm1, xmm2
	pinsrb	xmm8, byte ptr [r14 + r13 + 23], 15
	pcmpeqb	xmm8, xmm14
	movdqa	xmm4, xmmword ptr [rip + .LCPI5_6] # xmm4 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm8, xmm4
	por	xmm8, xmm1
	pinsrb	xmm12, byte ptr [r14 + r15 + 24], 3
	pinsrb	xmm12, byte ptr [r14 + rax + 24], 4
	pinsrb	xmm12, byte ptr [r14 + rbx + 24], 5
	pinsrb	xmm12, byte ptr [r14 + r10 + 24], 6
	pinsrb	xmm12, byte ptr [r14 + r9 + 24], 7
	pinsrb	xmm12, byte ptr [r14 + r11 + 24], 8
	pinsrb	xmm12, byte ptr [r14 + rsi + 24], 9
	pinsrb	xmm12, byte ptr [r14 + r12 + 24], 10
	pinsrb	xmm12, byte ptr [r14 + r8 + 24], 11
	pinsrb	xmm12, byte ptr [r14 + rdi + 24], 12
	pinsrb	xmm12, byte ptr [r14 + rdx + 24], 13
	pinsrb	xmm12, byte ptr [r14 + rcx + 24], 14
	pinsrb	xmm12, byte ptr [r14 + r13 + 24], 15
	por	xmm8, xmm3
	pcmpeqb	xmm12, xmm14
	pinsrb	xmm13, byte ptr [r14 + r15 + 25], 3
	pinsrb	xmm13, byte ptr [r14 + rax + 25], 4
	pinsrb	xmm13, byte ptr [r14 + rbx + 25], 5
	pinsrb	xmm13, byte ptr [r14 + r10 + 25], 6
	pinsrb	xmm13, byte ptr [r14 + r9 + 25], 7
	pinsrb	xmm13, byte ptr [r14 + r11 + 25], 8
	pinsrb	xmm13, byte ptr [r14 + rsi + 25], 9
	pinsrb	xmm13, byte ptr [r14 + r12 + 25], 10
	pinsrb	xmm13, byte ptr [r14 + r8 + 25], 11
	pinsrb	xmm13, byte ptr [r14 + rdi + 25], 12
	pinsrb	xmm13, byte ptr [r14 + rdx + 25], 13
	pinsrb	xmm13, byte ptr [r14 + rcx + 25], 14
	pinsrb	xmm13, byte ptr [r14 + r13 + 25], 15
	pinsrb	xmm0, byte ptr [r14 + r15 + 26], 3
	pinsrb	xmm0, byte ptr [r14 + rax + 26], 4
	pinsrb	xmm0, byte ptr [r14 + rbx + 26], 5
	pinsrb	xmm0, byte ptr [r14 + r10 + 26], 6
	pinsrb	xmm0, byte ptr [r14 + r9 + 26], 7
	pinsrb	xmm0, byte ptr [r14 + r11 + 26], 8
	pinsrb	xmm0, byte ptr [r14 + rsi + 26], 9
	pinsrb	xmm0, byte ptr [r14 + r12 + 26], 10
	pinsrb	xmm0, byte ptr [r14 + r8 + 26], 11
	pinsrb	xmm0, byte ptr [r14 + rdi + 26], 12
	pinsrb	xmm0, byte ptr [r14 + rdx + 26], 13
	pinsrb	xmm0, byte ptr [r14 + rcx + 26], 14
	pinsrb	xmm0, byte ptr [r14 + r13 + 26], 15
	pinsrb	xmm11, byte ptr [r14 + r15 + 27], 3
	pinsrb	xmm11, byte ptr [r14 + rax + 27], 4
	pinsrb	xmm11, byte ptr [r14 + rbx + 27], 5
	pinsrb	xmm11, byte ptr [r14 + r10 + 27], 6
	pinsrb	xmm11, byte ptr [r14 + r9 + 27], 7
	pinsrb	xmm11, byte ptr [r14 + r11 + 27], 8
	pinsrb	xmm11, byte ptr [r14 + rsi + 27], 9
	pinsrb	xmm11, byte ptr [r14 + r12 + 27], 10
	pinsrb	xmm11, byte ptr [r14 + r8 + 27], 11
	pinsrb	xmm11, byte ptr [r14 + rdi + 27], 12
	pinsrb	xmm11, byte ptr [r14 + rdx + 27], 13
	pinsrb	xmm11, byte ptr [r14 + rcx + 27], 14
	pcmpeqb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI5_16]
	paddb	xmm13, xmm12
	pinsrb	xmm11, byte ptr [r14 + r13 + 27], 15
	pcmpeqb	xmm0, xmm14
	pandn	xmm0, xmmword ptr [rip + .LCPI5_17]
	pcmpeqb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI5_18]
	por	xmm11, xmm0
	pinsrb	xmm15, byte ptr [r14 + r15 + 28], 3
	pinsrb	xmm9, byte ptr [r14 + r15 + 29], 3
	pinsrb	xmm10, byte ptr [r14 + r15 + 30], 3
	pinsrb	xmm6, byte ptr [r14 + r15 + 31], 3
	pinsrb	xmm15, byte ptr [r14 + rax + 28], 4
	pinsrb	xmm9, byte ptr [r14 + rax + 29], 4
	pinsrb	xmm10, byte ptr [r14 + rax + 30], 4
	pinsrb	xmm6, byte ptr [r14 + rax + 31], 4
	mov	rax, rbx
	pinsrb	xmm15, byte ptr [r14 + rbx + 28], 5
	pinsrb	xmm9, byte ptr [r14 + rbx + 29], 5
	pinsrb	xmm10, byte ptr [r14 + rbx + 30], 5
	pinsrb	xmm6, byte ptr [r14 + rbx + 31], 5
	mov	rax, r10
	pinsrb	xmm15, byte ptr [r14 + r10 + 28], 6
	pinsrb	xmm9, byte ptr [r14 + r10 + 29], 6
	pinsrb	xmm10, byte ptr [r14 + r10 + 30], 6
	pinsrb	xmm6, byte ptr [r14 + r10 + 31], 6
	mov	rax, r9
	pinsrb	xmm15, byte ptr [r14 + r9 + 28], 7
	pinsrb	xmm9, byte ptr [r14 + r9 + 29], 7
	pinsrb	xmm10, byte ptr [r14 + r9 + 30], 7
	pinsrb	xmm6, byte ptr [r14 + r9 + 31], 7
	pinsrb	xmm15, byte ptr [r14 + r11 + 28], 8
	pinsrb	xmm9, byte ptr [r14 + r11 + 29], 8
	pinsrb	xmm10, byte ptr [r14 + r11 + 30], 8
	pinsrb	xmm6, byte ptr [r14 + r11 + 31], 8
	mov	rax, rsi
	pinsrb	xmm15, byte ptr [r14 + rsi + 28], 9
	pinsrb	xmm9, byte ptr [r14 + rsi + 29], 9
	pinsrb	xmm10, byte ptr [r14 + rsi + 30], 9
	pinsrb	xmm6, byte ptr [r14 + rsi + 31], 9
	pinsrb	xmm15, byte ptr [r14 + r12 + 28], 10
	pinsrb	xmm9, byte ptr [r14 + r12 + 29], 10
	pinsrb	xmm10, byte ptr [r14 + r12 + 30], 10
	pinsrb	xmm6, byte ptr [r14 + r12 + 31], 10
	mov	rax, r8
	pinsrb	xmm15, byte ptr [r14 + r8 + 28], 11
	pinsrb	xmm9, byte ptr [r14 + r8 + 29], 11
	pinsrb	xmm10, byte ptr [r14 + r8 + 30], 11
	pinsrb	xmm6, byte ptr [r14 + r8 + 31], 11
	mov	rax, rdi
	pinsrb	xmm15, byte ptr [r14 + rdi + 28], 12
	pinsrb	xmm9, byte ptr [r14 + rdi + 29], 12
	pinsrb	xmm10, byte ptr [r14 + rdi + 30], 12
	pinsrb	xmm6, byte ptr [r14 + rdi + 31], 12
	mov	rax, rdx
	pinsrb	xmm15, byte ptr [r14 + rdx + 28], 13
	pinsrb	xmm9, byte ptr [r14 + rdx + 29], 13
	pinsrb	xmm10, byte ptr [r14 + rdx + 30], 13
	pinsrb	xmm6, byte ptr [r14 + rdx + 31], 13
	mov	rax, rcx
	pinsrb	xmm15, byte ptr [r14 + rcx + 28], 14
	pinsrb	xmm9, byte ptr [r14 + rcx + 29], 14
	pinsrb	xmm10, byte ptr [r14 + rcx + 30], 14
	pinsrb	xmm6, byte ptr [r14 + rcx + 31], 14
	pinsrb	xmm15, byte ptr [r14 + r13 + 28], 15
	pinsrb	xmm9, byte ptr [r14 + r13 + 29], 15
	pinsrb	xmm10, byte ptr [r14 + r13 + 30], 15
	pcmpeqb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI5_19]
	por	xmm15, xmm11
	pinsrb	xmm6, byte ptr [r14 + r13 + 31], 15
	psubb	xmm13, xmmword ptr [rip + .LCPI5_22]
	por	xmm15, xmm13
	pcmpeqb	xmm9, xmm14
	pandn	xmm9, xmm5
	pcmpeqb	xmm10, xmm14
	pandn	xmm10, xmm7
	por	xmm10, xmm9
	pcmpeqb	xmm6, xmm14
	pandn	xmm6, xmm4
	por	xmm6, xmm10
	por	xmm6, xmm15
	movdqa	xmm0, xmm8
	punpcklbw	xmm0, xmm6              # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	movdqa	xmm3, xmmword ptr [rsp + 256]   # 16-byte Reload
	movdqa	xmm1, xmm3
	movdqa	xmm4, xmmword ptr [rsp + 192]   # 16-byte Reload
	punpcklbw	xmm1, xmm4              # xmm1 = xmm1[0],xmm4[0],xmm1[1],xmm4[1],xmm1[2],xmm4[2],xmm1[3],xmm4[3],xmm1[4],xmm4[4],xmm1[5],xmm4[5],xmm1[6],xmm4[6],xmm1[7],xmm4[7]
	movdqa	xmm2, xmm1
	punpcklwd	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
	punpckhwd	xmm1, xmm0              # xmm1 = xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpckhbw	xmm8, xmm6              # xmm8 = xmm8[8],xmm6[8],xmm8[9],xmm6[9],xmm8[10],xmm6[10],xmm8[11],xmm6[11],xmm8[12],xmm6[12],xmm8[13],xmm6[13],xmm8[14],xmm6[14],xmm8[15],xmm6[15]
	punpckhbw	xmm3, xmm4              # xmm3 = xmm3[8],xmm4[8],xmm3[9],xmm4[9],xmm3[10],xmm4[10],xmm3[11],xmm4[11],xmm3[12],xmm4[12],xmm3[13],xmm4[13],xmm3[14],xmm4[14],xmm3[15],xmm4[15]
	movdqa	xmm0, xmm3
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm3, xmm8              # xmm3 = xmm3[4],xmm8[4],xmm3[5],xmm8[5],xmm3[6],xmm8[6],xmm3[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 168]      # 8-byte Reload
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	movdqu	xmmword ptr [rax + 4*rcx + 48], xmm3
	movdqu	xmmword ptr [rax + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [rax + 4*rcx + 16], xmm1
	movdqu	xmmword ptr [rax + 4*rcx], xmm2
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 216]      # 8-byte Folded Reload
	jne	.LBB5_67
# %bb.68:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 216]      # 8-byte Folded Reload
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	jne	.LBB5_69
	jmp	.LBB5_72
.LBB5_109:
	and	r10, -8
	mov	rax, r10
	shl	rax, 6
	add	rax, r14
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	mov	qword ptr [rsp + 24], r10       # 8-byte Spill
	lea	rax, [rax + 4*r10]
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	movd	xmm0, r11d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm11, xmm0, 0                  # xmm11 = xmm0[0,0,0,0]
	xor	edi, edi
	pxor	xmm9, xmm9
	.p2align	4, 0x90
.LBB5_110:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 64], rdi       # 8-byte Spill
	shl	rdi, 6
	mov	r15, rdi
	mov	rsi, rdi
	mov	rdx, rdi
	mov	r13, rdi
	mov	rbx, rdi
	mov	r9, rdi
	movzx	eax, word ptr [r14 + rdi]
	movd	xmm5, eax
	movzx	eax, word ptr [r14 + rdi + 2]
	movd	xmm0, eax
	movzx	eax, word ptr [r14 + rdi + 4]
	movd	xmm1, eax
	movzx	eax, word ptr [r14 + rdi + 6]
	movd	xmm7, eax
	movzx	eax, word ptr [r14 + rdi + 8]
	movd	xmm8, eax
	movzx	eax, word ptr [r14 + rdi + 10]
	movd	xmm4, eax
	movzx	eax, word ptr [r14 + rdi + 12]
	movzx	r8d, word ptr [r14 + rdi + 14]
	movzx	r10d, word ptr [r14 + rdi + 16]
	movzx	r12d, word ptr [r14 + rdi + 18]
	movzx	ecx, word ptr [r14 + rdi + 20]
	mov	dword ptr [rsp + 40], ecx       # 4-byte Spill
	mov	rcx, rdi
	or	rcx, 64
	or	r15, 128
	or	rsi, 192
	or	rdx, 256
	or	r13, 320
	or	rbx, 384
	pinsrw	xmm5, word ptr [r14 + rcx], 1
	pinsrw	xmm5, word ptr [r14 + r15], 2
	pinsrw	xmm5, word ptr [r14 + rsi], 3
	pinsrw	xmm5, word ptr [r14 + rdx], 4
	pinsrw	xmm5, word ptr [r14 + r13], 5
	pinsrw	xmm5, word ptr [r14 + rbx], 6
	pinsrw	xmm0, word ptr [r14 + rcx + 2], 1
	pinsrw	xmm0, word ptr [r14 + r15 + 2], 2
	pinsrw	xmm0, word ptr [r14 + rsi + 2], 3
	pinsrw	xmm0, word ptr [r14 + rdx + 2], 4
	pinsrw	xmm0, word ptr [r14 + r13 + 2], 5
	pinsrw	xmm0, word ptr [r14 + rbx + 2], 6
	or	r9, 448
	pinsrw	xmm0, word ptr [r14 + r9 + 2], 7
	movd	xmm2, eax
	movzx	eax, word ptr [r14 + rdi + 22]
	mov	dword ptr [rsp + 32], eax       # 4-byte Spill
	pcmpeqw	xmm0, xmm11
	pinsrw	xmm1, word ptr [r14 + rcx + 4], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 4], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 4], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 4], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 4], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 4], 6
	pinsrw	xmm1, word ptr [r14 + r9 + 4], 7
	packsswb	xmm0, xmm0
	pcmpeqw	xmm1, xmm11
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_8] # xmm14 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm3, xmm14
	pblendvb	xmm3, xmm9, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm15, xmmword ptr [rip + .LCPI5_9] # xmm15 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm15
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm1, r8d
	movzx	r11d, word ptr [r14 + rdi + 24]
	pinsrw	xmm5, word ptr [r14 + r9], 7
	pcmpeqw	xmm5, xmm11
	pcmpeqd	xmm0, xmm0
	pxor	xmm5, xmm0
	packsswb	xmm5, xmm5
	pinsrw	xmm7, word ptr [r14 + rcx + 6], 1
	pinsrw	xmm7, word ptr [r14 + r15 + 6], 2
	pinsrw	xmm7, word ptr [r14 + rsi + 6], 3
	pinsrw	xmm7, word ptr [r14 + rdx + 6], 4
	pinsrw	xmm7, word ptr [r14 + r13 + 6], 5
	pinsrw	xmm7, word ptr [r14 + rbx + 6], 6
	pinsrw	xmm7, word ptr [r14 + r9 + 6], 7
	pcmpeqw	xmm7, xmm11
	packsswb	xmm7, xmm7
	pinsrw	xmm8, word ptr [r14 + rcx + 8], 1
	pinsrw	xmm8, word ptr [r14 + r15 + 8], 2
	pinsrw	xmm8, word ptr [r14 + rsi + 8], 3
	pinsrw	xmm8, word ptr [r14 + rdx + 8], 4
	pinsrw	xmm8, word ptr [r14 + r13 + 8], 5
	pinsrw	xmm8, word ptr [r14 + rbx + 8], 6
	pinsrw	xmm8, word ptr [r14 + r9 + 8], 7
	psubb	xmm3, xmm5
	movdqa	xmm12, xmmword ptr [rip + .LCPI5_10] # xmm12 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm7
	pblendvb	xmm12, xmm9, xmm0
	movd	xmm7, r10d
	movzx	r8d, word ptr [r14 + rdi + 26]
	pcmpeqw	xmm8, xmm11
	packsswb	xmm8, xmm8
	por	xmm12, xmm6
	movdqa	xmm13, xmmword ptr [rip + .LCPI5_11] # xmm13 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm8
	pblendvb	xmm13, xmm9, xmm0
	movd	xmm6, r12d
	movzx	r12d, word ptr [r14 + rdi + 28]
	pinsrw	xmm4, word ptr [r14 + rcx + 10], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 10], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 10], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 10], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 10], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 10], 6
	pinsrw	xmm4, word ptr [r14 + r9 + 10], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	pinsrw	xmm2, word ptr [r14 + rcx + 12], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 12], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 12], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 12], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 12], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 12], 6
	por	xmm12, xmm3
	movdqa	xmm5, xmmword ptr [rip + .LCPI5_12] # xmm5 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm5, xmm9, xmm0
	movd	xmm4, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm4 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [r14 + rdi + 30]
	pinsrw	xmm2, word ptr [r14 + r9 + 12], 7
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm13
	movdqa	xmm13, xmmword ptr [rip + .LCPI5_13] # xmm13 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm9, xmm0
	movd	xmm3, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	eax, word ptr [r14 + rdi + 32]
	mov	dword ptr [rsp + 32], eax       # 4-byte Spill
	pinsrw	xmm1, word ptr [r14 + rcx + 14], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 14], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 14], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 14], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 14], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 14], 6
	por	xmm13, xmm5
	movd	xmm2, r11d
	movzx	eax, word ptr [r14 + rdi + 34]
	mov	dword ptr [rsp + 40], eax       # 4-byte Spill
	pinsrw	xmm1, word ptr [r14 + r9 + 14], 7
	pcmpeqw	xmm1, xmm11
	pinsrw	xmm6, word ptr [r14 + rcx + 18], 1
	pinsrw	xmm6, word ptr [r14 + r15 + 18], 2
	pinsrw	xmm6, word ptr [r14 + rsi + 18], 3
	pinsrw	xmm6, word ptr [r14 + rdx + 18], 4
	pinsrw	xmm6, word ptr [r14 + r13 + 18], 5
	pinsrw	xmm6, word ptr [r14 + rbx + 18], 6
	packsswb	xmm1, xmm1
	pinsrw	xmm6, word ptr [r14 + r9 + 18], 7
	pcmpeqw	xmm6, xmm11
	packsswb	xmm6, xmm6
	por	xmm13, xmm12
	movdqa	xmm10, xmmword ptr [rip + .LCPI5_14] # xmm10 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm12, xmm10
	movdqa	xmm0, xmm1
	pblendvb	xmm12, xmm9, xmm0
	movdqa	xmm8, xmm14
	movdqa	xmm0, xmm6
	pblendvb	xmm8, xmm9, xmm0
	movd	xmm1, r8d
	movzx	r11d, word ptr [r14 + rdi + 36]
	pinsrw	xmm7, word ptr [r14 + rcx + 16], 1
	pinsrw	xmm7, word ptr [r14 + r15 + 16], 2
	pinsrw	xmm7, word ptr [r14 + rsi + 16], 3
	pinsrw	xmm7, word ptr [r14 + rdx + 16], 4
	pinsrw	xmm7, word ptr [r14 + r13 + 16], 5
	pinsrw	xmm7, word ptr [r14 + rbx + 16], 6
	pinsrw	xmm4, word ptr [r14 + rcx + 20], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 20], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 20], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 20], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 20], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 20], 6
	pinsrw	xmm4, word ptr [r14 + r9 + 20], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm12, xmm13
	movdqa	xmm0, xmm4
	pblendvb	xmm15, xmm9, xmm0
	movd	xmm4, r12d
	movzx	r12d, word ptr [r14 + rdi + 38]
	pinsrw	xmm7, word ptr [r14 + r9 + 16], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI5_22]
	packsswb	xmm7, xmm7
	pinsrw	xmm3, word ptr [r14 + rcx + 22], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 22], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 22], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 22], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 22], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 22], 6
	pinsrw	xmm3, word ptr [r14 + r9 + 22], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [r14 + rcx + 24], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 24], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 24], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 24], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 24], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 24], 6
	pinsrw	xmm2, word ptr [r14 + r9 + 24], 7
	psubb	xmm8, xmm7
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_10] # xmm14 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm3
	pblendvb	xmm14, xmm9, xmm0
	movd	xmm3, r10d
	movzx	r8d, word ptr [r14 + rdi + 40]
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm14, xmm15
	movdqa	xmm13, xmmword ptr [rip + .LCPI5_11] # xmm13 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm9, xmm0
	movd	xmm7, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [r14 + rdi + 42]
	pinsrw	xmm1, word ptr [r14 + rcx + 26], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 26], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 26], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 26], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 26], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 26], 6
	pinsrw	xmm1, word ptr [r14 + r9 + 26], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm4, word ptr [r14 + rcx + 28], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 28], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 28], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 28], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 28], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 28], 6
	por	xmm14, xmm8
	movdqa	xmm15, xmmword ptr [rip + .LCPI5_12] # xmm15 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm5, xmm15
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm9, xmm0
	movd	xmm2, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm2 = mem[0],zero,zero,zero
	movzx	eax, word ptr [r14 + rdi + 44]
	mov	dword ptr [rsp + 32], eax       # 4-byte Spill
	pinsrw	xmm4, word ptr [r14 + r9 + 28], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm5, xmm13
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_13] # xmm6 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm4, r11d
	movzx	r11d, word ptr [r14 + rdi + 46]
	pinsrw	xmm3, word ptr [r14 + rcx + 30], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 30], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 30], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 30], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 30], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 30], 6
	por	xmm6, xmm5
	movd	xmm1, r12d
	movzx	eax, word ptr [r14 + rdi + 48]
	mov	dword ptr [rsp + 40], eax       # 4-byte Spill
	pinsrw	xmm3, word ptr [r14 + r9 + 30], 7
	pcmpeqw	xmm3, xmm11
	pinsrw	xmm2, word ptr [r14 + rcx + 34], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 34], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 34], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 34], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 34], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 34], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [r14 + r9 + 34], 7
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm6, xmm14
	movdqa	xmm13, xmm10
	movdqa	xmm0, xmm3
	pblendvb	xmm13, xmm9, xmm0
	movdqa	xmm8, xmmword ptr [rip + .LCPI5_8] # xmm8 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm8, xmm9, xmm0
	movd	xmm2, r8d
	movzx	r12d, word ptr [r14 + rdi + 50]
	pinsrw	xmm7, word ptr [r14 + rcx + 32], 1
	pinsrw	xmm7, word ptr [r14 + r15 + 32], 2
	pinsrw	xmm7, word ptr [r14 + rsi + 32], 3
	pinsrw	xmm7, word ptr [r14 + rdx + 32], 4
	pinsrw	xmm7, word ptr [r14 + r13 + 32], 5
	pinsrw	xmm7, word ptr [r14 + rbx + 32], 6
	pinsrw	xmm4, word ptr [r14 + rcx + 36], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 36], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 36], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 36], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 36], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 36], 6
	pinsrw	xmm4, word ptr [r14 + r9 + 36], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm13, xmm6
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_9] # xmm6 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm3, r10d
	movzx	r10d, word ptr [r14 + rdi + 52]
	pinsrw	xmm7, word ptr [r14 + r9 + 32], 7
	pcmpeqw	xmm7, xmm11
	pcmpeqd	xmm14, xmm14
	pxor	xmm7, xmm14
	packsswb	xmm7, xmm7
	pinsrw	xmm1, word ptr [r14 + rcx + 38], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 38], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 38], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 38], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 38], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 38], 6
	pinsrw	xmm1, word ptr [r14 + r9 + 38], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm2, word ptr [r14 + rcx + 40], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 40], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 40], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 40], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 40], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 40], 6
	pinsrw	xmm2, word ptr [r14 + r9 + 40], 7
	psubb	xmm8, xmm7
	movdqa	xmm5, xmmword ptr [rip + .LCPI5_10] # xmm5 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm9, xmm0
	movd	xmm1, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r8d, word ptr [r14 + rdi + 54]
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm6
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_11] # xmm6 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm4, r11d
	movzx	eax, word ptr [r14 + rdi + 56]
	pinsrw	xmm3, word ptr [r14 + rcx + 42], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 42], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 42], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 42], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 42], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 42], 6
	pinsrw	xmm3, word ptr [r14 + r9 + 42], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [r14 + rcx + 44], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 44], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 44], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 44], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 44], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 44], 6
	por	xmm5, xmm8
	movdqa	xmm2, xmm15
	movdqa	xmm0, xmm3
	pblendvb	xmm2, xmm9, xmm0
	movd	xmm7, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	r11d, word ptr [r14 + rdi + 58]
	pinsrw	xmm1, word ptr [r14 + r9 + 44], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm2, xmm6
	movdqa	xmm15, xmmword ptr [rip + .LCPI5_13] # xmm15 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm15
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm1, r12d
	movzx	r12d, word ptr [r14 + rdi + 60]
	por	xmm6, xmm2
	movd	xmm2, r10d
	pinsrw	xmm4, word ptr [r14 + rcx + 46], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 46], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 46], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 46], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 46], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 46], 6
	pinsrw	xmm4, word ptr [r14 + r9 + 46], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm6, xmm5
	movdqa	xmm8, xmm10
	movdqa	xmm0, xmm4
	pblendvb	xmm8, xmm9, xmm0
	movd	xmm3, r8d
	pinsrw	xmm1, word ptr [r14 + rcx + 50], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 50], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 50], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 50], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 50], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 50], 6
	pinsrw	xmm1, word ptr [r14 + r9 + 50], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm8, xmm6
	movdqa	xmm4, xmmword ptr [rip + .LCPI5_8] # xmm4 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm9, xmm0
	movd	xmm1, eax
	pinsrw	xmm7, word ptr [r14 + rcx + 48], 1
	pinsrw	xmm7, word ptr [r14 + r15 + 48], 2
	pinsrw	xmm7, word ptr [r14 + rsi + 48], 3
	pinsrw	xmm7, word ptr [r14 + rdx + 48], 4
	pinsrw	xmm7, word ptr [r14 + r13 + 48], 5
	pinsrw	xmm7, word ptr [r14 + rbx + 48], 6
	pinsrw	xmm7, word ptr [r14 + r9 + 48], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmm14
	pinsrw	xmm2, word ptr [r14 + rcx + 52], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 52], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 52], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 52], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 52], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 52], 6
	packsswb	xmm7, xmm7
	pinsrw	xmm2, word ptr [r14 + r9 + 52], 7
	pcmpeqw	xmm2, xmm11
	pinsrw	xmm3, word ptr [r14 + rcx + 54], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 54], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 54], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 54], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 54], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 54], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [r14 + r9 + 54], 7
	pcmpeqw	xmm3, xmm11
	pinsrw	xmm1, word ptr [r14 + rcx + 56], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 56], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 56], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 56], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 56], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 56], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [r14 + r9 + 56], 7
	psubb	xmm4, xmm7
	movdqa	xmm5, xmmword ptr [rip + .LCPI5_9] # xmm5 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm5, xmm9, xmm0
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_10] # xmm6 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm3
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm2, r11d
	pcmpeqw	xmm1, xmm11
	pinsrw	xmm2, word ptr [r14 + rcx + 58], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 58], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 58], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 58], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 58], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 58], 6
	pinsrw	xmm2, word ptr [r14 + r9 + 58], 7
	packsswb	xmm1, xmm1
	pcmpeqw	xmm2, xmm11
	por	xmm6, xmm5
	movd	xmm3, r12d
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	pinsrw	xmm3, word ptr [r14 + rcx + 60], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 60], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 60], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 60], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 60], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 60], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [r14 + r9 + 60], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	por	xmm6, xmm4
	movdqa	xmm4, xmmword ptr [rip + .LCPI5_11] # xmm4 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm9, xmm0
	movdqa	xmm1, xmmword ptr [rip + .LCPI5_12] # xmm1 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm1, xmm9, xmm0
	movdqa	xmm2, xmm15
	movdqa	xmm0, xmm3
	pblendvb	xmm2, xmm9, xmm0
	por	xmm1, xmm4
	movzx	eax, word ptr [r14 + rdi + 62]
	por	xmm2, xmm1
	movd	xmm0, eax
	pinsrw	xmm0, word ptr [r14 + rcx + 62], 1
	pinsrw	xmm0, word ptr [r14 + r15 + 62], 2
	pinsrw	xmm0, word ptr [r14 + rsi + 62], 3
	pinsrw	xmm0, word ptr [r14 + rdx + 62], 4
	pinsrw	xmm0, word ptr [r14 + r13 + 62], 5
	pinsrw	xmm0, word ptr [r14 + rbx + 62], 6
	pinsrw	xmm0, word ptr [r14 + r9 + 62], 7
	pcmpeqw	xmm0, xmm11
	packsswb	xmm0, xmm0
	por	xmm2, xmm6
	pblendvb	xmm10, xmm9, xmm0
	por	xmm10, xmm2
	movdqa	xmm0, xmm12
	punpcklqdq	xmm0, xmm13             # xmm0 = xmm0[0],xmm13[0]
	movdqa	xmm2, xmm8
	punpcklqdq	xmm2, xmm10             # xmm2 = xmm2[0],xmm10[0]
	movdqa	xmm3, xmmword ptr [rip + .LCPI5_15] # xmm3 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm2, xmm3
	pshufb	xmm0, xmm3
	punpcklwd	xmm0, xmm2              # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	punpcklbw	xmm8, xmm10             # xmm8 = xmm8[0],xmm10[0],xmm8[1],xmm10[1],xmm8[2],xmm10[2],xmm8[3],xmm10[3],xmm8[4],xmm10[4],xmm8[5],xmm10[5],xmm8[6],xmm10[6],xmm8[7],xmm10[7]
	punpcklbw	xmm12, xmm13            # xmm12 = xmm12[0],xmm13[0],xmm12[1],xmm13[1],xmm12[2],xmm13[2],xmm12[3],xmm13[3],xmm12[4],xmm13[4],xmm12[5],xmm13[5],xmm12[6],xmm13[6],xmm12[7],xmm13[7]
	punpcklwd	xmm12, xmm8             # xmm12 = xmm12[0],xmm8[0],xmm12[1],xmm8[1],xmm12[2],xmm8[2],xmm12[3],xmm8[3]
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	movdqu	xmmword ptr [r8 + 4*rcx], xmm12
	mov	qword ptr [rsp + 8], r8         # 8-byte Spill
	movdqu	xmmword ptr [r8 + 4*rcx + 16], xmm0
	add	rcx, 8
	mov	rdi, rcx
	cmp	rcx, qword ptr [rsp + 24]       # 8-byte Folded Reload
	jne	.LBB5_110
# %bb.111:
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r11d, dword ptr [rsp + 16]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	jne	.LBB5_112
	jmp	.LBB5_115
.LBB5_132:
	and	r10, -8
	mov	rax, r10
	shl	rax, 6
	add	rax, r14
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	mov	qword ptr [rsp + 24], r10       # 8-byte Spill
	lea	rax, [rax + 4*r10]
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	movd	xmm0, r11d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm11, xmm0, 0                  # xmm11 = xmm0[0,0,0,0]
	xor	edi, edi
	pxor	xmm9, xmm9
	.p2align	4, 0x90
.LBB5_133:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 64], rdi       # 8-byte Spill
	shl	rdi, 6
	mov	r15, rdi
	mov	rsi, rdi
	mov	rdx, rdi
	mov	r13, rdi
	mov	rbx, rdi
	mov	r9, rdi
	movzx	eax, word ptr [r14 + rdi]
	movd	xmm5, eax
	movzx	eax, word ptr [r14 + rdi + 2]
	movd	xmm0, eax
	movzx	eax, word ptr [r14 + rdi + 4]
	movd	xmm1, eax
	movzx	eax, word ptr [r14 + rdi + 6]
	movd	xmm7, eax
	movzx	eax, word ptr [r14 + rdi + 8]
	movd	xmm8, eax
	movzx	eax, word ptr [r14 + rdi + 10]
	movd	xmm4, eax
	movzx	eax, word ptr [r14 + rdi + 12]
	movzx	r8d, word ptr [r14 + rdi + 14]
	movzx	r10d, word ptr [r14 + rdi + 16]
	movzx	r12d, word ptr [r14 + rdi + 18]
	movzx	ecx, word ptr [r14 + rdi + 20]
	mov	dword ptr [rsp + 40], ecx       # 4-byte Spill
	mov	rcx, rdi
	or	rcx, 64
	or	r15, 128
	or	rsi, 192
	or	rdx, 256
	or	r13, 320
	or	rbx, 384
	pinsrw	xmm5, word ptr [r14 + rcx], 1
	pinsrw	xmm5, word ptr [r14 + r15], 2
	pinsrw	xmm5, word ptr [r14 + rsi], 3
	pinsrw	xmm5, word ptr [r14 + rdx], 4
	pinsrw	xmm5, word ptr [r14 + r13], 5
	pinsrw	xmm5, word ptr [r14 + rbx], 6
	pinsrw	xmm0, word ptr [r14 + rcx + 2], 1
	pinsrw	xmm0, word ptr [r14 + r15 + 2], 2
	pinsrw	xmm0, word ptr [r14 + rsi + 2], 3
	pinsrw	xmm0, word ptr [r14 + rdx + 2], 4
	pinsrw	xmm0, word ptr [r14 + r13 + 2], 5
	pinsrw	xmm0, word ptr [r14 + rbx + 2], 6
	or	r9, 448
	pinsrw	xmm0, word ptr [r14 + r9 + 2], 7
	movd	xmm2, eax
	movzx	eax, word ptr [r14 + rdi + 22]
	mov	dword ptr [rsp + 32], eax       # 4-byte Spill
	pcmpeqw	xmm0, xmm11
	pinsrw	xmm1, word ptr [r14 + rcx + 4], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 4], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 4], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 4], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 4], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 4], 6
	pinsrw	xmm1, word ptr [r14 + r9 + 4], 7
	packsswb	xmm0, xmm0
	pcmpeqw	xmm1, xmm11
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_8] # xmm14 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm3, xmm14
	pblendvb	xmm3, xmm9, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm15, xmmword ptr [rip + .LCPI5_9] # xmm15 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm15
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm1, r8d
	movzx	r11d, word ptr [r14 + rdi + 24]
	pinsrw	xmm5, word ptr [r14 + r9], 7
	pcmpeqw	xmm5, xmm11
	pcmpeqd	xmm0, xmm0
	pxor	xmm5, xmm0
	packsswb	xmm5, xmm5
	pinsrw	xmm7, word ptr [r14 + rcx + 6], 1
	pinsrw	xmm7, word ptr [r14 + r15 + 6], 2
	pinsrw	xmm7, word ptr [r14 + rsi + 6], 3
	pinsrw	xmm7, word ptr [r14 + rdx + 6], 4
	pinsrw	xmm7, word ptr [r14 + r13 + 6], 5
	pinsrw	xmm7, word ptr [r14 + rbx + 6], 6
	pinsrw	xmm7, word ptr [r14 + r9 + 6], 7
	pcmpeqw	xmm7, xmm11
	packsswb	xmm7, xmm7
	pinsrw	xmm8, word ptr [r14 + rcx + 8], 1
	pinsrw	xmm8, word ptr [r14 + r15 + 8], 2
	pinsrw	xmm8, word ptr [r14 + rsi + 8], 3
	pinsrw	xmm8, word ptr [r14 + rdx + 8], 4
	pinsrw	xmm8, word ptr [r14 + r13 + 8], 5
	pinsrw	xmm8, word ptr [r14 + rbx + 8], 6
	pinsrw	xmm8, word ptr [r14 + r9 + 8], 7
	psubb	xmm3, xmm5
	movdqa	xmm12, xmmword ptr [rip + .LCPI5_10] # xmm12 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm7
	pblendvb	xmm12, xmm9, xmm0
	movd	xmm7, r10d
	movzx	r8d, word ptr [r14 + rdi + 26]
	pcmpeqw	xmm8, xmm11
	packsswb	xmm8, xmm8
	por	xmm12, xmm6
	movdqa	xmm13, xmmword ptr [rip + .LCPI5_11] # xmm13 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm8
	pblendvb	xmm13, xmm9, xmm0
	movd	xmm6, r12d
	movzx	r12d, word ptr [r14 + rdi + 28]
	pinsrw	xmm4, word ptr [r14 + rcx + 10], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 10], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 10], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 10], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 10], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 10], 6
	pinsrw	xmm4, word ptr [r14 + r9 + 10], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	pinsrw	xmm2, word ptr [r14 + rcx + 12], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 12], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 12], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 12], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 12], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 12], 6
	por	xmm12, xmm3
	movdqa	xmm5, xmmword ptr [rip + .LCPI5_12] # xmm5 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm5, xmm9, xmm0
	movd	xmm4, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm4 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [r14 + rdi + 30]
	pinsrw	xmm2, word ptr [r14 + r9 + 12], 7
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm13
	movdqa	xmm13, xmmword ptr [rip + .LCPI5_13] # xmm13 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm9, xmm0
	movd	xmm3, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	eax, word ptr [r14 + rdi + 32]
	mov	dword ptr [rsp + 32], eax       # 4-byte Spill
	pinsrw	xmm1, word ptr [r14 + rcx + 14], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 14], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 14], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 14], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 14], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 14], 6
	por	xmm13, xmm5
	movd	xmm2, r11d
	movzx	eax, word ptr [r14 + rdi + 34]
	mov	dword ptr [rsp + 40], eax       # 4-byte Spill
	pinsrw	xmm1, word ptr [r14 + r9 + 14], 7
	pcmpeqw	xmm1, xmm11
	pinsrw	xmm6, word ptr [r14 + rcx + 18], 1
	pinsrw	xmm6, word ptr [r14 + r15 + 18], 2
	pinsrw	xmm6, word ptr [r14 + rsi + 18], 3
	pinsrw	xmm6, word ptr [r14 + rdx + 18], 4
	pinsrw	xmm6, word ptr [r14 + r13 + 18], 5
	pinsrw	xmm6, word ptr [r14 + rbx + 18], 6
	packsswb	xmm1, xmm1
	pinsrw	xmm6, word ptr [r14 + r9 + 18], 7
	pcmpeqw	xmm6, xmm11
	packsswb	xmm6, xmm6
	por	xmm13, xmm12
	movdqa	xmm10, xmmword ptr [rip + .LCPI5_14] # xmm10 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm12, xmm10
	movdqa	xmm0, xmm1
	pblendvb	xmm12, xmm9, xmm0
	movdqa	xmm8, xmm14
	movdqa	xmm0, xmm6
	pblendvb	xmm8, xmm9, xmm0
	movd	xmm1, r8d
	movzx	r11d, word ptr [r14 + rdi + 36]
	pinsrw	xmm7, word ptr [r14 + rcx + 16], 1
	pinsrw	xmm7, word ptr [r14 + r15 + 16], 2
	pinsrw	xmm7, word ptr [r14 + rsi + 16], 3
	pinsrw	xmm7, word ptr [r14 + rdx + 16], 4
	pinsrw	xmm7, word ptr [r14 + r13 + 16], 5
	pinsrw	xmm7, word ptr [r14 + rbx + 16], 6
	pinsrw	xmm4, word ptr [r14 + rcx + 20], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 20], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 20], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 20], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 20], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 20], 6
	pinsrw	xmm4, word ptr [r14 + r9 + 20], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm12, xmm13
	movdqa	xmm0, xmm4
	pblendvb	xmm15, xmm9, xmm0
	movd	xmm4, r12d
	movzx	r12d, word ptr [r14 + rdi + 38]
	pinsrw	xmm7, word ptr [r14 + r9 + 16], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI5_22]
	packsswb	xmm7, xmm7
	pinsrw	xmm3, word ptr [r14 + rcx + 22], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 22], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 22], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 22], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 22], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 22], 6
	pinsrw	xmm3, word ptr [r14 + r9 + 22], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [r14 + rcx + 24], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 24], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 24], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 24], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 24], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 24], 6
	pinsrw	xmm2, word ptr [r14 + r9 + 24], 7
	psubb	xmm8, xmm7
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_10] # xmm14 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm3
	pblendvb	xmm14, xmm9, xmm0
	movd	xmm3, r10d
	movzx	r8d, word ptr [r14 + rdi + 40]
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm14, xmm15
	movdqa	xmm13, xmmword ptr [rip + .LCPI5_11] # xmm13 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm9, xmm0
	movd	xmm7, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [r14 + rdi + 42]
	pinsrw	xmm1, word ptr [r14 + rcx + 26], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 26], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 26], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 26], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 26], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 26], 6
	pinsrw	xmm1, word ptr [r14 + r9 + 26], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm4, word ptr [r14 + rcx + 28], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 28], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 28], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 28], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 28], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 28], 6
	por	xmm14, xmm8
	movdqa	xmm15, xmmword ptr [rip + .LCPI5_12] # xmm15 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm5, xmm15
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm9, xmm0
	movd	xmm2, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm2 = mem[0],zero,zero,zero
	movzx	eax, word ptr [r14 + rdi + 44]
	mov	dword ptr [rsp + 32], eax       # 4-byte Spill
	pinsrw	xmm4, word ptr [r14 + r9 + 28], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm5, xmm13
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_13] # xmm6 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm4, r11d
	movzx	r11d, word ptr [r14 + rdi + 46]
	pinsrw	xmm3, word ptr [r14 + rcx + 30], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 30], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 30], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 30], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 30], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 30], 6
	por	xmm6, xmm5
	movd	xmm1, r12d
	movzx	eax, word ptr [r14 + rdi + 48]
	mov	dword ptr [rsp + 40], eax       # 4-byte Spill
	pinsrw	xmm3, word ptr [r14 + r9 + 30], 7
	pcmpeqw	xmm3, xmm11
	pinsrw	xmm2, word ptr [r14 + rcx + 34], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 34], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 34], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 34], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 34], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 34], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [r14 + r9 + 34], 7
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm6, xmm14
	movdqa	xmm13, xmm10
	movdqa	xmm0, xmm3
	pblendvb	xmm13, xmm9, xmm0
	movdqa	xmm8, xmmword ptr [rip + .LCPI5_8] # xmm8 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm8, xmm9, xmm0
	movd	xmm2, r8d
	movzx	r12d, word ptr [r14 + rdi + 50]
	pinsrw	xmm7, word ptr [r14 + rcx + 32], 1
	pinsrw	xmm7, word ptr [r14 + r15 + 32], 2
	pinsrw	xmm7, word ptr [r14 + rsi + 32], 3
	pinsrw	xmm7, word ptr [r14 + rdx + 32], 4
	pinsrw	xmm7, word ptr [r14 + r13 + 32], 5
	pinsrw	xmm7, word ptr [r14 + rbx + 32], 6
	pinsrw	xmm4, word ptr [r14 + rcx + 36], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 36], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 36], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 36], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 36], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 36], 6
	pinsrw	xmm4, word ptr [r14 + r9 + 36], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm13, xmm6
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_9] # xmm6 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm3, r10d
	movzx	r10d, word ptr [r14 + rdi + 52]
	pinsrw	xmm7, word ptr [r14 + r9 + 32], 7
	pcmpeqw	xmm7, xmm11
	pcmpeqd	xmm14, xmm14
	pxor	xmm7, xmm14
	packsswb	xmm7, xmm7
	pinsrw	xmm1, word ptr [r14 + rcx + 38], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 38], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 38], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 38], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 38], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 38], 6
	pinsrw	xmm1, word ptr [r14 + r9 + 38], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm2, word ptr [r14 + rcx + 40], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 40], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 40], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 40], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 40], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 40], 6
	pinsrw	xmm2, word ptr [r14 + r9 + 40], 7
	psubb	xmm8, xmm7
	movdqa	xmm5, xmmword ptr [rip + .LCPI5_10] # xmm5 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm9, xmm0
	movd	xmm1, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r8d, word ptr [r14 + rdi + 54]
	pcmpeqw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm6
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_11] # xmm6 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm4, r11d
	movzx	eax, word ptr [r14 + rdi + 56]
	pinsrw	xmm3, word ptr [r14 + rcx + 42], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 42], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 42], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 42], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 42], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 42], 6
	pinsrw	xmm3, word ptr [r14 + r9 + 42], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [r14 + rcx + 44], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 44], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 44], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 44], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 44], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 44], 6
	por	xmm5, xmm8
	movdqa	xmm2, xmm15
	movdqa	xmm0, xmm3
	pblendvb	xmm2, xmm9, xmm0
	movd	xmm7, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	r11d, word ptr [r14 + rdi + 58]
	pinsrw	xmm1, word ptr [r14 + r9 + 44], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm2, xmm6
	movdqa	xmm15, xmmword ptr [rip + .LCPI5_13] # xmm15 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm15
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm1, r12d
	movzx	r12d, word ptr [r14 + rdi + 60]
	por	xmm6, xmm2
	movd	xmm2, r10d
	pinsrw	xmm4, word ptr [r14 + rcx + 46], 1
	pinsrw	xmm4, word ptr [r14 + r15 + 46], 2
	pinsrw	xmm4, word ptr [r14 + rsi + 46], 3
	pinsrw	xmm4, word ptr [r14 + rdx + 46], 4
	pinsrw	xmm4, word ptr [r14 + r13 + 46], 5
	pinsrw	xmm4, word ptr [r14 + rbx + 46], 6
	pinsrw	xmm4, word ptr [r14 + r9 + 46], 7
	pcmpeqw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm6, xmm5
	movdqa	xmm8, xmm10
	movdqa	xmm0, xmm4
	pblendvb	xmm8, xmm9, xmm0
	movd	xmm3, r8d
	pinsrw	xmm1, word ptr [r14 + rcx + 50], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 50], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 50], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 50], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 50], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 50], 6
	pinsrw	xmm1, word ptr [r14 + r9 + 50], 7
	pcmpeqw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm8, xmm6
	movdqa	xmm4, xmmword ptr [rip + .LCPI5_8] # xmm4 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm9, xmm0
	movd	xmm1, eax
	pinsrw	xmm7, word ptr [r14 + rcx + 48], 1
	pinsrw	xmm7, word ptr [r14 + r15 + 48], 2
	pinsrw	xmm7, word ptr [r14 + rsi + 48], 3
	pinsrw	xmm7, word ptr [r14 + rdx + 48], 4
	pinsrw	xmm7, word ptr [r14 + r13 + 48], 5
	pinsrw	xmm7, word ptr [r14 + rbx + 48], 6
	pinsrw	xmm7, word ptr [r14 + r9 + 48], 7
	pcmpeqw	xmm7, xmm11
	pxor	xmm7, xmm14
	pinsrw	xmm2, word ptr [r14 + rcx + 52], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 52], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 52], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 52], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 52], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 52], 6
	packsswb	xmm7, xmm7
	pinsrw	xmm2, word ptr [r14 + r9 + 52], 7
	pcmpeqw	xmm2, xmm11
	pinsrw	xmm3, word ptr [r14 + rcx + 54], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 54], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 54], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 54], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 54], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 54], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [r14 + r9 + 54], 7
	pcmpeqw	xmm3, xmm11
	pinsrw	xmm1, word ptr [r14 + rcx + 56], 1
	pinsrw	xmm1, word ptr [r14 + r15 + 56], 2
	pinsrw	xmm1, word ptr [r14 + rsi + 56], 3
	pinsrw	xmm1, word ptr [r14 + rdx + 56], 4
	pinsrw	xmm1, word ptr [r14 + r13 + 56], 5
	pinsrw	xmm1, word ptr [r14 + rbx + 56], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [r14 + r9 + 56], 7
	psubb	xmm4, xmm7
	movdqa	xmm5, xmmword ptr [rip + .LCPI5_9] # xmm5 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm5, xmm9, xmm0
	movdqa	xmm6, xmmword ptr [rip + .LCPI5_10] # xmm6 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm3
	pblendvb	xmm6, xmm9, xmm0
	movd	xmm2, r11d
	pcmpeqw	xmm1, xmm11
	pinsrw	xmm2, word ptr [r14 + rcx + 58], 1
	pinsrw	xmm2, word ptr [r14 + r15 + 58], 2
	pinsrw	xmm2, word ptr [r14 + rsi + 58], 3
	pinsrw	xmm2, word ptr [r14 + rdx + 58], 4
	pinsrw	xmm2, word ptr [r14 + r13 + 58], 5
	pinsrw	xmm2, word ptr [r14 + rbx + 58], 6
	pinsrw	xmm2, word ptr [r14 + r9 + 58], 7
	packsswb	xmm1, xmm1
	pcmpeqw	xmm2, xmm11
	por	xmm6, xmm5
	movd	xmm3, r12d
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	pinsrw	xmm3, word ptr [r14 + rcx + 60], 1
	pinsrw	xmm3, word ptr [r14 + r15 + 60], 2
	pinsrw	xmm3, word ptr [r14 + rsi + 60], 3
	pinsrw	xmm3, word ptr [r14 + rdx + 60], 4
	pinsrw	xmm3, word ptr [r14 + r13 + 60], 5
	pinsrw	xmm3, word ptr [r14 + rbx + 60], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [r14 + r9 + 60], 7
	pcmpeqw	xmm3, xmm11
	packsswb	xmm3, xmm3
	por	xmm6, xmm4
	movdqa	xmm4, xmmword ptr [rip + .LCPI5_11] # xmm4 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm9, xmm0
	movdqa	xmm1, xmmword ptr [rip + .LCPI5_12] # xmm1 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm1, xmm9, xmm0
	movdqa	xmm2, xmm15
	movdqa	xmm0, xmm3
	pblendvb	xmm2, xmm9, xmm0
	por	xmm1, xmm4
	movzx	eax, word ptr [r14 + rdi + 62]
	por	xmm2, xmm1
	movd	xmm0, eax
	pinsrw	xmm0, word ptr [r14 + rcx + 62], 1
	pinsrw	xmm0, word ptr [r14 + r15 + 62], 2
	pinsrw	xmm0, word ptr [r14 + rsi + 62], 3
	pinsrw	xmm0, word ptr [r14 + rdx + 62], 4
	pinsrw	xmm0, word ptr [r14 + r13 + 62], 5
	pinsrw	xmm0, word ptr [r14 + rbx + 62], 6
	pinsrw	xmm0, word ptr [r14 + r9 + 62], 7
	pcmpeqw	xmm0, xmm11
	packsswb	xmm0, xmm0
	por	xmm2, xmm6
	pblendvb	xmm10, xmm9, xmm0
	por	xmm10, xmm2
	movdqa	xmm0, xmm12
	punpcklqdq	xmm0, xmm13             # xmm0 = xmm0[0],xmm13[0]
	movdqa	xmm2, xmm8
	punpcklqdq	xmm2, xmm10             # xmm2 = xmm2[0],xmm10[0]
	movdqa	xmm3, xmmword ptr [rip + .LCPI5_15] # xmm3 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm2, xmm3
	pshufb	xmm0, xmm3
	punpcklwd	xmm0, xmm2              # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	punpcklbw	xmm8, xmm10             # xmm8 = xmm8[0],xmm10[0],xmm8[1],xmm10[1],xmm8[2],xmm10[2],xmm8[3],xmm10[3],xmm8[4],xmm10[4],xmm8[5],xmm10[5],xmm8[6],xmm10[6],xmm8[7],xmm10[7]
	punpcklbw	xmm12, xmm13            # xmm12 = xmm12[0],xmm13[0],xmm12[1],xmm13[1],xmm12[2],xmm13[2],xmm12[3],xmm13[3],xmm12[4],xmm13[4],xmm12[5],xmm13[5],xmm12[6],xmm13[6],xmm12[7],xmm13[7]
	punpcklwd	xmm12, xmm8             # xmm12 = xmm12[0],xmm8[0],xmm12[1],xmm8[1],xmm12[2],xmm8[2],xmm12[3],xmm8[3]
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	movdqu	xmmword ptr [r8 + 4*rcx], xmm12
	mov	qword ptr [rsp + 8], r8         # 8-byte Spill
	movdqu	xmmword ptr [r8 + 4*rcx + 16], xmm0
	add	rcx, 8
	mov	rdi, rcx
	cmp	rcx, qword ptr [rsp + 24]       # 8-byte Folded Reload
	jne	.LBB5_133
# %bb.134:
	mov	r10, qword ptr [rsp + 224]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	r15, qword ptr [rsp + 160]      # 8-byte Reload
	mov	r11d, dword ptr [rsp + 16]      # 4-byte Reload
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	jne	.LBB5_135
	jmp	.LBB5_138
.LBB5_180:
	mov	r8, r10
	and	r8, -4
	mov	rbx, r8
	shl	rbx, 7
	add	rbx, r14
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	lea	r11, [rax + 4*r8]
	movaps	xmm1, xmm0
	shufps	xmm1, xmm0, 0                   # xmm1 = xmm1[0,0],xmm0[0,0]
	add	r14, 508
	xor	ecx, ecx
	movdqa	xmm15, xmmword ptr [rip + .LCPI5_0] # xmm15 = <1,1,1,1,u,u,u,u,u,u,u,u,u,u,u,u>
	movdqa	xmm8, xmmword ptr [rip + .LCPI5_1] # xmm8 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI5_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI5_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI5_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI5_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI5_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	movdqa	xmm9, xmmword ptr [rip + .LCPI5_7] # xmm9 = [0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	.p2align	4, 0x90
.LBB5_181:                              # =>This Inner Loop Header: Depth=1
	movss	xmm6, dword ptr [r14 - 508]     # xmm6 = mem[0],zero,zero,zero
	movss	xmm7, dword ptr [r14 - 504]     # xmm7 = mem[0],zero,zero,zero
	movss	xmm5, dword ptr [r14 - 500]     # xmm5 = mem[0],zero,zero,zero
	movss	xmm4, dword ptr [r14 - 496]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [r14 - 380], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [r14 - 252], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [r14 - 124], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	insertps	xmm7, dword ptr [r14 - 376], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [r14 - 248], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [r14 - 120], 48 # xmm7 = xmm7[0,1,2],mem[0]
	insertps	xmm5, dword ptr [r14 - 372], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [r14 - 244], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [r14 - 116], 48 # xmm5 = xmm5[0,1,2],mem[0]
	insertps	xmm4, dword ptr [r14 - 368], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [r14 - 240], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [r14 - 112], 48 # xmm4 = xmm4[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	movdqa	xmm2, xmm7
	pand	xmm2, xmm15
	psubb	xmm2, xmm7
	movss	xmm7, dword ptr [r14 - 492]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [r14 - 364], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [r14 - 236], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [r14 - 108], 48 # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm2, xmm6
	movss	xmm6, dword ptr [r14 - 488]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [r14 - 360], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [r14 - 232], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [r14 - 104], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm8
	por	xmm5, xmm2
	movss	xmm3, dword ptr [r14 - 484]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [r14 - 356], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [r14 - 228], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [r14 - 100], 48 # xmm3 = xmm3[0,1,2],mem[0]
	cmpneqps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 3
	pand	xmm4, xmm10
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 4
	pand	xmm7, xmm11
	por	xmm7, xmm4
	movss	xmm4, dword ptr [r14 - 480]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm4, dword ptr [r14 - 352], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [r14 - 224], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [r14 - 96], 48  # xmm4 = xmm4[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm5, dword ptr [r14 - 476]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [r14 - 348], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [r14 - 220], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [r14 - 92], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 6
	pand	xmm3, xmm13
	por	xmm3, xmm6
	movss	xmm2, dword ptr [r14 - 472]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [r14 - 344], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [r14 - 216], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [r14 - 88], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packsswb	xmm5, xmm5
	cmpneqps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm3
	movss	xmm3, dword ptr [r14 - 468]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [r14 - 340], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [r14 - 212], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm5, xmm15
	insertps	xmm3, dword ptr [r14 - 84], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm4, xmm7
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm7, dword ptr [r14 - 464]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [r14 - 336], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [r14 - 208], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [r14 - 80], 48  # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm5
	movss	xmm5, dword ptr [r14 - 460]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [r14 - 332], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [r14 - 204], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [r14 - 76], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [r14 - 456]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [r14 - 328], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [r14 - 200], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [r14 - 72], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 3
	pand	xmm7, xmm10
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm7
	movss	xmm2, dword ptr [r14 - 452]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [r14 - 324], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [r14 - 196], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [r14 - 68], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm3
	movss	xmm7, dword ptr [r14 - 448]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [r14 - 320], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [r14 - 192], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [r14 - 64], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm6
	movss	xmm6, dword ptr [r14 - 444]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [r14 - 316], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [r14 - 188], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [r14 - 60], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	psllw	xmm7, 7
	pand	xmm7, xmm14
	por	xmm7, xmm2
	movss	xmm2, dword ptr [r14 - 440]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [r14 - 312], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [r14 - 184], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [r14 - 56], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm3, dword ptr [r14 - 436]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [r14 - 308], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [r14 - 180], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm6, xmm15
	insertps	xmm3, dword ptr [r14 - 52], 48  # xmm3 = xmm3[0,1,2],mem[0]
	punpckldq	xmm4, xmm7              # xmm4 = xmm4[0],xmm7[0],xmm4[1],xmm7[1]
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm7, xmm2
	pand	xmm7, xmm15
	psubb	xmm7, xmm2
	movss	xmm5, dword ptr [r14 - 432]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [r14 - 304], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [r14 - 176], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [r14 - 48], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm7, xmm6
	movss	xmm6, dword ptr [r14 - 428]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [r14 - 300], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [r14 - 172], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [r14 - 44], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm7
	movss	xmm7, dword ptr [r14 - 424]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [r14 - 296], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [r14 - 168], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [r14 - 40], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm5
	movss	xmm2, dword ptr [r14 - 420]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [r14 - 292], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [r14 - 164], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [r14 - 36], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm5, dword ptr [r14 - 416]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [r14 - 288], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [r14 - 160], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [r14 - 32], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm7, dword ptr [r14 - 412]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [r14 - 284], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [r14 - 156], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [r14 - 28], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	cmpneqps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	psllw	xmm5, 7
	pand	xmm5, xmm14
	por	xmm5, xmm2
	movss	xmm2, dword ptr [r14 - 408]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [r14 - 280], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [r14 - 152], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	pand	xmm7, xmm15
	insertps	xmm2, dword ptr [r14 - 24], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm6
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm3, dword ptr [r14 - 404]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [r14 - 276], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [r14 - 148], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [r14 - 20], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm6, xmm7
	movss	xmm2, dword ptr [r14 - 400]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [r14 - 272], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [r14 - 144], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [r14 - 16], 48  # xmm2 = xmm2[0,1,2],mem[0]
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [r14 - 396]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [r14 - 268], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [r14 - 140], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [r14 - 12], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	cmpneqps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm2
	movss	xmm7, dword ptr [r14 - 392]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [r14 - 264], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [r14 - 136], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [r14 - 8], 48   # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm2, dword ptr [r14 - 388]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [r14 - 260], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [r14 - 132], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [r14 - 4], 48   # xmm2 = xmm2[0,1,2],mem[0]
	cmpneqps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpneqps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm3, dword ptr [r14 - 384]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [r14 - 256], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [r14 - 128], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [r14], 48       # xmm3 = xmm3[0,1,2],mem[0]
	cmpneqps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm2
	por	xmm3, xmm6
	punpckldq	xmm5, xmm3              # xmm5 = xmm5[0],xmm3[0],xmm5[1],xmm3[1]
	punpcklbw	xmm4, xmm5              # xmm4 = xmm4[0],xmm5[0],xmm4[1],xmm5[1],xmm4[2],xmm5[2],xmm4[3],xmm5[3],xmm4[4],xmm5[4],xmm4[5],xmm5[5],xmm4[6],xmm5[6],xmm4[7],xmm5[7]
	pshufb	xmm4, xmm9
	movdqu	xmmword ptr [rax + 4*rcx], xmm4
	add	rcx, 4
	add	r14, 512
	cmp	r8, rcx
	jne	.LBB5_181
# %bb.182:
	cmp	r10, r8
	jne	.LBB5_183
	jmp	.LBB5_186
.Lfunc_end5:
	.size	comparison_not_equal_scalar_arr_sse4, .Lfunc_end5-comparison_not_equal_scalar_arr_sse4
                                        # -- End function
	.globl	comparison_greater_arr_arr_sse4 # -- Begin function comparison_greater_arr_arr_sse4
	.p2align	4, 0x90
	.type	comparison_greater_arr_arr_sse4,@function
comparison_greater_arr_arr_sse4:        # @comparison_greater_arr_arr_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -8
	sub	rsp, 72
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB6_29
# %bb.1:
	cmp	edi, 3
	jle	.LBB6_2
# %bb.15:
	cmp	edi, 4
	je	.LBB6_68
# %bb.16:
	cmp	edi, 5
	je	.LBB6_79
# %bb.17:
	cmp	edi, 6
	jne	.LBB6_123
# %bb.18:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_22
# %bb.19:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_20:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rdx]
	add	rdx, 4
	cmp	ecx, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	sbb	r10d, r10d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_20
# %bb.21:
	add	r14, 1
.LBB6_22:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_26
# %bb.23:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_24:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	mov	eax, dword ptr [rsi + 8]
	seta	r13b
	cmp	eax, dword ptr [rdx + 8]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	mov	eax, dword ptr [rsi + 16]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 16]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	mov	eax, dword ptr [rsi + 24]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 24]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	mov	eax, dword ptr [rsi + 32]
	seta	r15b
	cmp	eax, dword ptr [rdx + 32]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	mov	eax, dword ptr [rsi + 40]
	seta	r8b
	cmp	eax, dword ptr [rdx + 40]
	seta	bl
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	mov	eax, dword ptr [rsi + 48]
	seta	r9b
	cmp	eax, dword ptr [rdx + 48]
	seta	r12b
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	mov	eax, dword ptr [rsi + 56]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 56]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	mov	r11d, dword ptr [rsi + 64]
	seta	r10b
	mov	ecx, dword ptr [rsi + 68]
	mov	eax, dword ptr [rsi + 72]
	cmp	r11d, dword ptr [rdx + 64]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	seta	r14b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 76]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 76]
	mov	eax, dword ptr [rsi + 80]
	mov	ecx, dword ptr [rsi + 84]
	seta	r11b
	cmp	eax, dword ptr [rdx + 80]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 92]
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	seta	dil
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 104]
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 116]
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	seta	al
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 40]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r13b
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 21]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, cl
	shl	bl, 2
	or	bl, r8b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, bl
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r12b, 4
	or	r12b, r9b
	movzx	ebx, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	bl, 5
	or	bl, r12b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	r10b, 7
	or	r10b, r8b
	or	r15b, cl
	or	r10b, bl
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	shl	r11b, 3
	or	r11b, cl
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r11b
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	mov	byte ptr [r14], r15b
	movzx	r8d, byte ptr [rsp + 13]        # 1-byte Folded Reload
	shl	r8b, 6
	shl	dil, 7
	or	dil, r8b
	mov	byte ptr [r14 + 1], r10b
	or	dil, cl
	movzx	ecx, byte ptr [rsp + 14]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 19]         # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, cl
	movzx	ecx, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r14 + 2], dil
	mov	byte ptr [r14 + 3], al
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_24
# %bb.25:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_26:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.27:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_28:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rdx + 4*rcx]
	cmp	edi, dword ptr [rsi + 4*rcx]
	sbb	edi, edi
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_28
	jmp	.LBB6_123
.LBB6_29:
	cmp	edi, 8
	jle	.LBB6_30
# %bb.43:
	cmp	edi, 9
	je	.LBB6_101
# %bb.44:
	cmp	edi, 11
	je	.LBB6_112
# %bb.45:
	cmp	edi, 12
	jne	.LBB6_123
# %bb.46:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_50
# %bb.47:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_48:                               # =>This Inner Loop Header: Depth=1
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	add	rsi, 8
	ucomisd	xmm0, qword ptr [rdx]
	seta	r10b
	add	rdx, 8
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_48
# %bb.49:
	add	r14, 1
.LBB6_50:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_54
# %bb.51:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_52:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 8]       # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 8]
	seta	cl
	movsd	xmm0, qword ptr [rsi + 16]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 16]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 24]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 24]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 32]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 32]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 40]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 40]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 48]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 48]
	seta	al
	movsd	xmm0, qword ptr [rsi + 56]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 56]
	seta	r15b
	movsd	xmm0, qword ptr [rsi + 64]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 64]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 72]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 72]
	seta	dil
	movsd	xmm0, qword ptr [rsi + 80]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 80]
	seta	r10b
	movsd	xmm0, qword ptr [rsi + 88]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 88]
	seta	r11b
	movsd	xmm0, qword ptr [rsi + 96]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 96]
	seta	r14b
	movsd	xmm0, qword ptr [rsi + 104]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 104]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 112]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 112]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 120]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 120]
	seta	bl
	movsd	xmm0, qword ptr [rsi + 128]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 128]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 136]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 136]
	seta	r12b
	movsd	xmm0, qword ptr [rsi + 144]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 144]
	seta	r13b
	movsd	xmm0, qword ptr [rsi + 152]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 152]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 160]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 160]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 168]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 168]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 176]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 176]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 184]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 184]
	seta	r9b
	movsd	xmm0, qword ptr [rsi + 192]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 192]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 200]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 200]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 208]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 208]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 216]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 216]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 224]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 224]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 232]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 232]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 240]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 240]
	movsd	xmm0, qword ptr [rsi + 248]     # xmm0 = mem[0],zero
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	ucomisd	xmm0, qword ptr [rdx + 248]
	seta	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	dil, dil
	add	dil, byte ptr [rsp + 8]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB6_52
# %bb.53:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB6_54:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.55:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_56:                               # =>This Inner Loop Header: Depth=1
	movsd	xmm0, qword ptr [rsi + 8*rcx]   # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	seta	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_56
	jmp	.LBB6_123
.LBB6_2:
	cmp	edi, 2
	je	.LBB6_57
# %bb.3:
	cmp	edi, 3
	jne	.LBB6_123
# %bb.4:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setg	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_6
# %bb.7:
	add	r14, 1
.LBB6_8:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_12
# %bb.9:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_10:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setg	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setg	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setg	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setg	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setg	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setg	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setg	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setg	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setg	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setg	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setg	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setg	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setg	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setg	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setg	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setg	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setg	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setg	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setg	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setg	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setg	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setg	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setg	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setg	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setg	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setg	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setg	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setg	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_10
# %bb.11:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_12:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.13:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_14:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	setg	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_14
	jmp	.LBB6_123
.LBB6_30:
	cmp	edi, 7
	je	.LBB6_90
# %bb.31:
	cmp	edi, 8
	jne	.LBB6_123
# %bb.32:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_36
# %bb.33:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_34:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rdx]
	add	rdx, 8
	cmp	rcx, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	sbb	r10d, r10d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_34
# %bb.35:
	add	r14, 1
.LBB6_36:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_40
# %bb.37:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_38:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	mov	rax, qword ptr [rsi + 16]
	seta	r13b
	cmp	rax, qword ptr [rdx + 16]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	mov	rax, qword ptr [rsi + 32]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 32]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	mov	rax, qword ptr [rsi + 48]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 48]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	mov	rax, qword ptr [rsi + 64]
	seta	r15b
	cmp	rax, qword ptr [rdx + 64]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	mov	rax, qword ptr [rsi + 80]
	seta	r8b
	cmp	rax, qword ptr [rdx + 80]
	seta	bl
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	mov	rax, qword ptr [rsi + 96]
	seta	r9b
	cmp	rax, qword ptr [rdx + 96]
	seta	r12b
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	mov	rax, qword ptr [rsi + 112]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 112]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	mov	r11, qword ptr [rsi + 128]
	seta	r10b
	mov	rcx, qword ptr [rsi + 136]
	mov	rax, qword ptr [rsi + 144]
	cmp	r11, qword ptr [rdx + 128]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	seta	r14b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 152]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 152]
	mov	rax, qword ptr [rsi + 160]
	mov	rcx, qword ptr [rsi + 168]
	seta	r11b
	cmp	rax, qword ptr [rdx + 160]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 184]
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	seta	dil
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 208]
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 232]
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	seta	al
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 40]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r13b
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 21]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, cl
	shl	bl, 2
	or	bl, r8b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, bl
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r12b, 4
	or	r12b, r9b
	movzx	ebx, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	bl, 5
	or	bl, r12b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	r10b, 7
	or	r10b, r8b
	or	r15b, cl
	or	r10b, bl
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	shl	r11b, 3
	or	r11b, cl
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r11b
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	mov	byte ptr [r14], r15b
	movzx	r8d, byte ptr [rsp + 13]        # 1-byte Folded Reload
	shl	r8b, 6
	shl	dil, 7
	or	dil, r8b
	mov	byte ptr [r14 + 1], r10b
	or	dil, cl
	movzx	ecx, byte ptr [rsp + 14]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 19]         # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, cl
	movzx	ecx, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r14 + 2], dil
	mov	byte ptr [r14 + 3], al
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_38
# %bb.39:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_40:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.41:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_42:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rdx + 8*rcx]
	cmp	rdi, qword ptr [rsi + 8*rcx]
	sbb	edi, edi
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_42
	jmp	.LBB6_123
.LBB6_68:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_72
# %bb.69:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_70:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rdx]
	add	rdx, 2
	cmp	cx, word ptr [rsi]
	lea	rsi, [rsi + 2]
	sbb	r10d, r10d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_70
# %bb.71:
	add	r14, 1
.LBB6_72:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_76
# %bb.73:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_74:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	movzx	eax, word ptr [rsi + 4]
	seta	r13b
	cmp	ax, word ptr [rdx + 4]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	movzx	eax, word ptr [rsi + 8]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 8]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	movzx	eax, word ptr [rsi + 12]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 12]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	movzx	eax, word ptr [rsi + 16]
	seta	r15b
	cmp	ax, word ptr [rdx + 16]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	movzx	eax, word ptr [rsi + 20]
	seta	r8b
	cmp	ax, word ptr [rdx + 20]
	seta	bl
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	movzx	eax, word ptr [rsi + 24]
	seta	r9b
	cmp	ax, word ptr [rdx + 24]
	seta	r12b
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	movzx	eax, word ptr [rsi + 28]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 28]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	movzx	r11d, word ptr [rsi + 32]
	seta	r10b
	movzx	ecx, word ptr [rsi + 34]
	movzx	eax, word ptr [rsi + 36]
	cmp	r11w, word ptr [rdx + 32]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	seta	r14b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 38]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 38]
	movzx	eax, word ptr [rsi + 40]
	movzx	ecx, word ptr [rsi + 42]
	seta	r11b
	cmp	ax, word ptr [rdx + 40]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 46]
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	seta	dil
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 52]
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 58]
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	seta	al
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 40]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r13b
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 21]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, cl
	shl	bl, 2
	or	bl, r8b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, bl
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r12b, 4
	or	r12b, r9b
	movzx	ebx, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	bl, 5
	or	bl, r12b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	r10b, 7
	or	r10b, r8b
	or	r15b, cl
	or	r10b, bl
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	cl, 2
	or	cl, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	shl	r11b, 3
	or	r11b, cl
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r11b
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	mov	byte ptr [r14], r15b
	movzx	r8d, byte ptr [rsp + 13]        # 1-byte Folded Reload
	shl	r8b, 6
	shl	dil, 7
	or	dil, r8b
	mov	byte ptr [r14 + 1], r10b
	or	dil, cl
	movzx	ecx, byte ptr [rsp + 14]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 19]         # 1-byte Folded Reload
	movzx	ebx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, cl
	movzx	ecx, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r14 + 2], dil
	mov	byte ptr [r14 + 3], al
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_74
# %bb.75:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_76:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.77:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_78:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rdx + 2*rcx]
	cmp	di, word ptr [rsi + 2*rcx]
	sbb	edi, edi
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_78
	jmp	.LBB6_123
.LBB6_79:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_81:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setg	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_81
# %bb.82:
	add	r14, 1
.LBB6_83:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_87
# %bb.84:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_85:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setg	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setg	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setg	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setg	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setg	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setg	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setg	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setg	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setg	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setg	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setg	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setg	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setg	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setg	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setg	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setg	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setg	r12b
	cmp	ax, word ptr [rdx + 40]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setg	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setg	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setg	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setg	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setg	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setg	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setg	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setg	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setg	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setg	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB6_85
# %bb.86:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB6_87:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.88:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_89:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	setg	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_89
	jmp	.LBB6_123
.LBB6_101:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_105
# %bb.102:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_103:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setg	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_103
# %bb.104:
	add	r14, 1
.LBB6_105:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_109
# %bb.106:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_107:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setg	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setg	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setg	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setg	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setg	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setg	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setg	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setg	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setg	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setg	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setg	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setg	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setg	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setg	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setg	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setg	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setg	r12b
	cmp	rax, qword ptr [rdx + 160]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setg	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setg	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setg	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setg	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setg	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setg	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setg	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setg	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setg	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setg	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB6_107
# %bb.108:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB6_109:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.110:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_111:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	setg	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_111
	jmp	.LBB6_123
.LBB6_112:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_116
# %bb.113:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_114:                              # =>This Inner Loop Header: Depth=1
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	add	rsi, 4
	ucomiss	xmm0, dword ptr [rdx]
	seta	r10b
	add	rdx, 4
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_114
# %bb.115:
	add	r14, 1
.LBB6_116:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_120
# %bb.117:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_118:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 4]       # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 4]
	seta	cl
	movss	xmm0, dword ptr [rsi + 8]       # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 8]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 12]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 12]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 16]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 16]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 20]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 20]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 24]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 24]
	seta	al
	movss	xmm0, dword ptr [rsi + 28]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 28]
	seta	r15b
	movss	xmm0, dword ptr [rsi + 32]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 32]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 36]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 36]
	seta	dil
	movss	xmm0, dword ptr [rsi + 40]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 40]
	seta	r10b
	movss	xmm0, dword ptr [rsi + 44]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 44]
	seta	r11b
	movss	xmm0, dword ptr [rsi + 48]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 48]
	seta	r14b
	movss	xmm0, dword ptr [rsi + 52]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 52]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 56]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 56]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 60]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 60]
	seta	bl
	movss	xmm0, dword ptr [rsi + 64]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 64]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 68]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 68]
	seta	r12b
	movss	xmm0, dword ptr [rsi + 72]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 72]
	seta	r13b
	movss	xmm0, dword ptr [rsi + 76]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 76]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 80]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 80]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 84]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 84]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 88]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 88]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 92]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 92]
	seta	r9b
	movss	xmm0, dword ptr [rsi + 96]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 96]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 100]     # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 100]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 104]     # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 104]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 108]     # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 108]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 112]     # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 112]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 116]     # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 116]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 120]     # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 120]
	movss	xmm0, dword ptr [rsi + 124]     # xmm0 = mem[0],zero,zero,zero
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	ucomiss	xmm0, dword ptr [rdx + 124]
	seta	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	al, 6
	shl	r15b, 7
	or	r15b, al
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	dil, dil
	add	dil, byte ptr [rsp + 8]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB6_118
# %bb.119:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB6_120:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.121:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_122:                              # =>This Inner Loop Header: Depth=1
	movss	xmm0, dword ptr [rsi + 4*rcx]   # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	seta	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_122
	jmp	.LBB6_123
.LBB6_57:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_59:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rdx]
	add	rdx, 1
	cmp	cl, byte ptr [rsi]
	lea	rsi, [rsi + 1]
	sbb	r10d, r10d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_59
# %bb.60:
	add	r14, 1
.LBB6_61:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_65
# %bb.62:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_63:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	seta	byte ptr [rsp + 4]              # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	seta	r13b
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	movzx	eax, byte ptr [rsi + 3]
	seta	byte ptr [rsp + 20]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 3]
	seta	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	movzx	eax, byte ptr [rsi + 5]
	seta	byte ptr [rsp + 21]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 5]
	seta	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	movzx	eax, byte ptr [rsi + 7]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 7]
	seta	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	movzx	eax, byte ptr [rsi + 9]
	seta	byte ptr [rsp + 7]              # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 9]
	seta	cl
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	movzx	eax, byte ptr [rsi + 11]
	seta	r9b
	cmp	al, byte ptr [rdx + 11]
	seta	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	movzx	eax, byte ptr [rsi + 13]
	seta	r10b
	cmp	al, byte ptr [rdx + 13]
	seta	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	movzx	eax, byte ptr [rsi + 15]
	seta	byte ptr [rsp + 5]              # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 15]
	seta	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	movzx	eax, byte ptr [rsi + 17]
	seta	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 17]
	seta	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	movzx	eax, byte ptr [rsi + 19]
	seta	r14b
	cmp	al, byte ptr [rdx + 19]
	seta	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	movzx	eax, byte ptr [rsi + 21]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 21]
	seta	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	movzx	eax, byte ptr [rsi + 23]
	seta	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 23]
	seta	r8b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	movzx	eax, byte ptr [rsi + 25]
	seta	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 25]
	seta	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	movzx	eax, byte ptr [rsi + 27]
	seta	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 27]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	movzx	eax, byte ptr [rsi + 29]
	seta	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	al, byte ptr [rdx + 29]
	seta	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	seta	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	seta	dil
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 4]        # 1-byte Folded Reload
	mov	eax, r13d
	movzx	r13d, byte ptr [rsp + 40]       # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 20]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 7]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 12]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r12b
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 18]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 13]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	movzx	ecx, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB6_63
# %bb.64:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB6_65:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.66:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_67:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rdx + rcx]
	cmp	bl, byte ptr [rsi + rcx]
	sbb	edi, edi
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_67
	jmp	.LBB6_123
.LBB6_90:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB6_94
# %bb.91:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB6_92:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setg	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB6_92
# %bb.93:
	add	r14, 1
.LBB6_94:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB6_98
# %bb.95:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB6_96:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setg	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setg	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setg	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setg	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setg	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setg	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setg	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setg	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setg	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setg	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setg	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setg	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setg	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setg	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setg	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setg	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setg	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setg	r12b
	cmp	eax, dword ptr [rdx + 80]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setg	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setg	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setg	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setg	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setg	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setg	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setg	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setg	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setg	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setg	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB6_96
# %bb.97:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB6_98:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB6_123
# %bb.99:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB6_100:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	setg	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB6_100
.LBB6_123:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.Lfunc_end6:
	.size	comparison_greater_arr_arr_sse4, .Lfunc_end6-comparison_greater_arr_arr_sse4
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function comparison_greater_arr_scalar_sse4
.LCPI7_0:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI7_1:
	.zero	16,252
.LCPI7_2:
	.zero	16,248
.LCPI7_3:
	.zero	16,240
.LCPI7_4:
	.zero	16,224
.LCPI7_5:
	.zero	16,192
.LCPI7_6:
	.zero	16,128
.LCPI7_7:
	.byte	0                               # 0x0
	.byte	8                               # 0x8
	.byte	1                               # 0x1
	.byte	9                               # 0x9
	.byte	2                               # 0x2
	.byte	10                              # 0xa
	.byte	3                               # 0x3
	.byte	11                              # 0xb
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
.LCPI7_8:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI7_9:
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI7_10:
	.zero	16,1
.LCPI7_11:
	.zero	16,4
.LCPI7_12:
	.zero	16,8
.LCPI7_13:
	.zero	16,16
.LCPI7_14:
	.zero	16,32
.LCPI7_15:
	.zero	16,64
.LCPI7_16:
	.zero	16,255
	.text
	.globl	comparison_greater_arr_scalar_sse4
	.p2align	4, 0x90
	.type	comparison_greater_arr_scalar_sse4,@function
comparison_greater_arr_scalar_sse4:     # @comparison_greater_arr_scalar_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -16
	sub	rsp, 336
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r12, rcx
	cmp	edi, 6
	jg	.LBB7_26
# %bb.1:
	cmp	edi, 3
	jle	.LBB7_2
# %bb.10:
	cmp	edi, 4
	je	.LBB7_98
# %bb.11:
	cmp	edi, 5
	je	.LBB7_113
# %bb.12:
	cmp	edi, 6
	jne	.LBB7_200
# %bb.13:
	mov	r13d, dword ptr [rdx]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_17
# %bb.14:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_15:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	sbb	edx, edx
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	mov	r9, r12
	movzx	r8d, byte ptr [r12 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r12 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_15
# %bb.16:
	add	r12, 1
.LBB7_17:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_21
# %bb.18:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 240], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_19:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	seta	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	seta	dil
	cmp	dword ptr [rsi + 8], r13d
	seta	r14b
	cmp	dword ptr [rsi + 12], r13d
	seta	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	seta	al
	cmp	dword ptr [rsi + 28], r13d
	seta	bl
	cmp	dword ptr [rsi + 32], r13d
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	seta	dl
	cmp	dword ptr [rsi + 40], r13d
	seta	r9b
	cmp	dword ptr [rsi + 44], r13d
	seta	r10b
	cmp	dword ptr [rsi + 48], r13d
	seta	r11b
	cmp	dword ptr [rsi + 52], r13d
	seta	r12b
	cmp	dword ptr [rsi + 56], r13d
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	seta	cl
	cmp	dword ptr [rsi + 64], r13d
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	seta	r15b
	cmp	dword ptr [rsi + 96], r13d
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	seta	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	seta	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 144]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r12], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r12 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r12 + 2], r15b
	mov	byte ptr [r12 + 3], r8b
	add	rsi, 128
	add	r12, 4
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB7_19
# %bb.20:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
.LBB7_21:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.22:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_135
# %bb.23:
	xor	r11d, r11d
	jmp	.LBB7_24
.LBB7_26:
	cmp	edi, 8
	jle	.LBB7_27
# %bb.42:
	cmp	edi, 9
	je	.LBB7_155
# %bb.43:
	cmp	edi, 11
	je	.LBB7_170
# %bb.44:
	cmp	edi, 12
	jne	.LBB7_200
# %bb.45:
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB7_49
# %bb.46:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_47:                               # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	sbb	edx, edx
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	mov	r14, r12
	movzx	r9d, byte ptr [r12 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r12 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_47
# %bb.48:
	add	r12, 1
.LBB7_49:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_53
# %bb.50:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_51:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	ucomisd	xmm0, qword ptr [rsi]
	setb	byte ptr [rsp + 208]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 8]
	setb	r9b
	ucomisd	xmm0, qword ptr [rsi + 16]
	setb	r14b
	ucomisd	xmm0, qword ptr [rsi + 24]
	setb	r13b
	ucomisd	xmm0, qword ptr [rsi + 32]
	setb	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 40]
	setb	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 48]
	setb	al
	ucomisd	xmm0, qword ptr [rsi + 56]
	setb	bl
	ucomisd	xmm0, qword ptr [rsi + 64]
	setb	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 72]
	setb	dl
	ucomisd	xmm0, qword ptr [rsi + 80]
	setb	dil
	ucomisd	xmm0, qword ptr [rsi + 88]
	setb	r10b
	ucomisd	xmm0, qword ptr [rsi + 96]
	setb	r11b
	ucomisd	xmm0, qword ptr [rsi + 104]
	setb	r12b
	ucomisd	xmm0, qword ptr [rsi + 112]
	setb	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 120]
	setb	cl
	ucomisd	xmm0, qword ptr [rsi + 128]
	setb	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 136]
	setb	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 144]
	setb	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 152]
	setb	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 160]
	setb	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 168]
	setb	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 176]
	setb	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 184]
	setb	r15b
	ucomisd	xmm0, qword ptr [rsi + 192]
	setb	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 200]
	setb	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 208]
	setb	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 216]
	setb	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 224]
	setb	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 232]
	setb	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 240]
	setb	byte ptr [rsp]                  # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 248]
	setb	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [rax], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rax + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [rax + 2], r15b
	mov	byte ptr [rax + 3], r8b
	add	rsi, 256
	add	rax, 4
	mov	r12, rax
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB7_51
# %bb.52:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
.LBB7_53:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.54:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_193
# %bb.55:
	xor	r11d, r11d
	jmp	.LBB7_195
.LBB7_2:
	cmp	edi, 2
	je	.LBB7_56
# %bb.3:
	cmp	edi, 3
	jne	.LBB7_200
# %bb.4:
	mov	r14b, byte ptr [rdx]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_6:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r14b
	lea	rsi, [rsi + 1]
	setg	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	mov	r15, r12
	movzx	r9d, byte ptr [r12 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r12 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_6
# %bb.7:
	add	r12, 1
.LBB7_8:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_9
# %bb.80:
	cmp	r10, 16
	mov	byte ptr [rsp], r14b            # 1-byte Spill
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 288], r10      # 8-byte Spill
	jb	.LBB7_81
# %bb.82:
	mov	rax, r10
	shl	rax, 5
	add	rax, rsi
	cmp	r12, rax
	jae	.LBB7_84
# %bb.83:
	lea	rax, [r12 + 4*r10]
	cmp	rsi, rax
	jae	.LBB7_84
.LBB7_81:
	xor	eax, eax
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	qword ptr [rsp + 88], r12       # 8-byte Spill
.LBB7_87:
	sub	r10, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 240], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_88:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	byte ptr [rsi], r14b
	setg	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	byte ptr [rsi + 1], r14b
	setg	sil
	cmp	byte ptr [rcx + 2], r14b
	setg	r15b
	cmp	byte ptr [rcx + 3], r14b
	setg	r12b
	cmp	byte ptr [rcx + 4], r14b
	setg	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 5], r14b
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 6], r14b
	setg	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 7], r14b
	setg	r9b
	cmp	byte ptr [rcx + 8], r14b
	setg	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 9], r14b
	setg	dl
	cmp	byte ptr [rcx + 10], r14b
	setg	dil
	cmp	byte ptr [rcx + 11], r14b
	setg	r10b
	cmp	byte ptr [rcx + 12], r14b
	setg	r14b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 13], al
	setg	r13b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 14], al
	setg	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 15], al
	setg	r8b
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 16], bl
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 17], bl
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 18], bl
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 19], bl
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 20], bl
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 21], bl
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 22], bl
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 23], bl
	setg	r11b
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 24], bl
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 25], bl
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 26], bl
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 27], bl
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 28], bl
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 29], bl
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 30], bl
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	byte ptr [rcx + 31], bl
	setg	bl
	add	sil, sil
	add	sil, byte ptr [rsp + 176]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r9b, 7
	or	r9b, al
	shl	r15b, 2
	or	r15b, sil
	add	dl, dl
	add	dl, byte ptr [rsp + 144]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	shl	dil, 2
	or	dil, dl
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, al
	shl	r14b, 4
	or	r14b, r10b
	shl	r13b, 5
	or	r13b, r14b
	movzx	r14d, byte ptr [rsp]            # 1-byte Folded Reload
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r9b, dl
	or	r8b, r13b
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 120]        # 1-byte Folded Reload
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	esi, edx
	mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload
	mov	byte ptr [rdx], r9b
	movzx	edi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r11b, 7
	or	r11b, dil
	mov	byte ptr [rdx + 1], r8b
	or	r11b, sil
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	movzx	esi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	sil, 6
	shl	bl, 7
	or	bl, sil
	or	bl, al
	mov	byte ptr [rdx + 2], r11b
	mov	byte ptr [rdx + 3], bl
	lea	rsi, [rcx + 32]
	add	rdx, 4
	mov	qword ptr [rsp + 88], rdx       # 8-byte Spill
	add	qword ptr [rsp + 240], -1       # 8-byte Folded Spill
	jne	.LBB7_88
# %bb.89:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	jmp	.LBB7_90
.LBB7_27:
	cmp	edi, 7
	je	.LBB7_137
# %bb.28:
	cmp	edi, 8
	jne	.LBB7_200
# %bb.29:
	mov	r13, qword ptr [rdx]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_33
# %bb.30:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_31:                               # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rsi]
	lea	rsi, [rsi + 8]
	sbb	edx, edx
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	mov	r9, r12
	movzx	r8d, byte ptr [r12 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r12 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_31
# %bb.32:
	add	r12, 1
.LBB7_33:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_37
# %bb.34:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 240], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_35:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	seta	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	seta	dil
	cmp	qword ptr [rsi + 16], r13
	seta	r14b
	cmp	qword ptr [rsi + 24], r13
	seta	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	seta	al
	cmp	qword ptr [rsi + 56], r13
	seta	bl
	cmp	qword ptr [rsi + 64], r13
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	seta	dl
	cmp	qword ptr [rsi + 80], r13
	seta	r9b
	cmp	qword ptr [rsi + 88], r13
	seta	r10b
	cmp	qword ptr [rsi + 96], r13
	seta	r11b
	cmp	qword ptr [rsi + 104], r13
	seta	r12b
	cmp	qword ptr [rsi + 112], r13
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	seta	cl
	cmp	qword ptr [rsi + 128], r13
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	seta	r15b
	cmp	qword ptr [rsi + 192], r13
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	seta	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	seta	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 144]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r12], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r12 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r12 + 2], r15b
	mov	byte ptr [r12 + 3], r8b
	add	rsi, 256
	add	r12, 4
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB7_35
# %bb.36:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
.LBB7_37:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.38:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_153
# %bb.39:
	xor	r11d, r11d
	jmp	.LBB7_40
.LBB7_56:
	mov	al, byte ptr [rdx]
	mov	byte ptr [rsp + 40], al         # 1-byte Spill
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_60
# %bb.57:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_58:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	cmp	cl, byte ptr [rsi]
	lea	rsi, [rsi + 1]
	sbb	edx, edx
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	mov	r14, r12
	movzx	r9d, byte ptr [r12 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r12 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_58
# %bb.59:
	add	r12, 1
.LBB7_60:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_61
# %bb.62:
	cmp	r10, 16
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 264], r10      # 8-byte Spill
	jb	.LBB7_63
# %bb.64:
	mov	rax, r10
	shl	rax, 5
	add	rax, rsi
	cmp	r12, rax
	jae	.LBB7_66
# %bb.65:
	lea	rax, [r12 + 4*r10]
	cmp	rsi, rax
	jae	.LBB7_66
.LBB7_63:
	xor	eax, eax
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	r14, rsi
	mov	qword ptr [rsp + 72], r12       # 8-byte Spill
.LBB7_69:
	sub	r10, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_70:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, r14
	movzx	r14d, byte ptr [rsp + 40]       # 1-byte Folded Reload
	cmp	byte ptr [rcx], r14b
	seta	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 1], r14b
	seta	sil
	cmp	byte ptr [rcx + 2], r14b
	seta	r11b
	cmp	byte ptr [rcx + 3], r14b
	seta	r15b
	cmp	byte ptr [rcx + 4], r14b
	seta	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 5], r14b
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 6], r14b
	seta	al
	cmp	byte ptr [rcx + 7], r14b
	seta	r8b
	cmp	byte ptr [rcx + 8], r14b
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 9], r14b
	seta	dl
	cmp	byte ptr [rcx + 10], r14b
	seta	dil
	cmp	byte ptr [rcx + 11], r14b
	seta	r9b
	cmp	byte ptr [rcx + 12], r14b
	seta	r10b
	cmp	byte ptr [rcx + 13], r14b
	seta	r12b
	cmp	byte ptr [rcx + 14], r14b
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 15], r14b
	seta	bl
	cmp	byte ptr [rcx + 16], r14b
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 17], r14b
	seta	r13b
	cmp	byte ptr [rcx + 18], r14b
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 19], r14b
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 20], r14b
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 21], r14b
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 22], r14b
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 23], r14b
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 24], r14b
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 25], r14b
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 26], r14b
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 27], r14b
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	byte ptr [rcx + 28], r14b
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	byte ptr [rcx + 29], r14b
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	byte ptr [rcx + 30], r14b
	seta	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	byte ptr [rcx + 31], r14b
	seta	r14b
	add	sil, sil
	add	sil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r8b, 7
	or	r8b, al
	shl	r11b, 2
	or	r11b, sil
	add	dl, dl
	add	dl, byte ptr [rsp + 144]        # 1-byte Folded Reload
	shl	r15b, 3
	or	r15b, r11b
	shl	dil, 2
	or	dil, dl
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	edx, eax
	shl	r9b, 3
	or	r9b, dil
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	edx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	r8b, al
	or	bl, r12b
	add	r13b, r13b
	add	r13b, byte ptr [rsp + 104]      # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 2
	or	al, r13b
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	mov	esi, eax
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	mov	byte ptr [rax], r8b
	movzx	edi, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dil, 6
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 7
	or	dl, dil
	mov	byte ptr [rax + 1], bl
	or	dl, sil
	movzx	ebx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	movzx	esi, byte ptr [rsp]             # 1-byte Folded Reload
	shl	sil, 6
	shl	r14b, 7
	or	r14b, sil
	or	r14b, bl
	mov	byte ptr [rax + 2], dl
	mov	byte ptr [rax + 3], r14b
	lea	r14, [rcx + 32]
	add	rax, 4
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB7_70
# %bb.71:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 264]      # 8-byte Reload
	jmp	.LBB7_72
.LBB7_137:
	mov	r13d, dword ptr [rdx]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_141
# %bb.138:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_139:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	setg	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	mov	r9, r12
	movzx	r8d, byte ptr [r12 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r12 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_139
# %bb.140:
	add	r12, 1
.LBB7_141:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_145
# %bb.142:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 240], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_143:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	setg	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setg	dil
	cmp	dword ptr [rsi + 8], r13d
	setg	r14b
	cmp	dword ptr [rsi + 12], r13d
	setg	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setg	al
	cmp	dword ptr [rsi + 28], r13d
	setg	bl
	cmp	dword ptr [rsi + 32], r13d
	setg	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setg	dl
	cmp	dword ptr [rsi + 40], r13d
	setg	r9b
	cmp	dword ptr [rsi + 44], r13d
	setg	r10b
	cmp	dword ptr [rsi + 48], r13d
	setg	r11b
	cmp	dword ptr [rsi + 52], r13d
	setg	r12b
	cmp	dword ptr [rsi + 56], r13d
	setg	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setg	cl
	cmp	dword ptr [rsi + 64], r13d
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setg	r15b
	cmp	dword ptr [rsi + 96], r13d
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setg	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setg	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 144]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r12], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r12 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r12 + 2], r15b
	mov	byte ptr [r12 + 3], r8b
	add	rsi, 128
	add	r12, 4
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB7_143
# %bb.144:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
.LBB7_145:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.146:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_151
# %bb.147:
	xor	r11d, r11d
	jmp	.LBB7_148
.LBB7_98:
	movzx	r13d, word ptr [rdx]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_102
# %bb.99:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_100:                              # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rsi]
	lea	rsi, [rsi + 2]
	sbb	r9d, r9d
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	mov	rdx, r12
	movzx	r8d, byte ptr [r12 + rbx]
	xor	r9b, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r9b
	xor	dil, r8b
	mov	byte ptr [r12 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_100
# %bb.101:
	add	r12, 1
.LBB7_102:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_106
# %bb.103:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 240], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_104:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	cmp	word ptr [rsi], r13w
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	seta	dil
	cmp	word ptr [rsi + 4], r13w
	seta	r14b
	cmp	word ptr [rsi + 6], r13w
	seta	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	seta	al
	cmp	word ptr [rsi + 14], r13w
	seta	bl
	cmp	word ptr [rsi + 16], r13w
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	seta	dl
	cmp	word ptr [rsi + 20], r13w
	seta	r9b
	cmp	word ptr [rsi + 22], r13w
	seta	r10b
	cmp	word ptr [rsi + 24], r13w
	seta	r11b
	cmp	word ptr [rsi + 26], r13w
	seta	r12b
	cmp	word ptr [rsi + 28], r13w
	seta	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	seta	cl
	cmp	word ptr [rsi + 32], r13w
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	seta	r15b
	cmp	word ptr [rsi + 48], r13w
	seta	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	seta	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 32]         # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 16]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r12], bl
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r12 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp]              # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r12 + 2], r15b
	mov	byte ptr [r12 + 3], r8b
	add	rsi, 64
	add	r12, 4
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB7_104
# %bb.105:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
.LBB7_106:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.107:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_111
# %bb.108:
	xor	r11d, r11d
	jmp	.LBB7_109
.LBB7_113:
	movzx	eax, word ptr [rdx]
	mov	dword ptr [rsp + 240], eax      # 4-byte Spill
	lea	r14, [r11 + 31]
	test	r11, r11
	cmovns	r14, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_117
# %bb.114:
	movsxd	rax, r9d
	mov	r10d, dword ptr [rsp + 240]     # 4-byte Reload
	.p2align	4, 0x90
.LBB7_115:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r10w
	lea	rsi, [rsi + 2]
	setg	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	mov	r15, r12
	movzx	r9d, byte ptr [r12 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r12 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_115
# %bb.116:
	add	r12, 1
.LBB7_117:
	sar	r14, 5
	cmp	r11, 32
	jl	.LBB7_128
# %bb.118:
	cmp	r14, 8
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 272], r14      # 8-byte Spill
	jb	.LBB7_119
# %bb.120:
	mov	rax, r14
	shl	rax, 6
	add	rax, rsi
	cmp	r12, rax
	jae	.LBB7_122
# %bb.121:
	lea	rax, [r12 + 4*r14]
	cmp	rax, rsi
	jbe	.LBB7_122
.LBB7_119:
	xor	eax, eax
	mov	qword ptr [rsp + 24], rax       # 8-byte Spill
.LBB7_125:
	mov	qword ptr [rsp], r12            # 8-byte Spill
	sub	r14, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 176], r14      # 8-byte Spill
	mov	r13d, dword ptr [rsp + 240]     # 4-byte Reload
	.p2align	4, 0x90
.LBB7_126:                              # =>This Inner Loop Header: Depth=1
	mov	r11, rsi
	cmp	word ptr [rsi], r13w
	setg	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	setg	r8b
	cmp	word ptr [rsi + 4], r13w
	setg	r14b
	cmp	word ptr [rsi + 6], r13w
	setg	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	setg	al
	cmp	word ptr [rsi + 14], r13w
	setg	bl
	cmp	word ptr [rsi + 16], r13w
	setg	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	setg	cl
	cmp	word ptr [rsi + 20], r13w
	setg	sil
	cmp	word ptr [r11 + 22], r13w
	setg	r9b
	cmp	word ptr [r11 + 24], r13w
	setg	r10b
	cmp	word ptr [r11 + 26], r13w
	setg	r12b
	cmp	word ptr [r11 + 28], r13w
	setg	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 30], r13w
	setg	dil
	cmp	word ptr [r11 + 32], r13w
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 34], r13w
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 36], r13w
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 38], r13w
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 40], r13w
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 42], r13w
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 44], r13w
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 46], r13w
	setg	r15b
	cmp	word ptr [r11 + 48], r13w
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	word ptr [r11 + 50], r13w
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 52], r13w
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 54], r13w
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 56], r13w
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 58], r13w
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 60], r13w
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 62], r13w
	setg	dl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 144]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	sil, 2
	or	sil, cl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, sil
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	dil, 7
	or	dil, sil
	or	bl, cl
	or	dil, r12b
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, sil
	mov	esi, ecx
	mov	rcx, qword ptr [rsp]            # 8-byte Reload
	mov	byte ptr [rcx], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rcx + 1], dil
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 8]          # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rcx + 2], r15b
	mov	byte ptr [rcx + 3], dl
	lea	rsi, [r11 + 64]
	add	rcx, 4
	mov	qword ptr [rsp], rcx            # 8-byte Spill
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB7_126
# %bb.127:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	mov	r12, qword ptr [rsp]            # 8-byte Reload
.LBB7_128:
	shl	r14, 5
	cmp	r14, r11
	jge	.LBB7_200
# %bb.129:
	mov	r8, r11
	sub	r8, r14
	not	r14
	add	r14, r11
	jne	.LBB7_133
# %bb.130:
	xor	r14d, r14d
	jmp	.LBB7_131
.LBB7_155:
	mov	r13, qword ptr [rdx]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB7_159
# %bb.156:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_157:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	setg	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	mov	r9, r12
	movzx	r8d, byte ptr [r12 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r12 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_157
# %bb.158:
	add	r12, 1
.LBB7_159:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_163
# %bb.160:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 240], r10      # 8-byte Spill
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_161:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	setg	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setg	dil
	cmp	qword ptr [rsi + 16], r13
	setg	r14b
	cmp	qword ptr [rsi + 24], r13
	setg	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setg	al
	cmp	qword ptr [rsi + 56], r13
	setg	bl
	cmp	qword ptr [rsi + 64], r13
	setg	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setg	dl
	cmp	qword ptr [rsi + 80], r13
	setg	r9b
	cmp	qword ptr [rsi + 88], r13
	setg	r10b
	cmp	qword ptr [rsi + 96], r13
	setg	r11b
	cmp	qword ptr [rsi + 104], r13
	setg	r12b
	cmp	qword ptr [rsi + 112], r13
	setg	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setg	cl
	cmp	qword ptr [rsi + 128], r13
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setg	r15b
	cmp	qword ptr [rsi + 192], r13
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setg	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setg	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 144]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r12, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 80]         # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r12], bl
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r12 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r12 + 2], r15b
	mov	byte ptr [r12 + 3], r8b
	add	rsi, 256
	add	r12, 4
	add	qword ptr [rsp + 176], -1       # 8-byte Folded Spill
	jne	.LBB7_161
# %bb.162:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 240]      # 8-byte Reload
.LBB7_163:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.164:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_168
# %bb.165:
	xor	r11d, r11d
	jmp	.LBB7_166
.LBB7_170:
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movss	xmm11, dword ptr [rdx]          # xmm11 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB7_174
# %bb.171:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB7_172:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm11, dword ptr [rsi]
	lea	rsi, [rsi + 4]
	sbb	edx, edx
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	mov	r14, r12
	movzx	r9d, byte ptr [r12 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r12 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB7_172
# %bb.173:
	add	r12, 1
.LBB7_174:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB7_175
# %bb.176:
	cmp	r10, 4
	jb	.LBB7_177
# %bb.178:
	mov	rax, r10
	shl	rax, 7
	add	rax, rsi
	cmp	r12, rax
	jae	.LBB7_180
# %bb.179:
	lea	rax, [r12 + 4*r10]
	cmp	rax, rsi
	jbe	.LBB7_180
.LBB7_177:
	xor	r8d, r8d
	mov	rbx, rsi
	mov	r14, r12
.LBB7_183:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	sub	r10, r8
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_184:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp], r14            # 8-byte Spill
	ucomiss	xmm11, dword ptr [rbx]
	setb	byte ptr [rsp + 208]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 4]
	setb	r8b
	ucomiss	xmm11, dword ptr [rbx + 8]
	setb	r14b
	ucomiss	xmm11, dword ptr [rbx + 12]
	setb	r13b
	ucomiss	xmm11, dword ptr [rbx + 16]
	setb	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 20]
	setb	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 24]
	setb	al
	ucomiss	xmm11, dword ptr [rbx + 28]
	setb	r11b
	ucomiss	xmm11, dword ptr [rbx + 32]
	setb	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 36]
	setb	dl
	ucomiss	xmm11, dword ptr [rbx + 40]
	setb	sil
	ucomiss	xmm11, dword ptr [rbx + 44]
	setb	r9b
	ucomiss	xmm11, dword ptr [rbx + 48]
	setb	r10b
	ucomiss	xmm11, dword ptr [rbx + 52]
	setb	r12b
	ucomiss	xmm11, dword ptr [rbx + 56]
	setb	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 60]
	setb	dil
	ucomiss	xmm11, dword ptr [rbx + 64]
	setb	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 68]
	setb	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 72]
	setb	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 76]
	setb	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 80]
	setb	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 84]
	setb	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 88]
	setb	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 92]
	setb	r15b
	ucomiss	xmm11, dword ptr [rbx + 96]
	setb	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 100]
	setb	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 104]
	setb	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 108]
	setb	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 112]
	setb	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 116]
	setb	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 120]
	setb	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 124]
	setb	cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	r9b, 3
	or	r9b, sil
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	sil, 6
	shl	dil, 7
	or	dil, sil
	or	r11b, dl
	or	dil, r12b
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 80]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], dil
	or	r15b, dl
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 8]          # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 6
	shl	cl, 7
	or	cl, dl
	or	cl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], cl
	add	rbx, 128
	add	r14, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB7_184
# %bb.185:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	jmp	.LBB7_186
.LBB7_9:
	mov	qword ptr [rsp + 88], r12       # 8-byte Spill
.LBB7_90:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.91:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_93
# %bb.92:
	xor	r9d, r9d
	jmp	.LBB7_96
.LBB7_61:
	mov	qword ptr [rsp + 72], r12       # 8-byte Spill
	mov	r14, rsi
.LBB7_72:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.73:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_75
# %bb.74:
	xor	eax, eax
	jmp	.LBB7_78
.LBB7_175:
	mov	r14, r12
	mov	rbx, rsi
.LBB7_186:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB7_200
# %bb.187:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB7_191
# %bb.188:
	xor	r11d, r11d
	jmp	.LBB7_189
.LBB7_153:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB7_154:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rsi]
	sbb	edi, edi
	mov	rdx, r11
	shr	rdx, 3
	mov	r14, r12
	movzx	r10d, byte ptr [r12 + rdx]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r12 + rdx], al
	add	r11, 2
	cmp	r13, qword ptr [rsi + 8]
	lea	rsi, [rsi + 16]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r12 + rdx], bl
	cmp	r9, r11
	jne	.LBB7_154
.LBB7_40:
	test	r8b, 1
	je	.LBB7_200
# %bb.41:
	cmp	r13, qword ptr [rsi]
	jmp	.LBB7_197
.LBB7_151:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB7_152:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setg	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	mov	r14, r12
	movzx	r9d, byte ptr [r12 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r12 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	setg	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r12 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_152
.LBB7_148:
	test	r8b, 1
	je	.LBB7_200
# %bb.149:
	cmp	dword ptr [rsi], r13d
	jmp	.LBB7_150
.LBB7_93:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r11, qword ptr [rsp + 88]       # 8-byte Reload
	.p2align	4, 0x90
.LBB7_94:                               # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	byte ptr [rsi + r9], r14b
	setg	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r11 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r11 + rdi], dl
	cmp	byte ptr [rsi + rax + 1], r14b
	lea	r9, [rax + 2]
	setg	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r11 + rdi], al
	cmp	r10, r9
	jne	.LBB7_94
# %bb.95:
	add	rsi, r9
.LBB7_96:
	test	r8b, 1
	je	.LBB7_200
# %bb.97:
	cmp	byte ptr [rsi], r14b
	setg	al
	neg	al
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB7_200
.LBB7_75:
	mov	r9, r8
	and	r9, -2
	xor	eax, eax
	mov	r11, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r10b, byte ptr [rsp + 40]       # 1-byte Reload
	.p2align	4, 0x90
.LBB7_76:                               # =>This Inner Loop Header: Depth=1
	cmp	r10b, byte ptr [r14 + rax]
	sbb	esi, esi
	mov	rdi, rax
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	ebx, byte ptr [r11 + rdi]
	xor	sil, bl
	and	dl, sil
	xor	dl, bl
	mov	byte ptr [r11 + rdi], dl
	cmp	r10b, byte ptr [r14 + rax + 1]
	lea	rax, [rax + 2]
	sbb	esi, esi
	xor	sil, dl
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, sil
	xor	bl, dl
	mov	byte ptr [r11 + rdi], bl
	cmp	r9, rax
	jne	.LBB7_76
# %bb.77:
	add	r14, rax
.LBB7_78:
	test	r8b, 1
	je	.LBB7_200
# %bb.79:
	mov	cl, byte ptr [rsp + 40]         # 1-byte Reload
	cmp	cl, byte ptr [r14]
	sbb	edx, edx
	mov	rsi, rax
	shr	rsi, 3
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	mov	dil, byte ptr [r8 + rsi]
	and	al, 7
	mov	bl, 1
	mov	ecx, eax
	shl	bl, cl
	xor	dl, dil
	and	bl, dl
	xor	bl, dil
	mov	byte ptr [r8 + rsi], bl
	jmp	.LBB7_200
.LBB7_135:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB7_136:                              # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rsi]
	sbb	edi, edi
	mov	rdx, r11
	shr	rdx, 3
	mov	r14, r12
	movzx	r10d, byte ptr [r12 + rdx]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r12 + rdx], al
	add	r11, 2
	cmp	r13d, dword ptr [rsi + 4]
	lea	rsi, [rsi + 8]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r12 + rdx], bl
	cmp	r9, r11
	jne	.LBB7_136
.LBB7_24:
	test	r8b, 1
	je	.LBB7_200
# %bb.25:
	cmp	r13d, dword ptr [rsi]
	jmp	.LBB7_197
.LBB7_193:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB7_194:                              # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rsi]
	sbb	eax, eax
	mov	rdi, r11
	shr	rdi, 3
	mov	r14, r12
	movzx	r9d, byte ptr [r12 + rdi]
	xor	al, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r12 + rdi], bl
	add	r11, 2
	ucomisd	xmm0, qword ptr [rsi + 8]
	lea	rsi, [rsi + 16]
	sbb	eax, eax
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r12 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_194
.LBB7_195:
	test	r8b, 1
	je	.LBB7_200
# %bb.196:
	ucomisd	xmm0, qword ptr [rsi]
	jmp	.LBB7_197
.LBB7_111:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB7_112:                              # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rsi]
	sbb	edi, edi
	mov	rdx, r11
	shr	rdx, 3
	mov	r14, r12
	movzx	r10d, byte ptr [r12 + rdx]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r12 + rdx], al
	add	r11, 2
	cmp	r13w, word ptr [rsi + 2]
	lea	rsi, [rsi + 4]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r12 + rdx], bl
	cmp	r9, r11
	jne	.LBB7_112
.LBB7_109:
	test	r8b, 1
	je	.LBB7_200
# %bb.110:
	cmp	r13w, word ptr [rsi]
.LBB7_197:
	sbb	eax, eax
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r12 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	jmp	.LBB7_198
.LBB7_133:
	mov	r9, r8
	and	r9, -2
	xor	r14d, r14d
	mov	r11d, dword ptr [rsp + 240]     # 4-byte Reload
	.p2align	4, 0x90
.LBB7_134:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	cmp	word ptr [rsi], r11w
	setg	dl
	neg	dl
	mov	rdi, r14
	shr	rdi, 3
	movzx	r10d, byte ptr [r12 + rdi]
	mov	ecx, r14d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r12 + rdi], bl
	add	r14, 2
	cmp	word ptr [rsi + 2], r11w
	lea	rsi, [rsi + 4]
	setg	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r12 + rdi], al
	cmp	r9, r14
	jne	.LBB7_134
.LBB7_131:
	test	r8b, 1
	je	.LBB7_200
# %bb.132:
	mov	eax, dword ptr [rsp + 240]      # 4-byte Reload
	cmp	word ptr [rsi], ax
	setg	al
	neg	al
	mov	rdx, r14
	shr	rdx, 3
	mov	dil, byte ptr [r12 + rdx]
	and	r14b, 7
	mov	bl, 1
	mov	ecx, r14d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	jmp	.LBB7_199
.LBB7_168:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB7_169:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setg	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	mov	r14, r12
	movzx	r9d, byte ptr [r12 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r12 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	setg	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r12 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_169
.LBB7_166:
	test	r8b, 1
	je	.LBB7_200
# %bb.167:
	cmp	qword ptr [rsi], r13
.LBB7_150:
	setg	al
	neg	al
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r12 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
.LBB7_198:
	xor	bl, sil
.LBB7_199:
	mov	byte ptr [r12 + rdx], bl
.LBB7_200:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB7_191:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB7_192:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm11, dword ptr [rbx]
	sbb	edx, edx
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	add	r11, 2
	ucomiss	xmm11, dword ptr [rbx + 4]
	lea	rbx, [rbx + 8]
	sbb	esi, esi
	xor	sil, al
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, sil
	xor	dl, al
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB7_192
.LBB7_189:
	test	r8b, 1
	je	.LBB7_200
# %bb.190:
	ucomiss	xmm11, dword ptr [rbx]
	sbb	eax, eax
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
	jmp	.LBB7_200
.LBB7_84:
	and	r10, -16
	mov	rax, r10
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	qword ptr [rsp + 232], r10      # 8-byte Spill
	lea	rax, [r12 + 4*r10]
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	movzx	eax, r14b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 160], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_85:                               # =>This Inner Loop Header: Depth=1
	mov	rdi, rax
	mov	qword ptr [rsp + 240], rax      # 8-byte Spill
	shl	rdi, 5
	mov	r8, rdi
	mov	rdx, rdi
	mov	r9, rdi
	mov	r12, rdi
	mov	r11, rdi
	mov	rax, rdi
	mov	qword ptr [rsp + 32], rdi       # 8-byte Spill
	mov	r14, rdi
	mov	r10, rdi
	mov	r15, rdi
	mov	rbx, rdi
	movzx	ecx, byte ptr [rsi + rdi]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [rsi + rdi + 1]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rsi + rdi + 2]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rsi + rdi + 3]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rsi + rdi + 4]
	movd	xmm1, ecx
	movzx	ecx, byte ptr [rsi + rdi + 5]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rsi + rdi + 6]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rsi + rdi + 7]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 208], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdi + 8]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 272], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdi + 9]
	movd	xmm10, ecx
	movzx	ecx, byte ptr [rsi + rdi + 10]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 144], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdi + 11]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rsi + rdi + 12]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [rsi + rdi + 13]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rsi + rdi + 14]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 304], xmm0   # 16-byte Spill
	mov	r13, rdi
	or	r13, 32
	mov	qword ptr [rsp + 40], r13       # 8-byte Spill
	or	r8, 64
	or	rdx, 96
	mov	qword ptr [rsp + 120], rdx      # 8-byte Spill
	or	r9, 128
	or	r12, 160
	or	r11, 192
	mov	qword ptr [rsp + 64], r11       # 8-byte Spill
	or	rax, 224
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	r11, qword ptr [rsp + 32]       # 8-byte Reload
	or	r11, 256
	or	r14, 288
	or	r10, 320
	or	r15, 352
	mov	qword ptr [rsp + 80], r15       # 8-byte Spill
	or	rbx, 384
	mov	rax, rdi
	or	rax, 416
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	rax, rdi
	mov	rcx, rdi
	mov	qword ptr [rsp + 24], rdi       # 8-byte Spill
	or	rax, 448
	mov	qword ptr [rsp + 16], rax       # 8-byte Spill
	or	rcx, 480
	mov	qword ptr [rsp + 48], rcx       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r13], 1
	pinsrb	xmm15, byte ptr [rsi + r8], 2
	pinsrb	xmm15, byte ptr [rsi + rdx], 3
	mov	rdi, r9
	mov	qword ptr [rsp + 56], r9        # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r9], 4
	pinsrb	xmm15, byte ptr [rsi + r12], 5
	mov	r9, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r9], 6
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r13], 7
	mov	qword ptr [rsp + 32], r11       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rsi + r11], 8
	pinsrb	xmm15, byte ptr [rsi + r14], 9
	pinsrb	xmm15, byte ptr [rsi + r10], 10
	pinsrb	xmm15, byte ptr [rsi + r15], 11
	pinsrb	xmm15, byte ptr [rsi + rbx], 12
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdx], 13
	pinsrb	xmm15, byte ptr [rsi + rax], 14
	pinsrb	xmm15, byte ptr [rsi + rcx], 15
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r11 + 1], 1
	pinsrb	xmm5, byte ptr [rsi + r8 + 1], 2
	mov	r11, r8
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r8 + 1], 3
	pinsrb	xmm5, byte ptr [rsi + rdi + 1], 4
	pinsrb	xmm5, byte ptr [rsi + r12 + 1], 5
	mov	rdi, r12
	pinsrb	xmm5, byte ptr [rsi + r9 + 1], 6
	pinsrb	xmm5, byte ptr [rsi + r13 + 1], 7
	mov	r12, r13
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 1], 8
	pinsrb	xmm5, byte ptr [rsi + r14 + 1], 9
	mov	r9, r14
	pinsrb	xmm5, byte ptr [rsi + r10 + 1], 10
	pinsrb	xmm5, byte ptr [rsi + r15 + 1], 11
	pinsrb	xmm5, byte ptr [rsi + rbx + 1], 12
	mov	r13, rbx
	mov	qword ptr [rsp + 192], rbx      # 8-byte Spill
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r15 + 1], 13
	pinsrb	xmm5, byte ptr [rsi + rax + 1], 14
	pinsrb	xmm5, byte ptr [rsi + rcx + 1], 15
	movdqa	xmm9, xmmword ptr [rsp + 160]   # 16-byte Reload
	pcmpgtb	xmm5, xmm9
	movdqa	xmm7, xmm5
	movdqa	xmm4, xmmword ptr [rip + .LCPI7_10] # xmm4 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm7, xmm4
	psubb	xmm7, xmm5
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	ebx, byte ptr [rsi + rax + 15]
	movd	xmm14, ebx
	pcmpgtb	xmm15, xmm9
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdx + 2], 1
	pinsrb	xmm6, byte ptr [rsi + r11 + 2], 2
	mov	rcx, r8
	pinsrb	xmm6, byte ptr [rsi + r8 + 2], 3
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r14 + 2], 4
	pinsrb	xmm6, byte ptr [rsi + rdi + 2], 5
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r8 + 2], 6
	pinsrb	xmm6, byte ptr [rsi + r12 + 2], 7
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rbx + 2], 8
	mov	qword ptr [rsp + 176], r9       # 8-byte Spill
	pinsrb	xmm6, byte ptr [rsi + r9 + 2], 9
	pinsrb	xmm6, byte ptr [rsi + r10 + 2], 10
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r12 + 2], 11
	pinsrb	xmm6, byte ptr [rsi + r13 + 2], 12
	pinsrb	xmm6, byte ptr [rsi + r15 + 2], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rbx + 2], 14
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rbx + 2], 15
	pand	xmm15, xmm4
	pcmpgtb	xmm6, xmm9
	movdqa	xmm0, xmmword ptr [rip + .LCPI7_11] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm6, xmm0
	por	xmm6, xmm15
	movzx	ebx, byte ptr [rsi + rax + 16]
	movd	xmm15, ebx
	mov	rax, rdx
	pinsrb	xmm2, byte ptr [rsi + rdx + 3], 1
	mov	r13, r11
	pinsrb	xmm2, byte ptr [rsi + r11 + 3], 2
	mov	r11, rcx
	pinsrb	xmm2, byte ptr [rsi + rcx + 3], 3
	pinsrb	xmm2, byte ptr [rsi + r14 + 3], 4
	mov	rdx, rdi
	mov	qword ptr [rsp + 104], rdi      # 8-byte Spill
	pinsrb	xmm2, byte ptr [rsi + rdi + 3], 5
	mov	rcx, r8
	pinsrb	xmm2, byte ptr [rsi + r8 + 3], 6
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdi + 3], 7
	mov	r8, qword ptr [rsp + 32]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r8 + 3], 8
	pinsrb	xmm2, byte ptr [rsi + r9 + 3], 9
	pinsrb	xmm2, byte ptr [rsi + r10 + 3], 10
	pinsrb	xmm2, byte ptr [rsi + r12 + 3], 11
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r12 + 3], 12
	pinsrb	xmm2, byte ptr [rsi + r15 + 3], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rbx + 3], 14
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rbx + 3], 15
	pinsrb	xmm1, byte ptr [rsi + rax + 4], 1
	pinsrb	xmm1, byte ptr [rsi + r13 + 4], 2
	mov	qword ptr [rsp + 96], r13       # 8-byte Spill
	pinsrb	xmm1, byte ptr [rsi + r11 + 4], 3
	pinsrb	xmm1, byte ptr [rsi + r14 + 4], 4
	pinsrb	xmm1, byte ptr [rsi + rdx + 4], 5
	pinsrb	xmm1, byte ptr [rsi + rcx + 4], 6
	pinsrb	xmm1, byte ptr [rsi + rdi + 4], 7
	pinsrb	xmm1, byte ptr [rsi + r8 + 4], 8
	pinsrb	xmm1, byte ptr [rsi + r9 + 4], 9
	pinsrb	xmm1, byte ptr [rsi + r10 + 4], 10
	mov	qword ptr [rsp + 112], r10      # 8-byte Spill
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rax + 4], 11
	pinsrb	xmm1, byte ptr [rsi + r12 + 4], 12
	pinsrb	xmm1, byte ptr [rsi + r15 + 4], 13
	mov	r8, r15
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rdx + 4], 14
	pinsrb	xmm1, byte ptr [rsi + rbx + 4], 15
	por	xmm6, xmm7
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	ebx, byte ptr [rsi + rax + 17]
	movd	xmm0, ebx
	pcmpgtb	xmm2, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI7_12] # xmm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm2, xmm5
	pcmpgtb	xmm1, xmm9
	movdqa	xmm5, xmmword ptr [rip + .LCPI7_13] # xmm5 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm1, xmm5
	por	xmm1, xmm2
	movzx	ebx, byte ptr [rsi + rax + 18]
	movd	xmm5, ebx
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rcx + 5], 1
	pinsrb	xmm8, byte ptr [rsi + r13 + 5], 2
	pinsrb	xmm8, byte ptr [rsi + r11 + 5], 3
	pinsrb	xmm8, byte ptr [rsi + r14 + 5], 4
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdi + 5], 5
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rbx + 5], 6
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r9 + 5], 7
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r12 + 5], 8
	mov	r13, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r13 + 5], 9
	pinsrb	xmm8, byte ptr [rsi + r10 + 5], 10
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r15 + 5], 11
	mov	rbx, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rbx + 5], 12
	pinsrb	xmm8, byte ptr [rsi + r8 + 5], 13
	pinsrb	xmm8, byte ptr [rsi + rdx + 5], 14
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r14 + 5], 15
	pcmpgtb	xmm8, xmm9
	movdqa	xmm2, xmmword ptr [rip + .LCPI7_14] # xmm2 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm8, xmm2
	por	xmm8, xmm1
	movzx	ebx, byte ptr [rsi + rax + 19]
	movd	xmm7, ebx
	por	xmm8, xmm6
	movzx	ebx, byte ptr [rsi + rax + 20]
	movd	xmm6, ebx
	pinsrb	xmm3, byte ptr [rsi + rcx + 6], 1
	mov	r10, rcx
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 6], 2
	pinsrb	xmm3, byte ptr [rsi + r11 + 6], 3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 6], 4
	mov	r8, rdi
	pinsrb	xmm3, byte ptr [rsi + rdi + 6], 5
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 6], 6
	pinsrb	xmm3, byte ptr [rsi + r9 + 6], 7
	pinsrb	xmm3, byte ptr [rsi + r12 + 6], 8
	mov	r9, r12
	mov	rax, r13
	pinsrb	xmm3, byte ptr [rsi + r13 + 6], 9
	mov	rdi, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdi + 6], 10
	mov	rbx, r15
	pinsrb	xmm3, byte ptr [rsi + r15 + 6], 11
	mov	r12, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r12 + 6], 12
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 6], 13
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r15 + 6], 14
	pinsrb	xmm3, byte ptr [rsi + r14 + 6], 15
	movdqa	xmm2, xmmword ptr [rsp + 208]   # 16-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r10 + 7], 1
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r13 + 7], 2
	pinsrb	xmm2, byte ptr [rsi + r11 + 7], 3
	mov	r10, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r10 + 7], 4
	pinsrb	xmm2, byte ptr [rsi + r8 + 7], 5
	mov	rdx, r8
	pinsrb	xmm2, byte ptr [rsi + rcx + 7], 6
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 7], 7
	pinsrb	xmm2, byte ptr [rsi + r9 + 7], 8
	pinsrb	xmm2, byte ptr [rsi + rax + 7], 9
	pinsrb	xmm2, byte ptr [rsi + rdi + 7], 10
	pinsrb	xmm2, byte ptr [rsi + rbx + 7], 11
	pinsrb	xmm2, byte ptr [rsi + r12 + 7], 12
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r11 + 7], 13
	pinsrb	xmm2, byte ptr [rsi + r15 + 7], 14
	mov	rdi, r14
	pinsrb	xmm2, byte ptr [rsi + r14 + 7], 15
	pcmpgtb	xmm3, xmm9
	movdqa	xmm1, xmmword ptr [rip + .LCPI7_15] # xmm1 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm1
	pcmpgtb	xmm2, xmm9
	psllw	xmm2, 7
	movdqa	xmm1, xmmword ptr [rip + .LCPI7_6] # xmm1 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm2, xmm1
	por	xmm2, xmm3
	movdqa	xmm1, xmm2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	ebx, byte ptr [rsi + rax + 21]
	movd	xmm2, ebx
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rcx + 9], 1
	pinsrb	xmm10, byte ptr [rsi + r13 + 9], 2
	mov	r8, qword ptr [rsp + 120]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r8 + 9], 3
	pinsrb	xmm10, byte ptr [rsi + r10 + 9], 4
	pinsrb	xmm10, byte ptr [rsi + rdx + 9], 5
	mov	r14, rdx
	mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdx + 9], 6
	mov	r9, qword ptr [rsp + 72]        # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r9 + 9], 7
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rbx + 9], 8
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rbx + 9], 9
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r15 + 9], 10
	mov	rbx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rbx + 9], 11
	pinsrb	xmm10, byte ptr [rsi + r12 + 9], 12
	pinsrb	xmm10, byte ptr [rsi + r11 + 9], 13
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r10 + 9], 14
	pinsrb	xmm10, byte ptr [rsi + rdi + 9], 15
	por	xmm1, xmm8
	movdqa	xmmword ptr [rsp + 208], xmm1   # 16-byte Spill
	pcmpgtb	xmm10, xmm9
	movdqa	xmm1, xmm10
	movdqa	xmm8, xmm4
	pand	xmm1, xmm4
	psubb	xmm1, xmm10
	movzx	ebx, byte ptr [rsi + rax + 22]
	movd	xmm3, ebx
	movdqa	xmm4, xmmword ptr [rsp + 272]   # 16-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 8], 1
	mov	r11, rcx
	pinsrb	xmm4, byte ptr [rsi + r13 + 8], 2
	pinsrb	xmm4, byte ptr [rsi + r8 + 8], 3
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdi + 8], 4
	pinsrb	xmm4, byte ptr [rsi + r14 + 8], 5
	pinsrb	xmm4, byte ptr [rsi + rdx + 8], 6
	mov	rdx, r9
	pinsrb	xmm4, byte ptr [rsi + r9 + 8], 7
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r14 + 8], 8
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 8], 9
	mov	rbx, r15
	pinsrb	xmm4, byte ptr [rsi + r15 + 8], 10
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r15 + 8], 11
	pinsrb	xmm4, byte ptr [rsi + r12 + 8], 12
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 8], 13
	pinsrb	xmm4, byte ptr [rsi + r10 + 8], 14
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r9 + 8], 15
	pcmpgtb	xmm4, xmm9
	pand	xmm4, xmm8
	movdqa	xmm10, xmmword ptr [rsp + 144]  # 16-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r11 + 10], 1
	pinsrb	xmm10, byte ptr [rsi + r13 + 10], 2
	pinsrb	xmm10, byte ptr [rsi + r8 + 10], 3
	pinsrb	xmm10, byte ptr [rsi + rdi + 10], 4
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdi + 10], 5
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r8 + 10], 6
	pinsrb	xmm10, byte ptr [rsi + rdx + 10], 7
	mov	r11, r14
	pinsrb	xmm10, byte ptr [rsi + r14 + 10], 8
	pinsrb	xmm10, byte ptr [rsi + rax + 10], 9
	pinsrb	xmm10, byte ptr [rsi + rbx + 10], 10
	pinsrb	xmm10, byte ptr [rsi + r15 + 10], 11
	pinsrb	xmm10, byte ptr [rsi + r12 + 10], 12
	pinsrb	xmm10, byte ptr [rsi + rcx + 10], 13
	pinsrb	xmm10, byte ptr [rsi + r10 + 10], 14
	pinsrb	xmm10, byte ptr [rsi + r9 + 10], 15
	pcmpgtb	xmm10, xmm9
	pand	xmm10, xmmword ptr [rip + .LCPI7_11]
	por	xmm10, xmm4
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	ebx, byte ptr [rsi + rcx + 23]
	movd	xmm8, ebx
	por	xmm10, xmm1
	movdqa	xmmword ptr [rsp + 144], xmm10  # 16-byte Spill
	movzx	ebx, byte ptr [rsi + rcx + 24]
	movd	xmm10, ebx
	mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 11], 1
	pinsrb	xmm11, byte ptr [rsi + r13 + 11], 2
	mov	r14, r13
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rcx + 11], 3
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rcx + 11], 4
	mov	r13, rcx
	pinsrb	xmm11, byte ptr [rsi + rdi + 11], 5
	mov	rcx, r8
	pinsrb	xmm11, byte ptr [rsi + r8 + 11], 6
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdi + 11], 7
	mov	r8, r11
	pinsrb	xmm11, byte ptr [rsi + r11 + 11], 8
	mov	r9, rax
	pinsrb	xmm11, byte ptr [rsi + rax + 11], 9
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r10 + 11], 10
	pinsrb	xmm11, byte ptr [rsi + r15 + 11], 11
	pinsrb	xmm11, byte ptr [rsi + r12 + 11], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rax + 11], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rbx + 11], 14
	mov	r11, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r11 + 11], 15
	pinsrb	xmm13, byte ptr [rsi + rdx + 12], 1
	pinsrb	xmm13, byte ptr [rsi + r14 + 12], 2
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r14 + 12], 3
	pinsrb	xmm13, byte ptr [rsi + r13 + 12], 4
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r13 + 12], 5
	pinsrb	xmm13, byte ptr [rsi + rcx + 12], 6
	pinsrb	xmm13, byte ptr [rsi + rdi + 12], 7
	pinsrb	xmm13, byte ptr [rsi + r8 + 12], 8
	pinsrb	xmm13, byte ptr [rsi + r9 + 12], 9
	pinsrb	xmm13, byte ptr [rsi + r10 + 12], 10
	pinsrb	xmm13, byte ptr [rsi + r15 + 12], 11
	pinsrb	xmm13, byte ptr [rsi + r12 + 12], 12
	pinsrb	xmm13, byte ptr [rsi + rax + 12], 13
	mov	r13, rax
	pinsrb	xmm13, byte ptr [rsi + rbx + 12], 14
	mov	rax, r11
	pinsrb	xmm13, byte ptr [rsi + r11 + 12], 15
	pinsrb	xmm12, byte ptr [rsi + rdx + 13], 1
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r11 + 13], 2
	pinsrb	xmm12, byte ptr [rsi + r14 + 13], 3
	mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rdx + 13], 4
	mov	rdx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rdx + 13], 5
	pinsrb	xmm12, byte ptr [rsi + rcx + 13], 6
	pinsrb	xmm12, byte ptr [rsi + rdi + 13], 7
	pinsrb	xmm12, byte ptr [rsi + r8 + 13], 8
	pinsrb	xmm12, byte ptr [rsi + r9 + 13], 9
	pinsrb	xmm12, byte ptr [rsi + r10 + 13], 10
	pinsrb	xmm12, byte ptr [rsi + r15 + 13], 11
	pinsrb	xmm12, byte ptr [rsi + r12 + 13], 12
	mov	rdi, r13
	pinsrb	xmm12, byte ptr [rsi + r13 + 13], 13
	pinsrb	xmm12, byte ptr [rsi + rbx + 13], 14
	pinsrb	xmm12, byte ptr [rsi + rax + 13], 15
	pcmpgtb	xmm11, xmm9
	pand	xmm11, xmmword ptr [rip + .LCPI7_12]
	pcmpgtb	xmm13, xmm9
	pand	xmm13, xmmword ptr [rip + .LCPI7_13]
	por	xmm13, xmm11
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	ebx, byte ptr [rsi + rax + 25]
	movd	xmm1, ebx
	pcmpgtb	xmm12, xmm9
	pand	xmm12, xmmword ptr [rip + .LCPI7_14]
	por	xmm12, xmm13
	movzx	ebx, byte ptr [rsi + rax + 26]
	movd	xmm11, ebx
	movdqa	xmm4, xmmword ptr [rsp + 304]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 14], 1
	mov	r13, r11
	pinsrb	xmm4, byte ptr [rsi + r11 + 14], 2
	mov	r11, r14
	pinsrb	xmm4, byte ptr [rsi + r14 + 14], 3
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r14 + 14], 4
	mov	rax, rdx
	pinsrb	xmm4, byte ptr [rsi + rdx + 14], 5
	pinsrb	xmm4, byte ptr [rsi + rcx + 14], 6
	mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 14], 7
	pinsrb	xmm4, byte ptr [rsi + r8 + 14], 8
	pinsrb	xmm4, byte ptr [rsi + r9 + 14], 9
	mov	rbx, r10
	pinsrb	xmm4, byte ptr [rsi + r10 + 14], 10
	pinsrb	xmm4, byte ptr [rsi + r15 + 14], 11
	pinsrb	xmm4, byte ptr [rsi + r12 + 14], 12
	pinsrb	xmm4, byte ptr [rsi + rdi + 14], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdi + 14], 14
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r10 + 14], 15
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdi + 15], 1
	pinsrb	xmm14, byte ptr [rsi + r13 + 15], 2
	pinsrb	xmm14, byte ptr [rsi + r11 + 15], 3
	pinsrb	xmm14, byte ptr [rsi + r14 + 15], 4
	pinsrb	xmm14, byte ptr [rsi + rax + 15], 5
	pinsrb	xmm14, byte ptr [rsi + rcx + 15], 6
	pinsrb	xmm14, byte ptr [rsi + rdx + 15], 7
	pinsrb	xmm14, byte ptr [rsi + r8 + 15], 8
	pinsrb	xmm14, byte ptr [rsi + r9 + 15], 9
	pinsrb	xmm14, byte ptr [rsi + rbx + 15], 10
	pinsrb	xmm14, byte ptr [rsi + r15 + 15], 11
	pinsrb	xmm14, byte ptr [rsi + r12 + 15], 12
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdi + 15], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdi + 15], 14
	pinsrb	xmm14, byte ptr [rsi + r10 + 15], 15
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdi + 16], 1
	pinsrb	xmm15, byte ptr [rsi + r13 + 16], 2
	pinsrb	xmm15, byte ptr [rsi + r11 + 16], 3
	pinsrb	xmm15, byte ptr [rsi + r14 + 16], 4
	pinsrb	xmm15, byte ptr [rsi + rax + 16], 5
	pinsrb	xmm15, byte ptr [rsi + rcx + 16], 6
	pinsrb	xmm15, byte ptr [rsi + rdx + 16], 7
	pinsrb	xmm15, byte ptr [rsi + r8 + 16], 8
	pinsrb	xmm15, byte ptr [rsi + r9 + 16], 9
	pinsrb	xmm15, byte ptr [rsi + rbx + 16], 10
	pinsrb	xmm15, byte ptr [rsi + r15 + 16], 11
	pinsrb	xmm15, byte ptr [rsi + r12 + 16], 12
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdi + 16], 13
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r10 + 16], 14
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdi + 17], 1
	pinsrb	xmm0, byte ptr [rsi + r13 + 17], 2
	pinsrb	xmm0, byte ptr [rsi + r11 + 17], 3
	pinsrb	xmm0, byte ptr [rsi + r14 + 17], 4
	pinsrb	xmm0, byte ptr [rsi + rax + 17], 5
	mov	r13, rax
	pinsrb	xmm0, byte ptr [rsi + rcx + 17], 6
	pinsrb	xmm0, byte ptr [rsi + rdx + 17], 7
	pinsrb	xmm0, byte ptr [rsi + r8 + 17], 8
	pinsrb	xmm0, byte ptr [rsi + r9 + 17], 9
	pinsrb	xmm0, byte ptr [rsi + rbx + 17], 10
	pinsrb	xmm0, byte ptr [rsi + r15 + 17], 11
	pinsrb	xmm0, byte ptr [rsi + r12 + 17], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 17], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdi + 17], 14
	por	xmm12, xmmword ptr [rsp + 144]  # 16-byte Folded Reload
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	ebx, byte ptr [rsi + rax + 27]
	movd	xmm9, ebx
	movdqa	xmm13, xmmword ptr [rsp + 160]  # 16-byte Reload
	pcmpgtb	xmm4, xmm13
	pand	xmm4, xmmword ptr [rip + .LCPI7_15]
	pcmpgtb	xmm14, xmm13
	psllw	xmm14, 7
	pand	xmm14, xmmword ptr [rip + .LCPI7_6]
	por	xmm14, xmm4
	movzx	ebx, byte ptr [rsi + rax + 28]
	movd	xmm4, ebx
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r10 + 17], 15
	por	xmm14, xmm12
	pcmpgtb	xmm0, xmm13
	movdqa	xmm13, xmm0
	movdqa	xmm12, xmmword ptr [rip + .LCPI7_10] # xmm12 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm13, xmm12
	psubb	xmm13, xmm0
	movdqa	xmmword ptr [rsp + 144], xmm13  # 16-byte Spill
	movzx	ebx, byte ptr [rsi + rax + 29]
	movd	xmm13, ebx
	pinsrb	xmm15, byte ptr [rsi + r10 + 16], 15
	movdqa	xmm0, xmmword ptr [rsp + 160]   # 16-byte Reload
	pcmpgtb	xmm15, xmm0
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rbx + 18], 1
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rbx + 18], 2
	pinsrb	xmm5, byte ptr [rsi + r11 + 18], 3
	pinsrb	xmm5, byte ptr [rsi + r14 + 18], 4
	pinsrb	xmm5, byte ptr [rsi + r13 + 18], 5
	pinsrb	xmm5, byte ptr [rsi + rcx + 18], 6
	pinsrb	xmm5, byte ptr [rsi + rdx + 18], 7
	pinsrb	xmm5, byte ptr [rsi + r8 + 18], 8
	pinsrb	xmm5, byte ptr [rsi + r9 + 18], 9
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 18], 10
	pinsrb	xmm5, byte ptr [rsi + r15 + 18], 11
	pinsrb	xmm5, byte ptr [rsi + r12 + 18], 12
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rbx + 18], 13
	pinsrb	xmm5, byte ptr [rsi + rdi + 18], 14
	pand	xmm15, xmm12
	pinsrb	xmm5, byte ptr [rsi + r10 + 18], 15
	pcmpgtb	xmm5, xmm0
	pand	xmm5, xmmword ptr [rip + .LCPI7_11]
	por	xmm5, xmm15
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	movzx	ebx, byte ptr [rsi + rdi + 30]
	movd	xmm12, ebx
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rbx + 19], 1
	pinsrb	xmm6, byte ptr [rsi + rbx + 20], 1
	pinsrb	xmm2, byte ptr [rsi + rbx + 21], 1
	pinsrb	xmm3, byte ptr [rsi + rbx + 22], 1
	pinsrb	xmm8, byte ptr [rsi + rbx + 23], 1
	pinsrb	xmm10, byte ptr [rsi + rbx + 24], 1
	pinsrb	xmm1, byte ptr [rsi + rbx + 25], 1
	pinsrb	xmm11, byte ptr [rsi + rbx + 26], 1
	pinsrb	xmm9, byte ptr [rsi + rbx + 27], 1
	pinsrb	xmm4, byte ptr [rsi + rbx + 28], 1
	pinsrb	xmm13, byte ptr [rsi + rbx + 29], 1
	pinsrb	xmm12, byte ptr [rsi + rbx + 30], 1
	movzx	edi, byte ptr [rsi + rdi + 31]
	movd	xmm0, edi
	pinsrb	xmm0, byte ptr [rsi + rbx + 31], 1
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 19], 2
	pinsrb	xmm6, byte ptr [rsi + rdi + 20], 2
	pinsrb	xmm2, byte ptr [rsi + rdi + 21], 2
	pinsrb	xmm3, byte ptr [rsi + rdi + 22], 2
	pinsrb	xmm8, byte ptr [rsi + rdi + 23], 2
	pinsrb	xmm10, byte ptr [rsi + rdi + 24], 2
	pinsrb	xmm1, byte ptr [rsi + rdi + 25], 2
	pinsrb	xmm11, byte ptr [rsi + rdi + 26], 2
	pinsrb	xmm9, byte ptr [rsi + rdi + 27], 2
	pinsrb	xmm4, byte ptr [rsi + rdi + 28], 2
	pinsrb	xmm13, byte ptr [rsi + rdi + 29], 2
	pinsrb	xmm12, byte ptr [rsi + rdi + 30], 2
	pinsrb	xmm0, byte ptr [rsi + rdi + 31], 2
	pinsrb	xmm7, byte ptr [rsi + r11 + 19], 3
	pinsrb	xmm7, byte ptr [rsi + r14 + 19], 4
	pinsrb	xmm7, byte ptr [rsi + r13 + 19], 5
	pinsrb	xmm7, byte ptr [rsi + rcx + 19], 6
	pinsrb	xmm7, byte ptr [rsi + rdx + 19], 7
	pinsrb	xmm7, byte ptr [rsi + r8 + 19], 8
	pinsrb	xmm7, byte ptr [rsi + r9 + 19], 9
	pinsrb	xmm7, byte ptr [rsi + rax + 19], 10
	pinsrb	xmm7, byte ptr [rsi + r15 + 19], 11
	pinsrb	xmm7, byte ptr [rsi + r12 + 19], 12
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 19], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rbx + 19], 14
	pinsrb	xmm7, byte ptr [rsi + r10 + 19], 15
	pinsrb	xmm6, byte ptr [rsi + r11 + 20], 3
	pinsrb	xmm6, byte ptr [rsi + r14 + 20], 4
	pinsrb	xmm6, byte ptr [rsi + r13 + 20], 5
	pinsrb	xmm6, byte ptr [rsi + rcx + 20], 6
	pinsrb	xmm6, byte ptr [rsi + rdx + 20], 7
	pinsrb	xmm6, byte ptr [rsi + r8 + 20], 8
	pinsrb	xmm6, byte ptr [rsi + r9 + 20], 9
	pinsrb	xmm6, byte ptr [rsi + rax + 20], 10
	pinsrb	xmm6, byte ptr [rsi + r15 + 20], 11
	pinsrb	xmm6, byte ptr [rsi + r12 + 20], 12
	pinsrb	xmm6, byte ptr [rsi + rdi + 20], 13
	pinsrb	xmm6, byte ptr [rsi + rbx + 20], 14
	por	xmm5, xmmword ptr [rsp + 144]   # 16-byte Folded Reload
	pinsrb	xmm6, byte ptr [rsi + r10 + 20], 15
	movdqa	xmm15, xmmword ptr [rsp + 160]  # 16-byte Reload
	pcmpgtb	xmm7, xmm15
	pand	xmm7, xmmword ptr [rip + .LCPI7_12]
	pcmpgtb	xmm6, xmm15
	pand	xmm6, xmmword ptr [rip + .LCPI7_13]
	por	xmm6, xmm7
	pinsrb	xmm2, byte ptr [rsi + r11 + 21], 3
	pinsrb	xmm2, byte ptr [rsi + r14 + 21], 4
	pinsrb	xmm2, byte ptr [rsi + r13 + 21], 5
	pinsrb	xmm2, byte ptr [rsi + rcx + 21], 6
	pinsrb	xmm2, byte ptr [rsi + rdx + 21], 7
	pinsrb	xmm2, byte ptr [rsi + r8 + 21], 8
	pinsrb	xmm2, byte ptr [rsi + r9 + 21], 9
	pinsrb	xmm2, byte ptr [rsi + rax + 21], 10
	pinsrb	xmm2, byte ptr [rsi + r15 + 21], 11
	pinsrb	xmm2, byte ptr [rsi + r12 + 21], 12
	pinsrb	xmm2, byte ptr [rsi + rdi + 21], 13
	pinsrb	xmm2, byte ptr [rsi + rbx + 21], 14
	pinsrb	xmm2, byte ptr [rsi + r10 + 21], 15
	pcmpgtb	xmm2, xmm15
	movdqa	xmm7, xmmword ptr [rip + .LCPI7_14] # xmm7 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm2, xmm7
	por	xmm2, xmm6
	por	xmm2, xmm5
	pinsrb	xmm3, byte ptr [rsi + r11 + 22], 3
	pinsrb	xmm3, byte ptr [rsi + r14 + 22], 4
	pinsrb	xmm3, byte ptr [rsi + r13 + 22], 5
	pinsrb	xmm3, byte ptr [rsi + rcx + 22], 6
	pinsrb	xmm3, byte ptr [rsi + rdx + 22], 7
	pinsrb	xmm3, byte ptr [rsi + r8 + 22], 8
	pinsrb	xmm3, byte ptr [rsi + r9 + 22], 9
	pinsrb	xmm3, byte ptr [rsi + rax + 22], 10
	pinsrb	xmm3, byte ptr [rsi + r15 + 22], 11
	pinsrb	xmm3, byte ptr [rsi + r12 + 22], 12
	pinsrb	xmm3, byte ptr [rsi + rdi + 22], 13
	pinsrb	xmm3, byte ptr [rsi + rbx + 22], 14
	pinsrb	xmm3, byte ptr [rsi + r10 + 22], 15
	pinsrb	xmm8, byte ptr [rsi + r11 + 23], 3
	pinsrb	xmm8, byte ptr [rsi + r14 + 23], 4
	pinsrb	xmm8, byte ptr [rsi + r13 + 23], 5
	pinsrb	xmm8, byte ptr [rsi + rcx + 23], 6
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 7
	pinsrb	xmm8, byte ptr [rsi + r8 + 23], 8
	pinsrb	xmm8, byte ptr [rsi + r9 + 23], 9
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 10
	pinsrb	xmm8, byte ptr [rsi + r15 + 23], 11
	pinsrb	xmm8, byte ptr [rsi + r12 + 23], 12
	pinsrb	xmm8, byte ptr [rsi + rdi + 23], 13
	pinsrb	xmm8, byte ptr [rsi + rbx + 23], 14
	pinsrb	xmm8, byte ptr [rsi + r10 + 23], 15
	pcmpgtb	xmm3, xmm15
	movdqa	xmm5, xmmword ptr [rip + .LCPI7_15] # xmm5 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm3, xmm5
	pcmpgtb	xmm8, xmm15
	psllw	xmm8, 7
	movdqa	xmm6, xmmword ptr [rip + .LCPI7_6] # xmm6 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm8, xmm6
	por	xmm8, xmm3
	pinsrb	xmm1, byte ptr [rsi + r11 + 25], 3
	pinsrb	xmm1, byte ptr [rsi + r14 + 25], 4
	pinsrb	xmm1, byte ptr [rsi + r13 + 25], 5
	pinsrb	xmm1, byte ptr [rsi + rcx + 25], 6
	pinsrb	xmm1, byte ptr [rsi + rdx + 25], 7
	pinsrb	xmm1, byte ptr [rsi + r8 + 25], 8
	pinsrb	xmm1, byte ptr [rsi + r9 + 25], 9
	pinsrb	xmm1, byte ptr [rsi + rax + 25], 10
	pinsrb	xmm1, byte ptr [rsi + r15 + 25], 11
	pinsrb	xmm1, byte ptr [rsi + r12 + 25], 12
	pinsrb	xmm1, byte ptr [rsi + rdi + 25], 13
	pinsrb	xmm1, byte ptr [rsi + rbx + 25], 14
	pinsrb	xmm1, byte ptr [rsi + r10 + 25], 15
	por	xmm8, xmm2
	pcmpgtb	xmm1, xmm15
	movdqa	xmm2, xmm1
	movdqa	xmm3, xmmword ptr [rip + .LCPI7_10] # xmm3 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm2, xmm3
	psubb	xmm2, xmm1
	pinsrb	xmm10, byte ptr [rsi + r11 + 24], 3
	pinsrb	xmm10, byte ptr [rsi + r14 + 24], 4
	pinsrb	xmm10, byte ptr [rsi + r13 + 24], 5
	pinsrb	xmm10, byte ptr [rsi + rcx + 24], 6
	pinsrb	xmm10, byte ptr [rsi + rdx + 24], 7
	pinsrb	xmm10, byte ptr [rsi + r8 + 24], 8
	pinsrb	xmm10, byte ptr [rsi + r9 + 24], 9
	pinsrb	xmm10, byte ptr [rsi + rax + 24], 10
	pinsrb	xmm10, byte ptr [rsi + r15 + 24], 11
	pinsrb	xmm10, byte ptr [rsi + r12 + 24], 12
	pinsrb	xmm10, byte ptr [rsi + rdi + 24], 13
	pinsrb	xmm10, byte ptr [rsi + rbx + 24], 14
	pinsrb	xmm10, byte ptr [rsi + r10 + 24], 15
	pcmpgtb	xmm10, xmm15
	pand	xmm10, xmm3
	pinsrb	xmm11, byte ptr [rsi + r11 + 26], 3
	pinsrb	xmm11, byte ptr [rsi + r14 + 26], 4
	pinsrb	xmm11, byte ptr [rsi + r13 + 26], 5
	pinsrb	xmm11, byte ptr [rsi + rcx + 26], 6
	pinsrb	xmm11, byte ptr [rsi + rdx + 26], 7
	pinsrb	xmm11, byte ptr [rsi + r8 + 26], 8
	pinsrb	xmm11, byte ptr [rsi + r9 + 26], 9
	pinsrb	xmm11, byte ptr [rsi + rax + 26], 10
	pinsrb	xmm11, byte ptr [rsi + r15 + 26], 11
	pinsrb	xmm11, byte ptr [rsi + r12 + 26], 12
	pinsrb	xmm11, byte ptr [rsi + rdi + 26], 13
	pinsrb	xmm11, byte ptr [rsi + rbx + 26], 14
	pinsrb	xmm11, byte ptr [rsi + r10 + 26], 15
	pcmpgtb	xmm11, xmm15
	pand	xmm11, xmmword ptr [rip + .LCPI7_11]
	por	xmm11, xmm10
	por	xmm11, xmm2
	pinsrb	xmm9, byte ptr [rsi + r11 + 27], 3
	pinsrb	xmm9, byte ptr [rsi + r14 + 27], 4
	pinsrb	xmm9, byte ptr [rsi + r13 + 27], 5
	pinsrb	xmm9, byte ptr [rsi + rcx + 27], 6
	pinsrb	xmm9, byte ptr [rsi + rdx + 27], 7
	pinsrb	xmm9, byte ptr [rsi + r8 + 27], 8
	pinsrb	xmm9, byte ptr [rsi + r9 + 27], 9
	pinsrb	xmm9, byte ptr [rsi + rax + 27], 10
	pinsrb	xmm9, byte ptr [rsi + r15 + 27], 11
	pinsrb	xmm9, byte ptr [rsi + r12 + 27], 12
	pinsrb	xmm9, byte ptr [rsi + rdi + 27], 13
	pinsrb	xmm9, byte ptr [rsi + rbx + 27], 14
	pinsrb	xmm9, byte ptr [rsi + r10 + 27], 15
	pinsrb	xmm4, byte ptr [rsi + r11 + 28], 3
	pinsrb	xmm4, byte ptr [rsi + r14 + 28], 4
	pinsrb	xmm4, byte ptr [rsi + r13 + 28], 5
	pinsrb	xmm4, byte ptr [rsi + rcx + 28], 6
	pinsrb	xmm4, byte ptr [rsi + rdx + 28], 7
	pinsrb	xmm4, byte ptr [rsi + r8 + 28], 8
	pinsrb	xmm4, byte ptr [rsi + r9 + 28], 9
	pinsrb	xmm4, byte ptr [rsi + rax + 28], 10
	pinsrb	xmm4, byte ptr [rsi + r15 + 28], 11
	pinsrb	xmm4, byte ptr [rsi + r12 + 28], 12
	pinsrb	xmm4, byte ptr [rsi + rdi + 28], 13
	pinsrb	xmm4, byte ptr [rsi + rbx + 28], 14
	pinsrb	xmm4, byte ptr [rsi + r10 + 28], 15
	pinsrb	xmm13, byte ptr [rsi + r11 + 29], 3
	pinsrb	xmm13, byte ptr [rsi + r14 + 29], 4
	pinsrb	xmm13, byte ptr [rsi + r13 + 29], 5
	pinsrb	xmm13, byte ptr [rsi + rcx + 29], 6
	pinsrb	xmm13, byte ptr [rsi + rdx + 29], 7
	pinsrb	xmm13, byte ptr [rsi + r8 + 29], 8
	pinsrb	xmm13, byte ptr [rsi + r9 + 29], 9
	pinsrb	xmm13, byte ptr [rsi + rax + 29], 10
	pinsrb	xmm13, byte ptr [rsi + r15 + 29], 11
	pinsrb	xmm13, byte ptr [rsi + r12 + 29], 12
	pinsrb	xmm13, byte ptr [rsi + rdi + 29], 13
	pinsrb	xmm13, byte ptr [rsi + rbx + 29], 14
	movdqa	xmm1, xmm15
	pcmpgtb	xmm9, xmm15
	pand	xmm9, xmmword ptr [rip + .LCPI7_12]
	pcmpgtb	xmm4, xmm15
	pand	xmm4, xmmword ptr [rip + .LCPI7_13]
	por	xmm4, xmm9
	pinsrb	xmm13, byte ptr [rsi + r10 + 29], 15
	pcmpgtb	xmm13, xmm15
	pand	xmm13, xmm7
	por	xmm13, xmm4
	pinsrb	xmm12, byte ptr [rsi + r11 + 30], 3
	pinsrb	xmm0, byte ptr [rsi + r11 + 31], 3
	pinsrb	xmm12, byte ptr [rsi + r14 + 30], 4
	pinsrb	xmm0, byte ptr [rsi + r14 + 31], 4
	pinsrb	xmm12, byte ptr [rsi + r13 + 30], 5
	pinsrb	xmm0, byte ptr [rsi + r13 + 31], 5
	pinsrb	xmm12, byte ptr [rsi + rcx + 30], 6
	pinsrb	xmm0, byte ptr [rsi + rcx + 31], 6
	pinsrb	xmm12, byte ptr [rsi + rdx + 30], 7
	pinsrb	xmm0, byte ptr [rsi + rdx + 31], 7
	pinsrb	xmm12, byte ptr [rsi + r8 + 30], 8
	pinsrb	xmm0, byte ptr [rsi + r8 + 31], 8
	pinsrb	xmm12, byte ptr [rsi + r9 + 30], 9
	pinsrb	xmm0, byte ptr [rsi + r9 + 31], 9
	pinsrb	xmm12, byte ptr [rsi + rax + 30], 10
	pinsrb	xmm0, byte ptr [rsi + rax + 31], 10
	pinsrb	xmm12, byte ptr [rsi + r15 + 30], 11
	pinsrb	xmm0, byte ptr [rsi + r15 + 31], 11
	pinsrb	xmm12, byte ptr [rsi + r12 + 30], 12
	pinsrb	xmm0, byte ptr [rsi + r12 + 31], 12
	pinsrb	xmm12, byte ptr [rsi + rdi + 30], 13
	pinsrb	xmm0, byte ptr [rsi + rdi + 31], 13
	pinsrb	xmm12, byte ptr [rsi + rbx + 30], 14
	pinsrb	xmm0, byte ptr [rsi + rbx + 31], 14
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r10 + 30], 15
	pinsrb	xmm0, byte ptr [rsi + r10 + 31], 15
	por	xmm13, xmm11
	pcmpgtb	xmm12, xmm15
	pand	xmm12, xmm5
	pcmpgtb	xmm0, xmm15
	psllw	xmm0, 7
	pand	xmm0, xmm6
	por	xmm0, xmm12
	por	xmm0, xmm13
	movdqa	xmm1, xmm8
	punpcklbw	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	movdqa	xmm4, xmmword ptr [rsp + 208]   # 16-byte Reload
	movdqa	xmm2, xmm4
	punpcklbw	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0],xmm2[1],xmm14[1],xmm2[2],xmm14[2],xmm2[3],xmm14[3],xmm2[4],xmm14[4],xmm2[5],xmm14[5],xmm2[6],xmm14[6],xmm2[7],xmm14[7]
	movdqa	xmm3, xmm2
	punpcklwd	xmm3, xmm1              # xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1],xmm3[2],xmm1[2],xmm3[3],xmm1[3]
	punpckhwd	xmm2, xmm1              # xmm2 = xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
	punpckhbw	xmm8, xmm0              # xmm8 = xmm8[8],xmm0[8],xmm8[9],xmm0[9],xmm8[10],xmm0[10],xmm8[11],xmm0[11],xmm8[12],xmm0[12],xmm8[13],xmm0[13],xmm8[14],xmm0[14],xmm8[15],xmm0[15]
	punpckhbw	xmm4, xmm14             # xmm4 = xmm4[8],xmm14[8],xmm4[9],xmm14[9],xmm4[10],xmm14[10],xmm4[11],xmm14[11],xmm4[12],xmm14[12],xmm4[13],xmm14[13],xmm4[14],xmm14[14],xmm4[15],xmm14[15]
	movdqa	xmm0, xmm4
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm4, xmm8              # xmm4 = xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movdqu	xmmword ptr [rax + 4*rcx + 48], xmm4
	movdqu	xmmword ptr [rax + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [rax + 4*rcx + 16], xmm2
	movdqu	xmmword ptr [rax + 4*rcx], xmm3
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 232]      # 8-byte Folded Reload
	jne	.LBB7_85
# %bb.86:
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	r14b, byte ptr [rsp]            # 1-byte Reload
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	jne	.LBB7_87
	jmp	.LBB7_90
.LBB7_66:
	and	r10, -16
	mov	rax, r10
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 320], rax      # 8-byte Spill
	mov	qword ptr [rsp + 232], r10      # 8-byte Spill
	lea	rax, [r12 + 4*r10]
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 288], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_67:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 144], rax      # 8-byte Spill
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	shl	rax, 5
	mov	rdx, rax
	mov	r12, rax
	mov	r11, rax
	mov	rdi, rax
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	mov	r9, rax
	mov	r15, rax
	mov	r10, rax
	mov	r14, rax
	mov	r8, rax
	mov	qword ptr [rsp + 104], rax      # 8-byte Spill
	movzx	ecx, byte ptr [rsi + rax]
	movd	xmm10, ecx
	movzx	ecx, byte ptr [rsi + rax + 1]
	movd	xmm4, ecx
	movzx	ecx, byte ptr [rsi + rax + 2]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rsi + rax + 3]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rsi + rax + 4]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [rsi + rax + 5]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [rsi + rax + 6]
	movd	xmm0, ecx
	movzx	ecx, byte ptr [rsi + rax + 7]
	movd	xmm1, ecx
	movdqa	xmmword ptr [rsp + 176], xmm1   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rax + 8]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [rsi + rax + 9]
	movd	xmm1, ecx
	movdqa	xmmword ptr [rsp + 192], xmm1   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rax + 10]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rsi + rax + 11]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rsi + rax + 12]
	movd	xmm1, ecx
	movdqa	xmmword ptr [rsp + 304], xmm1   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rax + 16]
	movd	xmm13, ecx
	mov	qword ptr [rsp + 96], rax       # 8-byte Spill
	movzx	ecx, byte ptr [rsi + rax + 24]
	movd	xmm15, ecx
	mov	r13, rax
	or	r13, 32
	mov	qword ptr [rsp + 56], r13       # 8-byte Spill
	or	rdx, 64
	mov	qword ptr [rsp + 88], rdx       # 8-byte Spill
	or	r12, 96
	mov	qword ptr [rsp + 16], r12       # 8-byte Spill
	or	r11, 128
	or	rdi, 160
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	or	rcx, 192
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	or	r9, 224
	or	r15, 256
	mov	qword ptr [rsp + 112], r15      # 8-byte Spill
	or	r10, 288
	mov	qword ptr [rsp + 120], r10      # 8-byte Spill
	or	r14, 320
	or	r8, 352
	mov	qword ptr [rsp + 208], r8       # 8-byte Spill
	mov	r8, qword ptr [rsp + 104]       # 8-byte Reload
	or	r8, 384
	mov	rbx, rax
	or	rbx, 416
	mov	qword ptr [rsp], rbx            # 8-byte Spill
	mov	rbx, rax
	or	rbx, 448
	mov	qword ptr [rsp + 24], rbx       # 8-byte Spill
	mov	rbx, rax
	or	rbx, 480
	mov	qword ptr [rsp + 32], rbx       # 8-byte Spill
	pinsrb	xmm10, byte ptr [rsi + r13], 1
	pinsrb	xmm10, byte ptr [rsi + rdx], 2
	pinsrb	xmm10, byte ptr [rsi + r12], 3
	mov	r12, r11
	mov	qword ptr [rsp + 48], r11       # 8-byte Spill
	pinsrb	xmm10, byte ptr [rsi + r11], 4
	pinsrb	xmm10, byte ptr [rsi + rdi], 5
	mov	qword ptr [rsp + 64], rdi       # 8-byte Spill
	pinsrb	xmm10, byte ptr [rsi + rcx], 6
	pinsrb	xmm10, byte ptr [rsi + r9], 7
	mov	r11, r9
	pinsrb	xmm10, byte ptr [rsi + r15], 8
	pinsrb	xmm10, byte ptr [rsi + r10], 9
	pinsrb	xmm10, byte ptr [rsi + r14], 10
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r13], 11
	pinsrb	xmm10, byte ptr [rsi + r8], 12
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax], 13
	mov	r15, rax
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax], 14
	pinsrb	xmm10, byte ptr [rsi + rbx], 15
	movdqa	xmm8, xmm10
	movdqa	xmm12, xmmword ptr [rsp + 288]  # 16-byte Reload
	pminub	xmm8, xmm12
	pcmpeqb	xmm8, xmm10
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r9 + 1], 1
	pinsrb	xmm4, byte ptr [rsi + rdx + 1], 2
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rbx + 1], 3
	pinsrb	xmm4, byte ptr [rsi + r12 + 1], 4
	pinsrb	xmm4, byte ptr [rsi + rdi + 1], 5
	pinsrb	xmm4, byte ptr [rsi + rcx + 1], 6
	pinsrb	xmm4, byte ptr [rsi + r11 + 1], 7
	mov	r10, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r10 + 1], 8
	mov	rbx, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rbx + 1], 9
	pinsrb	xmm4, byte ptr [rsi + r14 + 1], 10
	pinsrb	xmm4, byte ptr [rsi + r13 + 1], 11
	pinsrb	xmm4, byte ptr [rsi + r8 + 1], 12
	pinsrb	xmm4, byte ptr [rsi + r15 + 1], 13
	pinsrb	xmm4, byte ptr [rsi + rax + 1], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 1], 15
	pinsrb	xmm6, byte ptr [rsi + r9 + 2], 1
	pinsrb	xmm6, byte ptr [rsi + rdx + 2], 2
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r15 + 2], 3
	pinsrb	xmm6, byte ptr [rsi + r12 + 2], 4
	pinsrb	xmm6, byte ptr [rsi + rdi + 2], 5
	pinsrb	xmm6, byte ptr [rsi + rcx + 2], 6
	pinsrb	xmm6, byte ptr [rsi + r11 + 2], 7
	pinsrb	xmm6, byte ptr [rsi + r10 + 2], 8
	pinsrb	xmm6, byte ptr [rsi + rbx + 2], 9
	pinsrb	xmm6, byte ptr [rsi + r14 + 2], 10
	pinsrb	xmm6, byte ptr [rsi + r13 + 2], 11
	pinsrb	xmm6, byte ptr [rsi + r8 + 2], 12
	mov	rdi, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdi + 2], 13
	mov	r15, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r15 + 2], 14
	pinsrb	xmm6, byte ptr [rsi + rax + 2], 15
	pinsrb	xmm14, byte ptr [rsi + r9 + 8], 1
	pinsrb	xmm14, byte ptr [rsi + rdx + 8], 2
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r15 + 8], 3
	pinsrb	xmm14, byte ptr [rsi + r12 + 8], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdi + 8], 5
	pinsrb	xmm14, byte ptr [rsi + rcx + 8], 6
	pinsrb	xmm14, byte ptr [rsi + r11 + 8], 7
	pinsrb	xmm14, byte ptr [rsi + r10 + 8], 8
	pinsrb	xmm14, byte ptr [rsi + rbx + 8], 9
	pinsrb	xmm14, byte ptr [rsi + r14 + 8], 10
	pinsrb	xmm14, byte ptr [rsi + r13 + 8], 11
	pinsrb	xmm14, byte ptr [rsi + r8 + 8], 12
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rax + 8], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rax + 8], 14
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r10 + 8], 15
	movdqa	xmm10, xmm14
	pminub	xmm10, xmm12
	pcmpeqb	xmm10, xmm14
	pinsrb	xmm13, byte ptr [rsi + r9 + 16], 1
	pinsrb	xmm13, byte ptr [rsi + rdx + 16], 2
	mov	r9, r15
	pinsrb	xmm13, byte ptr [rsi + r15 + 16], 3
	pinsrb	xmm13, byte ptr [rsi + r12 + 16], 4
	pinsrb	xmm13, byte ptr [rsi + rdi + 16], 5
	pinsrb	xmm13, byte ptr [rsi + rcx + 16], 6
	pinsrb	xmm13, byte ptr [rsi + r11 + 16], 7
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r15 + 16], 8
	pinsrb	xmm13, byte ptr [rsi + rbx + 16], 9
	pinsrb	xmm13, byte ptr [rsi + r14 + 16], 10
	pinsrb	xmm13, byte ptr [rsi + r13 + 16], 11
	pinsrb	xmm13, byte ptr [rsi + r8 + 16], 12
	mov	r12, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r12 + 16], 13
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rcx + 16], 14
	pinsrb	xmm13, byte ptr [rsi + r10 + 16], 15
	movdqa	xmm3, xmm13
	pminub	xmm3, xmm12
	pcmpeqb	xmm3, xmm13
	movdqa	xmmword ptr [rsp + 272], xmm3   # 16-byte Spill
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rax + 24], 1
	pinsrb	xmm15, byte ptr [rsi + rdx + 24], 2
	pinsrb	xmm15, byte ptr [rsi + r9 + 24], 3
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r9 + 24], 4
	pinsrb	xmm15, byte ptr [rsi + rdi + 24], 5
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rax + 24], 6
	pinsrb	xmm15, byte ptr [rsi + r11 + 24], 7
	pinsrb	xmm15, byte ptr [rsi + r15 + 24], 8
	pinsrb	xmm15, byte ptr [rsi + rbx + 24], 9
	pinsrb	xmm15, byte ptr [rsi + r14 + 24], 10
	pinsrb	xmm15, byte ptr [rsi + r13 + 24], 11
	pinsrb	xmm15, byte ptr [rsi + r8 + 24], 12
	pinsrb	xmm15, byte ptr [rsi + r12 + 24], 13
	mov	r15, r12
	pinsrb	xmm15, byte ptr [rsi + rcx + 24], 14
	mov	rax, rcx
	pinsrb	xmm15, byte ptr [rsi + r10 + 24], 15
	movdqa	xmm3, xmm15
	pminub	xmm3, xmm12
	pcmpeqb	xmm3, xmm15
	movdqa	xmmword ptr [rsp + 240], xmm3   # 16-byte Spill
	movdqa	xmm14, xmm4
	pminub	xmm14, xmm12
	pcmpeqb	xmm14, xmm4
	movdqa	xmm13, xmm14
	movdqa	xmm4, xmmword ptr [rip + .LCPI7_10] # xmm4 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pandn	xmm13, xmm4
	paddb	xmm13, xmm14
	movdqa	xmm14, xmm6
	pminub	xmm14, xmm12
	pcmpeqb	xmm14, xmm6
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 13]
	movd	xmm6, edx
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r12 + 3], 1
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rcx + 3], 2
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 3], 3
	pinsrb	xmm5, byte ptr [rsi + r9 + 3], 4
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r10 + 3], 5
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 3], 6
	mov	qword ptr [rsp + 80], r11       # 8-byte Spill
	pinsrb	xmm5, byte ptr [rsi + r11 + 3], 7
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r9 + 3], 8
	pinsrb	xmm5, byte ptr [rsi + rbx + 3], 9
	mov	qword ptr [rsp + 160], r14      # 8-byte Spill
	pinsrb	xmm5, byte ptr [rsi + r14 + 3], 10
	pinsrb	xmm5, byte ptr [rsi + r13 + 3], 11
	pinsrb	xmm5, byte ptr [rsi + r8 + 3], 12
	pinsrb	xmm5, byte ptr [rsi + r15 + 3], 13
	pinsrb	xmm5, byte ptr [rsi + rax + 3], 14
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r15 + 3], 15
	pinsrb	xmm9, byte ptr [rsi + r12 + 4], 1
	pinsrb	xmm9, byte ptr [rsi + rcx + 4], 2
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdi + 4], 3
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdi + 4], 4
	pinsrb	xmm9, byte ptr [rsi + r10 + 4], 5
	pinsrb	xmm9, byte ptr [rsi + rdx + 4], 6
	pinsrb	xmm9, byte ptr [rsi + r11 + 4], 7
	pinsrb	xmm9, byte ptr [rsi + r9 + 4], 8
	pinsrb	xmm9, byte ptr [rsi + rbx + 4], 9
	pinsrb	xmm9, byte ptr [rsi + r14 + 4], 10
	pinsrb	xmm9, byte ptr [rsi + r13 + 4], 11
	pinsrb	xmm9, byte ptr [rsi + r8 + 4], 12
	mov	rdi, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rdi + 4], 13
	pinsrb	xmm9, byte ptr [rsi + rax + 4], 14
	pinsrb	xmm9, byte ptr [rsi + r15 + 4], 15
	pinsrb	xmm7, byte ptr [rsi + r12 + 5], 1
	pinsrb	xmm7, byte ptr [rsi + rcx + 5], 2
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 5], 3
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 5], 4
	pinsrb	xmm7, byte ptr [rsi + r10 + 5], 5
	pinsrb	xmm7, byte ptr [rsi + rdx + 5], 6
	pinsrb	xmm7, byte ptr [rsi + r11 + 5], 7
	pinsrb	xmm7, byte ptr [rsi + r9 + 5], 8
	pinsrb	xmm7, byte ptr [rsi + rbx + 5], 9
	pinsrb	xmm7, byte ptr [rsi + r14 + 5], 10
	pinsrb	xmm7, byte ptr [rsi + r13 + 5], 11
	pinsrb	xmm7, byte ptr [rsi + r8 + 5], 12
	mov	rdi, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 5], 13
	pinsrb	xmm7, byte ptr [rsi + rax + 5], 14
	pinsrb	xmm7, byte ptr [rsi + r15 + 5], 15
	pinsrb	xmm0, byte ptr [rsi + r12 + 6], 1
	pinsrb	xmm0, byte ptr [rsi + rcx + 6], 2
	mov	r15, rcx
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r12 + 6], 3
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx + 6], 4
	pinsrb	xmm0, byte ptr [rsi + r10 + 6], 5
	pinsrb	xmm0, byte ptr [rsi + rdx + 6], 6
	pinsrb	xmm0, byte ptr [rsi + r11 + 6], 7
	pinsrb	xmm0, byte ptr [rsi + r9 + 6], 8
	mov	r11, r9
	pinsrb	xmm0, byte ptr [rsi + rbx + 6], 9
	pinsrb	xmm0, byte ptr [rsi + r14 + 6], 10
	pinsrb	xmm0, byte ptr [rsi + r13 + 6], 11
	mov	r14, r13
	pinsrb	xmm0, byte ptr [rsi + r8 + 6], 12
	mov	r13, r8
	mov	r8, qword ptr [rsp]             # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r8 + 6], 13
	pandn	xmm8, xmm4
	pinsrb	xmm0, byte ptr [rsi + rax + 6], 14
	movdqa	xmm4, xmmword ptr [rip + .LCPI7_11] # xmm4 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm14, xmm4
	por	xmm14, xmm8
	movdqa	xmm15, xmm5
	pminub	xmm15, xmm12
	pcmpeqb	xmm15, xmm5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 14]
	movd	xmm5, edx
	movdqa	xmm4, xmmword ptr [rip + .LCPI7_12] # xmm4 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm15, xmm4
	por	xmm15, xmm14
	movzx	edx, byte ptr [rsi + rax + 15]
	movd	xmm8, edx
	pcmpeqd	xmm3, xmm3
	psubb	xmm13, xmm3
	pcmpeqd	xmm14, xmm14
	por	xmm15, xmm13
	movdqa	xmm4, xmm9
	pminub	xmm4, xmm12
	pcmpeqb	xmm4, xmm9
	movdqa	xmm9, xmm7
	pminub	xmm9, xmm12
	pcmpeqb	xmm9, xmm7
	movzx	edx, byte ptr [rsi + rax + 17]
	movd	xmm7, edx
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdi + 6], 15
	movdqa	xmm1, xmmword ptr [rip + .LCPI7_13] # xmm1 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm4, xmm1
	movdqa	xmm1, xmmword ptr [rip + .LCPI7_14] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm9, xmm1
	por	xmm9, xmm4
	movdqa	xmm4, xmm0
	pminub	xmm4, xmm12
	pcmpeqb	xmm4, xmm0
	movzx	edx, byte ptr [rsi + rax + 18]
	movd	xmm1, edx
	movdqa	xmm0, xmmword ptr [rsp + 176]   # 16-byte Reload
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx + 7], 1
	pinsrb	xmm0, byte ptr [rsi + r15 + 7], 2
	mov	rbx, r12
	pinsrb	xmm0, byte ptr [rsi + r12 + 7], 3
	mov	r9, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r9 + 7], 4
	pinsrb	xmm0, byte ptr [rsi + r10 + 7], 5
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r15 + 7], 6
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 7], 7
	pinsrb	xmm0, byte ptr [rsi + r11 + 7], 8
	mov	r12, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r12 + 7], 9
	mov	r11, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r11 + 7], 10
	pinsrb	xmm0, byte ptr [rsi + r14 + 7], 11
	pinsrb	xmm0, byte ptr [rsi + r13 + 7], 12
	pinsrb	xmm0, byte ptr [rsi + r8 + 7], 13
	mov	rdx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 7], 14
	pinsrb	xmm0, byte ptr [rsi + rdi + 7], 15
	movdqa	xmm3, xmmword ptr [rip + .LCPI7_15] # xmm3 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm4, xmm3
	por	xmm4, xmm9
	movdqa	xmm9, xmm0
	pminub	xmm9, xmm12
	pcmpeqb	xmm9, xmm0
	movzx	edx, byte ptr [rsi + rax + 19]
	movd	xmm3, edx
	pxor	xmm9, xmm14
	psllw	xmm9, 7
	movdqa	xmm0, xmmword ptr [rip + .LCPI7_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm9, xmm0
	por	xmm9, xmm4
	movdqa	xmm4, xmm9
	movzx	edx, byte ptr [rsi + rax + 20]
	movd	xmm9, edx
	movdqa	xmm0, xmmword ptr [rsp + 192]   # 16-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx + 9], 1
	mov	rax, rcx
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx + 9], 2
	pinsrb	xmm0, byte ptr [rsi + rbx + 9], 3
	pinsrb	xmm0, byte ptr [rsi + r9 + 9], 4
	pinsrb	xmm0, byte ptr [rsi + r10 + 9], 5
	pinsrb	xmm0, byte ptr [rsi + r15 + 9], 6
	mov	r8, r15
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdi + 9], 7
	mov	r15, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r15 + 9], 8
	pinsrb	xmm0, byte ptr [rsi + r12 + 9], 9
	mov	r10, r12
	pinsrb	xmm0, byte ptr [rsi + r11 + 9], 10
	pinsrb	xmm0, byte ptr [rsi + r14 + 9], 11
	pinsrb	xmm0, byte ptr [rsi + r13 + 9], 12
	mov	qword ptr [rsp + 104], r13      # 8-byte Spill
	mov	r12, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r12 + 9], 13
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r9 + 9], 14
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 9], 15
	pinsrb	xmm2, byte ptr [rsi + rax + 10], 1
	pinsrb	xmm2, byte ptr [rsi + rcx + 10], 2
	pinsrb	xmm2, byte ptr [rsi + rbx + 10], 3
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rbx + 10], 4
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rax + 10], 5
	pinsrb	xmm2, byte ptr [rsi + r8 + 10], 6
	pinsrb	xmm2, byte ptr [rsi + rdi + 10], 7
	pinsrb	xmm2, byte ptr [rsi + r15 + 10], 8
	pinsrb	xmm2, byte ptr [rsi + r10 + 10], 9
	pinsrb	xmm2, byte ptr [rsi + r11 + 10], 10
	pinsrb	xmm2, byte ptr [rsi + r14 + 10], 11
	pinsrb	xmm2, byte ptr [rsi + r13 + 10], 12
	pinsrb	xmm2, byte ptr [rsi + r12 + 10], 13
	pinsrb	xmm2, byte ptr [rsi + r9 + 10], 14
	mov	r11, r9
	pinsrb	xmm2, byte ptr [rsi + rdx + 10], 15
	mov	r12, rdx
	por	xmm4, xmm15
	movdqa	xmmword ptr [rsp + 192], xmm4   # 16-byte Spill
	movdqa	xmm4, xmm0
	pminub	xmm4, xmm12
	pcmpeqb	xmm4, xmm0
	movdqa	xmm13, xmm4
	movdqa	xmm14, xmmword ptr [rip + .LCPI7_10] # xmm14 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pandn	xmm13, xmm14
	paddb	xmm13, xmm4
	movdqa	xmm0, xmm2
	pminub	xmm0, xmm12
	pcmpeqb	xmm0, xmm2
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 21]
	movd	xmm4, edx
	pandn	xmm10, xmm14
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r8 + 11], 1
	mov	r13, rcx
	pinsrb	xmm11, byte ptr [rsi + rcx + 11], 2
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rcx + 11], 3
	pinsrb	xmm11, byte ptr [rsi + rbx + 11], 4
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdi + 11], 5
	mov	rdx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 11], 6
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdx + 11], 7
	pinsrb	xmm11, byte ptr [rsi + r15 + 11], 8
	mov	r9, r10
	pinsrb	xmm11, byte ptr [rsi + r10 + 11], 9
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r10 + 11], 10
	pinsrb	xmm11, byte ptr [rsi + r14 + 11], 11
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r14 + 11], 12
	mov	rbx, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rbx + 11], 13
	pinsrb	xmm11, byte ptr [rsi + r11 + 11], 14
	pinsrb	xmm11, byte ptr [rsi + r12 + 11], 15
	pandn	xmm0, xmmword ptr [rip + .LCPI7_11]
	por	xmm0, xmm10
	movdqa	xmm10, xmm11
	pminub	xmm10, xmm12
	pcmpeqb	xmm10, xmm11
	movzx	edx, byte ptr [rsi + rax + 22]
	movd	xmm15, edx
	pandn	xmm10, xmmword ptr [rip + .LCPI7_12]
	por	xmm10, xmm0
	movzx	edx, byte ptr [rsi + rax + 23]
	movd	xmm11, edx
	movdqa	xmm0, xmmword ptr [rsp + 304]   # 16-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r8 + 12], 1
	mov	rax, r13
	pinsrb	xmm0, byte ptr [rsi + r13 + 12], 2
	mov	rdx, rcx
	pinsrb	xmm0, byte ptr [rsi + rcx + 12], 3
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r15 + 12], 4
	pinsrb	xmm0, byte ptr [rsi + rdi + 12], 5
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx + 12], 6
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdi + 12], 7
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r11 + 12], 8
	pinsrb	xmm0, byte ptr [rsi + r9 + 12], 9
	pinsrb	xmm0, byte ptr [rsi + r10 + 12], 10
	mov	r13, qword ptr [rsp + 208]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r13 + 12], 11
	pinsrb	xmm0, byte ptr [rsi + r14 + 12], 12
	pinsrb	xmm0, byte ptr [rsi + rbx + 12], 13
	mov	r10, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r10 + 12], 14
	pinsrb	xmm0, byte ptr [rsi + r12 + 12], 15
	pinsrb	xmm6, byte ptr [rsi + r8 + 13], 1
	pinsrb	xmm6, byte ptr [rsi + rax + 13], 2
	pinsrb	xmm6, byte ptr [rsi + rdx + 13], 3
	mov	rax, r15
	pinsrb	xmm6, byte ptr [rsi + r15 + 13], 4
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r15 + 13], 5
	pinsrb	xmm6, byte ptr [rsi + rcx + 13], 6
	pinsrb	xmm6, byte ptr [rsi + rdi + 13], 7
	pinsrb	xmm6, byte ptr [rsi + r11 + 13], 8
	pinsrb	xmm6, byte ptr [rsi + r9 + 13], 9
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdi + 13], 10
	pinsrb	xmm6, byte ptr [rsi + r13 + 13], 11
	pinsrb	xmm6, byte ptr [rsi + r14 + 13], 12
	pinsrb	xmm6, byte ptr [rsi + rbx + 13], 13
	mov	r8, r10
	pinsrb	xmm6, byte ptr [rsi + r10 + 13], 14
	pinsrb	xmm6, byte ptr [rsi + r12 + 13], 15
	psubb	xmm13, xmmword ptr [rip + .LCPI7_16]
	por	xmm10, xmm13
	movdqa	xmm2, xmm0
	movdqa	xmm13, xmm12
	pminub	xmm2, xmm12
	pcmpeqb	xmm2, xmm0
	movdqa	xmm0, xmm6
	pminub	xmm0, xmm12
	pcmpeqb	xmm0, xmm6
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 25]
	movd	xmm12, edx
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rbx + 14], 1
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rcx + 14], 2
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r12 + 14], 3
	mov	rdx, rax
	pinsrb	xmm5, byte ptr [rsi + rax + 14], 4
	mov	r9, r15
	pinsrb	xmm5, byte ptr [rsi + r15 + 14], 5
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rcx + 14], 6
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r10 + 14], 7
	mov	r15, r11
	pinsrb	xmm5, byte ptr [rsi + r11 + 14], 8
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r11 + 14], 9
	pinsrb	xmm5, byte ptr [rsi + rdi + 14], 10
	mov	r14, r13
	pinsrb	xmm5, byte ptr [rsi + r13 + 14], 11
	mov	r13, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r13 + 14], 12
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 14], 13
	pinsrb	xmm5, byte ptr [rsi + r8 + 14], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 14], 15
	pinsrb	xmm8, byte ptr [rsi + rbx + 15], 1
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r8 + 15], 2
	pinsrb	xmm8, byte ptr [rsi + r12 + 15], 3
	pinsrb	xmm8, byte ptr [rsi + rdx + 15], 4
	pinsrb	xmm8, byte ptr [rsi + r9 + 15], 5
	pinsrb	xmm8, byte ptr [rsi + rcx + 15], 6
	pinsrb	xmm8, byte ptr [rsi + r10 + 15], 7
	pinsrb	xmm8, byte ptr [rsi + r15 + 15], 8
	pinsrb	xmm8, byte ptr [rsi + r11 + 15], 9
	pinsrb	xmm8, byte ptr [rsi + rdi + 15], 10
	pinsrb	xmm8, byte ptr [rsi + r14 + 15], 11
	pinsrb	xmm8, byte ptr [rsi + r13 + 15], 12
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rax + 15], 13
	mov	r8, qword ptr [rsp + 24]        # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r8 + 15], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rax + 15], 15
	pinsrb	xmm7, byte ptr [rsi + rbx + 17], 1
	mov	rax, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 17], 2
	pinsrb	xmm7, byte ptr [rsi + r12 + 17], 3
	pinsrb	xmm7, byte ptr [rsi + rdx + 17], 4
	pinsrb	xmm7, byte ptr [rsi + r9 + 17], 5
	pinsrb	xmm7, byte ptr [rsi + rcx + 17], 6
	pinsrb	xmm7, byte ptr [rsi + r10 + 17], 7
	pinsrb	xmm7, byte ptr [rsi + r15 + 17], 8
	pinsrb	xmm7, byte ptr [rsi + r11 + 17], 9
	pinsrb	xmm7, byte ptr [rsi + rdi + 17], 10
	pinsrb	xmm7, byte ptr [rsi + r14 + 17], 11
	pinsrb	xmm7, byte ptr [rsi + r13 + 17], 12
	mov	rax, qword ptr [rsp]            # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 17], 13
	pinsrb	xmm7, byte ptr [rsi + r8 + 17], 14
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rax + 17], 15
	pinsrb	xmm1, byte ptr [rsi + rbx + 18], 1
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rbx + 18], 2
	pinsrb	xmm1, byte ptr [rsi + r12 + 18], 3
	pinsrb	xmm1, byte ptr [rsi + rdx + 18], 4
	pinsrb	xmm1, byte ptr [rsi + r9 + 18], 5
	pinsrb	xmm1, byte ptr [rsi + rcx + 18], 6
	pinsrb	xmm1, byte ptr [rsi + r10 + 18], 7
	pinsrb	xmm1, byte ptr [rsi + r15 + 18], 8
	mov	r12, r15
	pinsrb	xmm1, byte ptr [rsi + r11 + 18], 9
	pinsrb	xmm1, byte ptr [rsi + rdi + 18], 10
	mov	r10, rdi
	pinsrb	xmm1, byte ptr [rsi + r14 + 18], 11
	mov	r15, r14
	pinsrb	xmm1, byte ptr [rsi + r13 + 18], 12
	mov	r9, qword ptr [rsp]             # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + r9 + 18], 13
	pandn	xmm2, xmmword ptr [rip + .LCPI7_13]
	pandn	xmm0, xmmword ptr [rip + .LCPI7_14]
	por	xmm0, xmm2
	movdqa	xmm2, xmm5
	pminub	xmm2, xmm13
	pcmpeqb	xmm2, xmm5
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 26]
	movd	xmm5, edx
	pinsrb	xmm1, byte ptr [rsi + r8 + 18], 14
	pandn	xmm2, xmmword ptr [rip + .LCPI7_15]
	por	xmm2, xmm0
	movdqa	xmm6, xmm8
	pminub	xmm6, xmm13
	pcmpeqb	xmm6, xmm8
	movzx	edx, byte ptr [rsi + rax + 27]
	movd	xmm0, edx
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rcx + 18], 15
	pxor	xmm6, xmmword ptr [rip + .LCPI7_16]
	psllw	xmm6, 7
	pand	xmm6, xmmword ptr [rip + .LCPI7_6]
	por	xmm6, xmm2
	movzx	edx, byte ptr [rsi + rax + 28]
	movd	xmm8, edx
	por	xmm6, xmm10
	movdqa	xmmword ptr [rsp + 176], xmm6   # 16-byte Spill
	movdqa	xmm2, xmm7
	pminub	xmm2, xmm13
	pcmpeqb	xmm2, xmm7
	movdqa	xmm14, xmm2
	pandn	xmm14, xmmword ptr [rip + .LCPI7_10]
	paddb	xmm14, xmm2
	movdqa	xmm10, xmm1
	pminub	xmm10, xmm13
	pcmpeqb	xmm10, xmm1
	movzx	edx, byte ptr [rsi + rax + 29]
	movd	xmm6, edx
	movzx	edx, byte ptr [rsi + rax + 30]
	movzx	edi, byte ptr [rsi + rax + 31]
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 19], 1
	pinsrb	xmm9, byte ptr [rsi + rax + 20], 1
	pinsrb	xmm4, byte ptr [rsi + rax + 21], 1
	pinsrb	xmm15, byte ptr [rsi + rax + 22], 1
	pinsrb	xmm11, byte ptr [rsi + rax + 23], 1
	pinsrb	xmm12, byte ptr [rsi + rax + 25], 1
	pinsrb	xmm5, byte ptr [rsi + rax + 26], 1
	pinsrb	xmm0, byte ptr [rsi + rax + 27], 1
	pinsrb	xmm8, byte ptr [rsi + rax + 28], 1
	pinsrb	xmm6, byte ptr [rsi + rax + 29], 1
	movd	xmm1, edx
	pinsrb	xmm1, byte ptr [rsi + rax + 30], 1
	movd	xmm7, edi
	pinsrb	xmm7, byte ptr [rsi + rax + 31], 1
	mov	rax, rbx
	pinsrb	xmm3, byte ptr [rsi + rbx + 19], 2
	pinsrb	xmm9, byte ptr [rsi + rbx + 20], 2
	pinsrb	xmm4, byte ptr [rsi + rbx + 21], 2
	pinsrb	xmm15, byte ptr [rsi + rbx + 22], 2
	pinsrb	xmm11, byte ptr [rsi + rbx + 23], 2
	pinsrb	xmm12, byte ptr [rsi + rbx + 25], 2
	pinsrb	xmm5, byte ptr [rsi + rbx + 26], 2
	pinsrb	xmm0, byte ptr [rsi + rbx + 27], 2
	pinsrb	xmm8, byte ptr [rsi + rbx + 28], 2
	pinsrb	xmm6, byte ptr [rsi + rbx + 29], 2
	pinsrb	xmm1, byte ptr [rsi + rbx + 30], 2
	pinsrb	xmm7, byte ptr [rsi + rbx + 31], 2
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 19], 3
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 19], 4
	mov	r13, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r13 + 19], 5
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdi + 19], 6
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r11 + 19], 7
	pinsrb	xmm3, byte ptr [rsi + r12 + 19], 8
	mov	r14, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r14 + 19], 9
	pinsrb	xmm3, byte ptr [rsi + r10 + 19], 10
	pinsrb	xmm3, byte ptr [rsi + r15 + 19], 11
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rbx + 19], 12
	pinsrb	xmm3, byte ptr [rsi + r9 + 19], 13
	pinsrb	xmm3, byte ptr [rsi + r8 + 19], 14
	pinsrb	xmm3, byte ptr [rsi + rcx + 19], 15
	pinsrb	xmm9, byte ptr [rsi + rax + 20], 3
	pinsrb	xmm9, byte ptr [rsi + rdx + 20], 4
	pinsrb	xmm9, byte ptr [rsi + r13 + 20], 5
	pinsrb	xmm9, byte ptr [rsi + rdi + 20], 6
	pinsrb	xmm9, byte ptr [rsi + r11 + 20], 7
	pinsrb	xmm9, byte ptr [rsi + r12 + 20], 8
	pinsrb	xmm9, byte ptr [rsi + r14 + 20], 9
	pinsrb	xmm9, byte ptr [rsi + r10 + 20], 10
	pinsrb	xmm9, byte ptr [rsi + r15 + 20], 11
	pinsrb	xmm9, byte ptr [rsi + rbx + 20], 12
	pinsrb	xmm9, byte ptr [rsi + r9 + 20], 13
	pinsrb	xmm9, byte ptr [rsi + r8 + 20], 14
	pinsrb	xmm9, byte ptr [rsi + rcx + 20], 15
	pinsrb	xmm4, byte ptr [rsi + rax + 21], 3
	pinsrb	xmm4, byte ptr [rsi + rdx + 21], 4
	pinsrb	xmm4, byte ptr [rsi + r13 + 21], 5
	pinsrb	xmm4, byte ptr [rsi + rdi + 21], 6
	pinsrb	xmm4, byte ptr [rsi + r11 + 21], 7
	pinsrb	xmm4, byte ptr [rsi + r12 + 21], 8
	pinsrb	xmm4, byte ptr [rsi + r14 + 21], 9
	pinsrb	xmm4, byte ptr [rsi + r10 + 21], 10
	pinsrb	xmm4, byte ptr [rsi + r15 + 21], 11
	pinsrb	xmm4, byte ptr [rsi + rbx + 21], 12
	pinsrb	xmm4, byte ptr [rsi + r9 + 21], 13
	pinsrb	xmm4, byte ptr [rsi + r8 + 21], 14
	pinsrb	xmm4, byte ptr [rsi + rcx + 21], 15
	pinsrb	xmm15, byte ptr [rsi + rax + 22], 3
	pinsrb	xmm15, byte ptr [rsi + rdx + 22], 4
	pinsrb	xmm15, byte ptr [rsi + r13 + 22], 5
	pinsrb	xmm15, byte ptr [rsi + rdi + 22], 6
	pinsrb	xmm15, byte ptr [rsi + r11 + 22], 7
	pinsrb	xmm15, byte ptr [rsi + r12 + 22], 8
	pinsrb	xmm15, byte ptr [rsi + r14 + 22], 9
	pinsrb	xmm15, byte ptr [rsi + r10 + 22], 10
	movdqa	xmm2, xmmword ptr [rsp + 272]   # 16-byte Reload
	pandn	xmm2, xmmword ptr [rip + .LCPI7_10]
	pinsrb	xmm15, byte ptr [rsi + r15 + 22], 11
	pandn	xmm10, xmmword ptr [rip + .LCPI7_11]
	por	xmm10, xmm2
	pinsrb	xmm15, byte ptr [rsi + rbx + 22], 12
	movdqa	xmm2, xmm3
	pminub	xmm2, xmm13
	pcmpeqb	xmm2, xmm3
	pinsrb	xmm15, byte ptr [rsi + r9 + 22], 13
	pandn	xmm2, xmmword ptr [rip + .LCPI7_12]
	por	xmm2, xmm10
	pinsrb	xmm15, byte ptr [rsi + r8 + 22], 14
	psubb	xmm14, xmmword ptr [rip + .LCPI7_16]
	por	xmm2, xmm14
	movdqa	xmm10, xmm9
	pminub	xmm10, xmm13
	pcmpeqb	xmm10, xmm9
	movdqa	xmm3, xmm4
	movdqa	xmm9, xmm13
	pminub	xmm3, xmm13
	pcmpeqb	xmm3, xmm4
	pinsrb	xmm15, byte ptr [rsi + rcx + 22], 15
	movdqa	xmm13, xmmword ptr [rip + .LCPI7_13] # xmm13 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm10, xmm13
	movdqa	xmm4, xmmword ptr [rip + .LCPI7_14] # xmm4 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm3, xmm4
	por	xmm3, xmm10
	movdqa	xmm4, xmm15
	pminub	xmm4, xmm9
	movdqa	xmm13, xmm9
	pcmpeqb	xmm4, xmm15
	pinsrb	xmm11, byte ptr [rsi + rax + 23], 3
	pinsrb	xmm11, byte ptr [rsi + rdx + 23], 4
	pinsrb	xmm11, byte ptr [rsi + r13 + 23], 5
	pinsrb	xmm11, byte ptr [rsi + rdi + 23], 6
	pinsrb	xmm11, byte ptr [rsi + r11 + 23], 7
	pinsrb	xmm11, byte ptr [rsi + r12 + 23], 8
	pinsrb	xmm11, byte ptr [rsi + r14 + 23], 9
	pinsrb	xmm11, byte ptr [rsi + r10 + 23], 10
	pinsrb	xmm11, byte ptr [rsi + r15 + 23], 11
	pinsrb	xmm11, byte ptr [rsi + rbx + 23], 12
	pinsrb	xmm11, byte ptr [rsi + r9 + 23], 13
	pinsrb	xmm11, byte ptr [rsi + r8 + 23], 14
	pinsrb	xmm11, byte ptr [rsi + rcx + 23], 15
	movdqa	xmm15, xmmword ptr [rip + .LCPI7_15] # xmm15 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm4, xmm15
	por	xmm4, xmm3
	movdqa	xmm3, xmm11
	pminub	xmm3, xmm9
	pcmpeqb	xmm3, xmm11
	pxor	xmm3, xmmword ptr [rip + .LCPI7_16]
	psllw	xmm3, 7
	movdqa	xmm11, xmmword ptr [rip + .LCPI7_6] # xmm11 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm3, xmm11
	por	xmm3, xmm4
	pinsrb	xmm12, byte ptr [rsi + rax + 25], 3
	pinsrb	xmm12, byte ptr [rsi + rdx + 25], 4
	pinsrb	xmm12, byte ptr [rsi + r13 + 25], 5
	pinsrb	xmm12, byte ptr [rsi + rdi + 25], 6
	pinsrb	xmm12, byte ptr [rsi + r11 + 25], 7
	pinsrb	xmm12, byte ptr [rsi + r12 + 25], 8
	pinsrb	xmm12, byte ptr [rsi + r14 + 25], 9
	pinsrb	xmm12, byte ptr [rsi + r10 + 25], 10
	pinsrb	xmm12, byte ptr [rsi + r15 + 25], 11
	pinsrb	xmm12, byte ptr [rsi + rbx + 25], 12
	pinsrb	xmm12, byte ptr [rsi + r9 + 25], 13
	pinsrb	xmm12, byte ptr [rsi + r8 + 25], 14
	pinsrb	xmm12, byte ptr [rsi + rcx + 25], 15
	pinsrb	xmm5, byte ptr [rsi + rax + 26], 3
	pinsrb	xmm5, byte ptr [rsi + rdx + 26], 4
	pinsrb	xmm5, byte ptr [rsi + r13 + 26], 5
	pinsrb	xmm5, byte ptr [rsi + rdi + 26], 6
	pinsrb	xmm5, byte ptr [rsi + r11 + 26], 7
	pinsrb	xmm5, byte ptr [rsi + r12 + 26], 8
	pinsrb	xmm5, byte ptr [rsi + r14 + 26], 9
	pinsrb	xmm5, byte ptr [rsi + r10 + 26], 10
	pinsrb	xmm5, byte ptr [rsi + r15 + 26], 11
	pinsrb	xmm5, byte ptr [rsi + rbx + 26], 12
	pinsrb	xmm5, byte ptr [rsi + r9 + 26], 13
	pinsrb	xmm5, byte ptr [rsi + r8 + 26], 14
	pinsrb	xmm5, byte ptr [rsi + rcx + 26], 15
	por	xmm3, xmm2
	movdqa	xmm2, xmm12
	pminub	xmm2, xmm9
	pcmpeqb	xmm2, xmm12
	movdqa	xmm9, xmm2
	movdqa	xmm10, xmmword ptr [rip + .LCPI7_10] # xmm10 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pandn	xmm9, xmm10
	paddb	xmm9, xmm2
	movdqa	xmm4, xmm5
	pminub	xmm4, xmm13
	pcmpeqb	xmm4, xmm5
	movdqa	xmm2, xmmword ptr [rsp + 240]   # 16-byte Reload
	pandn	xmm2, xmm10
	pinsrb	xmm0, byte ptr [rsi + rax + 27], 3
	pinsrb	xmm0, byte ptr [rsi + rdx + 27], 4
	pinsrb	xmm0, byte ptr [rsi + r13 + 27], 5
	pinsrb	xmm0, byte ptr [rsi + rdi + 27], 6
	pinsrb	xmm0, byte ptr [rsi + r11 + 27], 7
	pinsrb	xmm0, byte ptr [rsi + r12 + 27], 8
	pinsrb	xmm0, byte ptr [rsi + r14 + 27], 9
	pinsrb	xmm0, byte ptr [rsi + r10 + 27], 10
	pinsrb	xmm0, byte ptr [rsi + r15 + 27], 11
	pinsrb	xmm0, byte ptr [rsi + rbx + 27], 12
	pinsrb	xmm0, byte ptr [rsi + r9 + 27], 13
	pinsrb	xmm0, byte ptr [rsi + r8 + 27], 14
	pinsrb	xmm0, byte ptr [rsi + rcx + 27], 15
	pandn	xmm4, xmmword ptr [rip + .LCPI7_11]
	por	xmm4, xmm2
	movdqa	xmm2, xmm0
	pminub	xmm2, xmm13
	pcmpeqb	xmm2, xmm0
	pandn	xmm2, xmmword ptr [rip + .LCPI7_12]
	por	xmm2, xmm4
	pinsrb	xmm8, byte ptr [rsi + rax + 28], 3
	pinsrb	xmm8, byte ptr [rsi + rdx + 28], 4
	pinsrb	xmm8, byte ptr [rsi + r13 + 28], 5
	pinsrb	xmm8, byte ptr [rsi + rdi + 28], 6
	pinsrb	xmm8, byte ptr [rsi + r11 + 28], 7
	pinsrb	xmm8, byte ptr [rsi + r12 + 28], 8
	pinsrb	xmm8, byte ptr [rsi + r14 + 28], 9
	pinsrb	xmm8, byte ptr [rsi + r10 + 28], 10
	pinsrb	xmm8, byte ptr [rsi + r15 + 28], 11
	pinsrb	xmm8, byte ptr [rsi + rbx + 28], 12
	pinsrb	xmm8, byte ptr [rsi + r9 + 28], 13
	pinsrb	xmm8, byte ptr [rsi + r8 + 28], 14
	pinsrb	xmm8, byte ptr [rsi + rcx + 28], 15
	pinsrb	xmm6, byte ptr [rsi + rax + 29], 3
	pinsrb	xmm6, byte ptr [rsi + rdx + 29], 4
	pinsrb	xmm6, byte ptr [rsi + r13 + 29], 5
	pinsrb	xmm6, byte ptr [rsi + rdi + 29], 6
	pinsrb	xmm6, byte ptr [rsi + r11 + 29], 7
	pinsrb	xmm6, byte ptr [rsi + r12 + 29], 8
	pinsrb	xmm6, byte ptr [rsi + r14 + 29], 9
	pinsrb	xmm6, byte ptr [rsi + r10 + 29], 10
	pinsrb	xmm6, byte ptr [rsi + r15 + 29], 11
	pinsrb	xmm6, byte ptr [rsi + rbx + 29], 12
	pinsrb	xmm6, byte ptr [rsi + r9 + 29], 13
	pinsrb	xmm6, byte ptr [rsi + r8 + 29], 14
	pinsrb	xmm6, byte ptr [rsi + rcx + 29], 15
	pcmpeqd	xmm10, xmm10
	psubb	xmm9, xmm10
	por	xmm2, xmm9
	movdqa	xmm0, xmm8
	pminub	xmm0, xmm13
	pcmpeqb	xmm0, xmm8
	movdqa	xmm4, xmm6
	pminub	xmm4, xmm13
	pcmpeqb	xmm4, xmm6
	pinsrb	xmm1, byte ptr [rsi + rax + 30], 3
	pinsrb	xmm7, byte ptr [rsi + rax + 31], 3
	pinsrb	xmm1, byte ptr [rsi + rdx + 30], 4
	pinsrb	xmm7, byte ptr [rsi + rdx + 31], 4
	pinsrb	xmm1, byte ptr [rsi + r13 + 30], 5
	pinsrb	xmm7, byte ptr [rsi + r13 + 31], 5
	pinsrb	xmm1, byte ptr [rsi + rdi + 30], 6
	pinsrb	xmm7, byte ptr [rsi + rdi + 31], 6
	pinsrb	xmm1, byte ptr [rsi + r11 + 30], 7
	pinsrb	xmm7, byte ptr [rsi + r11 + 31], 7
	pinsrb	xmm1, byte ptr [rsi + r12 + 30], 8
	pinsrb	xmm7, byte ptr [rsi + r12 + 31], 8
	pinsrb	xmm1, byte ptr [rsi + r14 + 30], 9
	pinsrb	xmm7, byte ptr [rsi + r14 + 31], 9
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + r10 + 30], 10
	pinsrb	xmm7, byte ptr [rsi + r10 + 31], 10
	pinsrb	xmm1, byte ptr [rsi + r15 + 30], 11
	pinsrb	xmm7, byte ptr [rsi + r15 + 31], 11
	pinsrb	xmm1, byte ptr [rsi + rbx + 30], 12
	pinsrb	xmm7, byte ptr [rsi + rbx + 31], 12
	pinsrb	xmm1, byte ptr [rsi + r9 + 30], 13
	pinsrb	xmm7, byte ptr [rsi + r9 + 31], 13
	pinsrb	xmm1, byte ptr [rsi + r8 + 30], 14
	pinsrb	xmm7, byte ptr [rsi + r8 + 31], 14
	pinsrb	xmm1, byte ptr [rsi + rcx + 30], 15
	pinsrb	xmm7, byte ptr [rsi + rcx + 31], 15
	pandn	xmm0, xmmword ptr [rip + .LCPI7_13]
	pandn	xmm4, xmmword ptr [rip + .LCPI7_14]
	por	xmm4, xmm0
	movdqa	xmm0, xmm1
	pminub	xmm0, xmm13
	pcmpeqb	xmm0, xmm1
	pandn	xmm0, xmm15
	por	xmm0, xmm4
	movdqa	xmm1, xmm7
	pminub	xmm1, xmm13
	pcmpeqb	xmm1, xmm7
	pxor	xmm1, xmm10
	psllw	xmm1, 7
	pand	xmm1, xmm11
	por	xmm1, xmm0
	por	xmm1, xmm2
	movdqa	xmm0, xmm3
	punpcklbw	xmm0, xmm1              # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	movdqa	xmm5, xmmword ptr [rsp + 192]   # 16-byte Reload
	movdqa	xmm2, xmm5
	movdqa	xmm6, xmmword ptr [rsp + 176]   # 16-byte Reload
	punpcklbw	xmm2, xmm6              # xmm2 = xmm2[0],xmm6[0],xmm2[1],xmm6[1],xmm2[2],xmm6[2],xmm2[3],xmm6[3],xmm2[4],xmm6[4],xmm2[5],xmm6[5],xmm2[6],xmm6[6],xmm2[7],xmm6[7]
	movdqa	xmm4, xmm2
	punpcklwd	xmm4, xmm0              # xmm4 = xmm4[0],xmm0[0],xmm4[1],xmm0[1],xmm4[2],xmm0[2],xmm4[3],xmm0[3]
	punpckhwd	xmm2, xmm0              # xmm2 = xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
	punpckhbw	xmm3, xmm1              # xmm3 = xmm3[8],xmm1[8],xmm3[9],xmm1[9],xmm3[10],xmm1[10],xmm3[11],xmm1[11],xmm3[12],xmm1[12],xmm3[13],xmm1[13],xmm3[14],xmm1[14],xmm3[15],xmm1[15]
	punpckhbw	xmm5, xmm6              # xmm5 = xmm5[8],xmm6[8],xmm5[9],xmm6[9],xmm5[10],xmm6[10],xmm5[11],xmm6[11],xmm5[12],xmm6[12],xmm5[13],xmm6[13],xmm5[14],xmm6[14],xmm5[15],xmm6[15]
	movdqa	xmm0, xmm5
	punpcklwd	xmm0, xmm3              # xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1],xmm0[2],xmm3[2],xmm0[3],xmm3[3]
	punpckhwd	xmm5, xmm3              # xmm5 = xmm5[4],xmm3[4],xmm5[5],xmm3[5],xmm5[6],xmm3[6],xmm5[7],xmm3[7]
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	movdqu	xmmword ptr [rax + 4*rcx + 48], xmm5
	movdqu	xmmword ptr [rax + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [rax + 4*rcx + 16], xmm2
	movdqu	xmmword ptr [rax + 4*rcx], xmm4
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 232]      # 8-byte Folded Reload
	jne	.LBB7_67
# %bb.68:
	mov	r10, qword ptr [rsp + 264]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r14, qword ptr [rsp + 320]      # 8-byte Reload
	jne	.LBB7_69
	jmp	.LBB7_72
.LBB7_180:
	mov	r8, r10
	and	r8, -4
	mov	rbx, r8
	shl	rbx, 7
	add	rbx, rsi
	lea	r14, [r12 + 4*r8]
	movaps	xmm13, xmm11
	shufps	xmm13, xmm11, 0                 # xmm13 = xmm13[0,0],xmm11[0,0]
	add	rsi, 508
	xor	ecx, ecx
	movdqa	xmm15, xmmword ptr [rip + .LCPI7_0] # xmm15 = <1,1,1,1,u,u,u,u,u,u,u,u,u,u,u,u>
	.p2align	4, 0x90
.LBB7_181:                              # =>This Inner Loop Header: Depth=1
	movss	xmm3, dword ptr [rsi - 508]     # xmm3 = mem[0],zero,zero,zero
	movss	xmm10, dword ptr [rsi - 504]    # xmm10 = mem[0],zero,zero,zero
	movss	xmm9, dword ptr [rsi - 500]     # xmm9 = mem[0],zero,zero,zero
	movss	xmm1, dword ptr [rsi - 496]     # xmm1 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 380], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 252], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 124], 48 # xmm3 = xmm3[0,1,2],mem[0]
	insertps	xmm10, dword ptr [rsi - 376], 16 # xmm10 = xmm10[0],mem[0],xmm10[2,3]
	insertps	xmm10, dword ptr [rsi - 248], 32 # xmm10 = xmm10[0,1],mem[0],xmm10[3]
	insertps	xmm10, dword ptr [rsi - 120], 48 # xmm10 = xmm10[0,1,2],mem[0]
	insertps	xmm9, dword ptr [rsi - 372], 16 # xmm9 = xmm9[0],mem[0],xmm9[2,3]
	insertps	xmm9, dword ptr [rsi - 244], 32 # xmm9 = xmm9[0,1],mem[0],xmm9[3]
	insertps	xmm9, dword ptr [rsi - 116], 48 # xmm9 = xmm9[0,1,2],mem[0]
	insertps	xmm1, dword ptr [rsi - 368], 16 # xmm1 = xmm1[0],mem[0],xmm1[2,3]
	insertps	xmm1, dword ptr [rsi - 240], 32 # xmm1 = xmm1[0,1],mem[0],xmm1[3]
	insertps	xmm1, dword ptr [rsi - 112], 48 # xmm1 = xmm1[0,1,2],mem[0]
	movss	xmm8, dword ptr [rsi - 492]     # xmm8 = mem[0],zero,zero,zero
	insertps	xmm8, dword ptr [rsi - 364], 16 # xmm8 = xmm8[0],mem[0],xmm8[2,3]
	insertps	xmm8, dword ptr [rsi - 236], 32 # xmm8 = xmm8[0,1],mem[0],xmm8[3]
	movaps	xmm12, xmm13
	insertps	xmm8, dword ptr [rsi - 108], 48 # xmm8 = xmm8[0,1,2],mem[0]
	movss	xmm2, dword ptr [rsi - 488]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 360], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 232], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	cmpltps	xmm12, xmm3
	insertps	xmm2, dword ptr [rsi - 104], 48 # xmm2 = xmm2[0,1,2],mem[0]
	movss	xmm3, dword ptr [rsi - 484]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 356], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 228], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	packssdw	xmm12, xmm12
	insertps	xmm3, dword ptr [rsi - 100], 48 # xmm3 = xmm3[0,1,2],mem[0]
	movss	xmm4, dword ptr [rsi - 476]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm4, dword ptr [rsi - 348], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rsi - 220], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	packsswb	xmm12, xmm12
	insertps	xmm4, dword ptr [rsi - 92], 48  # xmm4 = xmm4[0,1,2],mem[0]
	movaps	xmm7, xmm13
	movss	xmm5, dword ptr [rsi - 444]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 316], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 188], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	cmpltps	xmm7, xmm4
	insertps	xmm5, dword ptr [rsi - 60], 48  # xmm5 = xmm5[0,1,2],mem[0]
	movaps	xmm6, xmm13
	movss	xmm0, dword ptr [rsi - 412]     # xmm0 = mem[0],zero,zero,zero
	insertps	xmm0, dword ptr [rsi - 284], 16 # xmm0 = xmm0[0],mem[0],xmm0[2,3]
	insertps	xmm0, dword ptr [rsi - 156], 32 # xmm0 = xmm0[0,1],mem[0],xmm0[3]
	cmpltps	xmm6, xmm5
	insertps	xmm0, dword ptr [rsi - 28], 48  # xmm0 = xmm0[0,1,2],mem[0]
	movaps	xmm4, xmm13
	cmpltps	xmm4, xmm0
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm10
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	movdqa	xmm14, xmm0
	pand	xmm14, xmm15
	psubb	xmm14, xmm0
	movss	xmm10, dword ptr [rsi - 480]    # xmm10 = mem[0],zero,zero,zero
	insertps	xmm10, dword ptr [rsi - 352], 16 # xmm10 = xmm10[0],mem[0],xmm10[2,3]
	pand	xmm12, xmm15
	insertps	xmm10, dword ptr [rsi - 224], 32 # xmm10 = xmm10[0,1],mem[0],xmm10[3]
	por	xmm14, xmm12
	movaps	xmm5, xmm13
	cmpltps	xmm5, xmm9
	insertps	xmm10, dword ptr [rsi - 96], 48 # xmm10 = xmm10[0,1,2],mem[0]
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	movdqa	xmm0, xmmword ptr [rip + .LCPI7_1] # xmm0 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	pand	xmm5, xmm0
	por	xmm5, xmm14
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm1
	movaps	xmm1, xmm13
	cmpltps	xmm1, xmm8
	movss	xmm9, dword ptr [rsi - 472]     # xmm9 = mem[0],zero,zero,zero
	insertps	xmm9, dword ptr [rsi - 344], 16 # xmm9 = xmm9[0],mem[0],xmm9[2,3]
	insertps	xmm9, dword ptr [rsi - 216], 32 # xmm9 = xmm9[0,1],mem[0],xmm9[3]
	insertps	xmm9, dword ptr [rsi - 88], 48  # xmm9 = xmm9[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 3
	movdqa	xmm14, xmmword ptr [rip + .LCPI7_2] # xmm14 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	pand	xmm0, xmm14
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 4
	movdqa	xmm14, xmmword ptr [rip + .LCPI7_3] # xmm14 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	pand	xmm1, xmm14
	por	xmm1, xmm0
	movss	xmm12, dword ptr [rsi - 468]    # xmm12 = mem[0],zero,zero,zero
	insertps	xmm12, dword ptr [rsi - 340], 16 # xmm12 = xmm12[0],mem[0],xmm12[2,3]
	insertps	xmm12, dword ptr [rsi - 212], 32 # xmm12 = xmm12[0,1],mem[0],xmm12[3]
	insertps	xmm12, dword ptr [rsi - 84], 48 # xmm12 = xmm12[0,1,2],mem[0]
	por	xmm1, xmm5
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm2
	movaps	xmm5, xmm13
	cmpltps	xmm5, xmm3
	movss	xmm2, dword ptr [rsi - 464]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 336], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 208], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	packssdw	xmm7, xmm7
	insertps	xmm2, dword ptr [rsi - 80], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 5
	movdqa	xmm14, xmmword ptr [rip + .LCPI7_4] # xmm14 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	pand	xmm0, xmm14
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 6
	movdqa	xmm3, xmmword ptr [rip + .LCPI7_5] # xmm3 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	pand	xmm5, xmm3
	por	xmm5, xmm0
	movaps	xmm8, xmm13
	cmpltps	xmm8, xmm10
	movss	xmm3, dword ptr [rsi - 460]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 332], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 204], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 76], 48  # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm8, xmm8
	packsswb	xmm8, xmm8
	psllw	xmm8, 7
	movdqa	xmm0, xmmword ptr [rip + .LCPI7_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm8, xmm0
	por	xmm8, xmm5
	movss	xmm10, dword ptr [rsi - 456]    # xmm10 = mem[0],zero,zero,zero
	insertps	xmm10, dword ptr [rsi - 328], 16 # xmm10 = xmm10[0],mem[0],xmm10[2,3]
	insertps	xmm10, dword ptr [rsi - 200], 32 # xmm10 = xmm10[0,1],mem[0],xmm10[3]
	packsswb	xmm7, xmm7
	insertps	xmm10, dword ptr [rsi - 72], 48 # xmm10 = xmm10[0,1,2],mem[0]
	por	xmm8, xmm1
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm9
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	movdqa	xmm1, xmm0
	pand	xmm1, xmm15
	psubb	xmm1, xmm0
	movss	xmm9, dword ptr [rsi - 452]     # xmm9 = mem[0],zero,zero,zero
	insertps	xmm9, dword ptr [rsi - 324], 16 # xmm9 = xmm9[0],mem[0],xmm9[2,3]
	pand	xmm7, xmm15
	insertps	xmm9, dword ptr [rsi - 196], 32 # xmm9 = xmm9[0,1],mem[0],xmm9[3]
	por	xmm1, xmm7
	movaps	xmm5, xmm13
	cmpltps	xmm5, xmm12
	insertps	xmm9, dword ptr [rsi - 68], 48  # xmm9 = xmm9[0,1,2],mem[0]
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmmword ptr [rip + .LCPI7_1]
	por	xmm5, xmm1
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm2
	movaps	xmm1, xmm13
	cmpltps	xmm1, xmm3
	movss	xmm3, dword ptr [rsi - 448]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 320], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 192], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 64], 48  # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 3
	movdqa	xmm12, xmmword ptr [rip + .LCPI7_2] # xmm12 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	pand	xmm0, xmm12
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 4
	pand	xmm1, xmmword ptr [rip + .LCPI7_3]
	por	xmm1, xmm0
	movss	xmm2, dword ptr [rsi - 440]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 312], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 184], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 56], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm1, xmm5
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm10
	movaps	xmm5, xmm13
	cmpltps	xmm5, xmm9
	movss	xmm7, dword ptr [rsi - 436]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 308], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 180], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	packssdw	xmm6, xmm6
	insertps	xmm7, dword ptr [rsi - 52], 48  # xmm7 = xmm7[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 5
	pand	xmm0, xmm14
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 6
	pand	xmm5, xmmword ptr [rip + .LCPI7_5]
	por	xmm5, xmm0
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm3
	movss	xmm3, dword ptr [rsi - 432]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 304], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 176], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 48], 48  # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	psllw	xmm0, 7
	movdqa	xmm10, xmmword ptr [rip + .LCPI7_6] # xmm10 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm0, xmm10
	por	xmm0, xmm5
	movss	xmm5, dword ptr [rsi - 428]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 300], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 172], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 44], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm0, xmm1
	movss	xmm9, dword ptr [rsi - 424]     # xmm9 = mem[0],zero,zero,zero
	insertps	xmm9, dword ptr [rsi - 296], 16 # xmm9 = xmm9[0],mem[0],xmm9[2,3]
	insertps	xmm9, dword ptr [rsi - 168], 32 # xmm9 = xmm9[0,1],mem[0],xmm9[3]
	packsswb	xmm6, xmm6
	insertps	xmm9, dword ptr [rsi - 40], 48  # xmm9 = xmm9[0,1,2],mem[0]
	punpckldq	xmm8, xmm0              # xmm8 = xmm8[0],xmm0[0],xmm8[1],xmm0[1]
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm2
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	movdqa	xmm1, xmm0
	pand	xmm1, xmm15
	psubb	xmm1, xmm0
	movss	xmm2, dword ptr [rsi - 420]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 292], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	pand	xmm6, xmm15
	insertps	xmm2, dword ptr [rsi - 164], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	por	xmm1, xmm6
	movaps	xmm6, xmm13
	cmpltps	xmm6, xmm7
	insertps	xmm2, dword ptr [rsi - 36], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 2
	movdqa	xmm0, xmmword ptr [rip + .LCPI7_1] # xmm0 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	pand	xmm6, xmm0
	por	xmm6, xmm1
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm3
	movaps	xmm1, xmm13
	cmpltps	xmm1, xmm5
	movss	xmm3, dword ptr [rsi - 416]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 288], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 160], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 32], 48  # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 3
	pand	xmm0, xmm12
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 4
	movdqa	xmm12, xmmword ptr [rip + .LCPI7_3] # xmm12 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	pand	xmm1, xmm12
	por	xmm1, xmm0
	movss	xmm5, dword ptr [rsi - 408]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 280], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 152], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 24], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm1, xmm6
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm9
	movaps	xmm6, xmm13
	cmpltps	xmm6, xmm2
	movss	xmm7, dword ptr [rsi - 404]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 276], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 148], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	packssdw	xmm4, xmm4
	insertps	xmm7, dword ptr [rsi - 20], 48  # xmm7 = xmm7[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 5
	pand	xmm0, xmm14
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 6
	movdqa	xmm9, xmmword ptr [rip + .LCPI7_5] # xmm9 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	pand	xmm6, xmm9
	por	xmm6, xmm0
	movaps	xmm2, xmm13
	cmpltps	xmm2, xmm3
	movss	xmm0, dword ptr [rsi - 400]     # xmm0 = mem[0],zero,zero,zero
	insertps	xmm0, dword ptr [rsi - 272], 16 # xmm0 = xmm0[0],mem[0],xmm0[2,3]
	insertps	xmm0, dword ptr [rsi - 144], 32 # xmm0 = xmm0[0,1],mem[0],xmm0[3]
	insertps	xmm0, dword ptr [rsi - 16], 48  # xmm0 = xmm0[0,1,2],mem[0]
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	psllw	xmm2, 7
	pand	xmm2, xmm10
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rsi - 396]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 268], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 140], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	packsswb	xmm4, xmm4
	insertps	xmm6, dword ptr [rsi - 12], 48  # xmm6 = xmm6[0,1,2],mem[0]
	por	xmm2, xmm1
	movaps	xmm1, xmm13
	cmpltps	xmm1, xmm5
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	movdqa	xmm5, xmm1
	pand	xmm5, xmm15
	psubb	xmm5, xmm1
	movss	xmm3, dword ptr [rsi - 392]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 264], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	pand	xmm4, xmm15
	insertps	xmm3, dword ptr [rsi - 136], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	por	xmm5, xmm4
	movaps	xmm4, xmm13
	cmpltps	xmm4, xmm7
	insertps	xmm3, dword ptr [rsi - 8], 48   # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 2
	pand	xmm4, xmmword ptr [rip + .LCPI7_1]
	por	xmm4, xmm5
	movaps	xmm5, xmm13
	cmpltps	xmm5, xmm0
	movaps	xmm1, xmm13
	cmpltps	xmm1, xmm6
	movss	xmm0, dword ptr [rsi - 388]     # xmm0 = mem[0],zero,zero,zero
	insertps	xmm0, dword ptr [rsi - 260], 16 # xmm0 = xmm0[0],mem[0],xmm0[2,3]
	insertps	xmm0, dword ptr [rsi - 132], 32 # xmm0 = xmm0[0,1],mem[0],xmm0[3]
	insertps	xmm0, dword ptr [rsi - 4], 48   # xmm0 = xmm0[0,1,2],mem[0]
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmmword ptr [rip + .LCPI7_2]
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 4
	pand	xmm1, xmm12
	por	xmm1, xmm5
	movss	xmm5, dword ptr [rsi - 384]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 256], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 128], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	por	xmm1, xmm4
	movaps	xmm4, xmm13
	cmpltps	xmm4, xmm3
	movaps	xmm3, xmm13
	cmpltps	xmm3, xmm0
	insertps	xmm5, dword ptr [rsi], 48       # xmm5 = xmm5[0,1,2],mem[0]
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 5
	pand	xmm4, xmm14
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 6
	pand	xmm3, xmm9
	por	xmm3, xmm4
	movaps	xmm0, xmm13
	cmpltps	xmm0, xmm5
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	psllw	xmm0, 7
	pand	xmm0, xmm10
	por	xmm0, xmm3
	por	xmm0, xmm1
	punpckldq	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1]
	punpcklbw	xmm8, xmm2              # xmm8 = xmm8[0],xmm2[0],xmm8[1],xmm2[1],xmm8[2],xmm2[2],xmm8[3],xmm2[3],xmm8[4],xmm2[4],xmm8[5],xmm2[5],xmm8[6],xmm2[6],xmm8[7],xmm2[7]
	pshufb	xmm8, xmmword ptr [rip + .LCPI7_7] # xmm8 = xmm8[0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]
	movdqu	xmmword ptr [r12 + 4*rcx], xmm8
	add	rcx, 4
	add	rsi, 512
	cmp	r8, rcx
	jne	.LBB7_181
# %bb.182:
	cmp	r10, r8
	jne	.LBB7_183
	jmp	.LBB7_186
.LBB7_122:
	and	r14, -8
	mov	rax, r14
	shl	rax, 6
	add	rax, rsi
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	qword ptr [rsp + 24], r14       # 8-byte Spill
	lea	rax, [r12 + 4*r14]
	mov	qword ptr [rsp], rax            # 8-byte Spill
	movd	xmm0, dword ptr [rsp + 240]     # 4-byte Folded Reload
                                        # xmm0 = mem[0],zero,zero,zero
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm0, xmm0, 0                   # xmm0 = xmm0[0,0,0,0]
	xor	r15d, r15d
	movdqa	xmm15, xmmword ptr [rip + .LCPI7_8] # xmm15 = <1,1,1,1,1,1,1,1,u,u,u,u,u,u,u,u>
	movdqa	xmm9, xmmword ptr [rip + .LCPI7_1] # xmm9 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI7_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI7_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI7_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI7_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI7_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	mov	qword ptr [rsp + 128], r12      # 8-byte Spill
	.p2align	4, 0x90
.LBB7_123:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 16], r15       # 8-byte Spill
	shl	r15, 6
	mov	r9, r15
	mov	r12, r15
	mov	r13, r15
	mov	rcx, r15
	mov	rdi, r15
	mov	rbx, r15
	movzx	r14d, word ptr [rsi + r15]
	movzx	eax, word ptr [rsi + r15 + 2]
	movzx	r11d, word ptr [rsi + r15 + 4]
	movzx	edx, word ptr [rsi + r15 + 6]
	movzx	r10d, word ptr [rsi + r15 + 8]
	mov	r8, r15
	or	r8, 64
	or	r9, 128
	or	r12, 192
	or	r13, 256
	or	rcx, 320
	or	rdi, 384
	or	rbx, 448
	movd	xmm4, r14d
	pinsrw	xmm4, word ptr [rsi + r8], 1
	pinsrw	xmm4, word ptr [rsi + r9], 2
	pinsrw	xmm4, word ptr [rsi + r12], 3
	pinsrw	xmm4, word ptr [rsi + r13], 4
	pinsrw	xmm4, word ptr [rsi + rcx], 5
	pinsrw	xmm4, word ptr [rsi + rdi], 6
	pinsrw	xmm4, word ptr [rsi + rbx], 7
	movzx	r14d, word ptr [rsi + r15 + 10]
	movd	xmm6, eax
	pinsrw	xmm6, word ptr [rsi + r8 + 2], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 2], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 2], 3
	movzx	eax, word ptr [rsi + r15 + 12]
	mov	dword ptr [rsp + 8], eax        # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + r13 + 2], 4
	movd	xmm2, r11d
	movzx	r11d, word ptr [rsi + r15 + 14]
	pinsrw	xmm6, word ptr [rsi + rcx + 2], 5
	movd	xmm5, edx
	movzx	edx, word ptr [rsi + r15 + 16]
	pinsrw	xmm6, word ptr [rsi + rdi + 2], 6
	movd	xmm3, r10d
	movzx	eax, word ptr [rsi + r15 + 18]
	mov	dword ptr [rsp + 40], eax       # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + rbx + 2], 7
	pcmpgtw	xmm6, xmm0
	packsswb	xmm6, xmm6
	movdqa	xmm1, xmm6
	pand	xmm1, xmm15
	psubb	xmm1, xmm6
	movd	xmm6, r14d
	movzx	r10d, word ptr [rsi + r15 + 20]
	pcmpgtw	xmm4, xmm0
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	pinsrw	xmm2, word ptr [rsi + r8 + 4], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 4], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 4], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 4], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 4], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 4], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 4], 7
	pinsrw	xmm5, word ptr [rsi + r8 + 6], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 6], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 6], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 6], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 6], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 6], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 6], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 8], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 8], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 8], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 8], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 8], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 8], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 8], 7
	por	xmm1, xmm4
	movd	xmm7, dword ptr [rsp + 8]       # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rsi + r15 + 22]
	pcmpgtw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 2
	pand	xmm2, xmm9
	por	xmm2, xmm1
	movd	xmm4, r11d
	movzx	r11d, word ptr [rsi + r15 + 24]
	pcmpgtw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	pcmpgtw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm5
	movd	xmm1, edx
	movzx	edx, word ptr [rsi + r15 + 26]
	pinsrw	xmm6, word ptr [rsi + r8 + 10], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 10], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 10], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 10], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 10], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 10], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 10], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 12], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 12], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 12], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 12], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 12], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 12], 6
	pinsrw	xmm7, word ptr [rsi + rbx + 12], 7
	por	xmm3, xmm2
	movd	xmm8, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm8 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rsi + r15 + 28]
	pcmpgtw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpgtw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm5, r10d
	movzx	r10d, word ptr [rsi + r15 + 30]
	pinsrw	xmm4, word ptr [rsi + r8 + 14], 1
	pinsrw	xmm4, word ptr [rsi + r9 + 14], 2
	pinsrw	xmm4, word ptr [rsi + r12 + 14], 3
	pinsrw	xmm4, word ptr [rsi + r13 + 14], 4
	pinsrw	xmm4, word ptr [rsi + rcx + 14], 5
	pinsrw	xmm4, word ptr [rsi + rdi + 14], 6
	pinsrw	xmm4, word ptr [rsi + rbx + 14], 7
	pinsrw	xmm8, word ptr [rsi + r8 + 18], 1
	pinsrw	xmm8, word ptr [rsi + r9 + 18], 2
	pinsrw	xmm8, word ptr [rsi + r12 + 18], 3
	pinsrw	xmm8, word ptr [rsi + r13 + 18], 4
	pinsrw	xmm8, word ptr [rsi + rcx + 18], 5
	pinsrw	xmm8, word ptr [rsi + rdi + 18], 6
	pinsrw	xmm8, word ptr [rsi + rbx + 18], 7
	pcmpgtw	xmm4, xmm0
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm7
	movd	xmm2, eax
	movzx	eax, word ptr [rsi + r15 + 32]
	por	xmm4, xmm3
	pcmpgtw	xmm8, xmm0
	packsswb	xmm8, xmm8
	movdqa	xmm7, xmm8
	pand	xmm7, xmm15
	psubb	xmm7, xmm8
	movd	xmm3, r11d
	movzx	r11d, word ptr [rsi + r15 + 34]
	pinsrw	xmm1, word ptr [rsi + r8 + 16], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 16], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 16], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 16], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 16], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 16], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 16], 7
	pcmpgtw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	por	xmm7, xmm1
	movd	xmm6, edx
	movzx	edx, word ptr [rsi + r15 + 36]
	mov	dword ptr [rsp + 32], edx       # 4-byte Spill
	pinsrw	xmm5, word ptr [rsi + r8 + 20], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 20], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 20], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 20], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 20], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 20], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 20], 7
	pcmpgtw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm9
	por	xmm5, xmm7
	movd	xmm7, r14d
	movzx	edx, word ptr [rsi + r15 + 38]
	mov	dword ptr [rsp + 40], edx       # 4-byte Spill
	pinsrw	xmm2, word ptr [rsi + r8 + 22], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 22], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 22], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 22], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 22], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 22], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 22], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 24], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 24], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 24], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 24], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 24], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 24], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 24], 7
	pcmpgtw	xmm2, xmm0
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	pcmpgtw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 4
	pand	xmm3, xmm11
	por	xmm3, xmm2
	movd	xmm2, r10d
	movzx	r14d, word ptr [rsi + r15 + 40]
	por	xmm3, xmm5
	movd	xmm5, eax
	movzx	eax, word ptr [rsi + r15 + 42]
	mov	dword ptr [rsp + 8], eax        # 4-byte Spill
	pinsrw	xmm6, word ptr [rsi + r8 + 26], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 26], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 26], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 26], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 26], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 26], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 26], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 28], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 28], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 28], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 28], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 28], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 28], 6
	pinsrw	xmm7, word ptr [rsi + rbx + 28], 7
	pinsrw	xmm2, word ptr [rsi + r8 + 30], 1
	pinsrw	xmm2, word ptr [rsi + r9 + 30], 2
	pinsrw	xmm2, word ptr [rsi + r12 + 30], 3
	pinsrw	xmm2, word ptr [rsi + r13 + 30], 4
	pinsrw	xmm2, word ptr [rsi + rcx + 30], 5
	pinsrw	xmm2, word ptr [rsi + rdi + 30], 6
	pinsrw	xmm2, word ptr [rsi + rbx + 30], 7
	pcmpgtw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpgtw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm6
	movd	xmm1, r11d
	movzx	r10d, word ptr [rsi + r15 + 44]
	pcmpgtw	xmm2, xmm0
	packsswb	xmm2, xmm2
	psllw	xmm2, 7
	pand	xmm2, xmm14
	por	xmm2, xmm7
	movd	xmm6, dword ptr [rsp + 32]      # 4-byte Folded Reload
                                        # xmm6 = mem[0],zero,zero,zero
	movzx	edx, word ptr [rsi + r15 + 46]
	pinsrw	xmm5, word ptr [rsi + r8 + 32], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 32], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 32], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 32], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 32], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 32], 6
	pinsrw	xmm1, word ptr [rsi + r8 + 34], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 34], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 34], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 34], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 34], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 34], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 34], 7
	por	xmm2, xmm3
	pcmpgtw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm7, xmm1
	pand	xmm7, xmm15
	psubb	xmm7, xmm1
	movd	xmm3, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	r11d, word ptr [rsi + r15 + 48]
	pinsrw	xmm5, word ptr [rsi + rbx + 32], 7
	pcmpgtw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	pinsrw	xmm6, word ptr [rsi + r8 + 36], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 36], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 36], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 36], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 36], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 36], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 36], 7
	pinsrw	xmm3, word ptr [rsi + r8 + 38], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 38], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 38], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 38], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 38], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 38], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 38], 7
	por	xmm7, xmm5
	movd	xmm5, r14d
	pinsrw	xmm5, word ptr [rsi + r8 + 40], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 40], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 40], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 40], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 40], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 40], 6
	movzx	eax, word ptr [rsi + r15 + 50]
	pcmpgtw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 2
	pand	xmm6, xmm9
	por	xmm6, xmm7
	movd	xmm1, dword ptr [rsp + 8]       # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rsi + r15 + 52]
	pinsrw	xmm5, word ptr [rsi + rbx + 40], 7
	pcmpgtw	xmm3, xmm0
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 3
	pand	xmm3, xmm10
	pcmpgtw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm3
	movd	xmm7, r10d
	movzx	r10d, word ptr [rsi + r15 + 54]
	pinsrw	xmm1, word ptr [rsi + r8 + 42], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 42], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 42], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 42], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 42], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 42], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 42], 7
	pinsrw	xmm7, word ptr [rsi + r8 + 44], 1
	pinsrw	xmm7, word ptr [rsi + r9 + 44], 2
	pinsrw	xmm7, word ptr [rsi + r12 + 44], 3
	pinsrw	xmm7, word ptr [rsi + r13 + 44], 4
	pinsrw	xmm7, word ptr [rsi + rcx + 44], 5
	pinsrw	xmm7, word ptr [rsi + rdi + 44], 6
	por	xmm5, xmm6
	movd	xmm3, edx
	movzx	edx, word ptr [rsi + r15 + 56]
	pinsrw	xmm7, word ptr [rsi + rbx + 44], 7
	pcmpgtw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 5
	pand	xmm1, xmm12
	pcmpgtw	xmm7, xmm0
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 6
	pand	xmm7, xmm13
	por	xmm7, xmm1
	movd	xmm6, r11d
	movzx	r11d, word ptr [rsi + r15 + 58]
	pinsrw	xmm3, word ptr [rsi + r8 + 46], 1
	pinsrw	xmm3, word ptr [rsi + r9 + 46], 2
	pinsrw	xmm3, word ptr [rsi + r12 + 46], 3
	pinsrw	xmm3, word ptr [rsi + r13 + 46], 4
	pinsrw	xmm3, word ptr [rsi + rcx + 46], 5
	pinsrw	xmm3, word ptr [rsi + rdi + 46], 6
	pinsrw	xmm3, word ptr [rsi + rbx + 46], 7
	pcmpgtw	xmm3, xmm0
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm7
	movd	xmm1, eax
	movzx	eax, word ptr [rsi + r15 + 60]
	movzx	r15d, word ptr [rsi + r15 + 62]
	pinsrw	xmm1, word ptr [rsi + r8 + 50], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 50], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 50], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 50], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 50], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 50], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 50], 7
	por	xmm3, xmm5
	pcmpgtw	xmm1, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm5, xmm1
	pand	xmm5, xmm15
	psubb	xmm5, xmm1
	movd	xmm1, r14d
	pinsrw	xmm6, word ptr [rsi + r8 + 48], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 48], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 48], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 48], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 48], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 48], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 48], 7
	pcmpgtw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pinsrw	xmm1, word ptr [rsi + r8 + 52], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 52], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 52], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 52], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 52], 5
	pand	xmm6, xmm15
	pinsrw	xmm1, word ptr [rsi + rdi + 52], 6
	por	xmm5, xmm6
	movd	xmm6, r10d
	pinsrw	xmm1, word ptr [rsi + rbx + 52], 7
	pcmpgtw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 2
	pand	xmm1, xmm9
	por	xmm1, xmm5
	movd	xmm5, edx
	pinsrw	xmm6, word ptr [rsi + r8 + 54], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 54], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 54], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 54], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 54], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 54], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 54], 7
	pinsrw	xmm5, word ptr [rsi + r8 + 56], 1
	pinsrw	xmm5, word ptr [rsi + r9 + 56], 2
	pinsrw	xmm5, word ptr [rsi + r12 + 56], 3
	pinsrw	xmm5, word ptr [rsi + r13 + 56], 4
	pinsrw	xmm5, word ptr [rsi + rcx + 56], 5
	pinsrw	xmm5, word ptr [rsi + rdi + 56], 6
	pinsrw	xmm5, word ptr [rsi + rbx + 56], 7
	pcmpgtw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 3
	pand	xmm6, xmm10
	pcmpgtw	xmm5, xmm0
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm6
	movd	xmm6, r11d
	pinsrw	xmm6, word ptr [rsi + r8 + 58], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 58], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 58], 3
	pinsrw	xmm6, word ptr [rsi + r13 + 58], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 58], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 58], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 58], 7
	por	xmm5, xmm1
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rsi + r8 + 60], 1
	pinsrw	xmm1, word ptr [rsi + r9 + 60], 2
	pinsrw	xmm1, word ptr [rsi + r12 + 60], 3
	pinsrw	xmm1, word ptr [rsi + r13 + 60], 4
	pinsrw	xmm1, word ptr [rsi + rcx + 60], 5
	pinsrw	xmm1, word ptr [rsi + rdi + 60], 6
	pinsrw	xmm1, word ptr [rsi + rbx + 60], 7
	pcmpgtw	xmm6, xmm0
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	pcmpgtw	xmm1, xmm0
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 6
	pand	xmm1, xmm13
	por	xmm1, xmm6
	movd	xmm6, r15d
	pinsrw	xmm6, word ptr [rsi + r8 + 62], 1
	pinsrw	xmm6, word ptr [rsi + r9 + 62], 2
	pinsrw	xmm6, word ptr [rsi + r12 + 62], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrw	xmm6, word ptr [rsi + r13 + 62], 4
	pinsrw	xmm6, word ptr [rsi + rcx + 62], 5
	pinsrw	xmm6, word ptr [rsi + rdi + 62], 6
	pinsrw	xmm6, word ptr [rsi + rbx + 62], 7
	pcmpgtw	xmm6, xmm0
	packsswb	xmm6, xmm6
	psllw	xmm6, 7
	pand	xmm6, xmm14
	por	xmm6, xmm1
	por	xmm6, xmm5
	movdqa	xmm1, xmm4
	punpcklqdq	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0]
	movdqa	xmm5, xmm3
	punpcklqdq	xmm5, xmm6              # xmm5 = xmm5[0],xmm6[0]
	movdqa	xmm7, xmmword ptr [rip + .LCPI7_9] # xmm7 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm5, xmm7
	pshufb	xmm1, xmm7
	punpcklwd	xmm1, xmm5              # xmm1 = xmm1[0],xmm5[0],xmm1[1],xmm5[1],xmm1[2],xmm5[2],xmm1[3],xmm5[3]
	punpcklbw	xmm3, xmm6              # xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1],xmm3[2],xmm6[2],xmm3[3],xmm6[3],xmm3[4],xmm6[4],xmm3[5],xmm6[5],xmm3[6],xmm6[6],xmm3[7],xmm6[7]
	punpcklbw	xmm4, xmm2              # xmm4 = xmm4[0],xmm2[0],xmm4[1],xmm2[1],xmm4[2],xmm2[2],xmm4[3],xmm2[3],xmm4[4],xmm2[4],xmm4[5],xmm2[5],xmm4[6],xmm2[6],xmm4[7],xmm2[7]
	punpcklwd	xmm4, xmm3              # xmm4 = xmm4[0],xmm3[0],xmm4[1],xmm3[1],xmm4[2],xmm3[2],xmm4[3],xmm3[3]
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	movdqu	xmmword ptr [rax + 4*rcx], xmm4
	movdqu	xmmword ptr [rax + 4*rcx + 16], xmm1
	add	rcx, 8
	mov	r15, rcx
	cmp	rcx, qword ptr [rsp + 24]       # 8-byte Folded Reload
	jne	.LBB7_123
# %bb.124:
	mov	r14, qword ptr [rsp + 272]      # 8-byte Reload
	cmp	r14, qword ptr [rsp + 24]       # 8-byte Folded Reload
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r12, qword ptr [rsp]            # 8-byte Reload
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	jne	.LBB7_125
	jmp	.LBB7_128
.Lfunc_end7:
	.size	comparison_greater_arr_scalar_sse4, .Lfunc_end7-comparison_greater_arr_scalar_sse4
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function comparison_greater_scalar_arr_sse4
.LCPI8_0:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI8_1:
	.zero	16,252
.LCPI8_2:
	.zero	16,248
.LCPI8_3:
	.zero	16,240
.LCPI8_4:
	.zero	16,224
.LCPI8_5:
	.zero	16,192
.LCPI8_6:
	.zero	16,128
.LCPI8_7:
	.byte	0                               # 0x0
	.byte	8                               # 0x8
	.byte	1                               # 0x1
	.byte	9                               # 0x9
	.byte	2                               # 0x2
	.byte	10                              # 0xa
	.byte	3                               # 0x3
	.byte	11                              # 0xb
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
.LCPI8_8:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI8_9:
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI8_10:
	.zero	16,1
.LCPI8_11:
	.zero	16,4
.LCPI8_12:
	.zero	16,8
.LCPI8_13:
	.zero	16,16
.LCPI8_14:
	.zero	16,32
.LCPI8_15:
	.zero	16,64
.LCPI8_16:
	.zero	16,255
	.text
	.globl	comparison_greater_scalar_arr_sse4
	.p2align	4, 0x90
	.type	comparison_greater_scalar_arr_sse4,@function
comparison_greater_scalar_arr_sse4:     # @comparison_greater_scalar_arr_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -16
	sub	rsp, 336
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB8_16
# %bb.1:
	cmp	edi, 3
	jle	.LBB8_31
# %bb.2:
	cmp	edi, 4
	je	.LBB8_81
# %bb.3:
	cmp	edi, 5
	je	.LBB8_92
# %bb.4:
	cmp	edi, 6
	jne	.LBB8_182
# %bb.5:
	mov	r13d, dword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_7:                                # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rdx], r13d
	lea	rdx, [rdx + 4]
	sbb	esi, esi
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_7
# %bb.8:
	add	r14, 1
.LBB8_9:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB8_13
# %bb.10:
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	mov	qword ptr [rsp + 208], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_11:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	r13d, dword ptr [rdx]
	seta	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 4]
	seta	dil
	cmp	r13d, dword ptr [rdx + 8]
	seta	r14b
	cmp	r13d, dword ptr [rdx + 12]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 16]
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 20]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 24]
	seta	al
	cmp	r13d, dword ptr [rdx + 28]
	seta	r11b
	cmp	r13d, dword ptr [rdx + 32]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 36]
	seta	sil
	cmp	r13d, dword ptr [rdx + 40]
	seta	r8b
	cmp	r13d, dword ptr [rdx + 44]
	seta	r9b
	cmp	r13d, dword ptr [rdx + 48]
	seta	r10b
	cmp	r13d, dword ptr [rdx + 52]
	seta	r12b
	cmp	r13d, dword ptr [rdx + 56]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 60]
	seta	cl
	cmp	r13d, dword ptr [rdx + 64]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 68]
	seta	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 72]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 76]
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 80]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 84]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 88]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 92]
	seta	r15b
	cmp	r13d, dword ptr [rdx + 96]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 100]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 104]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 108]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 112]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 116]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 120]
	seta	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 124]
	seta	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 112]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 88]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], bl
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB8_11
# %bb.12:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
.LBB8_13:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB8_182
# %bb.14:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB8_162
# %bb.15:
	xor	r11d, r11d
	jmp	.LBB8_164
.LBB8_16:
	cmp	edi, 8
	jle	.LBB8_45
# %bb.17:
	cmp	edi, 9
	je	.LBB8_104
# %bb.18:
	cmp	edi, 11
	je	.LBB8_115
# %bb.19:
	cmp	edi, 12
	jne	.LBB8_182
# %bb.20:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB8_24
# %bb.21:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_22:                               # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rdx]
	seta	bl
	add	rdx, 8
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r14 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_22
# %bb.23:
	add	r14, 1
.LBB8_24:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB8_28
# %bb.25:
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 208], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_26:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	ucomisd	xmm0, qword ptr [rdx]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 8]
	seta	r8b
	ucomisd	xmm0, qword ptr [rdx + 16]
	seta	r14b
	ucomisd	xmm0, qword ptr [rdx + 24]
	seta	r13b
	ucomisd	xmm0, qword ptr [rdx + 32]
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 40]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 48]
	seta	al
	ucomisd	xmm0, qword ptr [rdx + 56]
	seta	r11b
	ucomisd	xmm0, qword ptr [rdx + 64]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 72]
	seta	sil
	ucomisd	xmm0, qword ptr [rdx + 80]
	seta	dil
	ucomisd	xmm0, qword ptr [rdx + 88]
	seta	r9b
	ucomisd	xmm0, qword ptr [rdx + 96]
	seta	r10b
	ucomisd	xmm0, qword ptr [rdx + 104]
	seta	r12b
	ucomisd	xmm0, qword ptr [rdx + 112]
	seta	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 120]
	seta	cl
	ucomisd	xmm0, qword ptr [rdx + 128]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 136]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 144]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 152]
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 160]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 168]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 176]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 184]
	seta	r15b
	ucomisd	xmm0, qword ptr [rdx + 192]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 200]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 208]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 216]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 224]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 232]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 240]
	seta	byte ptr [rsp]                  # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 248]
	seta	bl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	sil, sil
	add	sil, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, sil
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r13b
	mov	r8d, eax
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	shl	r9b, 3
	or	r9b, dil
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 88]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], bl
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB8_26
# %bb.27:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
.LBB8_28:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB8_182
# %bb.29:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB8_166
# %bb.30:
	xor	edi, edi
	jmp	.LBB8_168
.LBB8_31:
	cmp	edi, 2
	je	.LBB8_58
# %bb.32:
	cmp	edi, 3
	jne	.LBB8_182
# %bb.33:
	mov	r11b, byte ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_37
# %bb.34:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_35:                               # =>This Inner Loop Header: Depth=1
	cmp	r11b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setg	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r14 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_35
# %bb.36:
	add	r14, 1
.LBB8_37:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB8_127
# %bb.38:
	cmp	r15, 16
	mov	byte ptr [rsp], r11b            # 1-byte Spill
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 256], r15      # 8-byte Spill
	jb	.LBB8_41
# %bb.39:
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	cmp	r14, rax
	jae	.LBB8_191
# %bb.40:
	lea	rax, [r14 + 4*r15]
	cmp	rdx, rax
	jae	.LBB8_191
.LBB8_41:
	xor	eax, eax
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rsi, rdx
	mov	qword ptr [rsp + 88], r14       # 8-byte Spill
.LBB8_42:
	mov	r14, r15
	sub	r14, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 208], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_43:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	r11b, byte ptr [rsi]
	setg	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rsi + 1]
	setg	dil
	cmp	r11b, byte ptr [rsi + 2]
	setg	r11b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 3]
	setg	r15b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 4]
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 5]
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 6]
	setg	bl
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 7]
	setg	r13b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 8]
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 9]
	setg	sil
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 10]
	setg	r8b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 11]
	setg	r9b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 12]
	setg	r14b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 13]
	setg	r12b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 14]
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 15]
	setg	al
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 16]
	setg	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 17]
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 18]
	setg	byte ptr [rsp + 144]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 19]
	setg	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 20]
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 21]
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 22]
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 23]
	setg	r10b
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 24]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 25]
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 26]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 27]
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 28]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 29]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 30]
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 31]
	setg	dl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r13b, 7
	or	r13b, bl
	shl	r11b, 2
	or	r11b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	r15b, 3
	or	r15b, r11b
	movzx	r11d, byte ptr [rsp]            # 1-byte Folded Reload
	shl	r8b, 2
	or	r8b, sil
	movzx	ebx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r15b
	mov	esi, ebx
	shl	r9b, 3
	or	r9b, r8b
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r14b, 4
	or	r14b, r9b
	shl	r12b, 5
	or	r12b, r14b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	al, 7
	or	al, sil
	or	r13b, bl
	or	al, r12b
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	mov	byte ptr [rdi], r13b
	movzx	esi, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r10b, 7
	or	r10b, sil
	mov	byte ptr [rdi + 1], al
	or	r10b, bl
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rdi + 2], r10b
	mov	byte ptr [rdi + 3], dl
	lea	rsi, [rcx + 32]
	add	rdi, 4
	mov	qword ptr [rsp + 88], rdi       # 8-byte Spill
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB8_43
# %bb.44:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	jmp	.LBB8_128
.LBB8_45:
	cmp	edi, 7
	je	.LBB8_70
# %bb.46:
	cmp	edi, 8
	jne	.LBB8_182
# %bb.47:
	mov	r13, qword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_51
# %bb.48:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_49:                               # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rdx], r13
	lea	rdx, [rdx + 8]
	sbb	esi, esi
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_49
# %bb.50:
	add	r14, 1
.LBB8_51:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB8_55
# %bb.52:
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	mov	qword ptr [rsp + 208], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_53:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	r13, qword ptr [rdx]
	seta	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 8]
	seta	dil
	cmp	r13, qword ptr [rdx + 16]
	seta	r14b
	cmp	r13, qword ptr [rdx + 24]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 32]
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 40]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 48]
	seta	al
	cmp	r13, qword ptr [rdx + 56]
	seta	r11b
	cmp	r13, qword ptr [rdx + 64]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 72]
	seta	sil
	cmp	r13, qword ptr [rdx + 80]
	seta	r8b
	cmp	r13, qword ptr [rdx + 88]
	seta	r9b
	cmp	r13, qword ptr [rdx + 96]
	seta	r10b
	cmp	r13, qword ptr [rdx + 104]
	seta	r12b
	cmp	r13, qword ptr [rdx + 112]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 120]
	seta	cl
	cmp	r13, qword ptr [rdx + 128]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 136]
	seta	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 144]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 152]
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 160]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 168]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 176]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 184]
	seta	r15b
	cmp	r13, qword ptr [rdx + 192]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 200]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 208]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 216]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 224]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 232]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 240]
	seta	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 248]
	seta	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 112]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 88]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], bl
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB8_53
# %bb.54:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
.LBB8_55:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB8_182
# %bb.56:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB8_143
# %bb.57:
	xor	r11d, r11d
	jmp	.LBB8_145
.LBB8_58:
	mov	r11b, byte ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_62
# %bb.59:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_60:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rdx], r11b
	lea	rdx, [rdx + 1]
	sbb	esi, esi
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	sil, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_60
# %bb.61:
	add	r14, 1
.LBB8_62:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB8_131
# %bb.63:
	cmp	r15, 16
	mov	byte ptr [rsp], r11b            # 1-byte Spill
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 256], r15      # 8-byte Spill
	jb	.LBB8_66
# %bb.64:
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	cmp	r14, rax
	jae	.LBB8_194
# %bb.65:
	lea	rax, [r14 + 4*r15]
	cmp	rdx, rax
	jae	.LBB8_194
.LBB8_66:
	xor	eax, eax
	mov	qword ptr [rsp + 232], rax      # 8-byte Spill
	mov	rsi, rdx
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
.LBB8_67:
	mov	r14, r15
	sub	r14, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 208], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_68:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	r11b, byte ptr [rsi]
	seta	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r11b, byte ptr [rsi + 1]
	seta	dil
	cmp	r11b, byte ptr [rsi + 2]
	seta	r11b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 3]
	seta	r15b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 4]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 5]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 6]
	seta	bl
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 7]
	seta	r13b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 8]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rsi + 9]
	seta	sil
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 10]
	seta	r8b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 11]
	seta	r9b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 12]
	seta	r14b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 13]
	seta	r12b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 14]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rcx + 15]
	seta	al
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 16]
	seta	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 17]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 18]
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 19]
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 20]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 21]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 22]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 23]
	seta	r10b
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 24]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 25]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 26]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 27]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 28]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 29]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 30]
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	edx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	dl, byte ptr [rcx + 31]
	seta	dl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r13b, 7
	or	r13b, bl
	shl	r11b, 2
	or	r11b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	r15b, 3
	or	r15b, r11b
	movzx	r11d, byte ptr [rsp]            # 1-byte Folded Reload
	shl	r8b, 2
	or	r8b, sil
	movzx	ebx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r15b
	mov	esi, ebx
	shl	r9b, 3
	or	r9b, r8b
	movzx	ebx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r14b, 4
	or	r14b, r9b
	shl	r12b, 5
	or	r12b, r14b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	al, 7
	or	al, sil
	or	r13b, bl
	or	al, r12b
	movzx	ebx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	mov	byte ptr [rdi], r13b
	movzx	esi, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r10b, 7
	or	r10b, sil
	mov	byte ptr [rdi + 1], al
	or	r10b, bl
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 64]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rdi + 2], r10b
	mov	byte ptr [rdi + 3], dl
	lea	rsi, [rcx + 32]
	add	rdi, 4
	mov	qword ptr [rsp + 48], rdi       # 8-byte Spill
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB8_68
# %bb.69:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	jmp	.LBB8_132
.LBB8_70:
	mov	r13d, dword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_74
# %bb.71:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_72:                               # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setg	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r14 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r14 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_72
# %bb.73:
	add	r14, 1
.LBB8_74:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB8_78
# %bb.75:
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	mov	qword ptr [rsp + 208], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_76:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	r13d, dword ptr [rdx]
	setg	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 4]
	setg	dil
	cmp	r13d, dword ptr [rdx + 8]
	setg	r14b
	cmp	r13d, dword ptr [rdx + 12]
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 16]
	setg	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 20]
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 24]
	setg	al
	cmp	r13d, dword ptr [rdx + 28]
	setg	r11b
	cmp	r13d, dword ptr [rdx + 32]
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 36]
	setg	sil
	cmp	r13d, dword ptr [rdx + 40]
	setg	r8b
	cmp	r13d, dword ptr [rdx + 44]
	setg	r9b
	cmp	r13d, dword ptr [rdx + 48]
	setg	r10b
	cmp	r13d, dword ptr [rdx + 52]
	setg	r12b
	cmp	r13d, dword ptr [rdx + 56]
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 60]
	setg	cl
	cmp	r13d, dword ptr [rdx + 64]
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 68]
	setg	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 72]
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 76]
	setg	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 80]
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 84]
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 88]
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 92]
	setg	r15b
	cmp	r13d, dword ptr [rdx + 96]
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 100]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 104]
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 108]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 112]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 116]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 120]
	setg	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r13d, dword ptr [rdx + 124]
	setg	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 112]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 88]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], bl
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB8_76
# %bb.77:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
.LBB8_78:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB8_182
# %bb.79:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB8_147
# %bb.80:
	xor	edi, edi
	jmp	.LBB8_149
.LBB8_81:
	movzx	r13d, word ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_85
# %bb.82:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_83:                               # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rdx], r13w
	lea	rdx, [rdx + 2]
	sbb	esi, esi
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_83
# %bb.84:
	add	r14, 1
.LBB8_85:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB8_89
# %bb.86:
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	mov	qword ptr [rsp + 208], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_87:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	r13w, word ptr [rdx]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 2]
	seta	dil
	cmp	r13w, word ptr [rdx + 4]
	seta	r14b
	cmp	r13w, word ptr [rdx + 6]
	seta	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 8]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 10]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 12]
	seta	al
	cmp	r13w, word ptr [rdx + 14]
	seta	r11b
	cmp	r13w, word ptr [rdx + 16]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 18]
	seta	sil
	cmp	r13w, word ptr [rdx + 20]
	seta	r8b
	cmp	r13w, word ptr [rdx + 22]
	seta	r9b
	cmp	r13w, word ptr [rdx + 24]
	seta	r10b
	cmp	r13w, word ptr [rdx + 26]
	seta	r12b
	cmp	r13w, word ptr [rdx + 28]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 30]
	seta	cl
	cmp	r13w, word ptr [rdx + 32]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 34]
	seta	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 36]
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 38]
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 40]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 42]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 44]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 46]
	seta	r15b
	cmp	r13w, word ptr [rdx + 48]
	seta	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 50]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 52]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 54]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 56]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 58]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 60]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rdx + 62]
	seta	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 56]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp]              # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], bl
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB8_87
# %bb.88:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
.LBB8_89:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB8_182
# %bb.90:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB8_170
# %bb.91:
	xor	r11d, r11d
	jmp	.LBB8_172
.LBB8_92:
	movzx	r13d, word ptr [rsi]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_96
# %bb.93:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_94:                               # =>This Inner Loop Header: Depth=1
	cmp	r13w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setg	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r14 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_94
# %bb.95:
	add	r14, 1
.LBB8_96:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB8_135
# %bb.97:
	cmp	r15, 8
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 240], r15      # 8-byte Spill
	jb	.LBB8_100
# %bb.98:
	mov	rax, r15
	shl	rax, 6
	add	rax, rdx
	cmp	r14, rax
	jae	.LBB8_197
# %bb.99:
	lea	rax, [r14 + 4*r15]
	cmp	rax, rdx
	jbe	.LBB8_197
.LBB8_100:
	xor	eax, eax
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rsi, rdx
	mov	r12, r14
.LBB8_101:
	mov	qword ptr [rsp], r12            # 8-byte Spill
	mov	r14, r15
	sub	r14, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 208], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_102:                              # =>This Inner Loop Header: Depth=1
	mov	r11, rsi
	cmp	r13w, word ptr [rsi]
	setg	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 2]
	setg	dil
	cmp	r13w, word ptr [rsi + 4]
	setg	r14b
	cmp	r13w, word ptr [rsi + 6]
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 8]
	setg	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 10]
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 12]
	setg	al
	cmp	r13w, word ptr [rsi + 14]
	setg	r10b
	cmp	r13w, word ptr [rsi + 16]
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13w, word ptr [rsi + 18]
	setg	cl
	cmp	r13w, word ptr [rsi + 20]
	setg	dl
	cmp	r13w, word ptr [rsi + 22]
	setg	sil
	cmp	r13w, word ptr [r11 + 24]
	setg	r9b
	cmp	r13w, word ptr [r11 + 26]
	setg	r12b
	cmp	r13w, word ptr [r11 + 28]
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 30]
	setg	r8b
	cmp	r13w, word ptr [r11 + 32]
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 34]
	setg	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 36]
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 38]
	setg	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 40]
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 42]
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 44]
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 46]
	setg	r15b
	cmp	r13w, word ptr [r11 + 48]
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 50]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 52]
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 54]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 56]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 58]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 60]
	setg	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r13w, word ptr [r11 + 62]
	setg	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r10b, 7
	or	r10b, al
	shl	r14b, 2
	or	r14b, dil
	add	cl, cl
	add	cl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	dl, 2
	or	dl, cl
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	sil, 3
	or	sil, dl
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r9b, 4
	or	r9b, sil
	shl	r12b, 5
	or	r12b, r9b
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r10b, cl
	or	r8b, r12b
	movzx	ecx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 88]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	esi, ecx
	mov	rcx, qword ptr [rsp]            # 8-byte Reload
	mov	byte ptr [rcx], r10b
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 6
	shl	r15b, 7
	or	r15b, dl
	mov	byte ptr [rcx + 1], r8b
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 6
	shl	bl, 7
	or	bl, dl
	or	bl, al
	mov	byte ptr [rcx + 2], r15b
	mov	byte ptr [rcx + 3], bl
	lea	rsi, [r11 + 64]
	add	rcx, 4
	mov	qword ptr [rsp], rcx            # 8-byte Spill
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB8_102
# %bb.103:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	mov	r12, qword ptr [rsp]            # 8-byte Reload
	jmp	.LBB8_136
.LBB8_104:
	mov	r13, qword ptr [rsi]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB8_108
# %bb.105:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_106:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setg	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r14 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r14 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_106
# %bb.107:
	add	r14, 1
.LBB8_108:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB8_112
# %bb.109:
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 240], r11      # 8-byte Spill
	mov	qword ptr [rsp + 208], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_110:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	cmp	r13, qword ptr [rdx]
	setg	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 8]
	setg	dil
	cmp	r13, qword ptr [rdx + 16]
	setg	r14b
	cmp	r13, qword ptr [rdx + 24]
	setg	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 32]
	setg	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 40]
	setg	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 48]
	setg	al
	cmp	r13, qword ptr [rdx + 56]
	setg	r11b
	cmp	r13, qword ptr [rdx + 64]
	setg	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 72]
	setg	sil
	cmp	r13, qword ptr [rdx + 80]
	setg	r8b
	cmp	r13, qword ptr [rdx + 88]
	setg	r9b
	cmp	r13, qword ptr [rdx + 96]
	setg	r10b
	cmp	r13, qword ptr [rdx + 104]
	setg	r12b
	cmp	r13, qword ptr [rdx + 112]
	setg	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 120]
	setg	cl
	cmp	r13, qword ptr [rdx + 128]
	setg	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 136]
	setg	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 144]
	setg	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 152]
	setg	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 160]
	setg	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 168]
	setg	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 176]
	setg	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 184]
	setg	r15b
	cmp	r13, qword ptr [rdx + 192]
	setg	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 200]
	setg	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 208]
	setg	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 216]
	setg	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 224]
	setg	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 232]
	setg	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 240]
	setg	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r13, qword ptr [rdx + 248]
	setg	bl
	add	dil, dil
	add	dil, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, dil
	add	sil, sil
	add	sil, byte ptr [rsp + 112]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	mov	edi, eax
	shl	r8b, 2
	or	r8b, sil
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 4
	or	al, dil
	mov	edi, eax
	shl	r9b, 3
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dil
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r11b, al
	or	cl, r12b
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 88]         # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], cl
	or	r15b, al
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	cl, 6
	shl	bl, 7
	or	bl, cl
	or	bl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], bl
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB8_110
# %bb.111:
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
.LBB8_112:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB8_182
# %bb.113:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB8_175
# %bb.114:
	xor	edi, edi
	jmp	.LBB8_177
.LBB8_115:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB8_119
# %bb.116:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB8_117:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rdx]
	seta	bl
	add	rdx, 4
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r14 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB8_117
# %bb.118:
	add	r14, 1
.LBB8_119:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB8_139
# %bb.120:
	cmp	r11, 4
	jb	.LBB8_123
# %bb.121:
	mov	rax, r11
	shl	rax, 7
	add	rax, rdx
	cmp	r14, rax
	jae	.LBB8_200
# %bb.122:
	lea	rax, [r14 + 4*r11]
	cmp	rax, rdx
	jbe	.LBB8_200
.LBB8_123:
	xor	r8d, r8d
	mov	rbx, rdx
	mov	r15, r14
.LBB8_124:
	mov	qword ptr [rsp], r15            # 8-byte Spill
	mov	qword ptr [rsp + 136], r10      # 8-byte Spill
	mov	qword ptr [rsp + 208], r11      # 8-byte Spill
	sub	r11, r8
	mov	qword ptr [rsp + 192], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_125:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	seta	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 4]
	seta	r8b
	ucomiss	xmm0, dword ptr [rbx + 8]
	seta	r14b
	ucomiss	xmm0, dword ptr [rbx + 12]
	seta	r13b
	ucomiss	xmm0, dword ptr [rbx + 16]
	seta	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 20]
	seta	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 24]
	seta	al
	ucomiss	xmm0, dword ptr [rbx + 28]
	seta	r11b
	ucomiss	xmm0, dword ptr [rbx + 32]
	seta	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 36]
	seta	dl
	ucomiss	xmm0, dword ptr [rbx + 40]
	seta	sil
	ucomiss	xmm0, dword ptr [rbx + 44]
	seta	dil
	ucomiss	xmm0, dword ptr [rbx + 48]
	seta	r10b
	ucomiss	xmm0, dword ptr [rbx + 52]
	seta	r12b
	ucomiss	xmm0, dword ptr [rbx + 56]
	seta	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 60]
	seta	r9b
	ucomiss	xmm0, dword ptr [rbx + 64]
	seta	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 68]
	seta	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 72]
	seta	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 76]
	seta	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 80]
	seta	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 84]
	seta	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 88]
	seta	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 92]
	seta	r15b
	ucomiss	xmm0, dword ptr [rbx + 96]
	seta	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 100]
	seta	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 104]
	seta	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 108]
	seta	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 112]
	seta	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 116]
	seta	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 120]
	seta	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 124]
	seta	cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 104]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 88]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp]            # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r15b, dl
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 6
	shl	cl, 7
	or	cl, dl
	or	cl, al
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], cl
	add	rbx, 128
	add	rsi, 4
	mov	qword ptr [rsp], rsi            # 8-byte Spill
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB8_125
# %bb.126:
	mov	r15, qword ptr [rsp]            # 8-byte Reload
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 208]      # 8-byte Reload
	jmp	.LBB8_140
.LBB8_127:
	mov	qword ptr [rsp + 88], r14       # 8-byte Spill
	mov	rsi, rdx
.LBB8_128:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB8_182
# %bb.129:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB8_151
# %bb.130:
	xor	r9d, r9d
	jmp	.LBB8_154
.LBB8_131:
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rsi, rdx
.LBB8_132:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB8_182
# %bb.133:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB8_156
# %bb.134:
	xor	r9d, r9d
	jmp	.LBB8_159
.LBB8_135:
	mov	r12, r14
	mov	rsi, rdx
.LBB8_136:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB8_182
# %bb.137:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB8_183
# %bb.138:
	xor	r14d, r14d
	jmp	.LBB8_185
.LBB8_139:
	mov	r15, r14
	mov	rbx, rdx
.LBB8_140:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB8_182
# %bb.141:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB8_187
# %bb.142:
	xor	esi, esi
	jmp	.LBB8_189
.LBB8_143:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB8_144:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rdx], r13
	sbb	edi, edi
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r14 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r14 + rsi], al
	add	r11, 2
	cmp	qword ptr [rdx + 8], r13
	lea	rdx, [rdx + 16]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r14 + rsi], bl
	cmp	r9, r11
	jne	.LBB8_144
.LBB8_145:
	test	r8b, 1
	je	.LBB8_182
# %bb.146:
	cmp	qword ptr [rdx], r13
	jmp	.LBB8_174
.LBB8_147:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB8_148:                              # =>This Inner Loop Header: Depth=1
	cmp	r13d, dword ptr [rdx]
	setg	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rsi], bl
	add	rdi, 2
	cmp	r13d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	setg	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r14 + rsi], al
	cmp	r10, rdi
	jne	.LBB8_148
.LBB8_149:
	test	r8b, 1
	je	.LBB8_182
# %bb.150:
	cmp	r13d, dword ptr [rdx]
	jmp	.LBB8_179
.LBB8_151:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	.p2align	4, 0x90
.LBB8_152:                              # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	r11b, byte ptr [rsi + r9]
	setg	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r14 + rdi], dl
	cmp	r11b, byte ptr [rsi + rax + 1]
	lea	r9, [rax + 2]
	setg	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r14 + rdi], al
	cmp	r10, r9
	jne	.LBB8_152
# %bb.153:
	add	rsi, r9
.LBB8_154:
	test	r8b, 1
	je	.LBB8_182
# %bb.155:
	cmp	r11b, byte ptr [rsi]
	setg	al
	neg	al
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	jmp	.LBB8_161
.LBB8_156:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	.p2align	4, 0x90
.LBB8_157:                              # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	byte ptr [rsi + r9], r11b
	sbb	edi, edi
	mov	rbx, r9
	shr	rbx, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	dl, dil
	xor	dl, r9b
	mov	byte ptr [r14 + rbx], dl
	cmp	byte ptr [rsi + rax + 1], r11b
	lea	r9, [rax + 2]
	sbb	edi, edi
	xor	dil, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, dl
	mov	byte ptr [r14 + rbx], al
	cmp	r10, r9
	jne	.LBB8_157
# %bb.158:
	add	rsi, r9
.LBB8_159:
	test	r8b, 1
	je	.LBB8_182
# %bb.160:
	cmp	byte ptr [rsi], r11b
	sbb	eax, eax
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	shl	bl, cl
	xor	al, dil
	and	bl, al
.LBB8_161:
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB8_182
.LBB8_162:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB8_163:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rdx], r13d
	sbb	edi, edi
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r14 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r14 + rsi], al
	add	r11, 2
	cmp	dword ptr [rdx + 4], r13d
	lea	rdx, [rdx + 8]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r14 + rsi], bl
	cmp	r9, r11
	jne	.LBB8_163
.LBB8_164:
	test	r8b, 1
	je	.LBB8_182
# %bb.165:
	cmp	dword ptr [rdx], r13d
	jmp	.LBB8_174
.LBB8_166:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB8_167:                              # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rdx]
	seta	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rsi], bl
	add	rdi, 2
	ucomisd	xmm0, qword ptr [rdx + 8]
	seta	r9b
	add	rdx, 16
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r14 + rsi], al
	cmp	r10, rdi
	jne	.LBB8_167
.LBB8_168:
	test	r8b, 1
	je	.LBB8_182
# %bb.169:
	ucomisd	xmm0, qword ptr [rdx]
	seta	al
	jmp	.LBB8_180
.LBB8_170:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB8_171:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rdx], r13w
	sbb	edi, edi
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r14 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dil, r10b
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r14 + rsi], al
	add	r11, 2
	cmp	word ptr [rdx + 2], r13w
	lea	rdx, [rdx + 4]
	sbb	edi, edi
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r14 + rsi], bl
	cmp	r9, r11
	jne	.LBB8_171
.LBB8_172:
	test	r8b, 1
	je	.LBB8_182
# %bb.173:
	cmp	word ptr [rdx], r13w
.LBB8_174:
	sbb	eax, eax
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	jmp	.LBB8_181
.LBB8_175:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB8_176:                              # =>This Inner Loop Header: Depth=1
	cmp	r13, qword ptr [rdx]
	setg	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r14 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rsi], bl
	add	rdi, 2
	cmp	r13, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	setg	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r14 + rsi], al
	cmp	r10, rdi
	jne	.LBB8_176
.LBB8_177:
	test	r8b, 1
	je	.LBB8_182
# %bb.178:
	cmp	r13, qword ptr [rdx]
.LBB8_179:
	setg	al
.LBB8_180:
	neg	al
	mov	rdx, rdi
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	dil, 7
	mov	bl, 1
	mov	ecx, edi
	shl	bl, cl
	xor	al, sil
	and	bl, al
.LBB8_181:
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
.LBB8_182:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB8_183:
	mov	r9, r8
	and	r9, -2
	xor	r14d, r14d
	.p2align	4, 0x90
.LBB8_184:                              # =>This Inner Loop Header: Depth=1
	mov	rax, rsi
	cmp	r13w, word ptr [rsi]
	setg	dl
	neg	dl
	mov	rdi, r14
	shr	rdi, 3
	movzx	r10d, byte ptr [r12 + rdi]
	mov	ecx, r14d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r12 + rdi], bl
	add	r14, 2
	cmp	r13w, word ptr [rsi + 2]
	lea	rsi, [rsi + 4]
	setg	dl
	neg	dl
	xor	dl, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dl
	xor	al, bl
	mov	byte ptr [r12 + rdi], al
	cmp	r9, r14
	jne	.LBB8_184
.LBB8_185:
	test	r8b, 1
	je	.LBB8_182
# %bb.186:
	cmp	r13w, word ptr [rsi]
	setg	al
	neg	al
	mov	rdx, r14
	shr	rdx, 3
	mov	dil, byte ptr [r12 + rdx]
	and	r14b, 7
	mov	bl, 1
	mov	ecx, r14d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r12 + rdx], bl
	jmp	.LBB8_182
.LBB8_187:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, r15
	.p2align	4, 0x90
.LBB8_188:                              # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	seta	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	mov	ecx, esi
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dl, r9b
	and	al, dl
	xor	al, r9b
	mov	byte ptr [r11 + rdi], al
	add	rsi, 2
	ucomiss	xmm0, dword ptr [rbx + 4]
	seta	r9b
	add	rbx, 8
	neg	r9b
	xor	r9b, al
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, r9b
	xor	dl, al
	mov	byte ptr [r11 + rdi], dl
	cmp	r10, rsi
	jne	.LBB8_188
.LBB8_189:
	test	r8b, 1
	je	.LBB8_182
# %bb.190:
	ucomiss	xmm0, dword ptr [rbx]
	seta	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r14, r15
	mov	dil, byte ptr [r15 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r15 + rdx], bl
	jmp	.LBB8_182
.LBB8_191:
	and	r15, -16
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	qword ptr [rsp + 232], r15      # 8-byte Spill
	lea	rax, [r14 + 4*r15]
	mov	qword ptr [rsp + 88], rax       # 8-byte Spill
	movzx	eax, r11b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 288], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_192:                              # =>This Inner Loop Header: Depth=1
	mov	r9, rax
	mov	qword ptr [rsp + 120], rax      # 8-byte Spill
	shl	rax, 5
	mov	qword ptr [rsp + 64], rax       # 8-byte Spill
	mov	r11, rax
	mov	r9, rax
	mov	r12, rax
	mov	r14, rax
	mov	r13, rax
	mov	rsi, rax
	mov	r10, rax
	mov	r15, rax
	mov	rbx, rax
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	movzx	ecx, byte ptr [rdx + rax]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rdx + rax + 1]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [rdx + rax + 2]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rdx + rax + 3]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [rdx + rax + 4]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rdx + rax + 5]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rdx + rax + 6]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 192], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rax + 7]
	movd	xmm1, ecx
	movzx	ecx, byte ptr [rdx + rax + 8]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rdx + rax + 9]
	movd	xmm0, ecx
	movzx	ecx, byte ptr [rdx + rax + 10]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [rdx + rax + 11]
	movd	xmm10, ecx
	movzx	ecx, byte ptr [rdx + rax + 12]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rdx + rax + 16]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [rdx + rax + 24]
	movd	xmm4, ecx
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	rcx, rax
	or	rcx, 32
	mov	qword ptr [rsp + 16], rcx       # 8-byte Spill
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	or	r8, 64
	mov	qword ptr [rsp + 64], r8        # 8-byte Spill
	or	r11, 96
	or	r9, 128
	or	r12, 160
	mov	qword ptr [rsp + 160], r12      # 8-byte Spill
	or	r14, 192
	mov	qword ptr [rsp + 144], r14      # 8-byte Spill
	mov	rdi, rax
	or	rdi, 224
	or	r13, 256
	mov	qword ptr [rsp + 32], r13       # 8-byte Spill
	or	r10, 288
	or	r15, 320
	or	rbx, 352
	or	qword ptr [rsp + 72], 384       # 8-byte Folded Spill
	mov	rcx, rax
	or	rcx, 416
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	or	rsi, 448
	mov	rcx, rax
	or	rcx, 480
	mov	qword ptr [rsp + 48], rcx       # 8-byte Spill
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rax], 1
	pinsrb	xmm8, byte ptr [rdx + r8], 2
	pinsrb	xmm8, byte ptr [rdx + r11], 3
	pinsrb	xmm8, byte ptr [rdx + r9], 4
	pinsrb	xmm8, byte ptr [rdx + r12], 5
	pinsrb	xmm8, byte ptr [rdx + r14], 6
	pinsrb	xmm8, byte ptr [rdx + rdi], 7
	pinsrb	xmm8, byte ptr [rdx + r13], 8
	pinsrb	xmm8, byte ptr [rdx + r10], 9
	mov	r12, r15
	mov	qword ptr [rsp + 96], r15       # 8-byte Spill
	pinsrb	xmm8, byte ptr [rdx + r15], 10
	pinsrb	xmm8, byte ptr [rdx + rbx], 11
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r15], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rax], 13
	pinsrb	xmm8, byte ptr [rdx + rsi], 14
	pinsrb	xmm8, byte ptr [rdx + rcx], 15
	movdqa	xmm13, xmmword ptr [rsp + 288]  # 16-byte Reload
	movdqa	xmm3, xmm13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 1], 1
	pinsrb	xmm7, byte ptr [rdx + r8 + 1], 2
	pinsrb	xmm7, byte ptr [rdx + r11 + 1], 3
	pinsrb	xmm7, byte ptr [rdx + r9 + 1], 4
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + r13 + 1], 5
	pinsrb	xmm7, byte ptr [rdx + r14 + 1], 6
	pinsrb	xmm7, byte ptr [rdx + rdi + 1], 7
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 1], 8
	pinsrb	xmm7, byte ptr [rdx + r10 + 1], 9
	pinsrb	xmm7, byte ptr [rdx + r12 + 1], 10
	pinsrb	xmm7, byte ptr [rdx + rbx + 1], 11
	pinsrb	xmm7, byte ptr [rdx + r15 + 1], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 1], 13
	pinsrb	xmm7, byte ptr [rdx + rsi + 1], 14
	pinsrb	xmm7, byte ptr [rdx + rcx + 1], 15
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 2], 1
	pinsrb	xmm6, byte ptr [rdx + r8 + 2], 2
	pinsrb	xmm6, byte ptr [rdx + r11 + 2], 3
	pinsrb	xmm6, byte ptr [rdx + r9 + 2], 4
	pinsrb	xmm6, byte ptr [rdx + r13 + 2], 5
	pinsrb	xmm6, byte ptr [rdx + r14 + 2], 6
	pinsrb	xmm6, byte ptr [rdx + rdi + 2], 7
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 2], 8
	pinsrb	xmm6, byte ptr [rdx + r10 + 2], 9
	pinsrb	xmm6, byte ptr [rdx + r12 + 2], 10
	pinsrb	xmm6, byte ptr [rdx + rbx + 2], 11
	pinsrb	xmm6, byte ptr [rdx + r15 + 2], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 2], 13
	pinsrb	xmm6, byte ptr [rdx + rsi + 2], 14
	pinsrb	xmm6, byte ptr [rdx + rcx + 2], 15
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rax + 8], 1
	pinsrb	xmm12, byte ptr [rdx + r8 + 8], 2
	pinsrb	xmm12, byte ptr [rdx + r11 + 8], 3
	pinsrb	xmm12, byte ptr [rdx + r9 + 8], 4
	pinsrb	xmm12, byte ptr [rdx + r13 + 8], 5
	pinsrb	xmm12, byte ptr [rdx + r14 + 8], 6
	pinsrb	xmm12, byte ptr [rdx + rdi + 8], 7
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rax + 8], 8
	pinsrb	xmm12, byte ptr [rdx + r10 + 8], 9
	pinsrb	xmm12, byte ptr [rdx + r12 + 8], 10
	pinsrb	xmm12, byte ptr [rdx + rbx + 8], 11
	pinsrb	xmm12, byte ptr [rdx + r15 + 8], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rax + 8], 13
	pinsrb	xmm12, byte ptr [rdx + rsi + 8], 14
	pinsrb	xmm12, byte ptr [rdx + rcx + 8], 15
	pcmpgtb	xmm3, xmm8
	movdqa	xmmword ptr [rsp + 272], xmm3   # 16-byte Spill
	movdqa	xmm3, xmm13
	pcmpgtb	xmm3, xmm12
	movdqa	xmmword ptr [rsp + 304], xmm3   # 16-byte Spill
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rcx + 16], 1
	pinsrb	xmm14, byte ptr [rdx + r8 + 16], 2
	pinsrb	xmm14, byte ptr [rdx + r11 + 16], 3
	pinsrb	xmm14, byte ptr [rdx + r9 + 16], 4
	pinsrb	xmm14, byte ptr [rdx + r13 + 16], 5
	pinsrb	xmm14, byte ptr [rdx + r14 + 16], 6
	pinsrb	xmm14, byte ptr [rdx + rdi + 16], 7
	mov	r14, rdi
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rcx + 16], 8
	pinsrb	xmm14, byte ptr [rdx + r10 + 16], 9
	pinsrb	xmm14, byte ptr [rdx + r12 + 16], 10
	pinsrb	xmm14, byte ptr [rdx + rbx + 16], 11
	pinsrb	xmm14, byte ptr [rdx + r15 + 16], 12
	mov	rcx, rax
	pinsrb	xmm14, byte ptr [rdx + rax + 16], 13
	mov	qword ptr [rsp + 24], rsi       # 8-byte Spill
	pinsrb	xmm14, byte ptr [rdx + rsi + 16], 14
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rdi + 16], 15
	movdqa	xmm3, xmm13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 24], 1
	pinsrb	xmm4, byte ptr [rdx + r8 + 24], 2
	pinsrb	xmm4, byte ptr [rdx + r11 + 24], 3
	pinsrb	xmm4, byte ptr [rdx + r9 + 24], 4
	pinsrb	xmm4, byte ptr [rdx + r13 + 24], 5
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r8 + 24], 6
	pinsrb	xmm4, byte ptr [rdx + r14 + 24], 7
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 24], 8
	pinsrb	xmm4, byte ptr [rdx + r10 + 24], 9
	mov	qword ptr [rsp + 176], r10      # 8-byte Spill
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax + 24], 10
	pinsrb	xmm4, byte ptr [rdx + rbx + 24], 11
	pinsrb	xmm4, byte ptr [rdx + r15 + 24], 12
	pinsrb	xmm4, byte ptr [rdx + rcx + 24], 13
	pinsrb	xmm4, byte ptr [rdx + rsi + 24], 14
	pcmpgtb	xmm3, xmm14
	movdqa	xmmword ptr [rsp + 240], xmm3   # 16-byte Spill
	pinsrb	xmm4, byte ptr [rdx + rdi + 24], 15
	movdqa	xmm3, xmm13
	pcmpgtb	xmm3, xmm4
	movdqa	xmmword ptr [rsp + 208], xmm3   # 16-byte Spill
	movdqa	xmm4, xmm13
	pcmpgtb	xmm4, xmm7
	movdqa	xmm12, xmm4
	movdqa	xmm8, xmmword ptr [rip + .LCPI8_10] # xmm8 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm12, xmm8
	psubb	xmm12, xmm4
	movdqa	xmm4, xmm13
	movdqa	xmm14, xmm13
	pcmpgtb	xmm4, xmm6
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 13]
	movd	xmm7, esi
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rsi + 3], 1
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rax + 3], 2
	mov	qword ptr [rsp + 40], r11       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r11 + 3], 3
	mov	rcx, r9
	mov	qword ptr [rsp + 112], r9       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r9 + 3], 4
	pinsrb	xmm15, byte ptr [rdx + r13 + 3], 5
	pinsrb	xmm15, byte ptr [rdx + r8 + 3], 6
	mov	qword ptr [rsp + 80], r14       # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r14 + 3], 7
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r12 + 3], 8
	pinsrb	xmm15, byte ptr [rdx + r10 + 3], 9
	mov	r9, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r9 + 3], 10
	mov	qword ptr [rsp + 104], rbx      # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + rbx + 3], 11
	pinsrb	xmm15, byte ptr [rdx + r15 + 3], 12
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rdi + 3], 13
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rdi + 3], 14
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r10 + 3], 15
	pinsrb	xmm5, byte ptr [rdx + rsi + 4], 1
	mov	r10, rsi
	pinsrb	xmm5, byte ptr [rdx + rax + 4], 2
	pinsrb	xmm5, byte ptr [rdx + r11 + 4], 3
	pinsrb	xmm5, byte ptr [rdx + rcx + 4], 4
	pinsrb	xmm5, byte ptr [rdx + r13 + 4], 5
	pinsrb	xmm5, byte ptr [rdx + r8 + 4], 6
	pinsrb	xmm5, byte ptr [rdx + r14 + 4], 7
	pinsrb	xmm5, byte ptr [rdx + r12 + 4], 8
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rcx + 4], 9
	pinsrb	xmm5, byte ptr [rdx + r9 + 4], 10
	mov	r11, r9
	pinsrb	xmm5, byte ptr [rdx + rbx + 4], 11
	pinsrb	xmm5, byte ptr [rdx + r15 + 4], 12
	mov	r9, qword ptr [rsp + 8]         # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r9 + 4], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 4], 14
	movdqa	xmm3, xmmword ptr [rsp + 272]   # 16-byte Reload
	pand	xmm3, xmm8
	movdqa	xmm6, xmmword ptr [rip + .LCPI8_11] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm4, xmm6
	por	xmm4, xmm3
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rdi + 14]
	movd	xmm6, esi
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rbx + 4], 15
	por	xmm4, xmm12
	movdqa	xmm12, xmm13
	pcmpgtb	xmm12, xmm15
	pcmpgtb	xmm13, xmm5
	movzx	esi, byte ptr [rdx + rdi + 15]
	movd	xmm5, esi
	pinsrb	xmm2, byte ptr [rdx + r10 + 5], 1
	mov	r8, qword ptr [rsp + 64]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r8 + 5], 2
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rdi + 5], 3
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r13 + 5], 4
	mov	rsi, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rsi + 5], 5
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r14 + 5], 6
	mov	r10, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r10 + 5], 7
	pinsrb	xmm2, byte ptr [rdx + r12 + 5], 8
	pinsrb	xmm2, byte ptr [rdx + rcx + 5], 9
	pinsrb	xmm2, byte ptr [rdx + r11 + 5], 10
	mov	rcx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rcx + 5], 11
	pinsrb	xmm2, byte ptr [rdx + r15 + 5], 12
	pinsrb	xmm2, byte ptr [rdx + r9 + 5], 13
	mov	r11, r9
	pinsrb	xmm2, byte ptr [rdx + rax + 5], 14
	pinsrb	xmm2, byte ptr [rdx + rbx + 5], 15
	movdqa	xmm3, xmmword ptr [rip + .LCPI8_12] # xmm3 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm12, xmm3
	movdqa	xmm3, xmmword ptr [rip + .LCPI8_13] # xmm3 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm13, xmm3
	por	xmm13, xmm12
	movdqa	xmm12, xmm14
	pcmpgtb	xmm12, xmm2
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 17]
	movd	xmm2, esi
	movdqa	xmm3, xmmword ptr [rip + .LCPI8_14] # xmm3 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm12, xmm3
	por	xmm12, xmm13
	movzx	esi, byte ptr [rdx + rax + 18]
	movd	xmm15, esi
	movdqa	xmm3, xmmword ptr [rsp + 192]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rax + 6], 1
	mov	r9, r8
	pinsrb	xmm3, byte ptr [rdx + r8 + 6], 2
	pinsrb	xmm3, byte ptr [rdx + rdi + 6], 3
	mov	rcx, r13
	pinsrb	xmm3, byte ptr [rdx + r13 + 6], 4
	mov	r13, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r13 + 6], 5
	pinsrb	xmm3, byte ptr [rdx + r14 + 6], 6
	pinsrb	xmm3, byte ptr [rdx + r10 + 6], 7
	pinsrb	xmm3, byte ptr [rdx + r12 + 6], 8
	mov	rsi, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rsi + 6], 9
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r8 + 6], 10
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rbx + 6], 11
	mov	qword ptr [rsp + 72], r15       # 8-byte Spill
	pinsrb	xmm3, byte ptr [rdx + r15 + 6], 12
	mov	rdi, r11
	pinsrb	xmm3, byte ptr [rdx + r11 + 6], 13
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r11 + 6], 14
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r10 + 6], 15
	pinsrb	xmm1, byte ptr [rdx + rax + 7], 1
	pinsrb	xmm1, byte ptr [rdx + r9 + 7], 2
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rax + 7], 3
	pinsrb	xmm1, byte ptr [rdx + rcx + 7], 4
	pinsrb	xmm1, byte ptr [rdx + r13 + 7], 5
	pinsrb	xmm1, byte ptr [rdx + r14 + 7], 6
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r14 + 7], 7
	pinsrb	xmm1, byte ptr [rdx + r12 + 7], 8
	pinsrb	xmm1, byte ptr [rdx + rsi + 7], 9
	pinsrb	xmm1, byte ptr [rdx + r8 + 7], 10
	pinsrb	xmm1, byte ptr [rdx + rbx + 7], 11
	pinsrb	xmm1, byte ptr [rdx + r15 + 7], 12
	pinsrb	xmm1, byte ptr [rdx + rdi + 7], 13
	pinsrb	xmm1, byte ptr [rdx + r11 + 7], 14
	pinsrb	xmm1, byte ptr [rdx + r10 + 7], 15
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 9], 1
	pinsrb	xmm0, byte ptr [rdx + r9 + 9], 2
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 9], 3
	pinsrb	xmm0, byte ptr [rdx + rcx + 9], 4
	pinsrb	xmm0, byte ptr [rdx + r13 + 9], 5
	mov	rax, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 9], 6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 9], 7
	pinsrb	xmm0, byte ptr [rdx + r12 + 9], 8
	pinsrb	xmm0, byte ptr [rdx + rsi + 9], 9
	pinsrb	xmm0, byte ptr [rdx + r8 + 9], 10
	pinsrb	xmm0, byte ptr [rdx + rbx + 9], 11
	pinsrb	xmm0, byte ptr [rdx + r15 + 9], 12
	pinsrb	xmm0, byte ptr [rdx + rdi + 9], 13
	pinsrb	xmm0, byte ptr [rdx + r11 + 9], 14
	mov	r14, r11
	pinsrb	xmm0, byte ptr [rdx + r10 + 9], 15
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 10], 1
	pinsrb	xmm9, byte ptr [rdx + r9 + 10], 2
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 10], 3
	pinsrb	xmm9, byte ptr [rdx + rcx + 10], 4
	pinsrb	xmm9, byte ptr [rdx + r13 + 10], 5
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r11 + 10], 6
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rcx + 10], 7
	pinsrb	xmm9, byte ptr [rdx + r12 + 10], 8
	pinsrb	xmm9, byte ptr [rdx + rsi + 10], 9
	pinsrb	xmm9, byte ptr [rdx + r8 + 10], 10
	pinsrb	xmm9, byte ptr [rdx + rbx + 10], 11
	pinsrb	xmm9, byte ptr [rdx + r15 + 10], 12
	pinsrb	xmm9, byte ptr [rdx + rdi + 10], 13
	por	xmm12, xmm4
	movdqa	xmm13, xmm14
	movdqa	xmm4, xmm14
	pcmpgtb	xmm4, xmm3
	pcmpgtb	xmm14, xmm1
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rdi + 19]
	movd	xmm1, esi
	pinsrb	xmm9, byte ptr [rdx + r14 + 10], 14
	movdqa	xmm3, xmmword ptr [rip + .LCPI8_15] # xmm3 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm4, xmm3
	psllw	xmm14, 7
	movdqa	xmm3, xmmword ptr [rip + .LCPI8_6] # xmm3 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm14, xmm3
	por	xmm14, xmm4
	movzx	esi, byte ptr [rdx + rdi + 20]
	movd	xmm4, esi
	mov	r13, r10
	pinsrb	xmm9, byte ptr [rdx + r10 + 10], 15
	por	xmm14, xmm12
	movdqa	xmmword ptr [rsp + 192], xmm14  # 16-byte Spill
	movdqa	xmm14, xmm13
	movdqa	xmm3, xmm13
	pcmpgtb	xmm3, xmm0
	movdqa	xmm12, xmm3
	pand	xmm12, xmm8
	psubb	xmm12, xmm3
	pcmpgtb	xmm13, xmm9
	movzx	esi, byte ptr [rdx + rdi + 21]
	movd	xmm0, esi
	mov	r10, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r10 + 11], 1
	mov	rax, r9
	pinsrb	xmm10, byte ptr [rdx + r9 + 11], 2
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rdi + 11], 3
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r8 + 11], 4
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r9 + 11], 5
	pinsrb	xmm10, byte ptr [rdx + r11 + 11], 6
	mov	rbx, rcx
	pinsrb	xmm10, byte ptr [rdx + rcx + 11], 7
	pinsrb	xmm10, byte ptr [rdx + r12 + 11], 8
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rcx + 11], 9
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r14 + 11], 10
	mov	r15, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r15 + 11], 11
	mov	rsi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 11], 12
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 11], 13
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 11], 14
	pinsrb	xmm10, byte ptr [rdx + r13 + 11], 15
	pinsrb	xmm11, byte ptr [rdx + r10 + 12], 1
	pinsrb	xmm11, byte ptr [rdx + rax + 12], 2
	pinsrb	xmm11, byte ptr [rdx + rdi + 12], 3
	pinsrb	xmm11, byte ptr [rdx + r8 + 12], 4
	pinsrb	xmm11, byte ptr [rdx + r9 + 12], 5
	pinsrb	xmm11, byte ptr [rdx + r11 + 12], 6
	pinsrb	xmm11, byte ptr [rdx + rbx + 12], 7
	pinsrb	xmm11, byte ptr [rdx + r12 + 12], 8
	pinsrb	xmm11, byte ptr [rdx + rcx + 12], 9
	mov	r12, rcx
	mov	r8, r14
	pinsrb	xmm11, byte ptr [rdx + r14 + 12], 10
	mov	rbx, r15
	pinsrb	xmm11, byte ptr [rdx + r15 + 12], 11
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r15 + 12], 12
	mov	rdi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rdi + 12], 13
	pinsrb	xmm11, byte ptr [rdx + rsi + 12], 14
	mov	r10, rsi
	movdqa	xmm3, xmmword ptr [rsp + 304]   # 16-byte Reload
	pand	xmm3, xmm8
	pand	xmm13, xmmword ptr [rip + .LCPI8_11]
	por	xmm13, xmm3
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 22]
	movd	xmm8, esi
	pinsrb	xmm11, byte ptr [rdx + r13 + 12], 15
	por	xmm13, xmm12
	movdqa	xmm12, xmm14
	pcmpgtb	xmm12, xmm10
	movdqa	xmm3, xmm14
	pcmpgtb	xmm3, xmm11
	movzx	esi, byte ptr [rdx + rax + 23]
	movd	xmm9, esi
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 13], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rcx + 13], 2
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + r11 + 13], 3
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rcx + 13], 4
	pinsrb	xmm7, byte ptr [rdx + r9 + 13], 5
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + r14 + 13], 6
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rsi + 13], 7
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rsi + 13], 8
	pinsrb	xmm7, byte ptr [rdx + r12 + 13], 9
	pinsrb	xmm7, byte ptr [rdx + r8 + 13], 10
	pinsrb	xmm7, byte ptr [rdx + rbx + 13], 11
	pinsrb	xmm7, byte ptr [rdx + r15 + 13], 12
	pinsrb	xmm7, byte ptr [rdx + rdi + 13], 13
	pinsrb	xmm7, byte ptr [rdx + r10 + 13], 14
	pinsrb	xmm7, byte ptr [rdx + r13 + 13], 15
	pand	xmm12, xmmword ptr [rip + .LCPI8_12]
	pand	xmm3, xmmword ptr [rip + .LCPI8_13]
	por	xmm3, xmm12
	movdqa	xmm10, xmm14
	pcmpgtb	xmm10, xmm7
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r12 + 25]
	movd	xmm11, esi
	pand	xmm10, xmmword ptr [rip + .LCPI8_14]
	por	xmm10, xmm3
	movzx	esi, byte ptr [rdx + r12 + 26]
	movd	xmm7, esi
	pinsrb	xmm6, byte ptr [rdx + rax + 14], 1
	mov	rsi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 14], 2
	mov	r10, r11
	pinsrb	xmm6, byte ptr [rdx + r11 + 14], 3
	mov	r12, rcx
	pinsrb	xmm6, byte ptr [rdx + rcx + 14], 4
	mov	rdi, r9
	pinsrb	xmm6, byte ptr [rdx + r9 + 14], 5
	mov	r11, r14
	pinsrb	xmm6, byte ptr [rdx + r14 + 14], 6
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r14 + 14], 7
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rcx + 14], 8
	mov	r9, qword ptr [rsp + 176]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r9 + 14], 9
	pinsrb	xmm6, byte ptr [rdx + r8 + 14], 10
	pinsrb	xmm6, byte ptr [rdx + rbx + 14], 11
	pinsrb	xmm6, byte ptr [rdx + r15 + 14], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 14], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 14], 14
	pinsrb	xmm6, byte ptr [rdx + r13 + 14], 15
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r13 + 15], 1
	pinsrb	xmm5, byte ptr [rdx + rsi + 15], 2
	pinsrb	xmm5, byte ptr [rdx + r10 + 15], 3
	pinsrb	xmm5, byte ptr [rdx + r12 + 15], 4
	pinsrb	xmm5, byte ptr [rdx + rdi + 15], 5
	pinsrb	xmm5, byte ptr [rdx + r11 + 15], 6
	pinsrb	xmm5, byte ptr [rdx + r14 + 15], 7
	pinsrb	xmm5, byte ptr [rdx + rcx + 15], 8
	pinsrb	xmm5, byte ptr [rdx + r9 + 15], 9
	pinsrb	xmm5, byte ptr [rdx + r8 + 15], 10
	pinsrb	xmm5, byte ptr [rdx + rbx + 15], 11
	pinsrb	xmm5, byte ptr [rdx + r15 + 15], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 15], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 15], 14
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 15], 15
	pinsrb	xmm2, byte ptr [rdx + r13 + 17], 1
	pinsrb	xmm2, byte ptr [rdx + rsi + 17], 2
	pinsrb	xmm2, byte ptr [rdx + r10 + 17], 3
	pinsrb	xmm2, byte ptr [rdx + r12 + 17], 4
	pinsrb	xmm2, byte ptr [rdx + rdi + 17], 5
	pinsrb	xmm2, byte ptr [rdx + r11 + 17], 6
	pinsrb	xmm2, byte ptr [rdx + r14 + 17], 7
	pinsrb	xmm2, byte ptr [rdx + rcx + 17], 8
	pinsrb	xmm2, byte ptr [rdx + r9 + 17], 9
	pinsrb	xmm2, byte ptr [rdx + r8 + 17], 10
	pinsrb	xmm2, byte ptr [rdx + rbx + 17], 11
	pinsrb	xmm2, byte ptr [rdx + r15 + 17], 12
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 17], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 17], 14
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 17], 15
	pinsrb	xmm15, byte ptr [rdx + r13 + 18], 1
	pinsrb	xmm15, byte ptr [rdx + rsi + 18], 2
	pinsrb	xmm15, byte ptr [rdx + r10 + 18], 3
	mov	r13, r10
	pinsrb	xmm15, byte ptr [rdx + r12 + 18], 4
	pinsrb	xmm15, byte ptr [rdx + rdi + 18], 5
	pinsrb	xmm15, byte ptr [rdx + r11 + 18], 6
	pinsrb	xmm15, byte ptr [rdx + r14 + 18], 7
	pinsrb	xmm15, byte ptr [rdx + rcx + 18], 8
	pinsrb	xmm15, byte ptr [rdx + r9 + 18], 9
	pinsrb	xmm15, byte ptr [rdx + r8 + 18], 10
	pinsrb	xmm15, byte ptr [rdx + rbx + 18], 11
	mov	rdi, rbx
	pinsrb	xmm15, byte ptr [rdx + r15 + 18], 12
	mov	r10, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r10 + 18], 13
	por	xmm10, xmm13
	movdqa	xmm13, xmm14
	pcmpgtb	xmm13, xmm6
	movdqa	xmm3, xmm14
	pcmpgtb	xmm3, xmm5
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 27]
	movd	xmm5, esi
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rcx + 18], 14
	pand	xmm13, xmmword ptr [rip + .LCPI8_15]
	psllw	xmm3, 7
	pand	xmm3, xmmword ptr [rip + .LCPI8_6]
	por	xmm3, xmm13
	movzx	esi, byte ptr [rdx + rax + 28]
	movd	xmm6, esi
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rcx + 18], 15
	por	xmm3, xmm10
	movdqa	xmmword ptr [rsp + 272], xmm3   # 16-byte Spill
	movdqa	xmm3, xmm14
	pcmpgtb	xmm3, xmm2
	movdqa	xmm13, xmm3
	movdqa	xmm2, xmmword ptr [rip + .LCPI8_10] # xmm2 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm13, xmm2
	psubb	xmm13, xmm3
	movdqa	xmm10, xmm14
	pcmpgtb	xmm10, xmm15
	movzx	esi, byte ptr [rdx + rax + 29]
	movd	xmm3, esi
	movdqa	xmm15, xmmword ptr [rsp + 240]  # 16-byte Reload
	pand	xmm15, xmm2
	movdqa	xmm2, xmmword ptr [rip + .LCPI8_11] # xmm2 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm10, xmm2
	por	xmm10, xmm15
	movzx	esi, byte ptr [rdx + rax + 30]
	movd	xmm2, esi
	movzx	eax, byte ptr [rdx + rax + 31]
	mov	dword ptr [rsp + 56], eax       # 4-byte Spill
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rax + 19], 1
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rcx + 19], 2
	pinsrb	xmm1, byte ptr [rdx + r13 + 19], 3
	pinsrb	xmm1, byte ptr [rdx + r12 + 19], 4
	mov	r8, qword ptr [rsp + 160]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r8 + 19], 5
	pinsrb	xmm1, byte ptr [rdx + r11 + 19], 6
	mov	rbx, r11
	pinsrb	xmm1, byte ptr [rdx + r14 + 19], 7
	mov	r15, r14
	mov	rsi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rsi + 19], 8
	pinsrb	xmm1, byte ptr [rdx + r9 + 19], 9
	mov	r11, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r11 + 19], 10
	pinsrb	xmm1, byte ptr [rdx + rdi + 19], 11
	mov	rdi, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rdi + 19], 12
	pinsrb	xmm1, byte ptr [rdx + r10 + 19], 13
	mov	r14, r10
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rdi + 19], 14
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r10 + 19], 15
	pinsrb	xmm4, byte ptr [rdx + rax + 20], 1
	pinsrb	xmm4, byte ptr [rdx + rcx + 20], 2
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r13 + 20], 3
	pinsrb	xmm4, byte ptr [rdx + r12 + 20], 4
	pinsrb	xmm4, byte ptr [rdx + r8 + 20], 5
	pinsrb	xmm4, byte ptr [rdx + rbx + 20], 6
	pinsrb	xmm4, byte ptr [rdx + r15 + 20], 7
	pinsrb	xmm4, byte ptr [rdx + rsi + 20], 8
	pinsrb	xmm4, byte ptr [rdx + r9 + 20], 9
	mov	r8, r11
	pinsrb	xmm4, byte ptr [rdx + r11 + 20], 10
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rbx + 20], 11
	mov	r15, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r15 + 20], 12
	pinsrb	xmm4, byte ptr [rdx + r14 + 20], 13
	pinsrb	xmm4, byte ptr [rdx + rdi + 20], 14
	mov	r9, r10
	pinsrb	xmm4, byte ptr [rdx + r10 + 20], 15
	por	xmm10, xmm13
	movdqa	xmm13, xmm14
	pcmpgtb	xmm13, xmm1
	movdqa	xmm15, xmm14
	pcmpgtb	xmm15, xmm4
	movd	xmm1, dword ptr [rsp + 56]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	pinsrb	xmm0, byte ptr [rdx + rax + 21], 1
	pinsrb	xmm8, byte ptr [rdx + rax + 22], 1
	pinsrb	xmm9, byte ptr [rdx + rax + 23], 1
	pinsrb	xmm11, byte ptr [rdx + rax + 25], 1
	pinsrb	xmm7, byte ptr [rdx + rax + 26], 1
	pinsrb	xmm5, byte ptr [rdx + rax + 27], 1
	pinsrb	xmm6, byte ptr [rdx + rax + 28], 1
	pinsrb	xmm3, byte ptr [rdx + rax + 29], 1
	pinsrb	xmm2, byte ptr [rdx + rax + 30], 1
	pinsrb	xmm1, byte ptr [rdx + rax + 31], 1
	pinsrb	xmm0, byte ptr [rdx + rcx + 21], 2
	pinsrb	xmm8, byte ptr [rdx + rcx + 22], 2
	pinsrb	xmm9, byte ptr [rdx + rcx + 23], 2
	pinsrb	xmm11, byte ptr [rdx + rcx + 25], 2
	pinsrb	xmm7, byte ptr [rdx + rcx + 26], 2
	pinsrb	xmm5, byte ptr [rdx + rcx + 27], 2
	pinsrb	xmm6, byte ptr [rdx + rcx + 28], 2
	pinsrb	xmm3, byte ptr [rdx + rcx + 29], 2
	pinsrb	xmm2, byte ptr [rdx + rcx + 30], 2
	pinsrb	xmm1, byte ptr [rdx + rcx + 31], 2
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r13 + 21], 3
	pinsrb	xmm0, byte ptr [rdx + r12 + 21], 4
	mov	rdi, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rdi + 21], 5
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r11 + 21], 6
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r14 + 21], 7
	pinsrb	xmm0, byte ptr [rdx + rsi + 21], 8
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r10 + 21], 9
	pinsrb	xmm0, byte ptr [rdx + r8 + 21], 10
	pinsrb	xmm0, byte ptr [rdx + rbx + 21], 11
	pinsrb	xmm0, byte ptr [rdx + r15 + 21], 12
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rcx + 21], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 21], 14
	pinsrb	xmm0, byte ptr [rdx + r9 + 21], 15
	movdqa	xmm4, xmmword ptr [rip + .LCPI8_12] # xmm4 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm13, xmm4
	movdqa	xmm4, xmmword ptr [rip + .LCPI8_13] # xmm4 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm15, xmm4
	por	xmm15, xmm13
	movdqa	xmm13, xmm14
	pcmpgtb	xmm13, xmm0
	movdqa	xmm0, xmmword ptr [rip + .LCPI8_14] # xmm0 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm13, xmm0
	por	xmm13, xmm15
	pinsrb	xmm8, byte ptr [rdx + r13 + 22], 3
	pinsrb	xmm8, byte ptr [rdx + r12 + 22], 4
	pinsrb	xmm8, byte ptr [rdx + rdi + 22], 5
	pinsrb	xmm8, byte ptr [rdx + r11 + 22], 6
	pinsrb	xmm8, byte ptr [rdx + r14 + 22], 7
	pinsrb	xmm8, byte ptr [rdx + rsi + 22], 8
	pinsrb	xmm8, byte ptr [rdx + r10 + 22], 9
	pinsrb	xmm8, byte ptr [rdx + r8 + 22], 10
	pinsrb	xmm8, byte ptr [rdx + rbx + 22], 11
	pinsrb	xmm8, byte ptr [rdx + r15 + 22], 12
	pinsrb	xmm8, byte ptr [rdx + rcx + 22], 13
	pinsrb	xmm8, byte ptr [rdx + rax + 22], 14
	pinsrb	xmm8, byte ptr [rdx + r9 + 22], 15
	pinsrb	xmm9, byte ptr [rdx + r13 + 23], 3
	pinsrb	xmm9, byte ptr [rdx + r12 + 23], 4
	pinsrb	xmm9, byte ptr [rdx + rdi + 23], 5
	pinsrb	xmm9, byte ptr [rdx + r11 + 23], 6
	pinsrb	xmm9, byte ptr [rdx + r14 + 23], 7
	pinsrb	xmm9, byte ptr [rdx + rsi + 23], 8
	pinsrb	xmm9, byte ptr [rdx + r10 + 23], 9
	pinsrb	xmm9, byte ptr [rdx + r8 + 23], 10
	pinsrb	xmm9, byte ptr [rdx + rbx + 23], 11
	pinsrb	xmm9, byte ptr [rdx + r15 + 23], 12
	pinsrb	xmm9, byte ptr [rdx + rcx + 23], 13
	pinsrb	xmm9, byte ptr [rdx + rax + 23], 14
	pinsrb	xmm9, byte ptr [rdx + r9 + 23], 15
	pinsrb	xmm11, byte ptr [rdx + r13 + 25], 3
	pinsrb	xmm11, byte ptr [rdx + r12 + 25], 4
	pinsrb	xmm11, byte ptr [rdx + rdi + 25], 5
	pinsrb	xmm11, byte ptr [rdx + r11 + 25], 6
	pinsrb	xmm11, byte ptr [rdx + r14 + 25], 7
	pinsrb	xmm11, byte ptr [rdx + rsi + 25], 8
	pinsrb	xmm11, byte ptr [rdx + r10 + 25], 9
	pinsrb	xmm11, byte ptr [rdx + r8 + 25], 10
	pinsrb	xmm11, byte ptr [rdx + rbx + 25], 11
	pinsrb	xmm11, byte ptr [rdx + r15 + 25], 12
	pinsrb	xmm11, byte ptr [rdx + rcx + 25], 13
	pinsrb	xmm11, byte ptr [rdx + rax + 25], 14
	pinsrb	xmm11, byte ptr [rdx + r9 + 25], 15
	pinsrb	xmm7, byte ptr [rdx + r13 + 26], 3
	pinsrb	xmm7, byte ptr [rdx + r12 + 26], 4
	pinsrb	xmm7, byte ptr [rdx + rdi + 26], 5
	pinsrb	xmm7, byte ptr [rdx + r11 + 26], 6
	pinsrb	xmm7, byte ptr [rdx + r14 + 26], 7
	pinsrb	xmm7, byte ptr [rdx + rsi + 26], 8
	pinsrb	xmm7, byte ptr [rdx + r10 + 26], 9
	pinsrb	xmm7, byte ptr [rdx + r8 + 26], 10
	pinsrb	xmm7, byte ptr [rdx + rbx + 26], 11
	pinsrb	xmm7, byte ptr [rdx + r15 + 26], 12
	pinsrb	xmm7, byte ptr [rdx + rcx + 26], 13
	pinsrb	xmm7, byte ptr [rdx + rax + 26], 14
	por	xmm13, xmm10
	movdqa	xmm12, xmm14
	movdqa	xmm4, xmm14
	pcmpgtb	xmm4, xmm8
	movdqa	xmm0, xmm14
	pcmpgtb	xmm0, xmm9
	movdqa	xmm14, xmmword ptr [rip + .LCPI8_15] # xmm14 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm4, xmm14
	psllw	xmm0, 7
	movdqa	xmm15, xmmword ptr [rip + .LCPI8_6] # xmm15 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm0, xmm15
	por	xmm0, xmm4
	pinsrb	xmm7, byte ptr [rdx + r9 + 26], 15
	por	xmm0, xmm13
	movdqa	xmm4, xmm12
	pcmpgtb	xmm4, xmm11
	movdqa	xmm8, xmm4
	movdqa	xmm11, xmmword ptr [rip + .LCPI8_10] # xmm11 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pand	xmm8, xmm11
	psubb	xmm8, xmm4
	movdqa	xmm4, xmm12
	pcmpgtb	xmm4, xmm7
	pinsrb	xmm5, byte ptr [rdx + r13 + 27], 3
	pinsrb	xmm5, byte ptr [rdx + r12 + 27], 4
	pinsrb	xmm5, byte ptr [rdx + rdi + 27], 5
	pinsrb	xmm5, byte ptr [rdx + r11 + 27], 6
	pinsrb	xmm5, byte ptr [rdx + r14 + 27], 7
	pinsrb	xmm5, byte ptr [rdx + rsi + 27], 8
	pinsrb	xmm5, byte ptr [rdx + r10 + 27], 9
	pinsrb	xmm5, byte ptr [rdx + r8 + 27], 10
	pinsrb	xmm5, byte ptr [rdx + rbx + 27], 11
	pinsrb	xmm5, byte ptr [rdx + r15 + 27], 12
	pinsrb	xmm5, byte ptr [rdx + rcx + 27], 13
	pinsrb	xmm5, byte ptr [rdx + rax + 27], 14
	pinsrb	xmm5, byte ptr [rdx + r9 + 27], 15
	pinsrb	xmm6, byte ptr [rdx + r13 + 28], 3
	pinsrb	xmm6, byte ptr [rdx + r12 + 28], 4
	pinsrb	xmm6, byte ptr [rdx + rdi + 28], 5
	pinsrb	xmm6, byte ptr [rdx + r11 + 28], 6
	pinsrb	xmm6, byte ptr [rdx + r14 + 28], 7
	pinsrb	xmm6, byte ptr [rdx + rsi + 28], 8
	pinsrb	xmm6, byte ptr [rdx + r10 + 28], 9
	pinsrb	xmm6, byte ptr [rdx + r8 + 28], 10
	pinsrb	xmm6, byte ptr [rdx + rbx + 28], 11
	pinsrb	xmm6, byte ptr [rdx + r15 + 28], 12
	pinsrb	xmm6, byte ptr [rdx + rcx + 28], 13
	movdqa	xmm7, xmmword ptr [rsp + 208]   # 16-byte Reload
	pand	xmm7, xmm11
	pinsrb	xmm6, byte ptr [rdx + rax + 28], 14
	pand	xmm4, xmmword ptr [rip + .LCPI8_11]
	por	xmm4, xmm7
	pinsrb	xmm6, byte ptr [rdx + r9 + 28], 15
	por	xmm4, xmm8
	movdqa	xmm7, xmm12
	pcmpgtb	xmm7, xmm5
	movdqa	xmm5, xmm12
	pcmpgtb	xmm5, xmm6
	pinsrb	xmm3, byte ptr [rdx + r13 + 29], 3
	pinsrb	xmm3, byte ptr [rdx + r12 + 29], 4
	pinsrb	xmm3, byte ptr [rdx + rdi + 29], 5
	pinsrb	xmm3, byte ptr [rdx + r11 + 29], 6
	pinsrb	xmm3, byte ptr [rdx + r14 + 29], 7
	pinsrb	xmm3, byte ptr [rdx + rsi + 29], 8
	pinsrb	xmm3, byte ptr [rdx + r10 + 29], 9
	pinsrb	xmm3, byte ptr [rdx + r8 + 29], 10
	pinsrb	xmm3, byte ptr [rdx + rbx + 29], 11
	pinsrb	xmm3, byte ptr [rdx + r15 + 29], 12
	pinsrb	xmm3, byte ptr [rdx + rcx + 29], 13
	pinsrb	xmm3, byte ptr [rdx + rax + 29], 14
	pinsrb	xmm3, byte ptr [rdx + r9 + 29], 15
	pand	xmm7, xmmword ptr [rip + .LCPI8_12]
	pand	xmm5, xmmword ptr [rip + .LCPI8_13]
	por	xmm5, xmm7
	movdqa	xmm6, xmm12
	pcmpgtb	xmm6, xmm3
	pand	xmm6, xmmword ptr [rip + .LCPI8_14]
	por	xmm6, xmm5
	pinsrb	xmm2, byte ptr [rdx + r13 + 30], 3
	pinsrb	xmm1, byte ptr [rdx + r13 + 31], 3
	pinsrb	xmm2, byte ptr [rdx + r12 + 30], 4
	pinsrb	xmm1, byte ptr [rdx + r12 + 31], 4
	pinsrb	xmm2, byte ptr [rdx + rdi + 30], 5
	pinsrb	xmm1, byte ptr [rdx + rdi + 31], 5
	pinsrb	xmm2, byte ptr [rdx + r11 + 30], 6
	pinsrb	xmm1, byte ptr [rdx + r11 + 31], 6
	pinsrb	xmm2, byte ptr [rdx + r14 + 30], 7
	pinsrb	xmm1, byte ptr [rdx + r14 + 31], 7
	pinsrb	xmm2, byte ptr [rdx + rsi + 30], 8
	pinsrb	xmm1, byte ptr [rdx + rsi + 31], 8
	pinsrb	xmm2, byte ptr [rdx + r10 + 30], 9
	pinsrb	xmm1, byte ptr [rdx + r10 + 31], 9
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r8 + 30], 10
	pinsrb	xmm1, byte ptr [rdx + r8 + 31], 10
	pinsrb	xmm2, byte ptr [rdx + rbx + 30], 11
	pinsrb	xmm1, byte ptr [rdx + rbx + 31], 11
	pinsrb	xmm2, byte ptr [rdx + r15 + 30], 12
	pinsrb	xmm1, byte ptr [rdx + r15 + 31], 12
	pinsrb	xmm2, byte ptr [rdx + rcx + 30], 13
	pinsrb	xmm1, byte ptr [rdx + rcx + 31], 13
	pinsrb	xmm2, byte ptr [rdx + rax + 30], 14
	pinsrb	xmm1, byte ptr [rdx + rax + 31], 14
	pinsrb	xmm2, byte ptr [rdx + r9 + 30], 15
	pinsrb	xmm1, byte ptr [rdx + r9 + 31], 15
	por	xmm6, xmm4
	movdqa	xmm3, xmm12
	pcmpgtb	xmm3, xmm2
	pand	xmm3, xmm14
	pcmpgtb	xmm12, xmm1
	psllw	xmm12, 7
	pand	xmm12, xmm15
	por	xmm12, xmm3
	por	xmm12, xmm6
	movdqa	xmm1, xmm0
	punpcklbw	xmm1, xmm12             # xmm1 = xmm1[0],xmm12[0],xmm1[1],xmm12[1],xmm1[2],xmm12[2],xmm1[3],xmm12[3],xmm1[4],xmm12[4],xmm1[5],xmm12[5],xmm1[6],xmm12[6],xmm1[7],xmm12[7]
	movdqa	xmm5, xmmword ptr [rsp + 192]   # 16-byte Reload
	movdqa	xmm3, xmm5
	movdqa	xmm6, xmmword ptr [rsp + 272]   # 16-byte Reload
	punpcklbw	xmm3, xmm6              # xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1],xmm3[2],xmm6[2],xmm3[3],xmm6[3],xmm3[4],xmm6[4],xmm3[5],xmm6[5],xmm3[6],xmm6[6],xmm3[7],xmm6[7]
	movdqa	xmm4, xmm3
	punpcklwd	xmm4, xmm1              # xmm4 = xmm4[0],xmm1[0],xmm4[1],xmm1[1],xmm4[2],xmm1[2],xmm4[3],xmm1[3]
	punpckhwd	xmm3, xmm1              # xmm3 = xmm3[4],xmm1[4],xmm3[5],xmm1[5],xmm3[6],xmm1[6],xmm3[7],xmm1[7]
	punpckhbw	xmm0, xmm12             # xmm0 = xmm0[8],xmm12[8],xmm0[9],xmm12[9],xmm0[10],xmm12[10],xmm0[11],xmm12[11],xmm0[12],xmm12[12],xmm0[13],xmm12[13],xmm0[14],xmm12[14],xmm0[15],xmm12[15]
	punpckhbw	xmm5, xmm6              # xmm5 = xmm5[8],xmm6[8],xmm5[9],xmm6[9],xmm5[10],xmm6[10],xmm5[11],xmm6[11],xmm5[12],xmm6[12],xmm5[13],xmm6[13],xmm5[14],xmm6[14],xmm5[15],xmm6[15]
	movdqa	xmm1, xmm5
	punpcklwd	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
	punpckhwd	xmm5, xmm0              # xmm5 = xmm5[4],xmm0[4],xmm5[5],xmm0[5],xmm5[6],xmm0[6],xmm5[7],xmm0[7]
	mov	rcx, qword ptr [rsp + 120]      # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx + 48], xmm5
	movdqu	xmmword ptr [r14 + 4*rcx + 32], xmm1
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm3
	movdqu	xmmword ptr [r14 + 4*rcx], xmm4
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 232]      # 8-byte Folded Reload
	jne	.LBB8_192
# %bb.193:
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	r11b, byte ptr [rsp]            # 1-byte Reload
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	jne	.LBB8_42
	jmp	.LBB8_128
.LBB8_194:
	and	r15, -16
	mov	rax, r15
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 264], rax      # 8-byte Spill
	mov	qword ptr [rsp + 232], r15      # 8-byte Spill
	lea	rax, [r14 + 4*r15]
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	movzx	eax, r11b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 288], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB8_195:                              # =>This Inner Loop Header: Depth=1
	mov	r9, rax
	mov	qword ptr [rsp + 240], rax      # 8-byte Spill
	mov	rcx, rax
	shl	rcx, 5
	mov	r14, rcx
	mov	rbx, rcx
	mov	rax, rcx
	mov	r11, rcx
	mov	r10, rcx
	mov	r8, rcx
	mov	r9, rcx
	mov	qword ptr [rsp + 64], rcx       # 8-byte Spill
	mov	r12, rcx
	mov	r15, rcx
	mov	rdi, rcx
	mov	rsi, rcx
	movzx	ecx, byte ptr [rdx + rcx]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [rdx + rsi + 1]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rdx + rsi + 2]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [rdx + rsi + 3]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [rdx + rsi + 4]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rdx + rsi + 5]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rdx + rsi + 6]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rdx + rsi + 7]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 160], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rsi + 8]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 272], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rsi + 9]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rdx + rsi + 10]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rdx + rsi + 11]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 144], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rsi + 12]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 304], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rsi + 13]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [rdx + rsi + 14]
	movd	xmm13, ecx
	mov	qword ptr [rsp + 56], rsi       # 8-byte Spill
	mov	r13, rsi
	or	r13, 32
	mov	qword ptr [rsp + 8], r13        # 8-byte Spill
	or	r14, 64
	mov	qword ptr [rsp + 32], r14       # 8-byte Spill
	or	rbx, 96
	mov	qword ptr [rsp + 88], rbx       # 8-byte Spill
	or	rax, 128
	mov	rbx, r11
	or	rbx, 160
	mov	r11, r10
	or	r11, 192
	mov	qword ptr [rsp + 96], r11       # 8-byte Spill
	or	r8, 224
	or	r9, 256
	mov	qword ptr [rsp + 80], r9        # 8-byte Spill
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	or	rcx, 288
	or	r12, 320
	or	r15, 352
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	mov	r10, rdi
	or	r10, 384
	mov	rdi, rsi
	or	rdi, 416
	mov	qword ptr [rsp + 104], rdi      # 8-byte Spill
	mov	rdi, rsi
	or	rdi, 448
	mov	qword ptr [rsp + 16], rdi       # 8-byte Spill
	mov	rdi, rsi
	or	rdi, 480
	mov	qword ptr [rsp + 24], rdi       # 8-byte Spill
	pinsrb	xmm5, byte ptr [rdx + r13 + 1], 1
	pinsrb	xmm5, byte ptr [rdx + r14 + 1], 2
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r13 + 1], 3
	pinsrb	xmm5, byte ptr [rdx + rax + 1], 4
	mov	r14, rax
	pinsrb	xmm5, byte ptr [rdx + rbx + 1], 5
	pinsrb	xmm5, byte ptr [rdx + r11 + 1], 6
	pinsrb	xmm5, byte ptr [rdx + r8 + 1], 7
	pinsrb	xmm5, byte ptr [rdx + r9 + 1], 8
	pinsrb	xmm5, byte ptr [rdx + rcx + 1], 9
	pinsrb	xmm5, byte ptr [rdx + r12 + 1], 10
	pinsrb	xmm5, byte ptr [rdx + r15 + 1], 11
	pinsrb	xmm5, byte ptr [rdx + r10 + 1], 12
	mov	r9, r10
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r11 + 1], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 1], 14
	pinsrb	xmm5, byte ptr [rdx + rdi + 1], 15
	movdqa	xmm10, xmmword ptr [rsp + 288]  # 16-byte Reload
	pminub	xmm5, xmm10
	pcmpeqb	xmm5, xmm10
	movdqa	xmm6, xmm5
	movdqa	xmm1, xmmword ptr [rip + .LCPI8_10] # xmm1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pandn	xmm6, xmm1
	paddb	xmm6, xmm5
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rsi + 15]
	movd	xmm0, esi
	movdqa	xmmword ptr [rsp + 176], xmm0   # 16-byte Spill
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax], 1
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r10], 2
	pinsrb	xmm9, byte ptr [rdx + r13], 3
	mov	rsi, r14
	pinsrb	xmm9, byte ptr [rdx + r14], 4
	mov	r14, rbx
	pinsrb	xmm9, byte ptr [rdx + rbx], 5
	mov	rbx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rbx], 6
	pinsrb	xmm9, byte ptr [rdx + r8], 7
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r15], 8
	mov	qword ptr [rsp + 64], rcx       # 8-byte Spill
	pinsrb	xmm9, byte ptr [rdx + rcx], 9
	mov	qword ptr [rsp + 72], r12       # 8-byte Spill
	pinsrb	xmm9, byte ptr [rdx + r12], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rdi], 11
	pinsrb	xmm9, byte ptr [rdx + r9], 12
	pinsrb	xmm9, byte ptr [rdx + r11], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax], 14
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r13], 15
	pminub	xmm9, xmm10
	pcmpeqb	xmm9, xmm10
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 2], 1
	pinsrb	xmm7, byte ptr [rdx + r10 + 2], 2
	mov	r13, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + r13 + 2], 3
	pinsrb	xmm7, byte ptr [rdx + rsi + 2], 4
	pinsrb	xmm7, byte ptr [rdx + r14 + 2], 5
	pinsrb	xmm7, byte ptr [rdx + rbx + 2], 6
	pinsrb	xmm7, byte ptr [rdx + r8 + 2], 7
	pinsrb	xmm7, byte ptr [rdx + r15 + 2], 8
	pinsrb	xmm7, byte ptr [rdx + rcx + 2], 9
	pinsrb	xmm7, byte ptr [rdx + r12 + 2], 10
	pinsrb	xmm7, byte ptr [rdx + rdi + 2], 11
	pinsrb	xmm7, byte ptr [rdx + r9 + 2], 12
	pinsrb	xmm7, byte ptr [rdx + r11 + 2], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 2], 14
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 2], 15
	movdqa	xmm0, xmm15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 3], 1
	pinsrb	xmm0, byte ptr [rdx + r10 + 3], 2
	pinsrb	xmm0, byte ptr [rdx + r13 + 3], 3
	pinsrb	xmm0, byte ptr [rdx + rsi + 3], 4
	pinsrb	xmm0, byte ptr [rdx + r14 + 3], 5
	pinsrb	xmm0, byte ptr [rdx + rbx + 3], 6
	pinsrb	xmm0, byte ptr [rdx + r8 + 3], 7
	pinsrb	xmm0, byte ptr [rdx + r15 + 3], 8
	pinsrb	xmm0, byte ptr [rdx + rcx + 3], 9
	pinsrb	xmm0, byte ptr [rdx + r12 + 3], 10
	pinsrb	xmm0, byte ptr [rdx + rdi + 3], 11
	pinsrb	xmm0, byte ptr [rdx + r9 + 3], 12
	pinsrb	xmm0, byte ptr [rdx + r11 + 3], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 3], 14
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 3], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rax + 4], 1
	pinsrb	xmm3, byte ptr [rdx + r10 + 4], 2
	pinsrb	xmm3, byte ptr [rdx + r13 + 4], 3
	pinsrb	xmm3, byte ptr [rdx + rsi + 4], 4
	pinsrb	xmm3, byte ptr [rdx + r14 + 4], 5
	pinsrb	xmm3, byte ptr [rdx + rbx + 4], 6
	pinsrb	xmm3, byte ptr [rdx + r8 + 4], 7
	pinsrb	xmm3, byte ptr [rdx + r15 + 4], 8
	pinsrb	xmm3, byte ptr [rdx + rcx + 4], 9
	pinsrb	xmm3, byte ptr [rdx + r12 + 4], 10
	pinsrb	xmm3, byte ptr [rdx + rdi + 4], 11
	pinsrb	xmm3, byte ptr [rdx + r9 + 4], 12
	pinsrb	xmm3, byte ptr [rdx + r11 + 4], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rax + 4], 14
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rax + 4], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 5], 1
	pinsrb	xmm2, byte ptr [rdx + r10 + 5], 2
	pinsrb	xmm2, byte ptr [rdx + r13 + 5], 3
	pinsrb	xmm2, byte ptr [rdx + rsi + 5], 4
	mov	r10, rsi
	mov	qword ptr [rsp + 192], rsi      # 8-byte Spill
	pinsrb	xmm2, byte ptr [rdx + r14 + 5], 5
	pinsrb	xmm2, byte ptr [rdx + rbx + 5], 6
	pinsrb	xmm2, byte ptr [rdx + r8 + 5], 7
	pinsrb	xmm2, byte ptr [rdx + r15 + 5], 8
	pinsrb	xmm2, byte ptr [rdx + rcx + 5], 9
	pinsrb	xmm2, byte ptr [rdx + r12 + 5], 10
	pinsrb	xmm2, byte ptr [rdx + rdi + 5], 11
	pinsrb	xmm2, byte ptr [rdx + r9 + 5], 12
	pinsrb	xmm2, byte ptr [rdx + r11 + 5], 13
	mov	rdi, r11
	pandn	xmm9, xmm1
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 5], 14
	pminub	xmm7, xmm10
	pcmpeqb	xmm7, xmm10
	movdqa	xmm1, xmmword ptr [rip + .LCPI8_11] # xmm1 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm7, xmm1
	por	xmm7, xmm9
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r12 + 16]
	movd	xmm5, esi
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rcx + 5], 15
	pminub	xmm0, xmm10
	pcmpeqb	xmm0, xmm10
	movdqa	xmm1, xmmword ptr [rip + .LCPI8_12] # xmm1 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm0, xmm1
	por	xmm0, xmm7
	movzx	esi, byte ptr [rdx + r12 + 17]
	movd	xmm1, esi
	pcmpeqd	xmm7, xmm7
	psubb	xmm6, xmm7
	pcmpeqd	xmm9, xmm9
	por	xmm0, xmm6
	movzx	esi, byte ptr [rdx + r12 + 18]
	movd	xmm7, esi
	pminub	xmm3, xmm10
	pcmpeqb	xmm3, xmm10
	movdqa	xmm6, xmmword ptr [rip + .LCPI8_13] # xmm6 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm3, xmm6
	pminub	xmm2, xmm10
	pcmpeqb	xmm2, xmm10
	movdqa	xmm6, xmmword ptr [rip + .LCPI8_14] # xmm6 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm6
	por	xmm2, xmm3
	movzx	esi, byte ptr [rdx + r12 + 19]
	movd	xmm15, esi
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rcx + 6], 1
	mov	r11, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r11 + 6], 2
	pinsrb	xmm8, byte ptr [rdx + r13 + 6], 3
	pinsrb	xmm8, byte ptr [rdx + r10 + 6], 4
	mov	qword ptr [rsp + 120], r14      # 8-byte Spill
	pinsrb	xmm8, byte ptr [rdx + r14 + 6], 5
	pinsrb	xmm8, byte ptr [rdx + rbx + 6], 6
	mov	qword ptr [rsp + 208], r8       # 8-byte Spill
	pinsrb	xmm8, byte ptr [rdx + r8 + 6], 7
	pinsrb	xmm8, byte ptr [rdx + r15 + 6], 8
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r15 + 6], 9
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rax + 6], 10
	mov	r10, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r10 + 6], 11
	pinsrb	xmm8, byte ptr [rdx + r9 + 6], 12
	pinsrb	xmm8, byte ptr [rdx + rdi + 6], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rbx + 6], 14
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rax + 6], 15
	pminub	xmm8, xmm10
	pcmpeqb	xmm8, xmm10
	movdqa	xmm3, xmmword ptr [rip + .LCPI8_15] # xmm3 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm8, xmm3
	por	xmm8, xmm2
	movzx	esi, byte ptr [rdx + r12 + 20]
	movd	xmm4, esi
	movdqa	xmm6, xmmword ptr [rsp + 160]   # 16-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rcx + 7], 1
	pinsrb	xmm6, byte ptr [rdx + r11 + 7], 2
	pinsrb	xmm6, byte ptr [rdx + r13 + 7], 3
	mov	rcx, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rcx + 7], 4
	pinsrb	xmm6, byte ptr [rdx + r14 + 7], 5
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r14 + 7], 6
	pinsrb	xmm6, byte ptr [rdx + r8 + 7], 7
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r12 + 7], 8
	pinsrb	xmm6, byte ptr [rdx + r15 + 7], 9
	mov	r8, qword ptr [rsp + 72]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r8 + 7], 10
	pinsrb	xmm6, byte ptr [rdx + r10 + 7], 11
	pinsrb	xmm6, byte ptr [rdx + r9 + 7], 12
	pinsrb	xmm6, byte ptr [rdx + rdi + 7], 13
	mov	r15, rdi
	pinsrb	xmm6, byte ptr [rdx + rbx + 7], 14
	pinsrb	xmm6, byte ptr [rdx + rax + 7], 15
	pminub	xmm6, xmm10
	pcmpeqb	xmm6, xmm10
	pxor	xmm6, xmm9
	pcmpeqd	xmm3, xmm3
	psllw	xmm6, 7
	movdqa	xmm2, xmmword ptr [rip + .LCPI8_6] # xmm2 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm6, xmm2
	por	xmm6, xmm8
	movdqa	xmm8, xmm6
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 21]
	movd	xmm6, esi
	movdqa	xmm2, xmmword ptr [rsp + 272]   # 16-byte Reload
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rcx + 8], 1
	mov	rax, r11
	pinsrb	xmm2, byte ptr [rdx + r11 + 8], 2
	mov	rdi, r13
	pinsrb	xmm2, byte ptr [rdx + r13 + 8], 3
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r10 + 8], 4
	mov	r11, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r11 + 8], 5
	mov	r13, r14
	pinsrb	xmm2, byte ptr [rdx + r14 + 8], 6
	mov	rsi, qword ptr [rsp + 208]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rsi + 8], 7
	mov	r14, r12
	pinsrb	xmm2, byte ptr [rdx + r12 + 8], 8
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rbx + 8], 9
	mov	r12, r8
	pinsrb	xmm2, byte ptr [rdx + r8 + 8], 10
	mov	rbx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rbx + 8], 11
	mov	qword ptr [rsp + 112], r9       # 8-byte Spill
	pinsrb	xmm2, byte ptr [rdx + r9 + 8], 12
	mov	r8, r15
	pinsrb	xmm2, byte ptr [rdx + r15 + 8], 13
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r15 + 8], 14
	pinsrb	xmm11, byte ptr [rdx + rcx + 9], 1
	pinsrb	xmm11, byte ptr [rdx + rax + 9], 2
	pinsrb	xmm11, byte ptr [rdx + rdi + 9], 3
	pinsrb	xmm11, byte ptr [rdx + r10 + 9], 4
	mov	rbx, r10
	pinsrb	xmm11, byte ptr [rdx + r11 + 9], 5
	mov	rdi, r11
	pinsrb	xmm11, byte ptr [rdx + r13 + 9], 6
	mov	r10, r13
	pinsrb	xmm11, byte ptr [rdx + rsi + 9], 7
	pinsrb	xmm11, byte ptr [rdx + r14 + 9], 8
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rax + 9], 9
	pinsrb	xmm11, byte ptr [rdx + r12 + 9], 10
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r11 + 9], 11
	pinsrb	xmm11, byte ptr [rdx + r9 + 9], 12
	pinsrb	xmm11, byte ptr [rdx + r8 + 9], 13
	mov	r13, r8
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r8 + 9], 14
	mov	r15, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r15 + 9], 15
	por	xmm8, xmm0
	movdqa	xmmword ptr [rsp + 160], xmm8   # 16-byte Spill
	pminub	xmm11, xmm10
	pcmpeqb	xmm11, xmm10
	movdqa	xmm0, xmm11
	movdqa	xmm8, xmmword ptr [rip + .LCPI8_10] # xmm8 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pandn	xmm0, xmm8
	paddb	xmm0, xmm11
	mov	r9, qword ptr [rsp + 56]        # 8-byte Reload
	movzx	esi, byte ptr [rdx + r9 + 22]
	movd	xmm9, esi
	pinsrb	xmm2, byte ptr [rdx + r15 + 8], 15
	pminub	xmm2, xmm10
	pcmpeqb	xmm2, xmm10
	pandn	xmm2, xmm8
	pinsrb	xmm12, byte ptr [rdx + rcx + 10], 1
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rcx + 10], 2
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rcx + 10], 3
	pinsrb	xmm12, byte ptr [rdx + rbx + 10], 4
	pinsrb	xmm12, byte ptr [rdx + rdi + 10], 5
	pinsrb	xmm12, byte ptr [rdx + r10 + 10], 6
	mov	rbx, qword ptr [rsp + 208]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rbx + 10], 7
	pinsrb	xmm12, byte ptr [rdx + r14 + 10], 8
	pinsrb	xmm12, byte ptr [rdx + rax + 10], 9
	mov	r14, rax
	pinsrb	xmm12, byte ptr [rdx + r12 + 10], 10
	pinsrb	xmm12, byte ptr [rdx + r11 + 10], 11
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rax + 10], 12
	pinsrb	xmm12, byte ptr [rdx + r13 + 10], 13
	pinsrb	xmm12, byte ptr [rdx + r8 + 10], 14
	pinsrb	xmm12, byte ptr [rdx + r15 + 10], 15
	mov	r12, r15
	pminub	xmm12, xmm10
	pcmpeqb	xmm12, xmm10
	pandn	xmm12, xmmword ptr [rip + .LCPI8_11]
	por	xmm12, xmm2
	mov	rax, r9
	movzx	esi, byte ptr [rdx + r9 + 23]
	movd	xmm8, esi
	movdqa	xmm2, xmmword ptr [rsp + 144]   # 16-byte Reload
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r8 + 11], 1
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r15 + 11], 2
	pinsrb	xmm2, byte ptr [rdx + rcx + 11], 3
	mov	r11, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r11 + 11], 4
	pinsrb	xmm2, byte ptr [rdx + rdi + 11], 5
	pinsrb	xmm2, byte ptr [rdx + r10 + 11], 6
	pinsrb	xmm2, byte ptr [rdx + rbx + 11], 7
	mov	rsi, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rsi + 11], 8
	pinsrb	xmm2, byte ptr [rdx + r14 + 11], 9
	mov	r14, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r14 + 11], 10
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rdi + 11], 11
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r9 + 11], 12
	pinsrb	xmm2, byte ptr [rdx + r13 + 11], 13
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rsi + 11], 14
	pinsrb	xmm2, byte ptr [rdx + r12 + 11], 15
	mov	r13, r12
	pminub	xmm2, xmm10
	pcmpeqb	xmm2, xmm10
	pandn	xmm2, xmmword ptr [rip + .LCPI8_12]
	por	xmm2, xmm12
	movzx	esi, byte ptr [rdx + rax + 24]
	movd	xmm11, esi
	psubb	xmm0, xmm3
	por	xmm2, xmm0
	movdqa	xmmword ptr [rsp + 144], xmm2   # 16-byte Spill
	movzx	esi, byte ptr [rdx + rax + 25]
	movd	xmm3, esi
	movdqa	xmm2, xmmword ptr [rsp + 304]   # 16-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r8 + 12], 1
	pinsrb	xmm2, byte ptr [rdx + r15 + 12], 2
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r8 + 12], 3
	mov	r10, r11
	pinsrb	xmm2, byte ptr [rdx + r11 + 12], 4
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rsi + 12], 5
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r15 + 12], 6
	pinsrb	xmm2, byte ptr [rdx + rbx + 12], 7
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r11 + 12], 8
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rcx + 12], 9
	pinsrb	xmm2, byte ptr [rdx + r14 + 12], 10
	pinsrb	xmm2, byte ptr [rdx + rdi + 12], 11
	pinsrb	xmm2, byte ptr [rdx + r9 + 12], 12
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r12 + 12], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 12], 14
	pinsrb	xmm2, byte ptr [rdx + r13 + 12], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rax + 13], 1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + r13 + 13], 2
	pinsrb	xmm14, byte ptr [rdx + r8 + 13], 3
	pinsrb	xmm14, byte ptr [rdx + r10 + 13], 4
	pinsrb	xmm14, byte ptr [rdx + rsi + 13], 5
	pinsrb	xmm14, byte ptr [rdx + r15 + 13], 6
	pinsrb	xmm14, byte ptr [rdx + rbx + 13], 7
	pinsrb	xmm14, byte ptr [rdx + r11 + 13], 8
	pinsrb	xmm14, byte ptr [rdx + rcx + 13], 9
	pinsrb	xmm14, byte ptr [rdx + r14 + 13], 10
	pinsrb	xmm14, byte ptr [rdx + rdi + 13], 11
	pinsrb	xmm14, byte ptr [rdx + r9 + 13], 12
	pinsrb	xmm14, byte ptr [rdx + r12 + 13], 13
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + r13 + 13], 14
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rax + 13], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rax + 14], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rax + 14], 2
	pinsrb	xmm13, byte ptr [rdx + r8 + 14], 3
	pinsrb	xmm13, byte ptr [rdx + r10 + 14], 4
	pinsrb	xmm13, byte ptr [rdx + rsi + 14], 5
	pinsrb	xmm13, byte ptr [rdx + r15 + 14], 6
	pinsrb	xmm13, byte ptr [rdx + rbx + 14], 7
	pinsrb	xmm13, byte ptr [rdx + r11 + 14], 8
	pinsrb	xmm13, byte ptr [rdx + rcx + 14], 9
	pinsrb	xmm13, byte ptr [rdx + r14 + 14], 10
	pinsrb	xmm13, byte ptr [rdx + rdi + 14], 11
	pinsrb	xmm13, byte ptr [rdx + r9 + 14], 12
	pinsrb	xmm13, byte ptr [rdx + r12 + 14], 13
	pinsrb	xmm13, byte ptr [rdx + r13 + 14], 14
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rax + 14], 15
	movdqa	xmm0, xmmword ptr [rsp + 176]   # 16-byte Reload
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 15], 1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r13 + 15], 2
	pinsrb	xmm0, byte ptr [rdx + r8 + 15], 3
	pinsrb	xmm0, byte ptr [rdx + r10 + 15], 4
	pinsrb	xmm0, byte ptr [rdx + rsi + 15], 5
	pinsrb	xmm0, byte ptr [rdx + r15 + 15], 6
	pinsrb	xmm0, byte ptr [rdx + rbx + 15], 7
	pinsrb	xmm0, byte ptr [rdx + r11 + 15], 8
	pinsrb	xmm0, byte ptr [rdx + rcx + 15], 9
	pinsrb	xmm0, byte ptr [rdx + r14 + 15], 10
	pinsrb	xmm0, byte ptr [rdx + rdi + 15], 11
	pinsrb	xmm0, byte ptr [rdx + r9 + 15], 12
	pinsrb	xmm0, byte ptr [rdx + r12 + 15], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 15], 14
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 15], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rax + 17], 1
	pinsrb	xmm1, byte ptr [rdx + r13 + 17], 2
	pinsrb	xmm1, byte ptr [rdx + r8 + 17], 3
	pinsrb	xmm1, byte ptr [rdx + r10 + 17], 4
	pinsrb	xmm1, byte ptr [rdx + rsi + 17], 5
	pinsrb	xmm1, byte ptr [rdx + r15 + 17], 6
	pinsrb	xmm1, byte ptr [rdx + rbx + 17], 7
	pinsrb	xmm1, byte ptr [rdx + r11 + 17], 8
	pinsrb	xmm1, byte ptr [rdx + rcx + 17], 9
	pinsrb	xmm1, byte ptr [rdx + r14 + 17], 10
	pinsrb	xmm1, byte ptr [rdx + rdi + 17], 11
	mov	r14, rdi
	pinsrb	xmm1, byte ptr [rdx + r9 + 17], 12
	pinsrb	xmm1, byte ptr [rdx + r12 + 17], 13
	pminub	xmm2, xmm10
	pcmpeqb	xmm2, xmm10
	pandn	xmm2, xmmword ptr [rip + .LCPI8_13]
	pminub	xmm14, xmm10
	pcmpeqb	xmm14, xmm10
	pandn	xmm14, xmmword ptr [rip + .LCPI8_14]
	por	xmm14, xmm2
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rdi + 26]
	movd	xmm2, esi
	mov	r9, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r9 + 17], 14
	pminub	xmm13, xmm10
	pcmpeqb	xmm13, xmm10
	pandn	xmm13, xmmword ptr [rip + .LCPI8_15]
	por	xmm13, xmm14
	movzx	esi, byte ptr [rdx + rdi + 27]
	movd	xmm12, esi
	pminub	xmm0, xmm10
	pcmpeqb	xmm0, xmm10
	pxor	xmm0, xmmword ptr [rip + .LCPI8_16]
	psllw	xmm0, 7
	pand	xmm0, xmmword ptr [rip + .LCPI8_6]
	por	xmm0, xmm13
	movzx	esi, byte ptr [rdx + rdi + 28]
	movd	xmm13, esi
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r13 + 17], 15
	por	xmm0, xmmword ptr [rsp + 144]   # 16-byte Folded Reload
	movdqa	xmmword ptr [rsp + 176], xmm0   # 16-byte Spill
	pminub	xmm1, xmm10
	pcmpeqb	xmm1, xmm10
	movdqa	xmm0, xmm10
	movdqa	xmm14, xmm1
	movdqa	xmm10, xmmword ptr [rip + .LCPI8_10] # xmm10 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pandn	xmm14, xmm10
	paddb	xmm14, xmm1
	movdqa	xmmword ptr [rsp + 144], xmm14  # 16-byte Spill
	movzx	esi, byte ptr [rdx + rdi + 29]
	movd	xmm10, esi
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 16], 1
	pinsrb	xmm7, byte ptr [rdx + rax + 18], 1
	pinsrb	xmm15, byte ptr [rdx + rax + 19], 1
	pinsrb	xmm4, byte ptr [rdx + rax + 20], 1
	pinsrb	xmm6, byte ptr [rdx + rax + 21], 1
	pinsrb	xmm9, byte ptr [rdx + rax + 22], 1
	pinsrb	xmm8, byte ptr [rdx + rax + 23], 1
	pinsrb	xmm11, byte ptr [rdx + rax + 24], 1
	pinsrb	xmm3, byte ptr [rdx + rax + 25], 1
	pinsrb	xmm2, byte ptr [rdx + rax + 26], 1
	pinsrb	xmm12, byte ptr [rdx + rax + 27], 1
	pinsrb	xmm13, byte ptr [rdx + rax + 28], 1
	pinsrb	xmm10, byte ptr [rdx + rax + 29], 1
	movzx	esi, byte ptr [rdx + rdi + 30]
	movd	xmm14, esi
	pinsrb	xmm14, byte ptr [rdx + rax + 30], 1
	movzx	esi, byte ptr [rdx + rdi + 31]
	movd	xmm1, esi
	pinsrb	xmm1, byte ptr [rdx + rax + 31], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 16], 2
	pinsrb	xmm7, byte ptr [rdx + rax + 18], 2
	pinsrb	xmm15, byte ptr [rdx + rax + 19], 2
	pinsrb	xmm4, byte ptr [rdx + rax + 20], 2
	pinsrb	xmm6, byte ptr [rdx + rax + 21], 2
	pinsrb	xmm9, byte ptr [rdx + rax + 22], 2
	pinsrb	xmm8, byte ptr [rdx + rax + 23], 2
	pinsrb	xmm11, byte ptr [rdx + rax + 24], 2
	pinsrb	xmm3, byte ptr [rdx + rax + 25], 2
	pinsrb	xmm2, byte ptr [rdx + rax + 26], 2
	pinsrb	xmm12, byte ptr [rdx + rax + 27], 2
	pinsrb	xmm13, byte ptr [rdx + rax + 28], 2
	pinsrb	xmm10, byte ptr [rdx + rax + 29], 2
	pinsrb	xmm14, byte ptr [rdx + rax + 30], 2
	pinsrb	xmm1, byte ptr [rdx + rax + 31], 2
	pinsrb	xmm5, byte ptr [rdx + r8 + 16], 3
	pinsrb	xmm5, byte ptr [rdx + r10 + 16], 4
	mov	rsi, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 16], 5
	pinsrb	xmm5, byte ptr [rdx + r15 + 16], 6
	pinsrb	xmm5, byte ptr [rdx + rbx + 16], 7
	pinsrb	xmm5, byte ptr [rdx + r11 + 16], 8
	pinsrb	xmm5, byte ptr [rdx + rcx + 16], 9
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 16], 10
	pinsrb	xmm5, byte ptr [rdx + r14 + 16], 11
	mov	r12, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r12 + 16], 12
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rdi + 16], 13
	pinsrb	xmm5, byte ptr [rdx + r9 + 16], 14
	pinsrb	xmm5, byte ptr [rdx + r13 + 16], 15
	pminub	xmm5, xmm0
	pcmpeqb	xmm5, xmm0
	pinsrb	xmm7, byte ptr [rdx + r8 + 18], 3
	pinsrb	xmm7, byte ptr [rdx + r10 + 18], 4
	pinsrb	xmm7, byte ptr [rdx + rsi + 18], 5
	pinsrb	xmm7, byte ptr [rdx + r15 + 18], 6
	pinsrb	xmm7, byte ptr [rdx + rbx + 18], 7
	pinsrb	xmm7, byte ptr [rdx + r11 + 18], 8
	pinsrb	xmm7, byte ptr [rdx + rcx + 18], 9
	pinsrb	xmm7, byte ptr [rdx + rax + 18], 10
	pinsrb	xmm7, byte ptr [rdx + r14 + 18], 11
	pinsrb	xmm7, byte ptr [rdx + r12 + 18], 12
	pinsrb	xmm7, byte ptr [rdx + rdi + 18], 13
	pinsrb	xmm7, byte ptr [rdx + r9 + 18], 14
	pinsrb	xmm7, byte ptr [rdx + r13 + 18], 15
	pinsrb	xmm15, byte ptr [rdx + r8 + 19], 3
	pinsrb	xmm15, byte ptr [rdx + r10 + 19], 4
	pinsrb	xmm15, byte ptr [rdx + rsi + 19], 5
	pinsrb	xmm15, byte ptr [rdx + r15 + 19], 6
	pinsrb	xmm15, byte ptr [rdx + rbx + 19], 7
	pinsrb	xmm15, byte ptr [rdx + r11 + 19], 8
	pinsrb	xmm15, byte ptr [rdx + rcx + 19], 9
	pinsrb	xmm15, byte ptr [rdx + rax + 19], 10
	pinsrb	xmm15, byte ptr [rdx + r14 + 19], 11
	pinsrb	xmm15, byte ptr [rdx + r12 + 19], 12
	pinsrb	xmm15, byte ptr [rdx + rdi + 19], 13
	pinsrb	xmm15, byte ptr [rdx + r9 + 19], 14
	pinsrb	xmm15, byte ptr [rdx + r13 + 19], 15
	pinsrb	xmm4, byte ptr [rdx + r8 + 20], 3
	pinsrb	xmm4, byte ptr [rdx + r10 + 20], 4
	pinsrb	xmm4, byte ptr [rdx + rsi + 20], 5
	pinsrb	xmm4, byte ptr [rdx + r15 + 20], 6
	pinsrb	xmm4, byte ptr [rdx + rbx + 20], 7
	pinsrb	xmm4, byte ptr [rdx + r11 + 20], 8
	pinsrb	xmm4, byte ptr [rdx + rcx + 20], 9
	pinsrb	xmm4, byte ptr [rdx + rax + 20], 10
	pinsrb	xmm4, byte ptr [rdx + r14 + 20], 11
	pinsrb	xmm4, byte ptr [rdx + r12 + 20], 12
	pinsrb	xmm4, byte ptr [rdx + rdi + 20], 13
	pinsrb	xmm4, byte ptr [rdx + r9 + 20], 14
	pinsrb	xmm4, byte ptr [rdx + r13 + 20], 15
	pinsrb	xmm6, byte ptr [rdx + r8 + 21], 3
	pinsrb	xmm6, byte ptr [rdx + r10 + 21], 4
	mov	rax, r10
	pinsrb	xmm6, byte ptr [rdx + rsi + 21], 5
	pinsrb	xmm6, byte ptr [rdx + r15 + 21], 6
	pinsrb	xmm6, byte ptr [rdx + rbx + 21], 7
	pinsrb	xmm6, byte ptr [rdx + r11 + 21], 8
	pinsrb	xmm6, byte ptr [rdx + rcx + 21], 9
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r10 + 21], 10
	pinsrb	xmm6, byte ptr [rdx + r14 + 21], 11
	pinsrb	xmm6, byte ptr [rdx + r12 + 21], 12
	pinsrb	xmm6, byte ptr [rdx + rdi + 21], 13
	pinsrb	xmm6, byte ptr [rdx + r9 + 21], 14
	pandn	xmm5, xmmword ptr [rip + .LCPI8_10]
	pminub	xmm7, xmm0
	pcmpeqb	xmm7, xmm0
	pandn	xmm7, xmmword ptr [rip + .LCPI8_11]
	por	xmm7, xmm5
	pminub	xmm15, xmm0
	pcmpeqb	xmm15, xmm0
	movdqa	xmm5, xmmword ptr [rip + .LCPI8_12] # xmm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm15, xmm5
	por	xmm15, xmm7
	pinsrb	xmm6, byte ptr [rdx + r13 + 21], 15
	pcmpeqd	xmm5, xmm5
	movdqa	xmm7, xmmword ptr [rsp + 144]   # 16-byte Reload
	psubb	xmm7, xmm5
	por	xmm15, xmm7
	pminub	xmm4, xmm0
	pcmpeqb	xmm4, xmm0
	movdqa	xmm7, xmmword ptr [rip + .LCPI8_13] # xmm7 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm4, xmm7
	pminub	xmm6, xmm0
	pcmpeqb	xmm6, xmm0
	movdqa	xmm7, xmmword ptr [rip + .LCPI8_14] # xmm7 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm6, xmm7
	por	xmm6, xmm4
	pinsrb	xmm9, byte ptr [rdx + r8 + 22], 3
	pinsrb	xmm9, byte ptr [rdx + rax + 22], 4
	pinsrb	xmm9, byte ptr [rdx + rsi + 22], 5
	pinsrb	xmm9, byte ptr [rdx + r15 + 22], 6
	pinsrb	xmm9, byte ptr [rdx + rbx + 22], 7
	pinsrb	xmm9, byte ptr [rdx + r11 + 22], 8
	pinsrb	xmm9, byte ptr [rdx + rcx + 22], 9
	pinsrb	xmm9, byte ptr [rdx + r10 + 22], 10
	pinsrb	xmm9, byte ptr [rdx + r14 + 22], 11
	pinsrb	xmm9, byte ptr [rdx + r12 + 22], 12
	pinsrb	xmm9, byte ptr [rdx + rdi + 22], 13
	pinsrb	xmm9, byte ptr [rdx + r9 + 22], 14
	pinsrb	xmm9, byte ptr [rdx + r13 + 22], 15
	pminub	xmm9, xmm0
	pcmpeqb	xmm9, xmm0
	movdqa	xmm7, xmmword ptr [rip + .LCPI8_15] # xmm7 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm9, xmm7
	por	xmm9, xmm6
	pinsrb	xmm8, byte ptr [rdx + r8 + 23], 3
	pinsrb	xmm8, byte ptr [rdx + rax + 23], 4
	pinsrb	xmm8, byte ptr [rdx + rsi + 23], 5
	pinsrb	xmm8, byte ptr [rdx + r15 + 23], 6
	pinsrb	xmm8, byte ptr [rdx + rbx + 23], 7
	pinsrb	xmm8, byte ptr [rdx + r11 + 23], 8
	pinsrb	xmm8, byte ptr [rdx + rcx + 23], 9
	pinsrb	xmm8, byte ptr [rdx + r10 + 23], 10
	pinsrb	xmm8, byte ptr [rdx + r14 + 23], 11
	pinsrb	xmm8, byte ptr [rdx + r12 + 23], 12
	pinsrb	xmm8, byte ptr [rdx + rdi + 23], 13
	pinsrb	xmm8, byte ptr [rdx + r9 + 23], 14
	pinsrb	xmm8, byte ptr [rdx + r13 + 23], 15
	pminub	xmm8, xmm0
	pcmpeqb	xmm8, xmm0
	pxor	xmm8, xmm5
	pcmpeqd	xmm5, xmm5
	psllw	xmm8, 7
	movdqa	xmm6, xmmword ptr [rip + .LCPI8_6] # xmm6 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm8, xmm6
	por	xmm8, xmm9
	pinsrb	xmm11, byte ptr [rdx + r8 + 24], 3
	pinsrb	xmm11, byte ptr [rdx + rax + 24], 4
	pinsrb	xmm11, byte ptr [rdx + rsi + 24], 5
	pinsrb	xmm11, byte ptr [rdx + r15 + 24], 6
	pinsrb	xmm11, byte ptr [rdx + rbx + 24], 7
	pinsrb	xmm11, byte ptr [rdx + r11 + 24], 8
	pinsrb	xmm11, byte ptr [rdx + rcx + 24], 9
	pinsrb	xmm11, byte ptr [rdx + r10 + 24], 10
	pinsrb	xmm11, byte ptr [rdx + r14 + 24], 11
	pinsrb	xmm11, byte ptr [rdx + r12 + 24], 12
	pinsrb	xmm11, byte ptr [rdx + rdi + 24], 13
	pinsrb	xmm11, byte ptr [rdx + r9 + 24], 14
	pinsrb	xmm3, byte ptr [rdx + r8 + 25], 3
	pinsrb	xmm3, byte ptr [rdx + rax + 25], 4
	pinsrb	xmm3, byte ptr [rdx + rsi + 25], 5
	pinsrb	xmm3, byte ptr [rdx + r15 + 25], 6
	pinsrb	xmm3, byte ptr [rdx + rbx + 25], 7
	pinsrb	xmm3, byte ptr [rdx + r11 + 25], 8
	pinsrb	xmm3, byte ptr [rdx + rcx + 25], 9
	pinsrb	xmm3, byte ptr [rdx + r10 + 25], 10
	pinsrb	xmm3, byte ptr [rdx + r14 + 25], 11
	pinsrb	xmm3, byte ptr [rdx + r12 + 25], 12
	pinsrb	xmm3, byte ptr [rdx + rdi + 25], 13
	pinsrb	xmm3, byte ptr [rdx + r9 + 25], 14
	pinsrb	xmm3, byte ptr [rdx + r13 + 25], 15
	por	xmm8, xmm15
	movdqa	xmm4, xmm0
	pminub	xmm3, xmm0
	pcmpeqb	xmm3, xmm0
	movdqa	xmm0, xmm3
	movdqa	xmm9, xmmword ptr [rip + .LCPI8_10] # xmm9 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
	pandn	xmm0, xmm9
	paddb	xmm0, xmm3
	pinsrb	xmm11, byte ptr [rdx + r13 + 24], 15
	pminub	xmm11, xmm4
	pcmpeqb	xmm11, xmm4
	pandn	xmm11, xmm9
	pinsrb	xmm2, byte ptr [rdx + r8 + 26], 3
	pinsrb	xmm2, byte ptr [rdx + rax + 26], 4
	pinsrb	xmm2, byte ptr [rdx + rsi + 26], 5
	pinsrb	xmm2, byte ptr [rdx + r15 + 26], 6
	pinsrb	xmm2, byte ptr [rdx + rbx + 26], 7
	pinsrb	xmm2, byte ptr [rdx + r11 + 26], 8
	pinsrb	xmm2, byte ptr [rdx + rcx + 26], 9
	pinsrb	xmm2, byte ptr [rdx + r10 + 26], 10
	pinsrb	xmm2, byte ptr [rdx + r14 + 26], 11
	pinsrb	xmm2, byte ptr [rdx + r12 + 26], 12
	pinsrb	xmm2, byte ptr [rdx + rdi + 26], 13
	pinsrb	xmm2, byte ptr [rdx + r9 + 26], 14
	pinsrb	xmm2, byte ptr [rdx + r13 + 26], 15
	pminub	xmm2, xmm4
	pcmpeqb	xmm2, xmm4
	pandn	xmm2, xmmword ptr [rip + .LCPI8_11]
	por	xmm2, xmm11
	pinsrb	xmm12, byte ptr [rdx + r8 + 27], 3
	pinsrb	xmm12, byte ptr [rdx + rax + 27], 4
	pinsrb	xmm12, byte ptr [rdx + rsi + 27], 5
	pinsrb	xmm12, byte ptr [rdx + r15 + 27], 6
	pinsrb	xmm12, byte ptr [rdx + rbx + 27], 7
	pinsrb	xmm12, byte ptr [rdx + r11 + 27], 8
	pinsrb	xmm12, byte ptr [rdx + rcx + 27], 9
	pinsrb	xmm12, byte ptr [rdx + r10 + 27], 10
	pinsrb	xmm12, byte ptr [rdx + r14 + 27], 11
	pinsrb	xmm12, byte ptr [rdx + r12 + 27], 12
	pinsrb	xmm12, byte ptr [rdx + rdi + 27], 13
	pinsrb	xmm12, byte ptr [rdx + r9 + 27], 14
	pinsrb	xmm12, byte ptr [rdx + r13 + 27], 15
	pminub	xmm12, xmm4
	pcmpeqb	xmm12, xmm4
	movdqa	xmm3, xmm4
	pandn	xmm12, xmmword ptr [rip + .LCPI8_12]
	por	xmm12, xmm2
	psubb	xmm0, xmm5
	por	xmm12, xmm0
	pinsrb	xmm13, byte ptr [rdx + r8 + 28], 3
	pinsrb	xmm10, byte ptr [rdx + r8 + 29], 3
	pinsrb	xmm14, byte ptr [rdx + r8 + 30], 3
	pinsrb	xmm1, byte ptr [rdx + r8 + 31], 3
	pinsrb	xmm13, byte ptr [rdx + rax + 28], 4
	pinsrb	xmm10, byte ptr [rdx + rax + 29], 4
	pinsrb	xmm14, byte ptr [rdx + rax + 30], 4
	pinsrb	xmm1, byte ptr [rdx + rax + 31], 4
	pinsrb	xmm13, byte ptr [rdx + rsi + 28], 5
	pinsrb	xmm10, byte ptr [rdx + rsi + 29], 5
	pinsrb	xmm14, byte ptr [rdx + rsi + 30], 5
	pinsrb	xmm1, byte ptr [rdx + rsi + 31], 5
	pinsrb	xmm13, byte ptr [rdx + r15 + 28], 6
	pinsrb	xmm10, byte ptr [rdx + r15 + 29], 6
	pinsrb	xmm14, byte ptr [rdx + r15 + 30], 6
	pinsrb	xmm1, byte ptr [rdx + r15 + 31], 6
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rbx + 28], 7
	pinsrb	xmm10, byte ptr [rdx + rbx + 29], 7
	pinsrb	xmm14, byte ptr [rdx + rbx + 30], 7
	pinsrb	xmm1, byte ptr [rdx + rbx + 31], 7
	pinsrb	xmm13, byte ptr [rdx + r11 + 28], 8
	pinsrb	xmm10, byte ptr [rdx + r11 + 29], 8
	pinsrb	xmm14, byte ptr [rdx + r11 + 30], 8
	pinsrb	xmm1, byte ptr [rdx + r11 + 31], 8
	pinsrb	xmm13, byte ptr [rdx + rcx + 28], 9
	pinsrb	xmm10, byte ptr [rdx + rcx + 29], 9
	pinsrb	xmm14, byte ptr [rdx + rcx + 30], 9
	pinsrb	xmm1, byte ptr [rdx + rcx + 31], 9
	mov	rax, r10
	pinsrb	xmm13, byte ptr [rdx + r10 + 28], 10
	pinsrb	xmm10, byte ptr [rdx + r10 + 29], 10
	pinsrb	xmm14, byte ptr [rdx + r10 + 30], 10
	pinsrb	xmm1, byte ptr [rdx + r10 + 31], 10
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rax + 28], 11
	pinsrb	xmm10, byte ptr [rdx + rax + 29], 11
	pinsrb	xmm14, byte ptr [rdx + rax + 30], 11
	pinsrb	xmm1, byte ptr [rdx + rax + 31], 11
	mov	rax, r12
	pinsrb	xmm13, byte ptr [rdx + r12 + 28], 12
	pinsrb	xmm10, byte ptr [rdx + r12 + 29], 12
	pinsrb	xmm14, byte ptr [rdx + r12 + 30], 12
	pinsrb	xmm1, byte ptr [rdx + r12 + 31], 12
	pinsrb	xmm13, byte ptr [rdx + rdi + 28], 13
	pinsrb	xmm10, byte ptr [rdx + rdi + 29], 13
	pinsrb	xmm14, byte ptr [rdx + rdi + 30], 13
	pinsrb	xmm1, byte ptr [rdx + rdi + 31], 13
	pinsrb	xmm13, byte ptr [rdx + r9 + 28], 14
	pinsrb	xmm10, byte ptr [rdx + r9 + 29], 14
	pinsrb	xmm14, byte ptr [rdx + r9 + 30], 14
	pinsrb	xmm1, byte ptr [rdx + r9 + 31], 14
	mov	rax, r13
	pinsrb	xmm13, byte ptr [rdx + r13 + 28], 15
	pinsrb	xmm10, byte ptr [rdx + r13 + 29], 15
	pinsrb	xmm14, byte ptr [rdx + r13 + 30], 15
	movdqa	xmm0, xmm4
	pminub	xmm13, xmm4
	pcmpeqb	xmm13, xmm4
	pandn	xmm13, xmmword ptr [rip + .LCPI8_13]
	pminub	xmm10, xmm4
	pcmpeqb	xmm10, xmm4
	pandn	xmm10, xmmword ptr [rip + .LCPI8_14]
	por	xmm10, xmm13
	pinsrb	xmm1, byte ptr [rdx + r13 + 31], 15
	pminub	xmm14, xmm4
	pcmpeqb	xmm14, xmm4
	pandn	xmm14, xmm7
	por	xmm14, xmm10
	pminub	xmm1, xmm4
	pcmpeqb	xmm1, xmm4
	pxor	xmm1, xmm5
	psllw	xmm1, 7
	pand	xmm1, xmm6
	por	xmm1, xmm14
	por	xmm1, xmm12
	movdqa	xmm0, xmm8
	punpcklbw	xmm0, xmm1              # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	movdqa	xmm4, xmmword ptr [rsp + 160]   # 16-byte Reload
	movdqa	xmm2, xmm4
	movdqa	xmm5, xmmword ptr [rsp + 176]   # 16-byte Reload
	punpcklbw	xmm2, xmm5              # xmm2 = xmm2[0],xmm5[0],xmm2[1],xmm5[1],xmm2[2],xmm5[2],xmm2[3],xmm5[3],xmm2[4],xmm5[4],xmm2[5],xmm5[5],xmm2[6],xmm5[6],xmm2[7],xmm5[7]
	movdqa	xmm3, xmm2
	punpcklwd	xmm3, xmm0              # xmm3 = xmm3[0],xmm0[0],xmm3[1],xmm0[1],xmm3[2],xmm0[2],xmm3[3],xmm0[3]
	punpckhwd	xmm2, xmm0              # xmm2 = xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
	punpckhbw	xmm8, xmm1              # xmm8 = xmm8[8],xmm1[8],xmm8[9],xmm1[9],xmm8[10],xmm1[10],xmm8[11],xmm1[11],xmm8[12],xmm1[12],xmm8[13],xmm1[13],xmm8[14],xmm1[14],xmm8[15],xmm1[15]
	punpckhbw	xmm4, xmm5              # xmm4 = xmm4[8],xmm5[8],xmm4[9],xmm5[9],xmm4[10],xmm5[10],xmm4[11],xmm5[11],xmm4[12],xmm5[12],xmm4[13],xmm5[13],xmm4[14],xmm5[14],xmm4[15],xmm5[15]
	movdqa	xmm0, xmm4
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm4, xmm8              # xmm4 = xmm4[4],xmm8[4],xmm4[5],xmm8[5],xmm4[6],xmm8[6],xmm4[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx + 48], xmm4
	movdqu	xmmword ptr [r14 + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm2
	movdqu	xmmword ptr [r14 + 4*rcx], xmm3
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 232]      # 8-byte Folded Reload
	jne	.LBB8_195
# %bb.196:
	mov	r15, qword ptr [rsp + 256]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 232]      # 8-byte Folded Reload
	mov	r11b, byte ptr [rsp]            # 1-byte Reload
	mov	rsi, qword ptr [rsp + 264]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	jne	.LBB8_67
	jmp	.LBB8_132
.LBB8_197:
	and	r15, -8
	mov	rax, r15
	shl	rax, 6
	add	rax, rdx
	mov	qword ptr [rsp + 40], rax       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	lea	rax, [r14 + 4*r15]
	mov	qword ptr [rsp], rax            # 8-byte Spill
	mov	dword ptr [rsp + 48], r13d      # 4-byte Spill
	movd	xmm0, r13d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm15, xmm0, 0                  # xmm15 = xmm0[0,0,0,0]
	xor	r9d, r9d
	mov	qword ptr [rsp + 128], r14      # 8-byte Spill
	movdqa	xmm8, xmmword ptr [rip + .LCPI8_8] # xmm8 = <1,1,1,1,1,1,1,1,u,u,u,u,u,u,u,u>
	.p2align	4, 0x90
.LBB8_198:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 16], r9        # 8-byte Spill
	shl	r9, 6
	mov	r8, r9
	mov	r12, r9
	mov	r13, r9
	mov	rcx, r9
	mov	rdi, r9
	mov	rbx, r9
	movzx	eax, word ptr [rdx + r9]
	movd	xmm5, eax
	movzx	eax, word ptr [rdx + r9 + 2]
	movd	xmm3, eax
	movzx	eax, word ptr [rdx + r9 + 4]
	movd	xmm2, eax
	movzx	eax, word ptr [rdx + r9 + 6]
	movd	xmm4, eax
	movzx	r10d, word ptr [rdx + r9 + 8]
	movzx	esi, word ptr [rdx + r9 + 10]
	movzx	r11d, word ptr [rdx + r9 + 12]
	movzx	eax, word ptr [rdx + r9 + 14]
	mov	dword ptr [rsp + 8], eax        # 4-byte Spill
	movzx	eax, word ptr [rdx + r9 + 16]
	movd	xmm6, eax
	movzx	eax, word ptr [rdx + r9 + 32]
	movd	xmm1, eax
	movzx	eax, word ptr [rdx + r9 + 48]
	mov	r15, r9
	or	r15, 64
	or	r8, 128
	or	r12, 192
	or	r13, 256
	or	rcx, 320
	or	rdi, 384
	pinsrw	xmm5, word ptr [rdx + r15], 1
	pinsrw	xmm5, word ptr [rdx + r8], 2
	pinsrw	xmm5, word ptr [rdx + r12], 3
	pinsrw	xmm5, word ptr [rdx + r13], 4
	pinsrw	xmm5, word ptr [rdx + rcx], 5
	pinsrw	xmm5, word ptr [rdx + rdi], 6
	or	rbx, 448
	pinsrw	xmm5, word ptr [rdx + rbx], 7
	movd	xmm9, eax
	movzx	eax, word ptr [rdx + r9 + 18]
	mov	dword ptr [rsp + 24], eax       # 4-byte Spill
	movdqa	xmm0, xmm15
	pcmpgtw	xmm0, xmm5
	pinsrw	xmm3, word ptr [rdx + r15 + 2], 1
	pinsrw	xmm3, word ptr [rdx + r8 + 2], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 2], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 2], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 2], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 2], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 2], 7
	pinsrw	xmm6, word ptr [rdx + r15 + 16], 1
	pinsrw	xmm6, word ptr [rdx + r8 + 16], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 16], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 16], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 16], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 16], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 16], 7
	movdqa	xmm10, xmm15
	pinsrw	xmm1, word ptr [rdx + r15 + 32], 1
	pinsrw	xmm1, word ptr [rdx + r8 + 32], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 32], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 32], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 32], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 32], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 32], 7
	pcmpgtw	xmm10, xmm6
	movdqa	xmm6, xmm15
	pcmpgtw	xmm6, xmm1
	pinsrw	xmm9, word ptr [rdx + r15 + 48], 1
	pinsrw	xmm9, word ptr [rdx + r8 + 48], 2
	pinsrw	xmm9, word ptr [rdx + r12 + 48], 3
	pinsrw	xmm9, word ptr [rdx + r13 + 48], 4
	pinsrw	xmm9, word ptr [rdx + rcx + 48], 5
	pinsrw	xmm9, word ptr [rdx + rdi + 48], 6
	pinsrw	xmm9, word ptr [rdx + rbx + 48], 7
	movdqa	xmm5, xmm15
	pcmpgtw	xmm5, xmm9
	movdqa	xmm1, xmm15
	pcmpgtw	xmm1, xmm3
	packsswb	xmm1, xmm1
	movdqa	xmm3, xmm1
	pand	xmm3, xmm8
	psubb	xmm3, xmm1
	movd	xmm1, r10d
	movzx	r14d, word ptr [rdx + r9 + 20]
	packsswb	xmm0, xmm0
	pinsrw	xmm2, word ptr [rdx + r15 + 4], 1
	pinsrw	xmm2, word ptr [rdx + r8 + 4], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 4], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 4], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 4], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 4], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 4], 7
	pinsrw	xmm4, word ptr [rdx + r15 + 6], 1
	pinsrw	xmm4, word ptr [rdx + r8 + 6], 2
	pinsrw	xmm4, word ptr [rdx + r12 + 6], 3
	pinsrw	xmm4, word ptr [rdx + r13 + 6], 4
	pinsrw	xmm4, word ptr [rdx + rcx + 6], 5
	pinsrw	xmm4, word ptr [rdx + rdi + 6], 6
	pinsrw	xmm4, word ptr [rdx + rbx + 6], 7
	pinsrw	xmm1, word ptr [rdx + r15 + 8], 1
	pinsrw	xmm1, word ptr [rdx + r8 + 8], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 8], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 8], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 8], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 8], 6
	pand	xmm0, xmm8
	por	xmm3, xmm0
	movdqa	xmm7, xmm15
	pcmpgtw	xmm7, xmm2
	movd	xmm2, esi
	movzx	esi, word ptr [rdx + r9 + 22]
	pinsrw	xmm1, word ptr [rdx + rbx + 8], 7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm8
	psllw	xmm7, 2
	movdqa	xmm11, xmmword ptr [rip + .LCPI8_1] # xmm11 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	pand	xmm7, xmm11
	por	xmm7, xmm3
	movdqa	xmm3, xmm15
	pcmpgtw	xmm3, xmm4
	movdqa	xmm0, xmm15
	pcmpgtw	xmm0, xmm1
	movd	xmm1, r11d
	movzx	r11d, word ptr [rdx + r9 + 24]
	pinsrw	xmm2, word ptr [rdx + r15 + 10], 1
	pinsrw	xmm2, word ptr [rdx + r8 + 10], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 10], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 10], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 10], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 10], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 10], 7
	pinsrw	xmm1, word ptr [rdx + r15 + 12], 1
	pinsrw	xmm1, word ptr [rdx + r8 + 12], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 12], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 12], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 12], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 12], 6
	packsswb	xmm3, xmm3
	pand	xmm3, xmm8
	psllw	xmm3, 3
	movdqa	xmm12, xmmword ptr [rip + .LCPI8_2] # xmm12 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	pand	xmm3, xmm12
	packsswb	xmm0, xmm0
	pand	xmm0, xmm8
	psllw	xmm0, 4
	movdqa	xmm13, xmmword ptr [rip + .LCPI8_3] # xmm13 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	pand	xmm0, xmm13
	por	xmm0, xmm3
	movd	xmm3, dword ptr [rsp + 8]       # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rdx + r9 + 26]
	pinsrw	xmm1, word ptr [rdx + rbx + 12], 7
	por	xmm0, xmm7
	movdqa	xmm4, xmm15
	pcmpgtw	xmm4, xmm2
	movdqa	xmm7, xmm15
	pcmpgtw	xmm7, xmm1
	movd	xmm1, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rdx + r9 + 28]
	pinsrw	xmm3, word ptr [rdx + r15 + 14], 1
	pinsrw	xmm3, word ptr [rdx + r8 + 14], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 14], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 14], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 14], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 14], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 14], 7
	packsswb	xmm4, xmm4
	pand	xmm4, xmm8
	psllw	xmm4, 5
	movdqa	xmm14, xmmword ptr [rip + .LCPI8_4] # xmm14 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	pand	xmm4, xmm14
	packsswb	xmm7, xmm7
	pand	xmm7, xmm8
	psllw	xmm7, 6
	movdqa	xmm11, xmmword ptr [rip + .LCPI8_5] # xmm11 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	pand	xmm7, xmm11
	por	xmm7, xmm4
	movdqa	xmm9, xmm15
	pcmpgtw	xmm9, xmm3
	movd	xmm3, r14d
	movzx	r14d, word ptr [rdx + r9 + 30]
	packsswb	xmm9, xmm9
	psllw	xmm9, 7
	movdqa	xmm2, xmmword ptr [rip + .LCPI8_6] # xmm2 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm9, xmm2
	por	xmm9, xmm7
	movd	xmm4, esi
	movzx	esi, word ptr [rdx + r9 + 34]
	mov	dword ptr [rsp + 24], esi       # 4-byte Spill
	pinsrw	xmm1, word ptr [rdx + r15 + 18], 1
	pinsrw	xmm1, word ptr [rdx + r8 + 18], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 18], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 18], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 18], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 18], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 18], 7
	por	xmm9, xmm0
	movdqa	xmm0, xmm15
	pcmpgtw	xmm0, xmm1
	packsswb	xmm0, xmm0
	movdqa	xmm1, xmm0
	pand	xmm1, xmm8
	psubb	xmm1, xmm0
	movd	xmm7, r11d
	movzx	esi, word ptr [rdx + r9 + 36]
	mov	dword ptr [rsp + 8], esi        # 4-byte Spill
	packsswb	xmm10, xmm10
	pinsrw	xmm3, word ptr [rdx + r15 + 20], 1
	pinsrw	xmm3, word ptr [rdx + r8 + 20], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 20], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 20], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 20], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 20], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 20], 7
	pinsrw	xmm4, word ptr [rdx + r15 + 22], 1
	pinsrw	xmm4, word ptr [rdx + r8 + 22], 2
	pinsrw	xmm4, word ptr [rdx + r12 + 22], 3
	pinsrw	xmm4, word ptr [rdx + r13 + 22], 4
	pinsrw	xmm4, word ptr [rdx + rcx + 22], 5
	pinsrw	xmm4, word ptr [rdx + rdi + 22], 6
	pinsrw	xmm4, word ptr [rdx + rbx + 22], 7
	pinsrw	xmm7, word ptr [rdx + r15 + 24], 1
	pinsrw	xmm7, word ptr [rdx + r8 + 24], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 24], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 24], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 24], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 24], 6
	pinsrw	xmm7, word ptr [rdx + rbx + 24], 7
	pand	xmm10, xmm8
	por	xmm1, xmm10
	movdqa	xmm2, xmm15
	pcmpgtw	xmm2, xmm3
	movd	xmm3, eax
	movzx	r11d, word ptr [rdx + r9 + 38]
	packsswb	xmm2, xmm2
	pand	xmm2, xmm8
	psllw	xmm2, 2
	movdqa	xmm13, xmmword ptr [rip + .LCPI8_1] # xmm13 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	pand	xmm2, xmm13
	por	xmm2, xmm1
	movdqa	xmm1, xmm15
	pcmpgtw	xmm1, xmm4
	movdqa	xmm0, xmm15
	pcmpgtw	xmm0, xmm7
	movd	xmm4, r10d
	movzx	r10d, word ptr [rdx + r9 + 40]
	pinsrw	xmm3, word ptr [rdx + r15 + 26], 1
	pinsrw	xmm3, word ptr [rdx + r8 + 26], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 26], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 26], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 26], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 26], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 26], 7
	pinsrw	xmm4, word ptr [rdx + r15 + 28], 1
	pinsrw	xmm4, word ptr [rdx + r8 + 28], 2
	pinsrw	xmm4, word ptr [rdx + r12 + 28], 3
	pinsrw	xmm4, word ptr [rdx + r13 + 28], 4
	pinsrw	xmm4, word ptr [rdx + rcx + 28], 5
	pinsrw	xmm4, word ptr [rdx + rdi + 28], 6
	pinsrw	xmm4, word ptr [rdx + rbx + 28], 7
	packsswb	xmm1, xmm1
	pand	xmm1, xmm8
	psllw	xmm1, 3
	movdqa	xmm11, xmm12
	pand	xmm1, xmm12
	packsswb	xmm0, xmm0
	pand	xmm0, xmm8
	psllw	xmm0, 4
	movdqa	xmm12, xmmword ptr [rip + .LCPI8_3] # xmm12 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	pand	xmm0, xmm12
	por	xmm0, xmm1
	movd	xmm1, r14d
	movzx	eax, word ptr [rdx + r9 + 42]
	por	xmm0, xmm2
	movdqa	xmm2, xmm15
	pcmpgtw	xmm2, xmm3
	movdqa	xmm7, xmm15
	pcmpgtw	xmm7, xmm4
	movd	xmm4, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm4 = mem[0],zero,zero,zero
	movzx	r14d, word ptr [rdx + r9 + 44]
	pinsrw	xmm1, word ptr [rdx + r15 + 30], 1
	pinsrw	xmm1, word ptr [rdx + r8 + 30], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 30], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 30], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 30], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 30], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 30], 7
	packsswb	xmm2, xmm2
	pand	xmm2, xmm8
	psllw	xmm2, 5
	pand	xmm2, xmm14
	packsswb	xmm7, xmm7
	pand	xmm7, xmm8
	psllw	xmm7, 6
	movdqa	xmm3, xmmword ptr [rip + .LCPI8_5] # xmm3 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	pand	xmm7, xmm3
	por	xmm7, xmm2
	movdqa	xmm10, xmm15
	pcmpgtw	xmm10, xmm1
	movd	xmm1, dword ptr [rsp + 8]       # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movzx	esi, word ptr [rdx + r9 + 46]
	mov	dword ptr [rsp + 24], esi       # 4-byte Spill
	packsswb	xmm10, xmm10
	psllw	xmm10, 7
	movdqa	xmm14, xmmword ptr [rip + .LCPI8_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm10, xmm14
	por	xmm10, xmm7
	movd	xmm2, r11d
	movzx	r11d, word ptr [rdx + r9 + 50]
	pinsrw	xmm4, word ptr [rdx + r15 + 34], 1
	pinsrw	xmm4, word ptr [rdx + r8 + 34], 2
	pinsrw	xmm4, word ptr [rdx + r12 + 34], 3
	pinsrw	xmm4, word ptr [rdx + r13 + 34], 4
	pinsrw	xmm4, word ptr [rdx + rcx + 34], 5
	pinsrw	xmm4, word ptr [rdx + rdi + 34], 6
	pinsrw	xmm4, word ptr [rdx + rbx + 34], 7
	por	xmm10, xmm0
	movdqa	xmm0, xmm15
	pcmpgtw	xmm0, xmm4
	packsswb	xmm0, xmm0
	movdqa	xmm4, xmm0
	pand	xmm4, xmm8
	psubb	xmm4, xmm0
	movd	xmm0, r10d
	movzx	esi, word ptr [rdx + r9 + 52]
	mov	dword ptr [rsp + 8], esi        # 4-byte Spill
	packsswb	xmm6, xmm6
	pinsrw	xmm1, word ptr [rdx + r15 + 36], 1
	pinsrw	xmm1, word ptr [rdx + r8 + 36], 2
	pinsrw	xmm1, word ptr [rdx + r12 + 36], 3
	pinsrw	xmm1, word ptr [rdx + r13 + 36], 4
	pinsrw	xmm1, word ptr [rdx + rcx + 36], 5
	pinsrw	xmm1, word ptr [rdx + rdi + 36], 6
	pinsrw	xmm1, word ptr [rdx + rbx + 36], 7
	pinsrw	xmm2, word ptr [rdx + r15 + 38], 1
	pinsrw	xmm2, word ptr [rdx + r8 + 38], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 38], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 38], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 38], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 38], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 38], 7
	pinsrw	xmm0, word ptr [rdx + r15 + 40], 1
	pinsrw	xmm0, word ptr [rdx + r8 + 40], 2
	pinsrw	xmm0, word ptr [rdx + r12 + 40], 3
	pinsrw	xmm0, word ptr [rdx + r13 + 40], 4
	pinsrw	xmm0, word ptr [rdx + rcx + 40], 5
	pinsrw	xmm0, word ptr [rdx + rdi + 40], 6
	pand	xmm6, xmm8
	por	xmm4, xmm6
	movdqa	xmm6, xmm15
	pcmpgtw	xmm6, xmm1
	movd	xmm7, eax
	movzx	r10d, word ptr [rdx + r9 + 54]
	pinsrw	xmm0, word ptr [rdx + rbx + 40], 7
	packsswb	xmm6, xmm6
	pand	xmm6, xmm8
	psllw	xmm6, 2
	pand	xmm6, xmm13
	por	xmm6, xmm4
	movdqa	xmm4, xmm15
	pcmpgtw	xmm4, xmm2
	movdqa	xmm1, xmm15
	pcmpgtw	xmm1, xmm0
	movd	xmm0, r14d
	movzx	eax, word ptr [rdx + r9 + 56]
	pinsrw	xmm7, word ptr [rdx + r15 + 42], 1
	pinsrw	xmm7, word ptr [rdx + r8 + 42], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 42], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 42], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 42], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 42], 6
	pinsrw	xmm7, word ptr [rdx + rbx + 42], 7
	pinsrw	xmm0, word ptr [rdx + r15 + 44], 1
	pinsrw	xmm0, word ptr [rdx + r8 + 44], 2
	pinsrw	xmm0, word ptr [rdx + r12 + 44], 3
	pinsrw	xmm0, word ptr [rdx + r13 + 44], 4
	pinsrw	xmm0, word ptr [rdx + rcx + 44], 5
	pinsrw	xmm0, word ptr [rdx + rdi + 44], 6
	packsswb	xmm4, xmm4
	pand	xmm4, xmm8
	psllw	xmm4, 3
	pand	xmm4, xmm11
	packsswb	xmm1, xmm1
	pand	xmm1, xmm8
	psllw	xmm1, 4
	pand	xmm1, xmm12
	movdqa	xmm13, xmm12
	por	xmm1, xmm4
	movd	xmm2, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm2 = mem[0],zero,zero,zero
	movzx	esi, word ptr [rdx + r9 + 58]
	pinsrw	xmm0, word ptr [rdx + rbx + 44], 7
	por	xmm1, xmm6
	movdqa	xmm4, xmm15
	pcmpgtw	xmm4, xmm7
	movdqa	xmm6, xmm15
	pcmpgtw	xmm6, xmm0
	movd	xmm7, r11d
	movzx	r11d, word ptr [rdx + r9 + 60]
	pinsrw	xmm2, word ptr [rdx + r15 + 46], 1
	pinsrw	xmm2, word ptr [rdx + r8 + 46], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 46], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 46], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 46], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 46], 6
	movzx	r9d, word ptr [rdx + r9 + 62]
	pinsrw	xmm2, word ptr [rdx + rbx + 46], 7
	packsswb	xmm4, xmm4
	pand	xmm4, xmm8
	psllw	xmm4, 5
	pand	xmm4, xmmword ptr [rip + .LCPI8_4]
	packsswb	xmm6, xmm6
	pand	xmm6, xmm8
	psllw	xmm6, 6
	pand	xmm6, xmm3
	movdqa	xmm12, xmm3
	por	xmm6, xmm4
	movdqa	xmm0, xmm15
	pcmpgtw	xmm0, xmm2
	movd	xmm2, dword ptr [rsp + 8]       # 4-byte Folded Reload
                                        # xmm2 = mem[0],zero,zero,zero
	pinsrw	xmm7, word ptr [rdx + r15 + 50], 1
	pinsrw	xmm7, word ptr [rdx + r8 + 50], 2
	pinsrw	xmm7, word ptr [rdx + r12 + 50], 3
	pinsrw	xmm7, word ptr [rdx + r13 + 50], 4
	pinsrw	xmm7, word ptr [rdx + rcx + 50], 5
	pinsrw	xmm7, word ptr [rdx + rdi + 50], 6
	pinsrw	xmm7, word ptr [rdx + rbx + 50], 7
	packsswb	xmm0, xmm0
	psllw	xmm0, 7
	pand	xmm0, xmm14
	por	xmm0, xmm6
	movd	xmm6, r10d
	por	xmm0, xmm1
	movdqa	xmm1, xmm15
	pcmpgtw	xmm1, xmm7
	packsswb	xmm1, xmm1
	movdqa	xmm7, xmm1
	pand	xmm7, xmm8
	psubb	xmm7, xmm1
	movd	xmm3, eax
	packsswb	xmm5, xmm5
	pinsrw	xmm2, word ptr [rdx + r15 + 52], 1
	pinsrw	xmm2, word ptr [rdx + r8 + 52], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 52], 3
	pinsrw	xmm2, word ptr [rdx + r13 + 52], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 52], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 52], 6
	pand	xmm5, xmm8
	pinsrw	xmm2, word ptr [rdx + rbx + 52], 7
	por	xmm7, xmm5
	movdqa	xmm5, xmm15
	pcmpgtw	xmm5, xmm2
	movd	xmm4, esi
	pinsrw	xmm6, word ptr [rdx + r15 + 54], 1
	pinsrw	xmm6, word ptr [rdx + r8 + 54], 2
	pinsrw	xmm6, word ptr [rdx + r12 + 54], 3
	pinsrw	xmm6, word ptr [rdx + r13 + 54], 4
	pinsrw	xmm6, word ptr [rdx + rcx + 54], 5
	pinsrw	xmm6, word ptr [rdx + rdi + 54], 6
	pinsrw	xmm6, word ptr [rdx + rbx + 54], 7
	pinsrw	xmm3, word ptr [rdx + r15 + 56], 1
	pinsrw	xmm3, word ptr [rdx + r8 + 56], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 56], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 56], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 56], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 56], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 56], 7
	pinsrw	xmm4, word ptr [rdx + r15 + 58], 1
	pinsrw	xmm4, word ptr [rdx + r8 + 58], 2
	pinsrw	xmm4, word ptr [rdx + r12 + 58], 3
	pinsrw	xmm4, word ptr [rdx + r13 + 58], 4
	pinsrw	xmm4, word ptr [rdx + rcx + 58], 5
	pinsrw	xmm4, word ptr [rdx + rdi + 58], 6
	pinsrw	xmm4, word ptr [rdx + rbx + 58], 7
	packsswb	xmm5, xmm5
	pand	xmm5, xmm8
	psllw	xmm5, 2
	pand	xmm5, xmmword ptr [rip + .LCPI8_1]
	por	xmm5, xmm7
	movdqa	xmm2, xmm15
	pcmpgtw	xmm2, xmm6
	movdqa	xmm1, xmm15
	pcmpgtw	xmm1, xmm3
	movd	xmm3, r11d
	pinsrw	xmm3, word ptr [rdx + r15 + 60], 1
	pinsrw	xmm3, word ptr [rdx + r8 + 60], 2
	pinsrw	xmm3, word ptr [rdx + r12 + 60], 3
	pinsrw	xmm3, word ptr [rdx + r13 + 60], 4
	pinsrw	xmm3, word ptr [rdx + rcx + 60], 5
	pinsrw	xmm3, word ptr [rdx + rdi + 60], 6
	pinsrw	xmm3, word ptr [rdx + rbx + 60], 7
	packsswb	xmm2, xmm2
	pand	xmm2, xmm8
	psllw	xmm2, 3
	pand	xmm2, xmm11
	packsswb	xmm1, xmm1
	pand	xmm1, xmm8
	psllw	xmm1, 4
	pand	xmm1, xmm13
	por	xmm1, xmm2
	movd	xmm2, r9d
	pinsrw	xmm2, word ptr [rdx + r15 + 62], 1
	pinsrw	xmm2, word ptr [rdx + r8 + 62], 2
	pinsrw	xmm2, word ptr [rdx + r12 + 62], 3
	mov	r14, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrw	xmm2, word ptr [rdx + r13 + 62], 4
	pinsrw	xmm2, word ptr [rdx + rcx + 62], 5
	pinsrw	xmm2, word ptr [rdx + rdi + 62], 6
	pinsrw	xmm2, word ptr [rdx + rbx + 62], 7
	por	xmm1, xmm5
	movdqa	xmm5, xmm15
	pcmpgtw	xmm5, xmm4
	movdqa	xmm4, xmm15
	pcmpgtw	xmm4, xmm3
	packsswb	xmm5, xmm5
	pand	xmm5, xmm8
	psllw	xmm5, 5
	pand	xmm5, xmmword ptr [rip + .LCPI8_4]
	packsswb	xmm4, xmm4
	pand	xmm4, xmm8
	psllw	xmm4, 6
	pand	xmm4, xmm12
	por	xmm4, xmm5
	movdqa	xmm3, xmm15
	pcmpgtw	xmm3, xmm2
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm4
	por	xmm3, xmm1
	movdqa	xmm1, xmm9
	punpcklqdq	xmm1, xmm10             # xmm1 = xmm1[0],xmm10[0]
	movdqa	xmm2, xmm0
	punpcklqdq	xmm2, xmm3              # xmm2 = xmm2[0],xmm3[0]
	movdqa	xmm4, xmmword ptr [rip + .LCPI8_9] # xmm4 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm2, xmm4
	pshufb	xmm1, xmm4
	punpcklwd	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3]
	punpcklbw	xmm0, xmm3              # xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1],xmm0[2],xmm3[2],xmm0[3],xmm3[3],xmm0[4],xmm3[4],xmm0[5],xmm3[5],xmm0[6],xmm3[6],xmm0[7],xmm3[7]
	punpcklbw	xmm9, xmm10             # xmm9 = xmm9[0],xmm10[0],xmm9[1],xmm10[1],xmm9[2],xmm10[2],xmm9[3],xmm10[3],xmm9[4],xmm10[4],xmm9[5],xmm10[5],xmm9[6],xmm10[6],xmm9[7],xmm10[7]
	punpcklwd	xmm9, xmm0              # xmm9 = xmm9[0],xmm0[0],xmm9[1],xmm0[1],xmm9[2],xmm0[2],xmm9[3],xmm0[3]
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx], xmm9
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm1
	add	rcx, 8
	mov	r9, rcx
	cmp	rcx, qword ptr [rsp + 32]       # 8-byte Folded Reload
	jne	.LBB8_198
# %bb.199:
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r13d, dword ptr [rsp + 48]      # 4-byte Reload
	mov	r12, qword ptr [rsp]            # 8-byte Reload
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	jne	.LBB8_101
	jmp	.LBB8_136
.LBB8_200:
	mov	r8, r11
	and	r8, -4
	mov	rbx, r8
	shl	rbx, 7
	add	rbx, rdx
	lea	r15, [r14 + 4*r8]
	movaps	xmm1, xmm0
	shufps	xmm1, xmm0, 0                   # xmm1 = xmm1[0,0],xmm0[0,0]
	add	rdx, 508
	xor	ecx, ecx
	movdqa	xmm15, xmmword ptr [rip + .LCPI8_0] # xmm15 = <1,1,1,1,u,u,u,u,u,u,u,u,u,u,u,u>
	movdqa	xmm8, xmmword ptr [rip + .LCPI8_1] # xmm8 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI8_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI8_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI8_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI8_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI8_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	movdqa	xmm9, xmmword ptr [rip + .LCPI8_7] # xmm9 = [0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]
	.p2align	4, 0x90
.LBB8_201:                              # =>This Inner Loop Header: Depth=1
	movss	xmm6, dword ptr [rdx - 508]     # xmm6 = mem[0],zero,zero,zero
	movss	xmm7, dword ptr [rdx - 504]     # xmm7 = mem[0],zero,zero,zero
	movss	xmm5, dword ptr [rdx - 500]     # xmm5 = mem[0],zero,zero,zero
	movss	xmm4, dword ptr [rdx - 496]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 380], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 252], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 124], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpltps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	insertps	xmm7, dword ptr [rdx - 376], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 248], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 120], 48 # xmm7 = xmm7[0,1,2],mem[0]
	insertps	xmm5, dword ptr [rdx - 372], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 244], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 116], 48 # xmm5 = xmm5[0,1,2],mem[0]
	insertps	xmm4, dword ptr [rdx - 368], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rdx - 240], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rdx - 112], 48 # xmm4 = xmm4[0,1,2],mem[0]
	cmpltps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	movdqa	xmm2, xmm7
	pand	xmm2, xmm15
	psubb	xmm2, xmm7
	movss	xmm7, dword ptr [rdx - 492]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 364], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 236], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 108], 48 # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rdx - 488]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 360], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 232], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 104], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpltps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm8
	por	xmm5, xmm2
	movss	xmm3, dword ptr [rdx - 484]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 356], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 228], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx - 100], 48 # xmm3 = xmm3[0,1,2],mem[0]
	cmpltps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 3
	pand	xmm4, xmm10
	cmpltps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 4
	pand	xmm7, xmm11
	por	xmm7, xmm4
	movss	xmm4, dword ptr [rdx - 480]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm4, dword ptr [rdx - 352], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rdx - 224], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rdx - 96], 48  # xmm4 = xmm4[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm5, dword ptr [rdx - 476]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 348], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 220], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 92], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpltps	xmm5, xmm1
	packssdw	xmm5, xmm5
	cmpltps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpltps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 6
	pand	xmm3, xmm13
	por	xmm3, xmm6
	movss	xmm2, dword ptr [rdx - 472]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 344], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 216], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 88], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packsswb	xmm5, xmm5
	cmpltps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm3
	movss	xmm3, dword ptr [rdx - 468]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 340], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 212], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm5, xmm15
	insertps	xmm3, dword ptr [rdx - 84], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm4, xmm7
	cmpltps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm7, dword ptr [rdx - 464]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 336], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 208], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 80], 48  # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm5
	movss	xmm5, dword ptr [rdx - 460]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 332], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 204], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 76], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpltps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rdx - 456]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 328], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 200], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 72], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpltps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 3
	pand	xmm7, xmm10
	cmpltps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm7
	movss	xmm2, dword ptr [rdx - 452]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 324], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 196], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 68], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm3
	movss	xmm7, dword ptr [rdx - 448]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 320], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 192], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 64], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpltps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpltps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rdx - 444]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 316], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 188], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 60], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpltps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	cmpltps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	psllw	xmm7, 7
	pand	xmm7, xmm14
	por	xmm7, xmm2
	movss	xmm2, dword ptr [rdx - 440]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 312], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 184], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 56], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm3, dword ptr [rdx - 436]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 308], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 180], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm6, xmm15
	insertps	xmm3, dword ptr [rdx - 52], 48  # xmm3 = xmm3[0,1,2],mem[0]
	punpckldq	xmm4, xmm7              # xmm4 = xmm4[0],xmm7[0],xmm4[1],xmm7[1]
	cmpltps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm7, xmm2
	pand	xmm7, xmm15
	psubb	xmm7, xmm2
	movss	xmm5, dword ptr [rdx - 432]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 304], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 176], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 48], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm7, xmm6
	movss	xmm6, dword ptr [rdx - 428]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 300], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 172], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 44], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpltps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm7
	movss	xmm7, dword ptr [rdx - 424]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 296], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 168], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 40], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpltps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	cmpltps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm5
	movss	xmm2, dword ptr [rdx - 420]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 292], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 164], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 36], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm5, dword ptr [rdx - 416]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 288], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 160], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 32], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpltps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpltps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm7, dword ptr [rdx - 412]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 284], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 156], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 28], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpltps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	cmpltps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	psllw	xmm5, 7
	pand	xmm5, xmm14
	por	xmm5, xmm2
	movss	xmm2, dword ptr [rdx - 408]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 280], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 152], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	pand	xmm7, xmm15
	insertps	xmm2, dword ptr [rdx - 24], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm6
	cmpltps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm3, dword ptr [rdx - 404]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 276], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 148], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx - 20], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm6, xmm7
	movss	xmm2, dword ptr [rdx - 400]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 272], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 144], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 16], 48  # xmm2 = xmm2[0,1,2],mem[0]
	cmpltps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rdx - 396]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 268], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 140], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 12], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpltps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	cmpltps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm2
	movss	xmm7, dword ptr [rdx - 392]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 264], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 136], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 8], 48   # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm2, dword ptr [rdx - 388]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 260], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 132], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 4], 48   # xmm2 = xmm2[0,1,2],mem[0]
	cmpltps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpltps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm3, dword ptr [rdx - 384]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 256], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 128], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx], 48       # xmm3 = xmm3[0,1,2],mem[0]
	cmpltps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm2
	por	xmm3, xmm6
	punpckldq	xmm5, xmm3              # xmm5 = xmm5[0],xmm3[0],xmm5[1],xmm3[1]
	punpcklbw	xmm4, xmm5              # xmm4 = xmm4[0],xmm5[0],xmm4[1],xmm5[1],xmm4[2],xmm5[2],xmm4[3],xmm5[3],xmm4[4],xmm5[4],xmm4[5],xmm5[5],xmm4[6],xmm5[6],xmm4[7],xmm5[7]
	pshufb	xmm4, xmm9
	movdqu	xmmword ptr [r14 + 4*rcx], xmm4
	add	rcx, 4
	add	rdx, 512
	cmp	r8, rcx
	jne	.LBB8_201
# %bb.202:
	cmp	r11, r8
	jne	.LBB8_124
	jmp	.LBB8_140
.Lfunc_end8:
	.size	comparison_greater_scalar_arr_sse4, .Lfunc_end8-comparison_greater_scalar_arr_sse4
                                        # -- End function
	.globl	comparison_greater_equal_arr_arr_sse4 # -- Begin function comparison_greater_equal_arr_arr_sse4
	.p2align	4, 0x90
	.type	comparison_greater_equal_arr_arr_sse4,@function
comparison_greater_equal_arr_arr_sse4:  # @comparison_greater_equal_arr_arr_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -8
	sub	rsp, 72
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB9_29
# %bb.1:
	cmp	edi, 3
	jle	.LBB9_2
# %bb.15:
	cmp	edi, 4
	je	.LBB9_68
# %bb.16:
	cmp	edi, 5
	je	.LBB9_79
# %bb.17:
	cmp	edi, 6
	jne	.LBB9_123
# %bb.18:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_22
# %bb.19:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_20:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_20
# %bb.21:
	add	r14, 1
.LBB9_22:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_26
# %bb.23:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_24:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setae	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setae	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setae	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setae	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setae	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setae	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setae	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setae	r12b
	cmp	eax, dword ptr [rdx + 80]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setae	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setae	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_24
# %bb.25:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_26:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.27:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_28:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [rsi + 4*rcx]
	cmp	eax, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_28
	jmp	.LBB9_123
.LBB9_29:
	cmp	edi, 8
	jle	.LBB9_30
# %bb.43:
	cmp	edi, 9
	je	.LBB9_101
# %bb.44:
	cmp	edi, 11
	je	.LBB9_112
# %bb.45:
	cmp	edi, 12
	jne	.LBB9_123
# %bb.46:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_50
# %bb.47:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_48:                               # =>This Inner Loop Header: Depth=1
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	add	rsi, 8
	ucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_48
# %bb.49:
	add	r14, 1
.LBB9_50:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_54
# %bb.51:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_52:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [rsi + 8]       # xmm1 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	ucomisd	xmm1, qword ptr [rdx + 8]
	setae	al
	movsd	xmm0, qword ptr [rsi + 16]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 16]
	movsd	xmm0, qword ptr [rsi + 24]      # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 24]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 32]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 32]
	movsd	xmm0, qword ptr [rsi + 40]      # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 40]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 48]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 48]
	movsd	xmm0, qword ptr [rsi + 56]      # xmm0 = mem[0],zero
	setae	r13b
	ucomisd	xmm0, qword ptr [rdx + 56]
	setae	r15b
	movsd	xmm0, qword ptr [rsi + 64]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 64]
	movsd	xmm0, qword ptr [rsi + 72]      # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 72]
	setae	cl
	movsd	xmm0, qword ptr [rsi + 80]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 80]
	movsd	xmm0, qword ptr [rsi + 88]      # xmm0 = mem[0],zero
	setae	r9b
	ucomisd	xmm0, qword ptr [rdx + 88]
	setae	r11b
	movsd	xmm0, qword ptr [rsi + 96]      # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 96]
	movsd	xmm0, qword ptr [rsi + 104]     # xmm0 = mem[0],zero
	setae	r10b
	ucomisd	xmm0, qword ptr [rdx + 104]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movsd	xmm0, qword ptr [rsi + 112]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 112]
	movsd	xmm0, qword ptr [rsi + 120]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 120]
	setae	bl
	movsd	xmm0, qword ptr [rsi + 128]     # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 128]
	movsd	xmm0, qword ptr [rsi + 136]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 136]
	movsd	xmm0, qword ptr [rsi + 144]     # xmm0 = mem[0],zero
	setae	r14b
	ucomisd	xmm0, qword ptr [rdx + 144]
	movsd	xmm0, qword ptr [rsi + 152]     # xmm0 = mem[0],zero
	setae	r12b
	ucomisd	xmm0, qword ptr [rdx + 152]
	movsd	xmm0, qword ptr [rsi + 160]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 160]
	movsd	xmm0, qword ptr [rsi + 168]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 168]
	movsd	xmm0, qword ptr [rsi + 176]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 176]
	movsd	xmm0, qword ptr [rsi + 184]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 184]
	movsd	xmm0, qword ptr [rsi + 192]     # xmm0 = mem[0],zero
	setae	r8b
	ucomisd	xmm0, qword ptr [rdx + 192]
	movsd	xmm0, qword ptr [rsi + 200]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 200]
	movsd	xmm0, qword ptr [rsi + 208]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 208]
	movsd	xmm0, qword ptr [rsi + 216]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 216]
	movsd	xmm0, qword ptr [rsi + 224]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 224]
	movsd	xmm0, qword ptr [rsi + 232]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 232]
	movsd	xmm0, qword ptr [rsi + 240]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 240]
	movsd	xmm0, qword ptr [rsi + 248]     # xmm0 = mem[0],zero
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	add	rsi, 256
	ucomisd	xmm0, qword ptr [rdx + 248]
	setae	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB9_52
# %bb.53:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB9_54:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.55:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_56:                               # =>This Inner Loop Header: Depth=1
	movsd	xmm0, qword ptr [rsi + 8*rcx]   # xmm0 = mem[0],zero
	ucomisd	xmm0, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_56
	jmp	.LBB9_123
.LBB9_2:
	cmp	edi, 2
	je	.LBB9_57
# %bb.3:
	cmp	edi, 3
	jne	.LBB9_123
# %bb.4:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_6:                                # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setge	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_6
# %bb.7:
	add	r14, 1
.LBB9_8:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_12
# %bb.9:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_10:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setge	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setge	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setge	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setge	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setge	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setge	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setge	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setge	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setge	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setge	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setge	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setge	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setge	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setge	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setge	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setge	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setge	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setge	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setge	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setge	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setge	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setge	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setge	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setge	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setge	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setge	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setge	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setge	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setge	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB9_10
# %bb.11:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB9_12:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.13:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_14:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	ebx, byte ptr [rsi + rcx]
	cmp	bl, byte ptr [rdx + rcx]
	setge	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_14
	jmp	.LBB9_123
.LBB9_30:
	cmp	edi, 7
	je	.LBB9_90
# %bb.31:
	cmp	edi, 8
	jne	.LBB9_123
# %bb.32:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_36
# %bb.33:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_34:                               # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_34
# %bb.35:
	add	r14, 1
.LBB9_36:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_40
# %bb.37:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_38:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setae	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setae	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setae	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setae	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setae	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setae	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setae	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setae	r12b
	cmp	rax, qword ptr [rdx + 160]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setae	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setae	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_38
# %bb.39:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_40:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.41:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_42:                               # =>This Inner Loop Header: Depth=1
	mov	rax, qword ptr [rsi + 8*rcx]
	cmp	rax, qword ptr [rdx + 8*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_42
	jmp	.LBB9_123
.LBB9_68:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_72
# %bb.69:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_70:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_70
# %bb.71:
	add	r14, 1
.LBB9_72:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_76
# %bb.73:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_74:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setae	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setae	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setae	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setae	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setae	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setae	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setae	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setae	r12b
	cmp	ax, word ptr [rdx + 40]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setae	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setae	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_74
# %bb.75:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_76:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.77:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_78:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, word ptr [rsi + 2*rcx]
	cmp	ax, word ptr [rdx + 2*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_78
	jmp	.LBB9_123
.LBB9_79:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_83
# %bb.80:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_81:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, word ptr [rsi]
	add	rsi, 2
	cmp	cx, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setge	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_81
# %bb.82:
	add	r14, 1
.LBB9_83:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_87
# %bb.84:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_85:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, word ptr [rsi]
	movzx	ecx, word ptr [rsi + 2]
	cmp	ax, word ptr [rdx]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 2]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 4]
	cmp	ax, word ptr [rdx + 4]
	setge	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 6]
	cmp	ax, word ptr [rdx + 6]
	setge	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 8]
	cmp	ax, word ptr [rdx + 8]
	setge	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 10]
	cmp	ax, word ptr [rdx + 10]
	setge	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 12]
	cmp	ax, word ptr [rdx + 12]
	setge	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 14]
	cmp	ax, word ptr [rdx + 14]
	setge	r13b
	movzx	eax, word ptr [rsi + 16]
	cmp	ax, word ptr [rdx + 16]
	setge	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 18]
	cmp	ax, word ptr [rdx + 18]
	setge	r8b
	movzx	eax, word ptr [rsi + 20]
	cmp	ax, word ptr [rdx + 20]
	setge	r11b
	movzx	eax, word ptr [rsi + 22]
	cmp	ax, word ptr [rdx + 22]
	setge	r15b
	movzx	eax, word ptr [rsi + 24]
	cmp	ax, word ptr [rdx + 24]
	setge	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 26]
	cmp	ax, word ptr [rdx + 26]
	setge	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 28]
	cmp	ax, word ptr [rdx + 28]
	setge	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, word ptr [rsi + 30]
	cmp	ax, word ptr [rdx + 30]
	setge	bl
	movzx	eax, word ptr [rsi + 32]
	movzx	ecx, word ptr [rsi + 34]
	cmp	ax, word ptr [rdx + 32]
	movzx	eax, word ptr [rsi + 36]
	setge	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 34]
	movzx	ecx, word ptr [rsi + 38]
	setge	r10b
	cmp	ax, word ptr [rdx + 36]
	movzx	eax, word ptr [rsi + 40]
	setge	r14b
	cmp	cx, word ptr [rdx + 38]
	movzx	ecx, word ptr [rsi + 42]
	setge	r12b
	cmp	ax, word ptr [rdx + 40]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	cx, word ptr [rdx + 42]
	movzx	eax, word ptr [rsi + 44]
	setge	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 44]
	movzx	eax, word ptr [rsi + 46]
	setge	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 46]
	movzx	eax, word ptr [rsi + 48]
	setge	r9b
	cmp	ax, word ptr [rdx + 48]
	movzx	eax, word ptr [rsi + 50]
	setge	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 50]
	movzx	eax, word ptr [rsi + 52]
	setge	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 52]
	movzx	eax, word ptr [rsi + 54]
	setge	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 54]
	movzx	eax, word ptr [rsi + 56]
	setge	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 56]
	movzx	eax, word ptr [rsi + 58]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 58]
	movzx	eax, word ptr [rsi + 60]
	setge	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	ax, word ptr [rdx + 60]
	movzx	eax, word ptr [rsi + 62]
	setge	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 64
	cmp	ax, word ptr [rdx + 62]
	setge	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 64
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_85
# %bb.86:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_87:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.88:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_89:                               # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	movzx	edi, word ptr [rsi + 2*rcx]
	cmp	di, word ptr [rdx + 2*rcx]
	setge	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_89
	jmp	.LBB9_123
.LBB9_101:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_105
# %bb.102:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_103:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, qword ptr [rsi]
	add	rsi, 8
	cmp	rcx, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setge	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_103
# %bb.104:
	add	r14, 1
.LBB9_105:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_109
# %bb.106:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_107:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	rax, qword ptr [rsi]
	mov	rcx, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdx]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 8]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 16]
	cmp	rax, qword ptr [rdx + 16]
	setge	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 24]
	cmp	rax, qword ptr [rdx + 24]
	setge	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 32]
	cmp	rax, qword ptr [rdx + 32]
	setge	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 40]
	cmp	rax, qword ptr [rdx + 40]
	setge	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 48]
	cmp	rax, qword ptr [rdx + 48]
	setge	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 56]
	cmp	rax, qword ptr [rdx + 56]
	setge	r13b
	mov	rax, qword ptr [rsi + 64]
	cmp	rax, qword ptr [rdx + 64]
	setge	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 72]
	cmp	rax, qword ptr [rdx + 72]
	setge	r8b
	mov	rax, qword ptr [rsi + 80]
	cmp	rax, qword ptr [rdx + 80]
	setge	r11b
	mov	rax, qword ptr [rsi + 88]
	cmp	rax, qword ptr [rdx + 88]
	setge	r15b
	mov	rax, qword ptr [rsi + 96]
	cmp	rax, qword ptr [rdx + 96]
	setge	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 104]
	cmp	rax, qword ptr [rdx + 104]
	setge	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 112]
	cmp	rax, qword ptr [rdx + 112]
	setge	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	rax, qword ptr [rsi + 120]
	cmp	rax, qword ptr [rdx + 120]
	setge	bl
	mov	rax, qword ptr [rsi + 128]
	mov	rcx, qword ptr [rsi + 136]
	cmp	rax, qword ptr [rdx + 128]
	mov	rax, qword ptr [rsi + 144]
	setge	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 136]
	mov	rcx, qword ptr [rsi + 152]
	setge	r10b
	cmp	rax, qword ptr [rdx + 144]
	mov	rax, qword ptr [rsi + 160]
	setge	r14b
	cmp	rcx, qword ptr [rdx + 152]
	mov	rcx, qword ptr [rsi + 168]
	setge	r12b
	cmp	rax, qword ptr [rdx + 160]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	rcx, qword ptr [rdx + 168]
	mov	rax, qword ptr [rsi + 176]
	setge	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 176]
	mov	rax, qword ptr [rsi + 184]
	setge	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 184]
	mov	rax, qword ptr [rsi + 192]
	setge	r9b
	cmp	rax, qword ptr [rdx + 192]
	mov	rax, qword ptr [rsi + 200]
	setge	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 200]
	mov	rax, qword ptr [rsi + 208]
	setge	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 208]
	mov	rax, qword ptr [rsi + 216]
	setge	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 216]
	mov	rax, qword ptr [rsi + 224]
	setge	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 224]
	mov	rax, qword ptr [rsi + 232]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 232]
	mov	rax, qword ptr [rsi + 240]
	setge	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	rax, qword ptr [rdx + 240]
	mov	rax, qword ptr [rsi + 248]
	setge	byte ptr [rsp + 17]             # 1-byte Folded Spill
	add	rsi, 256
	cmp	rax, qword ptr [rdx + 248]
	setge	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 256
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_107
# %bb.108:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_109:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.110:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_111:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	rdi, qword ptr [rsi + 8*rcx]
	cmp	rdi, qword ptr [rdx + 8*rcx]
	setge	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_111
	jmp	.LBB9_123
.LBB9_112:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_116
# %bb.113:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_114:                              # =>This Inner Loop Header: Depth=1
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	add	rsi, 4
	ucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_114
# %bb.115:
	add	r14, 1
.LBB9_116:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_120
# %bb.117:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	mov	qword ptr [rsp + 40], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_118:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	movss	xmm1, dword ptr [rsi + 4]       # xmm1 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	ucomiss	xmm1, dword ptr [rdx + 4]
	setae	al
	movss	xmm0, dword ptr [rsi + 8]       # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 8]
	movss	xmm0, dword ptr [rsi + 12]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 12]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 16]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 16]
	movss	xmm0, dword ptr [rsi + 20]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 20]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 24]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 24]
	movss	xmm0, dword ptr [rsi + 28]      # xmm0 = mem[0],zero,zero,zero
	setae	r13b
	ucomiss	xmm0, dword ptr [rdx + 28]
	setae	r15b
	movss	xmm0, dword ptr [rsi + 32]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 32]
	movss	xmm0, dword ptr [rsi + 36]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 36]
	setae	cl
	movss	xmm0, dword ptr [rsi + 40]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 40]
	movss	xmm0, dword ptr [rsi + 44]      # xmm0 = mem[0],zero,zero,zero
	setae	r9b
	ucomiss	xmm0, dword ptr [rdx + 44]
	setae	r11b
	movss	xmm0, dword ptr [rsi + 48]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 48]
	movss	xmm0, dword ptr [rsi + 52]      # xmm0 = mem[0],zero,zero,zero
	setae	r10b
	ucomiss	xmm0, dword ptr [rdx + 52]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movss	xmm0, dword ptr [rsi + 56]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 56]
	movss	xmm0, dword ptr [rsi + 60]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 60]
	setae	bl
	movss	xmm0, dword ptr [rsi + 64]      # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 64]
	movss	xmm0, dword ptr [rsi + 68]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 68]
	movss	xmm0, dword ptr [rsi + 72]      # xmm0 = mem[0],zero,zero,zero
	setae	r14b
	ucomiss	xmm0, dword ptr [rdx + 72]
	movss	xmm0, dword ptr [rsi + 76]      # xmm0 = mem[0],zero,zero,zero
	setae	r12b
	ucomiss	xmm0, dword ptr [rdx + 76]
	movss	xmm0, dword ptr [rsi + 80]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 80]
	movss	xmm0, dword ptr [rsi + 84]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 84]
	movss	xmm0, dword ptr [rsi + 88]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 88]
	movss	xmm0, dword ptr [rsi + 92]      # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 92]
	movss	xmm0, dword ptr [rsi + 96]      # xmm0 = mem[0],zero,zero,zero
	setae	r8b
	ucomiss	xmm0, dword ptr [rdx + 96]
	movss	xmm0, dword ptr [rsi + 100]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 100]
	movss	xmm0, dword ptr [rsi + 104]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 104]
	movss	xmm0, dword ptr [rsi + 108]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 108]
	movss	xmm0, dword ptr [rsi + 112]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 112]
	movss	xmm0, dword ptr [rsi + 116]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 116]
	movss	xmm0, dword ptr [rsi + 120]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rdx + 120]
	movss	xmm0, dword ptr [rsi + 124]     # xmm0 = mem[0],zero,zero,zero
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	sub	rsi, -128
	ucomiss	xmm0, dword ptr [rdx + 124]
	setae	dil
	add	al, al
	add	al, byte ptr [rsp + 4]          # 1-byte Folded Reload
	shl	r13b, 6
	shl	r15b, 7
	or	r15b, r13b
	movzx	r13d, byte ptr [rsp + 5]        # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, al
	mov	eax, r13d
	add	cl, cl
	add	cl, byte ptr [rsp + 8]          # 1-byte Folded Reload
	movzx	r13d, byte ptr [rsp + 22]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, al
	shl	r9b, 2
	or	r9b, cl
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, r13b
	mov	r13d, ecx
	shl	r11b, 3
	or	r11b, r9b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r13b
	shl	r10b, 4
	or	r10b, r11b
	movzx	eax, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r10b
	movzx	r9d, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	r9b, 6
	shl	bl, 7
	or	bl, r9b
	or	r15b, cl
	or	bl, al
	add	r14b, r14b
	add	r14b, byte ptr [rsp + 14]       # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r14b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r12b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	mov	byte ptr [r14 + 1], bl
	or	r8b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 20]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	movzx	ecx, byte ptr [rsp + 19]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, al
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 6
	shl	dil, 7
	or	dil, al
	or	dil, cl
	mov	byte ptr [r14 + 2], r8b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 40], -1        # 8-byte Folded Spill
	jne	.LBB9_118
# %bb.119:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
.LBB9_120:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.121:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_122:                              # =>This Inner Loop Header: Depth=1
	movss	xmm0, dword ptr [rsi + 4*rcx]   # xmm0 = mem[0],zero,zero,zero
	ucomiss	xmm0, dword ptr [rdx + 4*rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_122
	jmp	.LBB9_123
.LBB9_57:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_61
# %bb.58:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_59:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [rsi]
	add	rsi, 1
	cmp	cl, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	mov	r10d, 0
	adc	r10b, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	r10b, r8b
	lea	r9d, [8*rbx]
	mov	ecx, eax
	sub	ecx, r9d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, r10b
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_59
# %bb.60:
	add	r14, 1
.LBB9_61:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_65
# %bb.62:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	mov	qword ptr [rsp + 32], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_63:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	movzx	eax, byte ptr [rsi]
	movzx	ecx, byte ptr [rsi + 1]
	cmp	al, byte ptr [rdx]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	cl, byte ptr [rdx + 1]
	setae	cl
	movzx	eax, byte ptr [rsi + 2]
	cmp	al, byte ptr [rdx + 2]
	setae	byte ptr [rsp + 20]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 3]
	cmp	al, byte ptr [rdx + 3]
	setae	byte ptr [rsp + 21]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 4]
	cmp	al, byte ptr [rdx + 4]
	setae	byte ptr [rsp + 22]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 5]
	cmp	al, byte ptr [rdx + 5]
	setae	byte ptr [rsp + 23]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 6]
	cmp	al, byte ptr [rdx + 6]
	setae	byte ptr [rsp + 4]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 7]
	cmp	al, byte ptr [rdx + 7]
	setae	r15b
	movzx	eax, byte ptr [rsi + 8]
	cmp	al, byte ptr [rdx + 8]
	setae	byte ptr [rsp + 7]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 9]
	cmp	al, byte ptr [rdx + 9]
	setae	dil
	movzx	eax, byte ptr [rsi + 10]
	cmp	al, byte ptr [rdx + 10]
	setae	r10b
	movzx	eax, byte ptr [rsi + 11]
	cmp	al, byte ptr [rdx + 11]
	setae	r11b
	movzx	eax, byte ptr [rsi + 12]
	cmp	al, byte ptr [rdx + 12]
	setae	r14b
	movzx	eax, byte ptr [rsi + 13]
	cmp	al, byte ptr [rdx + 13]
	setae	byte ptr [rsp + 5]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 14]
	cmp	al, byte ptr [rdx + 14]
	setae	byte ptr [rsp + 6]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 15]
	cmp	al, byte ptr [rdx + 15]
	setae	bl
	movzx	eax, byte ptr [rsi + 16]
	cmp	al, byte ptr [rdx + 16]
	setae	byte ptr [rsp + 13]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 17]
	cmp	al, byte ptr [rdx + 17]
	setae	r12b
	movzx	eax, byte ptr [rsi + 18]
	cmp	al, byte ptr [rdx + 18]
	setae	r13b
	movzx	eax, byte ptr [rsi + 19]
	cmp	al, byte ptr [rdx + 19]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 20]
	cmp	al, byte ptr [rdx + 20]
	setae	byte ptr [rsp + 9]              # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 21]
	cmp	al, byte ptr [rdx + 21]
	setae	byte ptr [rsp + 10]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 22]
	cmp	al, byte ptr [rdx + 22]
	setae	byte ptr [rsp + 11]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 23]
	cmp	al, byte ptr [rdx + 23]
	setae	r9b
	movzx	eax, byte ptr [rsi + 24]
	cmp	al, byte ptr [rdx + 24]
	setae	byte ptr [rsp + 19]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 25]
	cmp	al, byte ptr [rdx + 25]
	setae	byte ptr [rsp + 12]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 26]
	cmp	al, byte ptr [rdx + 26]
	setae	byte ptr [rsp + 14]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 27]
	cmp	al, byte ptr [rdx + 27]
	setae	byte ptr [rsp + 15]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 28]
	cmp	al, byte ptr [rdx + 28]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 29]
	cmp	al, byte ptr [rdx + 29]
	setae	byte ptr [rsp + 17]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 30]
	cmp	al, byte ptr [rdx + 30]
	setae	byte ptr [rsp + 18]             # 1-byte Folded Spill
	movzx	eax, byte ptr [rsi + 31]
	add	rsi, 32
	cmp	al, byte ptr [rdx + 31]
	setae	r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	eax, ecx
	movzx	ecx, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	cl, 6
	shl	r15b, 7
	or	r15b, cl
	movzx	ecx, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	mov	eax, ecx
	add	dil, dil
	add	dil, byte ptr [rsp + 7]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r10b, 2
	or	r10b, dil
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	edi, ecx
	shl	r11b, 3
	or	r11b, r10b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dil
	shl	r14b, 4
	or	r14b, r11b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r14b
	movzx	edi, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	dil, 6
	shl	bl, 7
	or	bl, dil
	or	r15b, cl
	or	bl, al
	add	r12b, r12b
	add	r12b, byte ptr [rsp + 13]       # 1-byte Folded Reload
	shl	r13b, 2
	or	r13b, r12b
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 3
	or	al, r13b
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 9]         # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 10]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r15b
	movzx	ecx, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 12]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], r8b
	add	rdx, 32
	add	r14, 4
	add	qword ptr [rsp + 32], -1        # 8-byte Folded Spill
	jne	.LBB9_63
# %bb.64:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
.LBB9_65:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.66:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_67:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [rsi + rcx]
	cmp	al, byte ptr [rdx + rcx]
	lea	r8, [rcx + 1]
	mov	edi, 0
	adc	dil, -1
	mov	rbx, rcx
	shr	rbx, 3
	movzx	r9d, byte ptr [r14 + rbx]
	xor	dil, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, dil
	xor	al, r9b
	mov	byte ptr [r14 + rbx], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_67
	jmp	.LBB9_123
.LBB9_90:
	lea	r15, [r11 + 31]
	test	r11, r11
	cmovns	r15, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB9_94
# %bb.91:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB9_92:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [rsi]
	add	rsi, 4
	cmp	ecx, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setge	r10b
	neg	r10b
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r8d, byte ptr [r14 + rdi]
	xor	r10b, r8b
	lea	r9d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r9d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, r10b
	xor	bl, r8b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB9_92
# %bb.93:
	add	r14, 1
.LBB9_94:
	sar	r15, 5
	cmp	r11, 32
	jl	.LBB9_98
# %bb.95:
	mov	qword ptr [rsp + 24], r11       # 8-byte Spill
	mov	qword ptr [rsp + 64], r15       # 8-byte Spill
	mov	qword ptr [rsp + 56], r15       # 8-byte Spill
	.p2align	4, 0x90
.LBB9_96:                               # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	mov	eax, dword ptr [rsi]
	mov	ecx, dword ptr [rsi + 4]
	cmp	eax, dword ptr [rdx]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 4]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 8]
	cmp	eax, dword ptr [rdx + 8]
	setge	byte ptr [rsp + 20]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 12]
	cmp	eax, dword ptr [rdx + 12]
	setge	byte ptr [rsp + 21]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 16]
	cmp	eax, dword ptr [rdx + 16]
	setge	byte ptr [rsp + 22]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 20]
	cmp	eax, dword ptr [rdx + 20]
	setge	byte ptr [rsp + 23]             # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 24]
	cmp	eax, dword ptr [rdx + 24]
	setge	byte ptr [rsp + 4]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 28]
	cmp	eax, dword ptr [rdx + 28]
	setge	r13b
	mov	eax, dword ptr [rsi + 32]
	cmp	eax, dword ptr [rdx + 32]
	setge	byte ptr [rsp + 9]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 36]
	cmp	eax, dword ptr [rdx + 36]
	setge	r8b
	mov	eax, dword ptr [rsi + 40]
	cmp	eax, dword ptr [rdx + 40]
	setge	r11b
	mov	eax, dword ptr [rsi + 44]
	cmp	eax, dword ptr [rdx + 44]
	setge	r15b
	mov	eax, dword ptr [rsi + 48]
	cmp	eax, dword ptr [rdx + 48]
	setge	byte ptr [rsp + 5]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 52]
	cmp	eax, dword ptr [rdx + 52]
	setge	byte ptr [rsp + 6]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 56]
	cmp	eax, dword ptr [rdx + 56]
	setge	byte ptr [rsp + 7]              # 1-byte Folded Spill
	mov	eax, dword ptr [rsi + 60]
	cmp	eax, dword ptr [rdx + 60]
	setge	bl
	mov	eax, dword ptr [rsi + 64]
	mov	ecx, dword ptr [rsi + 68]
	cmp	eax, dword ptr [rdx + 64]
	mov	eax, dword ptr [rsi + 72]
	setge	byte ptr [rsp + 10]             # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 68]
	mov	ecx, dword ptr [rsi + 76]
	setge	r10b
	cmp	eax, dword ptr [rdx + 72]
	mov	eax, dword ptr [rsi + 80]
	setge	r14b
	cmp	ecx, dword ptr [rdx + 76]
	mov	ecx, dword ptr [rsi + 84]
	setge	r12b
	cmp	eax, dword ptr [rdx + 80]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	ecx, dword ptr [rdx + 84]
	mov	eax, dword ptr [rsi + 88]
	setge	byte ptr [rsp + 11]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 88]
	mov	eax, dword ptr [rsi + 92]
	setge	byte ptr [rsp + 12]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 92]
	mov	eax, dword ptr [rsi + 96]
	setge	r9b
	cmp	eax, dword ptr [rdx + 96]
	mov	eax, dword ptr [rsi + 100]
	setge	byte ptr [rsp + 19]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 100]
	mov	eax, dword ptr [rsi + 104]
	setge	byte ptr [rsp + 13]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 104]
	mov	eax, dword ptr [rsi + 108]
	setge	byte ptr [rsp + 14]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 108]
	mov	eax, dword ptr [rsi + 112]
	setge	byte ptr [rsp + 15]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 112]
	mov	eax, dword ptr [rsi + 116]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 116]
	mov	eax, dword ptr [rsi + 120]
	setge	byte ptr [rsp + 18]             # 1-byte Folded Spill
	cmp	eax, dword ptr [rdx + 120]
	mov	eax, dword ptr [rsi + 124]
	setge	byte ptr [rsp + 17]             # 1-byte Folded Spill
	sub	rsi, -128
	cmp	eax, dword ptr [rdx + 124]
	setge	dil
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 40]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 4]         # 1-byte Folded Reload
	shl	al, 6
	shl	r13b, 7
	or	r13b, al
	movzx	eax, byte ptr [rsp + 20]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 9]         # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 21]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, al
	mov	eax, ecx
	shl	r11b, 2
	or	r11b, r8b
	movzx	ecx, byte ptr [rsp + 22]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r15b, 3
	or	r15b, r11b
	movzx	ecx, byte ptr [rsp + 23]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	movzx	eax, byte ptr [rsp + 5]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r15b
	mov	r8d, eax
	movzx	eax, byte ptr [rsp + 6]         # 1-byte Folded Reload
	shl	al, 5
	or	al, r8b
	movzx	r8d, byte ptr [rsp + 7]         # 1-byte Folded Reload
	shl	r8b, 6
	shl	bl, 7
	or	bl, r8b
	or	r13b, cl
	or	bl, al
	add	r10b, r10b
	add	r10b, byte ptr [rsp + 10]       # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r10b
	shl	r12b, 3
	or	r12b, r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	mov	ecx, eax
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	movzx	eax, byte ptr [rsp + 11]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	byte ptr [r14], r13b
	movzx	ecx, byte ptr [rsp + 12]        # 1-byte Folded Reload
	shl	cl, 6
	shl	r9b, 7
	or	r9b, cl
	mov	byte ptr [r14 + 1], bl
	or	r9b, al
	movzx	eax, byte ptr [rsp + 13]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 19]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 14]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 15]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 18]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	movzx	ecx, byte ptr [rsp + 17]        # 1-byte Folded Reload
	shl	cl, 6
	shl	dil, 7
	or	dil, cl
	or	dil, al
	mov	byte ptr [r14 + 2], r9b
	mov	byte ptr [r14 + 3], dil
	add	rdx, 128
	add	r14, 4
	add	qword ptr [rsp + 56], -1        # 8-byte Folded Spill
	jne	.LBB9_96
# %bb.97:
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 64]       # 8-byte Reload
.LBB9_98:
	shl	r15, 5
	cmp	r15, r11
	jge	.LBB9_123
# %bb.99:
	sub	r11, r15
	xor	ecx, ecx
	.p2align	4, 0x90
.LBB9_100:                              # =>This Inner Loop Header: Depth=1
	lea	r8, [rcx + 1]
	mov	edi, dword ptr [rsi + 4*rcx]
	cmp	edi, dword ptr [rdx + 4*rcx]
	setge	bl
	neg	bl
	mov	rdi, rcx
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	cl, 7
	mov	al, 1
                                        # kill: def $cl killed $cl killed $rcx
	shl	al, cl
	and	al, bl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	mov	rcx, r8
	cmp	r11, r8
	jne	.LBB9_100
.LBB9_123:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.Lfunc_end9:
	.size	comparison_greater_equal_arr_arr_sse4, .Lfunc_end9-comparison_greater_equal_arr_arr_sse4
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function comparison_greater_equal_arr_scalar_sse4
.LCPI10_0:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_1:
	.zero	16,252
.LCPI10_2:
	.zero	16,248
.LCPI10_3:
	.zero	16,240
.LCPI10_4:
	.zero	16,224
.LCPI10_5:
	.zero	16,192
.LCPI10_6:
	.zero	16,128
.LCPI10_7:
	.byte	0                               # 0x0
	.byte	8                               # 0x8
	.byte	1                               # 0x1
	.byte	9                               # 0x9
	.byte	2                               # 0x2
	.byte	10                              # 0xa
	.byte	3                               # 0x3
	.byte	11                              # 0xb
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
.LCPI10_8:
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_9:
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_10:
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_11:
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_12:
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_13:
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_14:
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_15:
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI10_16:
	.zero	16,2
.LCPI10_17:
	.zero	16,4
.LCPI10_18:
	.zero	16,8
.LCPI10_19:
	.zero	16,16
.LCPI10_20:
	.zero	16,32
.LCPI10_21:
	.zero	16,64
.LCPI10_22:
	.zero	16,255
	.text
	.globl	comparison_greater_equal_arr_scalar_sse4
	.p2align	4, 0x90
	.type	comparison_greater_equal_arr_scalar_sse4,@function
comparison_greater_equal_arr_scalar_sse4: # @comparison_greater_equal_arr_scalar_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -16
	sub	rsp, 496
                                        # kill: def $r9d killed $r9d def $r9
	mov	r10, r8
	mov	r14, rcx
	cmp	edi, 6
	jg	.LBB10_16
# %bb.1:
	cmp	edi, 3
	jle	.LBB10_31
# %bb.2:
	cmp	edi, 4
	je	.LBB10_81
# %bb.3:
	cmp	edi, 5
	je	.LBB10_92
# %bb.4:
	cmp	edi, 6
	jne	.LBB10_182
# %bb.5:
	mov	r13d, dword ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_9
# %bb.6:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_7:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	mov	edx, 0
	adc	dl, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_7
# %bb.8:
	add	r14, 1
.LBB10_9:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB10_13
# %bb.10:
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 368], r11      # 8-byte Spill
	mov	qword ptr [rsp + 320], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_11:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setae	dil
	cmp	dword ptr [rsi + 8], r13d
	setae	r14b
	cmp	dword ptr [rsi + 12], r13d
	setae	byte ptr [rsp + 336]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setae	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setae	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setae	al
	cmp	dword ptr [rsi + 28], r13d
	setae	bl
	cmp	dword ptr [rsi + 32], r13d
	setae	byte ptr [rsp + 304]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setae	dl
	cmp	dword ptr [rsi + 40], r13d
	setae	r9b
	cmp	dword ptr [rsi + 44], r13d
	setae	r10b
	cmp	dword ptr [rsi + 48], r13d
	setae	r11b
	cmp	dword ptr [rsi + 52], r13d
	setae	r12b
	cmp	dword ptr [rsi + 56], r13d
	setae	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setae	cl
	cmp	dword ptr [rsi + 64], r13d
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setae	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setae	byte ptr [rsp + 240]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setae	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setae	r15b
	cmp	dword ptr [rsi + 96], r13d
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setae	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 304]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 272]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 128
	add	r14, 4
	add	qword ptr [rsp + 320], -1       # 8-byte Folded Spill
	jne	.LBB10_11
# %bb.12:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r11, qword ptr [rsp + 368]      # 8-byte Reload
.LBB10_13:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB10_182
# %bb.14:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB10_162
# %bb.15:
	xor	r11d, r11d
	jmp	.LBB10_164
.LBB10_16:
	cmp	edi, 8
	jle	.LBB10_45
# %bb.17:
	cmp	edi, 9
	je	.LBB10_104
# %bb.18:
	cmp	edi, 11
	je	.LBB10_115
# %bb.19:
	cmp	edi, 12
	jne	.LBB10_182
# %bb.20:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB10_24
# %bb.21:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_22:                              # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rsi]
	setbe	dl
	add	rsi, 8
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_22
# %bb.23:
	add	r14, 1
.LBB10_24:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB10_28
# %bb.25:
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 320], r11      # 8-byte Spill
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_26:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	ucomisd	xmm0, qword ptr [rsi]
	setbe	byte ptr [rsp + 336]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 8]
	setbe	r9b
	ucomisd	xmm0, qword ptr [rsi + 16]
	setbe	r14b
	ucomisd	xmm0, qword ptr [rsi + 24]
	setbe	r13b
	ucomisd	xmm0, qword ptr [rsi + 32]
	setbe	byte ptr [rsp + 224]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 40]
	setbe	byte ptr [rsp + 208]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 48]
	setbe	al
	ucomisd	xmm0, qword ptr [rsi + 56]
	setbe	bl
	ucomisd	xmm0, qword ptr [rsi + 64]
	setbe	byte ptr [rsp + 256]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 72]
	setbe	dl
	ucomisd	xmm0, qword ptr [rsi + 80]
	setbe	dil
	ucomisd	xmm0, qword ptr [rsi + 88]
	setbe	r10b
	ucomisd	xmm0, qword ptr [rsi + 96]
	setbe	r11b
	ucomisd	xmm0, qword ptr [rsi + 104]
	setbe	r12b
	ucomisd	xmm0, qword ptr [rsi + 112]
	setbe	byte ptr [rsp + 272]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 120]
	setbe	cl
	ucomisd	xmm0, qword ptr [rsi + 128]
	setbe	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 136]
	setbe	byte ptr [rsp + 304]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 144]
	setbe	byte ptr [rsp + 288]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 152]
	setbe	byte ptr [rsp + 240]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 160]
	setbe	byte ptr [rsp + 192]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 168]
	setbe	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 176]
	setbe	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 184]
	setbe	r15b
	ucomisd	xmm0, qword ptr [rsi + 192]
	setbe	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 200]
	setbe	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 208]
	setbe	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 216]
	setbe	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 224]
	setbe	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 232]
	setbe	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 240]
	setbe	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rsi + 248]
	setbe	r8b
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r9b
	add	dl, dl
	add	dl, byte ptr [rsp + 256]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	dil, 2
	or	dil, dl
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r9d, edx
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r9b
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 272]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	movzx	eax, byte ptr [rsp + 304]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB10_26
# %bb.27:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
.LBB10_28:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB10_182
# %bb.29:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB10_166
# %bb.30:
	xor	r11d, r11d
	jmp	.LBB10_168
.LBB10_31:
	cmp	edi, 2
	je	.LBB10_58
# %bb.32:
	cmp	edi, 3
	jne	.LBB10_182
# %bb.33:
	mov	r11b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_37
# %bb.34:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_35:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r11b
	lea	rsi, [rsi + 1]
	setge	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_35
# %bb.36:
	add	r14, 1
.LBB10_37:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_127
# %bb.38:
	cmp	r15, 16
	mov	byte ptr [rsp + 8], r11b        # 1-byte Spill
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 432], r15      # 8-byte Spill
	jb	.LBB10_41
# %bb.39:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB10_191
# %bb.40:
	lea	rax, [r14 + 4*r15]
	cmp	rsi, rax
	jae	.LBB10_191
.LBB10_41:
	xor	eax, eax
	mov	qword ptr [rsp + 160], rax      # 8-byte Spill
	mov	qword ptr [rsp + 112], r14      # 8-byte Spill
.LBB10_42:
	mov	r14, r15
	sub	r14, qword ptr [rsp + 160]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 368], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_43:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	byte ptr [rsi], r11b
	setge	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [rsi + 1], r11b
	setge	sil
	cmp	byte ptr [rcx + 2], r11b
	setge	r15b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 3], al
	setge	r12b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 4], al
	setge	byte ptr [rsp + 336]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 5], al
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 6], al
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 7], al
	setge	r9b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 8], al
	setge	byte ptr [rsp + 304]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 9], al
	setge	dl
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 10], al
	setge	dil
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 11], al
	setge	r10b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 12], al
	setge	r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 13], al
	setge	r13b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 14], al
	setge	byte ptr [rsp + 256]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 15], al
	setge	r8b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 16], bl
	setge	byte ptr [rsp + 272]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 17], bl
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 18], bl
	setge	byte ptr [rsp + 224]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 19], bl
	setge	byte ptr [rsp + 240]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 20], bl
	setge	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 21], bl
	setge	byte ptr [rsp + 208]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 22], bl
	setge	byte ptr [rsp + 192]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 23], bl
	setge	r11b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 24], bl
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 25], bl
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 26], bl
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 27], bl
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 28], bl
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 29], bl
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 30], bl
	setge	byte ptr [rsp + 352]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 31], bl
	setge	bl
	add	sil, sil
	add	sil, byte ptr [rsp + 320]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	r9b, 7
	or	r9b, al
	shl	r15b, 2
	or	r15b, sil
	add	dl, dl
	add	dl, byte ptr [rsp + 304]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	movzx	r15d, byte ptr [rsp + 8]        # 1-byte Folded Reload
	shl	dil, 2
	or	dil, dl
	movzx	eax, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, al
	shl	r14b, 4
	or	r14b, r10b
	shl	r13b, 5
	or	r13b, r14b
	movzx	esi, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r9b, dl
	or	r8b, r13b
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	esi, edx
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	mov	byte ptr [rdx], r9b
	movzx	edi, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dil, 6
	shl	r11b, 7
	or	r11b, dil
	mov	byte ptr [rdx + 1], r8b
	or	r11b, sil
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 128]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	movzx	esi, byte ptr [rsp + 352]       # 1-byte Folded Reload
	shl	sil, 6
	shl	bl, 7
	or	bl, sil
	or	bl, al
	mov	byte ptr [rdx + 2], r11b
	mov	r11d, r15d
	mov	byte ptr [rdx + 3], bl
	lea	rsi, [rcx + 32]
	add	rdx, 4
	mov	qword ptr [rsp + 112], rdx      # 8-byte Spill
	add	qword ptr [rsp + 368], -1       # 8-byte Folded Spill
	jne	.LBB10_43
# %bb.44:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 432]      # 8-byte Reload
	jmp	.LBB10_128
.LBB10_45:
	cmp	edi, 7
	je	.LBB10_70
# %bb.46:
	cmp	edi, 8
	jne	.LBB10_182
# %bb.47:
	mov	r13, qword ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_51
# %bb.48:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_49:                              # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	mov	edx, 0
	adc	dl, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_49
# %bb.50:
	add	r14, 1
.LBB10_51:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB10_55
# %bb.52:
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 368], r11      # 8-byte Spill
	mov	qword ptr [rsp + 320], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_53:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setae	dil
	cmp	qword ptr [rsi + 16], r13
	setae	r14b
	cmp	qword ptr [rsi + 24], r13
	setae	byte ptr [rsp + 336]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setae	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setae	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setae	al
	cmp	qword ptr [rsi + 56], r13
	setae	bl
	cmp	qword ptr [rsi + 64], r13
	setae	byte ptr [rsp + 304]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setae	dl
	cmp	qword ptr [rsi + 80], r13
	setae	r9b
	cmp	qword ptr [rsi + 88], r13
	setae	r10b
	cmp	qword ptr [rsi + 96], r13
	setae	r11b
	cmp	qword ptr [rsi + 104], r13
	setae	r12b
	cmp	qword ptr [rsi + 112], r13
	setae	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setae	cl
	cmp	qword ptr [rsi + 128], r13
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setae	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setae	byte ptr [rsp + 240]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setae	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setae	r15b
	cmp	qword ptr [rsi + 192], r13
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setae	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 304]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 272]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 320], -1       # 8-byte Folded Spill
	jne	.LBB10_53
# %bb.54:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r11, qword ptr [rsp + 368]      # 8-byte Reload
.LBB10_55:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB10_182
# %bb.56:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB10_143
# %bb.57:
	xor	r11d, r11d
	jmp	.LBB10_145
.LBB10_58:
	mov	r11b, byte ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_62
# %bb.59:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_60:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [rsi], r11b
	lea	rsi, [rsi + 1]
	mov	edx, 0
	adc	dl, -1
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_60
# %bb.61:
	add	r14, 1
.LBB10_62:
	sar	r15, 5
	cmp	r10, 32
	jl	.LBB10_131
# %bb.63:
	cmp	r15, 16
	mov	byte ptr [rsp + 8], r11b        # 1-byte Spill
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 464], r15      # 8-byte Spill
	jb	.LBB10_66
# %bb.64:
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB10_194
# %bb.65:
	lea	rax, [r14 + 4*r15]
	cmp	rsi, rax
	jae	.LBB10_194
.LBB10_66:
	xor	eax, eax
	mov	qword ptr [rsp + 416], rax      # 8-byte Spill
	mov	qword ptr [rsp + 208], r14      # 8-byte Spill
.LBB10_67:
	mov	r14, r15
	sub	r14, qword ptr [rsp + 416]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 368], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_68:                              # =>This Inner Loop Header: Depth=1
	mov	rcx, rsi
	cmp	byte ptr [rsi], r11b
	setae	byte ptr [rsp + 320]            # 1-byte Folded Spill
	cmp	byte ptr [rsi + 1], r11b
	setae	sil
	cmp	byte ptr [rcx + 2], r11b
	setae	r15b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 3], al
	setae	r12b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 4], al
	setae	byte ptr [rsp + 336]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 5], al
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 6], al
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 7], al
	setae	r9b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 8], al
	setae	byte ptr [rsp + 304]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 9], al
	setae	dl
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 10], al
	setae	dil
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 11], al
	setae	r10b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 12], al
	setae	r14b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 13], al
	setae	r13b
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 14], al
	setae	byte ptr [rsp + 256]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 15], al
	setae	r8b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 16], bl
	setae	byte ptr [rsp + 272]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 17], bl
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 18], bl
	setae	byte ptr [rsp + 224]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 19], bl
	setae	byte ptr [rsp + 240]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 20], bl
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 21], bl
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 22], bl
	setae	byte ptr [rsp + 192]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 23], bl
	setae	r11b
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 24], bl
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 25], bl
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 26], bl
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 27], bl
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 28], bl
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 29], bl
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 30], bl
	setae	byte ptr [rsp + 352]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	cmp	byte ptr [rcx + 31], bl
	setae	bl
	add	sil, sil
	add	sil, byte ptr [rsp + 320]       # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	r9b, 7
	or	r9b, al
	shl	r15b, 2
	or	r15b, sil
	add	dl, dl
	add	dl, byte ptr [rsp + 304]        # 1-byte Folded Reload
	shl	r12b, 3
	or	r12b, r15b
	movzx	r15d, byte ptr [rsp + 8]        # 1-byte Folded Reload
	shl	dil, 2
	or	dil, dl
	movzx	eax, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 4
	or	al, r12b
	shl	r10b, 3
	or	r10b, dil
	movzx	edx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, al
	shl	r14b, 4
	or	r14b, r10b
	shl	r13b, 5
	or	r13b, r14b
	movzx	esi, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r8b, 7
	or	r8b, sil
	or	r9b, dl
	or	r8b, r13b
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 272]        # 1-byte Folded Reload
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	esi, edx
	mov	rdx, qword ptr [rsp + 208]      # 8-byte Reload
	mov	byte ptr [rdx], r9b
	movzx	edi, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dil, 6
	shl	r11b, 7
	or	r11b, dil
	mov	byte ptr [rdx + 1], r8b
	or	r11b, sil
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 112]        # 1-byte Folded Reload
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 2
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 3
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, sil
	mov	esi, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, sil
	movzx	esi, byte ptr [rsp + 352]       # 1-byte Folded Reload
	shl	sil, 6
	shl	bl, 7
	or	bl, sil
	or	bl, al
	mov	byte ptr [rdx + 2], r11b
	mov	r11d, r15d
	mov	byte ptr [rdx + 3], bl
	lea	rsi, [rcx + 32]
	add	rdx, 4
	mov	qword ptr [rsp + 208], rdx      # 8-byte Spill
	add	qword ptr [rsp + 368], -1       # 8-byte Folded Spill
	jne	.LBB10_68
# %bb.69:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 464]      # 8-byte Reload
	jmp	.LBB10_132
.LBB10_70:
	mov	r13d, dword ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_74
# %bb.71:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_72:                              # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	lea	rsi, [rsi + 4]
	setge	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_72
# %bb.73:
	add	r14, 1
.LBB10_74:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB10_78
# %bb.75:
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 368], r11      # 8-byte Spill
	mov	qword ptr [rsp + 320], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_76:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	cmp	dword ptr [rsi], r13d
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 4], r13d
	setge	dil
	cmp	dword ptr [rsi + 8], r13d
	setge	r14b
	cmp	dword ptr [rsi + 12], r13d
	setge	byte ptr [rsp + 336]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 16], r13d
	setge	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 20], r13d
	setge	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 24], r13d
	setge	al
	cmp	dword ptr [rsi + 28], r13d
	setge	bl
	cmp	dword ptr [rsi + 32], r13d
	setge	byte ptr [rsp + 304]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 36], r13d
	setge	dl
	cmp	dword ptr [rsi + 40], r13d
	setge	r9b
	cmp	dword ptr [rsi + 44], r13d
	setge	r10b
	cmp	dword ptr [rsi + 48], r13d
	setge	r11b
	cmp	dword ptr [rsi + 52], r13d
	setge	r12b
	cmp	dword ptr [rsi + 56], r13d
	setge	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 60], r13d
	setge	cl
	cmp	dword ptr [rsi + 64], r13d
	setge	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 68], r13d
	setge	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 72], r13d
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 76], r13d
	setge	byte ptr [rsp + 240]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 80], r13d
	setge	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 84], r13d
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 88], r13d
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 92], r13d
	setge	r15b
	cmp	dword ptr [rsi + 96], r13d
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 100], r13d
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	dword ptr [rsi + 104], r13d
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 108], r13d
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 112], r13d
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 116], r13d
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	dword ptr [rsi + 120], r13d
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	dword ptr [rsi + 124], r13d
	setge	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 304]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 272]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 128
	add	r14, 4
	add	qword ptr [rsp + 320], -1       # 8-byte Folded Spill
	jne	.LBB10_76
# %bb.77:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r11, qword ptr [rsp + 368]      # 8-byte Reload
.LBB10_78:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB10_182
# %bb.79:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB10_147
# %bb.80:
	xor	r11d, r11d
	jmp	.LBB10_149
.LBB10_81:
	movzx	r13d, word ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_85
# %bb.82:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_83:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	lea	rsi, [rsi + 2]
	mov	edx, 0
	adc	dl, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_83
# %bb.84:
	add	r14, 1
.LBB10_85:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB10_89
# %bb.86:
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 368], r11      # 8-byte Spill
	mov	qword ptr [rsp + 320], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_87:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	cmp	word ptr [rsi], r13w
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 2], r13w
	setae	dil
	cmp	word ptr [rsi + 4], r13w
	setae	r14b
	cmp	word ptr [rsi + 6], r13w
	setae	byte ptr [rsp + 336]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 8], r13w
	setae	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 10], r13w
	setae	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 12], r13w
	setae	al
	cmp	word ptr [rsi + 14], r13w
	setae	bl
	cmp	word ptr [rsi + 16], r13w
	setae	byte ptr [rsp + 304]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 18], r13w
	setae	dl
	cmp	word ptr [rsi + 20], r13w
	setae	r9b
	cmp	word ptr [rsi + 22], r13w
	setae	r10b
	cmp	word ptr [rsi + 24], r13w
	setae	r11b
	cmp	word ptr [rsi + 26], r13w
	setae	r12b
	cmp	word ptr [rsi + 28], r13w
	setae	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 30], r13w
	setae	cl
	cmp	word ptr [rsi + 32], r13w
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 34], r13w
	setae	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 36], r13w
	setae	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 38], r13w
	setae	byte ptr [rsp + 240]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 40], r13w
	setae	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 42], r13w
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 44], r13w
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 46], r13w
	setae	r15b
	cmp	word ptr [rsi + 48], r13w
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 50], r13w
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [rsi + 52], r13w
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 54], r13w
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 56], r13w
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 58], r13w
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [rsi + 60], r13w
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	word ptr [rsi + 62], r13w
	setae	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 304]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 272]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 64
	add	r14, 4
	add	qword ptr [rsp + 320], -1       # 8-byte Folded Spill
	jne	.LBB10_87
# %bb.88:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r11, qword ptr [rsp + 368]      # 8-byte Reload
.LBB10_89:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB10_182
# %bb.90:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB10_170
# %bb.91:
	xor	r11d, r11d
	jmp	.LBB10_172
.LBB10_92:
	movzx	r11d, word ptr [rdx]
	lea	r15, [r10 + 31]
	test	r10, r10
	cmovns	r15, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_96
# %bb.93:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_94:                              # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r11w
	lea	rsi, [rsi + 2]
	setge	dl
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_94
# %bb.95:
	add	r14, 1
.LBB10_96:
	sar	r15, 5
	cmp	r10, 32
	mov	dword ptr [rsp + 392], r11d     # 4-byte Spill
	jl	.LBB10_135
# %bb.97:
	cmp	r15, 8
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 456], r15      # 8-byte Spill
	jb	.LBB10_100
# %bb.98:
	mov	rax, r15
	shl	rax, 6
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB10_197
# %bb.99:
	lea	rax, [r14 + 4*r15]
	cmp	rax, rsi
	jbe	.LBB10_197
.LBB10_100:
	xor	eax, eax
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	mov	r11, rsi
	mov	r12, r14
.LBB10_101:
	mov	qword ptr [rsp + 8], r12        # 8-byte Spill
	mov	r14, r15
	sub	r14, qword ptr [rsp + 400]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 320], r14      # 8-byte Spill
	mov	r13d, dword ptr [rsp + 392]     # 4-byte Reload
	.p2align	4, 0x90
.LBB10_102:                             # =>This Inner Loop Header: Depth=1
	cmp	word ptr [r11], r13w
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 2], r13w
	setge	r8b
	cmp	word ptr [r11 + 4], r13w
	setge	r14b
	cmp	word ptr [r11 + 6], r13w
	setge	byte ptr [rsp + 336]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 8], r13w
	setge	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 10], r13w
	setge	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 12], r13w
	setge	al
	cmp	word ptr [r11 + 14], r13w
	setge	bl
	cmp	word ptr [r11 + 16], r13w
	setge	byte ptr [rsp + 304]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 18], r13w
	setge	cl
	cmp	word ptr [r11 + 20], r13w
	setge	sil
	cmp	word ptr [r11 + 22], r13w
	setge	r9b
	cmp	word ptr [r11 + 24], r13w
	setge	r10b
	cmp	word ptr [r11 + 26], r13w
	setge	r12b
	cmp	word ptr [r11 + 28], r13w
	setge	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 30], r13w
	setge	dil
	cmp	word ptr [r11 + 32], r13w
	setge	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 34], r13w
	setge	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 36], r13w
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 38], r13w
	setge	byte ptr [rsp + 240]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 40], r13w
	setge	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 42], r13w
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 44], r13w
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 46], r13w
	setge	r15b
	cmp	word ptr [r11 + 48], r13w
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 50], r13w
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 52], r13w
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 54], r13w
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 56], r13w
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 58], r13w
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	word ptr [r11 + 60], r13w
	setge	byte ptr [rsp + 352]            # 1-byte Folded Spill
	cmp	word ptr [r11 + 62], r13w
	setge	dl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, r8b
	add	cl, cl
	add	cl, byte ptr [rsp + 304]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	sil, 2
	or	sil, cl
	movzx	ecx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, al
	mov	r8d, ecx
	shl	r9b, 3
	or	r9b, sil
	movzx	ecx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	sil, 6
	shl	dil, 7
	or	dil, sil
	or	bl, cl
	or	dil, r12b
	movzx	ecx, byte ptr [rsp + 272]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	cl, 2
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	cl, 3
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	cl, 4
	or	cl, sil
	mov	esi, ecx
	movzx	ecx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	cl, 5
	or	cl, sil
	mov	esi, ecx
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rcx], bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [rcx + 1], dil
	or	r15b, sil
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 3
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, bl
	mov	ebx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, bl
	movzx	ebx, byte ptr [rsp + 352]       # 1-byte Folded Reload
	shl	bl, 6
	shl	dl, 7
	or	dl, bl
	or	dl, al
	mov	byte ptr [rcx + 2], r15b
	mov	byte ptr [rcx + 3], dl
	add	r11, 64
	add	rcx, 4
	mov	qword ptr [rsp + 8], rcx        # 8-byte Spill
	add	qword ptr [rsp + 320], -1       # 8-byte Folded Spill
	jne	.LBB10_102
# %bb.103:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r15, qword ptr [rsp + 456]      # 8-byte Reload
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	jmp	.LBB10_136
.LBB10_104:
	mov	r13, qword ptr [rdx]
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB10_108
# %bb.105:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_106:                             # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	lea	rsi, [rsi + 8]
	setge	dl
	neg	dl
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r14 + rbx]
	xor	dl, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, dl
	xor	dil, r8b
	mov	byte ptr [r14 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_106
# %bb.107:
	add	r14, 1
.LBB10_108:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB10_112
# %bb.109:
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 368], r11      # 8-byte Spill
	mov	qword ptr [rsp + 320], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_110:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	cmp	qword ptr [rsi], r13
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 8], r13
	setge	dil
	cmp	qword ptr [rsi + 16], r13
	setge	r14b
	cmp	qword ptr [rsi + 24], r13
	setge	byte ptr [rsp + 336]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 32], r13
	setge	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 40], r13
	setge	byte ptr [rsp + 208]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 48], r13
	setge	al
	cmp	qword ptr [rsi + 56], r13
	setge	bl
	cmp	qword ptr [rsi + 64], r13
	setge	byte ptr [rsp + 304]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 72], r13
	setge	dl
	cmp	qword ptr [rsi + 80], r13
	setge	r9b
	cmp	qword ptr [rsi + 88], r13
	setge	r10b
	cmp	qword ptr [rsi + 96], r13
	setge	r11b
	cmp	qword ptr [rsi + 104], r13
	setge	r12b
	cmp	qword ptr [rsi + 112], r13
	setge	byte ptr [rsp + 256]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 120], r13
	setge	cl
	cmp	qword ptr [rsi + 128], r13
	setge	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 136], r13
	setge	byte ptr [rsp + 272]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 144], r13
	setge	byte ptr [rsp + 288]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 152], r13
	setge	byte ptr [rsp + 240]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 160], r13
	setge	byte ptr [rsp + 192]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 168], r13
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 176], r13
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 184], r13
	setge	r15b
	cmp	qword ptr [rsi + 192], r13
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 200], r13
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	qword ptr [rsi + 208], r13
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 216], r13
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 224], r13
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 232], r13
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	qword ptr [rsi + 240], r13
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	qword ptr [rsi + 248], r13
	setge	r8b
	add	dil, dil
	add	dil, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	al, 6
	shl	bl, 7
	or	bl, al
	shl	r14b, 2
	or	r14b, dil
	add	dl, dl
	add	dl, byte ptr [rsp + 304]        # 1-byte Folded Reload
	movzx	eax, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 3
	or	al, r14b
	shl	r9b, 2
	or	r9b, dl
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, al
	mov	edi, edx
	shl	r10b, 3
	or	r10b, r9b
	movzx	edx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	shl	r11b, 4
	or	r11b, r10b
	shl	r12b, 5
	or	r12b, r11b
	movzx	edi, byte ptr [rsp + 256]       # 1-byte Folded Reload
	shl	dil, 6
	shl	cl, 7
	or	cl, dil
	or	bl, dl
	or	cl, r12b
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	movzx	edx, byte ptr [rsp + 272]       # 1-byte Folded Reload
	add	dl, dl
	add	dl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, dil
	mov	edi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, dil
	mov	byte ptr [r14], bl
	movzx	ebx, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r15b, 7
	or	r15b, bl
	mov	byte ptr [r14 + 1], cl
	or	r15b, dl
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	movzx	edx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	dl, 6
	shl	r8b, 7
	or	r8b, dl
	or	r8b, cl
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], r8b
	add	rsi, 256
	add	r14, 4
	add	qword ptr [rsp + 320], -1       # 8-byte Folded Spill
	jne	.LBB10_110
# %bb.111:
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r11, qword ptr [rsp + 368]      # 8-byte Reload
.LBB10_112:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB10_182
# %bb.113:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB10_175
# %bb.114:
	xor	r11d, r11d
	jmp	.LBB10_177
.LBB10_115:
	lea	r11, [r10 + 31]
	test	r10, r10
	cmovns	r11, r10
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movss	xmm11, dword ptr [rdx]          # xmm11 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB10_119
# %bb.116:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB10_117:                             # =>This Inner Loop Header: Depth=1
	ucomiss	xmm11, dword ptr [rsi]
	setbe	dl
	add	rsi, 4
	neg	dl
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	xor	dl, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, dl
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB10_117
# %bb.118:
	add	r14, 1
.LBB10_119:
	sar	r11, 5
	cmp	r10, 32
	jl	.LBB10_139
# %bb.120:
	cmp	r11, 4
	jb	.LBB10_123
# %bb.121:
	mov	rax, r11
	shl	rax, 7
	add	rax, rsi
	cmp	r14, rax
	jae	.LBB10_200
# %bb.122:
	lea	rax, [r14 + 4*r11]
	cmp	rax, rsi
	jbe	.LBB10_200
.LBB10_123:
	xor	r8d, r8d
	mov	rbx, rsi
	mov	r15, r14
.LBB10_124:
	mov	qword ptr [rsp + 8], r15        # 8-byte Spill
	mov	qword ptr [rsp + 72], r10       # 8-byte Spill
	mov	qword ptr [rsp + 320], r11      # 8-byte Spill
	sub	r11, r8
	mov	qword ptr [rsp + 160], r11      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_125:                             # =>This Inner Loop Header: Depth=1
	ucomiss	xmm11, dword ptr [rbx]
	setbe	byte ptr [rsp + 336]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 4]
	setbe	r8b
	ucomiss	xmm11, dword ptr [rbx + 8]
	setbe	r14b
	ucomiss	xmm11, dword ptr [rbx + 12]
	setbe	r13b
	ucomiss	xmm11, dword ptr [rbx + 16]
	setbe	byte ptr [rsp + 224]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 20]
	setbe	byte ptr [rsp + 208]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 24]
	setbe	al
	ucomiss	xmm11, dword ptr [rbx + 28]
	setbe	r11b
	ucomiss	xmm11, dword ptr [rbx + 32]
	setbe	byte ptr [rsp + 256]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 36]
	setbe	dl
	ucomiss	xmm11, dword ptr [rbx + 40]
	setbe	sil
	ucomiss	xmm11, dword ptr [rbx + 44]
	setbe	dil
	ucomiss	xmm11, dword ptr [rbx + 48]
	setbe	r10b
	ucomiss	xmm11, dword ptr [rbx + 52]
	setbe	r12b
	ucomiss	xmm11, dword ptr [rbx + 56]
	setbe	byte ptr [rsp + 272]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 60]
	setbe	r9b
	ucomiss	xmm11, dword ptr [rbx + 64]
	setbe	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 68]
	setbe	byte ptr [rsp + 304]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 72]
	setbe	byte ptr [rsp + 288]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 76]
	setbe	byte ptr [rsp + 240]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 80]
	setbe	byte ptr [rsp + 192]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 84]
	setbe	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 88]
	setbe	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 92]
	setbe	r15b
	ucomiss	xmm11, dword ptr [rbx + 96]
	setbe	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 100]
	setbe	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 104]
	setbe	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 108]
	setbe	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 112]
	setbe	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 116]
	setbe	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 120]
	setbe	byte ptr [rsp + 352]            # 1-byte Folded Spill
	ucomiss	xmm11, dword ptr [rbx + 124]
	setbe	cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 336]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 256]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 224]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	shl	dil, 3
	or	dil, sil
	movzx	edx, byte ptr [rsp + 208]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, dil
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 272]       # 1-byte Folded Reload
	shl	sil, 6
	shl	r9b, 7
	or	r9b, sil
	or	r11b, dl
	or	r9b, r12b
	movzx	eax, byte ptr [rsp + 304]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 288]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 240]       # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 192]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	mov	byte ptr [rsi], r11b
	movzx	edi, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	dil, 6
	shl	r15b, 7
	or	r15b, dil
	mov	byte ptr [rsi + 1], r9b
	or	r15b, dl
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 48]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 352]       # 1-byte Folded Reload
	shl	dl, 6
	shl	cl, 7
	or	cl, dl
	or	cl, al
	mov	byte ptr [rsi + 2], r15b
	mov	byte ptr [rsi + 3], cl
	add	rbx, 128
	add	rsi, 4
	mov	qword ptr [rsp + 8], rsi        # 8-byte Spill
	add	qword ptr [rsp + 160], -1       # 8-byte Folded Spill
	jne	.LBB10_125
# %bb.126:
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r11, qword ptr [rsp + 320]      # 8-byte Reload
	jmp	.LBB10_140
.LBB10_127:
	mov	qword ptr [rsp + 112], r14      # 8-byte Spill
.LBB10_128:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_182
# %bb.129:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_151
# %bb.130:
	xor	r9d, r9d
	jmp	.LBB10_154
.LBB10_131:
	mov	qword ptr [rsp + 208], r14      # 8-byte Spill
.LBB10_132:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_182
# %bb.133:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_156
# %bb.134:
	xor	r9d, r9d
	jmp	.LBB10_159
.LBB10_135:
	mov	r12, r14
	mov	r11, rsi
.LBB10_136:
	shl	r15, 5
	cmp	r15, r10
	jge	.LBB10_182
# %bb.137:
	mov	r8, r10
	sub	r8, r15
	not	r15
	add	r15, r10
	jne	.LBB10_183
# %bb.138:
	xor	esi, esi
	jmp	.LBB10_185
.LBB10_139:
	mov	r15, r14
	mov	rbx, rsi
.LBB10_140:
	shl	r11, 5
	cmp	r11, r10
	jge	.LBB10_182
# %bb.141:
	mov	r8, r10
	sub	r8, r11
	not	r11
	add	r11, r10
	jne	.LBB10_187
# %bb.142:
	xor	esi, esi
	jmp	.LBB10_189
.LBB10_143:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB10_144:                             # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	mov	edi, 0
	adc	dil, -1
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r14 + rdx]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r14 + rdx], al
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r14 + rdx], bl
	cmp	r9, r11
	jne	.LBB10_144
.LBB10_145:
	test	r8b, 1
	je	.LBB10_182
# %bb.146:
	xor	eax, eax
	cmp	qword ptr [rsi], r13
	jmp	.LBB10_174
.LBB10_147:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB10_148:                             # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	setge	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	setge	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB10_148
.LBB10_149:
	test	r8b, 1
	je	.LBB10_182
# %bb.150:
	cmp	dword ptr [rsi], r13d
	jmp	.LBB10_179
.LBB10_151:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	.p2align	4, 0x90
.LBB10_152:                             # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	byte ptr [rsi + r9], r11b
	setge	bl
	neg	bl
	mov	rdi, r9
	shr	rdi, 3
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	movzx	r9d, byte ptr [r14 + rdi]
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r14 + rdi], dl
	cmp	byte ptr [rsi + rax + 1], r11b
	lea	r9, [rax + 2]
	setge	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r14 + rdi], al
	cmp	r10, r9
	jne	.LBB10_152
# %bb.153:
	add	rsi, r9
.LBB10_154:
	test	r8b, 1
	je	.LBB10_182
# %bb.155:
	cmp	byte ptr [rsi], r11b
	setge	al
	neg	al
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	shl	bl, cl
	xor	al, dil
	and	bl, al
	jmp	.LBB10_161
.LBB10_156:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	mov	r14, qword ptr [rsp + 208]      # 8-byte Reload
	.p2align	4, 0x90
.LBB10_157:                             # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	byte ptr [rsi + r9], r11b
	mov	ebx, 0
	adc	bl, -1
	mov	rdi, r9
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, eax
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r14 + rdi], dl
	cmp	byte ptr [rsi + rax + 1], r11b
	lea	r9, [rax + 2]
	mov	ebx, 0
	adc	bl, -1
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r14 + rdi], al
	cmp	r10, r9
	jne	.LBB10_157
# %bb.158:
	add	rsi, r9
.LBB10_159:
	test	r8b, 1
	je	.LBB10_182
# %bb.160:
	xor	eax, eax
	cmp	byte ptr [rsi], r11b
	adc	al, -1
	mov	rdx, r9
	shr	rdx, 3
	mov	r8, qword ptr [rsp + 208]       # 8-byte Reload
	mov	dil, byte ptr [r8 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	shl	bl, cl
	xor	al, dil
	and	bl, al
.LBB10_161:
	xor	bl, dil
	mov	byte ptr [r8 + rdx], bl
	jmp	.LBB10_182
.LBB10_162:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB10_163:                             # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [rsi], r13d
	mov	edi, 0
	adc	dil, -1
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r14 + rdx]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r14 + rdx], al
	add	r11, 2
	cmp	dword ptr [rsi + 4], r13d
	lea	rsi, [rsi + 8]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r14 + rdx], bl
	cmp	r9, r11
	jne	.LBB10_163
.LBB10_164:
	test	r8b, 1
	je	.LBB10_182
# %bb.165:
	xor	eax, eax
	cmp	dword ptr [rsi], r13d
	jmp	.LBB10_174
.LBB10_166:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB10_167:                             # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rsi]
	setbe	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	ucomisd	xmm0, qword ptr [rsi + 8]
	setbe	al
	add	rsi, 16
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB10_167
.LBB10_168:
	test	r8b, 1
	je	.LBB10_182
# %bb.169:
	ucomisd	xmm0, qword ptr [rsi]
	setbe	al
	jmp	.LBB10_180
.LBB10_170:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB10_171:                             # =>This Inner Loop Header: Depth=1
	cmp	word ptr [rsi], r13w
	mov	edi, 0
	adc	dil, -1
	mov	rdx, r11
	shr	rdx, 3
	movzx	r10d, byte ptr [r14 + rdx]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r14 + rdx], al
	add	r11, 2
	cmp	word ptr [rsi + 2], r13w
	lea	rsi, [rsi + 4]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r14 + rdx], bl
	cmp	r9, r11
	jne	.LBB10_171
.LBB10_172:
	test	r8b, 1
	je	.LBB10_182
# %bb.173:
	xor	eax, eax
	cmp	word ptr [rsi], r13w
.LBB10_174:
	adc	al, -1
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	jmp	.LBB10_181
.LBB10_175:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB10_176:                             # =>This Inner Loop Header: Depth=1
	cmp	qword ptr [rsi], r13
	setge	al
	neg	al
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r14 + rdi], bl
	add	r11, 2
	cmp	qword ptr [rsi + 8], r13
	lea	rsi, [rsi + 16]
	setge	al
	neg	al
	xor	al, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, al
	xor	dl, bl
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB10_176
.LBB10_177:
	test	r8b, 1
	je	.LBB10_182
# %bb.178:
	cmp	qword ptr [rsi], r13
.LBB10_179:
	setge	al
.LBB10_180:
	neg	al
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
.LBB10_181:
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
.LBB10_182:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB10_183:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r14d, dword ptr [rsp + 392]     # 4-byte Reload
	.p2align	4, 0x90
.LBB10_184:                             # =>This Inner Loop Header: Depth=1
	cmp	word ptr [r11], r14w
	setge	bl
	neg	bl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r9d, byte ptr [r12 + rdi]
	mov	ecx, esi
	and	cl, 6
	mov	dl, 1
	shl	dl, cl
	xor	bl, r9b
	and	dl, bl
	xor	dl, r9b
	mov	byte ptr [r12 + rdi], dl
	add	rsi, 2
	cmp	word ptr [r11 + 2], r14w
	lea	r11, [r11 + 4]
	setge	bl
	neg	bl
	xor	bl, dl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, bl
	xor	al, dl
	mov	byte ptr [r12 + rdi], al
	cmp	r10, rsi
	jne	.LBB10_184
.LBB10_185:
	test	r8b, 1
	je	.LBB10_182
# %bb.186:
	mov	eax, dword ptr [rsp + 392]      # 4-byte Reload
	cmp	word ptr [r11], ax
	setge	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r12 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r12 + rdx], bl
	jmp	.LBB10_182
.LBB10_187:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	mov	r11, r15
	.p2align	4, 0x90
.LBB10_188:                             # =>This Inner Loop Header: Depth=1
	ucomiss	xmm11, dword ptr [rbx]
	setbe	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r9d, byte ptr [r11 + rdi]
	mov	ecx, esi
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dl, r9b
	and	al, dl
	xor	al, r9b
	mov	byte ptr [r11 + rdi], al
	add	rsi, 2
	ucomiss	xmm11, dword ptr [rbx + 4]
	setbe	r9b
	add	rbx, 8
	neg	r9b
	xor	r9b, al
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, r9b
	xor	dl, al
	mov	byte ptr [r11 + rdi], dl
	cmp	r10, rsi
	jne	.LBB10_188
.LBB10_189:
	test	r8b, 1
	je	.LBB10_182
# %bb.190:
	ucomiss	xmm11, dword ptr [rbx]
	setbe	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	r14, r15
	mov	dil, byte ptr [r15 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r15 + rdx], bl
	jmp	.LBB10_182
.LBB10_191:
	and	r15, -16
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 368], rax      # 8-byte Spill
	mov	qword ptr [rsp + 160], r15      # 8-byte Spill
	lea	rax, [r14 + 4*r15]
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	movzx	eax, r11b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 320], xmm1   # 16-byte Spill
	xor	r8d, r8d
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_192:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 288], r8       # 8-byte Spill
	shl	r8, 5
	mov	r9, r8
	mov	rdi, r8
	mov	qword ptr [rsp + 128], r8       # 8-byte Spill
	mov	r12, r8
	mov	r15, r8
	mov	qword ptr [rsp + 16], r8        # 8-byte Spill
	mov	r11, r8
	mov	r10, r8
	mov	rax, r8
	mov	rdx, r8
	mov	r14, r8
	movzx	ecx, byte ptr [rsi + r8]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [rsi + r8 + 1]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rsi + r8 + 2]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rsi + r8 + 3]
	movd	xmm4, ecx
	movzx	ecx, byte ptr [rsi + r8 + 4]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rsi + r8 + 5]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 144], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + r8 + 6]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [rsi + r8 + 7]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 272], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + r8 + 8]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [rsi + r8 + 9]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rsi + r8 + 10]
	movd	xmm10, ecx
	movzx	ecx, byte ptr [rsi + r8 + 11]
	movd	xmm1, ecx
	movzx	ecx, byte ptr [rsi + r8 + 12]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rsi + r8 + 16]
	movd	xmm14, ecx
	mov	qword ptr [rsp + 208], r8       # 8-byte Spill
	movzx	ecx, byte ptr [rsi + r8 + 24]
	movd	xmm5, ecx
	mov	rcx, r8
	or	rcx, 32
	mov	r13, rcx
	mov	qword ptr [rsp + 80], rcx       # 8-byte Spill
	or	r9, 64
	mov	qword ptr [rsp + 32], r9        # 8-byte Spill
	mov	rcx, r9
	mov	r9, r8
	or	r9, 96
	or	qword ptr [rsp + 128], 128      # 8-byte Folded Spill
	or	r12, 160
	or	r15, 192
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	or	rbx, 224
	or	r11, 256
	or	r10, 288
	or	rax, 320
	or	rdx, 352
	mov	qword ptr [rsp + 48], rdx       # 8-byte Spill
	or	r14, 384
	mov	qword ptr [rsp + 192], r14      # 8-byte Spill
	or	rdi, 416
	mov	qword ptr [rsp + 96], rdi       # 8-byte Spill
	mov	rdi, r8
	or	rdi, 448
	mov	qword ptr [rsp + 16], rdi       # 8-byte Spill
	mov	rdi, r8
	or	rdi, 480
	pinsrb	xmm9, byte ptr [rsi + r13], 1
	pinsrb	xmm9, byte ptr [rsi + rcx], 2
	pinsrb	xmm9, byte ptr [rsi + r9], 3
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r8], 4
	pinsrb	xmm9, byte ptr [rsi + r12], 5
	pinsrb	xmm9, byte ptr [rsi + r15], 6
	pinsrb	xmm9, byte ptr [rsi + rbx], 7
	pinsrb	xmm9, byte ptr [rsi + r11], 8
	pinsrb	xmm9, byte ptr [rsi + r10], 9
	pinsrb	xmm9, byte ptr [rsi + rax], 10
	pinsrb	xmm9, byte ptr [rsi + rdx], 11
	pinsrb	xmm9, byte ptr [rsi + r14], 12
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + r13], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rsi + rcx], 14
	mov	qword ptr [rsp + 224], rdi      # 8-byte Spill
	pinsrb	xmm9, byte ptr [rsi + rdi], 15
	movdqa	xmm15, xmmword ptr [rsp + 320]  # 16-byte Reload
	movdqa	xmm11, xmm15
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 1], 1
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 1], 2
	pinsrb	xmm2, byte ptr [rsi + r9 + 1], 3
	pinsrb	xmm2, byte ptr [rsi + r8 + 1], 4
	pinsrb	xmm2, byte ptr [rsi + r12 + 1], 5
	pinsrb	xmm2, byte ptr [rsi + r15 + 1], 6
	pinsrb	xmm2, byte ptr [rsi + rbx + 1], 7
	pinsrb	xmm2, byte ptr [rsi + r11 + 1], 8
	pinsrb	xmm2, byte ptr [rsi + r10 + 1], 9
	pinsrb	xmm2, byte ptr [rsi + rax + 1], 10
	pinsrb	xmm2, byte ptr [rsi + rdx + 1], 11
	pinsrb	xmm2, byte ptr [rsi + r14 + 1], 12
	mov	r13, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r13 + 1], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 1], 14
	pinsrb	xmm2, byte ptr [rsi + rdi + 1], 15
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 2], 1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r13 + 2], 2
	pinsrb	xmm3, byte ptr [rsi + r9 + 2], 3
	pinsrb	xmm3, byte ptr [rsi + r8 + 2], 4
	pinsrb	xmm3, byte ptr [rsi + r12 + 2], 5
	pinsrb	xmm3, byte ptr [rsi + r15 + 2], 6
	pinsrb	xmm3, byte ptr [rsi + rbx + 2], 7
	pinsrb	xmm3, byte ptr [rsi + r11 + 2], 8
	pinsrb	xmm3, byte ptr [rsi + r10 + 2], 9
	pinsrb	xmm3, byte ptr [rsi + rax + 2], 10
	pinsrb	xmm3, byte ptr [rsi + rdx + 2], 11
	pinsrb	xmm3, byte ptr [rsi + r14 + 2], 12
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 2], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 2], 14
	pinsrb	xmm3, byte ptr [rsi + rdi + 2], 15
	movdqa	xmm0, xmm3
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 3], 1
	pinsrb	xmm4, byte ptr [rsi + r13 + 3], 2
	pinsrb	xmm4, byte ptr [rsi + r9 + 3], 3
	pinsrb	xmm4, byte ptr [rsi + r8 + 3], 4
	pinsrb	xmm4, byte ptr [rsi + r12 + 3], 5
	pinsrb	xmm4, byte ptr [rsi + r15 + 3], 6
	pinsrb	xmm4, byte ptr [rsi + rbx + 3], 7
	pinsrb	xmm4, byte ptr [rsi + r11 + 3], 8
	pinsrb	xmm4, byte ptr [rsi + r10 + 3], 9
	pinsrb	xmm4, byte ptr [rsi + rax + 3], 10
	pinsrb	xmm4, byte ptr [rsi + rdx + 3], 11
	pinsrb	xmm4, byte ptr [rsi + r14 + 3], 12
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 3], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rcx + 3], 14
	pinsrb	xmm4, byte ptr [rsi + rdi + 3], 15
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 4], 1
	pinsrb	xmm6, byte ptr [rsi + r13 + 4], 2
	pinsrb	xmm6, byte ptr [rsi + r9 + 4], 3
	pinsrb	xmm6, byte ptr [rsi + r8 + 4], 4
	pinsrb	xmm6, byte ptr [rsi + r12 + 4], 5
	pinsrb	xmm6, byte ptr [rsi + r15 + 4], 6
	pinsrb	xmm6, byte ptr [rsi + rbx + 4], 7
	pinsrb	xmm6, byte ptr [rsi + r11 + 4], 8
	pinsrb	xmm6, byte ptr [rsi + r10 + 4], 9
	pinsrb	xmm6, byte ptr [rsi + rax + 4], 10
	pinsrb	xmm6, byte ptr [rsi + rdx + 4], 11
	pinsrb	xmm6, byte ptr [rsi + r14 + 4], 12
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 4], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rcx + 4], 14
	pinsrb	xmm6, byte ptr [rsi + rdi + 4], 15
	movdqa	xmm3, xmmword ptr [rsp + 144]   # 16-byte Reload
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 5], 1
	pinsrb	xmm3, byte ptr [rsi + r13 + 5], 2
	pinsrb	xmm3, byte ptr [rsi + r9 + 5], 3
	pinsrb	xmm3, byte ptr [rsi + r8 + 5], 4
	pinsrb	xmm3, byte ptr [rsi + r12 + 5], 5
	pinsrb	xmm3, byte ptr [rsi + r15 + 5], 6
	pinsrb	xmm3, byte ptr [rsi + rbx + 5], 7
	pinsrb	xmm3, byte ptr [rsi + r11 + 5], 8
	pinsrb	xmm3, byte ptr [rsi + r10 + 5], 9
	pinsrb	xmm3, byte ptr [rsi + rax + 5], 10
	pinsrb	xmm3, byte ptr [rsi + rdx + 5], 11
	pinsrb	xmm3, byte ptr [rsi + r14 + 5], 12
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 5], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rcx + 5], 14
	pinsrb	xmm3, byte ptr [rsi + rdi + 5], 15
	movdqa	xmmword ptr [rsp + 144], xmm3   # 16-byte Spill
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 6], 1
	mov	rcx, r13
	pinsrb	xmm7, byte ptr [rsi + r13 + 6], 2
	pinsrb	xmm7, byte ptr [rsi + r9 + 6], 3
	pinsrb	xmm7, byte ptr [rsi + r8 + 6], 4
	pinsrb	xmm7, byte ptr [rsi + r12 + 6], 5
	pinsrb	xmm7, byte ptr [rsi + r15 + 6], 6
	pinsrb	xmm7, byte ptr [rsi + rbx + 6], 7
	pinsrb	xmm7, byte ptr [rsi + r11 + 6], 8
	pinsrb	xmm7, byte ptr [rsi + r10 + 6], 9
	pinsrb	xmm7, byte ptr [rsi + rax + 6], 10
	pinsrb	xmm7, byte ptr [rsi + rdx + 6], 11
	pinsrb	xmm7, byte ptr [rsi + r14 + 6], 12
	pinsrb	xmm13, byte ptr [rsi + rdi + 8], 1
	mov	r13, rdi
	pinsrb	xmm13, byte ptr [rsi + rcx + 8], 2
	pinsrb	xmm13, byte ptr [rsi + r9 + 8], 3
	pinsrb	xmm13, byte ptr [rsi + r8 + 8], 4
	pinsrb	xmm13, byte ptr [rsi + r12 + 8], 5
	pinsrb	xmm13, byte ptr [rsi + r15 + 8], 6
	pinsrb	xmm13, byte ptr [rsi + rbx + 8], 7
	pinsrb	xmm13, byte ptr [rsi + r11 + 8], 8
	pinsrb	xmm13, byte ptr [rsi + r10 + 8], 9
	pinsrb	xmm13, byte ptr [rsi + rax + 8], 10
	pinsrb	xmm13, byte ptr [rsi + rdx + 8], 11
	pinsrb	xmm13, byte ptr [rsi + r14 + 8], 12
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r8 + 8], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rcx + 8], 14
	pcmpgtb	xmm11, xmm9
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rdi + 8], 15
	movdqa	xmm9, xmm15
	pcmpgtb	xmm9, xmm13
	pinsrb	xmm14, byte ptr [rsi + r13 + 16], 1
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rcx + 16], 2
	pinsrb	xmm14, byte ptr [rsi + r9 + 16], 3
	mov	r14, r9
	mov	qword ptr [rsp + 176], r9       # 8-byte Spill
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rcx + 16], 4
	pinsrb	xmm14, byte ptr [rsi + r12 + 16], 5
	mov	qword ptr [rsp + 240], r12      # 8-byte Spill
	pinsrb	xmm14, byte ptr [rsi + r15 + 16], 6
	pinsrb	xmm14, byte ptr [rsi + rbx + 16], 7
	pinsrb	xmm14, byte ptr [rsi + r11 + 16], 8
	pinsrb	xmm14, byte ptr [rsi + r10 + 16], 9
	pinsrb	xmm14, byte ptr [rsi + rax + 16], 10
	mov	r9, rax
	pinsrb	xmm14, byte ptr [rsi + rdx + 16], 11
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdx + 16], 12
	pinsrb	xmm14, byte ptr [rsi + r8 + 16], 13
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r13 + 16], 14
	pinsrb	xmm14, byte ptr [rsi + rdi + 16], 15
	movdqa	xmm3, xmm15
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 24], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 24], 2
	pinsrb	xmm5, byte ptr [rsi + r14 + 24], 3
	pinsrb	xmm5, byte ptr [rsi + rcx + 24], 4
	pinsrb	xmm5, byte ptr [rsi + r12 + 24], 5
	pinsrb	xmm5, byte ptr [rsi + r15 + 24], 6
	mov	r14, r15
	pinsrb	xmm5, byte ptr [rsi + rbx + 24], 7
	pinsrb	xmm5, byte ptr [rsi + r11 + 24], 8
	pinsrb	xmm5, byte ptr [rsi + r10 + 24], 9
	pinsrb	xmm5, byte ptr [rsi + r9 + 24], 10
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 24], 11
	pinsrb	xmm5, byte ptr [rsi + rdx + 24], 12
	pinsrb	xmm5, byte ptr [rsi + r8 + 24], 13
	pinsrb	xmm5, byte ptr [rsi + r13 + 24], 14
	pinsrb	xmm5, byte ptr [rsi + rdi + 24], 15
	pcmpgtb	xmm3, xmm14
	movdqa	xmmword ptr [rsp + 304], xmm3   # 16-byte Spill
	movdqa	xmm3, xmm15
	pcmpgtb	xmm3, xmm5
	movdqa	xmmword ptr [rsp + 256], xmm3   # 16-byte Spill
	movdqa	xmm5, xmm15
	pcmpgtb	xmm5, xmm2
	mov	rcx, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 13]
	movd	xmm2, edx
	pinsrb	xmm7, byte ptr [rsi + r8 + 6], 13
	movdqa	xmm3, xmmword ptr [rip + .LCPI10_16] # xmm3 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm5, xmm3
	paddb	xmm5, xmm11
	movdqa	xmm13, xmm15
	pcmpgtb	xmm13, xmm0
	movdqa	xmm3, xmm15
	pcmpgtb	xmm3, xmm4
	movzx	edx, byte ptr [rsi + rcx + 14]
	movd	xmm4, edx
	pinsrb	xmm7, byte ptr [rsi + r13 + 6], 14
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_17] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm13, xmm0
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_18] # xmm0 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm3, xmm0
	por	xmm3, xmm13
	movdqa	xmm14, xmm15
	pcmpgtb	xmm14, xmm6
	movzx	edx, byte ptr [rsi + rcx + 15]
	movd	xmm6, edx
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_19] # xmm0 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm14, xmm0
	por	xmm14, xmm3
	movzx	edx, byte ptr [rsi + rcx + 17]
	movd	xmm3, edx
	pinsrb	xmm7, byte ptr [rsi + rdi + 6], 15
	pcmpeqd	xmm0, xmm0
	psubb	xmm5, xmm0
	por	xmm14, xmm5
	movdqa	xmm5, xmm15
	pcmpgtb	xmm5, xmmword ptr [rsp + 144]   # 16-byte Folded Reload
	movdqa	xmm13, xmm15
	movdqa	xmm11, xmm15
	pcmpgtb	xmm13, xmm7
	movzx	edx, byte ptr [rsi + rcx + 18]
	movd	xmm7, edx
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_20] # xmm0 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm5, xmm0
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_21] # xmm0 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm13, xmm0
	por	xmm13, xmm5
	movzx	edx, byte ptr [rsi + rcx + 19]
	movd	xmm15, edx
	movdqa	xmm0, xmmword ptr [rsp + 272]   # 16-byte Reload
	mov	rdi, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdi + 7], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 7], 2
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx + 7], 3
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 7], 4
	mov	r15, qword ptr [rsp + 240]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r15 + 7], 5
	pinsrb	xmm0, byte ptr [rsi + r14 + 7], 6
	pinsrb	xmm0, byte ptr [rsi + rbx + 7], 7
	pinsrb	xmm0, byte ptr [rsi + r11 + 7], 8
	pinsrb	xmm0, byte ptr [rsi + r10 + 7], 9
	pinsrb	xmm0, byte ptr [rsi + r9 + 7], 10
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 7], 11
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 7], 12
	pinsrb	xmm0, byte ptr [rsi + r8 + 7], 13
	pinsrb	xmm0, byte ptr [rsi + r13 + 7], 14
	mov	r12, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r12 + 7], 15
	pinsrb	xmm8, byte ptr [rsi + rdi + 9], 1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r13 + 9], 2
	pinsrb	xmm8, byte ptr [rsi + rcx + 9], 3
	pinsrb	xmm8, byte ptr [rsi + rax + 9], 4
	pinsrb	xmm8, byte ptr [rsi + r15 + 9], 5
	pinsrb	xmm8, byte ptr [rsi + r14 + 9], 6
	pinsrb	xmm8, byte ptr [rsi + rbx + 9], 7
	pinsrb	xmm8, byte ptr [rsi + r11 + 9], 8
	pinsrb	xmm8, byte ptr [rsi + r10 + 9], 9
	pinsrb	xmm8, byte ptr [rsi + r9 + 9], 10
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdi + 9], 11
	pinsrb	xmm8, byte ptr [rsi + rdx + 9], 12
	pinsrb	xmm8, byte ptr [rsi + r8 + 9], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdi + 9], 14
	pinsrb	xmm8, byte ptr [rsi + r12 + 9], 15
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r13 + 10], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdi + 10], 2
	pinsrb	xmm10, byte ptr [rsi + rcx + 10], 3
	pinsrb	xmm10, byte ptr [rsi + rax + 10], 4
	pinsrb	xmm10, byte ptr [rsi + r15 + 10], 5
	pinsrb	xmm10, byte ptr [rsi + r14 + 10], 6
	pinsrb	xmm10, byte ptr [rsi + rbx + 10], 7
	pinsrb	xmm10, byte ptr [rsi + r11 + 10], 8
	pinsrb	xmm10, byte ptr [rsi + r10 + 10], 9
	pinsrb	xmm10, byte ptr [rsi + r9 + 10], 10
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdi + 10], 11
	pinsrb	xmm10, byte ptr [rsi + rdx + 10], 12
	pinsrb	xmm10, byte ptr [rsi + r8 + 10], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdi + 10], 14
	pinsrb	xmm10, byte ptr [rsi + r12 + 10], 15
	pinsrb	xmm1, byte ptr [rsi + r13 + 11], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rdi + 11], 2
	pinsrb	xmm1, byte ptr [rsi + rcx + 11], 3
	pinsrb	xmm1, byte ptr [rsi + rax + 11], 4
	pinsrb	xmm1, byte ptr [rsi + r15 + 11], 5
	pinsrb	xmm1, byte ptr [rsi + r14 + 11], 6
	pinsrb	xmm1, byte ptr [rsi + rbx + 11], 7
	pinsrb	xmm1, byte ptr [rsi + r11 + 11], 8
	pinsrb	xmm1, byte ptr [rsi + r10 + 11], 9
	pinsrb	xmm1, byte ptr [rsi + r9 + 11], 10
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rdi + 11], 11
	pinsrb	xmm1, byte ptr [rsi + rdx + 11], 12
	pinsrb	xmm1, byte ptr [rsi + r8 + 11], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rdi + 11], 14
	pinsrb	xmm1, byte ptr [rsi + r12 + 11], 15
	pinsrb	xmm12, byte ptr [rsi + r13 + 12], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rdi + 12], 2
	pinsrb	xmm12, byte ptr [rsi + rcx + 12], 3
	pinsrb	xmm12, byte ptr [rsi + rax + 12], 4
	pinsrb	xmm12, byte ptr [rsi + r15 + 12], 5
	pinsrb	xmm12, byte ptr [rsi + r14 + 12], 6
	pinsrb	xmm12, byte ptr [rsi + rbx + 12], 7
	pinsrb	xmm12, byte ptr [rsi + r11 + 12], 8
	pinsrb	xmm12, byte ptr [rsi + r10 + 12], 9
	pinsrb	xmm12, byte ptr [rsi + r9 + 12], 10
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rdi + 12], 11
	pinsrb	xmm12, byte ptr [rsi + rdx + 12], 12
	pinsrb	xmm12, byte ptr [rsi + r8 + 12], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rdi + 12], 14
	pinsrb	xmm12, byte ptr [rsi + r12 + 12], 15
	pinsrb	xmm2, byte ptr [rsi + r13 + 13], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdi + 13], 2
	pinsrb	xmm2, byte ptr [rsi + rcx + 13], 3
	pinsrb	xmm2, byte ptr [rsi + rax + 13], 4
	pinsrb	xmm2, byte ptr [rsi + r15 + 13], 5
	pinsrb	xmm2, byte ptr [rsi + r14 + 13], 6
	pinsrb	xmm2, byte ptr [rsi + rbx + 13], 7
	pinsrb	xmm2, byte ptr [rsi + r11 + 13], 8
	pinsrb	xmm2, byte ptr [rsi + r10 + 13], 9
	pinsrb	xmm2, byte ptr [rsi + r9 + 13], 10
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdi + 13], 11
	pinsrb	xmm2, byte ptr [rsi + rdx + 13], 12
	pinsrb	xmm2, byte ptr [rsi + r8 + 13], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdi + 13], 14
	pinsrb	xmm2, byte ptr [rsi + r12 + 13], 15
	pinsrb	xmm4, byte ptr [rsi + r13 + 14], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdi + 14], 2
	pinsrb	xmm4, byte ptr [rsi + rcx + 14], 3
	pinsrb	xmm4, byte ptr [rsi + rax + 14], 4
	pinsrb	xmm4, byte ptr [rsi + r15 + 14], 5
	pinsrb	xmm4, byte ptr [rsi + r14 + 14], 6
	pinsrb	xmm4, byte ptr [rsi + rbx + 14], 7
	pinsrb	xmm4, byte ptr [rsi + r11 + 14], 8
	pinsrb	xmm4, byte ptr [rsi + r10 + 14], 9
	pinsrb	xmm4, byte ptr [rsi + r9 + 14], 10
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdi + 14], 11
	pinsrb	xmm4, byte ptr [rsi + rdx + 14], 12
	pinsrb	xmm4, byte ptr [rsi + r8 + 14], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdi + 14], 14
	pinsrb	xmm4, byte ptr [rsi + r12 + 14], 15
	pinsrb	xmm6, byte ptr [rsi + r13 + 15], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdi + 15], 2
	pinsrb	xmm6, byte ptr [rsi + rcx + 15], 3
	pinsrb	xmm6, byte ptr [rsi + rax + 15], 4
	pinsrb	xmm6, byte ptr [rsi + r15 + 15], 5
	pinsrb	xmm6, byte ptr [rsi + r14 + 15], 6
	pinsrb	xmm6, byte ptr [rsi + rbx + 15], 7
	pinsrb	xmm6, byte ptr [rsi + r11 + 15], 8
	pinsrb	xmm6, byte ptr [rsi + r10 + 15], 9
	pinsrb	xmm6, byte ptr [rsi + r9 + 15], 10
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdi + 15], 11
	pinsrb	xmm6, byte ptr [rsi + rdx + 15], 12
	pinsrb	xmm6, byte ptr [rsi + r8 + 15], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rdi + 15], 14
	pinsrb	xmm6, byte ptr [rsi + r12 + 15], 15
	pinsrb	xmm3, byte ptr [rsi + r13 + 17], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdi + 17], 2
	pinsrb	xmm3, byte ptr [rsi + rcx + 17], 3
	pinsrb	xmm3, byte ptr [rsi + rax + 17], 4
	pinsrb	xmm3, byte ptr [rsi + r15 + 17], 5
	pinsrb	xmm3, byte ptr [rsi + r14 + 17], 6
	pinsrb	xmm3, byte ptr [rsi + rbx + 17], 7
	pinsrb	xmm3, byte ptr [rsi + r11 + 17], 8
	pinsrb	xmm3, byte ptr [rsi + r10 + 17], 9
	pinsrb	xmm3, byte ptr [rsi + r9 + 17], 10
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdi + 17], 11
	pinsrb	xmm3, byte ptr [rsi + rdx + 17], 12
	pinsrb	xmm3, byte ptr [rsi + r8 + 17], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdi + 17], 14
	pinsrb	xmm3, byte ptr [rsi + r12 + 17], 15
	pinsrb	xmm7, byte ptr [rsi + r13 + 18], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 18], 2
	pinsrb	xmm7, byte ptr [rsi + rcx + 18], 3
	pinsrb	xmm7, byte ptr [rsi + rax + 18], 4
	pinsrb	xmm7, byte ptr [rsi + r15 + 18], 5
	pinsrb	xmm7, byte ptr [rsi + r14 + 18], 6
	pinsrb	xmm7, byte ptr [rsi + rbx + 18], 7
	pinsrb	xmm7, byte ptr [rsi + r11 + 18], 8
	pinsrb	xmm7, byte ptr [rsi + r10 + 18], 9
	pinsrb	xmm7, byte ptr [rsi + r9 + 18], 10
	mov	qword ptr [rsp + 336], r9       # 8-byte Spill
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + rdi + 18], 11
	pinsrb	xmm7, byte ptr [rsi + rdx + 18], 12
	mov	r15, rdx
	pinsrb	xmm7, byte ptr [rsi + r8 + 18], 13
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm7, byte ptr [rsi + r8 + 18], 14
	pinsrb	xmm7, byte ptr [rsi + r12 + 18], 15
	pinsrb	xmm15, byte ptr [rsi + r13 + 19], 1
	mov	r13, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r13 + 19], 2
	pinsrb	xmm15, byte ptr [rsi + rcx + 19], 3
	pinsrb	xmm15, byte ptr [rsi + rax + 19], 4
	mov	rcx, qword ptr [rsp + 240]      # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rcx + 19], 5
	pinsrb	xmm15, byte ptr [rsi + r14 + 19], 6
	pinsrb	xmm15, byte ptr [rsi + rbx + 19], 7
	pinsrb	xmm15, byte ptr [rsi + r11 + 19], 8
	pinsrb	xmm15, byte ptr [rsi + r10 + 19], 9
	pinsrb	xmm15, byte ptr [rsi + r9 + 19], 10
	pinsrb	xmm15, byte ptr [rsi + rdi + 19], 11
	movdqa	xmm5, xmm11
	pcmpgtb	xmm5, xmm0
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm5, xmm0
	por	xmm5, xmm13
	mov	rax, qword ptr [rsp + 208]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 20]
	movd	xmm0, edx
	por	xmm5, xmm14
	movdqa	xmmword ptr [rsp + 144], xmm5   # 16-byte Spill
	movdqa	xmm13, xmm11
	pcmpgtb	xmm13, xmm8
	movzx	edx, byte ptr [rsi + rax + 21]
	movd	xmm8, edx
	pinsrb	xmm15, byte ptr [rsi + r15 + 19], 12
	pandn	xmm13, xmmword ptr [rip + .LCPI10_16]
	paddb	xmm13, xmm9
	movdqa	xmm5, xmm11
	pcmpgtb	xmm5, xmm10
	movdqa	xmm9, xmm11
	pcmpgtb	xmm9, xmm1
	movzx	edx, byte ptr [rsi + rax + 22]
	movd	xmm10, edx
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdx + 19], 13
	pandn	xmm5, xmmword ptr [rip + .LCPI10_17]
	pandn	xmm9, xmmword ptr [rip + .LCPI10_18]
	por	xmm9, xmm5
	movdqa	xmm1, xmm11
	pcmpgtb	xmm1, xmm12
	movzx	edx, byte ptr [rsi + rax + 23]
	movd	xmm5, edx
	pandn	xmm1, xmmword ptr [rip + .LCPI10_19]
	por	xmm1, xmm9
	movzx	edx, byte ptr [rsi + rax + 25]
	movd	xmm9, edx
	pinsrb	xmm15, byte ptr [rsi + r8 + 19], 14
	psubb	xmm13, xmmword ptr [rip + .LCPI10_22]
	por	xmm1, xmm13
	movdqa	xmm14, xmm11
	pcmpgtb	xmm14, xmm2
	movdqa	xmm13, xmm11
	pcmpgtb	xmm13, xmm4
	movzx	edx, byte ptr [rsi + rax + 26]
	movd	xmm12, edx
	pinsrb	xmm15, byte ptr [rsi + r12 + 19], 15
	pandn	xmm14, xmmword ptr [rip + .LCPI10_20]
	pandn	xmm13, xmmword ptr [rip + .LCPI10_21]
	por	xmm13, xmm14
	movdqa	xmm4, xmm11
	movdqa	xmm14, xmm11
	pcmpgtb	xmm14, xmm6
	movzx	edx, byte ptr [rsi + rax + 27]
	movd	xmm2, edx
	pandn	xmm14, xmmword ptr [rip + .LCPI10_6]
	por	xmm14, xmm13
	movzx	edx, byte ptr [rsi + rax + 28]
	movd	xmm6, edx
	por	xmm14, xmm1
	pcmpgtb	xmm11, xmm3
	movzx	edx, byte ptr [rsi + rax + 29]
	movd	xmm3, edx
	pandn	xmm11, xmmword ptr [rip + .LCPI10_16]
	paddb	xmm11, xmmword ptr [rsp + 304]  # 16-byte Folded Reload
	movdqa	xmm1, xmm4
	pcmpgtb	xmm1, xmm7
	movdqa	xmm13, xmm4
	movdqa	xmm7, xmm4
	pcmpgtb	xmm13, xmm15
	movzx	edx, byte ptr [rsi + rax + 30]
	movd	xmm4, edx
	movzx	edx, byte ptr [rsi + rax + 31]
	pandn	xmm1, xmmword ptr [rip + .LCPI10_17]
	pandn	xmm13, xmmword ptr [rip + .LCPI10_18]
	por	xmm13, xmm1
	movd	xmm15, edx
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 20], 1
	pinsrb	xmm8, byte ptr [rsi + rax + 21], 1
	pinsrb	xmm10, byte ptr [rsi + rax + 22], 1
	pinsrb	xmm5, byte ptr [rsi + rax + 23], 1
	pinsrb	xmm9, byte ptr [rsi + rax + 25], 1
	pinsrb	xmm12, byte ptr [rsi + rax + 26], 1
	pinsrb	xmm2, byte ptr [rsi + rax + 27], 1
	pinsrb	xmm6, byte ptr [rsi + rax + 28], 1
	pinsrb	xmm3, byte ptr [rsi + rax + 29], 1
	pinsrb	xmm4, byte ptr [rsi + rax + 30], 1
	pinsrb	xmm15, byte ptr [rsi + rax + 31], 1
	pinsrb	xmm0, byte ptr [rsi + r13 + 20], 2
	pinsrb	xmm8, byte ptr [rsi + r13 + 21], 2
	pinsrb	xmm10, byte ptr [rsi + r13 + 22], 2
	pinsrb	xmm5, byte ptr [rsi + r13 + 23], 2
	pinsrb	xmm9, byte ptr [rsi + r13 + 25], 2
	pinsrb	xmm12, byte ptr [rsi + r13 + 26], 2
	pinsrb	xmm2, byte ptr [rsi + r13 + 27], 2
	pinsrb	xmm6, byte ptr [rsi + r13 + 28], 2
	pinsrb	xmm3, byte ptr [rsi + r13 + 29], 2
	pinsrb	xmm4, byte ptr [rsi + r13 + 30], 2
	pinsrb	xmm15, byte ptr [rsi + r13 + 31], 2
	mov	rdx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 20], 3
	pinsrb	xmm8, byte ptr [rsi + rdx + 21], 3
	pinsrb	xmm10, byte ptr [rsi + rdx + 22], 3
	pinsrb	xmm5, byte ptr [rsi + rdx + 23], 3
	pinsrb	xmm9, byte ptr [rsi + rdx + 25], 3
	pinsrb	xmm12, byte ptr [rsi + rdx + 26], 3
	pinsrb	xmm2, byte ptr [rsi + rdx + 27], 3
	pinsrb	xmm6, byte ptr [rsi + rdx + 28], 3
	pinsrb	xmm3, byte ptr [rsi + rdx + 29], 3
	pinsrb	xmm4, byte ptr [rsi + rdx + 30], 3
	pinsrb	xmm15, byte ptr [rsi + rdx + 31], 3
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 20], 4
	pinsrb	xmm8, byte ptr [rsi + rdx + 21], 4
	pinsrb	xmm10, byte ptr [rsi + rdx + 22], 4
	pinsrb	xmm5, byte ptr [rsi + rdx + 23], 4
	pinsrb	xmm9, byte ptr [rsi + rdx + 25], 4
	pinsrb	xmm12, byte ptr [rsi + rdx + 26], 4
	pinsrb	xmm2, byte ptr [rsi + rdx + 27], 4
	pinsrb	xmm6, byte ptr [rsi + rdx + 28], 4
	pinsrb	xmm3, byte ptr [rsi + rdx + 29], 4
	pinsrb	xmm4, byte ptr [rsi + rdx + 30], 4
	pinsrb	xmm15, byte ptr [rsi + rdx + 31], 4
	pinsrb	xmm0, byte ptr [rsi + rcx + 20], 5
	pinsrb	xmm8, byte ptr [rsi + rcx + 21], 5
	pinsrb	xmm10, byte ptr [rsi + rcx + 22], 5
	pinsrb	xmm5, byte ptr [rsi + rcx + 23], 5
	pinsrb	xmm9, byte ptr [rsi + rcx + 25], 5
	pinsrb	xmm12, byte ptr [rsi + rcx + 26], 5
	pinsrb	xmm2, byte ptr [rsi + rcx + 27], 5
	pinsrb	xmm6, byte ptr [rsi + rcx + 28], 5
	pinsrb	xmm3, byte ptr [rsi + rcx + 29], 5
	pinsrb	xmm4, byte ptr [rsi + rcx + 30], 5
	pinsrb	xmm15, byte ptr [rsi + rcx + 31], 5
	pinsrb	xmm0, byte ptr [rsi + r14 + 20], 6
	pinsrb	xmm8, byte ptr [rsi + r14 + 21], 6
	pinsrb	xmm10, byte ptr [rsi + r14 + 22], 6
	pinsrb	xmm5, byte ptr [rsi + r14 + 23], 6
	pinsrb	xmm9, byte ptr [rsi + r14 + 25], 6
	pinsrb	xmm12, byte ptr [rsi + r14 + 26], 6
	pinsrb	xmm2, byte ptr [rsi + r14 + 27], 6
	pinsrb	xmm6, byte ptr [rsi + r14 + 28], 6
	pinsrb	xmm3, byte ptr [rsi + r14 + 29], 6
	pinsrb	xmm4, byte ptr [rsi + r14 + 30], 6
	pinsrb	xmm15, byte ptr [rsi + r14 + 31], 6
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rbx + 20], 7
	pinsrb	xmm8, byte ptr [rsi + rbx + 21], 7
	pinsrb	xmm10, byte ptr [rsi + rbx + 22], 7
	pinsrb	xmm5, byte ptr [rsi + rbx + 23], 7
	pinsrb	xmm9, byte ptr [rsi + rbx + 25], 7
	pinsrb	xmm12, byte ptr [rsi + rbx + 26], 7
	pinsrb	xmm2, byte ptr [rsi + rbx + 27], 7
	pinsrb	xmm6, byte ptr [rsi + rbx + 28], 7
	pinsrb	xmm3, byte ptr [rsi + rbx + 29], 7
	pinsrb	xmm4, byte ptr [rsi + rbx + 30], 7
	pinsrb	xmm15, byte ptr [rsi + rbx + 31], 7
	pinsrb	xmm0, byte ptr [rsi + r11 + 20], 8
	pinsrb	xmm8, byte ptr [rsi + r11 + 21], 8
	pinsrb	xmm10, byte ptr [rsi + r11 + 22], 8
	pinsrb	xmm5, byte ptr [rsi + r11 + 23], 8
	pinsrb	xmm9, byte ptr [rsi + r11 + 25], 8
	pinsrb	xmm12, byte ptr [rsi + r11 + 26], 8
	pinsrb	xmm2, byte ptr [rsi + r11 + 27], 8
	pinsrb	xmm6, byte ptr [rsi + r11 + 28], 8
	pinsrb	xmm3, byte ptr [rsi + r11 + 29], 8
	pinsrb	xmm4, byte ptr [rsi + r11 + 30], 8
	pinsrb	xmm15, byte ptr [rsi + r11 + 31], 8
	pinsrb	xmm0, byte ptr [rsi + r10 + 20], 9
	pinsrb	xmm8, byte ptr [rsi + r10 + 21], 9
	pinsrb	xmm10, byte ptr [rsi + r10 + 22], 9
	pinsrb	xmm5, byte ptr [rsi + r10 + 23], 9
	pinsrb	xmm9, byte ptr [rsi + r10 + 25], 9
	pinsrb	xmm12, byte ptr [rsi + r10 + 26], 9
	pinsrb	xmm2, byte ptr [rsi + r10 + 27], 9
	pinsrb	xmm6, byte ptr [rsi + r10 + 28], 9
	pinsrb	xmm3, byte ptr [rsi + r10 + 29], 9
	pinsrb	xmm4, byte ptr [rsi + r10 + 30], 9
	pinsrb	xmm15, byte ptr [rsi + r10 + 31], 9
	mov	r10, qword ptr [rsp + 336]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r10 + 20], 10
	pinsrb	xmm8, byte ptr [rsi + r10 + 21], 10
	pinsrb	xmm10, byte ptr [rsi + r10 + 22], 10
	pinsrb	xmm5, byte ptr [rsi + r10 + 23], 10
	pinsrb	xmm9, byte ptr [rsi + r10 + 25], 10
	pinsrb	xmm12, byte ptr [rsi + r10 + 26], 10
	pinsrb	xmm2, byte ptr [rsi + r10 + 27], 10
	pinsrb	xmm6, byte ptr [rsi + r10 + 28], 10
	pinsrb	xmm3, byte ptr [rsi + r10 + 29], 10
	pinsrb	xmm4, byte ptr [rsi + r10 + 30], 10
	pinsrb	xmm15, byte ptr [rsi + r10 + 31], 10
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r10 + 20], 11
	pinsrb	xmm8, byte ptr [rsi + r10 + 21], 11
	pinsrb	xmm10, byte ptr [rsi + r10 + 22], 11
	pinsrb	xmm5, byte ptr [rsi + r10 + 23], 11
	pinsrb	xmm9, byte ptr [rsi + r10 + 25], 11
	pinsrb	xmm12, byte ptr [rsi + r10 + 26], 11
	pinsrb	xmm2, byte ptr [rsi + r10 + 27], 11
	pinsrb	xmm6, byte ptr [rsi + r10 + 28], 11
	pinsrb	xmm3, byte ptr [rsi + r10 + 29], 11
	pinsrb	xmm4, byte ptr [rsi + r10 + 30], 11
	pinsrb	xmm15, byte ptr [rsi + r10 + 31], 11
	pinsrb	xmm0, byte ptr [rsi + r15 + 20], 12
	pinsrb	xmm8, byte ptr [rsi + r15 + 21], 12
	pinsrb	xmm10, byte ptr [rsi + r15 + 22], 12
	pinsrb	xmm5, byte ptr [rsi + r15 + 23], 12
	pinsrb	xmm9, byte ptr [rsi + r15 + 25], 12
	pinsrb	xmm12, byte ptr [rsi + r15 + 26], 12
	pinsrb	xmm2, byte ptr [rsi + r15 + 27], 12
	pinsrb	xmm6, byte ptr [rsi + r15 + 28], 12
	pinsrb	xmm3, byte ptr [rsi + r15 + 29], 12
	pinsrb	xmm4, byte ptr [rsi + r15 + 30], 12
	pinsrb	xmm15, byte ptr [rsi + r15 + 31], 12
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 20], 13
	pinsrb	xmm8, byte ptr [rsi + rax + 21], 13
	pinsrb	xmm10, byte ptr [rsi + rax + 22], 13
	pinsrb	xmm5, byte ptr [rsi + rax + 23], 13
	pinsrb	xmm9, byte ptr [rsi + rax + 25], 13
	pinsrb	xmm12, byte ptr [rsi + rax + 26], 13
	pinsrb	xmm2, byte ptr [rsi + rax + 27], 13
	pinsrb	xmm6, byte ptr [rsi + rax + 28], 13
	pinsrb	xmm3, byte ptr [rsi + rax + 29], 13
	pinsrb	xmm4, byte ptr [rsi + rax + 30], 13
	pinsrb	xmm15, byte ptr [rsi + rax + 31], 13
	pinsrb	xmm0, byte ptr [rsi + r8 + 20], 14
	pinsrb	xmm8, byte ptr [rsi + r8 + 21], 14
	pinsrb	xmm10, byte ptr [rsi + r8 + 22], 14
	pinsrb	xmm5, byte ptr [rsi + r8 + 23], 14
	pinsrb	xmm9, byte ptr [rsi + r8 + 25], 14
	pinsrb	xmm12, byte ptr [rsi + r8 + 26], 14
	pinsrb	xmm2, byte ptr [rsi + r8 + 27], 14
	pinsrb	xmm6, byte ptr [rsi + r8 + 28], 14
	pinsrb	xmm3, byte ptr [rsi + r8 + 29], 14
	pinsrb	xmm4, byte ptr [rsi + r8 + 30], 14
	pinsrb	xmm15, byte ptr [rsi + r8 + 31], 14
	pinsrb	xmm0, byte ptr [rsi + r12 + 20], 15
	pinsrb	xmm8, byte ptr [rsi + r12 + 21], 15
	pinsrb	xmm10, byte ptr [rsi + r12 + 22], 15
	pinsrb	xmm5, byte ptr [rsi + r12 + 23], 15
	pinsrb	xmm9, byte ptr [rsi + r12 + 25], 15
	pinsrb	xmm12, byte ptr [rsi + r12 + 26], 15
	movdqa	xmm1, xmm7
	pcmpgtb	xmm1, xmm0
	pinsrb	xmm2, byte ptr [rsi + r12 + 27], 15
	pandn	xmm1, xmmword ptr [rip + .LCPI10_19]
	por	xmm1, xmm13
	pcmpeqd	xmm13, xmm13
	psubb	xmm11, xmm13
	por	xmm1, xmm11
	movdqa	xmm0, xmm7
	pcmpgtb	xmm0, xmm8
	movdqa	xmm8, xmm7
	pcmpgtb	xmm7, xmm10
	movdqa	xmm10, xmmword ptr [rip + .LCPI10_20] # xmm10 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm0, xmm10
	movdqa	xmm11, xmmword ptr [rip + .LCPI10_21] # xmm11 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm7, xmm11
	por	xmm7, xmm0
	movdqa	xmm0, xmm8
	pcmpgtb	xmm0, xmm5
	pinsrb	xmm6, byte ptr [rsi + r12 + 28], 15
	movdqa	xmm5, xmmword ptr [rip + .LCPI10_6] # xmm5 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm0, xmm5
	por	xmm0, xmm7
	pinsrb	xmm3, byte ptr [rsi + r12 + 29], 15
	por	xmm0, xmm1
	movdqa	xmm1, xmm8
	pcmpgtb	xmm1, xmm9
	pandn	xmm1, xmmword ptr [rip + .LCPI10_16]
	paddb	xmm1, xmmword ptr [rsp + 256]   # 16-byte Folded Reload
	movdqa	xmm5, xmm8
	pcmpgtb	xmm5, xmm12
	movdqa	xmm7, xmm8
	pcmpgtb	xmm7, xmm2
	pandn	xmm5, xmmword ptr [rip + .LCPI10_17]
	pandn	xmm7, xmmword ptr [rip + .LCPI10_18]
	por	xmm7, xmm5
	movdqa	xmm2, xmm8
	pcmpgtb	xmm2, xmm6
	pinsrb	xmm4, byte ptr [rsi + r12 + 30], 15
	pandn	xmm2, xmmword ptr [rip + .LCPI10_19]
	por	xmm2, xmm7
	psubb	xmm1, xmm13
	por	xmm2, xmm1
	movdqa	xmm1, xmm8
	pcmpgtb	xmm1, xmm3
	movdqa	xmm3, xmm8
	pcmpgtb	xmm3, xmm4
	pinsrb	xmm15, byte ptr [rsi + r12 + 31], 15
	pandn	xmm1, xmm10
	pandn	xmm3, xmm11
	por	xmm3, xmm1
	movdqa	xmm1, xmm8
	pcmpgtb	xmm1, xmm15
	pandn	xmm1, xmmword ptr [rip + .LCPI10_6]
	por	xmm1, xmm3
	por	xmm1, xmm2
	movdqa	xmm2, xmm0
	punpcklbw	xmm2, xmm1              # xmm2 = xmm2[0],xmm1[0],xmm2[1],xmm1[1],xmm2[2],xmm1[2],xmm2[3],xmm1[3],xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
	movdqa	xmm5, xmmword ptr [rsp + 144]   # 16-byte Reload
	movdqa	xmm3, xmm5
	punpcklbw	xmm3, xmm14             # xmm3 = xmm3[0],xmm14[0],xmm3[1],xmm14[1],xmm3[2],xmm14[2],xmm3[3],xmm14[3],xmm3[4],xmm14[4],xmm3[5],xmm14[5],xmm3[6],xmm14[6],xmm3[7],xmm14[7]
	movdqa	xmm4, xmm3
	punpcklwd	xmm4, xmm2              # xmm4 = xmm4[0],xmm2[0],xmm4[1],xmm2[1],xmm4[2],xmm2[2],xmm4[3],xmm2[3]
	punpckhwd	xmm3, xmm2              # xmm3 = xmm3[4],xmm2[4],xmm3[5],xmm2[5],xmm3[6],xmm2[6],xmm3[7],xmm2[7]
	punpckhbw	xmm0, xmm1              # xmm0 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
	punpckhbw	xmm5, xmm14             # xmm5 = xmm5[8],xmm14[8],xmm5[9],xmm14[9],xmm5[10],xmm14[10],xmm5[11],xmm14[11],xmm5[12],xmm14[12],xmm5[13],xmm14[13],xmm5[14],xmm14[14],xmm5[15],xmm14[15]
	movdqa	xmm1, xmm5
	punpcklwd	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
	punpckhwd	xmm5, xmm0              # xmm5 = xmm5[4],xmm0[4],xmm5[5],xmm0[5],xmm5[6],xmm0[6],xmm5[7],xmm0[7]
	mov	rcx, qword ptr [rsp + 288]      # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx + 48], xmm5
	movdqu	xmmword ptr [r14 + 4*rcx + 32], xmm1
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm3
	movdqu	xmmword ptr [r14 + 4*rcx], xmm4
	add	rcx, 16
	mov	r8, rcx
	cmp	rcx, qword ptr [rsp + 160]      # 8-byte Folded Reload
	jne	.LBB10_192
# %bb.193:
	mov	r15, qword ptr [rsp + 432]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 160]      # 8-byte Folded Reload
	mov	r11b, byte ptr [rsp + 8]        # 1-byte Reload
	mov	rsi, qword ptr [rsp + 368]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	jne	.LBB10_42
	jmp	.LBB10_128
.LBB10_194:
	and	r15, -16
	mov	rax, r15
	shl	rax, 5
	add	rax, rsi
	mov	qword ptr [rsp + 392], rax      # 8-byte Spill
	mov	qword ptr [rsp + 416], r15      # 8-byte Spill
	lea	rax, [r14 + 4*r15]
	mov	qword ptr [rsp + 208], rax      # 8-byte Spill
	movzx	eax, r11b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 400], xmm1   # 16-byte Spill
	xor	edx, edx
	mov	qword ptr [rsp + 352], r14      # 8-byte Spill
	.p2align	4, 0x90
.LBB10_195:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 336], rdx      # 8-byte Spill
	shl	rdx, 5
	mov	rbx, rdx
	mov	r11, rdx
	mov	r12, rdx
	mov	qword ptr [rsp + 144], rdx      # 8-byte Spill
	mov	r8, rdx
	mov	r13, rdx
	mov	r9, rdx
	mov	r10, rdx
	mov	r14, rdx
	mov	rdi, rdx
	mov	r15, rdx
	movzx	ecx, byte ptr [rsi + rdx]
	movd	xmm0, ecx
	movzx	ecx, byte ptr [rsi + rdx + 1]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rsi + rdx + 2]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [rsi + rdx + 3]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rsi + rdx + 4]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rsi + rdx + 5]
	movd	xmm1, ecx
	movzx	ecx, byte ptr [rsi + rdx + 6]
	movd	xmm4, ecx
	movzx	ecx, byte ptr [rsi + rdx + 7]
	movd	xmm2, ecx
	movdqa	xmmword ptr [rsp + 368], xmm2   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdx + 8]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [rsi + rdx + 9]
	movd	xmm2, ecx
	movdqa	xmmword ptr [rsp + 160], xmm2   # 16-byte Spill
	movzx	ecx, byte ptr [rsi + rdx + 10]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rsi + rdx + 11]
	movd	xmm10, ecx
	movzx	ecx, byte ptr [rsi + rdx + 12]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rsi + rdx + 16]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rsi + rdx + 24]
	movd	xmm2, ecx
	mov	qword ptr [rsp + 128], rdx      # 8-byte Spill
	mov	rax, rdx
	or	rax, 32
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	or	rbx, 64
	or	r11, 96
	mov	qword ptr [rsp + 288], r11      # 8-byte Spill
	or	r12, 128
	mov	qword ptr [rsp + 96], r12       # 8-byte Spill
	or	qword ptr [rsp + 144], 160      # 8-byte Folded Spill
	or	r8, 192
	or	r13, 224
	mov	qword ptr [rsp + 304], r13      # 8-byte Spill
	or	r9, 256
	or	r10, 288
	mov	qword ptr [rsp + 272], r10      # 8-byte Spill
	or	r14, 320
	or	rdi, 352
	mov	qword ptr [rsp + 80], rdi       # 8-byte Spill
	or	r15, 384
	mov	rax, rdx
	or	rax, 416
	mov	rcx, rdx
	mov	qword ptr [rsp + 16], rdx       # 8-byte Spill
	or	qword ptr [rsp + 16], 448       # 8-byte Folded Spill
	or	rdx, 480
	mov	qword ptr [rsp + 48], rdx       # 8-byte Spill
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx], 1
	pinsrb	xmm0, byte ptr [rsi + rbx], 2
	pinsrb	xmm0, byte ptr [rsi + r11], 3
	pinsrb	xmm0, byte ptr [rsi + r12], 4
	mov	r11, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r11], 5
	mov	rdx, r8
	pinsrb	xmm0, byte ptr [rsi + r8], 6
	pinsrb	xmm0, byte ptr [rsi + r13], 7
	pinsrb	xmm0, byte ptr [rsi + r9], 8
	mov	r8, r9
	mov	qword ptr [rsp + 224], r9       # 8-byte Spill
	pinsrb	xmm0, byte ptr [rsi + r10], 9
	mov	r9, r14
	pinsrb	xmm0, byte ptr [rsi + r14], 10
	pinsrb	xmm0, byte ptr [rsi + rdi], 11
	pinsrb	xmm0, byte ptr [rsi + r15], 12
	pinsrb	xmm0, byte ptr [rsi + rax], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx], 14
	mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx], 15
	movdqa	xmm9, xmm0
	movdqa	xmm7, xmmword ptr [rsp + 400]   # 16-byte Reload
	pmaxub	xmm9, xmm7
	movdqa	xmm15, xmm7
	pcmpeqb	xmm9, xmm0
	movdqa	xmm0, xmm9
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rcx + 1], 1
	pinsrb	xmm11, byte ptr [rsi + rbx + 1], 2
	mov	r14, qword ptr [rsp + 288]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r14 + 1], 3
	pinsrb	xmm11, byte ptr [rsi + r12 + 1], 4
	pinsrb	xmm11, byte ptr [rsi + r11 + 1], 5
	pinsrb	xmm11, byte ptr [rsi + rdx + 1], 6
	pinsrb	xmm11, byte ptr [rsi + r13 + 1], 7
	pinsrb	xmm11, byte ptr [rsi + r8 + 1], 8
	pinsrb	xmm11, byte ptr [rsi + r10 + 1], 9
	pinsrb	xmm11, byte ptr [rsi + r9 + 1], 10
	pinsrb	xmm11, byte ptr [rsi + rdi + 1], 11
	pinsrb	xmm11, byte ptr [rsi + r15 + 1], 12
	pinsrb	xmm11, byte ptr [rsi + rax + 1], 13
	mov	r8, qword ptr [rsp + 16]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r8 + 1], 14
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + r8 + 1], 15
	pinsrb	xmm13, byte ptr [rsi + rcx + 8], 1
	pinsrb	xmm13, byte ptr [rsi + rbx + 8], 2
	pinsrb	xmm13, byte ptr [rsi + r14 + 8], 3
	pinsrb	xmm13, byte ptr [rsi + r12 + 8], 4
	pinsrb	xmm13, byte ptr [rsi + r11 + 8], 5
	pinsrb	xmm13, byte ptr [rsi + rdx + 8], 6
	pinsrb	xmm13, byte ptr [rsi + r13 + 8], 7
	mov	r13, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + r13 + 8], 8
	pinsrb	xmm13, byte ptr [rsi + r10 + 8], 9
	pinsrb	xmm13, byte ptr [rsi + r9 + 8], 10
	pinsrb	xmm13, byte ptr [rsi + rdi + 8], 11
	pinsrb	xmm13, byte ptr [rsi + r15 + 8], 12
	pinsrb	xmm13, byte ptr [rsi + rax + 8], 13
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rsi + rcx + 8], 14
	pinsrb	xmm13, byte ptr [rsi + r8 + 8], 15
	movdqa	xmm9, xmm13
	pmaxub	xmm9, xmm7
	pcmpeqb	xmm9, xmm13
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rdi + 16], 1
	pinsrb	xmm12, byte ptr [rsi + rbx + 16], 2
	mov	r10, rbx
	pinsrb	xmm12, byte ptr [rsi + r14 + 16], 3
	pinsrb	xmm12, byte ptr [rsi + r12 + 16], 4
	pinsrb	xmm12, byte ptr [rsi + r11 + 16], 5
	pinsrb	xmm12, byte ptr [rsi + rdx + 16], 6
	mov	rcx, rdx
	mov	qword ptr [rsp + 240], rdx      # 8-byte Spill
	mov	r11, qword ptr [rsp + 304]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r11 + 16], 7
	pinsrb	xmm12, byte ptr [rsi + r13 + 16], 8
	mov	r8, r13
	mov	r13, qword ptr [rsp + 272]      # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r13 + 16], 9
	pinsrb	xmm12, byte ptr [rsi + r9 + 16], 10
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rdx + 16], 11
	pinsrb	xmm12, byte ptr [rsi + r15 + 16], 12
	pinsrb	xmm12, byte ptr [rsi + rax + 16], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + rbx + 16], 14
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rsi + r12 + 16], 15
	movdqa	xmm7, xmm12
	pmaxub	xmm7, xmm15
	pcmpeqb	xmm7, xmm12
	movdqa	xmmword ptr [rsp + 432], xmm7   # 16-byte Spill
	pinsrb	xmm2, byte ptr [rsi + rdi + 24], 1
	pinsrb	xmm2, byte ptr [rsi + r10 + 24], 2
	pinsrb	xmm2, byte ptr [rsi + r14 + 24], 3
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdi + 24], 4
	mov	r14, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + r14 + 24], 5
	pinsrb	xmm2, byte ptr [rsi + rcx + 24], 6
	pinsrb	xmm2, byte ptr [rsi + r11 + 24], 7
	pinsrb	xmm2, byte ptr [rsi + r8 + 24], 8
	pinsrb	xmm2, byte ptr [rsi + r13 + 24], 9
	pinsrb	xmm2, byte ptr [rsi + r9 + 24], 10
	pinsrb	xmm2, byte ptr [rsi + rdx + 24], 11
	pinsrb	xmm2, byte ptr [rsi + r15 + 24], 12
	pinsrb	xmm2, byte ptr [rsi + rax + 24], 13
	pinsrb	xmm2, byte ptr [rsi + rbx + 24], 14
	pinsrb	xmm2, byte ptr [rsi + r12 + 24], 15
	movdqa	xmm7, xmm2
	pmaxub	xmm7, xmm15
	pcmpeqb	xmm7, xmm2
	movdqa	xmmword ptr [rsp + 320], xmm7   # 16-byte Spill
	movdqa	xmm12, xmm11
	movdqa	xmm13, xmm15
	pmaxub	xmm12, xmm15
	pcmpeqb	xmm12, xmm11
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + rdx + 13]
	movd	xmm15, edx
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rcx + 2], 1
	mov	rbx, r10
	pinsrb	xmm14, byte ptr [rsi + r10 + 2], 2
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r10 + 2], 3
	mov	rdx, rdi
	pinsrb	xmm14, byte ptr [rsi + rdi + 2], 4
	mov	rcx, r14
	pinsrb	xmm14, byte ptr [rsi + r14 + 2], 5
	mov	rdi, qword ptr [rsp + 240]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rdi + 2], 6
	pinsrb	xmm14, byte ptr [rsi + r11 + 2], 7
	pinsrb	xmm14, byte ptr [rsi + r8 + 2], 8
	pinsrb	xmm14, byte ptr [rsi + r13 + 2], 9
	pinsrb	xmm14, byte ptr [rsi + r9 + 2], 10
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r14 + 2], 11
	pinsrb	xmm14, byte ptr [rsi + r15 + 2], 12
	mov	qword ptr [rsp + 112], rax      # 8-byte Spill
	pinsrb	xmm14, byte ptr [rsi + rax + 2], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rax + 2], 14
	pinsrb	xmm14, byte ptr [rsi + r12 + 2], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 3], 1
	pinsrb	xmm5, byte ptr [rsi + rbx + 3], 2
	pinsrb	xmm5, byte ptr [rsi + r10 + 3], 3
	pinsrb	xmm5, byte ptr [rsi + rdx + 3], 4
	mov	rax, rdx
	pinsrb	xmm5, byte ptr [rsi + rcx + 3], 5
	pinsrb	xmm5, byte ptr [rsi + rdi + 3], 6
	pinsrb	xmm5, byte ptr [rsi + r11 + 3], 7
	pinsrb	xmm5, byte ptr [rsi + r8 + 3], 8
	pinsrb	xmm5, byte ptr [rsi + r13 + 3], 9
	pinsrb	xmm5, byte ptr [rsi + r9 + 3], 10
	pinsrb	xmm5, byte ptr [rsi + r14 + 3], 11
	pinsrb	xmm5, byte ptr [rsi + r15 + 3], 12
	mov	r14, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r14 + 3], 13
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rdx + 3], 14
	pinsrb	xmm5, byte ptr [rsi + r12 + 3], 15
	movdqa	xmm2, xmmword ptr [rip + .LCPI10_16] # xmm2 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pand	xmm12, xmm2
	psubb	xmm12, xmm0
	movdqa	xmm11, xmm14
	pmaxub	xmm11, xmm13
	pcmpeqb	xmm11, xmm14
	movdqa	xmm2, xmm5
	pmaxub	xmm2, xmm13
	pcmpeqb	xmm2, xmm5
	mov	rdx, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + rdx + 14]
	movd	xmm14, edx
	mov	r12, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r12 + 4], 1
	pinsrb	xmm3, byte ptr [rsi + rbx + 4], 2
	pinsrb	xmm3, byte ptr [rsi + r10 + 4], 3
	pinsrb	xmm3, byte ptr [rsi + rax + 4], 4
	pinsrb	xmm3, byte ptr [rsi + rcx + 4], 5
	pinsrb	xmm3, byte ptr [rsi + rdi + 4], 6
	pinsrb	xmm3, byte ptr [rsi + r11 + 4], 7
	pinsrb	xmm3, byte ptr [rsi + r8 + 4], 8
	pinsrb	xmm3, byte ptr [rsi + r13 + 4], 9
	pinsrb	xmm3, byte ptr [rsi + r9 + 4], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 4], 11
	mov	qword ptr [rsp + 192], r15      # 8-byte Spill
	pinsrb	xmm3, byte ptr [rsi + r15 + 4], 12
	pinsrb	xmm3, byte ptr [rsi + r14 + 4], 13
	mov	rdx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 4], 14
	mov	r14, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r14 + 4], 15
	pinsrb	xmm1, byte ptr [rsi + r12 + 5], 1
	pinsrb	xmm1, byte ptr [rsi + rbx + 5], 2
	pinsrb	xmm1, byte ptr [rsi + r10 + 5], 3
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + r12 + 5], 4
	pinsrb	xmm1, byte ptr [rsi + rcx + 5], 5
	pinsrb	xmm1, byte ptr [rsi + rdi + 5], 6
	pinsrb	xmm1, byte ptr [rsi + r11 + 5], 7
	pinsrb	xmm1, byte ptr [rsi + r8 + 5], 8
	pinsrb	xmm1, byte ptr [rsi + r13 + 5], 9
	pinsrb	xmm1, byte ptr [rsi + r9 + 5], 10
	pinsrb	xmm1, byte ptr [rsi + rax + 5], 11
	pinsrb	xmm1, byte ptr [rsi + r15 + 5], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm1, byte ptr [rsi + rax + 5], 13
	pinsrb	xmm1, byte ptr [rsi + rdx + 5], 14
	movdqa	xmm5, xmmword ptr [rip + .LCPI10_17] # xmm5 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm11, xmm5
	movdqa	xmm5, xmmword ptr [rip + .LCPI10_18] # xmm5 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm2, xmm5
	por	xmm2, xmm11
	mov	r15, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + r15 + 15]
	movd	xmm11, edx
	pinsrb	xmm1, byte ptr [rsi + r14 + 5], 15
	por	xmm2, xmm12
	movdqa	xmm12, xmm3
	pmaxub	xmm12, xmm13
	pcmpeqb	xmm12, xmm3
	movdqa	xmm5, xmm1
	pmaxub	xmm5, xmm13
	pcmpeqb	xmm5, xmm1
	movzx	edx, byte ptr [rsi + r15 + 17]
	movd	xmm0, edx
	mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 6], 1
	mov	qword ptr [rsp + 176], rbx      # 8-byte Spill
	pinsrb	xmm4, byte ptr [rsi + rbx + 6], 2
	pinsrb	xmm4, byte ptr [rsi + r10 + 6], 3
	pinsrb	xmm4, byte ptr [rsi + r12 + 6], 4
	pinsrb	xmm4, byte ptr [rsi + rcx + 6], 5
	pinsrb	xmm4, byte ptr [rsi + rdi + 6], 6
	pinsrb	xmm4, byte ptr [rsi + r11 + 6], 7
	pinsrb	xmm4, byte ptr [rsi + r8 + 6], 8
	pinsrb	xmm4, byte ptr [rsi + r13 + 6], 9
	mov	qword ptr [rsp + 256], r9       # 8-byte Spill
	pinsrb	xmm4, byte ptr [rsi + r9 + 6], 10
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r12 + 6], 11
	mov	r14, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r14 + 6], 12
	pinsrb	xmm4, byte ptr [rsi + rax + 6], 13
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r15 + 6], 14
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r15 + 6], 15
	movdqa	xmm3, xmmword ptr [rsp + 368]   # 16-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 7], 1
	pinsrb	xmm3, byte ptr [rsi + rbx + 7], 2
	pinsrb	xmm3, byte ptr [rsi + r10 + 7], 3
	mov	rbx, r10
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 7], 4
	pinsrb	xmm3, byte ptr [rsi + rcx + 7], 5
	pinsrb	xmm3, byte ptr [rsi + rdi + 7], 6
	pinsrb	xmm3, byte ptr [rsi + r11 + 7], 7
	pinsrb	xmm3, byte ptr [rsi + r8 + 7], 8
	pinsrb	xmm3, byte ptr [rsi + r13 + 7], 9
	pinsrb	xmm3, byte ptr [rsi + r9 + 7], 10
	pinsrb	xmm3, byte ptr [rsi + r12 + 7], 11
	pinsrb	xmm3, byte ptr [rsi + r14 + 7], 12
	pinsrb	xmm3, byte ptr [rsi + rax + 7], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdi + 7], 14
	mov	rcx, r15
	pinsrb	xmm3, byte ptr [rsi + r15 + 7], 15
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_19] # xmm1 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm12, xmm1
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_20] # xmm1 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm5, xmm1
	por	xmm5, xmm12
	movdqa	xmm1, xmm4
	pmaxub	xmm1, xmm13
	pcmpeqb	xmm1, xmm4
	mov	r8, qword ptr [rsp + 128]       # 8-byte Reload
	movzx	edx, byte ptr [rsi + r8 + 18]
	movd	xmm4, edx
	movdqa	xmm7, xmmword ptr [rip + .LCPI10_21] # xmm7 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm1, xmm7
	por	xmm1, xmm5
	movzx	edx, byte ptr [rsi + r8 + 19]
	movd	xmm5, edx
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	pmaxub	xmm2, xmm13
	pcmpeqb	xmm2, xmm3
	movdqa	xmm12, xmm2
	movzx	edx, byte ptr [rsi + r8 + 20]
	movd	xmm2, edx
	movdqa	xmm3, xmmword ptr [rsp + 160]   # 16-byte Reload
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r14 + 9], 1
	mov	r10, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r10 + 9], 2
	pinsrb	xmm3, byte ptr [rsi + rbx + 9], 3
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rax + 9], 4
	mov	r9, qword ptr [rsp + 144]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r9 + 9], 5
	mov	r11, qword ptr [rsp + 240]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r11 + 9], 6
	mov	rbx, qword ptr [rsp + 304]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rbx + 9], 7
	mov	r15, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r15 + 9], 8
	pinsrb	xmm3, byte ptr [rsi + r13 + 9], 9
	mov	r12, qword ptr [rsp + 256]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r12 + 9], 10
	mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 9], 11
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 9], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + rdx + 9], 13
	pinsrb	xmm3, byte ptr [rsi + rdi + 9], 14
	pinsrb	xmm3, byte ptr [rsi + rcx + 9], 15
	movdqa	xmm7, xmmword ptr [rip + .LCPI10_6] # xmm7 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm12, xmm7
	por	xmm12, xmm1
	movdqa	xmmword ptr [rsp + 160], xmm12  # 16-byte Spill
	movdqa	xmm7, xmm3
	pmaxub	xmm7, xmm13
	pcmpeqb	xmm7, xmm3
	movzx	edx, byte ptr [rsi + r8 + 21]
	movd	xmm3, edx
	pinsrb	xmm8, byte ptr [rsi + r14 + 10], 1
	mov	r14, r10
	pinsrb	xmm8, byte ptr [rsi + r10 + 10], 2
	mov	r10, qword ptr [rsp + 288]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r10 + 10], 3
	pinsrb	xmm8, byte ptr [rsi + rax + 10], 4
	mov	rcx, r9
	pinsrb	xmm8, byte ptr [rsi + r9 + 10], 5
	mov	rdi, r11
	pinsrb	xmm8, byte ptr [rsi + r11 + 10], 6
	mov	r11, rbx
	pinsrb	xmm8, byte ptr [rsi + rbx + 10], 7
	mov	r8, r15
	pinsrb	xmm8, byte ptr [rsi + r15 + 10], 8
	pinsrb	xmm8, byte ptr [rsi + r13 + 10], 9
	mov	r9, r12
	pinsrb	xmm8, byte ptr [rsi + r12 + 10], 10
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r12 + 10], 11
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + r15 + 10], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rax + 10], 13
	mov	rbx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rbx + 10], 14
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rsi + rdx + 10], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax + 11], 1
	pinsrb	xmm10, byte ptr [rsi + r14 + 11], 2
	pinsrb	xmm10, byte ptr [rsi + r10 + 11], 3
	mov	r14, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + r14 + 11], 4
	pinsrb	xmm10, byte ptr [rsi + rcx + 11], 5
	pinsrb	xmm10, byte ptr [rsi + rdi + 11], 6
	pinsrb	xmm10, byte ptr [rsi + r11 + 11], 7
	pinsrb	xmm10, byte ptr [rsi + r8 + 11], 8
	pinsrb	xmm10, byte ptr [rsi + r13 + 11], 9
	pinsrb	xmm10, byte ptr [rsi + r9 + 11], 10
	pinsrb	xmm10, byte ptr [rsi + r12 + 11], 11
	pinsrb	xmm10, byte ptr [rsi + r15 + 11], 12
	mov	rax, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rax + 11], 13
	pinsrb	xmm10, byte ptr [rsi + rbx + 11], 14
	pinsrb	xmm10, byte ptr [rsi + rdx + 11], 15
	pand	xmm7, xmmword ptr [rip + .LCPI10_16]
	psubb	xmm7, xmm9
	movdqa	xmm1, xmm8
	pmaxub	xmm1, xmm13
	pcmpeqb	xmm1, xmm8
	movdqa	xmm9, xmm10
	pmaxub	xmm9, xmm13
	pcmpeqb	xmm9, xmm10
	mov	rax, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + rax + 22]
	movd	xmm10, edx
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rax + 12], 1
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r12 + 12], 2
	pinsrb	xmm6, byte ptr [rsi + r10 + 12], 3
	mov	rdx, r14
	pinsrb	xmm6, byte ptr [rsi + r14 + 12], 4
	pinsrb	xmm6, byte ptr [rsi + rcx + 12], 5
	pinsrb	xmm6, byte ptr [rsi + rdi + 12], 6
	pinsrb	xmm6, byte ptr [rsi + r11 + 12], 7
	pinsrb	xmm6, byte ptr [rsi + r8 + 12], 8
	pinsrb	xmm6, byte ptr [rsi + r13 + 12], 9
	pinsrb	xmm6, byte ptr [rsi + r9 + 12], 10
	mov	r14, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + r14 + 12], 11
	pinsrb	xmm6, byte ptr [rsi + r15 + 12], 12
	mov	rbx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rbx + 12], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rax + 12], 14
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rsi + rax + 12], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rax + 13], 1
	pinsrb	xmm15, byte ptr [rsi + r12 + 13], 2
	pinsrb	xmm15, byte ptr [rsi + r10 + 13], 3
	pinsrb	xmm15, byte ptr [rsi + rdx + 13], 4
	pinsrb	xmm15, byte ptr [rsi + rcx + 13], 5
	pinsrb	xmm15, byte ptr [rsi + rdi + 13], 6
	pinsrb	xmm15, byte ptr [rsi + r11 + 13], 7
	pinsrb	xmm15, byte ptr [rsi + r8 + 13], 8
	pinsrb	xmm15, byte ptr [rsi + r13 + 13], 9
	pinsrb	xmm15, byte ptr [rsi + r9 + 13], 10
	pinsrb	xmm15, byte ptr [rsi + r14 + 13], 11
	pinsrb	xmm15, byte ptr [rsi + r15 + 13], 12
	mov	rax, r15
	pinsrb	xmm15, byte ptr [rsi + rbx + 13], 13
	mov	r15, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + r15 + 13], 14
	pand	xmm1, xmmword ptr [rip + .LCPI10_17]
	pand	xmm9, xmmword ptr [rip + .LCPI10_18]
	por	xmm9, xmm1
	mov	rbx, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + rbx + 23]
	movd	xmm8, edx
	mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rsi + rdx + 13], 15
	por	xmm9, xmm7
	movdqa	xmm1, xmm6
	pmaxub	xmm1, xmm13
	pcmpeqb	xmm1, xmm6
	movdqa	xmm7, xmm15
	pmaxub	xmm7, xmm13
	pcmpeqb	xmm7, xmm15
	movzx	edx, byte ptr [rsi + rbx + 25]
	movd	xmm15, edx
	mov	rbx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + rbx + 14], 1
	pinsrb	xmm14, byte ptr [rsi + r12 + 14], 2
	pinsrb	xmm14, byte ptr [rsi + r10 + 14], 3
	mov	r12, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r12 + 14], 4
	pinsrb	xmm14, byte ptr [rsi + rcx + 14], 5
	pinsrb	xmm14, byte ptr [rsi + rdi + 14], 6
	pinsrb	xmm14, byte ptr [rsi + r11 + 14], 7
	pinsrb	xmm14, byte ptr [rsi + r8 + 14], 8
	mov	rdx, r13
	pinsrb	xmm14, byte ptr [rsi + r13 + 14], 9
	pinsrb	xmm14, byte ptr [rsi + r9 + 14], 10
	pinsrb	xmm14, byte ptr [rsi + r14 + 14], 11
	pinsrb	xmm14, byte ptr [rsi + rax + 14], 12
	mov	r13, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r13 + 14], 13
	pinsrb	xmm14, byte ptr [rsi + r15 + 14], 14
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rsi + r15 + 14], 15
	pinsrb	xmm11, byte ptr [rsi + rbx + 15], 1
	mov	rbx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rbx + 15], 2
	pinsrb	xmm11, byte ptr [rsi + r10 + 15], 3
	pinsrb	xmm11, byte ptr [rsi + r12 + 15], 4
	pinsrb	xmm11, byte ptr [rsi + rcx + 15], 5
	pinsrb	xmm11, byte ptr [rsi + rdi + 15], 6
	pinsrb	xmm11, byte ptr [rsi + r11 + 15], 7
	pinsrb	xmm11, byte ptr [rsi + r8 + 15], 8
	pinsrb	xmm11, byte ptr [rsi + rdx + 15], 9
	pinsrb	xmm11, byte ptr [rsi + r9 + 15], 10
	pinsrb	xmm11, byte ptr [rsi + r14 + 15], 11
	pinsrb	xmm11, byte ptr [rsi + rax + 15], 12
	pinsrb	xmm11, byte ptr [rsi + r13 + 15], 13
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rsi + rdi + 15], 14
	pinsrb	xmm11, byte ptr [rsi + r15 + 15], 15
	mov	r12, r15
	pand	xmm1, xmmword ptr [rip + .LCPI10_19]
	pand	xmm7, xmmword ptr [rip + .LCPI10_20]
	por	xmm7, xmm1
	movdqa	xmm1, xmm14
	pmaxub	xmm1, xmm13
	pcmpeqb	xmm1, xmm14
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + r13 + 26]
	movd	xmm6, edx
	pand	xmm1, xmmword ptr [rip + .LCPI10_21]
	por	xmm1, xmm7
	movzx	edx, byte ptr [rsi + r13 + 27]
	movd	xmm7, edx
	por	xmm1, xmm9
	movdqa	xmm14, xmm11
	pmaxub	xmm14, xmm13
	pcmpeqb	xmm14, xmm11
	movzx	edx, byte ptr [rsi + r13 + 28]
	movd	xmm9, edx
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rcx + 17], 1
	pinsrb	xmm0, byte ptr [rsi + rbx + 17], 2
	pinsrb	xmm0, byte ptr [rsi + r10 + 17], 3
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rax + 17], 4
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r8 + 17], 5
	mov	r9, qword ptr [rsp + 240]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r9 + 17], 6
	pinsrb	xmm0, byte ptr [rsi + r11 + 17], 7
	mov	rbx, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rbx + 17], 8
	mov	rdx, qword ptr [rsp + 272]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 17], 9
	mov	r14, qword ptr [rsp + 256]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r14 + 17], 10
	mov	r15, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + r15 + 17], 11
	mov	rdx, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 17], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rsi + rdx + 17], 13
	pinsrb	xmm0, byte ptr [rsi + rdi + 17], 14
	pinsrb	xmm0, byte ptr [rsi + r12 + 17], 15
	pand	xmm14, xmmword ptr [rip + .LCPI10_6]
	por	xmm14, xmm1
	movdqa	xmm1, xmm0
	movdqa	xmm12, xmm13
	pmaxub	xmm1, xmm13
	pcmpeqb	xmm1, xmm0
	movzx	edx, byte ptr [rsi + r13 + 29]
	movd	xmm0, edx
	pinsrb	xmm4, byte ptr [rsi + rcx + 18], 1
	mov	r12, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r12 + 18], 2
	pinsrb	xmm4, byte ptr [rsi + r10 + 18], 3
	pinsrb	xmm4, byte ptr [rsi + rax + 18], 4
	mov	rcx, r8
	pinsrb	xmm4, byte ptr [rsi + r8 + 18], 5
	mov	rdi, r9
	pinsrb	xmm4, byte ptr [rsi + r9 + 18], 6
	pinsrb	xmm4, byte ptr [rsi + r11 + 18], 7
	mov	r8, rbx
	pinsrb	xmm4, byte ptr [rsi + rbx + 18], 8
	mov	rbx, qword ptr [rsp + 272]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rbx + 18], 9
	mov	r9, r14
	pinsrb	xmm4, byte ptr [rsi + r14 + 18], 10
	mov	r14, r15
	pinsrb	xmm4, byte ptr [rsi + r15 + 18], 11
	mov	r15, qword ptr [rsp + 192]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r15 + 18], 12
	mov	rdx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rdx + 18], 13
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 18], 14
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + r13 + 18], 15
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 19], 1
	pinsrb	xmm5, byte ptr [rsi + r12 + 19], 2
	pinsrb	xmm5, byte ptr [rsi + r10 + 19], 3
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + rax + 19], 4
	pinsrb	xmm5, byte ptr [rsi + rcx + 19], 5
	pinsrb	xmm5, byte ptr [rsi + rdi + 19], 6
	pinsrb	xmm5, byte ptr [rsi + r11 + 19], 7
	pinsrb	xmm5, byte ptr [rsi + r8 + 19], 8
	pinsrb	xmm5, byte ptr [rsi + rbx + 19], 9
	pinsrb	xmm5, byte ptr [rsi + r9 + 19], 10
	pinsrb	xmm5, byte ptr [rsi + r14 + 19], 11
	pinsrb	xmm5, byte ptr [rsi + r15 + 19], 12
	pinsrb	xmm5, byte ptr [rsi + rdx + 19], 13
	mov	rdi, rdx
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rsi + r12 + 19], 14
	pinsrb	xmm5, byte ptr [rsi + r13 + 19], 15
	pand	xmm1, xmmword ptr [rip + .LCPI10_16]
	psubb	xmm1, xmmword ptr [rsp + 432]   # 16-byte Folded Reload
	movdqa	xmm13, xmm4
	pmaxub	xmm13, xmm12
	pcmpeqb	xmm13, xmm4
	movdqa	xmm11, xmm5
	pmaxub	xmm11, xmm12
	pcmpeqb	xmm11, xmm5
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	movzx	edx, byte ptr [rsi + rcx + 30]
	movd	xmm4, edx
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rax + 20], 1
	pinsrb	xmm3, byte ptr [rsi + rax + 21], 1
	pinsrb	xmm10, byte ptr [rsi + rax + 22], 1
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 1
	pinsrb	xmm15, byte ptr [rsi + rax + 25], 1
	pinsrb	xmm6, byte ptr [rsi + rax + 26], 1
	pinsrb	xmm7, byte ptr [rsi + rax + 27], 1
	pinsrb	xmm9, byte ptr [rsi + rax + 28], 1
	pinsrb	xmm0, byte ptr [rsi + rax + 29], 1
	movzx	edx, byte ptr [rsi + rcx + 31]
	pinsrb	xmm4, byte ptr [rsi + rax + 30], 1
	movd	xmm5, edx
	pinsrb	xmm5, byte ptr [rsi + rax + 31], 1
	mov	rax, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rax + 20], 2
	pinsrb	xmm3, byte ptr [rsi + rax + 21], 2
	pinsrb	xmm10, byte ptr [rsi + rax + 22], 2
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 2
	pinsrb	xmm15, byte ptr [rsi + rax + 25], 2
	pinsrb	xmm6, byte ptr [rsi + rax + 26], 2
	pinsrb	xmm7, byte ptr [rsi + rax + 27], 2
	pinsrb	xmm9, byte ptr [rsi + rax + 28], 2
	pinsrb	xmm0, byte ptr [rsi + rax + 29], 2
	pinsrb	xmm4, byte ptr [rsi + rax + 30], 2
	pinsrb	xmm5, byte ptr [rsi + rax + 31], 2
	pinsrb	xmm2, byte ptr [rsi + r10 + 20], 3
	mov	rdx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rdx + 20], 4
	mov	rcx, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rcx + 20], 5
	mov	rax, qword ptr [rsp + 240]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rsi + rax + 20], 6
	pinsrb	xmm2, byte ptr [rsi + r11 + 20], 7
	pinsrb	xmm2, byte ptr [rsi + r8 + 20], 8
	pinsrb	xmm2, byte ptr [rsi + rbx + 20], 9
	pinsrb	xmm2, byte ptr [rsi + r9 + 20], 10
	pinsrb	xmm2, byte ptr [rsi + r14 + 20], 11
	pinsrb	xmm2, byte ptr [rsi + r15 + 20], 12
	pinsrb	xmm2, byte ptr [rsi + rdi + 20], 13
	pinsrb	xmm2, byte ptr [rsi + r12 + 20], 14
	pinsrb	xmm2, byte ptr [rsi + r13 + 20], 15
	pinsrb	xmm3, byte ptr [rsi + r10 + 21], 3
	mov	r9, r10
	pinsrb	xmm3, byte ptr [rsi + rdx + 21], 4
	pinsrb	xmm3, byte ptr [rsi + rcx + 21], 5
	pinsrb	xmm3, byte ptr [rsi + rax + 21], 6
	pinsrb	xmm3, byte ptr [rsi + r11 + 21], 7
	pinsrb	xmm3, byte ptr [rsi + r8 + 21], 8
	pinsrb	xmm3, byte ptr [rsi + rbx + 21], 9
	mov	r8, qword ptr [rsp + 256]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rsi + r8 + 21], 10
	pinsrb	xmm3, byte ptr [rsi + r14 + 21], 11
	pinsrb	xmm3, byte ptr [rsi + r15 + 21], 12
	mov	r10, rdi
	pinsrb	xmm3, byte ptr [rsi + rdi + 21], 13
	pinsrb	xmm3, byte ptr [rsi + r12 + 21], 14
	pand	xmm13, xmmword ptr [rip + .LCPI10_17]
	pand	xmm11, xmmword ptr [rip + .LCPI10_18]
	por	xmm11, xmm13
	pinsrb	xmm3, byte ptr [rsi + r13 + 21], 15
	por	xmm11, xmm1
	movdqa	xmm1, xmm2
	pmaxub	xmm1, xmm12
	pcmpeqb	xmm1, xmm2
	movdqa	xmm2, xmm3
	pmaxub	xmm2, xmm12
	pcmpeqb	xmm2, xmm3
	pinsrb	xmm10, byte ptr [rsi + r9 + 22], 3
	pinsrb	xmm10, byte ptr [rsi + rdx + 22], 4
	pinsrb	xmm10, byte ptr [rsi + rcx + 22], 5
	pinsrb	xmm10, byte ptr [rsi + rax + 22], 6
	pinsrb	xmm10, byte ptr [rsi + r11 + 22], 7
	mov	rdi, qword ptr [rsp + 224]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rsi + rdi + 22], 8
	pinsrb	xmm10, byte ptr [rsi + rbx + 22], 9
	pinsrb	xmm10, byte ptr [rsi + r8 + 22], 10
	pinsrb	xmm10, byte ptr [rsi + r14 + 22], 11
	pinsrb	xmm10, byte ptr [rsi + r15 + 22], 12
	pinsrb	xmm10, byte ptr [rsi + r10 + 22], 13
	pinsrb	xmm10, byte ptr [rsi + r12 + 22], 14
	pinsrb	xmm10, byte ptr [rsi + r13 + 22], 15
	pinsrb	xmm8, byte ptr [rsi + r9 + 23], 3
	pinsrb	xmm8, byte ptr [rsi + rdx + 23], 4
	pinsrb	xmm8, byte ptr [rsi + rcx + 23], 5
	pinsrb	xmm8, byte ptr [rsi + rax + 23], 6
	pinsrb	xmm8, byte ptr [rsi + r11 + 23], 7
	pinsrb	xmm8, byte ptr [rsi + rdi + 23], 8
	pinsrb	xmm8, byte ptr [rsi + rbx + 23], 9
	pinsrb	xmm8, byte ptr [rsi + r8 + 23], 10
	pinsrb	xmm8, byte ptr [rsi + r14 + 23], 11
	pinsrb	xmm8, byte ptr [rsi + r15 + 23], 12
	pinsrb	xmm8, byte ptr [rsi + r10 + 23], 13
	pand	xmm1, xmmword ptr [rip + .LCPI10_19]
	pand	xmm2, xmmword ptr [rip + .LCPI10_20]
	por	xmm2, xmm1
	movdqa	xmm1, xmm10
	pmaxub	xmm1, xmm12
	pcmpeqb	xmm1, xmm10
	pinsrb	xmm8, byte ptr [rsi + r12 + 23], 14
	pand	xmm1, xmmword ptr [rip + .LCPI10_21]
	por	xmm1, xmm2
	pinsrb	xmm8, byte ptr [rsi + r13 + 23], 15
	por	xmm1, xmm11
	movdqa	xmm10, xmm8
	pmaxub	xmm10, xmm12
	pcmpeqb	xmm10, xmm8
	pinsrb	xmm15, byte ptr [rsi + r9 + 25], 3
	pinsrb	xmm15, byte ptr [rsi + rdx + 25], 4
	pinsrb	xmm15, byte ptr [rsi + rcx + 25], 5
	pinsrb	xmm15, byte ptr [rsi + rax + 25], 6
	pinsrb	xmm15, byte ptr [rsi + r11 + 25], 7
	pinsrb	xmm15, byte ptr [rsi + rdi + 25], 8
	pinsrb	xmm15, byte ptr [rsi + rbx + 25], 9
	pinsrb	xmm15, byte ptr [rsi + r8 + 25], 10
	pinsrb	xmm15, byte ptr [rsi + r14 + 25], 11
	pinsrb	xmm15, byte ptr [rsi + r15 + 25], 12
	pinsrb	xmm15, byte ptr [rsi + r10 + 25], 13
	pinsrb	xmm15, byte ptr [rsi + r12 + 25], 14
	pinsrb	xmm15, byte ptr [rsi + r13 + 25], 15
	movdqa	xmm11, xmmword ptr [rip + .LCPI10_6] # xmm11 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm10, xmm11
	por	xmm10, xmm1
	movdqa	xmm3, xmm15
	pmaxub	xmm3, xmm12
	pcmpeqb	xmm3, xmm15
	pinsrb	xmm6, byte ptr [rsi + r9 + 26], 3
	pinsrb	xmm6, byte ptr [rsi + rdx + 26], 4
	pinsrb	xmm6, byte ptr [rsi + rcx + 26], 5
	pinsrb	xmm6, byte ptr [rsi + rax + 26], 6
	pinsrb	xmm6, byte ptr [rsi + r11 + 26], 7
	pinsrb	xmm6, byte ptr [rsi + rdi + 26], 8
	pinsrb	xmm6, byte ptr [rsi + rbx + 26], 9
	pinsrb	xmm6, byte ptr [rsi + r8 + 26], 10
	pinsrb	xmm6, byte ptr [rsi + r14 + 26], 11
	pinsrb	xmm6, byte ptr [rsi + r15 + 26], 12
	pinsrb	xmm6, byte ptr [rsi + r10 + 26], 13
	pinsrb	xmm6, byte ptr [rsi + r12 + 26], 14
	pinsrb	xmm6, byte ptr [rsi + r13 + 26], 15
	pinsrb	xmm7, byte ptr [rsi + r9 + 27], 3
	pinsrb	xmm7, byte ptr [rsi + rdx + 27], 4
	pinsrb	xmm7, byte ptr [rsi + rcx + 27], 5
	pinsrb	xmm7, byte ptr [rsi + rax + 27], 6
	pinsrb	xmm7, byte ptr [rsi + r11 + 27], 7
	pinsrb	xmm7, byte ptr [rsi + rdi + 27], 8
	pinsrb	xmm7, byte ptr [rsi + rbx + 27], 9
	pinsrb	xmm7, byte ptr [rsi + r8 + 27], 10
	pinsrb	xmm7, byte ptr [rsi + r14 + 27], 11
	pinsrb	xmm7, byte ptr [rsi + r15 + 27], 12
	pinsrb	xmm7, byte ptr [rsi + r10 + 27], 13
	pinsrb	xmm7, byte ptr [rsi + r12 + 27], 14
	pinsrb	xmm7, byte ptr [rsi + r13 + 27], 15
	pand	xmm3, xmmword ptr [rip + .LCPI10_16]
	psubb	xmm3, xmmword ptr [rsp + 320]   # 16-byte Folded Reload
	movdqa	xmm2, xmm6
	pmaxub	xmm2, xmm12
	pcmpeqb	xmm2, xmm6
	movdqa	xmm1, xmm7
	pmaxub	xmm1, xmm12
	pcmpeqb	xmm1, xmm7
	pinsrb	xmm9, byte ptr [rsi + r9 + 28], 3
	pinsrb	xmm9, byte ptr [rsi + rdx + 28], 4
	pinsrb	xmm9, byte ptr [rsi + rcx + 28], 5
	pinsrb	xmm9, byte ptr [rsi + rax + 28], 6
	pinsrb	xmm9, byte ptr [rsi + r11 + 28], 7
	pinsrb	xmm9, byte ptr [rsi + rdi + 28], 8
	pinsrb	xmm9, byte ptr [rsi + rbx + 28], 9
	pinsrb	xmm9, byte ptr [rsi + r8 + 28], 10
	pinsrb	xmm9, byte ptr [rsi + r14 + 28], 11
	pinsrb	xmm9, byte ptr [rsi + r15 + 28], 12
	pinsrb	xmm9, byte ptr [rsi + r10 + 28], 13
	pinsrb	xmm9, byte ptr [rsi + r12 + 28], 14
	pinsrb	xmm9, byte ptr [rsi + r13 + 28], 15
	pinsrb	xmm0, byte ptr [rsi + r9 + 29], 3
	pinsrb	xmm0, byte ptr [rsi + rdx + 29], 4
	pinsrb	xmm0, byte ptr [rsi + rcx + 29], 5
	pinsrb	xmm0, byte ptr [rsi + rax + 29], 6
	pinsrb	xmm0, byte ptr [rsi + r11 + 29], 7
	pinsrb	xmm0, byte ptr [rsi + rdi + 29], 8
	pinsrb	xmm0, byte ptr [rsi + rbx + 29], 9
	pinsrb	xmm0, byte ptr [rsi + r8 + 29], 10
	pinsrb	xmm0, byte ptr [rsi + r14 + 29], 11
	pinsrb	xmm0, byte ptr [rsi + r15 + 29], 12
	pinsrb	xmm0, byte ptr [rsi + r10 + 29], 13
	pinsrb	xmm0, byte ptr [rsi + r12 + 29], 14
	pinsrb	xmm0, byte ptr [rsi + r13 + 29], 15
	pand	xmm2, xmmword ptr [rip + .LCPI10_17]
	pand	xmm1, xmmword ptr [rip + .LCPI10_18]
	por	xmm1, xmm2
	por	xmm1, xmm3
	movdqa	xmm2, xmm9
	pmaxub	xmm2, xmm12
	pcmpeqb	xmm2, xmm9
	movdqa	xmm3, xmm0
	pmaxub	xmm3, xmm12
	pcmpeqb	xmm3, xmm0
	pinsrb	xmm4, byte ptr [rsi + r9 + 30], 3
	pinsrb	xmm5, byte ptr [rsi + r9 + 31], 3
	pinsrb	xmm4, byte ptr [rsi + rdx + 30], 4
	pinsrb	xmm5, byte ptr [rsi + rdx + 31], 4
	pinsrb	xmm4, byte ptr [rsi + rcx + 30], 5
	pinsrb	xmm5, byte ptr [rsi + rcx + 31], 5
	pinsrb	xmm4, byte ptr [rsi + rax + 30], 6
	pinsrb	xmm5, byte ptr [rsi + rax + 31], 6
	pinsrb	xmm4, byte ptr [rsi + r11 + 30], 7
	pinsrb	xmm5, byte ptr [rsi + r11 + 31], 7
	mov	rax, rdi
	pinsrb	xmm4, byte ptr [rsi + rdi + 30], 8
	pinsrb	xmm5, byte ptr [rsi + rdi + 31], 8
	pinsrb	xmm4, byte ptr [rsi + rbx + 30], 9
	pinsrb	xmm5, byte ptr [rsi + rbx + 31], 9
	mov	r14, qword ptr [rsp + 352]      # 8-byte Reload
	mov	rax, r8
	pinsrb	xmm4, byte ptr [rsi + r8 + 30], 10
	pinsrb	xmm5, byte ptr [rsi + r8 + 31], 10
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rsi + rax + 30], 11
	pinsrb	xmm5, byte ptr [rsi + rax + 31], 11
	pinsrb	xmm4, byte ptr [rsi + r15 + 30], 12
	pinsrb	xmm5, byte ptr [rsi + r15 + 31], 12
	pinsrb	xmm4, byte ptr [rsi + r10 + 30], 13
	pinsrb	xmm5, byte ptr [rsi + r10 + 31], 13
	pinsrb	xmm4, byte ptr [rsi + r12 + 30], 14
	pinsrb	xmm5, byte ptr [rsi + r12 + 31], 14
	pinsrb	xmm4, byte ptr [rsi + r13 + 30], 15
	pand	xmm2, xmmword ptr [rip + .LCPI10_19]
	pand	xmm3, xmmword ptr [rip + .LCPI10_20]
	por	xmm3, xmm2
	movdqa	xmm0, xmm4
	pmaxub	xmm0, xmm12
	pcmpeqb	xmm0, xmm4
	pinsrb	xmm5, byte ptr [rsi + r13 + 31], 15
	pand	xmm0, xmmword ptr [rip + .LCPI10_21]
	por	xmm0, xmm3
	por	xmm0, xmm1
	movdqa	xmm1, xmm5
	pmaxub	xmm1, xmm12
	pcmpeqb	xmm1, xmm5
	pand	xmm1, xmm11
	por	xmm1, xmm0
	movdqa	xmm0, xmm10
	punpcklbw	xmm0, xmm1              # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	movdqa	xmm4, xmmword ptr [rsp + 160]   # 16-byte Reload
	movdqa	xmm2, xmm4
	punpcklbw	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0],xmm2[1],xmm14[1],xmm2[2],xmm14[2],xmm2[3],xmm14[3],xmm2[4],xmm14[4],xmm2[5],xmm14[5],xmm2[6],xmm14[6],xmm2[7],xmm14[7]
	movdqa	xmm3, xmm2
	punpcklwd	xmm3, xmm0              # xmm3 = xmm3[0],xmm0[0],xmm3[1],xmm0[1],xmm3[2],xmm0[2],xmm3[3],xmm0[3]
	punpckhwd	xmm2, xmm0              # xmm2 = xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
	punpckhbw	xmm10, xmm1             # xmm10 = xmm10[8],xmm1[8],xmm10[9],xmm1[9],xmm10[10],xmm1[10],xmm10[11],xmm1[11],xmm10[12],xmm1[12],xmm10[13],xmm1[13],xmm10[14],xmm1[14],xmm10[15],xmm1[15]
	punpckhbw	xmm4, xmm14             # xmm4 = xmm4[8],xmm14[8],xmm4[9],xmm14[9],xmm4[10],xmm14[10],xmm4[11],xmm14[11],xmm4[12],xmm14[12],xmm4[13],xmm14[13],xmm4[14],xmm14[14],xmm4[15],xmm14[15]
	movdqa	xmm0, xmm4
	punpcklwd	xmm0, xmm10             # xmm0 = xmm0[0],xmm10[0],xmm0[1],xmm10[1],xmm0[2],xmm10[2],xmm0[3],xmm10[3]
	punpckhwd	xmm4, xmm10             # xmm4 = xmm4[4],xmm10[4],xmm4[5],xmm10[5],xmm4[6],xmm10[6],xmm4[7],xmm10[7]
	mov	rcx, qword ptr [rsp + 336]      # 8-byte Reload
	movdqu	xmmword ptr [r14 + 4*rcx + 48], xmm4
	movdqu	xmmword ptr [r14 + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [r14 + 4*rcx + 16], xmm2
	movdqu	xmmword ptr [r14 + 4*rcx], xmm3
	add	rcx, 16
	mov	rdx, rcx
	cmp	rcx, qword ptr [rsp + 416]      # 8-byte Folded Reload
	jne	.LBB10_195
# %bb.196:
	mov	r15, qword ptr [rsp + 464]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 416]      # 8-byte Folded Reload
	mov	r11b, byte ptr [rsp + 8]        # 1-byte Reload
	mov	rsi, qword ptr [rsp + 392]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	jne	.LBB10_67
	jmp	.LBB10_132
.LBB10_197:
	mov	rax, r15
	and	rax, -8
	mov	r11, rax
	shl	r11, 6
	add	r11, rsi
	mov	qword ptr [rsp + 400], rax      # 8-byte Spill
	lea	rax, [r14 + 4*rax]
	mov	qword ptr [rsp + 8], rax        # 8-byte Spill
	movd	xmm0, dword ptr [rsp + 392]     # 4-byte Folded Reload
                                        # xmm0 = mem[0],zero,zero,zero
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm0, xmm0, 0                   # xmm0 = xmm0[0,0,0,0]
	movdqa	xmmword ptr [rsp + 464], xmm0   # 16-byte Spill
	xor	r10d, r10d
	.p2align	4, 0x90
.LBB10_198:                             # =>This Inner Loop Header: Depth=1
	mov	r9, r10
	shl	r9, 6
	mov	r8, r9
	mov	rdi, r9
	mov	rbx, r9
	mov	r15, r9
	mov	r12, r9
	mov	r13, r9
	movzx	ecx, word ptr [rsi + r9]
	movd	xmm11, ecx
	movzx	ecx, word ptr [rsi + r9 + 2]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 16], xmm0    # 16-byte Spill
	movzx	ecx, word ptr [rsi + r9 + 4]
	movd	xmm9, ecx
	movzx	ecx, word ptr [rsi + r9 + 6]
	movd	xmm10, ecx
	movzx	ecx, word ptr [rsi + r9 + 8]
	movd	xmm12, ecx
	movzx	ecx, word ptr [rsi + r9 + 10]
	movd	xmm13, ecx
	movzx	ecx, word ptr [rsi + r9 + 12]
	movd	xmm14, ecx
	movzx	ecx, word ptr [rsi + r9 + 14]
	movd	xmm8, ecx
	movzx	ecx, word ptr [rsi + r9 + 16]
	movd	xmm1, ecx
	movzx	ecx, word ptr [rsi + r9 + 18]
	movd	xmm2, ecx
	movzx	ecx, word ptr [rsi + r9 + 20]
	movd	xmm3, ecx
	movzx	ecx, word ptr [rsi + r9 + 22]
	movd	xmm4, ecx
	movzx	ecx, word ptr [rsi + r9 + 24]
	movd	xmm5, ecx
	movzx	ecx, word ptr [rsi + r9 + 26]
	movd	xmm6, ecx
	movzx	eax, word ptr [rsi + r9 + 28]
	movzx	edx, word ptr [rsi + r9 + 30]
	mov	rcx, r9
	or	rcx, 64
	or	r8, 128
	or	rdi, 192
	or	rbx, 256
	or	r15, 320
	or	r12, 384
	or	r13, 448
	pinsrw	xmm11, word ptr [rsi + rcx], 1
	pinsrw	xmm11, word ptr [rsi + r8], 2
	pinsrw	xmm11, word ptr [rsi + rdi], 3
	pinsrw	xmm11, word ptr [rsi + rbx], 4
	pinsrw	xmm11, word ptr [rsi + r15], 5
	pinsrw	xmm11, word ptr [rsi + r12], 6
	pinsrw	xmm11, word ptr [rsi + r13], 7
	movd	xmm15, eax
	movdqa	xmm0, xmmword ptr [rsp + 464]   # 16-byte Reload
	movdqa	xmm7, xmm0
	pcmpgtw	xmm7, xmm11
	movdqa	xmmword ptr [rsp + 352], xmm7   # 16-byte Spill
	movdqa	xmm7, xmmword ptr [rsp + 16]    # 16-byte Reload
	pinsrw	xmm7, word ptr [rsi + rcx + 2], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 2], 2
	pinsrw	xmm7, word ptr [rsi + rdi + 2], 3
	pinsrw	xmm7, word ptr [rsi + rbx + 2], 4
	pinsrw	xmm7, word ptr [rsi + r15 + 2], 5
	pinsrw	xmm7, word ptr [rsi + r12 + 2], 6
	pinsrw	xmm7, word ptr [rsi + r13 + 2], 7
	movdqa	xmm11, xmm0
	pinsrw	xmm9, word ptr [rsi + rcx + 4], 1
	pinsrw	xmm9, word ptr [rsi + r8 + 4], 2
	pinsrw	xmm9, word ptr [rsi + rdi + 4], 3
	pinsrw	xmm9, word ptr [rsi + rbx + 4], 4
	pinsrw	xmm9, word ptr [rsi + r15 + 4], 5
	pinsrw	xmm9, word ptr [rsi + r12 + 4], 6
	pcmpgtw	xmm11, xmm7
	pinsrw	xmm9, word ptr [rsi + r13 + 4], 7
	movdqa	xmm7, xmm0
	pcmpgtw	xmm7, xmm9
	movdqa	xmmword ptr [rsp + 80], xmm7    # 16-byte Spill
	pinsrw	xmm10, word ptr [rsi + rcx + 6], 1
	pinsrw	xmm10, word ptr [rsi + r8 + 6], 2
	pinsrw	xmm10, word ptr [rsi + rdi + 6], 3
	pinsrw	xmm10, word ptr [rsi + rbx + 6], 4
	pinsrw	xmm10, word ptr [rsi + r15 + 6], 5
	pinsrw	xmm10, word ptr [rsi + r12 + 6], 6
	pinsrw	xmm10, word ptr [rsi + r13 + 6], 7
	movdqa	xmm7, xmm0
	pinsrw	xmm12, word ptr [rsi + rcx + 8], 1
	pinsrw	xmm12, word ptr [rsi + r8 + 8], 2
	pinsrw	xmm12, word ptr [rsi + rdi + 8], 3
	pinsrw	xmm12, word ptr [rsi + rbx + 8], 4
	pinsrw	xmm12, word ptr [rsi + r15 + 8], 5
	pinsrw	xmm12, word ptr [rsi + r12 + 8], 6
	pinsrw	xmm12, word ptr [rsi + r13 + 8], 7
	pcmpgtw	xmm7, xmm10
	movdqa	xmmword ptr [rsp + 112], xmm7   # 16-byte Spill
	movdqa	xmm7, xmm0
	pcmpgtw	xmm7, xmm12
	movdqa	xmmword ptr [rsp + 32], xmm7    # 16-byte Spill
	pinsrw	xmm13, word ptr [rsi + rcx + 10], 1
	pinsrw	xmm13, word ptr [rsi + r8 + 10], 2
	pinsrw	xmm13, word ptr [rsi + rdi + 10], 3
	pinsrw	xmm13, word ptr [rsi + rbx + 10], 4
	pinsrw	xmm13, word ptr [rsi + r15 + 10], 5
	pinsrw	xmm13, word ptr [rsi + r12 + 10], 6
	pinsrw	xmm13, word ptr [rsi + r13 + 10], 7
	movdqa	xmm7, xmm0
	pinsrw	xmm14, word ptr [rsi + rcx + 12], 1
	pinsrw	xmm14, word ptr [rsi + r8 + 12], 2
	pinsrw	xmm14, word ptr [rsi + rdi + 12], 3
	pinsrw	xmm14, word ptr [rsi + rbx + 12], 4
	pinsrw	xmm14, word ptr [rsi + r15 + 12], 5
	pinsrw	xmm14, word ptr [rsi + r12 + 12], 6
	pcmpgtw	xmm7, xmm13
	movdqa	xmmword ptr [rsp + 128], xmm7   # 16-byte Spill
	pinsrw	xmm14, word ptr [rsi + r13 + 12], 7
	movdqa	xmm7, xmm0
	pcmpgtw	xmm7, xmm14
	movdqa	xmm14, xmm7
	pinsrw	xmm8, word ptr [rsi + rcx + 14], 1
	pinsrw	xmm8, word ptr [rsi + r8 + 14], 2
	pinsrw	xmm8, word ptr [rsi + rdi + 14], 3
	pinsrw	xmm8, word ptr [rsi + rbx + 14], 4
	pinsrw	xmm8, word ptr [rsi + r15 + 14], 5
	pinsrw	xmm8, word ptr [rsi + r12 + 14], 6
	pinsrw	xmm8, word ptr [rsi + r13 + 14], 7
	movdqa	xmm7, xmm0
	pinsrw	xmm1, word ptr [rsi + rcx + 16], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 16], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 16], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 16], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 16], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 16], 6
	pinsrw	xmm1, word ptr [rsi + r13 + 16], 7
	pcmpgtw	xmm7, xmm8
	movdqa	xmmword ptr [rsp + 96], xmm7    # 16-byte Spill
	movdqa	xmm7, xmm0
	pcmpgtw	xmm7, xmm1
	movdqa	xmmword ptr [rsp + 432], xmm7   # 16-byte Spill
	pinsrw	xmm2, word ptr [rsi + rcx + 18], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 18], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 18], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 18], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 18], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 18], 6
	pinsrw	xmm2, word ptr [rsi + r13 + 18], 7
	movdqa	xmm1, xmm0
	pinsrw	xmm3, word ptr [rsi + rcx + 20], 1
	pinsrw	xmm3, word ptr [rsi + r8 + 20], 2
	pinsrw	xmm3, word ptr [rsi + rdi + 20], 3
	pinsrw	xmm3, word ptr [rsi + rbx + 20], 4
	pinsrw	xmm3, word ptr [rsi + r15 + 20], 5
	pinsrw	xmm3, word ptr [rsi + r12 + 20], 6
	pcmpgtw	xmm1, xmm2
	movdqa	xmmword ptr [rsp + 176], xmm1   # 16-byte Spill
	pinsrw	xmm3, word ptr [rsi + r13 + 20], 7
	movdqa	xmm1, xmm0
	pcmpgtw	xmm1, xmm3
	movdqa	xmmword ptr [rsp + 48], xmm1    # 16-byte Spill
	pinsrw	xmm4, word ptr [rsi + rcx + 22], 1
	pinsrw	xmm4, word ptr [rsi + r8 + 22], 2
	pinsrw	xmm4, word ptr [rsi + rdi + 22], 3
	pinsrw	xmm4, word ptr [rsi + rbx + 22], 4
	pinsrw	xmm4, word ptr [rsi + r15 + 22], 5
	pinsrw	xmm4, word ptr [rsi + r12 + 22], 6
	pinsrw	xmm4, word ptr [rsi + r13 + 22], 7
	movdqa	xmm1, xmm0
	pinsrw	xmm5, word ptr [rsi + rcx + 24], 1
	pinsrw	xmm5, word ptr [rsi + r8 + 24], 2
	pinsrw	xmm5, word ptr [rsi + rdi + 24], 3
	pinsrw	xmm5, word ptr [rsi + rbx + 24], 4
	pinsrw	xmm5, word ptr [rsi + r15 + 24], 5
	pinsrw	xmm5, word ptr [rsi + r12 + 24], 6
	pinsrw	xmm5, word ptr [rsi + r13 + 24], 7
	pcmpgtw	xmm1, xmm4
	movdqa	xmmword ptr [rsp + 192], xmm1   # 16-byte Spill
	movdqa	xmm1, xmm0
	pcmpgtw	xmm1, xmm5
	movdqa	xmmword ptr [rsp + 16], xmm1    # 16-byte Spill
	pinsrw	xmm6, word ptr [rsi + rcx + 26], 1
	pinsrw	xmm6, word ptr [rsi + r8 + 26], 2
	pinsrw	xmm6, word ptr [rsi + rdi + 26], 3
	pinsrw	xmm6, word ptr [rsi + rbx + 26], 4
	pinsrw	xmm6, word ptr [rsi + r15 + 26], 5
	pinsrw	xmm6, word ptr [rsi + r12 + 26], 6
	pinsrw	xmm6, word ptr [rsi + r13 + 26], 7
	movdqa	xmm1, xmm0
	pinsrw	xmm15, word ptr [rsi + rcx + 28], 1
	pinsrw	xmm15, word ptr [rsi + r8 + 28], 2
	pinsrw	xmm15, word ptr [rsi + rdi + 28], 3
	pinsrw	xmm15, word ptr [rsi + rbx + 28], 4
	pinsrw	xmm15, word ptr [rsi + r15 + 28], 5
	pinsrw	xmm15, word ptr [rsi + r12 + 28], 6
	pcmpgtw	xmm1, xmm6
	movdqa	xmmword ptr [rsp + 208], xmm1   # 16-byte Spill
	pinsrw	xmm15, word ptr [rsi + r13 + 28], 7
	movd	xmm1, edx
	pinsrw	xmm1, word ptr [rsi + rcx + 30], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 30], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 30], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 30], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 30], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 30], 6
	movdqa	xmm2, xmm0
	pcmpgtw	xmm2, xmm15
	movdqa	xmmword ptr [rsp + 240], xmm2   # 16-byte Spill
	pinsrw	xmm1, word ptr [rsi + r13 + 30], 7
	movdqa	xmm2, xmm0
	pcmpgtw	xmm2, xmm1
	movdqa	xmmword ptr [rsp + 144], xmm2   # 16-byte Spill
	movzx	eax, word ptr [rsi + r9 + 32]
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rsi + rcx + 32], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 32], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 32], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 32], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 32], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 32], 6
	pinsrw	xmm1, word ptr [rsi + r13 + 32], 7
	movzx	eax, word ptr [rsi + r9 + 34]
	movd	xmm2, eax
	pinsrw	xmm2, word ptr [rsi + rcx + 34], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 34], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 34], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 34], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 34], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 34], 6
	pinsrw	xmm2, word ptr [rsi + r13 + 34], 7
	movdqa	xmm3, xmm0
	pcmpgtw	xmm3, xmm1
	movdqa	xmmword ptr [rsp + 224], xmm3   # 16-byte Spill
	movdqa	xmm1, xmm0
	pcmpgtw	xmm1, xmm2
	movdqa	xmmword ptr [rsp + 288], xmm1   # 16-byte Spill
	movzx	eax, word ptr [rsi + r9 + 36]
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rsi + rcx + 36], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 36], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 36], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 36], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 36], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 36], 6
	movzx	eax, word ptr [rsi + r9 + 38]
	pinsrw	xmm1, word ptr [rsi + r13 + 36], 7
	movd	xmm2, eax
	pinsrw	xmm2, word ptr [rsi + rcx + 38], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 38], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 38], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 38], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 38], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 38], 6
	movdqa	xmm3, xmm0
	pcmpgtw	xmm3, xmm1
	movdqa	xmmword ptr [rsp + 256], xmm3   # 16-byte Spill
	pinsrw	xmm2, word ptr [rsi + r13 + 38], 7
	movdqa	xmm1, xmm0
	pcmpgtw	xmm1, xmm2
	movdqa	xmmword ptr [rsp + 272], xmm1   # 16-byte Spill
	movzx	eax, word ptr [rsi + r9 + 40]
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rsi + rcx + 40], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 40], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 40], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 40], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 40], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 40], 6
	pinsrw	xmm1, word ptr [rsi + r13 + 40], 7
	movzx	eax, word ptr [rsi + r9 + 42]
	movd	xmm2, eax
	pinsrw	xmm2, word ptr [rsi + rcx + 42], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 42], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 42], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 42], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 42], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 42], 6
	pinsrw	xmm2, word ptr [rsi + r13 + 42], 7
	movdqa	xmm3, xmm0
	pcmpgtw	xmm3, xmm1
	movdqa	xmmword ptr [rsp + 304], xmm3   # 16-byte Spill
	movdqa	xmm1, xmm0
	pcmpgtw	xmm1, xmm2
	movdqa	xmmword ptr [rsp + 336], xmm1   # 16-byte Spill
	movzx	eax, word ptr [rsi + r9 + 44]
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rsi + rcx + 44], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 44], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 44], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 44], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 44], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 44], 6
	movzx	eax, word ptr [rsi + r9 + 46]
	pinsrw	xmm1, word ptr [rsi + r13 + 44], 7
	movd	xmm2, eax
	pinsrw	xmm2, word ptr [rsi + rcx + 46], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 46], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 46], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 46], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 46], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 46], 6
	movdqa	xmm3, xmm0
	pcmpgtw	xmm3, xmm1
	movdqa	xmmword ptr [rsp + 320], xmm3   # 16-byte Spill
	pinsrw	xmm2, word ptr [rsi + r13 + 46], 7
	movdqa	xmm1, xmm0
	pcmpgtw	xmm1, xmm2
	movdqa	xmmword ptr [rsp + 160], xmm1   # 16-byte Spill
	movzx	eax, word ptr [rsi + r9 + 48]
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rsi + rcx + 48], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 48], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 48], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 48], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 48], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 48], 6
	pinsrw	xmm1, word ptr [rsi + r13 + 48], 7
	movzx	eax, word ptr [rsi + r9 + 50]
	movd	xmm2, eax
	pinsrw	xmm2, word ptr [rsi + rcx + 50], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 50], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 50], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 50], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 50], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 50], 6
	pinsrw	xmm2, word ptr [rsi + r13 + 50], 7
	movdqa	xmm13, xmm0
	pcmpgtw	xmm13, xmm1
	movdqa	xmm1, xmm0
	pcmpgtw	xmm1, xmm2
	movdqa	xmmword ptr [rsp + 368], xmm1   # 16-byte Spill
	movzx	eax, word ptr [rsi + r9 + 52]
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rsi + rcx + 52], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 52], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 52], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 52], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 52], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 52], 6
	movzx	eax, word ptr [rsi + r9 + 54]
	pinsrw	xmm1, word ptr [rsi + r13 + 52], 7
	movd	xmm2, eax
	pinsrw	xmm2, word ptr [rsi + rcx + 54], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 54], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 54], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 54], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 54], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 54], 6
	movdqa	xmm3, xmm0
	pcmpgtw	xmm3, xmm1
	movdqa	xmmword ptr [rsp + 416], xmm3   # 16-byte Spill
	pinsrw	xmm2, word ptr [rsi + r13 + 54], 7
	movdqa	xmm15, xmm0
	pcmpgtw	xmm15, xmm2
	movzx	eax, word ptr [rsi + r9 + 56]
	movd	xmm1, eax
	pinsrw	xmm1, word ptr [rsi + rcx + 56], 1
	pinsrw	xmm1, word ptr [rsi + r8 + 56], 2
	pinsrw	xmm1, word ptr [rsi + rdi + 56], 3
	pinsrw	xmm1, word ptr [rsi + rbx + 56], 4
	pinsrw	xmm1, word ptr [rsi + r15 + 56], 5
	pinsrw	xmm1, word ptr [rsi + r12 + 56], 6
	pinsrw	xmm1, word ptr [rsi + r13 + 56], 7
	movzx	eax, word ptr [rsi + r9 + 58]
	movd	xmm2, eax
	pinsrw	xmm2, word ptr [rsi + rcx + 58], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 58], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 58], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 58], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 58], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 58], 6
	pinsrw	xmm2, word ptr [rsi + r13 + 58], 7
	movdqa	xmm9, xmm0
	pcmpgtw	xmm9, xmm1
	movdqa	xmm12, xmm0
	pcmpgtw	xmm12, xmm2
	movzx	eax, word ptr [rsi + r9 + 60]
	movd	xmm2, eax
	pinsrw	xmm2, word ptr [rsi + rcx + 60], 1
	pinsrw	xmm2, word ptr [rsi + r8 + 60], 2
	pinsrw	xmm2, word ptr [rsi + rdi + 60], 3
	pinsrw	xmm2, word ptr [rsi + rbx + 60], 4
	pinsrw	xmm2, word ptr [rsi + r15 + 60], 5
	pinsrw	xmm2, word ptr [rsi + r12 + 60], 6
	movzx	eax, word ptr [rsi + r9 + 62]
	pinsrw	xmm2, word ptr [rsi + r13 + 60], 7
	movd	xmm7, eax
	pinsrw	xmm7, word ptr [rsi + rcx + 62], 1
	pinsrw	xmm7, word ptr [rsi + r8 + 62], 2
	pinsrw	xmm7, word ptr [rsi + rdi + 62], 3
	pinsrw	xmm7, word ptr [rsi + rbx + 62], 4
	pinsrw	xmm7, word ptr [rsi + r15 + 62], 5
	pinsrw	xmm7, word ptr [rsi + r12 + 62], 6
	movdqa	xmm5, xmm0
	pcmpgtw	xmm5, xmm2
	pinsrw	xmm7, word ptr [rsi + r13 + 62], 7
	movdqa	xmm6, xmm0
	pcmpgtw	xmm6, xmm7
	packsswb	xmm11, xmm11
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_8] # xmm1 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm7, xmm1
	movdqa	xmm3, xmm1
	movdqa	xmm0, xmm11
	pxor	xmm4, xmm4
	pblendvb	xmm7, xmm4, xmm0
	movdqa	xmm2, xmmword ptr [rsp + 80]    # 16-byte Reload
	packsswb	xmm2, xmm2
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_9] # xmm1 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm1, xmm4, xmm0
	pcmpeqd	xmm2, xmm2
	movdqa	xmm0, xmmword ptr [rsp + 352]   # 16-byte Reload
	pxor	xmm0, xmm2
	pcmpeqd	xmm8, xmm8
	packsswb	xmm0, xmm0
	psubb	xmm7, xmm0
	movdqa	xmm2, xmmword ptr [rsp + 112]   # 16-byte Reload
	packsswb	xmm2, xmm2
	movdqa	xmm11, xmmword ptr [rip + .LCPI10_10] # xmm11 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm11, xmm4, xmm0
	por	xmm11, xmm1
	movdqa	xmm2, xmmword ptr [rsp + 32]    # 16-byte Reload
	packsswb	xmm2, xmm2
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_11] # xmm1 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm1, xmm4, xmm0
	por	xmm11, xmm7
	movdqa	xmm2, xmmword ptr [rsp + 128]   # 16-byte Reload
	packsswb	xmm2, xmm2
	movdqa	xmm10, xmmword ptr [rip + .LCPI10_12] # xmm10 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm7, xmm10
	movdqa	xmm0, xmm2
	pblendvb	xmm7, xmm4, xmm0
	por	xmm7, xmm1
	packsswb	xmm14, xmm14
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_13] # xmm1 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm14
	pblendvb	xmm1, xmm4, xmm0
	por	xmm1, xmm7
	movdqa	xmm2, xmmword ptr [rsp + 96]    # 16-byte Reload
	packsswb	xmm2, xmm2
	movdqa	xmm14, xmmword ptr [rip + .LCPI10_14] # xmm14 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm14, xmm4, xmm0
	por	xmm1, xmm11
	movdqa	xmm0, xmmword ptr [rsp + 176]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm11, xmm3
	movdqa	xmm7, xmm3
	pblendvb	xmm7, xmm4, xmm0
	por	xmm14, xmm1
	movdqa	xmm0, xmmword ptr [rsp + 432]   # 16-byte Reload
	pxor	xmm0, xmm8
	packsswb	xmm0, xmm0
	psubb	xmm7, xmm0
	movdqa	xmm0, xmmword ptr [rsp + 48]    # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm3, xmmword ptr [rip + .LCPI10_9] # xmm3 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm1, xmm3
	pblendvb	xmm1, xmm4, xmm0
	movdqa	xmm0, xmmword ptr [rsp + 192]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm8, xmmword ptr [rip + .LCPI10_10] # xmm8 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm2, xmm8
	pblendvb	xmm2, xmm4, xmm0
	por	xmm2, xmm1
	por	xmm2, xmm7
	movdqa	xmm0, xmmword ptr [rsp + 16]    # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_11] # xmm1 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	pblendvb	xmm1, xmm4, xmm0
	movdqa	xmm0, xmmword ptr [rsp + 208]   # 16-byte Reload
	packsswb	xmm0, xmm0
	pblendvb	xmm10, xmm4, xmm0
	por	xmm10, xmm1
	movdqa	xmm0, xmmword ptr [rsp + 240]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_13] # xmm1 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	pblendvb	xmm1, xmm4, xmm0
	por	xmm1, xmm10
	por	xmm1, xmm2
	movdqa	xmm0, xmmword ptr [rsp + 144]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm10, xmmword ptr [rip + .LCPI10_14] # xmm10 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	pblendvb	xmm10, xmm4, xmm0
	por	xmm10, xmm1
	movdqa	xmm0, xmmword ptr [rsp + 288]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm1, xmm11
	pblendvb	xmm1, xmm4, xmm0
	movdqa	xmm0, xmmword ptr [rsp + 256]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm2, xmm3
	pblendvb	xmm2, xmm4, xmm0
	movdqa	xmm0, xmmword ptr [rsp + 224]   # 16-byte Reload
	pxor	xmm0, xmmword ptr [rip + .LCPI10_22]
	pcmpeqd	xmm3, xmm3
	packsswb	xmm0, xmm0
	psubb	xmm1, xmm0
	movdqa	xmm0, xmmword ptr [rsp + 272]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm7, xmm8
	pblendvb	xmm7, xmm4, xmm0
	por	xmm7, xmm2
	movdqa	xmm0, xmmword ptr [rsp + 304]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm11, xmmword ptr [rsp + 336]  # 16-byte Reload
	packsswb	xmm11, xmm11
	por	xmm7, xmm1
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_11] # xmm1 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	pblendvb	xmm1, xmm4, xmm0
	movdqa	xmm2, xmmword ptr [rip + .LCPI10_12] # xmm2 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm11
	pblendvb	xmm2, xmm4, xmm0
	movdqa	xmm0, xmmword ptr [rsp + 320]   # 16-byte Reload
	packsswb	xmm0, xmm0
	por	xmm2, xmm1
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_13] # xmm1 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	pblendvb	xmm1, xmm4, xmm0
	por	xmm1, xmm2
	movdqa	xmm0, xmmword ptr [rsp + 160]   # 16-byte Reload
	packsswb	xmm0, xmm0
	movdqa	xmm11, xmmword ptr [rsp + 368]  # 16-byte Reload
	packsswb	xmm11, xmm11
	por	xmm1, xmm7
	movdqa	xmm7, xmmword ptr [rip + .LCPI10_14] # xmm7 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	pblendvb	xmm7, xmm4, xmm0
	movdqa	xmm2, xmmword ptr [rip + .LCPI10_8] # xmm2 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm11
	pblendvb	xmm2, xmm4, xmm0
	por	xmm7, xmm1
	pxor	xmm13, xmm3
	packsswb	xmm13, xmm13
	movdqa	xmm0, xmmword ptr [rsp + 416]   # 16-byte Reload
	packsswb	xmm0, xmm0
	packsswb	xmm15, xmm15
	psubb	xmm2, xmm13
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_9] # xmm1 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	pblendvb	xmm1, xmm4, xmm0
	movdqa	xmm0, xmm15
	pblendvb	xmm8, xmm4, xmm0
	por	xmm8, xmm1
	packsswb	xmm9, xmm9
	packsswb	xmm12, xmm12
	por	xmm8, xmm2
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_11] # xmm1 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm9
	pblendvb	xmm1, xmm4, xmm0
	movdqa	xmm2, xmmword ptr [rip + .LCPI10_12] # xmm2 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm12
	pblendvb	xmm2, xmm4, xmm0
	packsswb	xmm5, xmm5
	por	xmm2, xmm1
	movdqa	xmm1, xmmword ptr [rip + .LCPI10_13] # xmm1 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm5
	pblendvb	xmm1, xmm4, xmm0
	por	xmm1, xmm2
	packsswb	xmm6, xmm6
	por	xmm1, xmm8
	movdqa	xmm2, xmmword ptr [rip + .LCPI10_14] # xmm2 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm6
	pblendvb	xmm2, xmm4, xmm0
	por	xmm2, xmm1
	movdqa	xmm0, xmm14
	punpcklqdq	xmm0, xmm10             # xmm0 = xmm0[0],xmm10[0]
	movdqa	xmm1, xmm7
	punpcklqdq	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0]
	movdqa	xmm3, xmmword ptr [rip + .LCPI10_15] # xmm3 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm1, xmm3
	pshufb	xmm0, xmm3
	punpcklwd	xmm0, xmm1              # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	punpcklbw	xmm7, xmm2              # xmm7 = xmm7[0],xmm2[0],xmm7[1],xmm2[1],xmm7[2],xmm2[2],xmm7[3],xmm2[3],xmm7[4],xmm2[4],xmm7[5],xmm2[5],xmm7[6],xmm2[6],xmm7[7],xmm2[7]
	punpcklbw	xmm14, xmm10            # xmm14 = xmm14[0],xmm10[0],xmm14[1],xmm10[1],xmm14[2],xmm10[2],xmm14[3],xmm10[3],xmm14[4],xmm10[4],xmm14[5],xmm10[5],xmm14[6],xmm10[6],xmm14[7],xmm10[7]
	punpcklwd	xmm14, xmm7             # xmm14 = xmm14[0],xmm7[0],xmm14[1],xmm7[1],xmm14[2],xmm7[2],xmm14[3],xmm7[3]
	movdqu	xmmword ptr [r14 + 4*r10], xmm14
	movdqu	xmmword ptr [r14 + 4*r10 + 16], xmm0
	add	r10, 8
	cmp	r10, qword ptr [rsp + 400]      # 8-byte Folded Reload
	jne	.LBB10_198
# %bb.199:
	mov	r15, qword ptr [rsp + 456]      # 8-byte Reload
	cmp	r15, qword ptr [rsp + 400]      # 8-byte Folded Reload
	mov	r10, qword ptr [rsp + 72]       # 8-byte Reload
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	jne	.LBB10_101
	jmp	.LBB10_136
.LBB10_200:
	mov	r8, r11
	and	r8, -4
	mov	rbx, r8
	shl	rbx, 7
	add	rbx, rsi
	lea	r15, [r14 + 4*r8]
	movaps	xmm13, xmm11
	shufps	xmm13, xmm11, 0                 # xmm13 = xmm13[0,0],xmm11[0,0]
	add	rsi, 508
	xor	ecx, ecx
	movdqa	xmm15, xmmword ptr [rip + .LCPI10_0] # xmm15 = <1,1,1,1,u,u,u,u,u,u,u,u,u,u,u,u>
	.p2align	4, 0x90
.LBB10_201:                             # =>This Inner Loop Header: Depth=1
	movss	xmm3, dword ptr [rsi - 508]     # xmm3 = mem[0],zero,zero,zero
	movss	xmm10, dword ptr [rsi - 504]    # xmm10 = mem[0],zero,zero,zero
	movss	xmm9, dword ptr [rsi - 500]     # xmm9 = mem[0],zero,zero,zero
	movss	xmm1, dword ptr [rsi - 496]     # xmm1 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 380], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 252], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 124], 48 # xmm3 = xmm3[0,1,2],mem[0]
	insertps	xmm10, dword ptr [rsi - 376], 16 # xmm10 = xmm10[0],mem[0],xmm10[2,3]
	insertps	xmm10, dword ptr [rsi - 248], 32 # xmm10 = xmm10[0,1],mem[0],xmm10[3]
	insertps	xmm10, dword ptr [rsi - 120], 48 # xmm10 = xmm10[0,1,2],mem[0]
	insertps	xmm9, dword ptr [rsi - 372], 16 # xmm9 = xmm9[0],mem[0],xmm9[2,3]
	insertps	xmm9, dword ptr [rsi - 244], 32 # xmm9 = xmm9[0,1],mem[0],xmm9[3]
	insertps	xmm9, dword ptr [rsi - 116], 48 # xmm9 = xmm9[0,1,2],mem[0]
	insertps	xmm1, dword ptr [rsi - 368], 16 # xmm1 = xmm1[0],mem[0],xmm1[2,3]
	insertps	xmm1, dword ptr [rsi - 240], 32 # xmm1 = xmm1[0,1],mem[0],xmm1[3]
	insertps	xmm1, dword ptr [rsi - 112], 48 # xmm1 = xmm1[0,1,2],mem[0]
	movss	xmm8, dword ptr [rsi - 492]     # xmm8 = mem[0],zero,zero,zero
	insertps	xmm8, dword ptr [rsi - 364], 16 # xmm8 = xmm8[0],mem[0],xmm8[2,3]
	insertps	xmm8, dword ptr [rsi - 236], 32 # xmm8 = xmm8[0,1],mem[0],xmm8[3]
	movaps	xmm12, xmm13
	insertps	xmm8, dword ptr [rsi - 108], 48 # xmm8 = xmm8[0,1,2],mem[0]
	movss	xmm2, dword ptr [rsi - 488]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 360], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 232], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	cmpleps	xmm12, xmm3
	insertps	xmm2, dword ptr [rsi - 104], 48 # xmm2 = xmm2[0,1,2],mem[0]
	movss	xmm3, dword ptr [rsi - 484]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 356], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 228], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	packssdw	xmm12, xmm12
	insertps	xmm3, dword ptr [rsi - 100], 48 # xmm3 = xmm3[0,1,2],mem[0]
	movss	xmm4, dword ptr [rsi - 476]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm4, dword ptr [rsi - 348], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rsi - 220], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	packsswb	xmm12, xmm12
	insertps	xmm4, dword ptr [rsi - 92], 48  # xmm4 = xmm4[0,1,2],mem[0]
	movaps	xmm7, xmm13
	movss	xmm5, dword ptr [rsi - 444]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 316], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 188], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	cmpleps	xmm7, xmm4
	insertps	xmm5, dword ptr [rsi - 60], 48  # xmm5 = xmm5[0,1,2],mem[0]
	movaps	xmm6, xmm13
	movss	xmm0, dword ptr [rsi - 412]     # xmm0 = mem[0],zero,zero,zero
	insertps	xmm0, dword ptr [rsi - 284], 16 # xmm0 = xmm0[0],mem[0],xmm0[2,3]
	insertps	xmm0, dword ptr [rsi - 156], 32 # xmm0 = xmm0[0,1],mem[0],xmm0[3]
	cmpleps	xmm6, xmm5
	insertps	xmm0, dword ptr [rsi - 28], 48  # xmm0 = xmm0[0,1,2],mem[0]
	movaps	xmm4, xmm13
	cmpleps	xmm4, xmm0
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm10
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	movdqa	xmm14, xmm0
	pand	xmm14, xmm15
	psubb	xmm14, xmm0
	movss	xmm10, dword ptr [rsi - 480]    # xmm10 = mem[0],zero,zero,zero
	insertps	xmm10, dword ptr [rsi - 352], 16 # xmm10 = xmm10[0],mem[0],xmm10[2,3]
	pand	xmm12, xmm15
	insertps	xmm10, dword ptr [rsi - 224], 32 # xmm10 = xmm10[0,1],mem[0],xmm10[3]
	por	xmm14, xmm12
	movaps	xmm5, xmm13
	cmpleps	xmm5, xmm9
	insertps	xmm10, dword ptr [rsi - 96], 48 # xmm10 = xmm10[0,1,2],mem[0]
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_1] # xmm0 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	pand	xmm5, xmm0
	por	xmm5, xmm14
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm1
	movaps	xmm1, xmm13
	cmpleps	xmm1, xmm8
	movss	xmm9, dword ptr [rsi - 472]     # xmm9 = mem[0],zero,zero,zero
	insertps	xmm9, dword ptr [rsi - 344], 16 # xmm9 = xmm9[0],mem[0],xmm9[2,3]
	insertps	xmm9, dword ptr [rsi - 216], 32 # xmm9 = xmm9[0,1],mem[0],xmm9[3]
	insertps	xmm9, dword ptr [rsi - 88], 48  # xmm9 = xmm9[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 3
	movdqa	xmm14, xmmword ptr [rip + .LCPI10_2] # xmm14 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	pand	xmm0, xmm14
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 4
	movdqa	xmm14, xmmword ptr [rip + .LCPI10_3] # xmm14 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	pand	xmm1, xmm14
	por	xmm1, xmm0
	movss	xmm12, dword ptr [rsi - 468]    # xmm12 = mem[0],zero,zero,zero
	insertps	xmm12, dword ptr [rsi - 340], 16 # xmm12 = xmm12[0],mem[0],xmm12[2,3]
	insertps	xmm12, dword ptr [rsi - 212], 32 # xmm12 = xmm12[0,1],mem[0],xmm12[3]
	insertps	xmm12, dword ptr [rsi - 84], 48 # xmm12 = xmm12[0,1,2],mem[0]
	por	xmm1, xmm5
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm2
	movaps	xmm5, xmm13
	cmpleps	xmm5, xmm3
	movss	xmm2, dword ptr [rsi - 464]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 336], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 208], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	packssdw	xmm7, xmm7
	insertps	xmm2, dword ptr [rsi - 80], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 5
	movdqa	xmm14, xmmword ptr [rip + .LCPI10_4] # xmm14 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	pand	xmm0, xmm14
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 6
	movdqa	xmm3, xmmword ptr [rip + .LCPI10_5] # xmm3 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	pand	xmm5, xmm3
	por	xmm5, xmm0
	movaps	xmm8, xmm13
	cmpleps	xmm8, xmm10
	movss	xmm3, dword ptr [rsi - 460]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 332], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 204], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 76], 48  # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm8, xmm8
	packsswb	xmm8, xmm8
	psllw	xmm8, 7
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm8, xmm0
	por	xmm8, xmm5
	movss	xmm10, dword ptr [rsi - 456]    # xmm10 = mem[0],zero,zero,zero
	insertps	xmm10, dword ptr [rsi - 328], 16 # xmm10 = xmm10[0],mem[0],xmm10[2,3]
	insertps	xmm10, dword ptr [rsi - 200], 32 # xmm10 = xmm10[0,1],mem[0],xmm10[3]
	packsswb	xmm7, xmm7
	insertps	xmm10, dword ptr [rsi - 72], 48 # xmm10 = xmm10[0,1,2],mem[0]
	por	xmm8, xmm1
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm9
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	movdqa	xmm1, xmm0
	pand	xmm1, xmm15
	psubb	xmm1, xmm0
	movss	xmm9, dword ptr [rsi - 452]     # xmm9 = mem[0],zero,zero,zero
	insertps	xmm9, dword ptr [rsi - 324], 16 # xmm9 = xmm9[0],mem[0],xmm9[2,3]
	pand	xmm7, xmm15
	insertps	xmm9, dword ptr [rsi - 196], 32 # xmm9 = xmm9[0,1],mem[0],xmm9[3]
	por	xmm1, xmm7
	movaps	xmm5, xmm13
	cmpleps	xmm5, xmm12
	insertps	xmm9, dword ptr [rsi - 68], 48  # xmm9 = xmm9[0,1,2],mem[0]
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmmword ptr [rip + .LCPI10_1]
	por	xmm5, xmm1
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm2
	movaps	xmm1, xmm13
	cmpleps	xmm1, xmm3
	movss	xmm3, dword ptr [rsi - 448]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 320], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 192], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 64], 48  # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 3
	movdqa	xmm12, xmmword ptr [rip + .LCPI10_2] # xmm12 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	pand	xmm0, xmm12
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 4
	pand	xmm1, xmmword ptr [rip + .LCPI10_3]
	por	xmm1, xmm0
	movss	xmm2, dword ptr [rsi - 440]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 312], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rsi - 184], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rsi - 56], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm1, xmm5
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm10
	movaps	xmm5, xmm13
	cmpleps	xmm5, xmm9
	movss	xmm7, dword ptr [rsi - 436]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 308], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 180], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	packssdw	xmm6, xmm6
	insertps	xmm7, dword ptr [rsi - 52], 48  # xmm7 = xmm7[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 5
	pand	xmm0, xmm14
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 6
	pand	xmm5, xmmword ptr [rip + .LCPI10_5]
	por	xmm5, xmm0
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm3
	movss	xmm3, dword ptr [rsi - 432]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 304], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 176], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 48], 48  # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	psllw	xmm0, 7
	movdqa	xmm10, xmmword ptr [rip + .LCPI10_6] # xmm10 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm0, xmm10
	por	xmm0, xmm5
	movss	xmm5, dword ptr [rsi - 428]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 300], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 172], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 44], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm0, xmm1
	movss	xmm9, dword ptr [rsi - 424]     # xmm9 = mem[0],zero,zero,zero
	insertps	xmm9, dword ptr [rsi - 296], 16 # xmm9 = xmm9[0],mem[0],xmm9[2,3]
	insertps	xmm9, dword ptr [rsi - 168], 32 # xmm9 = xmm9[0,1],mem[0],xmm9[3]
	packsswb	xmm6, xmm6
	insertps	xmm9, dword ptr [rsi - 40], 48  # xmm9 = xmm9[0,1,2],mem[0]
	punpckldq	xmm8, xmm0              # xmm8 = xmm8[0],xmm0[0],xmm8[1],xmm0[1]
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm2
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	movdqa	xmm1, xmm0
	pand	xmm1, xmm15
	psubb	xmm1, xmm0
	movss	xmm2, dword ptr [rsi - 420]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rsi - 292], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	pand	xmm6, xmm15
	insertps	xmm2, dword ptr [rsi - 164], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	por	xmm1, xmm6
	movaps	xmm6, xmm13
	cmpleps	xmm6, xmm7
	insertps	xmm2, dword ptr [rsi - 36], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 2
	movdqa	xmm0, xmmword ptr [rip + .LCPI10_1] # xmm0 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	pand	xmm6, xmm0
	por	xmm6, xmm1
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm3
	movaps	xmm1, xmm13
	cmpleps	xmm1, xmm5
	movss	xmm3, dword ptr [rsi - 416]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 288], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rsi - 160], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rsi - 32], 48  # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 3
	pand	xmm0, xmm12
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 4
	movdqa	xmm12, xmmword ptr [rip + .LCPI10_3] # xmm12 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	pand	xmm1, xmm12
	por	xmm1, xmm0
	movss	xmm5, dword ptr [rsi - 408]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 280], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 152], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rsi - 24], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm1, xmm6
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm9
	movaps	xmm6, xmm13
	cmpleps	xmm6, xmm2
	movss	xmm7, dword ptr [rsi - 404]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rsi - 276], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rsi - 148], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	packssdw	xmm4, xmm4
	insertps	xmm7, dword ptr [rsi - 20], 48  # xmm7 = xmm7[0,1,2],mem[0]
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	pand	xmm0, xmm15
	psllw	xmm0, 5
	pand	xmm0, xmm14
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 6
	movdqa	xmm9, xmmword ptr [rip + .LCPI10_5] # xmm9 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	pand	xmm6, xmm9
	por	xmm6, xmm0
	movaps	xmm2, xmm13
	cmpleps	xmm2, xmm3
	movss	xmm0, dword ptr [rsi - 400]     # xmm0 = mem[0],zero,zero,zero
	insertps	xmm0, dword ptr [rsi - 272], 16 # xmm0 = xmm0[0],mem[0],xmm0[2,3]
	insertps	xmm0, dword ptr [rsi - 144], 32 # xmm0 = xmm0[0,1],mem[0],xmm0[3]
	insertps	xmm0, dword ptr [rsi - 16], 48  # xmm0 = xmm0[0,1,2],mem[0]
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	psllw	xmm2, 7
	pand	xmm2, xmm10
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rsi - 396]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rsi - 268], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rsi - 140], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	packsswb	xmm4, xmm4
	insertps	xmm6, dword ptr [rsi - 12], 48  # xmm6 = xmm6[0,1,2],mem[0]
	por	xmm2, xmm1
	movaps	xmm1, xmm13
	cmpleps	xmm1, xmm5
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	movdqa	xmm5, xmm1
	pand	xmm5, xmm15
	psubb	xmm5, xmm1
	movss	xmm3, dword ptr [rsi - 392]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rsi - 264], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	pand	xmm4, xmm15
	insertps	xmm3, dword ptr [rsi - 136], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	por	xmm5, xmm4
	movaps	xmm4, xmm13
	cmpleps	xmm4, xmm7
	insertps	xmm3, dword ptr [rsi - 8], 48   # xmm3 = xmm3[0,1,2],mem[0]
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 2
	pand	xmm4, xmmword ptr [rip + .LCPI10_1]
	por	xmm4, xmm5
	movaps	xmm5, xmm13
	cmpleps	xmm5, xmm0
	movaps	xmm1, xmm13
	cmpleps	xmm1, xmm6
	movss	xmm0, dword ptr [rsi - 388]     # xmm0 = mem[0],zero,zero,zero
	insertps	xmm0, dword ptr [rsi - 260], 16 # xmm0 = xmm0[0],mem[0],xmm0[2,3]
	insertps	xmm0, dword ptr [rsi - 132], 32 # xmm0 = xmm0[0,1],mem[0],xmm0[3]
	insertps	xmm0, dword ptr [rsi - 4], 48   # xmm0 = xmm0[0,1,2],mem[0]
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmmword ptr [rip + .LCPI10_2]
	packssdw	xmm1, xmm1
	packsswb	xmm1, xmm1
	pand	xmm1, xmm15
	psllw	xmm1, 4
	pand	xmm1, xmm12
	por	xmm1, xmm5
	movss	xmm5, dword ptr [rsi - 384]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rsi - 256], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rsi - 128], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	por	xmm1, xmm4
	movaps	xmm4, xmm13
	cmpleps	xmm4, xmm3
	movaps	xmm3, xmm13
	cmpleps	xmm3, xmm0
	insertps	xmm5, dword ptr [rsi], 48       # xmm5 = xmm5[0,1,2],mem[0]
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 5
	pand	xmm4, xmm14
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 6
	pand	xmm3, xmm9
	por	xmm3, xmm4
	movaps	xmm0, xmm13
	cmpleps	xmm0, xmm5
	packssdw	xmm0, xmm0
	packsswb	xmm0, xmm0
	psllw	xmm0, 7
	pand	xmm0, xmm10
	por	xmm0, xmm3
	por	xmm0, xmm1
	punpckldq	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1]
	punpcklbw	xmm8, xmm2              # xmm8 = xmm8[0],xmm2[0],xmm8[1],xmm2[1],xmm8[2],xmm2[2],xmm8[3],xmm2[3],xmm8[4],xmm2[4],xmm8[5],xmm2[5],xmm8[6],xmm2[6],xmm8[7],xmm2[7]
	pshufb	xmm8, xmmword ptr [rip + .LCPI10_7] # xmm8 = xmm8[0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]
	movdqu	xmmword ptr [r14 + 4*rcx], xmm8
	add	rcx, 4
	add	rsi, 512
	cmp	r8, rcx
	jne	.LBB10_201
# %bb.202:
	cmp	r11, r8
	jne	.LBB10_124
	jmp	.LBB10_140
.Lfunc_end10:
	.size	comparison_greater_equal_arr_scalar_sse4, .Lfunc_end10-comparison_greater_equal_arr_scalar_sse4
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function comparison_greater_equal_scalar_arr_sse4
.LCPI11_0:
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.byte	1                               # 0x1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_1:
	.zero	16,252
.LCPI11_2:
	.zero	16,248
.LCPI11_3:
	.zero	16,240
.LCPI11_4:
	.zero	16,224
.LCPI11_5:
	.zero	16,192
.LCPI11_6:
	.zero	16,128
.LCPI11_7:
	.byte	0                               # 0x0
	.byte	8                               # 0x8
	.byte	1                               # 0x1
	.byte	9                               # 0x9
	.byte	2                               # 0x2
	.byte	10                              # 0xa
	.byte	3                               # 0x3
	.byte	11                              # 0xb
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
.LCPI11_8:
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.byte	2                               # 0x2
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_9:
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.byte	4                               # 0x4
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_10:
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.byte	8                               # 0x8
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_11:
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.byte	16                              # 0x10
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_12:
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.byte	32                              # 0x20
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_13:
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.byte	64                              # 0x40
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_14:
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.byte	128                             # 0x80
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_15:
	.byte	4                               # 0x4
	.byte	12                              # 0xc
	.byte	5                               # 0x5
	.byte	13                              # 0xd
	.byte	6                               # 0x6
	.byte	14                              # 0xe
	.byte	7                               # 0x7
	.byte	15                              # 0xf
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
.LCPI11_16:
	.zero	16,2
.LCPI11_17:
	.zero	16,4
.LCPI11_18:
	.zero	16,8
.LCPI11_19:
	.zero	16,16
.LCPI11_20:
	.zero	16,32
.LCPI11_21:
	.zero	16,64
.LCPI11_22:
	.zero	16,255
	.text
	.globl	comparison_greater_equal_scalar_arr_sse4
	.p2align	4, 0x90
	.type	comparison_greater_equal_scalar_arr_sse4,@function
comparison_greater_equal_scalar_arr_sse4: # @comparison_greater_equal_scalar_arr_sse4
# %bb.0:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	and	rsp, -16
	sub	rsp, 304
                                        # kill: def $r9d killed $r9d def $r9
	mov	r11, r8
	mov	r15, rcx
	cmp	edi, 6
	jg	.LBB11_26
# %bb.1:
	cmp	edi, 3
	jle	.LBB11_2
# %bb.10:
	cmp	edi, 4
	je	.LBB11_99
# %bb.11:
	cmp	edi, 5
	je	.LBB11_114
# %bb.12:
	cmp	edi, 6
	jne	.LBB11_201
# %bb.13:
	mov	r14d, dword ptr [rsi]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_17
# %bb.14:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_15:                              # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	mov	esi, 0
	adc	sil, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r15 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r15 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_15
# %bb.16:
	add	r15, 1
.LBB11_17:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_21
# %bb.18:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_19:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	cmp	r14d, dword ptr [rdx + 124]
	setae	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 120]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 116]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 112]
	setae	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 108]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 104]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 100]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 92]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 88]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 84]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 80]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 76]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 72]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 68]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 60]
	setae	r8b
	cmp	r14d, dword ptr [rdx + 56]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 52]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 48]
	setae	r11b
	cmp	r14d, dword ptr [rdx + 44]
	setae	r10b
	cmp	r14d, dword ptr [rdx + 40]
	setae	r9b
	cmp	r14d, dword ptr [rdx + 36]
	setae	dil
	cmp	r14d, dword ptr [rdx + 28]
	setae	al
	cmp	r14d, dword ptr [rdx + 24]
	setae	bl
	cmp	r14d, dword ptr [rdx + 20]
	setae	sil
	cmp	r14d, dword ptr [rdx + 16]
	setae	cl
	cmp	r14d, dword ptr [rdx + 12]
	setae	r13b
	cmp	r14d, dword ptr [rdx + 8]
	setae	r12b
	cmp	r14d, dword ptr [rdx]
	setae	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 4]
	setae	r15b
	cmp	r14d, dword ptr [rdx + 32]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 64]
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 96]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 224]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 144]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	sub	rdx, -128
	add	r15, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB11_19
# %bb.20:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
.LBB11_21:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.22:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_137
# %bb.23:
	xor	r11d, r11d
	jmp	.LBB11_24
.LBB11_26:
	cmp	edi, 8
	jle	.LBB11_27
# %bb.42:
	cmp	edi, 9
	je	.LBB11_157
# %bb.43:
	cmp	edi, 11
	je	.LBB11_172
# %bb.44:
	cmp	edi, 12
	jne	.LBB11_201
# %bb.45:
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movsd	xmm0, qword ptr [rsi]           # xmm0 = mem[0],zero
	sub	r9d, eax
	je	.LBB11_49
# %bb.46:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_47:                              # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	mov	esi, 0
	adc	sil, -1
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	sil, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_47
# %bb.48:
	add	r15, 1
.LBB11_49:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_53
# %bb.50:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_51:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	ucomisd	xmm0, qword ptr [rdx]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 8]
	setae	r9b
	ucomisd	xmm0, qword ptr [rdx + 16]
	setae	r11b
	ucomisd	xmm0, qword ptr [rdx + 24]
	setae	r13b
	ucomisd	xmm0, qword ptr [rdx + 32]
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 40]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 48]
	setae	bl
	ucomisd	xmm0, qword ptr [rdx + 56]
	setae	r12b
	ucomisd	xmm0, qword ptr [rdx + 64]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 72]
	setae	sil
	ucomisd	xmm0, qword ptr [rdx + 80]
	setae	dil
	ucomisd	xmm0, qword ptr [rdx + 88]
	setae	r8b
	ucomisd	xmm0, qword ptr [rdx + 96]
	setae	r10b
	ucomisd	xmm0, qword ptr [rdx + 104]
	setae	r15b
	ucomisd	xmm0, qword ptr [rdx + 112]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 120]
	setae	cl
	ucomisd	xmm0, qword ptr [rdx + 128]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 136]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 144]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 152]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 160]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 168]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 176]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 184]
	setae	r14b
	ucomisd	xmm0, qword ptr [rdx + 192]
	setae	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 200]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 208]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 216]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 224]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 232]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 240]
	setae	byte ptr [rsp]                  # 1-byte Folded Spill
	ucomisd	xmm0, qword ptr [rdx + 248]
	setae	al
	add	r9b, r9b
	add	r9b, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	bl, 6
	shl	r12b, 7
	or	r12b, bl
	shl	r11b, 2
	or	r11b, r9b
	add	sil, sil
	add	sil, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r11b
	shl	dil, 2
	or	dil, sil
	movzx	ebx, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	bl, 4
	or	bl, r13b
	mov	esi, ebx
	shl	r8b, 3
	or	r8b, dil
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	shl	r10b, 4
	or	r10b, r8b
	shl	r15b, 5
	or	r15b, r10b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	cl, 7
	or	cl, sil
	or	r12b, bl
	or	cl, r15b
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	movzx	ebx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	add	bl, bl
	add	bl, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	bl, 2
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	bl, 3
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	bl, 4
	or	bl, sil
	mov	esi, ebx
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 5
	or	bl, sil
	mov	byte ptr [r15], r12b
	movzx	esi, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r14b, 7
	or	r14b, sil
	mov	byte ptr [r15 + 1], cl
	or	r14b, bl
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	cl, 4
	or	cl, bl
	mov	ebx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, bl
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], r14b
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB11_51
# %bb.52:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
.LBB11_53:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.54:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_195
# %bb.55:
	xor	r11d, r11d
	jmp	.LBB11_197
.LBB11_2:
	cmp	edi, 2
	je	.LBB11_56
# %bb.3:
	cmp	edi, 3
	jne	.LBB11_201
# %bb.4:
	mov	r14b, byte ptr [rsi]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_8
# %bb.5:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_6:                               # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	setge	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_6
# %bb.7:
	add	r15, 1
.LBB11_8:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_9
# %bb.81:
	cmp	r10, 16
	mov	byte ptr [rsp], r14b            # 1-byte Spill
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	jb	.LBB11_82
# %bb.83:
	mov	rax, r10
	shl	rax, 5
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB11_85
# %bb.84:
	lea	rax, [r15 + 4*r10]
	cmp	rdx, rax
	jae	.LBB11_85
.LBB11_82:
	xor	eax, eax
	mov	qword ptr [rsp + 256], rax      # 8-byte Spill
	mov	r13, r15
.LBB11_88:
	sub	r10, qword ptr [rsp + 256]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_89:                              # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx + 31]
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 30]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 29]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 28]
	setge	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 27]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 26]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 25]
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 23]
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 22]
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 21]
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 20]
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 19]
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 18]
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 17]
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 15]
	setge	r10b
	cmp	r14b, byte ptr [rdx + 14]
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 13]
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 12]
	setge	r12b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 11]
	setge	r15b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 10]
	setge	r14b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 9]
	setge	r11b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 7]
	setge	sil
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 6]
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 5]
	setge	r9b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 4]
	setge	r8b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 3]
	setge	dil
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 2]
	setge	cl
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx]
	setge	byte ptr [rsp + 208]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 1]
	setge	al
	mov	rbx, r13
	movzx	r13d, byte ptr [rsp]            # 1-byte Folded Reload
	cmp	r13b, byte ptr [rdx + 8]
	mov	r13, rbx
	setge	byte ptr [rsp + 224]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	bl, byte ptr [rdx + 16]
	setge	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	bl, byte ptr [rdx + 24]
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	add	al, al
	add	al, byte ptr [rsp + 208]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	shl	dil, 3
	or	dil, cl
	shl	r8b, 4
	or	r8b, dil
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	sil, 7
	or	sil, al
	or	sil, r9b
	mov	byte ptr [r13], sil
	add	r11b, r11b
	add	r11b, byte ptr [rsp + 224]      # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r11b
	shl	r15b, 3
	or	r15b, r14b
	shl	r12b, 4
	or	r12b, r15b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r12b
	movzx	r14d, byte ptr [rsp]            # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r10b, 7
	or	r10b, cl
	or	r10b, al
	mov	byte ptr [r13 + 1], r10b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 2], al
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 160]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 3], al
	add	rdx, 32
	add	r13, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB11_89
# %bb.90:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	jmp	.LBB11_91
.LBB11_27:
	cmp	edi, 7
	je	.LBB11_139
# %bb.28:
	cmp	edi, 8
	jne	.LBB11_201
# %bb.29:
	mov	r14, qword ptr [rsi]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_33
# %bb.30:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_31:                              # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	mov	esi, 0
	adc	sil, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r15 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r15 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_31
# %bb.32:
	add	r15, 1
.LBB11_33:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_37
# %bb.34:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_35:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	cmp	r14, qword ptr [rdx + 248]
	setae	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 240]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 232]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 224]
	setae	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 216]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 208]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 200]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 184]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 176]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 168]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 160]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 152]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 144]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 136]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 120]
	setae	r8b
	cmp	r14, qword ptr [rdx + 112]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 104]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 96]
	setae	r11b
	cmp	r14, qword ptr [rdx + 88]
	setae	r10b
	cmp	r14, qword ptr [rdx + 80]
	setae	r9b
	cmp	r14, qword ptr [rdx + 72]
	setae	dil
	cmp	r14, qword ptr [rdx + 56]
	setae	al
	cmp	r14, qword ptr [rdx + 48]
	setae	bl
	cmp	r14, qword ptr [rdx + 40]
	setae	sil
	cmp	r14, qword ptr [rdx + 32]
	setae	cl
	cmp	r14, qword ptr [rdx + 24]
	setae	r13b
	cmp	r14, qword ptr [rdx + 16]
	setae	r12b
	cmp	r14, qword ptr [rdx]
	setae	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 8]
	setae	r15b
	cmp	r14, qword ptr [rdx + 64]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 128]
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 192]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 224]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 144]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB11_35
# %bb.36:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
.LBB11_37:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.38:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_155
# %bb.39:
	xor	r11d, r11d
	jmp	.LBB11_40
.LBB11_56:
	mov	r14b, byte ptr [rsi]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_60
# %bb.57:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_58:                              # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx]
	lea	rdx, [rdx + 1]
	mov	esi, 0
	adc	sil, -1
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	sil, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_58
# %bb.59:
	add	r15, 1
.LBB11_60:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_61
# %bb.62:
	cmp	r10, 16
	mov	byte ptr [rsp], r14b            # 1-byte Spill
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 248], r10      # 8-byte Spill
	jb	.LBB11_63
# %bb.64:
	mov	rax, r10
	shl	rax, 5
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB11_66
# %bb.65:
	lea	rax, [r15 + 4*r10]
	cmp	rdx, rax
	jae	.LBB11_66
.LBB11_63:
	xor	eax, eax
	mov	qword ptr [rsp + 192], rax      # 8-byte Spill
	mov	r13, r15
.LBB11_69:
	sub	r10, qword ptr [rsp + 192]      # 8-byte Folded Reload
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_70:                              # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx + 31]
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 30]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 29]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 28]
	setae	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 27]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 26]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 25]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 23]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 22]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 21]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 20]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 19]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 18]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 17]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 15]
	setae	r10b
	cmp	r14b, byte ptr [rdx + 14]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 13]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14b, byte ptr [rdx + 12]
	setae	r12b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 11]
	setae	r15b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 10]
	setae	r14b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 9]
	setae	r11b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 7]
	setae	sil
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 6]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 5]
	setae	r9b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 4]
	setae	r8b
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 3]
	setae	dil
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 2]
	setae	cl
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx]
	setae	byte ptr [rsp + 208]            # 1-byte Folded Spill
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	al, byte ptr [rdx + 1]
	setae	al
	mov	rbx, r13
	movzx	r13d, byte ptr [rsp]            # 1-byte Folded Reload
	cmp	r13b, byte ptr [rdx + 8]
	mov	r13, rbx
	setae	byte ptr [rsp + 224]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	bl, byte ptr [rdx + 16]
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	movzx	ebx, byte ptr [rsp]             # 1-byte Folded Reload
	cmp	bl, byte ptr [rdx + 24]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	add	al, al
	add	al, byte ptr [rsp + 208]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, al
	shl	dil, 3
	or	dil, cl
	shl	r8b, 4
	or	r8b, dil
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	sil, 7
	or	sil, al
	or	sil, r9b
	mov	byte ptr [r13], sil
	add	r11b, r11b
	add	r11b, byte ptr [rsp + 224]      # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r11b
	shl	r15b, 3
	or	r15b, r14b
	shl	r12b, 4
	or	r12b, r15b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r12b
	movzx	r14d, byte ptr [rsp]            # 1-byte Folded Reload
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r10b, 7
	or	r10b, cl
	or	r10b, al
	mov	byte ptr [r13 + 1], r10b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 2], al
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 160]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r13 + 3], al
	add	rdx, 32
	add	r13, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB11_70
# %bb.71:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	jmp	.LBB11_72
.LBB11_139:
	mov	r14d, dword ptr [rsi]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_143
# %bb.140:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_141:                             # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	setge	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_141
# %bb.142:
	add	r15, 1
.LBB11_143:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_147
# %bb.144:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_145:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	cmp	r14d, dword ptr [rdx + 124]
	setge	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 120]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 116]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 112]
	setge	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 108]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 104]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 100]
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 92]
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 88]
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 84]
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 80]
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 76]
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 72]
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 68]
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 60]
	setge	r8b
	cmp	r14d, dword ptr [rdx + 56]
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 52]
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 48]
	setge	r11b
	cmp	r14d, dword ptr [rdx + 44]
	setge	r10b
	cmp	r14d, dword ptr [rdx + 40]
	setge	r9b
	cmp	r14d, dword ptr [rdx + 36]
	setge	dil
	cmp	r14d, dword ptr [rdx + 28]
	setge	al
	cmp	r14d, dword ptr [rdx + 24]
	setge	bl
	cmp	r14d, dword ptr [rdx + 20]
	setge	sil
	cmp	r14d, dword ptr [rdx + 16]
	setge	cl
	cmp	r14d, dword ptr [rdx + 12]
	setge	r13b
	cmp	r14d, dword ptr [rdx + 8]
	setge	r12b
	cmp	r14d, dword ptr [rdx]
	setge	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 4]
	setge	r15b
	cmp	r14d, dword ptr [rdx + 32]
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 64]
	setge	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r14d, dword ptr [rdx + 96]
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 224]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 144]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	sub	rdx, -128
	add	r15, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB11_145
# %bb.146:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
.LBB11_147:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.148:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_153
# %bb.149:
	xor	edi, edi
	jmp	.LBB11_150
.LBB11_99:
	movzx	r14d, word ptr [rsi]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_103
# %bb.100:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_101:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	mov	esi, 0
	adc	sil, -1
	lea	rbx, [rax + 7]
	test	rax, rax
	cmovns	rbx, rax
	sar	rbx, 3
	movzx	r8d, byte ptr [r15 + rbx]
	xor	sil, r8b
	lea	edi, [8*rbx]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, sil
	xor	dil, r8b
	mov	byte ptr [r15 + rbx], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_101
# %bb.102:
	add	r15, 1
.LBB11_103:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_107
# %bb.104:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_105:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	cmp	r14w, word ptr [rdx + 62]
	setae	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 60]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 58]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 56]
	setae	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 54]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 52]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 50]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 46]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 44]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 42]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 40]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 38]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 36]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 34]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 30]
	setae	r8b
	cmp	r14w, word ptr [rdx + 28]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 26]
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 24]
	setae	r11b
	cmp	r14w, word ptr [rdx + 22]
	setae	r10b
	cmp	r14w, word ptr [rdx + 20]
	setae	r9b
	cmp	r14w, word ptr [rdx + 18]
	setae	dil
	cmp	r14w, word ptr [rdx + 14]
	setae	al
	cmp	r14w, word ptr [rdx + 12]
	setae	bl
	cmp	r14w, word ptr [rdx + 10]
	setae	sil
	cmp	r14w, word ptr [rdx + 8]
	setae	cl
	cmp	r14w, word ptr [rdx + 6]
	setae	r13b
	cmp	r14w, word ptr [rdx + 4]
	setae	r12b
	cmp	r14w, word ptr [rdx]
	setae	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 2]
	setae	r15b
	cmp	r14w, word ptr [rdx + 16]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 32]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rdx + 48]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 224]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 160]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 32]         # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 64
	add	r15, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB11_105
# %bb.106:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
.LBB11_107:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.108:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_112
# %bb.109:
	xor	r11d, r11d
	jmp	.LBB11_110
.LBB11_114:
	movzx	r14d, word ptr [rsi]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_118
# %bb.115:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_116:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	lea	rdx, [rdx + 2]
	setge	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	xor	bl, r9b
	lea	r8d, [8*rsi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r9b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_116
# %bb.117:
	add	r15, 1
.LBB11_118:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_119
# %bb.120:
	cmp	r10, 8
	mov	dword ptr [rsp], r14d           # 4-byte Spill
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 256], r10      # 8-byte Spill
	jb	.LBB11_121
# %bb.122:
	mov	rax, r10
	shl	rax, 6
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB11_124
# %bb.123:
	lea	rax, [r15 + 4*r10]
	cmp	rax, rdx
	jbe	.LBB11_124
.LBB11_121:
	xor	eax, eax
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	rax, rdx
	mov	r12, r15
.LBB11_127:
	sub	r10, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_128:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rax + 62]
	setge	byte ptr [rsp + 120]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 60]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 58]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 56]
	setge	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 54]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 52]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 50]
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 46]
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 44]
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 42]
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 40]
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 38]
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 36]
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 34]
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 30]
	setge	r10b
	cmp	r14w, word ptr [rax + 28]
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 26]
	mov	rcx, rax
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	cmp	r14w, word ptr [rax + 24]
	setge	r13b
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 22]
	setge	r15b
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 20]
	setge	r14b
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 18]
	setge	r11b
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 14]
	setge	sil
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 12]
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 10]
	setge	r9b
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 8]
	setge	r8b
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 6]
	setge	dil
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 4]
	setge	dl
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx]
	setge	byte ptr [rsp + 208]            # 1-byte Folded Spill
	mov	eax, dword ptr [rsp]            # 4-byte Reload
	cmp	ax, word ptr [rcx + 2]
	setge	al
	mov	rbx, r12
	mov	r12d, dword ptr [rsp]           # 4-byte Reload
	cmp	r12w, word ptr [rcx + 16]
	mov	r12, rbx
	setge	byte ptr [rsp + 224]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp]            # 4-byte Reload
	cmp	bx, word ptr [rcx + 32]
	setge	byte ptr [rsp + 176]            # 1-byte Folded Spill
	mov	ebx, dword ptr [rsp]            # 4-byte Reload
	cmp	bx, word ptr [rcx + 48]
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	add	al, al
	add	al, byte ptr [rsp + 208]        # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	shl	dil, 3
	or	dil, dl
	shl	r8b, 4
	or	r8b, dil
	shl	r9b, 5
	or	r9b, r8b
	movzx	eax, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	sil, 7
	or	sil, al
	or	sil, r9b
	mov	byte ptr [r12], sil
	add	r11b, r11b
	add	r11b, byte ptr [rsp + 224]      # 1-byte Folded Reload
	shl	r14b, 2
	or	r14b, r11b
	shl	r15b, 3
	or	r15b, r14b
	shl	r13b, 4
	or	r13b, r15b
	movzx	eax, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r13b
	mov	r14d, dword ptr [rsp]           # 4-byte Reload
	movzx	edx, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	dl, 6
	shl	r10b, 7
	or	r10b, dl
	or	r10b, al
	mov	rax, rcx
	mov	byte ptr [r12 + 1], r10b
	movzx	ecx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	edx, ecx
	movzx	ebx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	ecx, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	cl, 7
	or	cl, bl
	or	cl, dl
	mov	byte ptr [r12 + 2], cl
	movzx	ecx, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	cl, cl
	add	cl, byte ptr [rsp + 160]        # 1-byte Folded Reload
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	cl, 2
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	cl, 3
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	cl, 4
	or	cl, dl
	mov	edx, ecx
	movzx	ecx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	cl, 5
	or	cl, dl
	mov	edx, ecx
	movzx	ebx, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	bl, 6
	movzx	ecx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	cl, 7
	or	cl, bl
	or	cl, dl
	mov	byte ptr [r12 + 3], cl
	add	rax, 64
	add	r12, 4
	add	qword ptr [rsp + 192], -1       # 8-byte Folded Spill
	jne	.LBB11_128
# %bb.129:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	jmp	.LBB11_130
.LBB11_157:
	mov	r14, qword ptr [rsi]
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	sub	r9d, eax
	je	.LBB11_161
# %bb.158:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_159:                             # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	lea	rdx, [rdx + 8]
	setge	bl
	neg	bl
	lea	rsi, [rax + 7]
	test	rax, rax
	cmovns	rsi, rax
	sar	rsi, 3
	movzx	r8d, byte ptr [r15 + rsi]
	xor	bl, r8b
	lea	edi, [8*rsi]
	mov	ecx, eax
	sub	ecx, edi
	mov	edi, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	and	dil, bl
	xor	dil, r8b
	mov	byte ptr [r15 + rsi], dil
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_159
# %bb.160:
	add	r15, 1
.LBB11_161:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_165
# %bb.162:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_163:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	cmp	r14, qword ptr [rdx + 248]
	setge	byte ptr [rsp]                  # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 240]
	setge	byte ptr [rsp + 16]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 232]
	setge	byte ptr [rsp + 8]              # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 224]
	setge	byte ptr [rsp + 24]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 216]
	setge	byte ptr [rsp + 40]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 208]
	setge	byte ptr [rsp + 32]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 200]
	setge	byte ptr [rsp + 56]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 184]
	setge	byte ptr [rsp + 48]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 176]
	setge	byte ptr [rsp + 72]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 168]
	setge	byte ptr [rsp + 64]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 160]
	setge	byte ptr [rsp + 80]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 152]
	setge	byte ptr [rsp + 96]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 144]
	setge	byte ptr [rsp + 88]             # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 136]
	setge	byte ptr [rsp + 104]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 120]
	setge	r8b
	cmp	r14, qword ptr [rdx + 112]
	setge	byte ptr [rsp + 160]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 104]
	setge	byte ptr [rsp + 112]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 96]
	setge	r11b
	cmp	r14, qword ptr [rdx + 88]
	setge	r10b
	cmp	r14, qword ptr [rdx + 80]
	setge	r9b
	cmp	r14, qword ptr [rdx + 72]
	setge	dil
	cmp	r14, qword ptr [rdx + 56]
	setge	al
	cmp	r14, qword ptr [rdx + 48]
	setge	bl
	cmp	r14, qword ptr [rdx + 40]
	setge	sil
	cmp	r14, qword ptr [rdx + 32]
	setge	cl
	cmp	r14, qword ptr [rdx + 24]
	setge	r13b
	cmp	r14, qword ptr [rdx + 16]
	setge	r12b
	cmp	r14, qword ptr [rdx]
	setge	byte ptr [rsp + 224]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 8]
	setge	r15b
	cmp	r14, qword ptr [rdx + 64]
	setge	byte ptr [rsp + 128]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 128]
	setge	byte ptr [rsp + 176]            # 1-byte Folded Spill
	cmp	r14, qword ptr [rdx + 192]
	setge	byte ptr [rsp + 144]            # 1-byte Folded Spill
	add	r15b, r15b
	add	r15b, byte ptr [rsp + 224]      # 1-byte Folded Reload
	shl	r12b, 2
	or	r12b, r15b
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	shl	r13b, 3
	or	r13b, r12b
	shl	cl, 4
	or	cl, r13b
	shl	sil, 5
	or	sil, cl
	shl	bl, 6
	shl	al, 7
	or	al, bl
	or	al, sil
	mov	byte ptr [r15], al
	add	dil, dil
	add	dil, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	r9b, 2
	or	r9b, dil
	shl	r10b, 3
	or	r10b, r9b
	shl	r11b, 4
	or	r11b, r10b
	movzx	eax, byte ptr [rsp + 112]       # 1-byte Folded Reload
	shl	al, 5
	or	al, r11b
	movzx	ecx, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	cl, 6
	shl	r8b, 7
	or	r8b, cl
	or	r8b, al
	mov	byte ptr [r15 + 1], r8b
	movzx	eax, byte ptr [rsp + 104]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 176]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 96]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 2], al
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 144]        # 1-byte Folded Reload
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 24]        # 1-byte Folded Reload
	shl	al, 4
	or	al, cl
	mov	ecx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 5
	or	al, cl
	mov	ecx, eax
	movzx	ebx, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	bl, 6
	movzx	eax, byte ptr [rsp]             # 1-byte Folded Reload
	shl	al, 7
	or	al, bl
	or	al, cl
	mov	byte ptr [r15 + 3], al
	add	rdx, 256
	add	r15, 4
	add	qword ptr [rsp + 208], -1       # 8-byte Folded Spill
	jne	.LBB11_163
# %bb.164:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 192]      # 8-byte Reload
.LBB11_165:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.166:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_170
# %bb.167:
	xor	edi, edi
	jmp	.LBB11_168
.LBB11_172:
	lea	r10, [r11 + 31]
	test	r11, r11
	cmovns	r10, r11
	lea	eax, [r9 + 7]
	test	r9d, r9d
	cmovns	eax, r9d
	and	eax, -8
	movss	xmm0, dword ptr [rsi]           # xmm0 = mem[0],zero,zero,zero
	sub	r9d, eax
	je	.LBB11_176
# %bb.173:
	movsxd	rax, r9d
	.p2align	4, 0x90
.LBB11_174:                             # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rdx]
	lea	rdx, [rdx + 4]
	mov	esi, 0
	adc	sil, -1
	lea	rdi, [rax + 7]
	test	rax, rax
	cmovns	rdi, rax
	sar	rdi, 3
	movzx	r9d, byte ptr [r15 + rdi]
	xor	sil, r9b
	lea	r8d, [8*rdi]
	mov	ecx, eax
	sub	ecx, r8d
	mov	ebx, 1
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r15 + rdi], bl
	add	rax, 1
	cmp	rax, 8
	jne	.LBB11_174
# %bb.175:
	add	r15, 1
.LBB11_176:
	sar	r10, 5
	cmp	r11, 32
	jl	.LBB11_177
# %bb.178:
	cmp	r10, 4
	jb	.LBB11_179
# %bb.180:
	mov	rax, r10
	shl	rax, 7
	add	rax, rdx
	cmp	r15, rax
	jae	.LBB11_182
# %bb.181:
	lea	rax, [r15 + 4*r10]
	cmp	rax, rdx
	jbe	.LBB11_182
.LBB11_179:
	xor	r8d, r8d
	mov	rbx, rdx
	mov	r14, r15
.LBB11_185:
	mov	qword ptr [rsp + 136], r11      # 8-byte Spill
	mov	qword ptr [rsp + 208], r10      # 8-byte Spill
	sub	r10, r8
	mov	qword ptr [rsp + 224], r10      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_186:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp], r14            # 8-byte Spill
	ucomiss	xmm0, dword ptr [rbx]
	setae	byte ptr [rsp + 128]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 4]
	setae	r8b
	ucomiss	xmm0, dword ptr [rbx + 8]
	setae	r14b
	ucomiss	xmm0, dword ptr [rbx + 12]
	setae	r13b
	ucomiss	xmm0, dword ptr [rbx + 16]
	setae	byte ptr [rsp + 104]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 20]
	setae	byte ptr [rsp + 64]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 24]
	setae	al
	ucomiss	xmm0, dword ptr [rbx + 28]
	setae	r11b
	ucomiss	xmm0, dword ptr [rbx + 32]
	setae	byte ptr [rsp + 112]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 36]
	setae	dl
	ucomiss	xmm0, dword ptr [rbx + 40]
	setae	sil
	ucomiss	xmm0, dword ptr [rbx + 44]
	setae	r9b
	ucomiss	xmm0, dword ptr [rbx + 48]
	setae	r10b
	ucomiss	xmm0, dword ptr [rbx + 52]
	setae	r12b
	ucomiss	xmm0, dword ptr [rbx + 56]
	setae	byte ptr [rsp + 160]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 60]
	setae	dil
	ucomiss	xmm0, dword ptr [rbx + 64]
	setae	byte ptr [rsp + 96]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 68]
	setae	byte ptr [rsp + 176]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 72]
	setae	byte ptr [rsp + 144]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 76]
	setae	byte ptr [rsp + 88]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 80]
	setae	byte ptr [rsp + 80]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 84]
	setae	byte ptr [rsp + 72]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 88]
	setae	byte ptr [rsp + 48]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 92]
	setae	r15b
	ucomiss	xmm0, dword ptr [rbx + 96]
	setae	byte ptr [rsp + 24]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 100]
	setae	byte ptr [rsp + 56]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 104]
	setae	byte ptr [rsp + 32]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 108]
	setae	byte ptr [rsp + 40]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 112]
	setae	byte ptr [rsp + 8]              # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 116]
	setae	byte ptr [rsp + 16]             # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 120]
	setae	byte ptr [rsp + 120]            # 1-byte Folded Spill
	ucomiss	xmm0, dword ptr [rbx + 124]
	setae	cl
	add	r8b, r8b
	add	r8b, byte ptr [rsp + 128]       # 1-byte Folded Reload
	shl	al, 6
	shl	r11b, 7
	or	r11b, al
	shl	r14b, 2
	or	r14b, r8b
	add	dl, dl
	add	dl, byte ptr [rsp + 112]        # 1-byte Folded Reload
	shl	r13b, 3
	or	r13b, r14b
	shl	sil, 2
	or	sil, dl
	movzx	edx, byte ptr [rsp + 104]       # 1-byte Folded Reload
	shl	dl, 4
	or	dl, r13b
	mov	r8d, edx
	mov	r14, qword ptr [rsp]            # 8-byte Reload
	shl	r9b, 3
	or	r9b, sil
	movzx	edx, byte ptr [rsp + 64]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, r8b
	shl	r10b, 4
	or	r10b, r9b
	shl	r12b, 5
	or	r12b, r10b
	movzx	esi, byte ptr [rsp + 160]       # 1-byte Folded Reload
	shl	sil, 6
	shl	dil, 7
	or	dil, sil
	or	r11b, dl
	or	dil, r12b
	movzx	eax, byte ptr [rsp + 176]       # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 96]         # 1-byte Folded Reload
	movzx	edx, byte ptr [rsp + 144]       # 1-byte Folded Reload
	shl	dl, 2
	or	dl, al
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 88]        # 1-byte Folded Reload
	shl	dl, 3
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 80]        # 1-byte Folded Reload
	shl	dl, 4
	or	dl, sil
	mov	esi, edx
	movzx	edx, byte ptr [rsp + 72]        # 1-byte Folded Reload
	shl	dl, 5
	or	dl, sil
	mov	byte ptr [r14], r11b
	movzx	esi, byte ptr [rsp + 48]        # 1-byte Folded Reload
	shl	sil, 6
	shl	r15b, 7
	or	r15b, sil
	mov	byte ptr [r14 + 1], dil
	or	r15b, dl
	movzx	eax, byte ptr [rsp + 56]        # 1-byte Folded Reload
	add	al, al
	add	al, byte ptr [rsp + 24]         # 1-byte Folded Reload
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 32]        # 1-byte Folded Reload
	shl	al, 2
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 40]        # 1-byte Folded Reload
	shl	al, 3
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 8]         # 1-byte Folded Reload
	shl	al, 4
	or	al, dl
	mov	edx, eax
	movzx	eax, byte ptr [rsp + 16]        # 1-byte Folded Reload
	shl	al, 5
	or	al, dl
	movzx	edx, byte ptr [rsp + 120]       # 1-byte Folded Reload
	shl	dl, 6
	shl	cl, 7
	or	cl, dl
	or	cl, al
	mov	byte ptr [r14 + 2], r15b
	mov	byte ptr [r14 + 3], cl
	add	rbx, 128
	add	r14, 4
	add	qword ptr [rsp + 224], -1       # 8-byte Folded Spill
	jne	.LBB11_186
# %bb.187:
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r10, qword ptr [rsp + 208]      # 8-byte Reload
	jmp	.LBB11_188
.LBB11_9:
	mov	r13, r15
.LBB11_91:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.92:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_94
# %bb.93:
	xor	esi, esi
	jmp	.LBB11_97
.LBB11_61:
	mov	r13, r15
.LBB11_72:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.73:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_75
# %bb.74:
	xor	r9d, r9d
	jmp	.LBB11_78
.LBB11_119:
	mov	r12, r15
	mov	rax, rdx
.LBB11_130:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.131:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_135
# %bb.132:
	xor	esi, esi
	jmp	.LBB11_133
.LBB11_177:
	mov	r14, r15
	mov	rbx, rdx
.LBB11_188:
	shl	r10, 5
	cmp	r10, r11
	jge	.LBB11_201
# %bb.189:
	mov	r8, r11
	sub	r8, r10
	not	r10
	add	r10, r11
	jne	.LBB11_193
# %bb.190:
	xor	r11d, r11d
	jmp	.LBB11_191
.LBB11_155:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_156:                             # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	mov	edi, 0
	adc	dil, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	r14, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB11_156
.LBB11_40:
	test	r8b, 1
	je	.LBB11_201
# %bb.41:
	xor	eax, eax
	cmp	r14, qword ptr [rdx]
	jmp	.LBB11_199
.LBB11_153:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB11_154:                             # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	setge	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	setge	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB11_154
.LBB11_150:
	test	r8b, 1
	je	.LBB11_201
# %bb.151:
	cmp	r14d, dword ptr [rdx]
	jmp	.LBB11_152
.LBB11_94:
	mov	r10, r8
	and	r10, -2
	xor	esi, esi
	.p2align	4, 0x90
.LBB11_95:                              # =>This Inner Loop Header: Depth=1
	cmp	r14b, byte ptr [rdx + rsi]
	setge	al
	neg	al
	mov	rdi, rsi
	shr	rdi, 3
	mov	ecx, esi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	movzx	r9d, byte ptr [r13 + rdi]
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r13 + rdi], bl
	cmp	r14b, byte ptr [rdx + rsi + 1]
	lea	rsi, [rsi + 2]
	setge	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r13 + rdi], al
	cmp	r10, rsi
	jne	.LBB11_95
# %bb.96:
	add	rdx, rsi
.LBB11_97:
	test	r8b, 1
	je	.LBB11_201
# %bb.98:
	cmp	r14b, byte ptr [rdx]
	setge	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r13 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	jmp	.LBB11_80
.LBB11_75:
	mov	r10, r8
	and	r10, -2
	xor	r9d, r9d
	.p2align	4, 0x90
.LBB11_76:                              # =>This Inner Loop Header: Depth=1
	mov	rax, r9
	cmp	r14b, byte ptr [rdx + r9]
	mov	esi, 0
	adc	sil, -1
	mov	rdi, r9
	shr	rdi, 3
	movzx	r9d, byte ptr [r13 + rdi]
	mov	ecx, eax
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	sil, r9b
	and	bl, sil
	xor	bl, r9b
	mov	byte ptr [r13 + rdi], bl
	cmp	r14b, byte ptr [rdx + rax + 1]
	lea	r9, [rax + 2]
	mov	esi, 0
	adc	sil, -1
	xor	sil, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, sil
	xor	al, bl
	mov	byte ptr [r13 + rdi], al
	cmp	r10, r9
	jne	.LBB11_76
# %bb.77:
	add	rdx, r9
.LBB11_78:
	test	r8b, 1
	je	.LBB11_201
# %bb.79:
	xor	eax, eax
	cmp	r14b, byte ptr [rdx]
	adc	al, -1
	mov	rdx, r9
	shr	rdx, 3
	mov	dil, byte ptr [r13 + rdx]
	and	r9b, 7
	mov	bl, 1
	mov	ecx, r9d
	shl	bl, cl
	xor	al, dil
	and	bl, al
.LBB11_80:
	xor	bl, dil
	mov	byte ptr [r13 + rdx], bl
	jmp	.LBB11_201
.LBB11_137:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_138:                             # =>This Inner Loop Header: Depth=1
	cmp	r14d, dword ptr [rdx]
	mov	edi, 0
	adc	dil, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	r14d, dword ptr [rdx + 4]
	lea	rdx, [rdx + 8]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB11_138
.LBB11_24:
	test	r8b, 1
	je	.LBB11_201
# %bb.25:
	xor	eax, eax
	cmp	r14d, dword ptr [rdx]
	jmp	.LBB11_199
.LBB11_195:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_196:                             # =>This Inner Loop Header: Depth=1
	ucomisd	xmm0, qword ptr [rdx]
	mov	eax, 0
	adc	al, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, r11d
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	r11, 2
	ucomisd	xmm0, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	mov	edi, 0
	adc	dil, -1
	xor	dil, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, r11
	jne	.LBB11_196
.LBB11_197:
	test	r8b, 1
	je	.LBB11_201
# %bb.198:
	xor	eax, eax
	ucomisd	xmm0, qword ptr [rdx]
	jmp	.LBB11_199
.LBB11_112:
	mov	r9, r8
	and	r9, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_113:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rdx]
	mov	edi, 0
	adc	dil, -1
	mov	rsi, r11
	shr	rsi, 3
	movzx	r10d, byte ptr [r15 + rsi]
	xor	dil, r10b
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	and	al, dil
	xor	al, r10b
	mov	byte ptr [r15 + rsi], al
	add	r11, 2
	cmp	r14w, word ptr [rdx + 2]
	lea	rdx, [rdx + 4]
	mov	edi, 0
	adc	dil, -1
	xor	dil, al
	or	cl, 1
	mov	bl, 1
	shl	bl, cl
	and	bl, dil
	xor	bl, al
	mov	byte ptr [r15 + rsi], bl
	cmp	r9, r11
	jne	.LBB11_113
.LBB11_110:
	test	r8b, 1
	je	.LBB11_201
# %bb.111:
	xor	eax, eax
	cmp	r14w, word ptr [rdx]
.LBB11_199:
	adc	al, -1
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r15 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	jmp	.LBB11_200
.LBB11_170:
	mov	r10, r8
	and	r10, -2
	xor	edi, edi
	.p2align	4, 0x90
.LBB11_171:                             # =>This Inner Loop Header: Depth=1
	cmp	r14, qword ptr [rdx]
	setge	al
	neg	al
	mov	rsi, rdi
	shr	rsi, 3
	movzx	r9d, byte ptr [r15 + rsi]
	mov	ecx, edi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	al, r9b
	and	bl, al
	xor	bl, r9b
	mov	byte ptr [r15 + rsi], bl
	add	rdi, 2
	cmp	r14, qword ptr [rdx + 8]
	lea	rdx, [rdx + 16]
	setge	r9b
	neg	r9b
	xor	r9b, bl
	or	cl, 1
	mov	al, 1
	shl	al, cl
	and	al, r9b
	xor	al, bl
	mov	byte ptr [r15 + rsi], al
	cmp	r10, rdi
	jne	.LBB11_171
.LBB11_168:
	test	r8b, 1
	je	.LBB11_201
# %bb.169:
	cmp	r14, qword ptr [rdx]
.LBB11_152:
	setge	al
	neg	al
	mov	rdx, rdi
	shr	rdx, 3
	mov	sil, byte ptr [r15 + rdx]
	and	dil, 7
	mov	bl, 1
	mov	ecx, edi
	shl	bl, cl
	xor	al, sil
	and	bl, al
.LBB11_200:
	xor	bl, sil
	mov	byte ptr [r15 + rdx], bl
.LBB11_201:
	lea	rsp, [rbp - 40]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret
.LBB11_135:
	mov	r9, r8
	and	r9, -2
	xor	esi, esi
	.p2align	4, 0x90
.LBB11_136:                             # =>This Inner Loop Header: Depth=1
	cmp	r14w, word ptr [rax]
	setge	dl
	neg	dl
	mov	rdi, rsi
	shr	rdi, 3
	movzx	r10d, byte ptr [r12 + rdi]
	mov	ecx, esi
	and	cl, 6
	mov	bl, 1
	shl	bl, cl
	xor	dl, r10b
	and	bl, dl
	xor	bl, r10b
	mov	byte ptr [r12 + rdi], bl
	add	rsi, 2
	cmp	r14w, word ptr [rax + 2]
	lea	rax, [rax + 4]
	setge	r10b
	neg	r10b
	xor	r10b, bl
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, r10b
	xor	dl, bl
	mov	byte ptr [r12 + rdi], dl
	cmp	r9, rsi
	jne	.LBB11_136
.LBB11_133:
	test	r8b, 1
	je	.LBB11_201
# %bb.134:
	cmp	r14w, word ptr [rax]
	setge	al
	neg	al
	mov	rdx, rsi
	shr	rdx, 3
	mov	dil, byte ptr [r12 + rdx]
	and	sil, 7
	mov	bl, 1
	mov	ecx, esi
	shl	bl, cl
	xor	al, dil
	and	bl, al
	xor	bl, dil
	mov	byte ptr [r12 + rdx], bl
	jmp	.LBB11_201
.LBB11_193:
	mov	r10, r8
	and	r10, -2
	xor	r11d, r11d
	.p2align	4, 0x90
.LBB11_194:                             # =>This Inner Loop Header: Depth=1
	ucomiss	xmm0, dword ptr [rbx]
	mov	edx, 0
	adc	dl, -1
	mov	rdi, r11
	shr	rdi, 3
	movzx	r9d, byte ptr [r14 + rdi]
	mov	ecx, r11d
	and	cl, 6
	mov	al, 1
	shl	al, cl
	xor	dl, r9b
	and	al, dl
	xor	al, r9b
	mov	byte ptr [r14 + rdi], al
	add	r11, 2
	ucomiss	xmm0, dword ptr [rbx + 4]
	lea	rbx, [rbx + 8]
	mov	esi, 0
	adc	sil, -1
	xor	sil, al
	or	cl, 1
	mov	dl, 1
	shl	dl, cl
	and	dl, sil
	xor	dl, al
	mov	byte ptr [r14 + rdi], dl
	cmp	r10, r11
	jne	.LBB11_194
.LBB11_191:
	test	r8b, 1
	je	.LBB11_201
# %bb.192:
	xor	eax, eax
	ucomiss	xmm0, dword ptr [rbx]
	adc	al, -1
	mov	rdx, r11
	shr	rdx, 3
	mov	sil, byte ptr [r14 + rdx]
	and	r11b, 7
	mov	bl, 1
	mov	ecx, r11d
	shl	bl, cl
	xor	al, sil
	and	bl, al
	xor	bl, sil
	mov	byte ptr [r14 + rdx], bl
	jmp	.LBB11_201
.LBB11_85:
	and	r10, -16
	mov	rax, r10
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 280], rax      # 8-byte Spill
	mov	qword ptr [rsp + 256], r10      # 8-byte Spill
	lea	rax, [r15 + 4*r10]
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	movzx	eax, r14b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 144], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	.p2align	4, 0x90
.LBB11_86:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 224], rax      # 8-byte Spill
	shl	rax, 5
	mov	rdi, rax
	mov	rsi, rax
	mov	r9, rax
	mov	r10, rax
	mov	r12, rax
	mov	r14, rax
	mov	r15, rax
	mov	r13, rax
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	mov	r11, rax
	mov	r8, rax
	movzx	ecx, byte ptr [rdx + rax]
	movd	xmm4, ecx
	movzx	ecx, byte ptr [rdx + rax + 1]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rdx + rax + 2]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rdx + rax + 3]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [rdx + rax + 4]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [rdx + rax + 5]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rdx + rax + 6]
	movd	xmm8, ecx
	movzx	ecx, byte ptr [rdx + rax + 7]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [rdx + rax + 8]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 192], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rax + 9]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rdx + rax + 10]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rdx + rax + 11]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [rdx + rax + 12]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 208], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rax + 13]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rdx + rax + 14]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [rdx + rax + 15]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 160], xmm0   # 16-byte Spill
	mov	qword ptr [rsp + 72], rax       # 8-byte Spill
	mov	rbx, rax
	or	rbx, 32
	mov	qword ptr [rsp + 8], rbx        # 8-byte Spill
	or	rdi, 64
	mov	qword ptr [rsp + 32], rdi       # 8-byte Spill
	or	rsi, 96
	mov	qword ptr [rsp + 24], rsi       # 8-byte Spill
	or	r9, 128
	or	r10, 160
	or	r12, 192
	mov	qword ptr [rsp + 64], r12       # 8-byte Spill
	or	r14, 224
	or	r15, 256
	mov	qword ptr [rsp + 88], r15       # 8-byte Spill
	or	r13, 288
	mov	qword ptr [rsp + 80], r13       # 8-byte Spill
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	or	r12, 320
	or	r11, 352
	or	r8, 384
	mov	qword ptr [rsp + 96], r8        # 8-byte Spill
	mov	rcx, rax
	or	rcx, 416
	mov	qword ptr [rsp + 48], rcx       # 8-byte Spill
	mov	rcx, rax
	or	rcx, 448
	mov	qword ptr [rsp + 40], rcx       # 8-byte Spill
	mov	rsi, rax
	or	rsi, 480
	mov	qword ptr [rsp + 16], rsi       # 8-byte Spill
	pinsrb	xmm4, byte ptr [rdx + rbx], 1
	pinsrb	xmm4, byte ptr [rdx + rdi], 2
	mov	rbx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rbx], 3
	pinsrb	xmm4, byte ptr [rdx + r9], 4
	pinsrb	xmm4, byte ptr [rdx + r10], 5
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax], 6
	pinsrb	xmm4, byte ptr [rdx + r14], 7
	pinsrb	xmm4, byte ptr [rdx + r15], 8
	pinsrb	xmm4, byte ptr [rdx + r13], 9
	mov	r15, r12
	mov	qword ptr [rsp + 56], r12       # 8-byte Spill
	pinsrb	xmm4, byte ptr [rdx + r12], 10
	pinsrb	xmm4, byte ptr [rdx + r11], 11
	pinsrb	xmm4, byte ptr [rdx + r8], 12
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + rax], 13
	pinsrb	xmm4, byte ptr [rdx + rcx], 14
	pinsrb	xmm4, byte ptr [rdx + rsi], 15
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r12 + 1], 1
	pinsrb	xmm3, byte ptr [rdx + rdi + 1], 2
	pinsrb	xmm3, byte ptr [rdx + rbx + 1], 3
	pinsrb	xmm3, byte ptr [rdx + r9 + 1], 4
	pinsrb	xmm3, byte ptr [rdx + r10 + 1], 5
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rbx + 1], 6
	pinsrb	xmm3, byte ptr [rdx + r14 + 1], 7
	mov	rdi, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rdi + 1], 8
	pinsrb	xmm3, byte ptr [rdx + r13 + 1], 9
	pinsrb	xmm3, byte ptr [rdx + r15 + 1], 10
	pinsrb	xmm3, byte ptr [rdx + r11 + 1], 11
	mov	r15, r11
	pinsrb	xmm3, byte ptr [rdx + r8 + 1], 12
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r13 + 1], 13
	pinsrb	xmm3, byte ptr [rdx + rcx + 1], 14
	movdqa	xmm1, xmmword ptr [rsp + 144]   # 16-byte Reload
	pcmpgtb	xmm4, xmm1
	pinsrb	xmm3, byte ptr [rdx + rsi + 1], 15
	pcmpgtb	xmm3, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI11_16] # xmm0 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm3, xmm0
	paddb	xmm3, xmm4
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 16]
	movd	xmm10, esi
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 2], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 2], 2
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r11 + 2], 3
	pinsrb	xmm5, byte ptr [rdx + r9 + 2], 4
	pinsrb	xmm5, byte ptr [rdx + r10 + 2], 5
	pinsrb	xmm5, byte ptr [rdx + rbx + 2], 6
	mov	qword ptr [rsp + 104], r14      # 8-byte Spill
	pinsrb	xmm5, byte ptr [rdx + r14 + 2], 7
	mov	r12, rdi
	pinsrb	xmm5, byte ptr [rdx + rdi + 2], 8
	mov	r8, qword ptr [rsp + 80]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r8 + 2], 9
	mov	rdi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rdi + 2], 10
	mov	qword ptr [rsp + 176], r15      # 8-byte Spill
	pinsrb	xmm5, byte ptr [rdx + r15 + 2], 11
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rcx + 2], 12
	mov	rsi, r13
	pinsrb	xmm5, byte ptr [rdx + r13 + 2], 13
	mov	r13, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r13 + 2], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 2], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 3], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 3], 2
	pinsrb	xmm7, byte ptr [rdx + r11 + 3], 3
	pinsrb	xmm7, byte ptr [rdx + r9 + 3], 4
	pinsrb	xmm7, byte ptr [rdx + r10 + 3], 5
	pinsrb	xmm7, byte ptr [rdx + rbx + 3], 6
	pinsrb	xmm7, byte ptr [rdx + r14 + 3], 7
	pinsrb	xmm7, byte ptr [rdx + r12 + 3], 8
	pinsrb	xmm7, byte ptr [rdx + r8 + 3], 9
	pinsrb	xmm7, byte ptr [rdx + rdi + 3], 10
	pinsrb	xmm7, byte ptr [rdx + r15 + 3], 11
	pinsrb	xmm7, byte ptr [rdx + rcx + 3], 12
	pinsrb	xmm7, byte ptr [rdx + rsi + 3], 13
	pinsrb	xmm7, byte ptr [rdx + r13 + 3], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 3], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 4], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 4], 2
	pinsrb	xmm9, byte ptr [rdx + r11 + 4], 3
	pinsrb	xmm9, byte ptr [rdx + r9 + 4], 4
	mov	qword ptr [rsp + 128], r9       # 8-byte Spill
	pinsrb	xmm9, byte ptr [rdx + r10 + 4], 5
	pinsrb	xmm9, byte ptr [rdx + rbx + 4], 6
	pinsrb	xmm9, byte ptr [rdx + r14 + 4], 7
	pinsrb	xmm9, byte ptr [rdx + r12 + 4], 8
	pinsrb	xmm9, byte ptr [rdx + r8 + 4], 9
	pinsrb	xmm9, byte ptr [rdx + rdi + 4], 10
	pinsrb	xmm9, byte ptr [rdx + r15 + 4], 11
	pinsrb	xmm9, byte ptr [rdx + rcx + 4], 12
	pinsrb	xmm9, byte ptr [rdx + rsi + 4], 13
	pinsrb	xmm9, byte ptr [rdx + r13 + 4], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 4], 15
	mov	r13, rax
	pcmpgtb	xmm5, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI11_17] # xmm0 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm5, xmm0
	pcmpgtb	xmm7, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI11_18] # xmm0 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm7, xmm0
	por	xmm7, xmm5
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 17]
	movd	xmm4, esi
	pcmpgtb	xmm9, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI11_19] # xmm0 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm9, xmm0
	por	xmm9, xmm7
	movzx	esi, byte ptr [rdx + rax + 18]
	movd	xmm7, esi
	pcmpeqd	xmm0, xmm0
	psubb	xmm3, xmm0
	por	xmm9, xmm3
	movzx	esi, byte ptr [rdx + rax + 19]
	movd	xmm5, esi
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r8 + 5], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rdi + 5], 2
	pinsrb	xmm2, byte ptr [rdx + r11 + 5], 3
	pinsrb	xmm2, byte ptr [rdx + r9 + 5], 4
	pinsrb	xmm2, byte ptr [rdx + r10 + 5], 5
	mov	r12, r10
	mov	r14, rbx
	pinsrb	xmm2, byte ptr [rdx + rbx + 5], 6
	mov	rbx, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rbx + 5], 7
	mov	r15, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r15 + 5], 8
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r9 + 5], 9
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rsi + 5], 10
	mov	r11, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r11 + 5], 11
	pinsrb	xmm2, byte ptr [rdx + rcx + 5], 12
	mov	r10, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r10 + 5], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 5], 14
	pinsrb	xmm2, byte ptr [rdx + r13 + 5], 15
	pinsrb	xmm8, byte ptr [rdx + r8 + 6], 1
	pinsrb	xmm8, byte ptr [rdx + rdi + 6], 2
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r13 + 6], 3
	mov	r13, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + r13 + 6], 4
	pinsrb	xmm8, byte ptr [rdx + r12 + 6], 5
	pinsrb	xmm8, byte ptr [rdx + r14 + 6], 6
	pinsrb	xmm8, byte ptr [rdx + rbx + 6], 7
	pinsrb	xmm8, byte ptr [rdx + r15 + 6], 8
	pinsrb	xmm8, byte ptr [rdx + r9 + 6], 9
	pinsrb	xmm8, byte ptr [rdx + rsi + 6], 10
	pinsrb	xmm8, byte ptr [rdx + r11 + 6], 11
	mov	r15, r11
	pinsrb	xmm8, byte ptr [rdx + rcx + 6], 12
	pinsrb	xmm8, byte ptr [rdx + r10 + 6], 13
	pinsrb	xmm8, byte ptr [rdx + rax + 6], 14
	mov	r10, rax
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm8, byte ptr [rdx + rax + 6], 15
	pinsrb	xmm14, byte ptr [rdx + r8 + 7], 1
	pinsrb	xmm14, byte ptr [rdx + rdi + 7], 2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rax + 7], 3
	mov	r9, r13
	pinsrb	xmm14, byte ptr [rdx + r13 + 7], 4
	mov	rdi, r12
	pinsrb	xmm14, byte ptr [rdx + r12 + 7], 5
	pinsrb	xmm14, byte ptr [rdx + r14 + 7], 6
	pinsrb	xmm14, byte ptr [rdx + rbx + 7], 7
	mov	r11, rbx
	mov	r12, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + r12 + 7], 8
	mov	r13, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + r13 + 7], 9
	pinsrb	xmm14, byte ptr [rdx + rsi + 7], 10
	pinsrb	xmm14, byte ptr [rdx + r15 + 7], 11
	pinsrb	xmm14, byte ptr [rdx + rcx + 7], 12
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rbx + 7], 13
	pinsrb	xmm14, byte ptr [rdx + r10 + 7], 14
	movdqa	xmm1, xmm14
	movdqa	xmm14, xmmword ptr [rsp + 144]  # 16-byte Reload
	pcmpgtb	xmm2, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI11_20] # xmm0 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm0
	pcmpgtb	xmm8, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI11_21] # xmm0 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm8, xmm0
	por	xmm8, xmm2
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 20]
	movd	xmm3, esi
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rcx + 7], 15
	pcmpgtb	xmm1, xmm14
	movdqa	xmm0, xmmword ptr [rip + .LCPI11_6] # xmm0 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm1, xmm0
	por	xmm1, xmm8
	movzx	esi, byte ptr [rdx + rax + 21]
	movd	xmm2, esi
	movdqa	xmm0, xmmword ptr [rsp + 192]   # 16-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r8 + 8], 1
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r14 + 8], 2
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 8], 3
	pinsrb	xmm0, byte ptr [rdx + r9 + 8], 4
	pinsrb	xmm0, byte ptr [rdx + rdi + 8], 5
	mov	r10, rdi
	mov	rdi, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rdi + 8], 6
	pinsrb	xmm0, byte ptr [rdx + r11 + 8], 7
	pinsrb	xmm0, byte ptr [rdx + r12 + 8], 8
	pinsrb	xmm0, byte ptr [rdx + r13 + 8], 9
	mov	r8, qword ptr [rsp + 56]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r8 + 8], 10
	pinsrb	xmm0, byte ptr [rdx + r15 + 8], 11
	mov	rsi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 8], 12
	pinsrb	xmm0, byte ptr [rdx + rbx + 8], 13
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 8], 14
	pinsrb	xmm0, byte ptr [rdx + rcx + 8], 15
	por	xmm1, xmm9
	movdqa	xmmword ptr [rsp + 192], xmm1   # 16-byte Spill
	movzx	esi, byte ptr [rdx + rax + 22]
	movd	xmm1, esi
	pcmpgtb	xmm0, xmm14
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r11 + 9], 1
	mov	rbx, r11
	mov	rax, r14
	pinsrb	xmm11, byte ptr [rdx + r14 + 9], 2
	mov	r11, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r11 + 9], 3
	pinsrb	xmm11, byte ptr [rdx + r9 + 9], 4
	mov	qword ptr [rsp + 112], r10      # 8-byte Spill
	pinsrb	xmm11, byte ptr [rdx + r10 + 9], 5
	pinsrb	xmm11, byte ptr [rdx + rdi + 9], 6
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r14 + 9], 7
	pinsrb	xmm11, byte ptr [rdx + r12 + 9], 8
	pinsrb	xmm11, byte ptr [rdx + r13 + 9], 9
	mov	rsi, r8
	pinsrb	xmm11, byte ptr [rdx + r8 + 9], 10
	mov	rcx, r15
	pinsrb	xmm11, byte ptr [rdx + r15 + 9], 11
	mov	r8, qword ptr [rsp + 96]        # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r8 + 9], 12
	mov	r15, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r15 + 9], 13
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rdi + 9], 14
	mov	rdi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rdi + 9], 15
	pinsrb	xmm12, byte ptr [rdx + rbx + 10], 1
	pinsrb	xmm12, byte ptr [rdx + rax + 10], 2
	pinsrb	xmm12, byte ptr [rdx + r11 + 10], 3
	pinsrb	xmm12, byte ptr [rdx + r9 + 10], 4
	pinsrb	xmm12, byte ptr [rdx + r10 + 10], 5
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rbx + 10], 6
	pinsrb	xmm12, byte ptr [rdx + r14 + 10], 7
	pinsrb	xmm12, byte ptr [rdx + r12 + 10], 8
	pinsrb	xmm12, byte ptr [rdx + r13 + 10], 9
	pinsrb	xmm12, byte ptr [rdx + rsi + 10], 10
	pinsrb	xmm12, byte ptr [rdx + rcx + 10], 11
	pinsrb	xmm12, byte ptr [rdx + r8 + 10], 12
	pinsrb	xmm12, byte ptr [rdx + r15 + 10], 13
	mov	r11, r15
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + r15 + 10], 14
	pinsrb	xmm12, byte ptr [rdx + rdi + 10], 15
	mov	rbx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rbx + 11], 1
	pinsrb	xmm13, byte ptr [rdx + rax + 11], 2
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rax + 11], 3
	pinsrb	xmm13, byte ptr [rdx + r9 + 11], 4
	pinsrb	xmm13, byte ptr [rdx + r10 + 11], 5
	mov	r10, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + r10 + 11], 6
	pinsrb	xmm13, byte ptr [rdx + r14 + 11], 7
	pinsrb	xmm13, byte ptr [rdx + r12 + 11], 8
	pinsrb	xmm13, byte ptr [rdx + r13 + 11], 9
	pinsrb	xmm13, byte ptr [rdx + rsi + 11], 10
	pinsrb	xmm13, byte ptr [rdx + rcx + 11], 11
	pinsrb	xmm13, byte ptr [rdx + r8 + 11], 12
	pinsrb	xmm13, byte ptr [rdx + r11 + 11], 13
	pinsrb	xmm13, byte ptr [rdx + r15 + 11], 14
	pinsrb	xmm13, byte ptr [rdx + rdi + 11], 15
	pcmpgtb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI11_16]
	paddb	xmm11, xmm0
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 23]
	movd	xmm8, esi
	pcmpgtb	xmm12, xmm14
	pandn	xmm12, xmmword ptr [rip + .LCPI11_17]
	pcmpgtb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI11_18]
	por	xmm13, xmm12
	movzx	esi, byte ptr [rdx + rcx + 24]
	movd	xmm12, esi
	movdqa	xmm9, xmmword ptr [rsp + 208]   # 16-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rbx + 12], 1
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r15 + 12], 2
	mov	r11, rax
	pinsrb	xmm9, byte ptr [rdx + rax + 12], 3
	mov	rdi, r9
	pinsrb	xmm9, byte ptr [rdx + r9 + 12], 4
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r9 + 12], 5
	mov	rbx, r10
	pinsrb	xmm9, byte ptr [rdx + r10 + 12], 6
	mov	r10, r14
	pinsrb	xmm9, byte ptr [rdx + r14 + 12], 7
	mov	r14, r12
	pinsrb	xmm9, byte ptr [rdx + r12 + 12], 8
	mov	r12, r13
	pinsrb	xmm9, byte ptr [rdx + r13 + 12], 9
	mov	r13, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r13 + 12], 10
	mov	rcx, qword ptr [rsp + 176]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rcx + 12], 11
	pinsrb	xmm9, byte ptr [rdx + r8 + 12], 12
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rsi + 12], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 12], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 12], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 13], 1
	pinsrb	xmm6, byte ptr [rdx + r15 + 13], 2
	pinsrb	xmm6, byte ptr [rdx + r11 + 13], 3
	pinsrb	xmm6, byte ptr [rdx + rdi + 13], 4
	pinsrb	xmm6, byte ptr [rdx + r9 + 13], 5
	pinsrb	xmm6, byte ptr [rdx + rbx + 13], 6
	pinsrb	xmm6, byte ptr [rdx + r10 + 13], 7
	pinsrb	xmm6, byte ptr [rdx + r14 + 13], 8
	pinsrb	xmm6, byte ptr [rdx + r12 + 13], 9
	pinsrb	xmm6, byte ptr [rdx + r13 + 13], 10
	pinsrb	xmm6, byte ptr [rdx + rcx + 13], 11
	pinsrb	xmm6, byte ptr [rdx + r8 + 13], 12
	pinsrb	xmm6, byte ptr [rdx + rsi + 13], 13
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 13], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 13], 15
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rax + 14], 1
	pinsrb	xmm15, byte ptr [rdx + r15 + 14], 2
	pinsrb	xmm15, byte ptr [rdx + r11 + 14], 3
	pinsrb	xmm15, byte ptr [rdx + rdi + 14], 4
	mov	r11, rdi
	pinsrb	xmm15, byte ptr [rdx + r9 + 14], 5
	pinsrb	xmm15, byte ptr [rdx + rbx + 14], 6
	pinsrb	xmm15, byte ptr [rdx + r10 + 14], 7
	pinsrb	xmm15, byte ptr [rdx + r14 + 14], 8
	pinsrb	xmm15, byte ptr [rdx + r12 + 14], 9
	pinsrb	xmm15, byte ptr [rdx + r13 + 14], 10
	pinsrb	xmm15, byte ptr [rdx + rcx + 14], 11
	mov	r13, rcx
	pinsrb	xmm15, byte ptr [rdx + r8 + 14], 12
	mov	r12, r8
	pinsrb	xmm15, byte ptr [rdx + rsi + 14], 13
	mov	r15, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r15 + 14], 14
	pcmpgtb	xmm9, xmm14
	pandn	xmm9, xmmword ptr [rip + .LCPI11_19]
	por	xmm9, xmm13
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 25]
	movd	xmm13, esi
	psubb	xmm11, xmmword ptr [rip + .LCPI11_22]
	por	xmm9, xmm11
	movzx	esi, byte ptr [rdx + rax + 26]
	movd	xmm0, esi
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rcx + 14], 15
	pcmpgtb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI11_20]
	pcmpgtb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI11_21]
	por	xmm15, xmm6
	movzx	esi, byte ptr [rdx + rax + 27]
	movd	xmm11, esi
	movdqa	xmm6, xmmword ptr [rsp + 160]   # 16-byte Reload
	mov	r8, qword ptr [rsp + 8]         # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r8 + 15], 1
	mov	rdi, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rdi + 15], 2
	mov	rsi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 15], 3
	pinsrb	xmm6, byte ptr [rdx + r11 + 15], 4
	pinsrb	xmm6, byte ptr [rdx + r9 + 15], 5
	mov	r9, rbx
	pinsrb	xmm6, byte ptr [rdx + rbx + 15], 6
	pinsrb	xmm6, byte ptr [rdx + r10 + 15], 7
	pinsrb	xmm6, byte ptr [rdx + r14 + 15], 8
	mov	r10, r14
	mov	r11, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r11 + 15], 9
	mov	rbx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rbx + 15], 10
	pinsrb	xmm6, byte ptr [rdx + r13 + 15], 11
	pinsrb	xmm6, byte ptr [rdx + r12 + 15], 12
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r12 + 15], 13
	pinsrb	xmm6, byte ptr [rdx + r15 + 15], 14
	pinsrb	xmm6, byte ptr [rdx + rcx + 15], 15
	pcmpgtb	xmm6, xmm14
	pandn	xmm6, xmmword ptr [rip + .LCPI11_6]
	por	xmm6, xmm15
	movzx	esi, byte ptr [rdx + rax + 28]
	movd	xmm15, esi
	por	xmm6, xmm9
	movdqa	xmmword ptr [rsp + 160], xmm6   # 16-byte Spill
	movzx	esi, byte ptr [rdx + rax + 29]
	movd	xmm9, esi
	mov	rax, r8
	pinsrb	xmm10, byte ptr [rdx + r8 + 16], 1
	mov	r14, rdi
	pinsrb	xmm10, byte ptr [rdx + rdi + 16], 2
	mov	rcx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rcx + 16], 3
	mov	rdi, qword ptr [rsp + 128]      # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rdi + 16], 4
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r8 + 16], 5
	pinsrb	xmm10, byte ptr [rdx + r9 + 16], 6
	mov	r9, qword ptr [rsp + 104]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r9 + 16], 7
	pinsrb	xmm10, byte ptr [rdx + r10 + 16], 8
	pinsrb	xmm10, byte ptr [rdx + r11 + 16], 9
	pinsrb	xmm10, byte ptr [rdx + rbx + 16], 10
	pinsrb	xmm10, byte ptr [rdx + r13 + 16], 11
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + r15 + 16], 12
	pinsrb	xmm10, byte ptr [rdx + r12 + 16], 13
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rcx + 16], 14
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rsi + 16], 15
	pinsrb	xmm4, byte ptr [rdx + rax + 17], 1
	pinsrb	xmm4, byte ptr [rdx + r14 + 17], 2
	mov	r14, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r14 + 17], 3
	pinsrb	xmm4, byte ptr [rdx + rdi + 17], 4
	pinsrb	xmm4, byte ptr [rdx + r8 + 17], 5
	mov	r12, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r12 + 17], 6
	pinsrb	xmm4, byte ptr [rdx + r9 + 17], 7
	pinsrb	xmm4, byte ptr [rdx + r10 + 17], 8
	pinsrb	xmm4, byte ptr [rdx + r11 + 17], 9
	pinsrb	xmm4, byte ptr [rdx + rbx + 17], 10
	pinsrb	xmm4, byte ptr [rdx + r13 + 17], 11
	mov	rbx, r15
	pinsrb	xmm4, byte ptr [rdx + r15 + 17], 12
	mov	r8, qword ptr [rsp + 48]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r8 + 17], 13
	pinsrb	xmm4, byte ptr [rdx + rcx + 17], 14
	mov	r9, rcx
	pinsrb	xmm4, byte ptr [rdx + rsi + 17], 15
	mov	r15, rsi
	pcmpgtb	xmm10, xmm14
	pcmpgtb	xmm4, xmm14
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_16] # xmm6 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pandn	xmm4, xmm6
	paddb	xmm4, xmm10
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 30]
	movd	xmm10, esi
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rsi + 18], 1
	pinsrb	xmm5, byte ptr [rdx + rsi + 19], 1
	pinsrb	xmm3, byte ptr [rdx + rsi + 20], 1
	pinsrb	xmm2, byte ptr [rdx + rsi + 21], 1
	pinsrb	xmm1, byte ptr [rdx + rsi + 22], 1
	pinsrb	xmm8, byte ptr [rdx + rsi + 23], 1
	pinsrb	xmm12, byte ptr [rdx + rsi + 24], 1
	pinsrb	xmm13, byte ptr [rdx + rsi + 25], 1
	pinsrb	xmm0, byte ptr [rdx + rsi + 26], 1
	pinsrb	xmm11, byte ptr [rdx + rsi + 27], 1
	pinsrb	xmm15, byte ptr [rdx + rsi + 28], 1
	pinsrb	xmm9, byte ptr [rdx + rsi + 29], 1
	pinsrb	xmm10, byte ptr [rdx + rsi + 30], 1
	movzx	eax, byte ptr [rdx + rax + 31]
	movd	xmm6, eax
	pinsrb	xmm6, byte ptr [rdx + rsi + 31], 1
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 18], 2
	pinsrb	xmm5, byte ptr [rdx + rax + 19], 2
	pinsrb	xmm3, byte ptr [rdx + rax + 20], 2
	pinsrb	xmm2, byte ptr [rdx + rax + 21], 2
	pinsrb	xmm1, byte ptr [rdx + rax + 22], 2
	pinsrb	xmm8, byte ptr [rdx + rax + 23], 2
	pinsrb	xmm12, byte ptr [rdx + rax + 24], 2
	pinsrb	xmm13, byte ptr [rdx + rax + 25], 2
	pinsrb	xmm0, byte ptr [rdx + rax + 26], 2
	pinsrb	xmm11, byte ptr [rdx + rax + 27], 2
	pinsrb	xmm15, byte ptr [rdx + rax + 28], 2
	pinsrb	xmm9, byte ptr [rdx + rax + 29], 2
	pinsrb	xmm10, byte ptr [rdx + rax + 30], 2
	pinsrb	xmm6, byte ptr [rdx + rax + 31], 2
	mov	r11, r14
	pinsrb	xmm7, byte ptr [rdx + r14 + 18], 3
	pinsrb	xmm7, byte ptr [rdx + rdi + 18], 4
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rcx + 18], 5
	pinsrb	xmm7, byte ptr [rdx + r12 + 18], 6
	mov	r10, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + r10 + 18], 7
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + r14 + 18], 8
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rax + 18], 9
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rsi + 18], 10
	pinsrb	xmm7, byte ptr [rdx + r13 + 18], 11
	pinsrb	xmm7, byte ptr [rdx + rbx + 18], 12
	pinsrb	xmm7, byte ptr [rdx + r8 + 18], 13
	pinsrb	xmm7, byte ptr [rdx + r9 + 18], 14
	pinsrb	xmm7, byte ptr [rdx + r15 + 18], 15
	pinsrb	xmm5, byte ptr [rdx + r11 + 19], 3
	pinsrb	xmm5, byte ptr [rdx + rdi + 19], 4
	pinsrb	xmm5, byte ptr [rdx + rcx + 19], 5
	pinsrb	xmm5, byte ptr [rdx + r12 + 19], 6
	pinsrb	xmm5, byte ptr [rdx + r10 + 19], 7
	pinsrb	xmm5, byte ptr [rdx + r14 + 19], 8
	pinsrb	xmm5, byte ptr [rdx + rax + 19], 9
	pinsrb	xmm5, byte ptr [rdx + rsi + 19], 10
	pinsrb	xmm5, byte ptr [rdx + r13 + 19], 11
	pinsrb	xmm5, byte ptr [rdx + rbx + 19], 12
	pinsrb	xmm5, byte ptr [rdx + r8 + 19], 13
	pinsrb	xmm5, byte ptr [rdx + r9 + 19], 14
	pinsrb	xmm5, byte ptr [rdx + r15 + 19], 15
	pinsrb	xmm3, byte ptr [rdx + r11 + 20], 3
	pinsrb	xmm3, byte ptr [rdx + rdi + 20], 4
	pinsrb	xmm3, byte ptr [rdx + rcx + 20], 5
	pinsrb	xmm3, byte ptr [rdx + r12 + 20], 6
	pinsrb	xmm3, byte ptr [rdx + r10 + 20], 7
	pinsrb	xmm3, byte ptr [rdx + r14 + 20], 8
	pinsrb	xmm3, byte ptr [rdx + rax + 20], 9
	pinsrb	xmm3, byte ptr [rdx + rsi + 20], 10
	pinsrb	xmm3, byte ptr [rdx + r13 + 20], 11
	pinsrb	xmm3, byte ptr [rdx + rbx + 20], 12
	pinsrb	xmm3, byte ptr [rdx + r8 + 20], 13
	pinsrb	xmm3, byte ptr [rdx + r9 + 20], 14
	pcmpgtb	xmm7, xmm14
	movdqa	xmm14, xmmword ptr [rip + .LCPI11_17] # xmm14 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pandn	xmm7, xmm14
	pcmpgtb	xmm5, xmmword ptr [rsp + 144]   # 16-byte Folded Reload
	movdqa	xmm14, xmmword ptr [rip + .LCPI11_18] # xmm14 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pandn	xmm5, xmm14
	por	xmm5, xmm7
	pinsrb	xmm3, byte ptr [rdx + r15 + 20], 15
	movdqa	xmm14, xmmword ptr [rsp + 144]  # 16-byte Reload
	pcmpgtb	xmm3, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI11_19] # xmm7 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pandn	xmm3, xmm7
	por	xmm3, xmm5
	pcmpeqd	xmm5, xmm5
	psubb	xmm4, xmm5
	por	xmm3, xmm4
	pinsrb	xmm2, byte ptr [rdx + r11 + 21], 3
	pinsrb	xmm2, byte ptr [rdx + rdi + 21], 4
	pinsrb	xmm2, byte ptr [rdx + rcx + 21], 5
	pinsrb	xmm2, byte ptr [rdx + r12 + 21], 6
	pinsrb	xmm2, byte ptr [rdx + r10 + 21], 7
	pinsrb	xmm2, byte ptr [rdx + r14 + 21], 8
	pinsrb	xmm2, byte ptr [rdx + rax + 21], 9
	pinsrb	xmm2, byte ptr [rdx + rsi + 21], 10
	pinsrb	xmm2, byte ptr [rdx + r13 + 21], 11
	pinsrb	xmm2, byte ptr [rdx + rbx + 21], 12
	pinsrb	xmm2, byte ptr [rdx + r8 + 21], 13
	pinsrb	xmm2, byte ptr [rdx + r9 + 21], 14
	pinsrb	xmm2, byte ptr [rdx + r15 + 21], 15
	pinsrb	xmm1, byte ptr [rdx + r11 + 22], 3
	pinsrb	xmm1, byte ptr [rdx + rdi + 22], 4
	pinsrb	xmm1, byte ptr [rdx + rcx + 22], 5
	pinsrb	xmm1, byte ptr [rdx + r12 + 22], 6
	pinsrb	xmm1, byte ptr [rdx + r10 + 22], 7
	pinsrb	xmm1, byte ptr [rdx + r14 + 22], 8
	pinsrb	xmm1, byte ptr [rdx + rax + 22], 9
	pinsrb	xmm1, byte ptr [rdx + rsi + 22], 10
	pinsrb	xmm1, byte ptr [rdx + r13 + 22], 11
	pinsrb	xmm1, byte ptr [rdx + rbx + 22], 12
	pinsrb	xmm1, byte ptr [rdx + r8 + 22], 13
	pinsrb	xmm1, byte ptr [rdx + r9 + 22], 14
	pinsrb	xmm1, byte ptr [rdx + r15 + 22], 15
	pinsrb	xmm8, byte ptr [rdx + r11 + 23], 3
	pinsrb	xmm8, byte ptr [rdx + rdi + 23], 4
	pinsrb	xmm8, byte ptr [rdx + rcx + 23], 5
	pinsrb	xmm8, byte ptr [rdx + r12 + 23], 6
	pinsrb	xmm8, byte ptr [rdx + r10 + 23], 7
	pinsrb	xmm8, byte ptr [rdx + r14 + 23], 8
	pinsrb	xmm8, byte ptr [rdx + rax + 23], 9
	pinsrb	xmm8, byte ptr [rdx + rsi + 23], 10
	pinsrb	xmm8, byte ptr [rdx + r13 + 23], 11
	pinsrb	xmm8, byte ptr [rdx + rbx + 23], 12
	pinsrb	xmm8, byte ptr [rdx + r8 + 23], 13
	pinsrb	xmm8, byte ptr [rdx + r9 + 23], 14
	pcmpgtb	xmm2, xmm14
	movdqa	xmm5, xmmword ptr [rip + .LCPI11_20] # xmm5 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pandn	xmm2, xmm5
	pcmpgtb	xmm1, xmm14
	movdqa	xmm7, xmmword ptr [rip + .LCPI11_21] # xmm7 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pandn	xmm1, xmm7
	por	xmm1, xmm2
	pinsrb	xmm8, byte ptr [rdx + r15 + 23], 15
	pcmpgtb	xmm8, xmm14
	movdqa	xmm4, xmmword ptr [rip + .LCPI11_6] # xmm4 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pandn	xmm8, xmm4
	por	xmm8, xmm1
	pinsrb	xmm12, byte ptr [rdx + r11 + 24], 3
	pinsrb	xmm12, byte ptr [rdx + rdi + 24], 4
	pinsrb	xmm12, byte ptr [rdx + rcx + 24], 5
	pinsrb	xmm12, byte ptr [rdx + r12 + 24], 6
	pinsrb	xmm12, byte ptr [rdx + r10 + 24], 7
	pinsrb	xmm12, byte ptr [rdx + r14 + 24], 8
	pinsrb	xmm12, byte ptr [rdx + rax + 24], 9
	pinsrb	xmm12, byte ptr [rdx + rsi + 24], 10
	pinsrb	xmm12, byte ptr [rdx + r13 + 24], 11
	pinsrb	xmm12, byte ptr [rdx + rbx + 24], 12
	pinsrb	xmm12, byte ptr [rdx + r8 + 24], 13
	pinsrb	xmm12, byte ptr [rdx + r9 + 24], 14
	pinsrb	xmm12, byte ptr [rdx + r15 + 24], 15
	por	xmm8, xmm3
	pcmpgtb	xmm12, xmm14
	pinsrb	xmm13, byte ptr [rdx + r11 + 25], 3
	pinsrb	xmm13, byte ptr [rdx + rdi + 25], 4
	pinsrb	xmm13, byte ptr [rdx + rcx + 25], 5
	pinsrb	xmm13, byte ptr [rdx + r12 + 25], 6
	pinsrb	xmm13, byte ptr [rdx + r10 + 25], 7
	pinsrb	xmm13, byte ptr [rdx + r14 + 25], 8
	pinsrb	xmm13, byte ptr [rdx + rax + 25], 9
	pinsrb	xmm13, byte ptr [rdx + rsi + 25], 10
	pinsrb	xmm13, byte ptr [rdx + r13 + 25], 11
	pinsrb	xmm13, byte ptr [rdx + rbx + 25], 12
	pinsrb	xmm13, byte ptr [rdx + r8 + 25], 13
	pinsrb	xmm13, byte ptr [rdx + r9 + 25], 14
	pinsrb	xmm13, byte ptr [rdx + r15 + 25], 15
	pinsrb	xmm0, byte ptr [rdx + r11 + 26], 3
	pinsrb	xmm0, byte ptr [rdx + rdi + 26], 4
	pinsrb	xmm0, byte ptr [rdx + rcx + 26], 5
	pinsrb	xmm0, byte ptr [rdx + r12 + 26], 6
	pinsrb	xmm0, byte ptr [rdx + r10 + 26], 7
	pinsrb	xmm0, byte ptr [rdx + r14 + 26], 8
	pinsrb	xmm0, byte ptr [rdx + rax + 26], 9
	pinsrb	xmm0, byte ptr [rdx + rsi + 26], 10
	pinsrb	xmm0, byte ptr [rdx + r13 + 26], 11
	pinsrb	xmm0, byte ptr [rdx + rbx + 26], 12
	pinsrb	xmm0, byte ptr [rdx + r8 + 26], 13
	pinsrb	xmm0, byte ptr [rdx + r9 + 26], 14
	pinsrb	xmm0, byte ptr [rdx + r15 + 26], 15
	pinsrb	xmm11, byte ptr [rdx + r11 + 27], 3
	pinsrb	xmm11, byte ptr [rdx + rdi + 27], 4
	pinsrb	xmm11, byte ptr [rdx + rcx + 27], 5
	pinsrb	xmm11, byte ptr [rdx + r12 + 27], 6
	pinsrb	xmm11, byte ptr [rdx + r10 + 27], 7
	pinsrb	xmm11, byte ptr [rdx + r14 + 27], 8
	pinsrb	xmm11, byte ptr [rdx + rax + 27], 9
	pinsrb	xmm11, byte ptr [rdx + rsi + 27], 10
	pinsrb	xmm11, byte ptr [rdx + r13 + 27], 11
	pinsrb	xmm11, byte ptr [rdx + rbx + 27], 12
	pinsrb	xmm11, byte ptr [rdx + r8 + 27], 13
	pinsrb	xmm11, byte ptr [rdx + r9 + 27], 14
	pcmpgtb	xmm13, xmm14
	pandn	xmm13, xmmword ptr [rip + .LCPI11_16]
	paddb	xmm13, xmm12
	pinsrb	xmm11, byte ptr [rdx + r15 + 27], 15
	pcmpgtb	xmm0, xmm14
	pandn	xmm0, xmmword ptr [rip + .LCPI11_17]
	pcmpgtb	xmm11, xmm14
	pandn	xmm11, xmmword ptr [rip + .LCPI11_18]
	por	xmm11, xmm0
	pinsrb	xmm15, byte ptr [rdx + r11 + 28], 3
	pinsrb	xmm9, byte ptr [rdx + r11 + 29], 3
	pinsrb	xmm10, byte ptr [rdx + r11 + 30], 3
	pinsrb	xmm6, byte ptr [rdx + r11 + 31], 3
	pinsrb	xmm15, byte ptr [rdx + rdi + 28], 4
	pinsrb	xmm9, byte ptr [rdx + rdi + 29], 4
	pinsrb	xmm10, byte ptr [rdx + rdi + 30], 4
	pinsrb	xmm6, byte ptr [rdx + rdi + 31], 4
	mov	rdi, rcx
	pinsrb	xmm15, byte ptr [rdx + rcx + 28], 5
	pinsrb	xmm9, byte ptr [rdx + rcx + 29], 5
	pinsrb	xmm10, byte ptr [rdx + rcx + 30], 5
	pinsrb	xmm6, byte ptr [rdx + rcx + 31], 5
	pinsrb	xmm15, byte ptr [rdx + r12 + 28], 6
	pinsrb	xmm9, byte ptr [rdx + r12 + 29], 6
	pinsrb	xmm10, byte ptr [rdx + r12 + 30], 6
	pinsrb	xmm6, byte ptr [rdx + r12 + 31], 6
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	mov	rdi, r10
	pinsrb	xmm15, byte ptr [rdx + r10 + 28], 7
	pinsrb	xmm9, byte ptr [rdx + r10 + 29], 7
	pinsrb	xmm10, byte ptr [rdx + r10 + 30], 7
	pinsrb	xmm6, byte ptr [rdx + r10 + 31], 7
	mov	rdi, r14
	pinsrb	xmm15, byte ptr [rdx + r14 + 28], 8
	pinsrb	xmm9, byte ptr [rdx + r14 + 29], 8
	pinsrb	xmm10, byte ptr [rdx + r14 + 30], 8
	pinsrb	xmm6, byte ptr [rdx + r14 + 31], 8
	pinsrb	xmm15, byte ptr [rdx + rax + 28], 9
	pinsrb	xmm9, byte ptr [rdx + rax + 29], 9
	pinsrb	xmm10, byte ptr [rdx + rax + 30], 9
	pinsrb	xmm6, byte ptr [rdx + rax + 31], 9
	mov	rax, rsi
	pinsrb	xmm15, byte ptr [rdx + rsi + 28], 10
	pinsrb	xmm9, byte ptr [rdx + rsi + 29], 10
	pinsrb	xmm10, byte ptr [rdx + rsi + 30], 10
	pinsrb	xmm6, byte ptr [rdx + rsi + 31], 10
	pinsrb	xmm15, byte ptr [rdx + r13 + 28], 11
	pinsrb	xmm9, byte ptr [rdx + r13 + 29], 11
	pinsrb	xmm10, byte ptr [rdx + r13 + 30], 11
	pinsrb	xmm6, byte ptr [rdx + r13 + 31], 11
	pinsrb	xmm15, byte ptr [rdx + rbx + 28], 12
	pinsrb	xmm9, byte ptr [rdx + rbx + 29], 12
	pinsrb	xmm10, byte ptr [rdx + rbx + 30], 12
	pinsrb	xmm6, byte ptr [rdx + rbx + 31], 12
	mov	rax, r8
	pinsrb	xmm15, byte ptr [rdx + r8 + 28], 13
	pinsrb	xmm9, byte ptr [rdx + r8 + 29], 13
	pinsrb	xmm10, byte ptr [rdx + r8 + 30], 13
	pinsrb	xmm6, byte ptr [rdx + r8 + 31], 13
	mov	rax, r9
	pinsrb	xmm15, byte ptr [rdx + r9 + 28], 14
	pinsrb	xmm9, byte ptr [rdx + r9 + 29], 14
	pinsrb	xmm10, byte ptr [rdx + r9 + 30], 14
	pinsrb	xmm6, byte ptr [rdx + r9 + 31], 14
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rax + 28], 15
	pinsrb	xmm9, byte ptr [rdx + rax + 29], 15
	pinsrb	xmm10, byte ptr [rdx + rax + 30], 15
	pcmpgtb	xmm15, xmm14
	pandn	xmm15, xmmword ptr [rip + .LCPI11_19]
	por	xmm15, xmm11
	pinsrb	xmm6, byte ptr [rdx + rax + 31], 15
	psubb	xmm13, xmmword ptr [rip + .LCPI11_22]
	por	xmm15, xmm13
	pcmpgtb	xmm9, xmm14
	pandn	xmm9, xmm5
	pcmpgtb	xmm10, xmm14
	pandn	xmm10, xmm7
	por	xmm10, xmm9
	pcmpgtb	xmm6, xmm14
	pandn	xmm6, xmm4
	por	xmm6, xmm10
	por	xmm6, xmm15
	movdqa	xmm0, xmm8
	punpcklbw	xmm0, xmm6              # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	movdqa	xmm3, xmmword ptr [rsp + 192]   # 16-byte Reload
	movdqa	xmm1, xmm3
	movdqa	xmm4, xmmword ptr [rsp + 160]   # 16-byte Reload
	punpcklbw	xmm1, xmm4              # xmm1 = xmm1[0],xmm4[0],xmm1[1],xmm4[1],xmm1[2],xmm4[2],xmm1[3],xmm4[3],xmm1[4],xmm4[4],xmm1[5],xmm4[5],xmm1[6],xmm4[6],xmm1[7],xmm4[7]
	movdqa	xmm2, xmm1
	punpcklwd	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
	punpckhwd	xmm1, xmm0              # xmm1 = xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpckhbw	xmm8, xmm6              # xmm8 = xmm8[8],xmm6[8],xmm8[9],xmm6[9],xmm8[10],xmm6[10],xmm8[11],xmm6[11],xmm8[12],xmm6[12],xmm8[13],xmm6[13],xmm8[14],xmm6[14],xmm8[15],xmm6[15]
	punpckhbw	xmm3, xmm4              # xmm3 = xmm3[8],xmm4[8],xmm3[9],xmm4[9],xmm3[10],xmm4[10],xmm3[11],xmm4[11],xmm3[12],xmm4[12],xmm3[13],xmm4[13],xmm3[14],xmm4[14],xmm3[15],xmm4[15]
	movdqa	xmm0, xmm3
	punpcklwd	xmm0, xmm8              # xmm0 = xmm0[0],xmm8[0],xmm0[1],xmm8[1],xmm0[2],xmm8[2],xmm0[3],xmm8[3]
	punpckhwd	xmm3, xmm8              # xmm3 = xmm3[4],xmm8[4],xmm3[5],xmm8[5],xmm3[6],xmm8[6],xmm3[7],xmm8[7]
	mov	rcx, qword ptr [rsp + 224]      # 8-byte Reload
	movdqu	xmmword ptr [r15 + 4*rcx + 48], xmm3
	movdqu	xmmword ptr [r15 + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [r15 + 4*rcx + 16], xmm1
	movdqu	xmmword ptr [r15 + 4*rcx], xmm2
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 256]      # 8-byte Folded Reload
	jne	.LBB11_86
# %bb.87:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 256]      # 8-byte Folded Reload
	mov	r14b, byte ptr [rsp]            # 1-byte Reload
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	mov	rdx, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	jne	.LBB11_88
	jmp	.LBB11_91
.LBB11_66:
	and	r10, -16
	mov	rax, r10
	shl	rax, 5
	add	rax, rdx
	mov	qword ptr [rsp + 280], rax      # 8-byte Spill
	mov	qword ptr [rsp + 192], r10      # 8-byte Spill
	lea	rax, [r15 + 4*r10]
	mov	qword ptr [rsp + 288], rax      # 8-byte Spill
	movzx	eax, r14b
	movd	xmm1, eax
	pxor	xmm0, xmm0
	pshufb	xmm1, xmm0
	movdqa	xmmword ptr [rsp + 256], xmm1   # 16-byte Spill
	xor	eax, eax
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	movdqa	xmm8, xmmword ptr [rsp + 256]   # 16-byte Reload
	.p2align	4, 0x90
.LBB11_67:                              # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 128], rax      # 8-byte Spill
	shl	rax, 5
	mov	r14, rax
	mov	rbx, rax
	mov	r15, rax
	mov	qword ptr [rsp + 32], rax       # 8-byte Spill
	mov	r12, rax
	mov	r8, rax
	mov	r11, rax
	mov	r9, rax
	mov	r10, rax
	mov	rsi, rax
	mov	rdi, rax
	movzx	ecx, byte ptr [rdx + rax]
	movd	xmm6, ecx
	movzx	ecx, byte ptr [rdx + rax + 1]
	movd	xmm15, ecx
	movzx	ecx, byte ptr [rdx + rax + 2]
	movd	xmm5, ecx
	movzx	ecx, byte ptr [rdx + rax + 3]
	movd	xmm4, ecx
	movzx	ecx, byte ptr [rdx + rax + 4]
	movd	xmm3, ecx
	movzx	ecx, byte ptr [rdx + rax + 5]
	movd	xmm7, ecx
	movzx	ecx, byte ptr [rdx + rax + 6]
	movd	xmm2, ecx
	movzx	ecx, byte ptr [rdx + rax + 7]
	movd	xmm9, ecx
	movzx	ecx, byte ptr [rdx + rax + 8]
	movd	xmm0, ecx
	movdqa	xmmword ptr [rsp + 224], xmm0   # 16-byte Spill
	movzx	ecx, byte ptr [rdx + rax + 9]
	movd	xmm10, ecx
	movzx	ecx, byte ptr [rdx + rax + 10]
	movd	xmm12, ecx
	movzx	ecx, byte ptr [rdx + rax + 11]
	movd	xmm11, ecx
	movzx	ecx, byte ptr [rdx + rax + 12]
	movd	xmm13, ecx
	movzx	ecx, byte ptr [rdx + rax + 13]
	movd	xmm0, ecx
	movzx	ecx, byte ptr [rdx + rax + 14]
	movd	xmm14, ecx
	movzx	ecx, byte ptr [rdx + rax + 15]
	movd	xmm1, ecx
	movdqa	xmmword ptr [rsp + 176], xmm1   # 16-byte Spill
	mov	qword ptr [rsp + 80], rax       # 8-byte Spill
	mov	r13, rax
	or	r13, 32
	mov	qword ptr [rsp + 40], r13       # 8-byte Spill
	or	r14, 64
	or	rbx, 96
	or	r15, 128
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	or	rcx, 160
	mov	qword ptr [rsp + 32], rcx       # 8-byte Spill
	or	r12, 192
	or	r8, 224
	or	r11, 256
	or	r9, 288
	or	r10, 320
	or	rsi, 352
	mov	qword ptr [rsp + 88], rsi       # 8-byte Spill
	mov	rsi, rax
	or	rsi, 384
	mov	qword ptr [rsp + 112], rsi      # 8-byte Spill
	or	rdi, 416
	mov	qword ptr [rsp + 16], rdi       # 8-byte Spill
	mov	rdi, rax
	or	rdi, 448
	mov	qword ptr [rsp + 24], rdi       # 8-byte Spill
	mov	rdi, rax
	or	rdi, 480
	mov	qword ptr [rsp + 8], rdi        # 8-byte Spill
	pinsrb	xmm6, byte ptr [rdx + r13], 1
	pinsrb	xmm6, byte ptr [rdx + r14], 2
	mov	qword ptr [rsp + 104], rbx      # 8-byte Spill
	pinsrb	xmm6, byte ptr [rdx + rbx], 3
	pinsrb	xmm6, byte ptr [rdx + r15], 4
	pinsrb	xmm6, byte ptr [rdx + rcx], 5
	pinsrb	xmm6, byte ptr [rdx + r12], 6
	mov	qword ptr [rsp + 56], r8        # 8-byte Spill
	pinsrb	xmm6, byte ptr [rdx + r8], 7
	mov	qword ptr [rsp + 72], r11       # 8-byte Spill
	pinsrb	xmm6, byte ptr [rdx + r11], 8
	mov	r11, r9
	mov	qword ptr [rsp + 96], r9        # 8-byte Spill
	pinsrb	xmm6, byte ptr [rdx + r9], 9
	mov	r9, r10
	pinsrb	xmm6, byte ptr [rdx + r10], 10
	mov	r10, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r10], 11
	pinsrb	xmm6, byte ptr [rdx + rsi], 12
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax], 13
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r13], 14
	pinsrb	xmm6, byte ptr [rdx + rdi], 15
	pmaxub	xmm6, xmm8
	pcmpeqb	xmm6, xmm8
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rdi + 1], 1
	pinsrb	xmm15, byte ptr [rdx + r14 + 1], 2
	pinsrb	xmm15, byte ptr [rdx + rbx + 1], 3
	pinsrb	xmm15, byte ptr [rdx + r15 + 1], 4
	mov	rbx, r15
	pinsrb	xmm15, byte ptr [rdx + rcx + 1], 5
	pinsrb	xmm15, byte ptr [rdx + r12 + 1], 6
	mov	r15, r12
	pinsrb	xmm15, byte ptr [rdx + r8 + 1], 7
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r13 + 1], 8
	pinsrb	xmm15, byte ptr [rdx + r11 + 1], 9
	pinsrb	xmm15, byte ptr [rdx + r9 + 1], 10
	mov	qword ptr [rsp + 64], r9        # 8-byte Spill
	pinsrb	xmm15, byte ptr [rdx + r10 + 1], 11
	mov	rcx, r10
	pinsrb	xmm15, byte ptr [rdx + rsi + 1], 12
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r12 + 1], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rax + 1], 14
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rax + 1], 15
	pmaxub	xmm15, xmm8
	pcmpeqb	xmm15, xmm8
	movdqa	xmm1, xmmword ptr [rip + .LCPI11_16] # xmm1 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
	pand	xmm15, xmm1
	psubb	xmm15, xmm6
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 16]
	movd	xmm1, esi
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rdi + 2], 1
	mov	r8, r14
	mov	qword ptr [rsp + 48], r14       # 8-byte Spill
	pinsrb	xmm5, byte ptr [rdx + r14 + 2], 2
	mov	r14, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r14 + 2], 3
	mov	r10, rbx
	pinsrb	xmm5, byte ptr [rdx + rbx + 2], 4
	mov	rax, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rax + 2], 5
	mov	rbx, r15
	pinsrb	xmm5, byte ptr [rdx + r15 + 2], 6
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rsi + 2], 7
	mov	r11, r13
	pinsrb	xmm5, byte ptr [rdx + r13 + 2], 8
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r15 + 2], 9
	pinsrb	xmm5, byte ptr [rdx + r9 + 2], 10
	pinsrb	xmm5, byte ptr [rdx + rcx + 2], 11
	mov	rcx, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rcx + 2], 12
	mov	r13, r12
	pinsrb	xmm5, byte ptr [rdx + r12 + 2], 13
	mov	r9, qword ptr [rsp + 24]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r9 + 2], 14
	mov	r12, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r12 + 2], 15
	pinsrb	xmm4, byte ptr [rdx + rdi + 3], 1
	pinsrb	xmm4, byte ptr [rdx + r8 + 3], 2
	pinsrb	xmm4, byte ptr [rdx + r14 + 3], 3
	pinsrb	xmm4, byte ptr [rdx + r10 + 3], 4
	pinsrb	xmm4, byte ptr [rdx + rax + 3], 5
	pinsrb	xmm4, byte ptr [rdx + rbx + 3], 6
	pinsrb	xmm4, byte ptr [rdx + rsi + 3], 7
	pinsrb	xmm4, byte ptr [rdx + r11 + 3], 8
	pinsrb	xmm4, byte ptr [rdx + r15 + 3], 9
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r11 + 3], 10
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	pinsrb	xmm4, byte ptr [rdx + r8 + 3], 11
	pinsrb	xmm4, byte ptr [rdx + rcx + 3], 12
	pinsrb	xmm4, byte ptr [rdx + r13 + 3], 13
	pinsrb	xmm4, byte ptr [rdx + r9 + 3], 14
	pinsrb	xmm4, byte ptr [rdx + r12 + 3], 15
	pmaxub	xmm5, xmm8
	pcmpeqb	xmm5, xmm8
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_17] # xmm6 = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
	pand	xmm5, xmm6
	pmaxub	xmm4, xmm8
	pcmpeqb	xmm4, xmm8
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_18] # xmm6 = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
	pand	xmm4, xmm6
	por	xmm4, xmm5
	mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rcx + 17]
	movd	xmm5, esi
	por	xmm4, xmm15
	movzx	esi, byte ptr [rdx + rcx + 18]
	movd	xmm15, esi
	mov	r14, rdi
	pinsrb	xmm3, byte ptr [rdx + rdi + 4], 1
	mov	r13, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r13 + 4], 2
	mov	r12, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r12 + 4], 3
	mov	qword ptr [rsp + 144], r10      # 8-byte Spill
	pinsrb	xmm3, byte ptr [rdx + r10 + 4], 4
	pinsrb	xmm3, byte ptr [rdx + rax + 4], 5
	pinsrb	xmm3, byte ptr [rdx + rbx + 4], 6
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rcx + 4], 7
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rcx + 4], 8
	pinsrb	xmm3, byte ptr [rdx + r15 + 4], 9
	mov	rsi, r11
	pinsrb	xmm3, byte ptr [rdx + r11 + 4], 10
	pinsrb	xmm3, byte ptr [rdx + r8 + 4], 11
	mov	r9, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r9 + 4], 12
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rcx + 4], 13
	mov	rdi, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rdi + 4], 14
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r11 + 4], 15
	pinsrb	xmm7, byte ptr [rdx + r14 + 5], 1
	pinsrb	xmm7, byte ptr [rdx + r13 + 5], 2
	pinsrb	xmm7, byte ptr [rdx + r12 + 5], 3
	pinsrb	xmm7, byte ptr [rdx + r10 + 5], 4
	pinsrb	xmm7, byte ptr [rdx + rax + 5], 5
	pinsrb	xmm7, byte ptr [rdx + rbx + 5], 6
	mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rcx + 5], 7
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rcx + 5], 8
	pinsrb	xmm7, byte ptr [rdx + r15 + 5], 9
	pinsrb	xmm7, byte ptr [rdx + rsi + 5], 10
	pinsrb	xmm7, byte ptr [rdx + r8 + 5], 11
	pinsrb	xmm7, byte ptr [rdx + r9 + 5], 12
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm7, byte ptr [rdx + rcx + 5], 13
	pinsrb	xmm7, byte ptr [rdx + rdi + 5], 14
	pinsrb	xmm7, byte ptr [rdx + r11 + 5], 15
	pinsrb	xmm2, byte ptr [rdx + r14 + 6], 1
	pinsrb	xmm2, byte ptr [rdx + r13 + 6], 2
	pinsrb	xmm2, byte ptr [rdx + r12 + 6], 3
	pinsrb	xmm2, byte ptr [rdx + r10 + 6], 4
	pinsrb	xmm2, byte ptr [rdx + rax + 6], 5
	mov	r10, rax
	pinsrb	xmm2, byte ptr [rdx + rbx + 6], 6
	mov	r13, rbx
	mov	qword ptr [rsp + 160], rbx      # 8-byte Spill
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 6], 7
	mov	r14, rax
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rbx + 6], 8
	pinsrb	xmm2, byte ptr [rdx + r15 + 6], 9
	mov	r11, r15
	pinsrb	xmm2, byte ptr [rdx + rsi + 6], 10
	pinsrb	xmm2, byte ptr [rdx + r8 + 6], 11
	mov	r12, r8
	pinsrb	xmm2, byte ptr [rdx + r9 + 6], 12
	pinsrb	xmm2, byte ptr [rdx + rcx + 6], 13
	pinsrb	xmm2, byte ptr [rdx + rdi + 6], 14
	mov	r15, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r15 + 6], 15
	pmaxub	xmm3, xmm8
	pcmpeqb	xmm3, xmm8
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_19] # xmm6 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm3, xmm6
	pmaxub	xmm7, xmm8
	pcmpeqb	xmm7, xmm8
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_20] # xmm6 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm7, xmm6
	por	xmm7, xmm3
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 19]
	movd	xmm3, esi
	pmaxub	xmm2, xmm8
	pcmpeqb	xmm2, xmm8
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_21] # xmm6 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm2, xmm6
	por	xmm2, xmm7
	movzx	esi, byte ptr [rdx + rax + 20]
	movd	xmm6, esi
	por	xmm2, xmm4
	movzx	esi, byte ptr [rdx + rax + 21]
	movd	xmm4, esi
	mov	rdi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rdi + 7], 1
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 7], 2
	mov	rax, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + rax + 7], 3
	mov	r8, qword ptr [rsp + 144]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r8 + 7], 4
	pinsrb	xmm9, byte ptr [rdx + r10 + 7], 5
	pinsrb	xmm9, byte ptr [rdx + r13 + 7], 6
	pinsrb	xmm9, byte ptr [rdx + r14 + 7], 7
	pinsrb	xmm9, byte ptr [rdx + rbx + 7], 8
	pinsrb	xmm9, byte ptr [rdx + r11 + 7], 9
	mov	rcx, r11
	mov	r11, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r11 + 7], 10
	pinsrb	xmm9, byte ptr [rdx + r12 + 7], 11
	pinsrb	xmm9, byte ptr [rdx + r9 + 7], 12
	mov	r13, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r13 + 7], 13
	mov	r12, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm9, byte ptr [rdx + r12 + 7], 14
	pinsrb	xmm9, byte ptr [rdx + r15 + 7], 15
	pmaxub	xmm9, xmm8
	pcmpeqb	xmm9, xmm8
	movdqa	xmm7, xmmword ptr [rip + .LCPI11_6] # xmm7 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm9, xmm7
	por	xmm9, xmm2
	movdqa	xmmword ptr [rsp + 208], xmm9   # 16-byte Spill
	mov	r9, qword ptr [rsp + 80]        # 8-byte Reload
	movzx	esi, byte ptr [rdx + r9 + 22]
	movd	xmm7, esi
	movdqa	xmm2, xmmword ptr [rsp + 224]   # 16-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rdi + 8], 1
	mov	r14, rdi
	mov	rdi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rdi + 8], 2
	pinsrb	xmm2, byte ptr [rdx + rax + 8], 3
	mov	r15, rax
	pinsrb	xmm2, byte ptr [rdx + r8 + 8], 4
	pinsrb	xmm2, byte ptr [rdx + r10 + 8], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rax + 8], 6
	mov	rsi, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rsi + 8], 7
	mov	rbx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rbx + 8], 8
	pinsrb	xmm2, byte ptr [rdx + rcx + 8], 9
	pinsrb	xmm2, byte ptr [rdx + r11 + 8], 10
	mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + rcx + 8], 11
	mov	r11, qword ptr [rsp + 112]      # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r11 + 8], 12
	mov	rsi, r13
	pinsrb	xmm2, byte ptr [rdx + r13 + 8], 13
	pinsrb	xmm2, byte ptr [rdx + r12 + 8], 14
	mov	r13, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm2, byte ptr [rdx + r13 + 8], 15
	pmaxub	xmm2, xmm8
	pcmpeqb	xmm2, xmm8
	pinsrb	xmm10, byte ptr [rdx + r14 + 9], 1
	pinsrb	xmm10, byte ptr [rdx + rdi + 9], 2
	pinsrb	xmm10, byte ptr [rdx + r15 + 9], 3
	mov	r14, r15
	pinsrb	xmm10, byte ptr [rdx + r8 + 9], 4
	mov	r15, r8
	pinsrb	xmm10, byte ptr [rdx + r10 + 9], 5
	pinsrb	xmm10, byte ptr [rdx + rax + 9], 6
	mov	r8, rax
	mov	rax, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rax + 9], 7
	pinsrb	xmm10, byte ptr [rdx + rbx + 9], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rax + 9], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm10, byte ptr [rdx + rax + 9], 10
	pinsrb	xmm10, byte ptr [rdx + rcx + 9], 11
	mov	rcx, r11
	pinsrb	xmm10, byte ptr [rdx + r11 + 9], 12
	pinsrb	xmm10, byte ptr [rdx + rsi + 9], 13
	pinsrb	xmm10, byte ptr [rdx + r12 + 9], 14
	pinsrb	xmm10, byte ptr [rdx + r13 + 9], 15
	pmaxub	xmm10, xmm8
	pcmpeqb	xmm10, xmm8
	pand	xmm10, xmmword ptr [rip + .LCPI11_16]
	psubb	xmm10, xmm2
	movzx	esi, byte ptr [rdx + r9 + 23]
	movd	xmm2, esi
	mov	r11, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + r11 + 10], 1
	pinsrb	xmm12, byte ptr [rdx + rdi + 10], 2
	mov	r10, rdi
	mov	rsi, r14
	pinsrb	xmm12, byte ptr [rdx + r14 + 10], 3
	pinsrb	xmm12, byte ptr [rdx + r15 + 10], 4
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + r14 + 10], 5
	pinsrb	xmm12, byte ptr [rdx + r8 + 10], 6
	mov	rbx, r8
	mov	r15, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + r15 + 10], 7
	mov	r13, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + r13 + 10], 8
	mov	rdi, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rdi + 10], 9
	pinsrb	xmm12, byte ptr [rdx + rax + 10], 10
	mov	r8, qword ptr [rsp + 88]        # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + r8 + 10], 11
	mov	r9, rcx
	pinsrb	xmm12, byte ptr [rdx + rcx + 10], 12
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rax + 10], 13
	pinsrb	xmm12, byte ptr [rdx + r12 + 10], 14
	mov	rcx, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm12, byte ptr [rdx + rcx + 10], 15
	pinsrb	xmm11, byte ptr [rdx + r11 + 11], 1
	pinsrb	xmm11, byte ptr [rdx + r10 + 11], 2
	pinsrb	xmm11, byte ptr [rdx + rsi + 11], 3
	mov	r10, rsi
	mov	rsi, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rsi + 11], 4
	pinsrb	xmm11, byte ptr [rdx + r14 + 11], 5
	pinsrb	xmm11, byte ptr [rdx + rbx + 11], 6
	pinsrb	xmm11, byte ptr [rdx + r15 + 11], 7
	mov	r14, r15
	pinsrb	xmm11, byte ptr [rdx + r13 + 11], 8
	pinsrb	xmm11, byte ptr [rdx + rdi + 11], 9
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rbx + 11], 10
	pinsrb	xmm11, byte ptr [rdx + r8 + 11], 11
	pinsrb	xmm11, byte ptr [rdx + r9 + 11], 12
	pinsrb	xmm11, byte ptr [rdx + rax + 11], 13
	pinsrb	xmm11, byte ptr [rdx + r12 + 11], 14
	pinsrb	xmm11, byte ptr [rdx + rcx + 11], 15
	pmaxub	xmm12, xmm8
	pcmpeqb	xmm12, xmm8
	pand	xmm12, xmmword ptr [rip + .LCPI11_17]
	pmaxub	xmm11, xmm8
	pcmpeqb	xmm11, xmm8
	pand	xmm11, xmmword ptr [rip + .LCPI11_18]
	por	xmm11, xmm12
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 24]
	movd	xmm9, esi
	por	xmm11, xmm10
	movzx	esi, byte ptr [rdx + rax + 25]
	movd	xmm12, esi
	pinsrb	xmm13, byte ptr [rdx + r11 + 12], 1
	mov	r12, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + r12 + 12], 2
	mov	r11, r10
	pinsrb	xmm13, byte ptr [rdx + r10 + 12], 3
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rdi + 12], 4
	mov	r15, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + r15 + 12], 5
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + r10 + 12], 6
	pinsrb	xmm13, byte ptr [rdx + r14 + 12], 7
	pinsrb	xmm13, byte ptr [rdx + r13 + 12], 8
	mov	rcx, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rcx + 12], 9
	pinsrb	xmm13, byte ptr [rdx + rbx + 12], 10
	pinsrb	xmm13, byte ptr [rdx + r8 + 12], 11
	pinsrb	xmm13, byte ptr [rdx + r9 + 12], 12
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rax + 12], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rax + 12], 14
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm13, byte ptr [rdx + rsi + 12], 15
	mov	rax, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 13], 1
	pinsrb	xmm0, byte ptr [rdx + r12 + 13], 2
	pinsrb	xmm0, byte ptr [rdx + r11 + 13], 3
	pinsrb	xmm0, byte ptr [rdx + rdi + 13], 4
	pinsrb	xmm0, byte ptr [rdx + r15 + 13], 5
	pinsrb	xmm0, byte ptr [rdx + r10 + 13], 6
	pinsrb	xmm0, byte ptr [rdx + r14 + 13], 7
	pinsrb	xmm0, byte ptr [rdx + r13 + 13], 8
	pinsrb	xmm0, byte ptr [rdx + rcx + 13], 9
	pinsrb	xmm0, byte ptr [rdx + rbx + 13], 10
	pinsrb	xmm0, byte ptr [rdx + r8 + 13], 11
	pinsrb	xmm0, byte ptr [rdx + r9 + 13], 12
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 13], 13
	mov	rax, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 13], 14
	pinsrb	xmm0, byte ptr [rdx + rsi + 13], 15
	mov	rax, rsi
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rsi + 14], 1
	pinsrb	xmm14, byte ptr [rdx + r12 + 14], 2
	pinsrb	xmm14, byte ptr [rdx + r11 + 14], 3
	pinsrb	xmm14, byte ptr [rdx + rdi + 14], 4
	pinsrb	xmm14, byte ptr [rdx + r15 + 14], 5
	pinsrb	xmm14, byte ptr [rdx + r10 + 14], 6
	pinsrb	xmm14, byte ptr [rdx + r14 + 14], 7
	mov	r15, r14
	pinsrb	xmm14, byte ptr [rdx + r13 + 14], 8
	pinsrb	xmm14, byte ptr [rdx + rcx + 14], 9
	mov	r14, rcx
	pinsrb	xmm14, byte ptr [rdx + rbx + 14], 10
	pinsrb	xmm14, byte ptr [rdx + r8 + 14], 11
	pinsrb	xmm14, byte ptr [rdx + r9 + 14], 12
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + rcx + 14], 13
	mov	r13, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm14, byte ptr [rdx + r13 + 14], 14
	pinsrb	xmm14, byte ptr [rdx + rax + 14], 15
	pmaxub	xmm13, xmm8
	pcmpeqb	xmm13, xmm8
	pand	xmm13, xmmword ptr [rip + .LCPI11_19]
	pmaxub	xmm0, xmm8
	pcmpeqb	xmm0, xmm8
	pand	xmm0, xmmword ptr [rip + .LCPI11_20]
	por	xmm0, xmm13
	mov	r12, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + r12 + 26]
	movd	xmm13, esi
	pmaxub	xmm14, xmm8
	pcmpeqb	xmm14, xmm8
	pand	xmm14, xmmword ptr [rip + .LCPI11_21]
	por	xmm14, xmm0
	movzx	esi, byte ptr [rdx + r12 + 27]
	movd	xmm10, esi
	por	xmm14, xmm11
	movzx	esi, byte ptr [rdx + r12 + 28]
	movd	xmm11, esi
	movdqa	xmm0, xmmword ptr [rsp + 176]   # 16-byte Reload
	mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rcx + 15], 1
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 15], 2
	mov	rdi, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rdi + 15], 3
	mov	r9, qword ptr [rsp + 144]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r9 + 15], 4
	mov	r10, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r10 + 15], 5
	mov	rax, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 15], 6
	pinsrb	xmm0, byte ptr [rdx + r15 + 15], 7
	mov	rax, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rax + 15], 8
	pinsrb	xmm0, byte ptr [rdx + r14 + 15], 9
	mov	rbx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rbx + 15], 10
	pinsrb	xmm0, byte ptr [rdx + r8 + 15], 11
	mov	r8, qword ptr [rsp + 112]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r8 + 15], 12
	mov	rsi, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + rsi + 15], 13
	pinsrb	xmm0, byte ptr [rdx + r13 + 15], 14
	mov	r11, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm0, byte ptr [rdx + r11 + 15], 15
	pmaxub	xmm0, xmm8
	pcmpeqb	xmm0, xmm8
	pand	xmm0, xmmword ptr [rip + .LCPI11_6]
	por	xmm0, xmm14
	movdqa	xmmword ptr [rsp + 176], xmm0   # 16-byte Spill
	movzx	esi, byte ptr [rdx + r12 + 29]
	movd	xmm14, esi
	pinsrb	xmm1, byte ptr [rdx + rcx + 16], 1
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rsi + 16], 2
	mov	r12, rsi
	pinsrb	xmm1, byte ptr [rdx + rdi + 16], 3
	pinsrb	xmm1, byte ptr [rdx + r9 + 16], 4
	pinsrb	xmm1, byte ptr [rdx + r10 + 16], 5
	mov	r9, qword ptr [rsp + 160]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r9 + 16], 6
	pinsrb	xmm1, byte ptr [rdx + r15 + 16], 7
	pinsrb	xmm1, byte ptr [rdx + rax + 16], 8
	pinsrb	xmm1, byte ptr [rdx + r14 + 16], 9
	pinsrb	xmm1, byte ptr [rdx + rbx + 16], 10
	mov	r14, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + r14 + 16], 11
	pinsrb	xmm1, byte ptr [rdx + r8 + 16], 12
	mov	r10, r8
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm1, byte ptr [rdx + rax + 16], 13
	pinsrb	xmm1, byte ptr [rdx + r13 + 16], 14
	mov	rsi, r11
	pinsrb	xmm1, byte ptr [rdx + r11 + 16], 15
	pmaxub	xmm1, xmm8
	pcmpeqb	xmm1, xmm8
	pinsrb	xmm5, byte ptr [rdx + rcx + 17], 1
	pinsrb	xmm5, byte ptr [rdx + r12 + 17], 2
	mov	r11, r12
	pinsrb	xmm5, byte ptr [rdx + rdi + 17], 3
	mov	rdi, qword ptr [rsp + 144]      # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rdi + 17], 4
	mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rcx + 17], 5
	pinsrb	xmm5, byte ptr [rdx + r9 + 17], 6
	pinsrb	xmm5, byte ptr [rdx + r15 + 17], 7
	mov	r9, r15
	mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + rcx + 17], 8
	mov	r15, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm5, byte ptr [rdx + r15 + 17], 9
	pinsrb	xmm5, byte ptr [rdx + rbx + 17], 10
	mov	r8, r14
	pinsrb	xmm5, byte ptr [rdx + r14 + 17], 11
	pinsrb	xmm5, byte ptr [rdx + r10 + 17], 12
	mov	r12, r10
	pinsrb	xmm5, byte ptr [rdx + rax + 17], 13
	pinsrb	xmm5, byte ptr [rdx + r13 + 17], 14
	pinsrb	xmm5, byte ptr [rdx + rsi + 17], 15
	pmaxub	xmm5, xmm8
	pcmpeqb	xmm5, xmm8
	pand	xmm5, xmmword ptr [rip + .LCPI11_16]
	psubb	xmm5, xmm1
	mov	rax, qword ptr [rsp + 80]       # 8-byte Reload
	movzx	esi, byte ptr [rdx + rax + 30]
	movd	xmm1, esi
	mov	rsi, qword ptr [rsp + 40]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rsi + 18], 1
	pinsrb	xmm3, byte ptr [rdx + rsi + 19], 1
	pinsrb	xmm6, byte ptr [rdx + rsi + 20], 1
	pinsrb	xmm4, byte ptr [rdx + rsi + 21], 1
	pinsrb	xmm7, byte ptr [rdx + rsi + 22], 1
	pinsrb	xmm2, byte ptr [rdx + rsi + 23], 1
	pinsrb	xmm9, byte ptr [rdx + rsi + 24], 1
	pinsrb	xmm12, byte ptr [rdx + rsi + 25], 1
	pinsrb	xmm13, byte ptr [rdx + rsi + 26], 1
	pinsrb	xmm10, byte ptr [rdx + rsi + 27], 1
	pinsrb	xmm11, byte ptr [rdx + rsi + 28], 1
	pinsrb	xmm14, byte ptr [rdx + rsi + 29], 1
	pinsrb	xmm1, byte ptr [rdx + rsi + 30], 1
	movzx	eax, byte ptr [rdx + rax + 31]
	movd	xmm0, eax
	pinsrb	xmm0, byte ptr [rdx + rsi + 31], 1
	pinsrb	xmm15, byte ptr [rdx + r11 + 18], 2
	mov	r11, qword ptr [rsp + 104]      # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r11 + 18], 3
	pinsrb	xmm15, byte ptr [rdx + rdi + 18], 4
	mov	r14, qword ptr [rsp + 32]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r14 + 18], 5
	mov	r10, qword ptr [rsp + 160]      # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r10 + 18], 6
	pinsrb	xmm15, byte ptr [rdx + r9 + 18], 7
	mov	rsi, rcx
	pinsrb	xmm15, byte ptr [rdx + rcx + 18], 8
	pinsrb	xmm15, byte ptr [rdx + r15 + 18], 9
	mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rcx + 18], 10
	pinsrb	xmm15, byte ptr [rdx + r8 + 18], 11
	pinsrb	xmm15, byte ptr [rdx + r12 + 18], 12
	mov	rax, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rax + 18], 13
	mov	rbx, qword ptr [rsp + 24]       # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + rbx + 18], 14
	mov	r13, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm15, byte ptr [rdx + r13 + 18], 15
	mov	rbx, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rbx + 19], 2
	pinsrb	xmm3, byte ptr [rdx + r11 + 19], 3
	pinsrb	xmm3, byte ptr [rdx + rdi + 19], 4
	pinsrb	xmm3, byte ptr [rdx + r14 + 19], 5
	pinsrb	xmm3, byte ptr [rdx + r10 + 19], 6
	mov	r13, r10
	pinsrb	xmm3, byte ptr [rdx + r9 + 19], 7
	pinsrb	xmm3, byte ptr [rdx + rsi + 19], 8
	mov	r10, rsi
	pinsrb	xmm3, byte ptr [rdx + r15 + 19], 9
	pinsrb	xmm3, byte ptr [rdx + rcx + 19], 10
	pinsrb	xmm3, byte ptr [rdx + r8 + 19], 11
	mov	rcx, r12
	pinsrb	xmm3, byte ptr [rdx + r12 + 19], 12
	pinsrb	xmm3, byte ptr [rdx + rax + 19], 13
	mov	r8, qword ptr [rsp + 24]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + r8 + 19], 14
	mov	rax, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm3, byte ptr [rdx + rax + 19], 15
	mov	rsi, qword ptr [rsp + 48]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 20], 2
	pinsrb	xmm4, byte ptr [rdx + rsi + 21], 2
	pinsrb	xmm7, byte ptr [rdx + rsi + 22], 2
	pinsrb	xmm2, byte ptr [rdx + rsi + 23], 2
	pinsrb	xmm9, byte ptr [rdx + rsi + 24], 2
	pinsrb	xmm12, byte ptr [rdx + rsi + 25], 2
	pinsrb	xmm13, byte ptr [rdx + rsi + 26], 2
	pinsrb	xmm10, byte ptr [rdx + rsi + 27], 2
	pinsrb	xmm11, byte ptr [rdx + rsi + 28], 2
	pinsrb	xmm14, byte ptr [rdx + rsi + 29], 2
	pinsrb	xmm1, byte ptr [rdx + rsi + 30], 2
	pmaxub	xmm15, xmm8
	pcmpeqb	xmm15, xmm8
	pand	xmm15, xmmword ptr [rip + .LCPI11_17]
	pmaxub	xmm3, xmm8
	pcmpeqb	xmm3, xmm8
	pand	xmm3, xmmword ptr [rip + .LCPI11_18]
	por	xmm3, xmm15
	pinsrb	xmm0, byte ptr [rdx + rsi + 31], 2
	por	xmm3, xmm5
	pinsrb	xmm6, byte ptr [rdx + r11 + 20], 3
	pinsrb	xmm6, byte ptr [rdx + rdi + 20], 4
	mov	r9, r14
	pinsrb	xmm6, byte ptr [rdx + r14 + 20], 5
	pinsrb	xmm6, byte ptr [rdx + r13 + 20], 6
	mov	r14, qword ptr [rsp + 56]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r14 + 20], 7
	pinsrb	xmm6, byte ptr [rdx + r10 + 20], 8
	pinsrb	xmm6, byte ptr [rdx + r15 + 20], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rax + 20], 10
	mov	rbx, qword ptr [rsp + 88]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rbx + 20], 11
	pinsrb	xmm6, byte ptr [rdx + r12 + 20], 12
	mov	r12, qword ptr [rsp + 16]       # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + r12 + 20], 13
	pinsrb	xmm6, byte ptr [rdx + r8 + 20], 14
	mov	rsi, qword ptr [rsp + 8]        # 8-byte Reload
	pinsrb	xmm6, byte ptr [rdx + rsi + 20], 15
	pinsrb	xmm4, byte ptr [rdx + r11 + 21], 3
	pinsrb	xmm4, byte ptr [rdx + rdi + 21], 4
	pinsrb	xmm4, byte ptr [rdx + r9 + 21], 5
	pinsrb	xmm4, byte ptr [rdx + r13 + 21], 6
	pinsrb	xmm4, byte ptr [rdx + r14 + 21], 7
	pinsrb	xmm4, byte ptr [rdx + r10 + 21], 8
	pinsrb	xmm4, byte ptr [rdx + r15 + 21], 9
	pinsrb	xmm4, byte ptr [rdx + rax + 21], 10
	pinsrb	xmm4, byte ptr [rdx + rbx + 21], 11
	pinsrb	xmm4, byte ptr [rdx + rcx + 21], 12
	pinsrb	xmm4, byte ptr [rdx + r12 + 21], 13
	pinsrb	xmm4, byte ptr [rdx + r8 + 21], 14
	pinsrb	xmm4, byte ptr [rdx + rsi + 21], 15
	pinsrb	xmm7, byte ptr [rdx + r11 + 22], 3
	pinsrb	xmm7, byte ptr [rdx + rdi + 22], 4
	pinsrb	xmm7, byte ptr [rdx + r9 + 22], 5
	pinsrb	xmm7, byte ptr [rdx + r13 + 22], 6
	pinsrb	xmm7, byte ptr [rdx + r14 + 22], 7
	pinsrb	xmm7, byte ptr [rdx + r10 + 22], 8
	pinsrb	xmm7, byte ptr [rdx + r15 + 22], 9
	pinsrb	xmm7, byte ptr [rdx + rax + 22], 10
	pinsrb	xmm7, byte ptr [rdx + rbx + 22], 11
	pinsrb	xmm7, byte ptr [rdx + rcx + 22], 12
	pinsrb	xmm7, byte ptr [rdx + r12 + 22], 13
	pinsrb	xmm7, byte ptr [rdx + r8 + 22], 14
	pinsrb	xmm7, byte ptr [rdx + rsi + 22], 15
	pmaxub	xmm6, xmm8
	pcmpeqb	xmm6, xmm8
	movdqa	xmm5, xmmword ptr [rip + .LCPI11_19] # xmm5 = [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16]
	pand	xmm6, xmm5
	pmaxub	xmm4, xmm8
	pcmpeqb	xmm4, xmm8
	movdqa	xmm15, xmmword ptr [rip + .LCPI11_20] # xmm15 = [32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]
	pand	xmm4, xmm15
	por	xmm4, xmm6
	pmaxub	xmm7, xmm8
	pcmpeqb	xmm7, xmm8
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_21] # xmm6 = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
	pand	xmm7, xmm6
	por	xmm7, xmm4
	por	xmm7, xmm3
	pinsrb	xmm2, byte ptr [rdx + r11 + 23], 3
	pinsrb	xmm2, byte ptr [rdx + rdi + 23], 4
	pinsrb	xmm2, byte ptr [rdx + r9 + 23], 5
	pinsrb	xmm2, byte ptr [rdx + r13 + 23], 6
	pinsrb	xmm2, byte ptr [rdx + r14 + 23], 7
	pinsrb	xmm2, byte ptr [rdx + r10 + 23], 8
	pinsrb	xmm2, byte ptr [rdx + r15 + 23], 9
	pinsrb	xmm2, byte ptr [rdx + rax + 23], 10
	pinsrb	xmm2, byte ptr [rdx + rbx + 23], 11
	pinsrb	xmm2, byte ptr [rdx + rcx + 23], 12
	pinsrb	xmm2, byte ptr [rdx + r12 + 23], 13
	pinsrb	xmm2, byte ptr [rdx + r8 + 23], 14
	pinsrb	xmm2, byte ptr [rdx + rsi + 23], 15
	pmaxub	xmm2, xmm8
	pcmpeqb	xmm2, xmm8
	movdqa	xmm3, xmmword ptr [rip + .LCPI11_6] # xmm3 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	pand	xmm2, xmm3
	por	xmm2, xmm7
	pinsrb	xmm9, byte ptr [rdx + r11 + 24], 3
	pinsrb	xmm9, byte ptr [rdx + rdi + 24], 4
	pinsrb	xmm9, byte ptr [rdx + r9 + 24], 5
	pinsrb	xmm9, byte ptr [rdx + r13 + 24], 6
	pinsrb	xmm9, byte ptr [rdx + r14 + 24], 7
	pinsrb	xmm9, byte ptr [rdx + r10 + 24], 8
	pinsrb	xmm9, byte ptr [rdx + r15 + 24], 9
	pinsrb	xmm9, byte ptr [rdx + rax + 24], 10
	pinsrb	xmm9, byte ptr [rdx + rbx + 24], 11
	pinsrb	xmm9, byte ptr [rdx + rcx + 24], 12
	pinsrb	xmm9, byte ptr [rdx + r12 + 24], 13
	pinsrb	xmm9, byte ptr [rdx + r8 + 24], 14
	pinsrb	xmm9, byte ptr [rdx + rsi + 24], 15
	pmaxub	xmm9, xmm8
	pcmpeqb	xmm9, xmm8
	pinsrb	xmm12, byte ptr [rdx + r11 + 25], 3
	pinsrb	xmm12, byte ptr [rdx + rdi + 25], 4
	pinsrb	xmm12, byte ptr [rdx + r9 + 25], 5
	pinsrb	xmm12, byte ptr [rdx + r13 + 25], 6
	pinsrb	xmm12, byte ptr [rdx + r14 + 25], 7
	pinsrb	xmm12, byte ptr [rdx + r10 + 25], 8
	pinsrb	xmm12, byte ptr [rdx + r15 + 25], 9
	pinsrb	xmm12, byte ptr [rdx + rax + 25], 10
	pinsrb	xmm12, byte ptr [rdx + rbx + 25], 11
	pinsrb	xmm12, byte ptr [rdx + rcx + 25], 12
	pinsrb	xmm12, byte ptr [rdx + r12 + 25], 13
	pinsrb	xmm12, byte ptr [rdx + r8 + 25], 14
	pinsrb	xmm12, byte ptr [rdx + rsi + 25], 15
	pmaxub	xmm12, xmm8
	pcmpeqb	xmm12, xmm8
	pand	xmm12, xmmword ptr [rip + .LCPI11_16]
	psubb	xmm12, xmm9
	pinsrb	xmm13, byte ptr [rdx + r11 + 26], 3
	pinsrb	xmm13, byte ptr [rdx + rdi + 26], 4
	pinsrb	xmm13, byte ptr [rdx + r9 + 26], 5
	pinsrb	xmm13, byte ptr [rdx + r13 + 26], 6
	pinsrb	xmm13, byte ptr [rdx + r14 + 26], 7
	pinsrb	xmm13, byte ptr [rdx + r10 + 26], 8
	pinsrb	xmm13, byte ptr [rdx + r15 + 26], 9
	pinsrb	xmm13, byte ptr [rdx + rax + 26], 10
	pinsrb	xmm13, byte ptr [rdx + rbx + 26], 11
	pinsrb	xmm13, byte ptr [rdx + rcx + 26], 12
	pinsrb	xmm13, byte ptr [rdx + r12 + 26], 13
	pinsrb	xmm13, byte ptr [rdx + r8 + 26], 14
	pinsrb	xmm13, byte ptr [rdx + rsi + 26], 15
	pinsrb	xmm10, byte ptr [rdx + r11 + 27], 3
	pinsrb	xmm10, byte ptr [rdx + rdi + 27], 4
	pinsrb	xmm10, byte ptr [rdx + r9 + 27], 5
	pinsrb	xmm10, byte ptr [rdx + r13 + 27], 6
	pinsrb	xmm10, byte ptr [rdx + r14 + 27], 7
	pinsrb	xmm10, byte ptr [rdx + r10 + 27], 8
	pinsrb	xmm10, byte ptr [rdx + r15 + 27], 9
	pinsrb	xmm10, byte ptr [rdx + rax + 27], 10
	pinsrb	xmm10, byte ptr [rdx + rbx + 27], 11
	pinsrb	xmm10, byte ptr [rdx + rcx + 27], 12
	pinsrb	xmm10, byte ptr [rdx + r12 + 27], 13
	pinsrb	xmm10, byte ptr [rdx + r8 + 27], 14
	pinsrb	xmm10, byte ptr [rdx + rsi + 27], 15
	pmaxub	xmm13, xmm8
	pcmpeqb	xmm13, xmm8
	pand	xmm13, xmmword ptr [rip + .LCPI11_17]
	pmaxub	xmm10, xmm8
	pcmpeqb	xmm10, xmm8
	pand	xmm10, xmmword ptr [rip + .LCPI11_18]
	por	xmm10, xmm13
	por	xmm10, xmm12
	pinsrb	xmm11, byte ptr [rdx + r11 + 28], 3
	pinsrb	xmm14, byte ptr [rdx + r11 + 29], 3
	pinsrb	xmm1, byte ptr [rdx + r11 + 30], 3
	pinsrb	xmm0, byte ptr [rdx + r11 + 31], 3
	pinsrb	xmm11, byte ptr [rdx + rdi + 28], 4
	pinsrb	xmm14, byte ptr [rdx + rdi + 29], 4
	pinsrb	xmm1, byte ptr [rdx + rdi + 30], 4
	pinsrb	xmm0, byte ptr [rdx + rdi + 31], 4
	pinsrb	xmm11, byte ptr [rdx + r9 + 28], 5
	pinsrb	xmm14, byte ptr [rdx + r9 + 29], 5
	pinsrb	xmm1, byte ptr [rdx + r9 + 30], 5
	pinsrb	xmm0, byte ptr [rdx + r9 + 31], 5
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + r13 + 28], 6
	pinsrb	xmm14, byte ptr [rdx + r13 + 29], 6
	pinsrb	xmm1, byte ptr [rdx + r13 + 30], 6
	pinsrb	xmm0, byte ptr [rdx + r13 + 31], 6
	mov	rax, r14
	pinsrb	xmm11, byte ptr [rdx + r14 + 28], 7
	pinsrb	xmm14, byte ptr [rdx + r14 + 29], 7
	pinsrb	xmm1, byte ptr [rdx + r14 + 30], 7
	pinsrb	xmm0, byte ptr [rdx + r14 + 31], 7
	pinsrb	xmm11, byte ptr [rdx + r10 + 28], 8
	pinsrb	xmm14, byte ptr [rdx + r10 + 29], 8
	pinsrb	xmm1, byte ptr [rdx + r10 + 30], 8
	pinsrb	xmm0, byte ptr [rdx + r10 + 31], 8
	mov	rax, qword ptr [rsp + 96]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rax + 28], 9
	pinsrb	xmm14, byte ptr [rdx + rax + 29], 9
	pinsrb	xmm1, byte ptr [rdx + rax + 30], 9
	pinsrb	xmm0, byte ptr [rdx + rax + 31], 9
	mov	rax, qword ptr [rsp + 64]       # 8-byte Reload
	pinsrb	xmm11, byte ptr [rdx + rax + 28], 10
	pinsrb	xmm14, byte ptr [rdx + rax + 29], 10
	pinsrb	xmm1, byte ptr [rdx + rax + 30], 10
	pinsrb	xmm0, byte ptr [rdx + rax + 31], 10
	mov	rax, rbx
	pinsrb	xmm11, byte ptr [rdx + rbx + 28], 11
	pinsrb	xmm14, byte ptr [rdx + rbx + 29], 11
	pinsrb	xmm1, byte ptr [rdx + rbx + 30], 11
	pinsrb	xmm0, byte ptr [rdx + rbx + 31], 11
	pinsrb	xmm11, byte ptr [rdx + rcx + 28], 12
	pinsrb	xmm14, byte ptr [rdx + rcx + 29], 12
	pinsrb	xmm1, byte ptr [rdx + rcx + 30], 12
	pinsrb	xmm0, byte ptr [rdx + rcx + 31], 12
	mov	rax, r12
	pinsrb	xmm11, byte ptr [rdx + r12 + 28], 13
	pinsrb	xmm14, byte ptr [rdx + r12 + 29], 13
	pinsrb	xmm1, byte ptr [rdx + r12 + 30], 13
	pinsrb	xmm0, byte ptr [rdx + r12 + 31], 13
	mov	rax, r8
	pinsrb	xmm11, byte ptr [rdx + r8 + 28], 14
	pinsrb	xmm14, byte ptr [rdx + r8 + 29], 14
	pinsrb	xmm1, byte ptr [rdx + r8 + 30], 14
	pinsrb	xmm0, byte ptr [rdx + r8 + 31], 14
	mov	rax, rsi
	pinsrb	xmm11, byte ptr [rdx + rsi + 28], 15
	pinsrb	xmm14, byte ptr [rdx + rsi + 29], 15
	pinsrb	xmm1, byte ptr [rdx + rsi + 30], 15
	pinsrb	xmm0, byte ptr [rdx + rsi + 31], 15
	pmaxub	xmm11, xmm8
	pcmpeqb	xmm11, xmm8
	pand	xmm11, xmm5
	pmaxub	xmm14, xmm8
	pcmpeqb	xmm14, xmm8
	pand	xmm14, xmm15
	por	xmm14, xmm11
	pmaxub	xmm1, xmm8
	pcmpeqb	xmm1, xmm8
	pand	xmm1, xmm6
	por	xmm1, xmm14
	por	xmm1, xmm10
	pmaxub	xmm0, xmm8
	pcmpeqb	xmm0, xmm8
	pand	xmm0, xmm3
	por	xmm0, xmm1
	movdqa	xmm1, xmm2
	punpcklbw	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	movdqa	xmm5, xmmword ptr [rsp + 208]   # 16-byte Reload
	movdqa	xmm3, xmm5
	movdqa	xmm6, xmmword ptr [rsp + 176]   # 16-byte Reload
	punpcklbw	xmm3, xmm6              # xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1],xmm3[2],xmm6[2],xmm3[3],xmm6[3],xmm3[4],xmm6[4],xmm3[5],xmm6[5],xmm3[6],xmm6[6],xmm3[7],xmm6[7]
	movdqa	xmm4, xmm3
	punpcklwd	xmm4, xmm1              # xmm4 = xmm4[0],xmm1[0],xmm4[1],xmm1[1],xmm4[2],xmm1[2],xmm4[3],xmm1[3]
	punpckhwd	xmm3, xmm1              # xmm3 = xmm3[4],xmm1[4],xmm3[5],xmm1[5],xmm3[6],xmm1[6],xmm3[7],xmm1[7]
	punpckhbw	xmm2, xmm0              # xmm2 = xmm2[8],xmm0[8],xmm2[9],xmm0[9],xmm2[10],xmm0[10],xmm2[11],xmm0[11],xmm2[12],xmm0[12],xmm2[13],xmm0[13],xmm2[14],xmm0[14],xmm2[15],xmm0[15]
	punpckhbw	xmm5, xmm6              # xmm5 = xmm5[8],xmm6[8],xmm5[9],xmm6[9],xmm5[10],xmm6[10],xmm5[11],xmm6[11],xmm5[12],xmm6[12],xmm5[13],xmm6[13],xmm5[14],xmm6[14],xmm5[15],xmm6[15]
	movdqa	xmm0, xmm5
	punpcklwd	xmm0, xmm2              # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	punpckhwd	xmm5, xmm2              # xmm5 = xmm5[4],xmm2[4],xmm5[5],xmm2[5],xmm5[6],xmm2[6],xmm5[7],xmm2[7]
	mov	rcx, qword ptr [rsp + 128]      # 8-byte Reload
	movdqu	xmmword ptr [r15 + 4*rcx + 48], xmm5
	movdqu	xmmword ptr [r15 + 4*rcx + 32], xmm0
	movdqu	xmmword ptr [r15 + 4*rcx + 16], xmm3
	movdqu	xmmword ptr [r15 + 4*rcx], xmm4
	add	rcx, 16
	mov	rax, rcx
	cmp	rcx, qword ptr [rsp + 192]      # 8-byte Folded Reload
	jne	.LBB11_67
# %bb.68:
	mov	r10, qword ptr [rsp + 248]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 192]      # 8-byte Folded Reload
	mov	r14b, byte ptr [rsp]            # 1-byte Reload
	mov	r13, qword ptr [rsp + 288]      # 8-byte Reload
	mov	rdx, qword ptr [rsp + 280]      # 8-byte Reload
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	jne	.LBB11_69
	jmp	.LBB11_72
.LBB11_124:
	and	r10, -8
	mov	rax, r10
	shl	rax, 6
	add	rax, rdx
	mov	qword ptr [rsp + 48], rax       # 8-byte Spill
	mov	qword ptr [rsp + 32], r10       # 8-byte Spill
	lea	rax, [r15 + 4*r10]
	mov	qword ptr [rsp + 56], rax       # 8-byte Spill
	movd	xmm0, r14d
	pshuflw	xmm0, xmm0, 224                 # xmm0 = xmm0[0,0,2,3,4,5,6,7]
	pshufd	xmm11, xmm0, 0                  # xmm11 = xmm0[0,0,0,0]
	xor	r14d, r14d
	mov	qword ptr [rsp + 120], r15      # 8-byte Spill
	pxor	xmm15, xmm15
	.p2align	4, 0x90
.LBB11_125:                             # =>This Inner Loop Header: Depth=1
	mov	qword ptr [rsp + 16], r14       # 8-byte Spill
	shl	r14, 6
	mov	rdi, r14
	mov	r15, r14
	mov	r12, r14
	mov	r13, r14
	mov	rbx, r14
	mov	r9, r14
	movzx	eax, word ptr [rdx + r14]
	movd	xmm5, eax
	movzx	eax, word ptr [rdx + r14 + 2]
	movd	xmm0, eax
	movzx	eax, word ptr [rdx + r14 + 4]
	movd	xmm1, eax
	movzx	eax, word ptr [rdx + r14 + 6]
	movd	xmm7, eax
	movzx	eax, word ptr [rdx + r14 + 8]
	movd	xmm8, eax
	movzx	eax, word ptr [rdx + r14 + 10]
	movd	xmm4, eax
	movzx	eax, word ptr [rdx + r14 + 12]
	movzx	esi, word ptr [rdx + r14 + 14]
	movzx	ecx, word ptr [rdx + r14 + 16]
	mov	dword ptr [rsp + 24], ecx       # 4-byte Spill
	movzx	r10d, word ptr [rdx + r14 + 18]
	movzx	r11d, word ptr [rdx + r14 + 20]
	mov	rcx, r14
	or	rcx, 64
	or	rdi, 128
	or	r15, 192
	or	r12, 256
	or	r13, 320
	or	rbx, 384
	pinsrw	xmm5, word ptr [rdx + rcx], 1
	pinsrw	xmm5, word ptr [rdx + rdi], 2
	pinsrw	xmm5, word ptr [rdx + r15], 3
	pinsrw	xmm5, word ptr [rdx + r12], 4
	pinsrw	xmm5, word ptr [rdx + r13], 5
	pinsrw	xmm5, word ptr [rdx + rbx], 6
	pinsrw	xmm0, word ptr [rdx + rcx + 2], 1
	pinsrw	xmm0, word ptr [rdx + rdi + 2], 2
	pinsrw	xmm0, word ptr [rdx + r15 + 2], 3
	pinsrw	xmm0, word ptr [rdx + r12 + 2], 4
	pinsrw	xmm0, word ptr [rdx + r13 + 2], 5
	pinsrw	xmm0, word ptr [rdx + rbx + 2], 6
	or	r9, 448
	pinsrw	xmm0, word ptr [rdx + r9 + 2], 7
	movd	xmm2, eax
	movzx	eax, word ptr [rdx + r14 + 22]
	mov	dword ptr [rsp + 8], eax        # 4-byte Spill
	pcmpgtw	xmm0, xmm11
	pinsrw	xmm1, word ptr [rdx + rcx + 4], 1
	pinsrw	xmm1, word ptr [rdx + rdi + 4], 2
	pinsrw	xmm1, word ptr [rdx + r15 + 4], 3
	pinsrw	xmm1, word ptr [rdx + r12 + 4], 4
	pinsrw	xmm1, word ptr [rdx + r13 + 4], 5
	pinsrw	xmm1, word ptr [rdx + rbx + 4], 6
	pinsrw	xmm1, word ptr [rdx + r9 + 4], 7
	packsswb	xmm0, xmm0
	pcmpgtw	xmm1, xmm11
	movdqa	xmm9, xmmword ptr [rip + .LCPI11_8] # xmm9 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm3, xmm9
	pblendvb	xmm3, xmm15, xmm0
	packsswb	xmm1, xmm1
	movdqa	xmm0, xmmword ptr [rip + .LCPI11_9] # xmm0 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm0
	movdqa	xmm14, xmm0
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm1, esi
	movzx	r8d, word ptr [rdx + r14 + 24]
	pinsrw	xmm5, word ptr [rdx + r9], 7
	pcmpgtw	xmm5, xmm11
	pcmpeqd	xmm0, xmm0
	pxor	xmm5, xmm0
	packsswb	xmm5, xmm5
	pinsrw	xmm7, word ptr [rdx + rcx + 6], 1
	pinsrw	xmm7, word ptr [rdx + rdi + 6], 2
	pinsrw	xmm7, word ptr [rdx + r15 + 6], 3
	pinsrw	xmm7, word ptr [rdx + r12 + 6], 4
	pinsrw	xmm7, word ptr [rdx + r13 + 6], 5
	pinsrw	xmm7, word ptr [rdx + rbx + 6], 6
	pinsrw	xmm7, word ptr [rdx + r9 + 6], 7
	pcmpgtw	xmm7, xmm11
	packsswb	xmm7, xmm7
	pinsrw	xmm8, word ptr [rdx + rcx + 8], 1
	pinsrw	xmm8, word ptr [rdx + rdi + 8], 2
	pinsrw	xmm8, word ptr [rdx + r15 + 8], 3
	pinsrw	xmm8, word ptr [rdx + r12 + 8], 4
	pinsrw	xmm8, word ptr [rdx + r13 + 8], 5
	pinsrw	xmm8, word ptr [rdx + rbx + 8], 6
	pinsrw	xmm8, word ptr [rdx + r9 + 8], 7
	psubb	xmm3, xmm5
	movdqa	xmm12, xmmword ptr [rip + .LCPI11_10] # xmm12 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm7
	pblendvb	xmm12, xmm15, xmm0
	movd	xmm7, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rdx + r14 + 26]
	pcmpgtw	xmm8, xmm11
	packsswb	xmm8, xmm8
	por	xmm12, xmm6
	movdqa	xmm13, xmmword ptr [rip + .LCPI11_11] # xmm13 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm8
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm6, r10d
	movzx	r10d, word ptr [rdx + r14 + 28]
	pinsrw	xmm4, word ptr [rdx + rcx + 10], 1
	pinsrw	xmm4, word ptr [rdx + rdi + 10], 2
	pinsrw	xmm4, word ptr [rdx + r15 + 10], 3
	pinsrw	xmm4, word ptr [rdx + r12 + 10], 4
	pinsrw	xmm4, word ptr [rdx + r13 + 10], 5
	pinsrw	xmm4, word ptr [rdx + rbx + 10], 6
	pinsrw	xmm4, word ptr [rdx + r9 + 10], 7
	pcmpgtw	xmm4, xmm11
	packsswb	xmm4, xmm4
	pinsrw	xmm2, word ptr [rdx + rcx + 12], 1
	pinsrw	xmm2, word ptr [rdx + rdi + 12], 2
	pinsrw	xmm2, word ptr [rdx + r15 + 12], 3
	pinsrw	xmm2, word ptr [rdx + r12 + 12], 4
	pinsrw	xmm2, word ptr [rdx + r13 + 12], 5
	pinsrw	xmm2, word ptr [rdx + rbx + 12], 6
	por	xmm12, xmm3
	movdqa	xmm5, xmmword ptr [rip + .LCPI11_12] # xmm5 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm4, r11d
	movzx	esi, word ptr [rdx + r14 + 30]
	mov	dword ptr [rsp + 40], esi       # 4-byte Spill
	pinsrw	xmm2, word ptr [rdx + r9 + 12], 7
	pcmpgtw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm13
	movdqa	xmm13, xmmword ptr [rip + .LCPI11_13] # xmm13 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm3, dword ptr [rsp + 8]       # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	esi, word ptr [rdx + r14 + 32]
	mov	dword ptr [rsp + 24], esi       # 4-byte Spill
	pinsrw	xmm1, word ptr [rdx + rcx + 14], 1
	pinsrw	xmm1, word ptr [rdx + rdi + 14], 2
	pinsrw	xmm1, word ptr [rdx + r15 + 14], 3
	pinsrw	xmm1, word ptr [rdx + r12 + 14], 4
	pinsrw	xmm1, word ptr [rdx + r13 + 14], 5
	pinsrw	xmm1, word ptr [rdx + rbx + 14], 6
	por	xmm13, xmm5
	movd	xmm2, r8d
	movzx	esi, word ptr [rdx + r14 + 34]
	mov	dword ptr [rsp + 8], esi        # 4-byte Spill
	pinsrw	xmm1, word ptr [rdx + r9 + 14], 7
	pcmpgtw	xmm1, xmm11
	pinsrw	xmm6, word ptr [rdx + rcx + 18], 1
	pinsrw	xmm6, word ptr [rdx + rdi + 18], 2
	pinsrw	xmm6, word ptr [rdx + r15 + 18], 3
	pinsrw	xmm6, word ptr [rdx + r12 + 18], 4
	pinsrw	xmm6, word ptr [rdx + r13 + 18], 5
	pinsrw	xmm6, word ptr [rdx + rbx + 18], 6
	packsswb	xmm1, xmm1
	pinsrw	xmm6, word ptr [rdx + r9 + 18], 7
	pcmpgtw	xmm6, xmm11
	packsswb	xmm6, xmm6
	por	xmm13, xmm12
	movdqa	xmm12, xmmword ptr [rip + .LCPI11_14] # xmm12 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm12, xmm15, xmm0
	movdqa	xmm8, xmm9
	movdqa	xmm0, xmm6
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm1, eax
	movzx	r11d, word ptr [rdx + r14 + 36]
	pinsrw	xmm7, word ptr [rdx + rcx + 16], 1
	pinsrw	xmm7, word ptr [rdx + rdi + 16], 2
	pinsrw	xmm7, word ptr [rdx + r15 + 16], 3
	pinsrw	xmm7, word ptr [rdx + r12 + 16], 4
	pinsrw	xmm7, word ptr [rdx + r13 + 16], 5
	pinsrw	xmm7, word ptr [rdx + rbx + 16], 6
	pinsrw	xmm4, word ptr [rdx + rcx + 20], 1
	pinsrw	xmm4, word ptr [rdx + rdi + 20], 2
	pinsrw	xmm4, word ptr [rdx + r15 + 20], 3
	pinsrw	xmm4, word ptr [rdx + r12 + 20], 4
	pinsrw	xmm4, word ptr [rdx + r13 + 20], 5
	pinsrw	xmm4, word ptr [rdx + rbx + 20], 6
	pinsrw	xmm4, word ptr [rdx + r9 + 20], 7
	pcmpgtw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm12, xmm13
	movdqa	xmm5, xmm14
	movdqa	xmm0, xmm4
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm4, r10d
	movzx	esi, word ptr [rdx + r14 + 38]
	pinsrw	xmm7, word ptr [rdx + r9 + 16], 7
	pcmpgtw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI11_22]
	packsswb	xmm7, xmm7
	pinsrw	xmm3, word ptr [rdx + rcx + 22], 1
	pinsrw	xmm3, word ptr [rdx + rdi + 22], 2
	pinsrw	xmm3, word ptr [rdx + r15 + 22], 3
	pinsrw	xmm3, word ptr [rdx + r12 + 22], 4
	pinsrw	xmm3, word ptr [rdx + r13 + 22], 5
	pinsrw	xmm3, word ptr [rdx + rbx + 22], 6
	pinsrw	xmm3, word ptr [rdx + r9 + 22], 7
	pcmpgtw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [rdx + rcx + 24], 1
	pinsrw	xmm2, word ptr [rdx + rdi + 24], 2
	pinsrw	xmm2, word ptr [rdx + r15 + 24], 3
	pinsrw	xmm2, word ptr [rdx + r12 + 24], 4
	pinsrw	xmm2, word ptr [rdx + r13 + 24], 5
	pinsrw	xmm2, word ptr [rdx + rbx + 24], 6
	pinsrw	xmm2, word ptr [rdx + r9 + 24], 7
	psubb	xmm8, xmm7
	movdqa	xmm10, xmmword ptr [rip + .LCPI11_10] # xmm10 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm14, xmm10
	movdqa	xmm0, xmm3
	pblendvb	xmm14, xmm15, xmm0
	movd	xmm3, dword ptr [rsp + 40]      # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	movzx	eax, word ptr [rdx + r14 + 40]
	pcmpgtw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm14, xmm5
	movdqa	xmm9, xmmword ptr [rip + .LCPI11_11] # xmm9 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm13, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm13, xmm15, xmm0
	movd	xmm7, dword ptr [rsp + 24]      # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	r10d, word ptr [rdx + r14 + 42]
	pinsrw	xmm1, word ptr [rdx + rcx + 26], 1
	pinsrw	xmm1, word ptr [rdx + rdi + 26], 2
	pinsrw	xmm1, word ptr [rdx + r15 + 26], 3
	pinsrw	xmm1, word ptr [rdx + r12 + 26], 4
	pinsrw	xmm1, word ptr [rdx + r13 + 26], 5
	pinsrw	xmm1, word ptr [rdx + rbx + 26], 6
	pinsrw	xmm1, word ptr [rdx + r9 + 26], 7
	pcmpgtw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm4, word ptr [rdx + rcx + 28], 1
	pinsrw	xmm4, word ptr [rdx + rdi + 28], 2
	pinsrw	xmm4, word ptr [rdx + r15 + 28], 3
	pinsrw	xmm4, word ptr [rdx + r12 + 28], 4
	pinsrw	xmm4, word ptr [rdx + r13 + 28], 5
	pinsrw	xmm4, word ptr [rdx + rbx + 28], 6
	por	xmm14, xmm8
	movdqa	xmm5, xmmword ptr [rip + .LCPI11_12] # xmm5 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm2, dword ptr [rsp + 8]       # 4-byte Folded Reload
                                        # xmm2 = mem[0],zero,zero,zero
	movzx	r8d, word ptr [rdx + r14 + 44]
	pinsrw	xmm4, word ptr [rdx + r9 + 28], 7
	pcmpgtw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm5, xmm13
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_13] # xmm6 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm4, r11d
	movzx	r11d, word ptr [rdx + r14 + 46]
	pinsrw	xmm3, word ptr [rdx + rcx + 30], 1
	pinsrw	xmm3, word ptr [rdx + rdi + 30], 2
	pinsrw	xmm3, word ptr [rdx + r15 + 30], 3
	pinsrw	xmm3, word ptr [rdx + r12 + 30], 4
	pinsrw	xmm3, word ptr [rdx + r13 + 30], 5
	pinsrw	xmm3, word ptr [rdx + rbx + 30], 6
	por	xmm6, xmm5
	movd	xmm1, esi
	movzx	esi, word ptr [rdx + r14 + 48]
	mov	dword ptr [rsp + 8], esi        # 4-byte Spill
	pinsrw	xmm3, word ptr [rdx + r9 + 30], 7
	pcmpgtw	xmm3, xmm11
	pinsrw	xmm2, word ptr [rdx + rcx + 34], 1
	pinsrw	xmm2, word ptr [rdx + rdi + 34], 2
	pinsrw	xmm2, word ptr [rdx + r15 + 34], 3
	pinsrw	xmm2, word ptr [rdx + r12 + 34], 4
	pinsrw	xmm2, word ptr [rdx + r13 + 34], 5
	pinsrw	xmm2, word ptr [rdx + rbx + 34], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm2, word ptr [rdx + r9 + 34], 7
	pcmpgtw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm6, xmm14
	movdqa	xmm14, xmmword ptr [rip + .LCPI11_14] # xmm14 = <128,128,128,128,128,128,128,128,u,u,u,u,u,u,u,u>
	movdqa	xmm13, xmm14
	movdqa	xmm0, xmm3
	pblendvb	xmm13, xmm15, xmm0
	movdqa	xmm8, xmmword ptr [rip + .LCPI11_8] # xmm8 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm2, eax
	movzx	esi, word ptr [rdx + r14 + 50]
	pinsrw	xmm7, word ptr [rdx + rcx + 32], 1
	pinsrw	xmm7, word ptr [rdx + rdi + 32], 2
	pinsrw	xmm7, word ptr [rdx + r15 + 32], 3
	pinsrw	xmm7, word ptr [rdx + r12 + 32], 4
	pinsrw	xmm7, word ptr [rdx + r13 + 32], 5
	pinsrw	xmm7, word ptr [rdx + rbx + 32], 6
	pinsrw	xmm4, word ptr [rdx + rcx + 36], 1
	pinsrw	xmm4, word ptr [rdx + rdi + 36], 2
	pinsrw	xmm4, word ptr [rdx + r15 + 36], 3
	pinsrw	xmm4, word ptr [rdx + r12 + 36], 4
	pinsrw	xmm4, word ptr [rdx + r13 + 36], 5
	pinsrw	xmm4, word ptr [rdx + rbx + 36], 6
	pinsrw	xmm4, word ptr [rdx + r9 + 36], 7
	pcmpgtw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm13, xmm6
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_9] # xmm6 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm4
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm3, r10d
	movzx	r10d, word ptr [rdx + r14 + 52]
	pinsrw	xmm7, word ptr [rdx + r9 + 32], 7
	pcmpgtw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI11_22]
	packsswb	xmm7, xmm7
	pinsrw	xmm1, word ptr [rdx + rcx + 38], 1
	pinsrw	xmm1, word ptr [rdx + rdi + 38], 2
	pinsrw	xmm1, word ptr [rdx + r15 + 38], 3
	pinsrw	xmm1, word ptr [rdx + r12 + 38], 4
	pinsrw	xmm1, word ptr [rdx + r13 + 38], 5
	pinsrw	xmm1, word ptr [rdx + rbx + 38], 6
	pinsrw	xmm1, word ptr [rdx + r9 + 38], 7
	pcmpgtw	xmm1, xmm11
	packsswb	xmm1, xmm1
	pinsrw	xmm2, word ptr [rdx + rcx + 40], 1
	pinsrw	xmm2, word ptr [rdx + rdi + 40], 2
	pinsrw	xmm2, word ptr [rdx + r15 + 40], 3
	pinsrw	xmm2, word ptr [rdx + r12 + 40], 4
	pinsrw	xmm2, word ptr [rdx + r13 + 40], 5
	pinsrw	xmm2, word ptr [rdx + rbx + 40], 6
	pinsrw	xmm2, word ptr [rdx + r9 + 40], 7
	psubb	xmm8, xmm7
	movdqa	xmm5, xmm10
	movdqa	xmm0, xmm1
	pblendvb	xmm5, xmm15, xmm0
	movd	xmm1, r8d
	movzx	r8d, word ptr [rdx + r14 + 54]
	pcmpgtw	xmm2, xmm11
	packsswb	xmm2, xmm2
	por	xmm5, xmm6
	movdqa	xmm6, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm4, r11d
	movzx	eax, word ptr [rdx + r14 + 56]
	pinsrw	xmm3, word ptr [rdx + rcx + 42], 1
	pinsrw	xmm3, word ptr [rdx + rdi + 42], 2
	pinsrw	xmm3, word ptr [rdx + r15 + 42], 3
	pinsrw	xmm3, word ptr [rdx + r12 + 42], 4
	pinsrw	xmm3, word ptr [rdx + r13 + 42], 5
	pinsrw	xmm3, word ptr [rdx + rbx + 42], 6
	pinsrw	xmm3, word ptr [rdx + r9 + 42], 7
	pcmpgtw	xmm3, xmm11
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [rdx + rcx + 44], 1
	pinsrw	xmm1, word ptr [rdx + rdi + 44], 2
	pinsrw	xmm1, word ptr [rdx + r15 + 44], 3
	pinsrw	xmm1, word ptr [rdx + r12 + 44], 4
	pinsrw	xmm1, word ptr [rdx + r13 + 44], 5
	pinsrw	xmm1, word ptr [rdx + rbx + 44], 6
	por	xmm5, xmm8
	movdqa	xmm9, xmmword ptr [rip + .LCPI11_12] # xmm9 = <32,32,32,32,32,32,32,32,u,u,u,u,u,u,u,u>
	movdqa	xmm2, xmm9
	movdqa	xmm0, xmm3
	pblendvb	xmm2, xmm15, xmm0
	movd	xmm7, dword ptr [rsp + 8]       # 4-byte Folded Reload
                                        # xmm7 = mem[0],zero,zero,zero
	movzx	r11d, word ptr [rdx + r14 + 58]
	pinsrw	xmm1, word ptr [rdx + r9 + 44], 7
	pcmpgtw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm2, xmm6
	movdqa	xmm10, xmmword ptr [rip + .LCPI11_13] # xmm10 = <64,64,64,64,64,64,64,64,u,u,u,u,u,u,u,u>
	movdqa	xmm6, xmm10
	movdqa	xmm0, xmm1
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm1, esi
	movzx	esi, word ptr [rdx + r14 + 60]
	por	xmm6, xmm2
	movd	xmm2, r10d
	pinsrw	xmm4, word ptr [rdx + rcx + 46], 1
	pinsrw	xmm4, word ptr [rdx + rdi + 46], 2
	pinsrw	xmm4, word ptr [rdx + r15 + 46], 3
	pinsrw	xmm4, word ptr [rdx + r12 + 46], 4
	pinsrw	xmm4, word ptr [rdx + r13 + 46], 5
	pinsrw	xmm4, word ptr [rdx + rbx + 46], 6
	pinsrw	xmm4, word ptr [rdx + r9 + 46], 7
	pcmpgtw	xmm4, xmm11
	packsswb	xmm4, xmm4
	por	xmm6, xmm5
	movdqa	xmm8, xmm14
	movdqa	xmm0, xmm4
	pblendvb	xmm8, xmm15, xmm0
	movd	xmm3, r8d
	pinsrw	xmm1, word ptr [rdx + rcx + 50], 1
	pinsrw	xmm1, word ptr [rdx + rdi + 50], 2
	pinsrw	xmm1, word ptr [rdx + r15 + 50], 3
	pinsrw	xmm1, word ptr [rdx + r12 + 50], 4
	pinsrw	xmm1, word ptr [rdx + r13 + 50], 5
	pinsrw	xmm1, word ptr [rdx + rbx + 50], 6
	pinsrw	xmm1, word ptr [rdx + r9 + 50], 7
	pcmpgtw	xmm1, xmm11
	packsswb	xmm1, xmm1
	por	xmm8, xmm6
	movdqa	xmm4, xmmword ptr [rip + .LCPI11_8] # xmm4 = <2,2,2,2,2,2,2,2,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm15, xmm0
	movd	xmm1, eax
	pinsrw	xmm7, word ptr [rdx + rcx + 48], 1
	pinsrw	xmm7, word ptr [rdx + rdi + 48], 2
	pinsrw	xmm7, word ptr [rdx + r15 + 48], 3
	pinsrw	xmm7, word ptr [rdx + r12 + 48], 4
	pinsrw	xmm7, word ptr [rdx + r13 + 48], 5
	pinsrw	xmm7, word ptr [rdx + rbx + 48], 6
	pinsrw	xmm7, word ptr [rdx + r9 + 48], 7
	pcmpgtw	xmm7, xmm11
	pxor	xmm7, xmmword ptr [rip + .LCPI11_22]
	pinsrw	xmm2, word ptr [rdx + rcx + 52], 1
	pinsrw	xmm2, word ptr [rdx + rdi + 52], 2
	pinsrw	xmm2, word ptr [rdx + r15 + 52], 3
	pinsrw	xmm2, word ptr [rdx + r12 + 52], 4
	pinsrw	xmm2, word ptr [rdx + r13 + 52], 5
	pinsrw	xmm2, word ptr [rdx + rbx + 52], 6
	packsswb	xmm7, xmm7
	pinsrw	xmm2, word ptr [rdx + r9 + 52], 7
	pcmpgtw	xmm2, xmm11
	pinsrw	xmm3, word ptr [rdx + rcx + 54], 1
	pinsrw	xmm3, word ptr [rdx + rdi + 54], 2
	pinsrw	xmm3, word ptr [rdx + r15 + 54], 3
	pinsrw	xmm3, word ptr [rdx + r12 + 54], 4
	pinsrw	xmm3, word ptr [rdx + r13 + 54], 5
	pinsrw	xmm3, word ptr [rdx + rbx + 54], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [rdx + r9 + 54], 7
	pcmpgtw	xmm3, xmm11
	pinsrw	xmm1, word ptr [rdx + rcx + 56], 1
	pinsrw	xmm1, word ptr [rdx + rdi + 56], 2
	pinsrw	xmm1, word ptr [rdx + r15 + 56], 3
	pinsrw	xmm1, word ptr [rdx + r12 + 56], 4
	pinsrw	xmm1, word ptr [rdx + r13 + 56], 5
	pinsrw	xmm1, word ptr [rdx + rbx + 56], 6
	packsswb	xmm3, xmm3
	pinsrw	xmm1, word ptr [rdx + r9 + 56], 7
	psubb	xmm4, xmm7
	movdqa	xmm5, xmmword ptr [rip + .LCPI11_9] # xmm5 = <4,4,4,4,4,4,4,4,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm2
	pblendvb	xmm5, xmm15, xmm0
	movdqa	xmm6, xmmword ptr [rip + .LCPI11_10] # xmm6 = <8,8,8,8,8,8,8,8,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm3
	pblendvb	xmm6, xmm15, xmm0
	movd	xmm2, r11d
	pcmpgtw	xmm1, xmm11
	pinsrw	xmm2, word ptr [rdx + rcx + 58], 1
	pinsrw	xmm2, word ptr [rdx + rdi + 58], 2
	pinsrw	xmm2, word ptr [rdx + r15 + 58], 3
	pinsrw	xmm2, word ptr [rdx + r12 + 58], 4
	pinsrw	xmm2, word ptr [rdx + r13 + 58], 5
	pinsrw	xmm2, word ptr [rdx + rbx + 58], 6
	pinsrw	xmm2, word ptr [rdx + r9 + 58], 7
	packsswb	xmm1, xmm1
	pcmpgtw	xmm2, xmm11
	por	xmm6, xmm5
	movd	xmm3, esi
	pinsrw	xmm3, word ptr [rdx + rcx + 60], 1
	pinsrw	xmm3, word ptr [rdx + rdi + 60], 2
	pinsrw	xmm3, word ptr [rdx + r15 + 60], 3
	pinsrw	xmm3, word ptr [rdx + r12 + 60], 4
	pinsrw	xmm3, word ptr [rdx + r13 + 60], 5
	pinsrw	xmm3, word ptr [rdx + rbx + 60], 6
	packsswb	xmm2, xmm2
	pinsrw	xmm3, word ptr [rdx + r9 + 60], 7
	pcmpgtw	xmm3, xmm11
	packsswb	xmm3, xmm3
	por	xmm6, xmm4
	movdqa	xmm4, xmmword ptr [rip + .LCPI11_11] # xmm4 = <16,16,16,16,16,16,16,16,u,u,u,u,u,u,u,u>
	movdqa	xmm0, xmm1
	pblendvb	xmm4, xmm15, xmm0
	movdqa	xmm1, xmm9
	movdqa	xmm0, xmm2
	pblendvb	xmm1, xmm15, xmm0
	movdqa	xmm0, xmm3
	pblendvb	xmm10, xmm15, xmm0
	por	xmm1, xmm4
	movzx	eax, word ptr [rdx + r14 + 62]
	por	xmm10, xmm1
	movd	xmm0, eax
	pinsrw	xmm0, word ptr [rdx + rcx + 62], 1
	pinsrw	xmm0, word ptr [rdx + rdi + 62], 2
	pinsrw	xmm0, word ptr [rdx + r15 + 62], 3
	mov	r15, qword ptr [rsp + 120]      # 8-byte Reload
	pinsrw	xmm0, word ptr [rdx + r12 + 62], 4
	pinsrw	xmm0, word ptr [rdx + r13 + 62], 5
	pinsrw	xmm0, word ptr [rdx + rbx + 62], 6
	pinsrw	xmm0, word ptr [rdx + r9 + 62], 7
	pcmpgtw	xmm0, xmm11
	packsswb	xmm0, xmm0
	por	xmm10, xmm6
	pblendvb	xmm14, xmm15, xmm0
	por	xmm14, xmm10
	movdqa	xmm0, xmm12
	punpcklqdq	xmm0, xmm13             # xmm0 = xmm0[0],xmm13[0]
	movdqa	xmm2, xmm8
	punpcklqdq	xmm2, xmm14             # xmm2 = xmm2[0],xmm14[0]
	movdqa	xmm3, xmmword ptr [rip + .LCPI11_15] # xmm3 = <4,12,5,13,6,14,7,15,u,u,u,u,u,u,u,u>
	pshufb	xmm2, xmm3
	pshufb	xmm0, xmm3
	punpcklwd	xmm0, xmm2              # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	punpcklbw	xmm8, xmm14             # xmm8 = xmm8[0],xmm14[0],xmm8[1],xmm14[1],xmm8[2],xmm14[2],xmm8[3],xmm14[3],xmm8[4],xmm14[4],xmm8[5],xmm14[5],xmm8[6],xmm14[6],xmm8[7],xmm14[7]
	punpcklbw	xmm12, xmm13            # xmm12 = xmm12[0],xmm13[0],xmm12[1],xmm13[1],xmm12[2],xmm13[2],xmm12[3],xmm13[3],xmm12[4],xmm13[4],xmm12[5],xmm13[5],xmm12[6],xmm13[6],xmm12[7],xmm13[7]
	punpcklwd	xmm12, xmm8             # xmm12 = xmm12[0],xmm8[0],xmm12[1],xmm8[1],xmm12[2],xmm8[2],xmm12[3],xmm8[3]
	mov	rcx, qword ptr [rsp + 16]       # 8-byte Reload
	movdqu	xmmword ptr [r15 + 4*rcx], xmm12
	movdqu	xmmword ptr [r15 + 4*rcx + 16], xmm0
	add	rcx, 8
	mov	r14, rcx
	cmp	rcx, qword ptr [rsp + 32]       # 8-byte Folded Reload
	jne	.LBB11_125
# %bb.126:
	mov	r10, qword ptr [rsp + 256]      # 8-byte Reload
	cmp	r10, qword ptr [rsp + 32]       # 8-byte Folded Reload
	mov	r11, qword ptr [rsp + 136]      # 8-byte Reload
	mov	r14d, dword ptr [rsp]           # 4-byte Reload
	mov	r12, qword ptr [rsp + 56]       # 8-byte Reload
	mov	rax, qword ptr [rsp + 48]       # 8-byte Reload
	jne	.LBB11_127
	jmp	.LBB11_130
.LBB11_182:
	mov	r8, r10
	and	r8, -4
	mov	rbx, r8
	shl	rbx, 7
	add	rbx, rdx
	lea	r14, [r15 + 4*r8]
	movaps	xmm1, xmm0
	shufps	xmm1, xmm0, 0                   # xmm1 = xmm1[0,0],xmm0[0,0]
	add	rdx, 508
	xor	ecx, ecx
	movdqa	xmm15, xmmword ptr [rip + .LCPI11_0] # xmm15 = <1,1,1,1,u,u,u,u,u,u,u,u,u,u,u,u>
	movdqa	xmm8, xmmword ptr [rip + .LCPI11_1] # xmm8 = [252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252]
	movdqa	xmm10, xmmword ptr [rip + .LCPI11_2] # xmm10 = [248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248]
	movdqa	xmm11, xmmword ptr [rip + .LCPI11_3] # xmm11 = [240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240]
	movdqa	xmm12, xmmword ptr [rip + .LCPI11_4] # xmm12 = [224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224]
	movdqa	xmm13, xmmword ptr [rip + .LCPI11_5] # xmm13 = [192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192]
	movdqa	xmm14, xmmword ptr [rip + .LCPI11_6] # xmm14 = [128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
	movdqa	xmm9, xmmword ptr [rip + .LCPI11_7] # xmm9 = [0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]
	.p2align	4, 0x90
.LBB11_183:                             # =>This Inner Loop Header: Depth=1
	movss	xmm6, dword ptr [rdx - 508]     # xmm6 = mem[0],zero,zero,zero
	movss	xmm7, dword ptr [rdx - 504]     # xmm7 = mem[0],zero,zero,zero
	movss	xmm5, dword ptr [rdx - 500]     # xmm5 = mem[0],zero,zero,zero
	movss	xmm4, dword ptr [rdx - 496]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 380], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 252], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 124], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpleps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	insertps	xmm7, dword ptr [rdx - 376], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 248], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 120], 48 # xmm7 = xmm7[0,1,2],mem[0]
	insertps	xmm5, dword ptr [rdx - 372], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 244], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 116], 48 # xmm5 = xmm5[0,1,2],mem[0]
	insertps	xmm4, dword ptr [rdx - 368], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rdx - 240], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rdx - 112], 48 # xmm4 = xmm4[0,1,2],mem[0]
	cmpleps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	movdqa	xmm2, xmm7
	pand	xmm2, xmm15
	psubb	xmm2, xmm7
	movss	xmm7, dword ptr [rdx - 492]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 364], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 236], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 108], 48 # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rdx - 488]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 360], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 232], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 104], 48 # xmm6 = xmm6[0,1,2],mem[0]
	cmpleps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 2
	pand	xmm5, xmm8
	por	xmm5, xmm2
	movss	xmm3, dword ptr [rdx - 484]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 356], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 228], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx - 100], 48 # xmm3 = xmm3[0,1,2],mem[0]
	cmpleps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	pand	xmm4, xmm15
	psllw	xmm4, 3
	pand	xmm4, xmm10
	cmpleps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 4
	pand	xmm7, xmm11
	por	xmm7, xmm4
	movss	xmm4, dword ptr [rdx - 480]     # xmm4 = mem[0],zero,zero,zero
	insertps	xmm4, dword ptr [rdx - 352], 16 # xmm4 = xmm4[0],mem[0],xmm4[2,3]
	insertps	xmm4, dword ptr [rdx - 224], 32 # xmm4 = xmm4[0,1],mem[0],xmm4[3]
	insertps	xmm4, dword ptr [rdx - 96], 48  # xmm4 = xmm4[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm5, dword ptr [rdx - 476]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 348], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 220], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 92], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpleps	xmm5, xmm1
	packssdw	xmm5, xmm5
	cmpleps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpleps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 6
	pand	xmm3, xmm13
	por	xmm3, xmm6
	movss	xmm2, dword ptr [rdx - 472]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 344], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 216], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 88], 48  # xmm2 = xmm2[0,1,2],mem[0]
	packsswb	xmm5, xmm5
	cmpleps	xmm4, xmm1
	packssdw	xmm4, xmm4
	packsswb	xmm4, xmm4
	psllw	xmm4, 7
	pand	xmm4, xmm14
	por	xmm4, xmm3
	movss	xmm3, dword ptr [rdx - 468]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 340], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 212], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm5, xmm15
	insertps	xmm3, dword ptr [rdx - 84], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm4, xmm7
	cmpleps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm7, dword ptr [rdx - 464]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 336], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 208], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 80], 48  # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm5
	movss	xmm5, dword ptr [rdx - 460]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 332], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 204], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 76], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpleps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rdx - 456]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 328], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 200], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 72], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpleps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 3
	pand	xmm7, xmm10
	cmpleps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 4
	pand	xmm5, xmm11
	por	xmm5, xmm7
	movss	xmm2, dword ptr [rdx - 452]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 324], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 196], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 68], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm3
	movss	xmm7, dword ptr [rdx - 448]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 320], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 192], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 64], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpleps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 5
	pand	xmm6, xmm12
	cmpleps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm6
	movss	xmm6, dword ptr [rdx - 444]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 316], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 188], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 60], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpleps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	cmpleps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	psllw	xmm7, 7
	pand	xmm7, xmm14
	por	xmm7, xmm2
	movss	xmm2, dword ptr [rdx - 440]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 312], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 184], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 56], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm7, xmm5
	movss	xmm3, dword ptr [rdx - 436]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 308], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 180], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	pand	xmm6, xmm15
	insertps	xmm3, dword ptr [rdx - 52], 48  # xmm3 = xmm3[0,1,2],mem[0]
	punpckldq	xmm4, xmm7              # xmm4 = xmm4[0],xmm7[0],xmm4[1],xmm7[1]
	cmpleps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm7, xmm2
	pand	xmm7, xmm15
	psubb	xmm7, xmm2
	movss	xmm5, dword ptr [rdx - 432]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 304], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 176], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 48], 48  # xmm5 = xmm5[0,1,2],mem[0]
	por	xmm7, xmm6
	movss	xmm6, dword ptr [rdx - 428]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 300], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 172], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 44], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpleps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm7
	movss	xmm7, dword ptr [rdx - 424]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 296], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 168], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 40], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpleps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	pand	xmm5, xmm15
	psllw	xmm5, 3
	pand	xmm5, xmm10
	cmpleps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm5
	movss	xmm2, dword ptr [rdx - 420]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 292], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 164], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 36], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm5, dword ptr [rdx - 416]     # xmm5 = mem[0],zero,zero,zero
	insertps	xmm5, dword ptr [rdx - 288], 16 # xmm5 = xmm5[0],mem[0],xmm5[2,3]
	insertps	xmm5, dword ptr [rdx - 160], 32 # xmm5 = xmm5[0,1],mem[0],xmm5[3]
	insertps	xmm5, dword ptr [rdx - 32], 48  # xmm5 = xmm5[0,1,2],mem[0]
	cmpleps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpleps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm7, dword ptr [rdx - 412]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 284], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 156], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 28], 48  # xmm7 = xmm7[0,1,2],mem[0]
	cmpleps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	cmpleps	xmm5, xmm1
	packssdw	xmm5, xmm5
	packsswb	xmm5, xmm5
	psllw	xmm5, 7
	pand	xmm5, xmm14
	por	xmm5, xmm2
	movss	xmm2, dword ptr [rdx - 408]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 280], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 152], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	pand	xmm7, xmm15
	insertps	xmm2, dword ptr [rdx - 24], 48  # xmm2 = xmm2[0,1,2],mem[0]
	por	xmm5, xmm6
	cmpleps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	movdqa	xmm6, xmm2
	pand	xmm6, xmm15
	psubb	xmm6, xmm2
	movss	xmm3, dword ptr [rdx - 404]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 276], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 148], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx - 20], 48  # xmm3 = xmm3[0,1,2],mem[0]
	por	xmm6, xmm7
	movss	xmm2, dword ptr [rdx - 400]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 272], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 144], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 16], 48  # xmm2 = xmm2[0,1,2],mem[0]
	cmpleps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	pand	xmm3, xmm15
	psllw	xmm3, 2
	pand	xmm3, xmm8
	por	xmm3, xmm6
	movss	xmm6, dword ptr [rdx - 396]     # xmm6 = mem[0],zero,zero,zero
	insertps	xmm6, dword ptr [rdx - 268], 16 # xmm6 = xmm6[0],mem[0],xmm6[2,3]
	insertps	xmm6, dword ptr [rdx - 140], 32 # xmm6 = xmm6[0,1],mem[0],xmm6[3]
	insertps	xmm6, dword ptr [rdx - 12], 48  # xmm6 = xmm6[0,1,2],mem[0]
	cmpleps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 3
	pand	xmm2, xmm10
	cmpleps	xmm6, xmm1
	packssdw	xmm6, xmm6
	packsswb	xmm6, xmm6
	pand	xmm6, xmm15
	psllw	xmm6, 4
	pand	xmm6, xmm11
	por	xmm6, xmm2
	movss	xmm7, dword ptr [rdx - 392]     # xmm7 = mem[0],zero,zero,zero
	insertps	xmm7, dword ptr [rdx - 264], 16 # xmm7 = xmm7[0],mem[0],xmm7[2,3]
	insertps	xmm7, dword ptr [rdx - 136], 32 # xmm7 = xmm7[0,1],mem[0],xmm7[3]
	insertps	xmm7, dword ptr [rdx - 8], 48   # xmm7 = xmm7[0,1,2],mem[0]
	por	xmm6, xmm3
	movss	xmm2, dword ptr [rdx - 388]     # xmm2 = mem[0],zero,zero,zero
	insertps	xmm2, dword ptr [rdx - 260], 16 # xmm2 = xmm2[0],mem[0],xmm2[2,3]
	insertps	xmm2, dword ptr [rdx - 132], 32 # xmm2 = xmm2[0,1],mem[0],xmm2[3]
	insertps	xmm2, dword ptr [rdx - 4], 48   # xmm2 = xmm2[0,1,2],mem[0]
	cmpleps	xmm7, xmm1
	packssdw	xmm7, xmm7
	packsswb	xmm7, xmm7
	pand	xmm7, xmm15
	psllw	xmm7, 5
	pand	xmm7, xmm12
	cmpleps	xmm2, xmm1
	packssdw	xmm2, xmm2
	packsswb	xmm2, xmm2
	pand	xmm2, xmm15
	psllw	xmm2, 6
	pand	xmm2, xmm13
	por	xmm2, xmm7
	movss	xmm3, dword ptr [rdx - 384]     # xmm3 = mem[0],zero,zero,zero
	insertps	xmm3, dword ptr [rdx - 256], 16 # xmm3 = xmm3[0],mem[0],xmm3[2,3]
	insertps	xmm3, dword ptr [rdx - 128], 32 # xmm3 = xmm3[0,1],mem[0],xmm3[3]
	insertps	xmm3, dword ptr [rdx], 48       # xmm3 = xmm3[0,1,2],mem[0]
	cmpleps	xmm3, xmm1
	packssdw	xmm3, xmm3
	packsswb	xmm3, xmm3
	psllw	xmm3, 7
	pand	xmm3, xmm14
	por	xmm3, xmm2
	por	xmm3, xmm6
	punpckldq	xmm5, xmm3              # xmm5 = xmm5[0],xmm3[0],xmm5[1],xmm3[1]
	punpcklbw	xmm4, xmm5              # xmm4 = xmm4[0],xmm5[0],xmm4[1],xmm5[1],xmm4[2],xmm5[2],xmm4[3],xmm5[3],xmm4[4],xmm5[4],xmm4[5],xmm5[5],xmm4[6],xmm5[6],xmm4[7],xmm5[7]
	pshufb	xmm4, xmm9
	movdqu	xmmword ptr [r15 + 4*rcx], xmm4
	add	rcx, 4
	add	rdx, 512
	cmp	r8, rcx
	jne	.LBB11_183
# %bb.184:
	cmp	r10, r8
	jne	.LBB11_185
	jmp	.LBB11_188
.Lfunc_end11:
	.size	comparison_greater_equal_scalar_arr_sse4, .Lfunc_end11-comparison_greater_equal_scalar_arr_sse4
                                        # -- End function
	.ident	"Ubuntu clang version 11.1.0-6"
	.section	".note.GNU-stack","",@progbits
	.addrsig
