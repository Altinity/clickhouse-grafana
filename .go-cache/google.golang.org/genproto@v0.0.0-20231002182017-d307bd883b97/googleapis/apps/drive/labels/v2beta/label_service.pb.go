// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.1
// source: google/apps/drive/labels/v2beta/label_service.proto

package labels

import (
	context "context"
	reflect "reflect"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_google_apps_drive_labels_v2beta_label_service_proto protoreflect.FileDescriptor

var file_google_apps_drive_labels_v2beta_label_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe3, 0x1c, 0x0a,
	0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb9, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a,
	0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x91, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x22, 0x0e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x3a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xda, 0x41, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0xb8, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xb9,
	0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f,
	0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x3a, 0x01, 0x2a, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x3a, 0x01, 0x2a, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9f, 0x01, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x31, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9c,
	0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x80, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c,
	0x12, 0x25, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xda, 0x41, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xac, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x80, 0x01, 0x22, 0x25, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5a, 0x45, 0x22, 0x31, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xda, 0x41, 0x17, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x2c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x80, 0x01, 0x32, 0x25, 0x2f, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5a, 0x45, 0x32, 0x31, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x2f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0xd9, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x2a, 0x25, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x5a, 0x33, 0x2a, 0x31, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xb4,
	0x02, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x7a, 0x22, 0x31, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x42, 0x22, 0x3d, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0xda, 0x41, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x86, 0x02, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x89, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x22, 0x31, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x5a, 0x42, 0x22, 0x3d, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x3a, 0x01, 0x2a, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xe2,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x1f, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5a, 0x2d, 0x12, 0x2b, 0x2f,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x1a, 0x1d, 0xca, 0x41, 0x1a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x42, 0x88, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x42, 0x11, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xa2, 0x02, 0x04, 0x44, 0x4c, 0x42, 0x4c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_google_apps_drive_labels_v2beta_label_service_proto_goTypes = []interface{}{
	(*GetUserCapabilitiesRequest)(nil),          // 0: google.apps.drive.labels.v2beta.GetUserCapabilitiesRequest
	(*ListLabelsRequest)(nil),                   // 1: google.apps.drive.labels.v2beta.ListLabelsRequest
	(*GetLabelRequest)(nil),                     // 2: google.apps.drive.labels.v2beta.GetLabelRequest
	(*GetLabelLimitsRequest)(nil),               // 3: google.apps.drive.labels.v2beta.GetLabelLimitsRequest
	(*CreateLabelRequest)(nil),                  // 4: google.apps.drive.labels.v2beta.CreateLabelRequest
	(*DeltaUpdateLabelRequest)(nil),             // 5: google.apps.drive.labels.v2beta.DeltaUpdateLabelRequest
	(*UpdateLabelCopyModeRequest)(nil),          // 6: google.apps.drive.labels.v2beta.UpdateLabelCopyModeRequest
	(*PublishLabelRequest)(nil),                 // 7: google.apps.drive.labels.v2beta.PublishLabelRequest
	(*DisableLabelRequest)(nil),                 // 8: google.apps.drive.labels.v2beta.DisableLabelRequest
	(*EnableLabelRequest)(nil),                  // 9: google.apps.drive.labels.v2beta.EnableLabelRequest
	(*DeleteLabelRequest)(nil),                  // 10: google.apps.drive.labels.v2beta.DeleteLabelRequest
	(*ListLabelPermissionsRequest)(nil),         // 11: google.apps.drive.labels.v2beta.ListLabelPermissionsRequest
	(*CreateLabelPermissionRequest)(nil),        // 12: google.apps.drive.labels.v2beta.CreateLabelPermissionRequest
	(*UpdateLabelPermissionRequest)(nil),        // 13: google.apps.drive.labels.v2beta.UpdateLabelPermissionRequest
	(*DeleteLabelPermissionRequest)(nil),        // 14: google.apps.drive.labels.v2beta.DeleteLabelPermissionRequest
	(*BatchUpdateLabelPermissionsRequest)(nil),  // 15: google.apps.drive.labels.v2beta.BatchUpdateLabelPermissionsRequest
	(*BatchDeleteLabelPermissionsRequest)(nil),  // 16: google.apps.drive.labels.v2beta.BatchDeleteLabelPermissionsRequest
	(*ListLabelLocksRequest)(nil),               // 17: google.apps.drive.labels.v2beta.ListLabelLocksRequest
	(*UserCapabilities)(nil),                    // 18: google.apps.drive.labels.v2beta.UserCapabilities
	(*ListLabelsResponse)(nil),                  // 19: google.apps.drive.labels.v2beta.ListLabelsResponse
	(*Label)(nil),                               // 20: google.apps.drive.labels.v2beta.Label
	(*LabelLimits)(nil),                         // 21: google.apps.drive.labels.v2beta.LabelLimits
	(*DeltaUpdateLabelResponse)(nil),            // 22: google.apps.drive.labels.v2beta.DeltaUpdateLabelResponse
	(*emptypb.Empty)(nil),                       // 23: google.protobuf.Empty
	(*ListLabelPermissionsResponse)(nil),        // 24: google.apps.drive.labels.v2beta.ListLabelPermissionsResponse
	(*LabelPermission)(nil),                     // 25: google.apps.drive.labels.v2beta.LabelPermission
	(*BatchUpdateLabelPermissionsResponse)(nil), // 26: google.apps.drive.labels.v2beta.BatchUpdateLabelPermissionsResponse
	(*ListLabelLocksResponse)(nil),              // 27: google.apps.drive.labels.v2beta.ListLabelLocksResponse
}
var file_google_apps_drive_labels_v2beta_label_service_proto_depIdxs = []int32{
	0,  // 0: google.apps.drive.labels.v2beta.LabelService.GetUserCapabilities:input_type -> google.apps.drive.labels.v2beta.GetUserCapabilitiesRequest
	1,  // 1: google.apps.drive.labels.v2beta.LabelService.ListLabels:input_type -> google.apps.drive.labels.v2beta.ListLabelsRequest
	2,  // 2: google.apps.drive.labels.v2beta.LabelService.GetLabel:input_type -> google.apps.drive.labels.v2beta.GetLabelRequest
	3,  // 3: google.apps.drive.labels.v2beta.LabelService.GetLabelLimits:input_type -> google.apps.drive.labels.v2beta.GetLabelLimitsRequest
	4,  // 4: google.apps.drive.labels.v2beta.LabelService.CreateLabel:input_type -> google.apps.drive.labels.v2beta.CreateLabelRequest
	5,  // 5: google.apps.drive.labels.v2beta.LabelService.DeltaUpdateLabel:input_type -> google.apps.drive.labels.v2beta.DeltaUpdateLabelRequest
	6,  // 6: google.apps.drive.labels.v2beta.LabelService.UpdateLabelCopyMode:input_type -> google.apps.drive.labels.v2beta.UpdateLabelCopyModeRequest
	7,  // 7: google.apps.drive.labels.v2beta.LabelService.PublishLabel:input_type -> google.apps.drive.labels.v2beta.PublishLabelRequest
	8,  // 8: google.apps.drive.labels.v2beta.LabelService.DisableLabel:input_type -> google.apps.drive.labels.v2beta.DisableLabelRequest
	9,  // 9: google.apps.drive.labels.v2beta.LabelService.EnableLabel:input_type -> google.apps.drive.labels.v2beta.EnableLabelRequest
	10, // 10: google.apps.drive.labels.v2beta.LabelService.DeleteLabel:input_type -> google.apps.drive.labels.v2beta.DeleteLabelRequest
	11, // 11: google.apps.drive.labels.v2beta.LabelService.ListLabelPermissions:input_type -> google.apps.drive.labels.v2beta.ListLabelPermissionsRequest
	12, // 12: google.apps.drive.labels.v2beta.LabelService.CreateLabelPermission:input_type -> google.apps.drive.labels.v2beta.CreateLabelPermissionRequest
	13, // 13: google.apps.drive.labels.v2beta.LabelService.UpdateLabelPermission:input_type -> google.apps.drive.labels.v2beta.UpdateLabelPermissionRequest
	14, // 14: google.apps.drive.labels.v2beta.LabelService.DeleteLabelPermission:input_type -> google.apps.drive.labels.v2beta.DeleteLabelPermissionRequest
	15, // 15: google.apps.drive.labels.v2beta.LabelService.BatchUpdateLabelPermissions:input_type -> google.apps.drive.labels.v2beta.BatchUpdateLabelPermissionsRequest
	16, // 16: google.apps.drive.labels.v2beta.LabelService.BatchDeleteLabelPermissions:input_type -> google.apps.drive.labels.v2beta.BatchDeleteLabelPermissionsRequest
	17, // 17: google.apps.drive.labels.v2beta.LabelService.ListLabelLocks:input_type -> google.apps.drive.labels.v2beta.ListLabelLocksRequest
	18, // 18: google.apps.drive.labels.v2beta.LabelService.GetUserCapabilities:output_type -> google.apps.drive.labels.v2beta.UserCapabilities
	19, // 19: google.apps.drive.labels.v2beta.LabelService.ListLabels:output_type -> google.apps.drive.labels.v2beta.ListLabelsResponse
	20, // 20: google.apps.drive.labels.v2beta.LabelService.GetLabel:output_type -> google.apps.drive.labels.v2beta.Label
	21, // 21: google.apps.drive.labels.v2beta.LabelService.GetLabelLimits:output_type -> google.apps.drive.labels.v2beta.LabelLimits
	20, // 22: google.apps.drive.labels.v2beta.LabelService.CreateLabel:output_type -> google.apps.drive.labels.v2beta.Label
	22, // 23: google.apps.drive.labels.v2beta.LabelService.DeltaUpdateLabel:output_type -> google.apps.drive.labels.v2beta.DeltaUpdateLabelResponse
	20, // 24: google.apps.drive.labels.v2beta.LabelService.UpdateLabelCopyMode:output_type -> google.apps.drive.labels.v2beta.Label
	20, // 25: google.apps.drive.labels.v2beta.LabelService.PublishLabel:output_type -> google.apps.drive.labels.v2beta.Label
	20, // 26: google.apps.drive.labels.v2beta.LabelService.DisableLabel:output_type -> google.apps.drive.labels.v2beta.Label
	20, // 27: google.apps.drive.labels.v2beta.LabelService.EnableLabel:output_type -> google.apps.drive.labels.v2beta.Label
	23, // 28: google.apps.drive.labels.v2beta.LabelService.DeleteLabel:output_type -> google.protobuf.Empty
	24, // 29: google.apps.drive.labels.v2beta.LabelService.ListLabelPermissions:output_type -> google.apps.drive.labels.v2beta.ListLabelPermissionsResponse
	25, // 30: google.apps.drive.labels.v2beta.LabelService.CreateLabelPermission:output_type -> google.apps.drive.labels.v2beta.LabelPermission
	25, // 31: google.apps.drive.labels.v2beta.LabelService.UpdateLabelPermission:output_type -> google.apps.drive.labels.v2beta.LabelPermission
	23, // 32: google.apps.drive.labels.v2beta.LabelService.DeleteLabelPermission:output_type -> google.protobuf.Empty
	26, // 33: google.apps.drive.labels.v2beta.LabelService.BatchUpdateLabelPermissions:output_type -> google.apps.drive.labels.v2beta.BatchUpdateLabelPermissionsResponse
	23, // 34: google.apps.drive.labels.v2beta.LabelService.BatchDeleteLabelPermissions:output_type -> google.protobuf.Empty
	27, // 35: google.apps.drive.labels.v2beta.LabelService.ListLabelLocks:output_type -> google.apps.drive.labels.v2beta.ListLabelLocksResponse
	18, // [18:36] is the sub-list for method output_type
	0,  // [0:18] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_google_apps_drive_labels_v2beta_label_service_proto_init() }
func file_google_apps_drive_labels_v2beta_label_service_proto_init() {
	if File_google_apps_drive_labels_v2beta_label_service_proto != nil {
		return
	}
	file_google_apps_drive_labels_v2beta_label_proto_init()
	file_google_apps_drive_labels_v2beta_label_limits_proto_init()
	file_google_apps_drive_labels_v2beta_label_permission_proto_init()
	file_google_apps_drive_labels_v2beta_requests_proto_init()
	file_google_apps_drive_labels_v2beta_user_capabilities_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_apps_drive_labels_v2beta_label_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_apps_drive_labels_v2beta_label_service_proto_goTypes,
		DependencyIndexes: file_google_apps_drive_labels_v2beta_label_service_proto_depIdxs,
	}.Build()
	File_google_apps_drive_labels_v2beta_label_service_proto = out.File
	file_google_apps_drive_labels_v2beta_label_service_proto_rawDesc = nil
	file_google_apps_drive_labels_v2beta_label_service_proto_goTypes = nil
	file_google_apps_drive_labels_v2beta_label_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LabelServiceClient is the client API for LabelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LabelServiceClient interface {
	// Gets the user capabilities.
	GetUserCapabilities(ctx context.Context, in *GetUserCapabilitiesRequest, opts ...grpc.CallOption) (*UserCapabilities, error)
	// List labels.
	ListLabels(ctx context.Context, in *ListLabelsRequest, opts ...grpc.CallOption) (*ListLabelsResponse, error)
	// Get a label by its resource name.
	// Resource name may be any of:
	//
	//   - `labels/{id}` - See `labels/{id}@latest`
	//   - `labels/{id}@latest` - Gets the latest revision of the label.
	//   - `labels/{id}@published` - Gets the current published revision of the
	//     label.
	//   - `labels/{id}@{revision_id}` - Gets the label at the specified revision
	//     ID.
	GetLabel(ctx context.Context, in *GetLabelRequest, opts ...grpc.CallOption) (*Label, error)
	// Get the constraints on the structure of a Label; such as, the maximum
	// number of Fields allowed and maximum length of the label title.
	GetLabelLimits(ctx context.Context, in *GetLabelLimitsRequest, opts ...grpc.CallOption) (*LabelLimits, error)
	// Creates a new Label.
	CreateLabel(ctx context.Context, in *CreateLabelRequest, opts ...grpc.CallOption) (*Label, error)
	// Updates a single Label by applying a set of update requests resulting in a
	// new draft revision. The batch update is all-or-nothing: If any of the
	// update requests are invalid, no changes are applied. The resulting draft
	// revision must be published before the changes may be used with Drive Items.
	DeltaUpdateLabel(ctx context.Context, in *DeltaUpdateLabelRequest, opts ...grpc.CallOption) (*DeltaUpdateLabelResponse, error)
	// Updates a Label's `CopyMode`. Changes to this policy are not revisioned, do
	// not require publishing, and take effect immediately.
	UpdateLabelCopyMode(ctx context.Context, in *UpdateLabelCopyModeRequest, opts ...grpc.CallOption) (*Label, error)
	// Publish all draft changes to the Label. Once published, the Label may not
	// return to its draft state. See
	// `google.apps.drive.labels.v2.Lifecycle` for more information.
	//
	// Publishing a Label will result in a new published revision. All previous
	// draft revisions will be deleted. Previous published revisions will be kept
	// but are subject to automated deletion as needed.
	//
	// Once published, some changes are no longer permitted. Generally, any change
	// that would invalidate or cause new restrictions on existing metadata
	// related to the Label will be rejected. For example, the following changes
	// to a Label will be rejected after the Label is published:
	//   - The label cannot be directly deleted. It must be disabled first, then
	//     deleted.
	//   - Field.FieldType cannot be changed.
	//   - Changes to Field validation options cannot reject something that was
	//     previously accepted.
	//   - Reducing the max entries.
	PublishLabel(ctx context.Context, in *PublishLabelRequest, opts ...grpc.CallOption) (*Label, error)
	// Disable a published Label.
	// Disabling a Label will result in a new disabled published revision based on
	// the current published revision. If there is a draft revision, a new
	// disabled draft revision will be created based on the latest draft revision.
	// Older draft revisions will be deleted.
	//
	// Once disabled, a label may be deleted with `DeleteLabel`.
	DisableLabel(ctx context.Context, in *DisableLabelRequest, opts ...grpc.CallOption) (*Label, error)
	// Enable a disabled Label and restore it to its published state.
	// This will result in a new published revision based on the current disabled
	// published revision. If there is an existing disabled draft revision, a new
	// revision will be created based on that draft and will be enabled.
	EnableLabel(ctx context.Context, in *EnableLabelRequest, opts ...grpc.CallOption) (*Label, error)
	// Permanently deletes a Label and related metadata on Drive Items.
	//
	// Once deleted, the Label and related Drive item metadata will be deleted.
	// Only draft Labels, and disabled Labels may be deleted.
	DeleteLabel(ctx context.Context, in *DeleteLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists a Label's permissions.
	ListLabelPermissions(ctx context.Context, in *ListLabelPermissionsRequest, opts ...grpc.CallOption) (*ListLabelPermissionsResponse, error)
	// Updates a Label's permissions. If a permission for the indicated principal
	// doesn't exist, a new Label Permission is created, otherwise the existing
	// permission is updated. Permissions affect the Label resource as a whole,
	// are not revisioned, and do not require publishing.
	CreateLabelPermission(ctx context.Context, in *CreateLabelPermissionRequest, opts ...grpc.CallOption) (*LabelPermission, error)
	// Updates a Label's permissions. If a permission for the indicated principal
	// doesn't exist, a new Label Permission is created, otherwise the existing
	// permission is updated. Permissions affect the Label resource as a whole,
	// are not revisioned, and do not require publishing.
	UpdateLabelPermission(ctx context.Context, in *UpdateLabelPermissionRequest, opts ...grpc.CallOption) (*LabelPermission, error)
	// Deletes a Label's permission. Permissions affect the Label resource as a
	// whole, are not revisioned, and do not require publishing.
	DeleteLabelPermission(ctx context.Context, in *DeleteLabelPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates Label permissions. If a permission for the
	// indicated principal doesn't exist, a new Label Permission is created,
	// otherwise the existing permission is updated. Permissions affect the Label
	// resource as a whole, are not revisioned, and do not require publishing.
	BatchUpdateLabelPermissions(ctx context.Context, in *BatchUpdateLabelPermissionsRequest, opts ...grpc.CallOption) (*BatchUpdateLabelPermissionsResponse, error)
	// Deletes Label permissions. Permissions affect the Label resource as a
	// whole, are not revisioned, and do not require publishing.
	BatchDeleteLabelPermissions(ctx context.Context, in *BatchDeleteLabelPermissionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists the LabelLocks on a Label.
	ListLabelLocks(ctx context.Context, in *ListLabelLocksRequest, opts ...grpc.CallOption) (*ListLabelLocksResponse, error)
}

type labelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelServiceClient(cc grpc.ClientConnInterface) LabelServiceClient {
	return &labelServiceClient{cc}
}

func (c *labelServiceClient) GetUserCapabilities(ctx context.Context, in *GetUserCapabilitiesRequest, opts ...grpc.CallOption) (*UserCapabilities, error) {
	out := new(UserCapabilities)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/GetUserCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) ListLabels(ctx context.Context, in *ListLabelsRequest, opts ...grpc.CallOption) (*ListLabelsResponse, error) {
	out := new(ListLabelsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/ListLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) GetLabel(ctx context.Context, in *GetLabelRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/GetLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) GetLabelLimits(ctx context.Context, in *GetLabelLimitsRequest, opts ...grpc.CallOption) (*LabelLimits, error) {
	out := new(LabelLimits)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/GetLabelLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) CreateLabel(ctx context.Context, in *CreateLabelRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/CreateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) DeltaUpdateLabel(ctx context.Context, in *DeltaUpdateLabelRequest, opts ...grpc.CallOption) (*DeltaUpdateLabelResponse, error) {
	out := new(DeltaUpdateLabelResponse)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/DeltaUpdateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) UpdateLabelCopyMode(ctx context.Context, in *UpdateLabelCopyModeRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/UpdateLabelCopyMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) PublishLabel(ctx context.Context, in *PublishLabelRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/PublishLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) DisableLabel(ctx context.Context, in *DisableLabelRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/DisableLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) EnableLabel(ctx context.Context, in *EnableLabelRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/EnableLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) DeleteLabel(ctx context.Context, in *DeleteLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/DeleteLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) ListLabelPermissions(ctx context.Context, in *ListLabelPermissionsRequest, opts ...grpc.CallOption) (*ListLabelPermissionsResponse, error) {
	out := new(ListLabelPermissionsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/ListLabelPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) CreateLabelPermission(ctx context.Context, in *CreateLabelPermissionRequest, opts ...grpc.CallOption) (*LabelPermission, error) {
	out := new(LabelPermission)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/CreateLabelPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) UpdateLabelPermission(ctx context.Context, in *UpdateLabelPermissionRequest, opts ...grpc.CallOption) (*LabelPermission, error) {
	out := new(LabelPermission)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/UpdateLabelPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) DeleteLabelPermission(ctx context.Context, in *DeleteLabelPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/DeleteLabelPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) BatchUpdateLabelPermissions(ctx context.Context, in *BatchUpdateLabelPermissionsRequest, opts ...grpc.CallOption) (*BatchUpdateLabelPermissionsResponse, error) {
	out := new(BatchUpdateLabelPermissionsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/BatchUpdateLabelPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) BatchDeleteLabelPermissions(ctx context.Context, in *BatchDeleteLabelPermissionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/BatchDeleteLabelPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelServiceClient) ListLabelLocks(ctx context.Context, in *ListLabelLocksRequest, opts ...grpc.CallOption) (*ListLabelLocksResponse, error) {
	out := new(ListLabelLocksResponse)
	err := c.cc.Invoke(ctx, "/google.apps.drive.labels.v2beta.LabelService/ListLabelLocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelServiceServer is the server API for LabelService service.
type LabelServiceServer interface {
	// Gets the user capabilities.
	GetUserCapabilities(context.Context, *GetUserCapabilitiesRequest) (*UserCapabilities, error)
	// List labels.
	ListLabels(context.Context, *ListLabelsRequest) (*ListLabelsResponse, error)
	// Get a label by its resource name.
	// Resource name may be any of:
	//
	//   - `labels/{id}` - See `labels/{id}@latest`
	//   - `labels/{id}@latest` - Gets the latest revision of the label.
	//   - `labels/{id}@published` - Gets the current published revision of the
	//     label.
	//   - `labels/{id}@{revision_id}` - Gets the label at the specified revision
	//     ID.
	GetLabel(context.Context, *GetLabelRequest) (*Label, error)
	// Get the constraints on the structure of a Label; such as, the maximum
	// number of Fields allowed and maximum length of the label title.
	GetLabelLimits(context.Context, *GetLabelLimitsRequest) (*LabelLimits, error)
	// Creates a new Label.
	CreateLabel(context.Context, *CreateLabelRequest) (*Label, error)
	// Updates a single Label by applying a set of update requests resulting in a
	// new draft revision. The batch update is all-or-nothing: If any of the
	// update requests are invalid, no changes are applied. The resulting draft
	// revision must be published before the changes may be used with Drive Items.
	DeltaUpdateLabel(context.Context, *DeltaUpdateLabelRequest) (*DeltaUpdateLabelResponse, error)
	// Updates a Label's `CopyMode`. Changes to this policy are not revisioned, do
	// not require publishing, and take effect immediately.
	UpdateLabelCopyMode(context.Context, *UpdateLabelCopyModeRequest) (*Label, error)
	// Publish all draft changes to the Label. Once published, the Label may not
	// return to its draft state. See
	// `google.apps.drive.labels.v2.Lifecycle` for more information.
	//
	// Publishing a Label will result in a new published revision. All previous
	// draft revisions will be deleted. Previous published revisions will be kept
	// but are subject to automated deletion as needed.
	//
	// Once published, some changes are no longer permitted. Generally, any change
	// that would invalidate or cause new restrictions on existing metadata
	// related to the Label will be rejected. For example, the following changes
	// to a Label will be rejected after the Label is published:
	//   - The label cannot be directly deleted. It must be disabled first, then
	//     deleted.
	//   - Field.FieldType cannot be changed.
	//   - Changes to Field validation options cannot reject something that was
	//     previously accepted.
	//   - Reducing the max entries.
	PublishLabel(context.Context, *PublishLabelRequest) (*Label, error)
	// Disable a published Label.
	// Disabling a Label will result in a new disabled published revision based on
	// the current published revision. If there is a draft revision, a new
	// disabled draft revision will be created based on the latest draft revision.
	// Older draft revisions will be deleted.
	//
	// Once disabled, a label may be deleted with `DeleteLabel`.
	DisableLabel(context.Context, *DisableLabelRequest) (*Label, error)
	// Enable a disabled Label and restore it to its published state.
	// This will result in a new published revision based on the current disabled
	// published revision. If there is an existing disabled draft revision, a new
	// revision will be created based on that draft and will be enabled.
	EnableLabel(context.Context, *EnableLabelRequest) (*Label, error)
	// Permanently deletes a Label and related metadata on Drive Items.
	//
	// Once deleted, the Label and related Drive item metadata will be deleted.
	// Only draft Labels, and disabled Labels may be deleted.
	DeleteLabel(context.Context, *DeleteLabelRequest) (*emptypb.Empty, error)
	// Lists a Label's permissions.
	ListLabelPermissions(context.Context, *ListLabelPermissionsRequest) (*ListLabelPermissionsResponse, error)
	// Updates a Label's permissions. If a permission for the indicated principal
	// doesn't exist, a new Label Permission is created, otherwise the existing
	// permission is updated. Permissions affect the Label resource as a whole,
	// are not revisioned, and do not require publishing.
	CreateLabelPermission(context.Context, *CreateLabelPermissionRequest) (*LabelPermission, error)
	// Updates a Label's permissions. If a permission for the indicated principal
	// doesn't exist, a new Label Permission is created, otherwise the existing
	// permission is updated. Permissions affect the Label resource as a whole,
	// are not revisioned, and do not require publishing.
	UpdateLabelPermission(context.Context, *UpdateLabelPermissionRequest) (*LabelPermission, error)
	// Deletes a Label's permission. Permissions affect the Label resource as a
	// whole, are not revisioned, and do not require publishing.
	DeleteLabelPermission(context.Context, *DeleteLabelPermissionRequest) (*emptypb.Empty, error)
	// Updates Label permissions. If a permission for the
	// indicated principal doesn't exist, a new Label Permission is created,
	// otherwise the existing permission is updated. Permissions affect the Label
	// resource as a whole, are not revisioned, and do not require publishing.
	BatchUpdateLabelPermissions(context.Context, *BatchUpdateLabelPermissionsRequest) (*BatchUpdateLabelPermissionsResponse, error)
	// Deletes Label permissions. Permissions affect the Label resource as a
	// whole, are not revisioned, and do not require publishing.
	BatchDeleteLabelPermissions(context.Context, *BatchDeleteLabelPermissionsRequest) (*emptypb.Empty, error)
	// Lists the LabelLocks on a Label.
	ListLabelLocks(context.Context, *ListLabelLocksRequest) (*ListLabelLocksResponse, error)
}

// UnimplementedLabelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLabelServiceServer struct {
}

func (*UnimplementedLabelServiceServer) GetUserCapabilities(context.Context, *GetUserCapabilitiesRequest) (*UserCapabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCapabilities not implemented")
}
func (*UnimplementedLabelServiceServer) ListLabels(context.Context, *ListLabelsRequest) (*ListLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}
func (*UnimplementedLabelServiceServer) GetLabel(context.Context, *GetLabelRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabel not implemented")
}
func (*UnimplementedLabelServiceServer) GetLabelLimits(context.Context, *GetLabelLimitsRequest) (*LabelLimits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelLimits not implemented")
}
func (*UnimplementedLabelServiceServer) CreateLabel(context.Context, *CreateLabelRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabel not implemented")
}
func (*UnimplementedLabelServiceServer) DeltaUpdateLabel(context.Context, *DeltaUpdateLabelRequest) (*DeltaUpdateLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeltaUpdateLabel not implemented")
}
func (*UnimplementedLabelServiceServer) UpdateLabelCopyMode(context.Context, *UpdateLabelCopyModeRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelCopyMode not implemented")
}
func (*UnimplementedLabelServiceServer) PublishLabel(context.Context, *PublishLabelRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLabel not implemented")
}
func (*UnimplementedLabelServiceServer) DisableLabel(context.Context, *DisableLabelRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableLabel not implemented")
}
func (*UnimplementedLabelServiceServer) EnableLabel(context.Context, *EnableLabelRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableLabel not implemented")
}
func (*UnimplementedLabelServiceServer) DeleteLabel(context.Context, *DeleteLabelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (*UnimplementedLabelServiceServer) ListLabelPermissions(context.Context, *ListLabelPermissionsRequest) (*ListLabelPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabelPermissions not implemented")
}
func (*UnimplementedLabelServiceServer) CreateLabelPermission(context.Context, *CreateLabelPermissionRequest) (*LabelPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabelPermission not implemented")
}
func (*UnimplementedLabelServiceServer) UpdateLabelPermission(context.Context, *UpdateLabelPermissionRequest) (*LabelPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelPermission not implemented")
}
func (*UnimplementedLabelServiceServer) DeleteLabelPermission(context.Context, *DeleteLabelPermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabelPermission not implemented")
}
func (*UnimplementedLabelServiceServer) BatchUpdateLabelPermissions(context.Context, *BatchUpdateLabelPermissionsRequest) (*BatchUpdateLabelPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateLabelPermissions not implemented")
}
func (*UnimplementedLabelServiceServer) BatchDeleteLabelPermissions(context.Context, *BatchDeleteLabelPermissionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteLabelPermissions not implemented")
}
func (*UnimplementedLabelServiceServer) ListLabelLocks(context.Context, *ListLabelLocksRequest) (*ListLabelLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabelLocks not implemented")
}

func RegisterLabelServiceServer(s *grpc.Server, srv LabelServiceServer) {
	s.RegisterService(&_LabelService_serviceDesc, srv)
}

func _LabelService_GetUserCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).GetUserCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/GetUserCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).GetUserCapabilities(ctx, req.(*GetUserCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/ListLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).ListLabels(ctx, req.(*ListLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_GetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).GetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/GetLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).GetLabel(ctx, req.(*GetLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_GetLabelLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).GetLabelLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/GetLabelLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).GetLabelLimits(ctx, req.(*GetLabelLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_CreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).CreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/CreateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).CreateLabel(ctx, req.(*CreateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_DeltaUpdateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeltaUpdateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).DeltaUpdateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/DeltaUpdateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).DeltaUpdateLabel(ctx, req.(*DeltaUpdateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_UpdateLabelCopyMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelCopyModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).UpdateLabelCopyMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/UpdateLabelCopyMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).UpdateLabelCopyMode(ctx, req.(*UpdateLabelCopyModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_PublishLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).PublishLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/PublishLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).PublishLabel(ctx, req.(*PublishLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_DisableLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).DisableLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/DisableLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).DisableLabel(ctx, req.(*DisableLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_EnableLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).EnableLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/EnableLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).EnableLabel(ctx, req.(*EnableLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/DeleteLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).DeleteLabel(ctx, req.(*DeleteLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_ListLabelPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).ListLabelPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/ListLabelPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).ListLabelPermissions(ctx, req.(*ListLabelPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_CreateLabelPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).CreateLabelPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/CreateLabelPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).CreateLabelPermission(ctx, req.(*CreateLabelPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_UpdateLabelPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).UpdateLabelPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/UpdateLabelPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).UpdateLabelPermission(ctx, req.(*UpdateLabelPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_DeleteLabelPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).DeleteLabelPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/DeleteLabelPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).DeleteLabelPermission(ctx, req.(*DeleteLabelPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_BatchUpdateLabelPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateLabelPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).BatchUpdateLabelPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/BatchUpdateLabelPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).BatchUpdateLabelPermissions(ctx, req.(*BatchUpdateLabelPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_BatchDeleteLabelPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteLabelPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).BatchDeleteLabelPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/BatchDeleteLabelPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).BatchDeleteLabelPermissions(ctx, req.(*BatchDeleteLabelPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelService_ListLabelLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServiceServer).ListLabelLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.drive.labels.v2beta.LabelService/ListLabelLocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServiceServer).ListLabelLocks(ctx, req.(*ListLabelLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LabelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.drive.labels.v2beta.LabelService",
	HandlerType: (*LabelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserCapabilities",
			Handler:    _LabelService_GetUserCapabilities_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _LabelService_ListLabels_Handler,
		},
		{
			MethodName: "GetLabel",
			Handler:    _LabelService_GetLabel_Handler,
		},
		{
			MethodName: "GetLabelLimits",
			Handler:    _LabelService_GetLabelLimits_Handler,
		},
		{
			MethodName: "CreateLabel",
			Handler:    _LabelService_CreateLabel_Handler,
		},
		{
			MethodName: "DeltaUpdateLabel",
			Handler:    _LabelService_DeltaUpdateLabel_Handler,
		},
		{
			MethodName: "UpdateLabelCopyMode",
			Handler:    _LabelService_UpdateLabelCopyMode_Handler,
		},
		{
			MethodName: "PublishLabel",
			Handler:    _LabelService_PublishLabel_Handler,
		},
		{
			MethodName: "DisableLabel",
			Handler:    _LabelService_DisableLabel_Handler,
		},
		{
			MethodName: "EnableLabel",
			Handler:    _LabelService_EnableLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _LabelService_DeleteLabel_Handler,
		},
		{
			MethodName: "ListLabelPermissions",
			Handler:    _LabelService_ListLabelPermissions_Handler,
		},
		{
			MethodName: "CreateLabelPermission",
			Handler:    _LabelService_CreateLabelPermission_Handler,
		},
		{
			MethodName: "UpdateLabelPermission",
			Handler:    _LabelService_UpdateLabelPermission_Handler,
		},
		{
			MethodName: "DeleteLabelPermission",
			Handler:    _LabelService_DeleteLabelPermission_Handler,
		},
		{
			MethodName: "BatchUpdateLabelPermissions",
			Handler:    _LabelService_BatchUpdateLabelPermissions_Handler,
		},
		{
			MethodName: "BatchDeleteLabelPermissions",
			Handler:    _LabelService_BatchDeleteLabelPermissions_Handler,
		},
		{
			MethodName: "ListLabelLocks",
			Handler:    _LabelService_ListLabelLocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/drive/labels/v2beta/label_service.proto",
}
