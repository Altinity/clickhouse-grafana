// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.2
// source: google/cloud/bigquery/dataexchange/common/common.proto

package common

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Listing categories.
type Category int32

const (
	Category_CATEGORY_UNSPECIFIED                  Category = 0
	Category_CATEGORY_OTHERS                       Category = 1
	Category_CATEGORY_ADVERTISING_AND_MARKETING    Category = 2
	Category_CATEGORY_COMMERCE                     Category = 3
	Category_CATEGORY_CLIMATE_AND_ENVIRONMENT      Category = 4
	Category_CATEGORY_DEMOGRAPHICS                 Category = 5
	Category_CATEGORY_ECONOMICS                    Category = 6
	Category_CATEGORY_EDUCATION                    Category = 7
	Category_CATEGORY_ENERGY                       Category = 8
	Category_CATEGORY_FINANCIAL                    Category = 9
	Category_CATEGORY_GAMING                       Category = 10
	Category_CATEGORY_GEOSPATIAL                   Category = 11
	Category_CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE  Category = 12
	Category_CATEGORY_MEDIA                        Category = 13
	Category_CATEGORY_PUBLIC_SECTOR                Category = 14
	Category_CATEGORY_RETAIL                       Category = 15
	Category_CATEGORY_SPORTS                       Category = 16
	Category_CATEGORY_SCIENCE_AND_RESEARCH         Category = 17
	Category_CATEGORY_TRANSPORTATION_AND_LOGISTICS Category = 18
	Category_CATEGORY_TRAVEL_AND_TOURISM           Category = 19
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0:  "CATEGORY_UNSPECIFIED",
		1:  "CATEGORY_OTHERS",
		2:  "CATEGORY_ADVERTISING_AND_MARKETING",
		3:  "CATEGORY_COMMERCE",
		4:  "CATEGORY_CLIMATE_AND_ENVIRONMENT",
		5:  "CATEGORY_DEMOGRAPHICS",
		6:  "CATEGORY_ECONOMICS",
		7:  "CATEGORY_EDUCATION",
		8:  "CATEGORY_ENERGY",
		9:  "CATEGORY_FINANCIAL",
		10: "CATEGORY_GAMING",
		11: "CATEGORY_GEOSPATIAL",
		12: "CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE",
		13: "CATEGORY_MEDIA",
		14: "CATEGORY_PUBLIC_SECTOR",
		15: "CATEGORY_RETAIL",
		16: "CATEGORY_SPORTS",
		17: "CATEGORY_SCIENCE_AND_RESEARCH",
		18: "CATEGORY_TRANSPORTATION_AND_LOGISTICS",
		19: "CATEGORY_TRAVEL_AND_TOURISM",
	}
	Category_value = map[string]int32{
		"CATEGORY_UNSPECIFIED":                  0,
		"CATEGORY_OTHERS":                       1,
		"CATEGORY_ADVERTISING_AND_MARKETING":    2,
		"CATEGORY_COMMERCE":                     3,
		"CATEGORY_CLIMATE_AND_ENVIRONMENT":      4,
		"CATEGORY_DEMOGRAPHICS":                 5,
		"CATEGORY_ECONOMICS":                    6,
		"CATEGORY_EDUCATION":                    7,
		"CATEGORY_ENERGY":                       8,
		"CATEGORY_FINANCIAL":                    9,
		"CATEGORY_GAMING":                       10,
		"CATEGORY_GEOSPATIAL":                   11,
		"CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE":  12,
		"CATEGORY_MEDIA":                        13,
		"CATEGORY_PUBLIC_SECTOR":                14,
		"CATEGORY_RETAIL":                       15,
		"CATEGORY_SPORTS":                       16,
		"CATEGORY_SCIENCE_AND_RESEARCH":         17,
		"CATEGORY_TRANSPORTATION_AND_LOGISTICS": 18,
		"CATEGORY_TRAVEL_AND_TOURISM":           19,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_dataexchange_common_common_proto_enumTypes[0].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_dataexchange_common_common_proto_enumTypes[0]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_dataexchange_common_common_proto_rawDescGZIP(), []int{0}
}

var File_google_cloud_bigquery_dataexchange_common_common_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_dataexchange_common_common_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2a, 0xb7, 0x04, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x53, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x43, 0x4f, 0x4e,
	0x4f, 0x4d, 0x49, 0x43, 0x53, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x45, 0x52,
	0x47, 0x59, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x47, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x0a, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x47, 0x45,
	0x4f, 0x53, 0x50, 0x41, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43, 0x41, 0x52,
	0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x53, 0x43, 0x49, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x10, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x43, 0x49, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10,
	0x11, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x49, 0x53, 0x4d, 0x10, 0x13, 0x42, 0x97, 0x02,
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xaa,
	0x02, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42,
	0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xca, 0x02, 0x29, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xea, 0x02, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x42, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a,
	0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_dataexchange_common_common_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_dataexchange_common_common_proto_rawDescData = file_google_cloud_bigquery_dataexchange_common_common_proto_rawDesc
)

func file_google_cloud_bigquery_dataexchange_common_common_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_dataexchange_common_common_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_dataexchange_common_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_dataexchange_common_common_proto_rawDescData)
	})
	return file_google_cloud_bigquery_dataexchange_common_common_proto_rawDescData
}

var file_google_cloud_bigquery_dataexchange_common_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_bigquery_dataexchange_common_common_proto_goTypes = []interface{}{
	(Category)(0), // 0: google.cloud.bigquery.dataexchange.common.Category
}
var file_google_cloud_bigquery_dataexchange_common_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_dataexchange_common_common_proto_init() }
func file_google_cloud_bigquery_dataexchange_common_common_proto_init() {
	if File_google_cloud_bigquery_dataexchange_common_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_dataexchange_common_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_dataexchange_common_common_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_dataexchange_common_common_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_dataexchange_common_common_proto_enumTypes,
	}.Build()
	File_google_cloud_bigquery_dataexchange_common_common_proto = out.File
	file_google_cloud_bigquery_dataexchange_common_common_proto_rawDesc = nil
	file_google_cloud_bigquery_dataexchange_common_common_proto_goTypes = nil
	file_google_cloud_bigquery_dataexchange_common_common_proto_depIdxs = nil
}
