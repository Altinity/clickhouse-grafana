// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.2
// source: google/cloud/contentwarehouse/v1/ruleset_service.proto

package contentwarehouse

import (
	context "context"
	reflect "reflect"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_google_cloud_contentwarehouse_v1_ruleset_service_proto protoreflect.FileDescriptor

var file_google_cloud_contentwarehouse_v1_ruleset_service_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0xf4, 0x07, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x38, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73,
	0x3a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0xda, 0x41, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x2c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x12, 0xa9, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x2f, 0x2a,
	0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x22, 0x47, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x32, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0xda, 0x41, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e,
	0x2a, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0xda, 0x41, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x1a, 0x53, 0xca, 0x41, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x8f, 0x01, 0x0a, 0x24, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x13, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_google_cloud_contentwarehouse_v1_ruleset_service_proto_goTypes = []interface{}{
	(*CreateRuleSetRequest)(nil), // 0: google.cloud.contentwarehouse.v1.CreateRuleSetRequest
	(*GetRuleSetRequest)(nil),    // 1: google.cloud.contentwarehouse.v1.GetRuleSetRequest
	(*UpdateRuleSetRequest)(nil), // 2: google.cloud.contentwarehouse.v1.UpdateRuleSetRequest
	(*DeleteRuleSetRequest)(nil), // 3: google.cloud.contentwarehouse.v1.DeleteRuleSetRequest
	(*ListRuleSetsRequest)(nil),  // 4: google.cloud.contentwarehouse.v1.ListRuleSetsRequest
	(*RuleSet)(nil),              // 5: google.cloud.contentwarehouse.v1.RuleSet
	(*emptypb.Empty)(nil),        // 6: google.protobuf.Empty
	(*ListRuleSetsResponse)(nil), // 7: google.cloud.contentwarehouse.v1.ListRuleSetsResponse
}
var file_google_cloud_contentwarehouse_v1_ruleset_service_proto_depIdxs = []int32{
	0, // 0: google.cloud.contentwarehouse.v1.RuleSetService.CreateRuleSet:input_type -> google.cloud.contentwarehouse.v1.CreateRuleSetRequest
	1, // 1: google.cloud.contentwarehouse.v1.RuleSetService.GetRuleSet:input_type -> google.cloud.contentwarehouse.v1.GetRuleSetRequest
	2, // 2: google.cloud.contentwarehouse.v1.RuleSetService.UpdateRuleSet:input_type -> google.cloud.contentwarehouse.v1.UpdateRuleSetRequest
	3, // 3: google.cloud.contentwarehouse.v1.RuleSetService.DeleteRuleSet:input_type -> google.cloud.contentwarehouse.v1.DeleteRuleSetRequest
	4, // 4: google.cloud.contentwarehouse.v1.RuleSetService.ListRuleSets:input_type -> google.cloud.contentwarehouse.v1.ListRuleSetsRequest
	5, // 5: google.cloud.contentwarehouse.v1.RuleSetService.CreateRuleSet:output_type -> google.cloud.contentwarehouse.v1.RuleSet
	5, // 6: google.cloud.contentwarehouse.v1.RuleSetService.GetRuleSet:output_type -> google.cloud.contentwarehouse.v1.RuleSet
	5, // 7: google.cloud.contentwarehouse.v1.RuleSetService.UpdateRuleSet:output_type -> google.cloud.contentwarehouse.v1.RuleSet
	6, // 8: google.cloud.contentwarehouse.v1.RuleSetService.DeleteRuleSet:output_type -> google.protobuf.Empty
	7, // 9: google.cloud.contentwarehouse.v1.RuleSetService.ListRuleSets:output_type -> google.cloud.contentwarehouse.v1.ListRuleSetsResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_cloud_contentwarehouse_v1_ruleset_service_proto_init() }
func file_google_cloud_contentwarehouse_v1_ruleset_service_proto_init() {
	if File_google_cloud_contentwarehouse_v1_ruleset_service_proto != nil {
		return
	}
	file_google_cloud_contentwarehouse_v1_rule_engine_proto_init()
	file_google_cloud_contentwarehouse_v1_ruleset_service_request_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_contentwarehouse_v1_ruleset_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_contentwarehouse_v1_ruleset_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_contentwarehouse_v1_ruleset_service_proto_depIdxs,
	}.Build()
	File_google_cloud_contentwarehouse_v1_ruleset_service_proto = out.File
	file_google_cloud_contentwarehouse_v1_ruleset_service_proto_rawDesc = nil
	file_google_cloud_contentwarehouse_v1_ruleset_service_proto_goTypes = nil
	file_google_cloud_contentwarehouse_v1_ruleset_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RuleSetServiceClient is the client API for RuleSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuleSetServiceClient interface {
	// Creates a ruleset.
	CreateRuleSet(ctx context.Context, in *CreateRuleSetRequest, opts ...grpc.CallOption) (*RuleSet, error)
	// Gets a ruleset. Returns NOT_FOUND if the ruleset does not exist.
	GetRuleSet(ctx context.Context, in *GetRuleSetRequest, opts ...grpc.CallOption) (*RuleSet, error)
	// Updates a ruleset. Returns INVALID_ARGUMENT if the name of the ruleset
	// is non-empty and does not equal the existing name.
	UpdateRuleSet(ctx context.Context, in *UpdateRuleSetRequest, opts ...grpc.CallOption) (*RuleSet, error)
	// Deletes a ruleset. Returns NOT_FOUND if the document does not exist.
	DeleteRuleSet(ctx context.Context, in *DeleteRuleSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists rulesets.
	ListRuleSets(ctx context.Context, in *ListRuleSetsRequest, opts ...grpc.CallOption) (*ListRuleSetsResponse, error)
}

type ruleSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleSetServiceClient(cc grpc.ClientConnInterface) RuleSetServiceClient {
	return &ruleSetServiceClient{cc}
}

func (c *ruleSetServiceClient) CreateRuleSet(ctx context.Context, in *CreateRuleSetRequest, opts ...grpc.CallOption) (*RuleSet, error) {
	out := new(RuleSet)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.RuleSetService/CreateRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetServiceClient) GetRuleSet(ctx context.Context, in *GetRuleSetRequest, opts ...grpc.CallOption) (*RuleSet, error) {
	out := new(RuleSet)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.RuleSetService/GetRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetServiceClient) UpdateRuleSet(ctx context.Context, in *UpdateRuleSetRequest, opts ...grpc.CallOption) (*RuleSet, error) {
	out := new(RuleSet)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.RuleSetService/UpdateRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetServiceClient) DeleteRuleSet(ctx context.Context, in *DeleteRuleSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.RuleSetService/DeleteRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetServiceClient) ListRuleSets(ctx context.Context, in *ListRuleSetsRequest, opts ...grpc.CallOption) (*ListRuleSetsResponse, error) {
	out := new(ListRuleSetsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.RuleSetService/ListRuleSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleSetServiceServer is the server API for RuleSetService service.
type RuleSetServiceServer interface {
	// Creates a ruleset.
	CreateRuleSet(context.Context, *CreateRuleSetRequest) (*RuleSet, error)
	// Gets a ruleset. Returns NOT_FOUND if the ruleset does not exist.
	GetRuleSet(context.Context, *GetRuleSetRequest) (*RuleSet, error)
	// Updates a ruleset. Returns INVALID_ARGUMENT if the name of the ruleset
	// is non-empty and does not equal the existing name.
	UpdateRuleSet(context.Context, *UpdateRuleSetRequest) (*RuleSet, error)
	// Deletes a ruleset. Returns NOT_FOUND if the document does not exist.
	DeleteRuleSet(context.Context, *DeleteRuleSetRequest) (*emptypb.Empty, error)
	// Lists rulesets.
	ListRuleSets(context.Context, *ListRuleSetsRequest) (*ListRuleSetsResponse, error)
}

// UnimplementedRuleSetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRuleSetServiceServer struct {
}

func (*UnimplementedRuleSetServiceServer) CreateRuleSet(context.Context, *CreateRuleSetRequest) (*RuleSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleSet not implemented")
}
func (*UnimplementedRuleSetServiceServer) GetRuleSet(context.Context, *GetRuleSetRequest) (*RuleSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleSet not implemented")
}
func (*UnimplementedRuleSetServiceServer) UpdateRuleSet(context.Context, *UpdateRuleSetRequest) (*RuleSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleSet not implemented")
}
func (*UnimplementedRuleSetServiceServer) DeleteRuleSet(context.Context, *DeleteRuleSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuleSet not implemented")
}
func (*UnimplementedRuleSetServiceServer) ListRuleSets(context.Context, *ListRuleSetsRequest) (*ListRuleSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleSets not implemented")
}

func RegisterRuleSetServiceServer(s *grpc.Server, srv RuleSetServiceServer) {
	s.RegisterService(&_RuleSetService_serviceDesc, srv)
}

func _RuleSetService_CreateRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServiceServer).CreateRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.RuleSetService/CreateRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServiceServer).CreateRuleSet(ctx, req.(*CreateRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSetService_GetRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServiceServer).GetRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.RuleSetService/GetRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServiceServer).GetRuleSet(ctx, req.(*GetRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSetService_UpdateRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServiceServer).UpdateRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.RuleSetService/UpdateRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServiceServer).UpdateRuleSet(ctx, req.(*UpdateRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSetService_DeleteRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServiceServer).DeleteRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.RuleSetService/DeleteRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServiceServer).DeleteRuleSet(ctx, req.(*DeleteRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSetService_ListRuleSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServiceServer).ListRuleSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.RuleSetService/ListRuleSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServiceServer).ListRuleSets(ctx, req.(*ListRuleSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleSetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.contentwarehouse.v1.RuleSetService",
	HandlerType: (*RuleSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRuleSet",
			Handler:    _RuleSetService_CreateRuleSet_Handler,
		},
		{
			MethodName: "GetRuleSet",
			Handler:    _RuleSetService_GetRuleSet_Handler,
		},
		{
			MethodName: "UpdateRuleSet",
			Handler:    _RuleSetService_UpdateRuleSet_Handler,
		},
		{
			MethodName: "DeleteRuleSet",
			Handler:    _RuleSetService_DeleteRuleSet_Handler,
		},
		{
			MethodName: "ListRuleSets",
			Handler:    _RuleSetService_ListRuleSets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/contentwarehouse/v1/ruleset_service.proto",
}
