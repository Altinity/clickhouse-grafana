// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.2
// source: google/cloud/contentwarehouse/v1/synonymset_service.proto

package contentwarehouse

import (
	context "context"
	reflect "reflect"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_google_cloud_contentwarehouse_v1_synonymset_service_proto protoreflect.FileDescriptor

var file_google_cloud_contentwarehouse_v1_synonymset_service_proto_rawDesc = []byte{
	0x0a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xc3, 0x08, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd6, 0x01,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53,
	0x65, 0x74, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x22, 0x59, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3e, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x53, 0x65, 0x74, 0x73, 0x3a, 0x0b, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x5f, 0x73, 0x65,
	0x74, 0xda, 0x41, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x53, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xd4,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x53, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x22, 0x57, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x32, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x0b, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x5f, 0x73,
	0x65, 0x74, 0xda, 0x41, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x5f, 0x73, 0x65, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53,
	0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc8, 0x01,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53, 0x65, 0x74, 0x73, 0xda,
	0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0x53, 0xca, 0x41, 0x1f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x92, 0x01,
	0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x53,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x50, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_google_cloud_contentwarehouse_v1_synonymset_service_proto_goTypes = []interface{}{
	(*CreateSynonymSetRequest)(nil), // 0: google.cloud.contentwarehouse.v1.CreateSynonymSetRequest
	(*GetSynonymSetRequest)(nil),    // 1: google.cloud.contentwarehouse.v1.GetSynonymSetRequest
	(*UpdateSynonymSetRequest)(nil), // 2: google.cloud.contentwarehouse.v1.UpdateSynonymSetRequest
	(*DeleteSynonymSetRequest)(nil), // 3: google.cloud.contentwarehouse.v1.DeleteSynonymSetRequest
	(*ListSynonymSetsRequest)(nil),  // 4: google.cloud.contentwarehouse.v1.ListSynonymSetsRequest
	(*SynonymSet)(nil),              // 5: google.cloud.contentwarehouse.v1.SynonymSet
	(*emptypb.Empty)(nil),           // 6: google.protobuf.Empty
	(*ListSynonymSetsResponse)(nil), // 7: google.cloud.contentwarehouse.v1.ListSynonymSetsResponse
}
var file_google_cloud_contentwarehouse_v1_synonymset_service_proto_depIdxs = []int32{
	0, // 0: google.cloud.contentwarehouse.v1.SynonymSetService.CreateSynonymSet:input_type -> google.cloud.contentwarehouse.v1.CreateSynonymSetRequest
	1, // 1: google.cloud.contentwarehouse.v1.SynonymSetService.GetSynonymSet:input_type -> google.cloud.contentwarehouse.v1.GetSynonymSetRequest
	2, // 2: google.cloud.contentwarehouse.v1.SynonymSetService.UpdateSynonymSet:input_type -> google.cloud.contentwarehouse.v1.UpdateSynonymSetRequest
	3, // 3: google.cloud.contentwarehouse.v1.SynonymSetService.DeleteSynonymSet:input_type -> google.cloud.contentwarehouse.v1.DeleteSynonymSetRequest
	4, // 4: google.cloud.contentwarehouse.v1.SynonymSetService.ListSynonymSets:input_type -> google.cloud.contentwarehouse.v1.ListSynonymSetsRequest
	5, // 5: google.cloud.contentwarehouse.v1.SynonymSetService.CreateSynonymSet:output_type -> google.cloud.contentwarehouse.v1.SynonymSet
	5, // 6: google.cloud.contentwarehouse.v1.SynonymSetService.GetSynonymSet:output_type -> google.cloud.contentwarehouse.v1.SynonymSet
	5, // 7: google.cloud.contentwarehouse.v1.SynonymSetService.UpdateSynonymSet:output_type -> google.cloud.contentwarehouse.v1.SynonymSet
	6, // 8: google.cloud.contentwarehouse.v1.SynonymSetService.DeleteSynonymSet:output_type -> google.protobuf.Empty
	7, // 9: google.cloud.contentwarehouse.v1.SynonymSetService.ListSynonymSets:output_type -> google.cloud.contentwarehouse.v1.ListSynonymSetsResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_cloud_contentwarehouse_v1_synonymset_service_proto_init() }
func file_google_cloud_contentwarehouse_v1_synonymset_service_proto_init() {
	if File_google_cloud_contentwarehouse_v1_synonymset_service_proto != nil {
		return
	}
	file_google_cloud_contentwarehouse_v1_synonymset_proto_init()
	file_google_cloud_contentwarehouse_v1_synonymset_service_request_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_contentwarehouse_v1_synonymset_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_contentwarehouse_v1_synonymset_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_contentwarehouse_v1_synonymset_service_proto_depIdxs,
	}.Build()
	File_google_cloud_contentwarehouse_v1_synonymset_service_proto = out.File
	file_google_cloud_contentwarehouse_v1_synonymset_service_proto_rawDesc = nil
	file_google_cloud_contentwarehouse_v1_synonymset_service_proto_goTypes = nil
	file_google_cloud_contentwarehouse_v1_synonymset_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SynonymSetServiceClient is the client API for SynonymSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SynonymSetServiceClient interface {
	// Creates a SynonymSet for a single context.
	// Throws an ALREADY_EXISTS exception if a synonymset already exists
	// for the context.
	CreateSynonymSet(ctx context.Context, in *CreateSynonymSetRequest, opts ...grpc.CallOption) (*SynonymSet, error)
	// Gets a SynonymSet for a particular context.
	// Throws a NOT_FOUND exception if the Synonymset
	// does not exist
	GetSynonymSet(ctx context.Context, in *GetSynonymSetRequest, opts ...grpc.CallOption) (*SynonymSet, error)
	// Remove the existing SynonymSet for the context and replaces it
	// with a new one.
	// Throws a NOT_FOUND exception if the SynonymSet is not found.
	UpdateSynonymSet(ctx context.Context, in *UpdateSynonymSetRequest, opts ...grpc.CallOption) (*SynonymSet, error)
	// Deletes a SynonymSet for a given context.
	// Throws a NOT_FOUND exception if the SynonymSet is not found.
	DeleteSynonymSet(ctx context.Context, in *DeleteSynonymSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns all SynonymSets (for all contexts) for the specified location.
	ListSynonymSets(ctx context.Context, in *ListSynonymSetsRequest, opts ...grpc.CallOption) (*ListSynonymSetsResponse, error)
}

type synonymSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSynonymSetServiceClient(cc grpc.ClientConnInterface) SynonymSetServiceClient {
	return &synonymSetServiceClient{cc}
}

func (c *synonymSetServiceClient) CreateSynonymSet(ctx context.Context, in *CreateSynonymSetRequest, opts ...grpc.CallOption) (*SynonymSet, error) {
	out := new(SynonymSet)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.SynonymSetService/CreateSynonymSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synonymSetServiceClient) GetSynonymSet(ctx context.Context, in *GetSynonymSetRequest, opts ...grpc.CallOption) (*SynonymSet, error) {
	out := new(SynonymSet)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.SynonymSetService/GetSynonymSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synonymSetServiceClient) UpdateSynonymSet(ctx context.Context, in *UpdateSynonymSetRequest, opts ...grpc.CallOption) (*SynonymSet, error) {
	out := new(SynonymSet)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.SynonymSetService/UpdateSynonymSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synonymSetServiceClient) DeleteSynonymSet(ctx context.Context, in *DeleteSynonymSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.SynonymSetService/DeleteSynonymSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synonymSetServiceClient) ListSynonymSets(ctx context.Context, in *ListSynonymSetsRequest, opts ...grpc.CallOption) (*ListSynonymSetsResponse, error) {
	out := new(ListSynonymSetsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.contentwarehouse.v1.SynonymSetService/ListSynonymSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynonymSetServiceServer is the server API for SynonymSetService service.
type SynonymSetServiceServer interface {
	// Creates a SynonymSet for a single context.
	// Throws an ALREADY_EXISTS exception if a synonymset already exists
	// for the context.
	CreateSynonymSet(context.Context, *CreateSynonymSetRequest) (*SynonymSet, error)
	// Gets a SynonymSet for a particular context.
	// Throws a NOT_FOUND exception if the Synonymset
	// does not exist
	GetSynonymSet(context.Context, *GetSynonymSetRequest) (*SynonymSet, error)
	// Remove the existing SynonymSet for the context and replaces it
	// with a new one.
	// Throws a NOT_FOUND exception if the SynonymSet is not found.
	UpdateSynonymSet(context.Context, *UpdateSynonymSetRequest) (*SynonymSet, error)
	// Deletes a SynonymSet for a given context.
	// Throws a NOT_FOUND exception if the SynonymSet is not found.
	DeleteSynonymSet(context.Context, *DeleteSynonymSetRequest) (*emptypb.Empty, error)
	// Returns all SynonymSets (for all contexts) for the specified location.
	ListSynonymSets(context.Context, *ListSynonymSetsRequest) (*ListSynonymSetsResponse, error)
}

// UnimplementedSynonymSetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSynonymSetServiceServer struct {
}

func (*UnimplementedSynonymSetServiceServer) CreateSynonymSet(context.Context, *CreateSynonymSetRequest) (*SynonymSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSynonymSet not implemented")
}
func (*UnimplementedSynonymSetServiceServer) GetSynonymSet(context.Context, *GetSynonymSetRequest) (*SynonymSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSynonymSet not implemented")
}
func (*UnimplementedSynonymSetServiceServer) UpdateSynonymSet(context.Context, *UpdateSynonymSetRequest) (*SynonymSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSynonymSet not implemented")
}
func (*UnimplementedSynonymSetServiceServer) DeleteSynonymSet(context.Context, *DeleteSynonymSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSynonymSet not implemented")
}
func (*UnimplementedSynonymSetServiceServer) ListSynonymSets(context.Context, *ListSynonymSetsRequest) (*ListSynonymSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSynonymSets not implemented")
}

func RegisterSynonymSetServiceServer(s *grpc.Server, srv SynonymSetServiceServer) {
	s.RegisterService(&_SynonymSetService_serviceDesc, srv)
}

func _SynonymSetService_CreateSynonymSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSynonymSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymSetServiceServer).CreateSynonymSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.SynonymSetService/CreateSynonymSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymSetServiceServer).CreateSynonymSet(ctx, req.(*CreateSynonymSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynonymSetService_GetSynonymSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSynonymSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymSetServiceServer).GetSynonymSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.SynonymSetService/GetSynonymSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymSetServiceServer).GetSynonymSet(ctx, req.(*GetSynonymSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynonymSetService_UpdateSynonymSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSynonymSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymSetServiceServer).UpdateSynonymSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.SynonymSetService/UpdateSynonymSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymSetServiceServer).UpdateSynonymSet(ctx, req.(*UpdateSynonymSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynonymSetService_DeleteSynonymSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSynonymSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymSetServiceServer).DeleteSynonymSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.SynonymSetService/DeleteSynonymSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymSetServiceServer).DeleteSynonymSet(ctx, req.(*DeleteSynonymSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynonymSetService_ListSynonymSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSynonymSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynonymSetServiceServer).ListSynonymSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.contentwarehouse.v1.SynonymSetService/ListSynonymSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynonymSetServiceServer).ListSynonymSets(ctx, req.(*ListSynonymSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SynonymSetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.contentwarehouse.v1.SynonymSetService",
	HandlerType: (*SynonymSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSynonymSet",
			Handler:    _SynonymSetService_CreateSynonymSet_Handler,
		},
		{
			MethodName: "GetSynonymSet",
			Handler:    _SynonymSetService_GetSynonymSet_Handler,
		},
		{
			MethodName: "UpdateSynonymSet",
			Handler:    _SynonymSetService_UpdateSynonymSet_Handler,
		},
		{
			MethodName: "DeleteSynonymSet",
			Handler:    _SynonymSetService_DeleteSynonymSet_Handler,
		},
		{
			MethodName: "ListSynonymSets",
			Handler:    _SynonymSetService_ListSynonymSets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/contentwarehouse/v1/synonymset_service.proto",
}
