
(function() {

var $goVersion = "go1.19";
Error.stackTraceLimit = Infinity;

var $NaN = NaN;
var $global, $module;
if (typeof window !== "undefined") { /* web page */
    $global = window;
} else if (typeof self !== "undefined") { /* web worker */
    $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
    $global = global;
    $global.require = require;
} else { /* others (e.g. Nashorn) */
    $global = this;
}

if ($global === undefined || $global.Array === undefined) {
    throw new Error("no global object found");
}
if (typeof module !== "undefined") {
    $module = module;
}

if (!$global.fs && $global.require) {
    try {
        var fs = $global.require('fs');
        if (typeof fs === "object" && fs !== null && Object.keys(fs).length !== 0) {
            $global.fs = fs;
        }
    } catch (e) { /* Ignore if the module couldn't be loaded. */ }
}

if (!$global.fs) {
    var outputBuf = "";
    var decoder = new TextDecoder("utf-8");
    $global.fs = {
        constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused
        writeSync: function writeSync(fd, buf) {
            outputBuf += decoder.decode(buf);
            var nl = outputBuf.lastIndexOf("\n");
            if (nl != -1) {
                console.log(outputBuf.substr(0, nl));
                outputBuf = outputBuf.substr(nl + 1);
            }
            return buf.length;
        },
        write: function write(fd, buf, offset, length, position, callback) {
            if (offset !== 0 || length !== buf.length || position !== null) {
                callback(enosys());
                return;
            }
            var n = this.writeSync(fd, buf);
            callback(null, n);
        }
    };
}

var $linknames = {} // Collection of functions referenced by a go:linkname directive.
var $packages = {}, $idCounter = 0;
var $keys = m => { return m ? Object.keys(m) : []; };
var $flushConsole = () => { };
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = () => { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = (fn, rcvr, args) => { return fn.apply(rcvr, args); };
var $makeFunc = fn => { return function(...args) { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(args, []))), $emptyInterface); }; };
var $unused = v => { };
var $print = console.log;
// Under Node we can emulate print() more closely by avoiding a newline.
if (($global.process !== undefined) && $global.require) {
    try {
        var util = $global.require('util');
        $print = function(...args) { $global.process.stderr.write(util.format.apply(this, args)); };
    } catch (e) {
        // Failed to require util module, keep using console.log().
    }
}
var $println = console.log

var $initAllLinknames = () => {
    var names = $keys($packages);
    for (var i = 0; i < names.length; i++) {
        var f = $packages[names[i]]["$initLinknames"];
        if (typeof f == 'function') {
            f();
        }
    }
}

var $mapArray = (array, f) => {
    var newArray = new array.constructor(array.length);
    for (var i = 0; i < array.length; i++) {
        newArray[i] = f(array[i]);
    }
    return newArray;
};

// $mapIndex returns the value of the given key in m, or undefined if m is nil/undefined or not a map
var $mapIndex = (m, key) => {
    return typeof m.get === "function" ? m.get(key) : undefined;
};
// $mapDelete deletes the key and associated value from m.  If m is nil/undefined or not a map, $mapDelete is a no-op
var $mapDelete = (m, key) => {
    typeof m.delete === "function" && m.delete(key)
};
// Returns a method bound to the receiver instance, safe to invoke as a 
// standalone function. Bound function is cached for later reuse.
var $methodVal = (recv, name) => {
    var vals = recv.$methodVals || {};
    recv.$methodVals = vals; /* noop for primitives */
    var f = vals[name];
    if (f !== undefined) {
        return f;
    }
    var method = recv[name];
    f = method.bind(recv);
    vals[name] = f;
    return f;
};

var $methodExpr = (typ, name) => {
    var method = typ.prototype[name];
    if (method.$expr === undefined) {
        method.$expr = (...args) => {
            $stackDepthOffset--;
            try {
                if (typ.wrapped) {
                    args[0] = new typ(args[0]);
                }
                return Function.call.apply(method, args);
            } finally {
                $stackDepthOffset++;
            }
        };
    }
    return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = name => {
    var expr = $ifaceMethodExprs["$" + name];
    if (expr === undefined) {
        expr = $ifaceMethodExprs["$" + name] = (...args) => {
            $stackDepthOffset--;
            try {
                return Function.call.apply(args[0][name], args);
            } finally {
                $stackDepthOffset++;
            }
        };
    }
    return expr;
};

var $subslice = (slice, low, high, max) => {
    if (high === undefined) {
        high = slice.$length;
    }
    if (max === undefined) {
        max = slice.$capacity;
    }
    if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
        $throwRuntimeError("slice bounds out of range");
    }
    if (slice === slice.constructor.nil) {
        return slice;
    }
    var s = new slice.constructor(slice.$array);
    s.$offset = slice.$offset + low;
    s.$length = high - low;
    s.$capacity = max - low;
    return s;
};

var $substring = (str, low, high) => {
    if (low < 0 || high < low || high > str.length) {
        $throwRuntimeError("slice bounds out of range");
    }
    return str.substring(low, high);
};

// Convert Go slice to an equivalent JS array type.
var $sliceToNativeArray = slice => {
    if (slice.$array.constructor !== Array) {
        return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
    }
    return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

// Convert Go slice to a pointer to an underlying Go array.
// 
// Note that an array pointer can be represented by an "unwrapped" native array
// type, and it will be wrapped back into its Go type when necessary.
var $sliceToGoArray = (slice, arrayPtrType) => {
    var arrayType = arrayPtrType.elem;
    if (arrayType !== undefined && slice.$length < arrayType.len) {
        $throwRuntimeError("cannot convert slice with length " + slice.$length + " to pointer to array with length " + arrayType.len);
    }
    if (slice == slice.constructor.nil) {
        return arrayPtrType.nil; // Nil slice converts to nil array pointer.
    }
    if (slice.$array.constructor !== Array) {
        return slice.$array.subarray(slice.$offset, slice.$offset + arrayType.len);
    }
    if (slice.$offset == 0 && slice.$length == slice.$capacity && slice.$length == arrayType.len) {
        return slice.$array;
    }
    if (arrayType.len == 0) {
        return new arrayType([]);
    }

    // Array.slice (unlike TypedArray.subarray) returns a copy of an array range,
    // which is not sharing memory with the original one, which violates the spec
    // for slice to array conversion. This is incompatible with the Go spec, in
    // particular that the assignments to the array elements would be visible in
    // the slice. Prefer to fail explicitly instead of creating subtle bugs.
    $throwRuntimeError("gopherjs: non-numeric slice to underlying array conversion is not supported for subslices");
};

// Convert between compatible slice types (e.g. native and names).
var $convertSliceType = (slice, desiredType) => {
    if (slice == slice.constructor.nil) {
        return desiredType.nil; // Preserve nil value.
    }

    return $subslice(new desiredType(slice.$array), slice.$offset, slice.$offset + slice.$length);
}

var $decodeRune = (str, pos) => {
    var c0 = str.charCodeAt(pos);

    if (c0 < 0x80) {
        return [c0, 1];
    }

    if (c0 !== c0 || c0 < 0xC0) {
        return [0xFFFD, 1];
    }

    var c1 = str.charCodeAt(pos + 1);
    if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
        return [0xFFFD, 1];
    }

    if (c0 < 0xE0) {
        var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
        if (r <= 0x7F) {
            return [0xFFFD, 1];
        }
        return [r, 2];
    }

    var c2 = str.charCodeAt(pos + 2);
    if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
        return [0xFFFD, 1];
    }

    if (c0 < 0xF0) {
        var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
        if (r <= 0x7FF) {
            return [0xFFFD, 1];
        }
        if (0xD800 <= r && r <= 0xDFFF) {
            return [0xFFFD, 1];
        }
        return [r, 3];
    }

    var c3 = str.charCodeAt(pos + 3);
    if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
        return [0xFFFD, 1];
    }

    if (c0 < 0xF8) {
        var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
        if (r <= 0xFFFF || 0x10FFFF < r) {
            return [0xFFFD, 1];
        }
        return [r, 4];
    }

    return [0xFFFD, 1];
};

var $encodeRune = r => {
    if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
        r = 0xFFFD;
    }
    if (r <= 0x7F) {
        return String.fromCharCode(r);
    }
    if (r <= 0x7FF) {
        return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
    }
    if (r <= 0xFFFF) {
        return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
    }
    return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = str => {
    var array = new Uint8Array(str.length);
    for (var i = 0; i < str.length; i++) {
        array[i] = str.charCodeAt(i);
    }
    return array;
};

var $bytesToString = slice => {
    if (slice.$length === 0) {
        return "";
    }
    var str = "";
    for (var i = 0; i < slice.$length; i += 10000) {
        str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
    }
    return str;
};

var $stringToRunes = str => {
    var array = new Int32Array(str.length);
    var rune, j = 0;
    for (var i = 0; i < str.length; i += rune[1], j++) {
        rune = $decodeRune(str, i);
        array[j] = rune[0];
    }
    return array.subarray(0, j);
};

var $runesToString = slice => {
    if (slice.$length === 0) {
        return "";
    }
    var str = "";
    for (var i = 0; i < slice.$length; i++) {
        str += $encodeRune(slice.$array[slice.$offset + i]);
    }
    return str;
};

var $copyString = (dst, src) => {
    var n = Math.min(src.length, dst.$length);
    for (var i = 0; i < n; i++) {
        dst.$array[dst.$offset + i] = src.charCodeAt(i);
    }
    return n;
};

var $copySlice = (dst, src) => {
    var n = Math.min(src.$length, dst.$length);
    $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
    return n;
};

var $copyArray = (dst, src, dstOffset, srcOffset, n, elem) => {
    if (n === 0 || (dst === src && dstOffset === srcOffset)) {
        return;
    }

    if (src.subarray) {
        dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
        return;
    }

    switch (elem.kind) {
        case $kindArray:
        case $kindStruct:
            if (dst === src && dstOffset > srcOffset) {
                for (var i = n - 1; i >= 0; i--) {
                    elem.copy(dst[dstOffset + i], src[srcOffset + i]);
                }
                return;
            }
            for (var i = 0; i < n; i++) {
                elem.copy(dst[dstOffset + i], src[srcOffset + i]);
            }
            return;
    }

    if (dst === src && dstOffset > srcOffset) {
        for (var i = n - 1; i >= 0; i--) {
            dst[dstOffset + i] = src[srcOffset + i];
        }
        return;
    }
    for (var i = 0; i < n; i++) {
        dst[dstOffset + i] = src[srcOffset + i];
    }
};

var $clone = (src, type) => {
    var clone = type.zero();
    type.copy(clone, src);
    return clone;
};

var $pointerOfStructConversion = (obj, type) => {
    if (obj.$proxies === undefined) {
        obj.$proxies = {};
        obj.$proxies[obj.constructor.string] = obj;
    }
    var proxy = obj.$proxies[type.string];
    if (proxy === undefined) {
        var properties = {};
        for (var i = 0; i < type.elem.fields.length; i++) {
            (fieldProp => {
                properties[fieldProp] = {
                    get() { return obj[fieldProp]; },
                    set(value) { obj[fieldProp] = value; }
                };
            })(type.elem.fields[i].prop);
        }
        proxy = Object.create(type.prototype, properties);
        proxy.$val = proxy;
        obj.$proxies[type.string] = proxy;
        proxy.$proxies = obj.$proxies;
    }
    return proxy;
};

var $append = function (slice) {
    return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = (slice, toAppend) => {
    if (toAppend.constructor === String) {
        var bytes = $stringToBytes(toAppend);
        return $internalAppend(slice, bytes, 0, bytes.length);
    }
    return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = (slice, array, offset, length) => {
    if (length === 0) {
        return slice;
    }

    var newArray = slice.$array;
    var newOffset = slice.$offset;
    var newLength = slice.$length + length;
    var newCapacity = slice.$capacity;

    if (newLength > newCapacity) {
        newOffset = 0;
        newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

        if (slice.$array.constructor === Array) {
            newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
            newArray.length = newCapacity;
            var zero = slice.constructor.elem.zero;
            for (var i = slice.$length; i < newCapacity; i++) {
                newArray[i] = zero();
            }
        } else {
            newArray = new slice.$array.constructor(newCapacity);
            newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
        }
    }

    $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

    var newSlice = new slice.constructor(newArray);
    newSlice.$offset = newOffset;
    newSlice.$length = newLength;
    newSlice.$capacity = newCapacity;
    return newSlice;
};

var $equal = (a, b, type) => {
    if (type === $jsObjectPtr) {
        return a === b;
    }
    switch (type.kind) {
        case $kindComplex64:
        case $kindComplex128:
            return a.$real === b.$real && a.$imag === b.$imag;
        case $kindInt64:
        case $kindUint64:
            return a.$high === b.$high && a.$low === b.$low;
        case $kindArray:
            if (a.length !== b.length) {
                return false;
            }
            for (var i = 0; i < a.length; i++) {
                if (!$equal(a[i], b[i], type.elem)) {
                    return false;
                }
            }
            return true;
        case $kindStruct:
            for (var i = 0; i < type.fields.length; i++) {
                var f = type.fields[i];
                if (!$equal(a[f.prop], b[f.prop], f.typ)) {
                    return false;
                }
            }
            return true;
        case $kindInterface:
            return $interfaceIsEqual(a, b);
        default:
            return a === b;
    }
};

var $interfaceIsEqual = (a, b) => {
    if (a === $ifaceNil || b === $ifaceNil) {
        return a === b;
    }
    if (a.constructor !== b.constructor) {
        return false;
    }
    if (a.constructor === $jsObjectPtr) {
        return a.object === b.object;
    }
    if (!a.constructor.comparable) {
        $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
    }
    return $equal(a.$val, b.$val, a.constructor);
};

var $unsafeMethodToFunction = (typ, name, isPtr) => {
    if (isPtr) {
        return (r, ...args) => {
            var ptrType = $ptrType(typ);
            if (r.constructor != ptrType) {
                switch (typ.kind) {
                    case $kindStruct:
                        r = $pointerOfStructConversion(r, ptrType);
                        break;
                    case $kindArray:
                        r = new ptrType(r);
                        break;
                    default:
                        r = new ptrType(r.$get, r.$set, r.$target);
                }
            }
            return r[name](...args);
        };
    } else {
        return (r, ...args) => {
            var ptrType = $ptrType(typ);
            if (r.constructor != ptrType) {
                switch (typ.kind) {
                    case $kindStruct:
                        r = $clone(r, typ);
                        break;
                    case $kindSlice:
                        r = $convertSliceType(r, typ);
                        break;
                    case $kindComplex64:
                    case $kindComplex128:
                        r = new typ(r.$real, r.$imag);
                        break;
                    default:
                        r = new typ(r);
                }
            }
            return r[name](...args);
        };
    }
};

var $id = x => {
    return x;
};

var $instanceOf = (x, y) => {
    return x instanceof y;
};

var $typeOf = x => {
    return typeof (x);
};
var $min = Math.min;
var $mod = (x, y) => { return x % y; };
var $parseInt = parseInt;
var $parseFloat = f => {
    if (f !== undefined && f !== null && f.constructor === Number) {
        return f;
    }
    return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || (f => {
    $froundBuf[0] = f;
    return $froundBuf[0];
});

var $imul = Math.imul || ((a, b) => {
    var ah = (a >>> 16) & 0xffff;
    var al = a & 0xffff;
    var bh = (b >>> 16) & 0xffff;
    var bl = b & 0xffff;
    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
});

var $floatKey = f => {
    if (f !== f) {
        $idCounter++;
        return "NaN$" + $idCounter;
    }
    return String(f);
};

var $flatten64 = x => {
    return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = (x, y) => {
    if (y === 0) {
        return x;
    }
    if (y < 32) {
        return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
    }
    if (y < 64) {
        return new x.constructor(x.$low << (y - 32), 0);
    }
    return new x.constructor(0, 0);
};

var $shiftRightInt64 = (x, y) => {
    if (y === 0) {
        return x;
    }
    if (y < 32) {
        return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
    }
    if (y < 64) {
        return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
    }
    if (x.$high < 0) {
        return new x.constructor(-1, 4294967295);
    }
    return new x.constructor(0, 0);
};

var $shiftRightUint64 = (x, y) => {
    if (y === 0) {
        return x;
    }
    if (y < 32) {
        return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
    }
    if (y < 64) {
        return new x.constructor(0, x.$high >>> (y - 32));
    }
    return new x.constructor(0, 0);
};

var $mul64 = (x, y) => {
    var x48 = x.$high >>> 16;
    var x32 = x.$high & 0xFFFF;
    var x16 = x.$low >>> 16;
    var x00 = x.$low & 0xFFFF;

    var y48 = y.$high >>> 16;
    var y32 = y.$high & 0xFFFF;
    var y16 = y.$low >>> 16;
    var y00 = y.$low & 0xFFFF;

    var z48 = 0, z32 = 0, z16 = 0, z00 = 0;
    z00 += x00 * y00;
    z16 += z00 >>> 16;
    z00 &= 0xFFFF;
    z16 += x16 * y00;
    z32 += z16 >>> 16;
    z16 &= 0xFFFF;
    z16 += x00 * y16;
    z32 += z16 >>> 16;
    z16 &= 0xFFFF;
    z32 += x32 * y00;
    z48 += z32 >>> 16;
    z32 &= 0xFFFF;
    z32 += x16 * y16;
    z48 += z32 >>> 16;
    z32 &= 0xFFFF;
    z32 += x00 * y32;
    z48 += z32 >>> 16;
    z32 &= 0xFFFF;
    z48 += x48 * y00 + x32 * y16 + x16 * y32 + x00 * y48;
    z48 &= 0xFFFF;

    var hi = ((z48 << 16) | z32) >>> 0;
    var lo = ((z16 << 16) | z00) >>> 0;

    var r = new x.constructor(hi, lo);
    return r;
};

var $div64 = (x, y, returnRemainder) => {
    if (y.$high === 0 && y.$low === 0) {
        $throwRuntimeError("integer divide by zero");
    }

    var s = 1;
    var rs = 1;

    var xHigh = x.$high;
    var xLow = x.$low;
    if (xHigh < 0) {
        s = -1;
        rs = -1;
        xHigh = -xHigh;
        if (xLow !== 0) {
            xHigh--;
            xLow = 4294967296 - xLow;
        }
    }

    var yHigh = y.$high;
    var yLow = y.$low;
    if (y.$high < 0) {
        s *= -1;
        yHigh = -yHigh;
        if (yLow !== 0) {
            yHigh--;
            yLow = 4294967296 - yLow;
        }
    }

    var high = 0, low = 0, n = 0;
    while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
        yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
        yLow = (yLow << 1) >>> 0;
        n++;
    }
    for (var i = 0; i <= n; i++) {
        high = high << 1 | low >>> 31;
        low = (low << 1) >>> 0;
        if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
            xHigh = xHigh - yHigh;
            xLow = xLow - yLow;
            if (xLow < 0) {
                xHigh--;
                xLow += 4294967296;
            }
            low++;
            if (low === 4294967296) {
                high++;
                low = 0;
            }
        }
        yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
        yHigh = yHigh >>> 1;
    }

    if (returnRemainder) {
        return new x.constructor(xHigh * rs, xLow * rs);
    }
    return new x.constructor(high * s, low * s);
};

var $divComplex = (n, d) => {
    var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
    var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
    var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
    var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
    if (nnan || dnan) {
        return new n.constructor(NaN, NaN);
    }
    if (ninf && !dinf) {
        return new n.constructor(Infinity, Infinity);
    }
    if (!ninf && dinf) {
        return new n.constructor(0, 0);
    }
    if (d.$real === 0 && d.$imag === 0) {
        if (n.$real === 0 && n.$imag === 0) {
            return new n.constructor(NaN, NaN);
        }
        return new n.constructor(Infinity, Infinity);
    }
    var a = Math.abs(d.$real);
    var b = Math.abs(d.$imag);
    if (a <= b) {
        var ratio = d.$real / d.$imag;
        var denom = d.$real * ratio + d.$imag;
        return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
    }
    var ratio = d.$imag / d.$real;
    var denom = d.$imag * ratio + d.$real;
    return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};
var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = f => {
    if ($methodSynthesizers === null) {
        f();
        return;
    }
    $methodSynthesizers.push(f);
};
var $synthesizeMethods = () => {
    $methodSynthesizers.forEach(f => { f(); });
    $methodSynthesizers = null;
};

var $ifaceKeyFor = x => {
    if (x === $ifaceNil) {
        return 'nil';
    }
    var c = x.constructor;
    return c.string + '$' + c.keyFor(x.$val);
};

var $identity = x => { return x; };

var $typeIDCounter = 0;

var $idKey = x => {
    if (x.$id === undefined) {
        $idCounter++;
        x.$id = $idCounter;
    }
    return String(x.$id);
};

// Creates constructor functions for array pointer types. Returns a new function
// instace each time to make sure each type is independent of the other.
var $arrayPtrCtor = () => {
    return function (array) {
        this.$get = () => { return array; };
        this.$set = function (v) { typ.copy(this, v); };
        this.$val = array;
    };
}

var $newType = (size, kind, string, named, pkg, exported, constructor) => {
    var typ;
    switch (kind) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindUnsafePointer:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.keyFor = $identity;
            break;

        case $kindString:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.keyFor = x => { return "$" + x; };
            break;

        case $kindFloat32:
        case $kindFloat64:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.keyFor = x => { return $floatKey(x); };
            break;

        case $kindInt64:
            typ = function (high, low) {
                this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
                this.$low = low >>> 0;
                this.$val = this;
            };
            typ.keyFor = x => { return x.$high + "$" + x.$low; };
            break;

        case $kindUint64:
            typ = function (high, low) {
                this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
                this.$low = low >>> 0;
                this.$val = this;
            };
            typ.keyFor = x => { return x.$high + "$" + x.$low; };
            break;

        case $kindComplex64:
            typ = function (real, imag) {
                this.$real = $fround(real);
                this.$imag = $fround(imag);
                this.$val = this;
            };
            typ.keyFor = x => { return x.$real + "$" + x.$imag; };
            break;

        case $kindComplex128:
            typ = function (real, imag) {
                this.$real = real;
                this.$imag = imag;
                this.$val = this;
            };
            typ.keyFor = x => { return x.$real + "$" + x.$imag; };
            break;

        case $kindArray:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, $arrayPtrCtor());
            typ.init = (elem, len) => {
                typ.elem = elem;
                typ.len = len;
                typ.comparable = elem.comparable;
                typ.keyFor = x => {
                    return Array.prototype.join.call($mapArray(x, e => {
                        return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
                    }), "$");
                };
                typ.copy = (dst, src) => {
                    $copyArray(dst, src, 0, 0, src.length, elem);
                };
                typ.ptr.init(typ);
                Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
            };
            break;

        case $kindChan:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.keyFor = $idKey;
            typ.init = (elem, sendOnly, recvOnly) => {
                typ.elem = elem;
                typ.sendOnly = sendOnly;
                typ.recvOnly = recvOnly;
            };
            break;

        case $kindFunc:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.init = (params, results, variadic) => {
                typ.params = params;
                typ.results = results;
                typ.variadic = variadic;
                typ.comparable = false;
            };
            break;

        case $kindInterface:
            typ = { implementedBy: {}, missingMethodFor: {} };
            typ.keyFor = $ifaceKeyFor;
            typ.init = methods => {
                typ.methods = methods;
                methods.forEach(m => {
                    $ifaceNil[m.prop] = $throwNilPointerError;
                });
            };
            break;

        case $kindMap:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.init = (key, elem) => {
                typ.key = key;
                typ.elem = elem;
                typ.comparable = false;
            };
            break;

        case $kindPtr:
            typ = constructor || function (getter, setter, target) {
                this.$get = getter;
                this.$set = setter;
                this.$target = target;
                this.$val = this;
            };
            typ.keyFor = $idKey;
            typ.init = elem => {
                typ.elem = elem;
                typ.wrapped = (elem.kind === $kindArray);
                typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
            };
            break;

        case $kindSlice:
            typ = function (array) {
                if (array.constructor !== typ.nativeArray) {
                    array = new typ.nativeArray(array);
                }
                this.$array = array;
                this.$offset = 0;
                this.$length = array.length;
                this.$capacity = array.length;
                this.$val = this;
            };
            typ.init = elem => {
                typ.elem = elem;
                typ.comparable = false;
                typ.nativeArray = $nativeArray(elem.kind);
                typ.nil = new typ([]);
            };
            break;

        case $kindStruct:
            typ = function (v) { this.$val = v; };
            typ.wrapped = true;
            typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
            typ.ptr.elem = typ;
            typ.ptr.prototype.$get = function () { return this; };
            typ.ptr.prototype.$set = function (v) { typ.copy(this, v); };
            typ.init = (pkgPath, fields) => {
                typ.pkgPath = pkgPath;
                typ.fields = fields;
                fields.forEach(f => {
                    if (!f.typ.comparable) {
                        typ.comparable = false;
                    }
                });
                typ.keyFor = x => {
                    var val = x.$val;
                    return $mapArray(fields, f => {
                        return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
                    }).join("$");
                };
                typ.copy = (dst, src) => {
                    for (var i = 0; i < fields.length; i++) {
                        var f = fields[i];
                        switch (f.typ.kind) {
                            case $kindArray:
                            case $kindStruct:
                                f.typ.copy(dst[f.prop], src[f.prop]);
                                continue;
                            default:
                                dst[f.prop] = src[f.prop];
                                continue;
                        }
                    }
                };
                /* nil value */
                var properties = {};
                fields.forEach(f => {
                    properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
                });
                typ.ptr.nil = Object.create(constructor.prototype, properties);
                typ.ptr.nil.$val = typ.ptr.nil;
                /* methods for embedded fields */
                $addMethodSynthesizer(() => {
                    var synthesizeMethod = (target, m, f) => {
                        if (target.prototype[m.prop] !== undefined) { return; }
                        target.prototype[m.prop] = function(...args) {
                            var v = this.$val[f.prop];
                            if (f.typ === $jsObjectPtr) {
                                v = new $jsObjectPtr(v);
                            }
                            if (v.$val === undefined) {
                                v = new f.typ(v);
                            }
                            return v[m.prop](...args);
                        };
                    };
                    fields.forEach(f => {
                        if (f.embedded) {
                            $methodSet(f.typ).forEach(m => {
                                synthesizeMethod(typ, m, f);
                                synthesizeMethod(typ.ptr, m, f);
                            });
                            $methodSet($ptrType(f.typ)).forEach(m => {
                                synthesizeMethod(typ.ptr, m, f);
                            });
                        }
                    });
                });
            };
            break;

        default:
            $panic(new $String("invalid kind: " + kind));
    }

    switch (kind) {
        case $kindBool:
        case $kindMap:
            typ.zero = () => { return false; };
            break;

        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindUnsafePointer:
        case $kindFloat32:
        case $kindFloat64:
            typ.zero = () => { return 0; };
            break;

        case $kindString:
            typ.zero = () => { return ""; };
            break;

        case $kindInt64:
        case $kindUint64:
        case $kindComplex64:
        case $kindComplex128:
            var zero = new typ(0, 0);
            typ.zero = () => { return zero; };
            break;

        case $kindPtr:
        case $kindSlice:
            typ.zero = () => { return typ.nil; };
            break;

        case $kindChan:
            typ.zero = () => { return $chanNil; };
            break;

        case $kindFunc:
            typ.zero = () => { return $throwNilPointerError; };
            break;

        case $kindInterface:
            typ.zero = () => { return $ifaceNil; };
            break;

        case $kindArray:
            typ.zero = () => {
                var arrayClass = $nativeArray(typ.elem.kind);
                if (arrayClass !== Array) {
                    return new arrayClass(typ.len);
                }
                var array = new Array(typ.len);
                for (var i = 0; i < typ.len; i++) {
                    array[i] = typ.elem.zero();
                }
                return array;
            };
            break;

        case $kindStruct:
            typ.zero = () => { return new typ.ptr(); };
            break;

        default:
            $panic(new $String("invalid kind: " + kind));
    }

    typ.id = $typeIDCounter;
    $typeIDCounter++;
    typ.size = size;
    typ.kind = kind;
    typ.string = string;
    typ.named = named;
    typ.pkg = pkg;
    typ.exported = exported;
    typ.methods = [];
    typ.methodSetCache = null;
    typ.comparable = true;
    return typ;
};

var $methodSet = typ => {
    if (typ.methodSetCache !== null) {
        return typ.methodSetCache;
    }
    var base = {};

    var isPtr = (typ.kind === $kindPtr);
    if (isPtr && typ.elem.kind === $kindInterface) {
        typ.methodSetCache = [];
        return [];
    }

    var current = [{ typ: isPtr ? typ.elem : typ, indirect: isPtr }];

    var seen = {};

    while (current.length > 0) {
        var next = [];
        var mset = [];

        current.forEach(e => {
            if (seen[e.typ.string]) {
                return;
            }
            seen[e.typ.string] = true;

            if (e.typ.named) {
                mset = mset.concat(e.typ.methods);
                if (e.indirect) {
                    mset = mset.concat($ptrType(e.typ).methods);
                }
            }

            switch (e.typ.kind) {
                case $kindStruct:
                    e.typ.fields.forEach(f => {
                        if (f.embedded) {
                            var fTyp = f.typ;
                            var fIsPtr = (fTyp.kind === $kindPtr);
                            next.push({ typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr });
                        }
                    });
                    break;

                case $kindInterface:
                    mset = mset.concat(e.typ.methods);
                    break;
            }
        });

        mset.forEach(m => {
            if (base[m.name] === undefined) {
                base[m.name] = m;
            }
        });

        current = next;
    }

    typ.methodSetCache = [];
    Object.keys(base).sort().forEach(name => {
        typ.methodSetCache.push(base[name]);
    });
    return typ.methodSetCache;
};

var $Bool = $newType(1, $kindBool, "bool", true, "", false, null);
var $Int = $newType(4, $kindInt, "int", true, "", false, null);
var $Int8 = $newType(1, $kindInt8, "int8", true, "", false, null);
var $Int16 = $newType(2, $kindInt16, "int16", true, "", false, null);
var $Int32 = $newType(4, $kindInt32, "int32", true, "", false, null);
var $Int64 = $newType(8, $kindInt64, "int64", true, "", false, null);
var $Uint = $newType(4, $kindUint, "uint", true, "", false, null);
var $Uint8 = $newType(1, $kindUint8, "uint8", true, "", false, null);
var $Uint16 = $newType(2, $kindUint16, "uint16", true, "", false, null);
var $Uint32 = $newType(4, $kindUint32, "uint32", true, "", false, null);
var $Uint64 = $newType(8, $kindUint64, "uint64", true, "", false, null);
var $Uintptr = $newType(4, $kindUintptr, "uintptr", true, "", false, null);
var $Float32 = $newType(4, $kindFloat32, "float32", true, "", false, null);
var $Float64 = $newType(8, $kindFloat64, "float64", true, "", false, null);
var $Complex64 = $newType(8, $kindComplex64, "complex64", true, "", false, null);
var $Complex128 = $newType(16, $kindComplex128, "complex128", true, "", false, null);
var $String = $newType(8, $kindString, "string", true, "", false, null);
var $UnsafePointer = $newType(4, $kindUnsafePointer, "unsafe.Pointer", true, "unsafe", false, null);

var $nativeArray = elemKind => {
    switch (elemKind) {
        case $kindInt:
            return Int32Array;
        case $kindInt8:
            return Int8Array;
        case $kindInt16:
            return Int16Array;
        case $kindInt32:
            return Int32Array;
        case $kindUint:
            return Uint32Array;
        case $kindUint8:
            return Uint8Array;
        case $kindUint16:
            return Uint16Array;
        case $kindUint32:
            return Uint32Array;
        case $kindUintptr:
            return Uint32Array;
        case $kindFloat32:
            return Float32Array;
        case $kindFloat64:
            return Float64Array;
        default:
            return Array;
    }
};
var $toNativeArray = (elemKind, array) => {
    var nativeArray = $nativeArray(elemKind);
    if (nativeArray === Array) {
        return array;
    }
    return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = (elem, len) => {
    var typeKey = elem.id + "$" + len;
    var typ = $arrayTypes[typeKey];
    if (typ === undefined) {
        typ = $newType(elem.size * len, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
        $arrayTypes[typeKey] = typ;
        typ.init(elem, len);
    }
    return typ;
};

var $chanType = (elem, sendOnly, recvOnly) => {
    var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ");
    if (!sendOnly && !recvOnly && (elem.string[0] == "<")) {
        string += "(" + elem.string + ")";
    } else {
        string += elem.string;
    }
    var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
    var typ = elem[field];
    if (typ === undefined) {
        typ = $newType(4, $kindChan, string, false, "", false, null);
        elem[field] = typ;
        typ.init(elem, sendOnly, recvOnly);
    }
    return typ;
};
var $Chan = function (elem, capacity) {
    if (capacity < 0 || capacity > 2147483647) {
        $throwRuntimeError("makechan: size out of range");
    }
    this.$elem = elem;
    this.$capacity = capacity;
    this.$buffer = [];
    this.$sendQueue = [];
    this.$recvQueue = [];
    this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push() { }, shift() { return undefined; }, indexOf() { return -1; } };

var $funcTypes = {};
var $funcType = (params, results, variadic) => {
    var typeKey = $mapArray(params, p => { return p.id; }).join(",") + "$" + $mapArray(results, r => { return r.id; }).join(",") + "$" + variadic;
    var typ = $funcTypes[typeKey];
    if (typ === undefined) {
        var paramTypes = $mapArray(params, p => { return p.string; });
        if (variadic) {
            paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
        }
        var string = "func(" + paramTypes.join(", ") + ")";
        if (results.length === 1) {
            string += " " + results[0].string;
        } else if (results.length > 1) {
            string += " (" + $mapArray(results, r => { return r.string; }).join(", ") + ")";
        }
        typ = $newType(4, $kindFunc, string, false, "", false, null);
        $funcTypes[typeKey] = typ;
        typ.init(params, results, variadic);
    }
    return typ;
};

var $interfaceTypes = {};
var $interfaceType = methods => {
    var typeKey = $mapArray(methods, m => { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
    var typ = $interfaceTypes[typeKey];
    if (typ === undefined) {
        var string = "interface {}";
        if (methods.length !== 0) {
            string = "interface { " + $mapArray(methods, m => {
                return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
            }).join("; ") + " }";
        }
        typ = $newType(8, $kindInterface, string, false, "", false, null);
        $interfaceTypes[typeKey] = typ;
        typ.init(methods);
    }
    return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{ prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false) }]);

var $mapTypes = {};
var $mapType = (key, elem) => {
    var typeKey = key.id + "$" + elem.id;
    var typ = $mapTypes[typeKey];
    if (typ === undefined) {
        typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
        $mapTypes[typeKey] = typ;
        typ.init(key, elem);
    }
    return typ;
};
var $makeMap = (keyForFunc, entries) => {
    var m = new Map();
    for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        m.set(keyForFunc(e.k), e);
    }
    return m;
};

var $ptrType = elem => {
    var typ = elem.ptr;
    if (typ === undefined) {
        typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
        elem.ptr = typ;
        typ.init(elem);
    }
    return typ;
};

var $newDataPointer = (data, constructor) => {
    if (constructor.elem.kind === $kindStruct) {
        return data;
    }
    return new constructor(() => { return data; }, v => { data = v; });
};

var $indexPtr = (array, index, constructor) => {
    if (array.buffer) {
        // Pointers to the same underlying ArrayBuffer share cache.
        var cache = array.buffer.$ptr = array.buffer.$ptr || {};
        // Pointers of different primitive types are non-comparable and stored in different caches.
        var typeCache = cache[array.name] = cache[array.name] || {};
        var cacheIdx = array.BYTES_PER_ELEMENT * index + array.byteOffset;
        return typeCache[cacheIdx] || (typeCache[cacheIdx] = new constructor(() => { return array[index]; }, v => { array[index] = v; }));
    } else {
        array.$ptr = array.$ptr || {};
        return array.$ptr[index] || (array.$ptr[index] = new constructor(() => { return array[index]; }, v => { array[index] = v; }));
    }
};

var $sliceType = elem => {
    var typ = elem.slice;
    if (typ === undefined) {
        typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
        elem.slice = typ;
        typ.init(elem);
    }
    return typ;
};
var $makeSlice = (typ, length, capacity = length) => {
    if (length < 0 || length > 2147483647) {
        $throwRuntimeError("makeslice: len out of range");
    }
    if (capacity < 0 || capacity < length || capacity > 2147483647) {
        $throwRuntimeError("makeslice: cap out of range");
    }
    var array = new typ.nativeArray(capacity);
    if (typ.nativeArray === Array) {
        for (var i = 0; i < capacity; i++) {
            array[i] = typ.elem.zero();
        }
    }
    var slice = new typ(array);
    slice.$length = length;
    return slice;
};

var $structTypes = {};
var $structType = (pkgPath, fields) => {
    var typeKey = $mapArray(fields, f => { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
    var typ = $structTypes[typeKey];
    if (typ === undefined) {
        var string = "struct { " + $mapArray(fields, f => {
            var str = f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
            if (f.embedded) {
                return str;
            }
            return f.name + " " + str;
        }).join("; ") + " }";
        if (fields.length === 0) {
            string = "struct {}";
        }
        typ = $newType(0, $kindStruct, string, false, "", false, function(...args) {
            this.$val = this;
            for (var i = 0; i < fields.length; i++) {
                var f = fields[i];
                if (f.name == '_') {
                    continue;
                }
                var arg = args[i];
                this[f.prop] = arg !== undefined ? arg : f.typ.zero();
            }
        });
        $structTypes[typeKey] = typ;
        typ.init(pkgPath, fields);
    }
    return typ;
};

var $assertType = (value, type, returnTuple) => {
    var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
    if (value === $ifaceNil) {
        ok = false;
    } else if (!isInterface) {
        ok = value.constructor === type;
    } else {
        var valueTypeString = value.constructor.string;
        ok = type.implementedBy[valueTypeString];
        if (ok === undefined) {
            ok = true;
            var valueMethodSet = $methodSet(value.constructor);
            var interfaceMethods = type.methods;
            for (var i = 0; i < interfaceMethods.length; i++) {
                var tm = interfaceMethods[i];
                var found = false;
                for (var j = 0; j < valueMethodSet.length; j++) {
                    var vm = valueMethodSet[j];
                    if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    ok = false;
                    type.missingMethodFor[valueTypeString] = tm.name;
                    break;
                }
            }
            type.implementedBy[valueTypeString] = ok;
        }
        if (!ok) {
            missingMethod = type.missingMethodFor[valueTypeString];
        }
    }

    if (!ok) {
        if (returnTuple) {
            return [type.zero(), false];
        }
        $panic(new $packages["runtime"].TypeAssertionError.ptr(
            $packages["runtime"]._type.ptr.nil,
            (value === $ifaceNil ? $packages["runtime"]._type.ptr.nil : new $packages["runtime"]._type.ptr(value.constructor.string)),
            new $packages["runtime"]._type.ptr(type.string),
            missingMethod));
    }

    if (!isInterface) {
        value = value.$val;
    }
    if (type === $jsObjectPtr) {
        value = value.object;
    }
    return returnTuple ? [value, true] : value;
};
var $stackDepthOffset = 0;
var $getStackDepth = () => {
    var err = new Error();
    if (err.stack === undefined) {
        return undefined;
    }
    return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = (deferred, jsErr, fromPanic) => {
    if (!fromPanic && deferred !== null && $curGoroutine.deferStack.indexOf(deferred) == -1) {
        throw jsErr;
    }
    if (jsErr !== null) {
        var newErr = null;
        try {
            $panic(new $jsErrorPtr(jsErr));
        } catch (err) {
            newErr = err;
        }
        $callDeferred(deferred, newErr);
        return;
    }
    if ($curGoroutine.asleep) {
        return;
    }

    $stackDepthOffset--;
    var outerPanicStackDepth = $panicStackDepth;
    var outerPanicValue = $panicValue;

    var localPanicValue = $curGoroutine.panicStack.pop();
    if (localPanicValue !== undefined) {
        $panicStackDepth = $getStackDepth();
        $panicValue = localPanicValue;
    }

    try {
        while (true) {
            if (deferred === null) {
                deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
                if (deferred === undefined) {
                    /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
                    $panicStackDepth = null;
                    if (localPanicValue.Object instanceof Error) {
                        throw localPanicValue.Object;
                    }
                    var msg;
                    if (localPanicValue.constructor === $String) {
                        msg = localPanicValue.$val;
                    } else if (localPanicValue.Error !== undefined) {
                        msg = localPanicValue.Error();
                    } else if (localPanicValue.String !== undefined) {
                        msg = localPanicValue.String();
                    } else {
                        msg = localPanicValue;
                    }
                    throw new Error(msg);
                }
            }
            var call = deferred.pop();
            if (call === undefined) {
                $curGoroutine.deferStack.pop();
                if (localPanicValue !== undefined) {
                    deferred = null;
                    continue;
                }
                return;
            }
            var r = call[0].apply(call[2], call[1]);
            if (r && r.$blk !== undefined) {
                deferred.push([r.$blk, [], r]);
                if (fromPanic) {
                    throw null;
                }
                return;
            }

            if (localPanicValue !== undefined && $panicStackDepth === null) {
                /* error was recovered */
                if (fromPanic) {
                    throw null;
                }
                return;
            }
        }
    } catch (e) {
        // Deferred function threw a JavaScript exception or tries to unwind stack
        // to the point where a panic was handled.
        if (fromPanic) {
            // Re-throw the exception to reach deferral execution call at the end
            // of the function.
            throw e;
        }
        // We are at the end of the function, handle the error or re-throw to
        // continue unwinding if necessary, or simply stop unwinding if we got far
        // enough.
        $callDeferred(deferred, e, fromPanic);
    } finally {
        if (localPanicValue !== undefined) {
            if ($panicStackDepth !== null) {
                $curGoroutine.panicStack.push(localPanicValue);
            }
            $panicStackDepth = outerPanicStackDepth;
            $panicValue = outerPanicValue;
        }
        $stackDepthOffset++;
    }
};

var $panic = value => {
    $curGoroutine.panicStack.push(value);
    $callDeferred(null, null, true);
};
var $recover = () => {
    if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
        return $ifaceNil;
    }
    $panicStackDepth = null;
    return $panicValue;
};
var $throw = err => { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true, $exportedFunctions = 0;
var $mainFinished = false;
var $go = (fun, args) => {
    $totalGoroutines++;
    $awakeGoroutines++;
    var $goroutine = () => {
        try {
            $curGoroutine = $goroutine;
            var r = fun(...args);
            if (r && r.$blk !== undefined) {
                fun = () => { return r.$blk(); };
                args = [];
                return;
            }
            $goroutine.exit = true;
        } catch (err) {
            if (!$goroutine.exit) {
                throw err;
            }
        } finally {
            $curGoroutine = $noGoroutine;
            if ($goroutine.exit) { /* also set by runtime.Goexit() */
                $totalGoroutines--;
                $goroutine.asleep = true;
            }
            if ($goroutine.asleep) {
                $awakeGoroutines--;
                if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock && $exportedFunctions === 0) {
                    console.error("fatal error: all goroutines are asleep - deadlock!");
                    if ($global.process !== undefined) {
                        $global.process.exit(2);
                    }
                }
            }
        }
    };
    $goroutine.asleep = false;
    $goroutine.exit = false;
    $goroutine.deferStack = [];
    $goroutine.panicStack = [];
    $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = () => {
    // For nested setTimeout calls browsers enforce 4ms minimum delay. We minimize
    // the effect of this penalty by queueing the timer preemptively before we run
    // the goroutines, and later cancelling it if it turns out unneeded. See:
    // https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#nested_timeouts
    var nextRun = setTimeout($runScheduled);
    try {
        var start = Date.now();
        var r;
        while ((r = $scheduled.shift()) !== undefined) {
            r();
            // We need to interrupt this loop in order to allow the event loop to
            // process timers, IO, etc. However, invoking scheduling through
            // setTimeout is ~1000 times more expensive, so we amortize this cost by
            // looping until the 4ms minimal delay has elapsed (assuming there are
            // scheduled goroutines to run), and then yield to the event loop.
            var elapsed = Date.now() - start;
            if (elapsed > 4 || elapsed < 0) { break; }
        }
    } finally {
        if ($scheduled.length == 0) {
            // Cancel scheduling pass if there's nothing to run.
            clearTimeout(nextRun);
        }
    }
};

var $schedule = goroutine => {
    if (goroutine.asleep) {
        goroutine.asleep = false;
        $awakeGoroutines++;
    }
    $scheduled.push(goroutine);
    if ($curGoroutine === $noGoroutine) {
        $runScheduled();
    }
};

var $setTimeout = (f, t) => {
    $awakeGoroutines++;
    return setTimeout(() => {
        $awakeGoroutines--;
        f();
    }, t);
};

var $block = () => {
    if ($curGoroutine === $noGoroutine) {
        $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
    }
    $curGoroutine.asleep = true;
};

var $restore = (context, params) => {
    if (context !== undefined && context.$blk !== undefined) {
        return context;
    }
    return params;
}

var $send = (chan, value) => {
    if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
    }
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv !== undefined) {
        queuedRecv([value, true]);
        return;
    }
    if (chan.$buffer.length < chan.$capacity) {
        chan.$buffer.push(value);
        return;
    }

    var thisGoroutine = $curGoroutine;
    var closedDuringSend;
    chan.$sendQueue.push(closed => {
        closedDuringSend = closed;
        $schedule(thisGoroutine);
        return value;
    });
    $block();
    return {
        $blk() {
            if (closedDuringSend) {
                $throwRuntimeError("send on closed channel");
            }
        }
    };
};
var $recv = chan => {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend !== undefined) {
        chan.$buffer.push(queuedSend(false));
    }
    var bufferedValue = chan.$buffer.shift();
    if (bufferedValue !== undefined) {
        return [bufferedValue, true];
    }
    if (chan.$closed) {
        return [chan.$elem.zero(), false];
    }

    var thisGoroutine = $curGoroutine;
    var f = { $blk() { return this.value; } };
    var queueEntry = v => {
        f.value = v;
        $schedule(thisGoroutine);
    };
    chan.$recvQueue.push(queueEntry);
    $block();
    return f;
};
var $close = chan => {
    if (chan.$closed) {
        $throwRuntimeError("close of closed channel");
    }
    chan.$closed = true;
    while (true) {
        var queuedSend = chan.$sendQueue.shift();
        if (queuedSend === undefined) {
            break;
        }
        queuedSend(true); /* will panic */
    }
    while (true) {
        var queuedRecv = chan.$recvQueue.shift();
        if (queuedRecv === undefined) {
            break;
        }
        queuedRecv([chan.$elem.zero(), false]);
    }
};
var $select = comms => {
    var ready = [];
    var selection = -1;
    for (var i = 0; i < comms.length; i++) {
        var comm = comms[i];
        var chan = comm[0];
        switch (comm.length) {
            case 0: /* default */
                selection = i;
                break;
            case 1: /* recv */
                if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
                    ready.push(i);
                }
                break;
            case 2: /* send */
                if (chan.$closed) {
                    $throwRuntimeError("send on closed channel");
                }
                if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
                    ready.push(i);
                }
                break;
        }
    }

    if (ready.length !== 0) {
        selection = ready[Math.floor(Math.random() * ready.length)];
    }
    if (selection !== -1) {
        var comm = comms[selection];
        switch (comm.length) {
            case 0: /* default */
                return [selection];
            case 1: /* recv */
                return [selection, $recv(comm[0])];
            case 2: /* send */
                $send(comm[0], comm[1]);
                return [selection];
        }
    }

    var entries = [];
    var thisGoroutine = $curGoroutine;
    var f = { $blk() { return this.selection; } };
    var removeFromQueues = () => {
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            var queue = entry[0];
            var index = queue.indexOf(entry[1]);
            if (index !== -1) {
                queue.splice(index, 1);
            }
        }
    };
    for (var i = 0; i < comms.length; i++) {
        (i => {
            var comm = comms[i];
            switch (comm.length) {
                case 1: /* recv */
                    var queueEntry = value => {
                        f.selection = [i, value];
                        removeFromQueues();
                        $schedule(thisGoroutine);
                    };
                    entries.push([comm[0].$recvQueue, queueEntry]);
                    comm[0].$recvQueue.push(queueEntry);
                    break;
                case 2: /* send */
                    var queueEntry = () => {
                        if (comm[0].$closed) {
                            $throwRuntimeError("send on closed channel");
                        }
                        f.selection = [i];
                        removeFromQueues();
                        $schedule(thisGoroutine);
                        return comm[1];
                    };
                    entries.push([comm[0].$sendQueue, queueEntry]);
                    comm[0].$sendQueue.push(queueEntry);
                    break;
            }
        })(i);
    }
    $block();
    return f;
};
var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = t => {
    switch (t.kind) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindFloat32:
        case $kindFloat64:
            return false;
        default:
            return t !== $jsObjectPtr;
    }
};

var $externalize = (v, t, makeWrapper) => {
    if (t === $jsObjectPtr) {
        return v;
    }
    switch (t.kind) {
        case $kindBool:
        case $kindInt:
        case $kindInt8:
        case $kindInt16:
        case $kindInt32:
        case $kindUint:
        case $kindUint8:
        case $kindUint16:
        case $kindUint32:
        case $kindUintptr:
        case $kindFloat32:
        case $kindFloat64:
            return v;
        case $kindInt64:
        case $kindUint64:
            return $flatten64(v);
        case $kindArray:
            if ($needsExternalization(t.elem)) {
                return $mapArray(v, e => { return $externalize(e, t.elem, makeWrapper); });
            }
            return v;
        case $kindFunc:
            return $externalizeFunction(v, t, false, makeWrapper);
        case $kindInterface:
            if (v === $ifaceNil) {
                return null;
            }
            if (v.constructor === $jsObjectPtr) {
                return v.$val.object;
            }
            return $externalize(v.$val, v.constructor, makeWrapper);
        case $kindMap:
            if (v.keys === undefined) {
                return null;
            }
            var m = {};
            var keys = Array.from(v.keys());
            for (var i = 0; i < keys.length; i++) {
                var entry = v.get(keys[i]);
                m[$externalize(entry.k, t.key, makeWrapper)] = $externalize(entry.v, t.elem, makeWrapper);
            }
            return m;
        case $kindPtr:
            if (v === t.nil) {
                return null;
            }
            return $externalize(v.$get(), t.elem, makeWrapper);
        case $kindSlice:
            if (v === v.constructor.nil) {
                return null;
            }
            if ($needsExternalization(t.elem)) {
                return $mapArray($sliceToNativeArray(v), e => { return $externalize(e, t.elem, makeWrapper); });
            }
            return $sliceToNativeArray(v);
        case $kindString:
            if ($isASCII(v)) {
                return v;
            }
            var s = "", r;
            for (var i = 0; i < v.length; i += r[1]) {
                r = $decodeRune(v, i);
                var c = r[0];
                if (c > 0xFFFF) {
                    var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
                    var l = (c - 0x10000) % 0x400 + 0xDC00;
                    s += String.fromCharCode(h, l);
                    continue;
                }
                s += String.fromCharCode(c);
            }
            return s;
        case $kindStruct:
            var timePkg = $packages["time"];
            if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
                var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
                return new Date($flatten64(milli));
            }

            var noJsObject = {};
            var searchJsObject = (v, t) => {
                if (t === $jsObjectPtr) {
                    return v;
                }
                switch (t.kind) {
                    case $kindPtr:
                        if (v === t.nil) {
                            return noJsObject;
                        }
                        return searchJsObject(v.$get(), t.elem);
                    case $kindStruct:
                        if (t.fields.length === 0) {
                            return noJsObject;
                        }
                        var f = t.fields[0];
                        return searchJsObject(v[f.prop], f.typ);
                    case $kindInterface:
                        return searchJsObject(v.$val, v.constructor);
                    default:
                        return noJsObject;
                }
            };
            var o = searchJsObject(v, t);
            if (o !== noJsObject) {
                return o;
            }

            if (makeWrapper !== undefined) {
                return makeWrapper(v);
            }

            o = {};
            for (var i = 0; i < t.fields.length; i++) {
                var f = t.fields[i];
                if (!f.exported) {
                    continue;
                }
                o[f.name] = $externalize(v[f.prop], f.typ, makeWrapper);
            }
            return o;
    }
    $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = (v, t, passThis, makeWrapper) => {
    if (v === $throwNilPointerError) {
        return null;
    }
    if (v.$externalizeWrapper === undefined) {
        $checkForDeadlock = false;
        v.$externalizeWrapper = function () {
            var args = [];
            for (var i = 0; i < t.params.length; i++) {
                if (t.variadic && i === t.params.length - 1) {
                    var vt = t.params[i].elem, varargs = [];
                    for (var j = i; j < arguments.length; j++) {
                        varargs.push($internalize(arguments[j], vt, makeWrapper));
                    }
                    args.push(new (t.params[i])(varargs));
                    break;
                }
                args.push($internalize(arguments[i], t.params[i], makeWrapper));
            }
            var result = v.apply(passThis ? this : undefined, args);
            switch (t.results.length) {
                case 0:
                    return;
                case 1:
                    return $externalize($copyIfRequired(result, t.results[0]), t.results[0], makeWrapper);
                default:
                    for (var i = 0; i < t.results.length; i++) {
                        result[i] = $externalize($copyIfRequired(result[i], t.results[i]), t.results[i], makeWrapper);
                    }
                    return result;
            }
        };
    }
    return v.$externalizeWrapper;
};

var $internalize = (v, t, recv, seen, makeWrapper) => {
    if (t === $jsObjectPtr) {
        return v;
    }
    if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
    }
    if (v && v.__internal_object__ !== undefined) {
        return $assertType(v.__internal_object__, t, false);
    }
    var timePkg = $packages["time"];
    if (timePkg !== undefined && t === timePkg.Time) {
        if (!(v !== null && v !== undefined && v.constructor === Date)) {
            $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
        }
        return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
    }

    // Cache for values we've already internalized in order to deal with circular
    // references.
    if (seen === undefined) { seen = new Map(); }
    if (!seen.has(t)) { seen.set(t, new Map()); }
    if (seen.get(t).has(v)) { return seen.get(t).get(v); }

    switch (t.kind) {
        case $kindBool:
            return !!v;
        case $kindInt:
            return parseInt(v);
        case $kindInt8:
            return parseInt(v) << 24 >> 24;
        case $kindInt16:
            return parseInt(v) << 16 >> 16;
        case $kindInt32:
            return parseInt(v) >> 0;
        case $kindUint:
            return parseInt(v);
        case $kindUint8:
            return parseInt(v) << 24 >>> 24;
        case $kindUint16:
            return parseInt(v) << 16 >>> 16;
        case $kindUint32:
        case $kindUintptr:
            return parseInt(v) >>> 0;
        case $kindInt64:
        case $kindUint64:
            return new t(0, v);
        case $kindFloat32:
        case $kindFloat64:
            return parseFloat(v);
        case $kindArray:
            if (v.length !== t.len) {
                $throwRuntimeError("got array with wrong size from JavaScript native");
            }
            return $mapArray(v, e => { return $internalize(e, t.elem, makeWrapper); });
        case $kindFunc:
            return function () {
                var args = [];
                for (var i = 0; i < t.params.length; i++) {
                    if (t.variadic && i === t.params.length - 1) {
                        var vt = t.params[i].elem, varargs = arguments[i];
                        for (var j = 0; j < varargs.$length; j++) {
                            args.push($externalize(varargs.$array[varargs.$offset + j], vt, makeWrapper));
                        }
                        break;
                    }
                    args.push($externalize(arguments[i], t.params[i], makeWrapper));
                }
                var result = v.apply(recv, args);
                switch (t.results.length) {
                    case 0:
                        return;
                    case 1:
                        return $internalize(result, t.results[0], makeWrapper);
                    default:
                        for (var i = 0; i < t.results.length; i++) {
                            result[i] = $internalize(result[i], t.results[i], makeWrapper);
                        }
                        return result;
                }
            };
        case $kindInterface:
            if (t.methods.length !== 0) {
                $throwRuntimeError("cannot internalize " + t.string);
            }
            if (v === null) {
                return $ifaceNil;
            }
            if (v === undefined) {
                return new $jsObjectPtr(undefined);
            }
            switch (v.constructor) {
                case Int8Array:
                    return new ($sliceType($Int8))(v);
                case Int16Array:
                    return new ($sliceType($Int16))(v);
                case Int32Array:
                    return new ($sliceType($Int))(v);
                case Uint8Array:
                    return new ($sliceType($Uint8))(v);
                case Uint16Array:
                    return new ($sliceType($Uint16))(v);
                case Uint32Array:
                    return new ($sliceType($Uint))(v);
                case Float32Array:
                    return new ($sliceType($Float32))(v);
                case Float64Array:
                    return new ($sliceType($Float64))(v);
                case Array:
                    return $internalize(v, $sliceType($emptyInterface), makeWrapper);
                case Boolean:
                    return new $Bool(!!v);
                case Date:
                    if (timePkg === undefined) {
                        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
                        return new $jsObjectPtr(v);
                    }
                    return new timePkg.Time($internalize(v, timePkg.Time, makeWrapper));
                case ((() => { })).constructor: // is usually Function, but in Chrome extensions it is something else
                    var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
                    return new funcType($internalize(v, funcType, makeWrapper));
                case Number:
                    return new $Float64(parseFloat(v));
                case String:
                    return new $String($internalize(v, $String, makeWrapper));
                default:
                    if ($global.Node && v instanceof $global.Node) {
                        return new $jsObjectPtr(v);
                    }
                    var mapType = $mapType($String, $emptyInterface);
                    return new mapType($internalize(v, mapType, recv, seen, makeWrapper));
            }
        case $kindMap:
            var m = new Map();
            seen.get(t).set(v, m);
            var keys = $keys(v);
            for (var i = 0; i < keys.length; i++) {
                var k = $internalize(keys[i], t.key, recv, seen, makeWrapper);
                m.set(t.key.keyFor(k), { k, v: $internalize(v[keys[i]], t.elem, recv, seen, makeWrapper) });
            }
            return m;
        case $kindPtr:
            if (t.elem.kind === $kindStruct) {
                return $internalize(v, t.elem, makeWrapper);
            }
        case $kindSlice:
            return new t($mapArray(v, e => { return $internalize(e, t.elem, makeWrapper); }));
        case $kindString:
            v = String(v);
            if ($isASCII(v)) {
                return v;
            }
            var s = "";
            var i = 0;
            while (i < v.length) {
                var h = v.charCodeAt(i);
                if (0xD800 <= h && h <= 0xDBFF) {
                    var l = v.charCodeAt(i + 1);
                    var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
                    s += $encodeRune(c);
                    i += 2;
                    continue;
                }
                s += $encodeRune(h);
                i++;
            }
            return s;
        case $kindStruct:
            var noJsObject = {};
            var searchJsObject = t => {
                if (t === $jsObjectPtr) {
                    return v;
                }
                if (t === $jsObjectPtr.elem) {
                    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
                }
                switch (t.kind) {
                    case $kindPtr:
                        return searchJsObject(t.elem);
                    case $kindStruct:
                        if (t.fields.length === 0) {
                            return noJsObject;
                        }
                        var f = t.fields[0];
                        var o = searchJsObject(f.typ);
                        if (o !== noJsObject) {
                            var n = new t.ptr();
                            n[f.prop] = o;
                            return n;
                        }
                        return noJsObject;
                    default:
                        return noJsObject;
                }
            };
            var o = searchJsObject(t);
            if (o !== noJsObject) {
                return o;
            }
            var n = new t.ptr();
            for (var i = 0; i < t.fields.length; i++) {
              var f = t.fields[i];
      
              if (!f.exported) {
                continue;
              }
              var jsProp = v[f.name];
      
              n[f.prop] = $internalize(jsProp, f.typ, recv, seen, makeWrapper);
            }
      
            return n;
    }
    $throwRuntimeError("cannot internalize " + t.string);
};

var $copyIfRequired = (v, typ) => {
    // interface values
    if (v && v.constructor && v.constructor.copy) {
        return new v.constructor($clone(v.$val, v.constructor))
    }
    // array and struct values
    if (typ.copy) {
        var clone = typ.zero();
        typ.copy(clone, v);
        return clone;
    }
    return v;
}

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = s => {
    for (var i = 0; i < s.length; i++) {
        if (s.charCodeAt(i) >= 128) {
            return false;
        }
    }
    return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "Object", embedded: true, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, _type, TypeAssertionError, basicFrame, Frames, Frame, Func, errorString, ptrType, sliceType, ptrType$1, structType, sliceType$1, sliceType$2, ptrType$2, ptrType$3, knownPositions, positionCounters, hiddenFrames, knownFrames, buildVersion, init, GOROOT, registerPosition, itoa, callstack, parseCallstack, ParseCallFrame, Callers, CallersFrames, SetFinalizer, FuncForPC, KeepAlive, throw$1, nanotime, fastrand;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	_type = $pkg._type = $newType(0, $kindStruct, "runtime._type", true, "runtime", false, function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = "";
			return;
		}
		this.str = str_;
	});
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(_interface_, concrete_, asserted_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this._interface = ptrType$1.nil;
			this.concrete = ptrType$1.nil;
			this.asserted = ptrType$1.nil;
			this.missingMethod = "";
			return;
		}
		this._interface = _interface_;
		this.concrete = concrete_;
		this.asserted = asserted_;
		this.missingMethod = missingMethod_;
	});
	basicFrame = $pkg.basicFrame = $newType(0, $kindStruct, "runtime.basicFrame", true, "runtime", false, function(FuncName_, File_, Line_, Col_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FuncName = "";
			this.File = "";
			this.Line = 0;
			this.Col = 0;
			return;
		}
		this.FuncName = FuncName_;
		this.File = File_;
		this.Line = Line_;
		this.Col = Col_;
	});
	Frames = $pkg.Frames = $newType(0, $kindStruct, "runtime.Frames", true, "runtime", true, function(frames_, current_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.frames = sliceType$2.nil;
			this.current = 0;
			return;
		}
		this.frames = frames_;
		this.current = current_;
	});
	Frame = $pkg.Frame = $newType(0, $kindStruct, "runtime.Frame", true, "runtime", true, function(PC_, Func_, Function_, File_, Line_, Entry_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PC = 0;
			this.Func = ptrType.nil;
			this.Function = "";
			this.File = "";
			this.Line = 0;
			this.Entry = 0;
			return;
		}
		this.PC = PC_;
		this.Func = Func_;
		this.Function = Function_;
		this.File = File_;
		this.Line = Line_;
		this.Entry = Entry_;
	});
	Func = $pkg.Func = $newType(0, $kindStruct, "runtime.Func", true, "runtime", true, function(name_, file_, line_, opaque_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.file = "";
			this.line = 0;
			this.opaque = new structType.ptr();
			return;
		}
		this.name = name_;
		this.file = file_;
		this.line = line_;
		this.opaque = opaque_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType = $ptrType(Func);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType(_type);
	structType = $structType("", []);
	sliceType$1 = $sliceType(basicFrame);
	sliceType$2 = $sliceType(Frame);
	ptrType$2 = $ptrType(TypeAssertionError);
	ptrType$3 = $ptrType(Frames);
	_type.ptr.prototype.string = function() {
		var t;
		t = this;
		return t.str;
	};
	_type.prototype.string = function() { return this.$val.string(); };
	_type.ptr.prototype.pkgpath = function() {
		var t;
		t = this;
		return "";
	};
	_type.prototype.pkgpath = function() { return this.$val.pkgpath(); };
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var as, cs, e, inter, msg;
		e = this;
		inter = "interface";
		if (!(e._interface === ptrType$1.nil)) {
			inter = e._interface.string();
		}
		as = e.asserted.string();
		if (e.concrete === ptrType$1.nil) {
			return "interface conversion: " + inter + " is nil, not " + as;
		}
		cs = e.concrete.string();
		if (e.missingMethod === "") {
			msg = "interface conversion: " + inter + " is " + cs + ", not " + as;
			if (cs === as) {
				if (!(e.concrete.pkgpath() === e.asserted.pkgpath())) {
					msg = msg + (" (types from different packages)");
				} else {
					msg = msg + (" (types from different scopes)");
				}
			}
			return msg;
		}
		return "interface conversion: " + cs + " is not " + as + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = throw$1;
		buildVersion = $internalize($goVersion, $String);
		e = $ifaceNil;
		e = new TypeAssertionError.ptr(ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, "");
		$unused(e);
	};
	GOROOT = function() {
		var process, v, v$1;
		process = $global.process;
		if (process === undefined || process.env === undefined) {
			return "/";
		}
		v = process.env.GOPHERJS_GOROOT;
		if (!(v === undefined) && !($internalize(v, $String) === "")) {
			return $internalize(v, $String);
		} else {
			v$1 = process.env.GOROOT;
			if (!(v$1 === undefined) && !($internalize(v$1, $String) === "")) {
				return $internalize(v$1, $String);
			}
		}
		return "/usr/local/go";
	};
	$pkg.GOROOT = GOROOT;
	registerPosition = function(funcName, file, line, col) {
		var _entry, _key, _tuple, col, f, file, found, funcName, key, line, pc, pc$1;
		key = file + ":" + itoa(line) + ":" + itoa(col);
		_tuple = (_entry = $mapIndex(knownPositions,$String.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [0, false]);
		pc = _tuple[0];
		found = _tuple[1];
		if (found) {
			return pc;
		}
		f = new Func.ptr(funcName, file, line, new structType.ptr());
		pc$1 = ((positionCounters.$length >>> 0));
		positionCounters = $append(positionCounters, f);
		_key = key; (knownPositions || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: pc$1 });
		return pc$1;
	};
	itoa = function(i) {
		var i;
		return $internalize(new ($global.String)(i), $String);
	};
	callstack = function(skip, limit) {
		var limit, lines, skip;
		skip = (skip + 1 >> 0) + 1 >> 0;
		lines = new ($global.Error)().stack.split($externalize("\n", $String)).slice(skip, skip + limit >> 0);
		return parseCallstack(lines);
	};
	parseCallstack = function(lines) {
		var _entry, _entry$1, _tuple, alias, frame, frames, i, l, lines, ok;
		frames = new sliceType$1([]);
		l = $parseInt(lines.length);
		i = 0;
		while (true) {
			if (!(i < l)) { break; }
			frame = $clone(ParseCallFrame(lines[i]), basicFrame);
			if ((_entry = $mapIndex(hiddenFrames,$String.keyFor(frame.FuncName)), _entry !== undefined ? _entry.v : false)) {
				i = i + (1) >> 0;
				continue;
			}
			_tuple = (_entry$1 = $mapIndex(knownFrames,$String.keyFor(frame.FuncName)), _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]);
			alias = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				frame.FuncName = alias;
			}
			frames = $append(frames, frame);
			if (frame.FuncName === "runtime.goexit") {
				break;
			}
			i = i + (1) >> 0;
		}
		return frames;
	};
	ParseCallFrame = function(info) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, col, file, fn, funcName, idx, info, line, openIdx, parts, parts$1, parts$2, pos, split;
		if (($parseInt(info.indexOf($externalize("@", $String))) >> 0) >= 0) {
			split = new ($global.RegExp)($externalize("[@:]", $String));
			parts = info.split(split);
			return new basicFrame.ptr($internalize(parts[0], $String), $internalize(parts.slice(1, $parseInt(parts.length) - 2 >> 0).join($externalize(":", $String)), $String), $parseInt(parts[($parseInt(parts.length) - 2 >> 0)]) >> 0, $parseInt(parts[($parseInt(parts.length) - 1 >> 0)]) >> 0);
		}
		openIdx = $parseInt(info.lastIndexOf($externalize("(", $String))) >> 0;
		if (openIdx === -1) {
			parts$1 = info.split($externalize(":", $String));
			return new basicFrame.ptr("<none>", $internalize(parts$1.slice(0, $parseInt(parts$1.length) - 2 >> 0).join($externalize(":", $String)).replace(new ($global.RegExp)($externalize("^\\s*at ", $String)), $externalize("", $String)), $String), $parseInt(parts$1[($parseInt(parts$1.length) - 2 >> 0)]) >> 0, $parseInt(parts$1[($parseInt(parts$1.length) - 1 >> 0)]) >> 0);
		}
		_tmp = "";
		_tmp$1 = "";
		file = _tmp;
		funcName = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		line = _tmp$2;
		col = _tmp$3;
		pos = info.substring(openIdx + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0);
		parts$2 = pos.split($externalize(":", $String));
		if ($internalize(pos, $String) === "<anonymous>") {
			file = "<anonymous>";
		} else {
			file = $internalize(parts$2.slice(0, $parseInt(parts$2.length) - 2 >> 0).join($externalize(":", $String)), $String);
			line = $parseInt(parts$2[($parseInt(parts$2.length) - 2 >> 0)]) >> 0;
			col = $parseInt(parts$2[($parseInt(parts$2.length) - 1 >> 0)]) >> 0;
		}
		fn = info.substring(($parseInt(info.indexOf($externalize("at ", $String))) >> 0) + 3 >> 0, $parseInt(info.indexOf($externalize(" (", $String))) >> 0);
		idx = $parseInt(fn.indexOf($externalize("[as ", $String))) >> 0;
		if (idx > 0) {
			fn = fn.substring(idx + 4 >> 0, fn.indexOf($externalize("]", $String)));
		}
		funcName = $internalize(fn, $String);
		return new basicFrame.ptr(funcName, file, line, col);
	};
	$pkg.ParseCallFrame = ParseCallFrame;
	Callers = function(skip, pc) {
		var _i, _ref, frame, frames, i, pc, skip;
		frames = callstack(skip, pc.$length);
		_ref = frames;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			frame = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), basicFrame);
			((i < 0 || i >= pc.$length) ? ($throwRuntimeError("index out of range"), undefined) : pc.$array[pc.$offset + i] = registerPosition(frame.FuncName, frame.File, frame.Line, frame.Col));
			_i++;
		}
		return frames.$length;
	};
	$pkg.Callers = Callers;
	CallersFrames = function(callers) {
		var _i, _ref, callers, fun, pc, result;
		result = new Frames.ptr(sliceType$2.nil, 0);
		_ref = callers;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pc = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			fun = FuncForPC(pc);
			result.frames = $append(result.frames, new Frame.ptr(pc, fun, fun.name, fun.file, fun.line, fun.Entry()));
			_i++;
		}
		return result;
	};
	$pkg.CallersFrames = CallersFrames;
	Frames.ptr.prototype.Next = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ci, f, frame, more, x, x$1;
		frame = new Frame.ptr(0, ptrType.nil, "", "", 0, 0);
		more = false;
		ci = this;
		if (ci.current >= ci.frames.$length) {
			_tmp = new Frame.ptr(0, ptrType.nil, "", "", 0, 0);
			_tmp$1 = false;
			Frame.copy(frame, _tmp);
			more = _tmp$1;
			return [frame, more];
		}
		f = $clone((x = ci.frames, x$1 = ci.current, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), Frame);
		ci.current = ci.current + (1) >> 0;
		_tmp$2 = $clone(f, Frame);
		_tmp$3 = ci.current < ci.frames.$length;
		Frame.copy(frame, _tmp$2);
		more = _tmp$3;
		return [frame, more];
	};
	Frames.prototype.Next = function() { return this.$val.Next(); };
	SetFinalizer = function(x, f) {
		var f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	Func.ptr.prototype.Entry = function() {
		return 0;
	};
	Func.prototype.Entry = function() { return this.$val.Entry(); };
	Func.ptr.prototype.FileLine = function(pc) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, f, file, line, pc;
		file = "";
		line = 0;
		f = this;
		if (f === ptrType.nil) {
			_tmp = "";
			_tmp$1 = 0;
			file = _tmp;
			line = _tmp$1;
			return [file, line];
		}
		_tmp$2 = f.file;
		_tmp$3 = f.line;
		file = _tmp$2;
		line = _tmp$3;
		return [file, line];
	};
	Func.prototype.FileLine = function(pc) { return this.$val.FileLine(pc); };
	Func.ptr.prototype.Name = function() {
		var f;
		f = this;
		if (f === ptrType.nil || f.name === "") {
			return "<unknown>";
		}
		return f.name;
	};
	Func.prototype.Name = function() { return this.$val.Name(); };
	FuncForPC = function(pc) {
		var ipc, pc;
		ipc = ((pc >> 0));
		if (ipc >= positionCounters.$length) {
			$panic(new $String("GopherJS: pc=" + itoa(ipc) + " is out of range of known position counters"));
		}
		return ((ipc < 0 || ipc >= positionCounters.$length) ? ($throwRuntimeError("index out of range"), undefined) : positionCounters.$array[positionCounters.$offset + ipc]);
	};
	$pkg.FuncForPC = FuncForPC;
	KeepAlive = function(param) {
		var param;
	};
	$pkg.KeepAlive = KeepAlive;
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	throw$1 = function(s) {
		var s;
		$panic(new errorString((s)));
	};
	nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	$linknames["runtime.nanotime"] = nanotime;
	fastrand = function() {
		return (($parseFloat($global.Math.random()) * 4.294967295e+09 >> 0));
	};
	$linknames["runtime.fastrand"] = fastrand;
	ptrType$1.methods = [{prop: "string", name: "string", pkg: "runtime", typ: $funcType([], [$String], false)}, {prop: "pkgpath", name: "pkgpath", pkg: "runtime", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Next", name: "Next", pkg: "", typ: $funcType([], [Frame, $Bool], false)}];
	ptrType.methods = [{prop: "Entry", name: "Entry", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "FileLine", name: "FileLine", pkg: "", typ: $funcType([$Uintptr], [$String, $Int], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	_type.init("runtime", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	TypeAssertionError.init("runtime", [{prop: "_interface", name: "_interface", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "concrete", name: "concrete", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "asserted", name: "asserted", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "missingMethod", name: "missingMethod", embedded: false, exported: false, typ: $String, tag: ""}]);
	basicFrame.init("", [{prop: "FuncName", name: "FuncName", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "File", name: "File", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Line", name: "Line", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Col", name: "Col", embedded: false, exported: true, typ: $Int, tag: ""}]);
	Frames.init("runtime", [{prop: "frames", name: "frames", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "current", name: "current", embedded: false, exported: false, typ: $Int, tag: ""}]);
	Frame.init("", [{prop: "PC", name: "PC", embedded: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: ptrType, tag: ""}, {prop: "Function", name: "Function", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "File", name: "File", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Line", name: "Line", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Entry", name: "Entry", embedded: false, exported: true, typ: $Uintptr, tag: ""}]);
	Func.init("runtime", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "file", name: "file", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "line", name: "line", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "opaque", name: "opaque", embedded: false, exported: false, typ: structType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buildVersion = "";
		knownPositions = $makeMap($String.keyFor, []);
		positionCounters = new sliceType([]);
		hiddenFrames = $makeMap($String.keyFor, [{ k: "$callDeferred", v: true }]);
		knownFrames = $makeMap($String.keyFor, [{ k: "$panic", v: "runtime.gopanic" }, { k: "$goroutine", v: "runtime.goexit" }]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/goarch"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/reflectlite"] = (function() {
	var $pkg = {}, $init, js, goarch, Value, flag, ValueError, Type, Kind, tflag, rtype, method, chanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, nameOff, typeOff, textOff, errorString, Method, uncommonType, funcType, name, nameData, mapIter, TypeEx, ptrType$1, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$2, funcType$1, ptrType$4, sliceType$5, ptrType$5, sliceType$6, ptrType$6, ptrType$7, sliceType$7, sliceType$8, sliceType$9, sliceType$10, ptrType$8, structType$2, ptrType$9, arrayType$2, sliceType$13, ptrType$10, funcType$2, ptrType$11, funcType$3, ptrType$12, ptrType$13, kindNames, callHelper, initialized, uint8Type, idJsType, idReflectType, idKindType, idRtype, uncommonTypeMap, nameMap, nameOffList, typeOffList, jsObjectPtr, selectHelper, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, unquote, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, TypeOf, ValueOf, FuncOf, SliceOf, unsafe_New, typedmemmove, keyFor, mapaccess, mapiterinit, mapiterkey, mapiternext, maplen, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, PtrTo, copyVal;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	goarch = $packages["internal/goarch"];
	Value = $pkg.Value = $newType(0, $kindStruct, "reflectlite.Value", true, "internal/reflectlite", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflectlite.flag", true, "internal/reflectlite", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflectlite.ValueError", true, "internal/reflectlite", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflectlite.Type", true, "internal/reflectlite", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflectlite.Kind", true, "internal/reflectlite", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflectlite.tflag", true, "internal/reflectlite", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflectlite.rtype", true, "internal/reflectlite", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, equal_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.equal = $throwNilPointerError;
			this.gcdata = ptrType$6.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.equal = equal_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflectlite.method", true, "internal/reflectlite", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	chanDir = $pkg.chanDir = $newType(4, $kindInt, "reflectlite.chanDir", true, "internal/reflectlite", false, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflectlite.arrayType", true, "internal/reflectlite", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflectlite.chanType", true, "internal/reflectlite", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflectlite.imethod", true, "internal/reflectlite", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflectlite.interfaceType", true, "internal/reflectlite", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$6.nil);
			this.methods = sliceType$9.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflectlite.mapType", true, "internal/reflectlite", false, function(rtype_, key_, elem_, bucket_, hasher_, keysize_, valuesize_, bucketsize_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hasher = $throwNilPointerError;
			this.keysize = 0;
			this.valuesize = 0;
			this.bucketsize = 0;
			this.flags = 0;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hasher = hasher_;
		this.keysize = keysize_;
		this.valuesize = valuesize_;
		this.bucketsize = bucketsize_;
		this.flags = flags_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflectlite.ptrType", true, "internal/reflectlite", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflectlite.sliceType", true, "internal/reflectlite", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflectlite.structField", true, "internal/reflectlite", false, function(name_, typ_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$6.nil);
			this.typ = ptrType$1.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflectlite.structType", true, "internal/reflectlite", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$6.nil);
			this.fields = sliceType$10.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflectlite.nameOff", true, "internal/reflectlite", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflectlite.typeOff", true, "internal/reflectlite", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflectlite.textOff", true, "internal/reflectlite", false, null);
	errorString = $pkg.errorString = $newType(0, $kindStruct, "reflectlite.errorString", true, "internal/reflectlite", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflectlite.Method", true, "internal/reflectlite", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflectlite.uncommonType", true, "internal/reflectlite", false, function(pkgPath_, mcount_, xcount_, moff_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this.xcount = 0;
			this.moff = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this.xcount = xcount_;
		this.moff = moff_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflectlite.funcType", true, "internal/reflectlite", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflectlite.name", true, "internal/reflectlite", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$6.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflectlite.nameData", true, "internal/reflectlite", false, function(name_, tag_, exported_, embedded_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			this.embedded = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
		this.embedded = embedded_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflectlite.mapIter", true, "internal/reflectlite", false, function(t_, m_, keys_, i_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			this.last = null;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
		this.last = last_;
	});
	TypeEx = $pkg.TypeEx = $newType(8, $kindInterface, "reflectlite.TypeEx", true, "internal/reflectlite", true, null);
	ptrType$1 = $ptrType(rtype);
	sliceType$1 = $sliceType(name);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$4], [ptrType$2], true);
	ptrType$4 = $ptrType(uncommonType);
	sliceType$5 = $sliceType(method);
	ptrType$5 = $ptrType(funcType);
	sliceType$6 = $sliceType(Value);
	ptrType$6 = $ptrType($Uint8);
	ptrType$7 = $ptrType($UnsafePointer);
	sliceType$7 = $sliceType(Type);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(imethod);
	sliceType$10 = $sliceType(structField);
	ptrType$8 = $ptrType(nameData);
	structType$2 = $structType("internal/reflectlite", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	ptrType$9 = $ptrType(mapIter);
	arrayType$2 = $arrayType($Uintptr, 2);
	sliceType$13 = $sliceType($Uint8);
	ptrType$10 = $ptrType(ValueError);
	funcType$2 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	ptrType$11 = $ptrType(interfaceType);
	funcType$3 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	ptrType$12 = $ptrType(structField);
	ptrType$13 = $ptrType(errorString);
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.Type = function() {
		var f, v;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflectlite.Value.Type", 0));
		}
		return v.typ;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	structField.ptr.prototype.embedded = function() {
		var f;
		f = this;
		return $clone(f.name, name).embedded();
	};
	structField.prototype.embedded = function() { return this.$val.embedded(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return (0 >= kindNames.$length ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + 0]);
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.pointers = function() {
		var t;
		t = this;
		return !((t.ptrdata === 0));
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var t, ut;
		t = this;
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			return sliceType$5.nil;
		}
		return ut.exportedMethods();
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			return tt.NumMethod();
		}
		return t.exportedMethods().$length;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$4.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.hasName = function() {
		var t;
		t = this;
		return !((((t.tflag & 4) >>> 0) === 0));
	};
	rtype.prototype.hasName = function() { return this.$val.hasName(); };
	rtype.ptr.prototype.Name = function() {
		var _1, i, s, sqBrackets, t;
		t = this;
		if (!t.hasName()) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		sqBrackets = 0;
		while (true) {
			if (!(i >= 0 && (!((s.charCodeAt(i) === 46)) || !((sqBrackets === 0))))) { break; }
			_1 = s.charCodeAt(i);
			if (_1 === (93)) {
				sqBrackets = sqBrackets + (1) >> 0;
			} else if (_1 === (91)) {
				sqBrackets = sqBrackets - (1) >> 0;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.chanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: chanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.chanDir = function() { return this.$val.chanDir(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Implements = function(u) {
		var {_r, t, u, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Implements, $c: true, $r, _r, t, u, $s};return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var {$24r, _r, t, u, uu, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r || implements$1(uu, t);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.AssignableTo, $c: true, $r, $24r, _r, t, u, uu, $s};return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$4.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var {$24r, T, V, _r, $s, $r, $c} = $restore(this, {T, V});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (T.hasName() && V.hasName() || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: directlyAssignable, $c: true, $r, $24r, T, V, _r, $s};return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var {$24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r, $c} = $restore(this, {T, V, cmpTags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$24r = _r$6;
		$s = 11; case 11: return $24r;
		/* */ } return; } var $f = {$blk: haveIdenticalType, $c: true, $r, $24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s};return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var {$24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r, $c} = $restore(this, {T, V, cmpTags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$24r = _v;
				$s = 12; case 12: return $24r;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.chanDir() === 3)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 15:
				/* */ if (_v$1) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_v$1) { */ case 13:
					$s = -1; return true;
				/* } */ case 14:
				if (!(V.chanDir() === T.chanDir())) { _v$2 = false; $s = 17; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 17:
				$24r$1 = _v$2;
				$s = 19; case 19: return $24r$1;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 20:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 21; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (!_r$3) { */ case 22:
						$s = -1; return false;
					/* } */ case 23:
					i = i + (1) >> 0;
				$s = 20; continue;
				case 21:
				i$1 = 0;
				/* while (true) { */ case 25:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 26; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!_r$4) { */ case 27:
						$s = -1; return false;
					/* } */ case 28:
					i$1 = i$1 + (1) >> 0;
				$s = 25; continue;
				case 26:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 30; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 30:
				$24r$2 = _v$3;
				$s = 33; case 33: return $24r$2;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$24r$3 = _r$7;
				$s = 35; case 35: return $24r$3;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 36:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 37; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 40; case 40: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (!_r$8) { */ case 38:
						$s = -1; return false;
					/* } */ case 39:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offset === vf.offset))) {
						$s = -1; return false;
					}
					if (!(tf.embedded() === vf.embedded())) {
						$s = -1; return false;
					}
					_i++;
				$s = 36; continue;
				case 37:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: haveIdenticalUnderlyingType, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s};return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var {_r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r, $c} = $restore(this, {context, dst, target});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Value.copy(v, _r);
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				if (dst.NumMethod() === 0) {
					(target).$set(x);
				} else {
					ifaceE2I(dst, x, target);
				}
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.assignTo, $c: true, $r, _r, _r$1, _r$2, context, dst, fl, target, v, x, $s};return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	Value.ptr.prototype.Index = function(i) {
		var {$24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 10; case 10: return $24r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 11:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 12:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r$1 = _r$1;
				$s = 14; case 14: return $24r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Index, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s};return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(new $String("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else if (_1 === (26)) {
			return $clone(v, Value).object() === 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($clone(v, Value).object().size) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var {_1, _r, _r$1, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Value.copy(x, _r);
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Set, $c: true, $r, _1, _r, _r$1, v, x, $s};return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var {_r, _r$1, _v, slice, typedSlice, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetBytes, $c: true, $r, _r, _r$1, _v, slice, typedSlice, v, x, $s};return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var {$24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r, $c} = $restore(this, {i, j});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 8; case 8: return $24r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Slice, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s};return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var {$24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r, $c} = $restore(this, {i, j, k});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Slice3, $c: true, $r, $24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s};return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	Value.ptr.prototype.Elem = function() {
		var {$24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Elem, $c: true, $r, $24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s};return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.MapKeys = function() {
		var {_r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$6, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			Value.copy(((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]), copyVal(keyType, fl, key));
			mapiternext(it);
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MapKeys, $c: true, $r, _r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s};return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var {_r, e, fl, k, key, tt, typ, v, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Value.copy(key, _r);
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$7(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		$s = -1; return copyVal(typ, fl, e);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MapIndex, $c: true, $r, _r, e, fl, k, key, tt, typ, v, $s};return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.Field = function(i) {
		var {$24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.embedded()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					Value.copy(v, _r);
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						Value.copy(v, _r$1);
					/* } */ case 11:
				$s = 5; continue;
				case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 16; case 16: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Field, $c: true, $r, $24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s};return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	unquote = function(s) {
		var s;
		if (s.length < 2) {
			return [s, $ifaceNil];
		}
		if ((s.charCodeAt(0) === 39) || (s.charCodeAt(0) === 34)) {
			if (s.charCodeAt((s.length - 1 >> 0)) === s.charCodeAt(0)) {
				return [$substring(s, 1, (s.length - 1 >> 0)), $ifaceNil];
			}
			return ["", $pkg.ErrSyntax];
		}
		return [s, $ifaceNil];
	};
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((((((f & 31) >>> 0) >>> 0)) === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	rtype.ptr.prototype.Comparable = function() {
		var {$24r, _1, _r, _r$1, ft, i, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 8:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 9; continue; }
					ft = $clone(t.Field(i), structField);
					_r$1 = ft.typ.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!_r$1) { */ case 10:
						$s = -1; return false;
					/* } */ case 11:
					i = i + (1) >> 0;
				$s = 8; continue;
				case 9:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Comparable, $c: true, $r, $24r, _1, _r, _r$1, ft, i, t, $s};return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		return (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.Method = function(i) {
		var {$24r, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		/* */ if (t.Kind() === 20) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Kind() === 20) { */ case 1:
			tt = (t.kindType);
			_r = tt.rtype.Method(i); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Method.copy(m, _r);
			$24r = m;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		methods = t.exportedMethods();
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$7, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$7, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t[$externalize(idJsType, $String)])[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		Value.copy(m.Func, new Value.ptr($assertType(mt, ptrType$1), (fn), fl));
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Method, $c: true, $r, $24r, _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s};return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	init = function() {
		var {used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), new name.ptr(ptrType$6.nil), sliceType$9.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), new name.ptr(ptrType$6.nil), sliceType$10.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$6.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: init, $c: true, $r, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ[$externalize(idJsType, $String)];
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _key, _ref, _ref$1, _ref$2, _ref$3, dir, exported, exported$1, f, fields, i, i$1, i$2, i$3, i$4, i$5, imethods, in$1, m, m$1, m$2, methodSet, methods, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut, xcount;
		if (typ[$externalize(idReflectType, $String)] === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), $throwNilPointerError, ptrType$6.nil, newNameOff($clone(newName(internalStr(typ.string), "", !!(typ.exported), false), name)), 0);
			rt[$externalize(idJsType, $String)] = typ;
			typ[$externalize(idReflectType, $String)] = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = sliceType$5.nil;
				i = 0;
				while (true) {
					if (!(i < $parseInt(methodSet.length))) { break; }
					m = methodSet[i];
					exported = internalStr(m.pkg) === "";
					if (!exported) {
						i = i + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", exported, false), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					i = i + (1) >> 0;
				}
				xcount = ((reflectMethods.$length << 16 >>> 16));
				i$1 = 0;
				while (true) {
					if (!(i$1 < $parseInt(methodSet.length))) { break; }
					m$1 = methodSet[i$1];
					exported$1 = internalStr(m$1.pkg) === "";
					if (exported$1) {
						i$1 = i$1 + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", exported$1, false), name)), newTypeOff(reflectType(m$1.typ)), 0, 0));
					i$1 = i$1 + (1) >> 0;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", false, false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), xcount, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key), { k: _key, v: ut });
				ut[$externalize(idJsType, $String)] = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref = in$1;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$2 = _i;
					((i$2 < 0 || i$2 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$2] = reflectType(params[i$2]));
					_i++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$1 = out;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$3 = _i$1;
					((i$3 < 0 || i$3 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$3] = reflectType(results[i$3]));
					_i$1++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$9, $parseInt(methods.length));
				_ref$2 = imethods;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$4 = _i$2;
					m$2 = methods[i$4];
					imethod.copy(((i$4 < 0 || i$4 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$4]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$2.name), "", internalStr(m$2.pkg) === "", false), name)), newTypeOff(reflectType(m$2.typ))));
					_i$2++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false, false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$10, $parseInt(fields.length));
				_ref$3 = reflectFields;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$5 = _i$3;
					f = fields[i$5];
					structField.copy(((i$5 < 0 || i$5 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$5]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported), !!(f.embedded)), name), reflectType(f.typ), ((i$5 >>> 0))));
					_i$3++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false, false), name), reflectFields));
			}
		}
		return ((typ[$externalize(idReflectType, $String)]));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt[$externalize(idKindType, $String)] = kindType;
		kindType[$externalize(idRtype, $String)] = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	uncommonType.ptr.prototype.exportedMethods = function() {
		var t;
		t = this;
		return $subslice(t._methods, 0, t.xcount, t.xcount);
	};
	uncommonType.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = $mapIndex(uncommonTypeMap,ptrType$1.keyFor(t)), _entry !== undefined ? _entry.v : ptrType$4.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = $mapIndex(nameMap,ptrType$6.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$8.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = $mapIndex(nameMap,ptrType$6.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$8.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var n;
		n = this;
		return "";
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$6.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$8.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	name.ptr.prototype.embedded = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$6.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$8.nil).embedded;
	};
	name.prototype.embedded = function() { return this.$val.embedded(); };
	newName = function(n, tag, exported, embedded) {
		var _key, b, embedded, exported, n, tag;
		b = $newDataPointer(0, ptrType$6);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$6.keyFor(_key), { k: _key, v: new nameData.ptr(n, tag, exported, embedded) });
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$2.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r, $c} = $restore(this, {t, v, fl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$24r = new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
			$s = 10; case 10: return $24r;
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		$s = 12; case 12: return $24r$1;
		/* */ } return; } var $f = {$blk: makeValue, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s};return $f;
	};
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$6.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var {$24r, _r, i, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: ValueOf, $c: true, $r, $24r, _r, i, $s};return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var {_i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r, $c} = $restore(this, {in$1, out, variadic});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } var $f = {$blk: FuncOf, $c: true, $r, _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s};return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m.get($externalize(k, $String));
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapIter.ptr.prototype.skipUntilValidKey = function() {
		var iter, k;
		iter = this;
		while (true) {
			if (!(iter.i < $parseInt(iter.keys.length))) { break; }
			k = iter.keys[iter.i];
			if (!(iter.m.get(k) === undefined)) {
				break;
			}
			iter.i = iter.i + (1) >> 0;
		}
	};
	mapIter.prototype.skipUntilValidKey = function() { return this.$val.skipUntilValidKey(); };
	mapiterinit = function(t, m) {
		var m, t;
		return (new mapIter.ptr(t, m, $global.Array.from(m.keys()), 0, null));
	};
	mapiterkey = function(it) {
		var {$24r, _r, _r$1, _r$2, it, iter, k, kv, $s, $r, $c} = $restore(this, {it});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		iter = ($pointerOfStructConversion(it, ptrType$9));
		kv = null;
		if (!(iter.last === null)) {
			kv = iter.last;
		} else {
			iter.skipUntilValidKey();
			if (iter.i === $parseInt(iter.keys.length)) {
				$s = -1; return 0;
			}
			k = iter.keys[iter.i];
			kv = iter.m.get(k);
			iter.last = kv;
		}
		_r = $assertType(iter.t, TypeEx).Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.k, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: mapiterkey, $c: true, $r, $24r, _r, _r$1, _r$2, it, iter, k, kv, $s};return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ($pointerOfStructConversion(it, ptrType$9));
		iter.last = null;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt(m.size) >> 0;
	};
	methodReceiver = function(op, v, i) {
		var _, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x;
		_ = ptrType$1.nil;
		t = ptrType$5.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (tt.rtype.typeOff(m.typ).kindType);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ms = v.typ.exportedMethods();
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (v.typ.typeOff(m$1.mtyp).kindType);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_, t, fn];
	};
	valueInterface = function(v) {
		var {_r, cv, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Value.copy(v, _r);
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			if (!((((v.flag & 128) >>> 0) === 0)) && ($clone(v, Value).Kind() === 25)) {
				cv = jsType(v.typ).zero();
				copyStruct(cv, $clone(v, Value).object(), v.typ);
				$s = -1; return ((new (jsType(v.typ))(cv)));
			}
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } var $f = {$blk: valueInterface, $c: true, $r, _r, cv, v, $s};return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var {$24r, _r, _tuple, fn, fv, op, rcvr, v, $s, $r, $c} = $restore(this, {op, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: makeMethodValue, $c: true, $r, $24r, _r, _tuple, fn, fv, op, rcvr, v, $s};return $f;
	};
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	copyVal = function(typ, fl, ptr) {
		var c, fl, ptr, typ;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, ptr);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		}
		return new Value.ptr(typ, (ptr).$get(), fl);
	};
	Value.methods = [{prop: "pointer", name: "pointer", pkg: "internal/reflectlite", typ: $funcType([], [$UnsafePointer], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "numMethod", name: "numMethod", pkg: "internal/reflectlite", typ: $funcType([], [$Int], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "object", name: "object", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "internal/reflectlite", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "internal/reflectlite", typ: $funcType([$String, sliceType$6], [sliceType$6], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$2], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$13], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$6], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "internal/reflectlite", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "internal/reflectlite", typ: $funcType([], [flag], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "internal/reflectlite", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "internal/reflectlite", typ: $funcType([], [], false)}, {prop: "mustBe", name: "mustBe", pkg: "internal/reflectlite", typ: $funcType([Kind], [], false)}];
	ptrType$10.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "pointers", name: "pointers", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hasName", name: "hasName", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "chanDir", name: "chanDir", pkg: "internal/reflectlite", typ: $funcType([], [chanDir], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "kindType", name: "kindType", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [structField], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}, {prop: "nameOff", name: "nameOff", pkg: "internal/reflectlite", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "internal/reflectlite", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}];
	ptrType$11.methods = [{prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$12.methods = [{prop: "embedded", name: "embedded", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "methods", name: "methods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$5], false)}];
	ptrType$5.methods = [{prop: "in$", name: "in", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "internal/reflectlite", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "data", name: "data", pkg: "internal/reflectlite", typ: $funcType([$Int, $String], [ptrType$6], false)}, {prop: "hasTag", name: "hasTag", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "readVarint", name: "readVarint", pkg: "internal/reflectlite", typ: $funcType([$Int], [$Int, $Int], false)}, {prop: "name", name: "name", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "internal/reflectlite", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}, {prop: "embedded", name: "embedded", pkg: "internal/reflectlite", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "skipUntilValidKey", name: "skipUntilValidKey", pkg: "internal/reflectlite", typ: $funcType([], [], false)}];
	Value.init("internal/reflectlite", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", embedded: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", embedded: false, exported: true, typ: Kind, tag: ""}]);
	Type.init([{prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}]);
	rtype.init("internal/reflectlite", [{prop: "size", name: "size", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", embedded: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "equal", name: "equal", embedded: false, exported: false, typ: funcType$2, tag: ""}, {prop: "gcdata", name: "gcdata", embedded: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "str", name: "str", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	method.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", embedded: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", embedded: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", embedded: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", embedded: false, exported: false, typ: sliceType$9, tag: ""}]);
	mapType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hasher", name: "hasher", embedded: false, exported: false, typ: funcType$3, tag: ""}, {prop: "keysize", name: "keysize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "flags", name: "flags", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	ptrType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", embedded: false, exported: false, typ: sliceType$10, tag: ""}]);
	errorString.init("internal/reflectlite", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}]);
	uncommonType.init("internal/reflectlite", [{prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "xcount", name: "xcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", embedded: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("internal/reflectlite", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("internal/reflectlite", [{prop: "bytes", name: "bytes", embedded: false, exported: false, typ: ptrType$6, tag: ""}]);
	nameData.init("internal/reflectlite", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "embedded", name: "embedded", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("internal/reflectlite", [{prop: "t", name: "t", embedded: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "last", name: "last", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	TypeEx.init([{prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "internal/reflectlite", typ: $funcType([], [ptrType$4], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = goarch.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		uint8Type = ptrType$1.nil;
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		kindNames = new sliceType$3(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		$pkg.ErrSyntax = new errorString.ptr("invalid syntax");
		initialized = false;
		idJsType = "_jsType";
		idReflectType = "_reflectType";
		idKindType = "kindType";
		idRtype = "_rtype";
		uncommonTypeMap = new $global.Map();
		nameMap = new $global.Map();
		jsObjectPtr = reflectType($jsObjectPtr);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		$r = init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, reflectlite, errorString, ptrType, ptrType$1, errorType, _r, New;
	reflectlite = $packages["internal/reflectlite"];
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType($error);
	ptrType$1 = $ptrType(errorString);
	New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", embedded: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflectlite.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = reflectlite.TypeOf((ptrType.nil)).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errorType = _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/abi"] = (function() {
	var $pkg = {}, $init, goarch, FuncPCABI0;
	goarch = $packages["internal/goarch"];
	FuncPCABI0 = function() {
		$throwRuntimeError("native function not implemented: internal/abi.FuncPCABI0");
	};
	$pkg.FuncPCABI0 = FuncPCABI0;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = goarch.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/cpu"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/bytealg"] = (function() {
	var $pkg = {}, $init, cpu, Index, Cutover, Equal, IndexByteString, HashStrBytes, IndexRabinKarpBytes;
	cpu = $packages["internal/cpu"];
	Index = function(a, b) {
		var a, b;
		$panic(new $String("unimplemented"));
	};
	$pkg.Index = Index;
	Cutover = function(n) {
		var n;
		$panic(new $String("unimplemented"));
	};
	$pkg.Cutover = Cutover;
	Equal = function(a, b) {
		var _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	IndexByteString = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.IndexByteString = IndexByteString;
	HashStrBytes = function(sep) {
		var _tmp, _tmp$1, hash, i, i$1, pow, sep, sq;
		hash = 0;
		i = 0;
		while (true) {
			if (!(i < sep.$length)) { break; }
			hash = ($imul(hash, 16777619) >>> 0) + ((((i < 0 || i >= sep.$length) ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + i]) >>> 0)) >>> 0;
			i = i + (1) >> 0;
		}
		_tmp = 1;
		_tmp$1 = 16777619;
		pow = _tmp;
		sq = _tmp$1;
		i$1 = sep.$length;
		while (true) {
			if (!(i$1 > 0)) { break; }
			if (!(((i$1 & 1) === 0))) {
				pow = $imul(pow, (sq)) >>> 0;
			}
			sq = $imul(sq, (sq)) >>> 0;
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	$pkg.HashStrBytes = HashStrBytes;
	IndexRabinKarpBytes = function(s, sep) {
		var _tuple, h, hashsep, i, i$1, n, pow, s, sep, x;
		_tuple = HashStrBytes(sep);
		hashsep = _tuple[0];
		pow = _tuple[1];
		n = sep.$length;
		h = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			h = ($imul(h, 16777619) >>> 0) + ((((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) >>> 0)) >>> 0;
			i = i + (1) >> 0;
		}
		if ((h === hashsep) && Equal($subslice(s, 0, n), sep)) {
			return 0;
		}
		i$1 = n;
		while (true) {
			if (!(i$1 < s.$length)) { break; }
			h = $imul(h, (16777619)) >>> 0;
			h = h + (((((i$1 < 0 || i$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i$1]) >>> 0))) >>> 0;
			h = h - (($imul(pow, (((x = i$1 - n >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) >>> 0))) >>> 0)) >>> 0;
			i$1 = i$1 + (1) >> 0;
			if ((h === hashsep) && Equal($subslice(s, (i$1 - n >> 0), i$1), sep)) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	$pkg.IndexRabinKarpBytes = IndexRabinKarpBytes;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = cpu.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.MaxLen = 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/itoa"] = (function() {
	var $pkg = {}, $init, arrayType, sliceType, Itoa, Uitoa;
	arrayType = $arrayType($Uint8, 20);
	sliceType = $sliceType($Uint8);
	Itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + Uitoa(((-val >>> 0)));
		}
		return Uitoa(((val >>> 0)));
	};
	$pkg.Itoa = Itoa;
	Uitoa = function(val) {
		var _q, buf, i, q, val;
		if (val === 0) {
			return "0";
		}
		buf = arrayType.zero();
		i = 19;
		while (true) {
			if (!(val >= 10)) { break; }
			q = (_q = val / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + val >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = q;
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + val >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	$pkg.Uitoa = Uitoa;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/unsafeheader"] = (function() {
	var $pkg = {}, $init, Slice;
	Slice = $pkg.Slice = $newType(0, $kindStruct, "unsafeheader.Slice", true, "internal/unsafeheader", true, function(Data_, Len_, Cap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Data = 0;
			this.Len = 0;
			this.Cap = 0;
			return;
		}
		this.Data = Data_;
		this.Len = Len_;
		this.Cap = Cap_;
	});
	Slice.init("", [{prop: "Data", name: "Data", embedded: false, exported: true, typ: $UnsafePointer, tag: ""}, {prop: "Len", name: "Len", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Cap", name: "Cap", embedded: false, exported: true, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/bits"] = (function() {
	var $pkg = {}, $init, deBruijn32tab, deBruijn64tab, LeadingZeros64, TrailingZeros, TrailingZeros32, TrailingZeros64, Len, Len32, Len64, Add64, Mul64;
	LeadingZeros64 = function(x) {
		var x;
		return 64 - Len64(x) >> 0;
	};
	$pkg.LeadingZeros64 = LeadingZeros64;
	TrailingZeros = function(x) {
		var x;
		if (true) {
			return TrailingZeros32(((x >>> 0)));
		}
		return TrailingZeros64((new $Uint64(0, x)));
	};
	$pkg.TrailingZeros = TrailingZeros;
	TrailingZeros32 = function(x) {
		var x, x$1;
		if (x === 0) {
			return 32;
		}
		return (((x$1 = ($imul((((x & (-x >>> 0)) >>> 0)), 125613361) >>> 0) >>> 27 >>> 0, ((x$1 < 0 || x$1 >= deBruijn32tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn32tab[x$1])) >> 0));
	};
	$pkg.TrailingZeros32 = TrailingZeros32;
	TrailingZeros64 = function(x) {
		var x, x$1, x$2;
		if ((x.$high === 0 && x.$low === 0)) {
			return 64;
		}
		return (((x$1 = $shiftRightUint64($mul64(((x$2 = new $Uint64(-x.$high, -x.$low), new $Uint64(x.$high & x$2.$high, (x.$low & x$2.$low) >>> 0))), new $Uint64(66559345, 3033172745)), 58), (($flatten64(x$1) < 0 || $flatten64(x$1) >= deBruijn64tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn64tab[$flatten64(x$1)])) >> 0));
	};
	$pkg.TrailingZeros64 = TrailingZeros64;
	Len = function(x) {
		var x;
		if (true) {
			return Len32(((x >>> 0)));
		}
		return Len64((new $Uint64(0, x)));
	};
	$pkg.Len = Len;
	Len32 = function(x) {
		var n, x, y, y$1;
		n = 0;
		if (x >= 65536) {
			x = (y = (16), y < 32 ? (x >>> y) : 0) >>> 0;
			n = 16;
		}
		if (x >= 256) {
			x = (y$1 = (8), y$1 < 32 ? (x >>> y$1) : 0) >>> 0;
			n = n + (8) >> 0;
		}
		n = n + (("\x00\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b".charCodeAt(x) >> 0)) >> 0;
		return n;
	};
	$pkg.Len32 = Len32;
	Len64 = function(x) {
		var n, x;
		n = 0;
		if ((x.$high > 1 || (x.$high === 1 && x.$low >= 0))) {
			x = $shiftRightUint64(x, (32));
			n = 32;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 65536))) {
			x = $shiftRightUint64(x, (16));
			n = n + (16) >> 0;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 256))) {
			x = $shiftRightUint64(x, (8));
			n = n + (8) >> 0;
		}
		n = n + (("\x00\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b".charCodeAt($flatten64(x)) >> 0)) >> 0;
		return n;
	};
	$pkg.Len64 = Len64;
	Add64 = function(x, y, carry) {
		var carry, carryOut, sum, x, x$1, x$2, x$3, x$4, y;
		sum = new $Uint64(0, 0);
		carryOut = new $Uint64(0, 0);
		sum = (x$1 = new $Uint64(x.$high + y.$high, x.$low + y.$low), new $Uint64(x$1.$high + carry.$high, x$1.$low + carry.$low));
		carryOut = $shiftRightUint64(((x$2 = new $Uint64(x.$high & y.$high, (x.$low & y.$low) >>> 0), x$3 = (x$4 = new $Uint64(x.$high | y.$high, (x.$low | y.$low) >>> 0), new $Uint64(x$4.$high & ~sum.$high, (x$4.$low & ~sum.$low) >>> 0)), new $Uint64(x$2.$high | x$3.$high, (x$2.$low | x$3.$low) >>> 0))), 63);
		return [sum, carryOut];
	};
	$pkg.Add64 = Add64;
	Mul64 = function(x, y) {
		var hi, lo, t, w0, w1, w2, x, x$1, x$2, x$3, x$4, x$5, x$6, x0, x1, y, y0, y1;
		hi = new $Uint64(0, 0);
		lo = new $Uint64(0, 0);
		x0 = new $Uint64(x.$high & 0, (x.$low & 4294967295) >>> 0);
		x1 = $shiftRightUint64(x, 32);
		y0 = new $Uint64(y.$high & 0, (y.$low & 4294967295) >>> 0);
		y1 = $shiftRightUint64(y, 32);
		w0 = $mul64(x0, y0);
		t = (x$1 = $mul64(x1, y0), x$2 = $shiftRightUint64(w0, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		w1 = new $Uint64(t.$high & 0, (t.$low & 4294967295) >>> 0);
		w2 = $shiftRightUint64(t, 32);
		w1 = (x$3 = $mul64(x0, y1), new $Uint64(w1.$high + x$3.$high, w1.$low + x$3.$low));
		hi = (x$4 = (x$5 = $mul64(x1, y1), new $Uint64(x$5.$high + w2.$high, x$5.$low + w2.$low)), x$6 = $shiftRightUint64(w1, 32), new $Uint64(x$4.$high + x$6.$high, x$4.$low + x$6.$low));
		lo = $mul64(x, y);
		return [hi, lo];
	};
	$pkg.Mul64 = Mul64;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		deBruijn32tab = $toNativeArray($kindUint8, [0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
		deBruijn64tab = $toNativeArray($kindUint8, [0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, bits, arrayType, arrayType$1, arrayType$2, structType, math, _zero, posInf, negInf, nan, buf, Ceil, Inf, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	bits = $packages["math/bits"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", embedded: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", embedded: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", embedded: false, exported: false, typ: arrayType$2, tag: ""}]);
	Ceil = function(x) {
		var x;
		return $parseFloat(math.ceil(x));
	};
	$pkg.Ceil = Ceil;
	Inf = function(sign) {
		var sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	NaN = function() {
		return nan;
	};
	$pkg.NaN = NaN;
	init = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var b;
		buf.uint32array[0] = ((b.$low >>> 0));
		buf.uint32array[1] = (($shiftRightUint64(b, 32).$low >>> 0));
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		math = $global.Math;
		_zero = 0;
		posInf = 1 / _zero;
		negInf = -1 / _zero;
		nan = $parseFloat($NaN);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidString, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	DecodeRune = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = ((((x & 7) >>> 0) >> 0));
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < sz) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz <= 2) {
			_tmp$8 = (((((p0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((b1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz <= 3) {
			_tmp$12 = ((((((p0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((p0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((b2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = ((((x & 7) >>> 0) >> 0));
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < sz) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz <= 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz <= 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	DecodeLastRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((s.charCodeAt(start) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString($substring(s, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidString = function(s) {
		var accept, c, c$1, c$2, first32, i, n, s, second32, si, size, x, x$1;
		while (true) {
			if (!(s.length >= 8)) { break; }
			first32 = (((((((s.charCodeAt(0) >>> 0)) | (((s.charCodeAt(1) >>> 0)) << 8 >>> 0)) >>> 0) | (((s.charCodeAt(2) >>> 0)) << 16 >>> 0)) >>> 0) | (((s.charCodeAt(3) >>> 0)) << 24 >>> 0)) >>> 0;
			second32 = (((((((s.charCodeAt(4) >>> 0)) | (((s.charCodeAt(5) >>> 0)) << 8 >>> 0)) >>> 0) | (((s.charCodeAt(6) >>> 0)) << 16 >>> 0)) >>> 0) | (((s.charCodeAt(7) >>> 0)) << 24 >>> 0)) >>> 0;
			if (!(((((((first32 | second32) >>> 0)) & 2155905152) >>> 0) === 0))) {
				break;
			}
			s = $substring(s, 8);
		}
		n = s.length;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			si = s.charCodeAt(i);
			if (si < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((si < 0 || si >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[si]);
			if (x === 241) {
				return false;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > n) {
				return false;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c = s.charCodeAt((i + 1 >> 0));
			if (c < accept.lo || accept.hi < c) {
				return false;
			} else if (size === 2) {
			} else {
				c$1 = s.charCodeAt((i + 2 >> 0));
				if (c$1 < 128 || 191 < c$1) {
					return false;
				} else if (size === 3) {
				} else {
					c$2 = s.charCodeAt((i + 3 >> 0));
					if (c$2 < 128 || 191 < c$2) {
						return false;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return true;
	};
	$pkg.ValidString = ValidString;
	ValidRune = function(r) {
		var r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", embedded: false, exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [$clone(new acceptRange.ptr(128, 191), acceptRange), $clone(new acceptRange.ptr(160, 191), acceptRange), $clone(new acceptRange.ptr(128, 159), acceptRange), $clone(new acceptRange.ptr(144, 191), acceptRange), $clone(new acceptRange.ptr(128, 143), acceptRange), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0), new acceptRange.ptr(0, 0)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, js, bytealg, math, bits, utf8, floatInfo, decimalSlice, decimal, leftCheat, NumError, sliceType, sliceType$1, arrayType, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, arrayType$1, arrayType$2, ptrType, arrayType$3, arrayType$4, arrayType$5, ptrType$1, ptrType$2, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, detailedPowersOfTen, leftcheats, optimize, powtab, float64pow10, float32pow10, contains, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, QuoteToASCII, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, unquote, bsearch16, bsearch32, IsPrint, isInGraphicList, FormatUint, FormatInt, small, formatBits, isPowerOfTwo, Itoa, ryuFtoaFixed32, ryuFtoaFixed64, formatDecimal, ryuFtoaShortest, mulByLog2Log10, mulByLog10Log2, computeBounds, ryuDigits, ryuDigits32, mult64bitPow10, mult128bitPow10, divisibleByPower5, divmod1e9, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, fmtX, min, max, eiselLemire64, eiselLemire32, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, index, lower, syntaxError, rangeError, underscoreOK, commonPrefixLenIgnoreCase, special, readFloat, atof64exact, atof32exact, atofHex, atof32, atof64, ParseFloat, parseFloatPrefix;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	bytealg = $packages["internal/bytealg"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	utf8 = $packages["unicode/utf8"];
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType$5.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	sliceType = $sliceType($Uint16);
	sliceType$1 = $sliceType($Uint32);
	arrayType = $arrayType($Uint64, 2);
	sliceType$2 = $sliceType(leftCheat);
	sliceType$3 = $sliceType($Int);
	sliceType$4 = $sliceType($Float64);
	sliceType$5 = $sliceType($Float32);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 4);
	arrayType$2 = $arrayType($Uint8, 65);
	ptrType = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 32);
	arrayType$4 = $arrayType($Uint8, 24);
	arrayType$5 = $arrayType($Uint8, 800);
	ptrType$1 = $ptrType(NumError);
	ptrType$2 = $ptrType(decimal);
	contains = function(s, c) {
		var c, s;
		return !((index(s, c) === -1));
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _q, graphicOnly, quote, s;
		return ($bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly)));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _tuple, buf, graphicOnly, nBuf, quote, r, s, width;
		if ((buf.$capacity - buf.$length >> 0) < s.length) {
			nBuf = $makeSlice(sliceType$6, buf.$length, (((buf.$length + 1 >> 0) + s.length >> 0) + 1 >> 0));
			$copySlice(nBuf, buf);
			buf = nBuf;
		}
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
		runeTmp = arrayType$1.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32 || (r === 127)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (!utf8.ValidRune(r)) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	QuoteToASCII = function(s) {
		var s;
		return quoteWith(s, 34, true, false);
	};
	$pkg.QuoteToASCII = QuoteToASCII;
	AppendQuoteToASCII = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		if (s.length === 0) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (!utf8.ValidRune(v)) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var _tuple, err, out, rem, s;
		_tuple = unquote(s, true);
		out = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (rem.length > 0) {
			return ["", $pkg.ErrSyntax];
		}
		return [out, err];
	};
	$pkg.Unquote = Unquote;
	unquote = function(in$1, unescape) {
		var _1, _2, _q, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, arr, buf, buf$1, end, err, err$1, i, in$1, in0, multibyte, n, n$1, out, quote, r, r$1, rem, rem$1, unescape, valid;
		out = "";
		rem = "";
		err = $ifaceNil;
		if (in$1.length < 2) {
			_tmp = "";
			_tmp$1 = in$1;
			_tmp$2 = $pkg.ErrSyntax;
			out = _tmp;
			rem = _tmp$1;
			err = _tmp$2;
			return [out, rem, err];
		}
		quote = in$1.charCodeAt(0);
		end = index($substring(in$1, 1), quote);
		if (end < 0) {
			_tmp$3 = "";
			_tmp$4 = in$1;
			_tmp$5 = $pkg.ErrSyntax;
			out = _tmp$3;
			rem = _tmp$4;
			err = _tmp$5;
			return [out, rem, err];
		}
		end = end + (2) >> 0;
		_1 = quote;
		if (_1 === (96)) {
			if (!unescape) {
				out = $substring(in$1, 0, end);
			} else if (!contains($substring(in$1, 0, end), 13)) {
				out = $substring(in$1, 1, (end - 1 >> 0));
			} else {
				buf = $makeSlice(sliceType$6, 0, (((end - 1 >> 0) - 1 >> 0) - 1 >> 0));
				i = 1;
				while (true) {
					if (!(i < (end - 1 >> 0))) { break; }
					if (!((in$1.charCodeAt(i) === 13))) {
						buf = $append(buf, in$1.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				out = ($bytesToString(buf));
			}
			_tmp$6 = out;
			_tmp$7 = $substring(in$1, end);
			_tmp$8 = $ifaceNil;
			out = _tmp$6;
			rem = _tmp$7;
			err = _tmp$8;
			return [out, rem, err];
		} else if ((_1 === (34)) || (_1 === (39))) {
			if (!contains($substring(in$1, 0, end), 92) && !contains($substring(in$1, 0, end), 10)) {
				valid = false;
				_2 = quote;
				if (_2 === (34)) {
					valid = utf8.ValidString($substring(in$1, 1, (end - 1 >> 0)));
				} else if (_2 === (39)) {
					_tuple = utf8.DecodeRuneInString($substring(in$1, 1, (end - 1 >> 0)));
					r = _tuple[0];
					n = _tuple[1];
					valid = (((1 + n >> 0) + 1 >> 0) === end) && (!((r === 65533)) || !((n === 1)));
				}
				if (valid) {
					out = $substring(in$1, 0, end);
					if (unescape) {
						out = $substring(out, 1, (end - 1 >> 0));
					}
					_tmp$9 = out;
					_tmp$10 = $substring(in$1, end);
					_tmp$11 = $ifaceNil;
					out = _tmp$9;
					rem = _tmp$10;
					err = _tmp$11;
					return [out, rem, err];
				}
			}
			buf$1 = sliceType$6.nil;
			in0 = in$1;
			in$1 = $substring(in$1, 1);
			if (unescape) {
				buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, end)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			}
			while (true) {
				if (!(in$1.length > 0 && !((in$1.charCodeAt(0) === quote)))) { break; }
				_tuple$1 = UnquoteChar(in$1, quote);
				r$1 = _tuple$1[0];
				multibyte = _tuple$1[1];
				rem$1 = _tuple$1[2];
				err$1 = _tuple$1[3];
				if ((in$1.charCodeAt(0) === 10) || !($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$12 = "";
					_tmp$13 = in0;
					_tmp$14 = $pkg.ErrSyntax;
					out = _tmp$12;
					rem = _tmp$13;
					err = _tmp$14;
					return [out, rem, err];
				}
				in$1 = rem$1;
				if (unescape) {
					if (r$1 < 128 || !multibyte) {
						buf$1 = $append(buf$1, ((r$1 << 24 >>> 24)));
					} else {
						arr = arrayType$1.zero();
						n$1 = utf8.EncodeRune(new sliceType$6(arr), r$1);
						buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(arr), 0, n$1));
					}
				}
				if (quote === 39) {
					break;
				}
			}
			if (!(in$1.length > 0 && (in$1.charCodeAt(0) === quote))) {
				_tmp$15 = "";
				_tmp$16 = in0;
				_tmp$17 = $pkg.ErrSyntax;
				out = _tmp$15;
				rem = _tmp$16;
				err = _tmp$17;
				return [out, rem, err];
			}
			in$1 = $substring(in$1, 1);
			if (unescape) {
				_tmp$18 = ($bytesToString(buf$1));
				_tmp$19 = in$1;
				_tmp$20 = $ifaceNil;
				out = _tmp$18;
				rem = _tmp$19;
				err = _tmp$20;
				return [out, rem, err];
			}
			_tmp$21 = $substring(in0, 0, (in0.length - in$1.length >> 0));
			_tmp$22 = in$1;
			_tmp$23 = $ifaceNil;
			out = _tmp$21;
			rem = _tmp$22;
			err = _tmp$23;
			return [out, rem, err];
		} else {
			_tmp$24 = "";
			_tmp$25 = in$1;
			_tmp$26 = $pkg.ErrSyntax;
			out = _tmp$24;
			rem = _tmp$25;
			err = _tmp$26;
			return [out, rem, err];
		}
	};
	bsearch16 = function(a, x) {
		var _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (((j - i >> 0)) >> 1 >> 0) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (((j - i >> 0)) >> 1 >> 0) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	FormatUint = function(i, base) {
		var _tuple, base, i, s;
		if (true && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small(((i.$low >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, i, base, false, false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatUint = FormatUint;
	FormatInt = function(i, base) {
		var _tuple, base, i, s;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	small = function(i) {
		var i;
		if (i < 10) {
			return $substring("0123456789abcdefghijklmnopqrstuvwxyz", i, (i + 1 >> 0));
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", ($imul(i, 2)), (($imul(i, 2)) + 2 >> 0));
	};
	formatBits = function(dst, u, base, neg, append_) {
		var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, shift, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$2.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 4;
					while (true) {
						if (!(j > 0)) { break; }
						is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
						us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						i = i - (2) >> 0;
						(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
						(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
						j = j - (1) >> 0;
					}
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 100)) { break; }
				is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
				us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				i = i - (2) >> 0;
				(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
				(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
			}
			is$2 = us$1 * 2 >>> 0;
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
			if (us$1 >= 10) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
			}
		} else if (isPowerOfTwo(base)) {
			shift = (((bits.TrailingZeros(((base >>> 0))) >>> 0)) & 7) >>> 0;
			b = (new $Uint64(0, base));
			m = ((base >>> 0)) - 1 >>> 0;
			while (true) {
				if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
				u = $shiftRightUint64(u, (shift));
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
		} else {
			b$1 = (new $Uint64(0, base));
			while (true) {
				if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
				i = i - (1) >> 0;
				q$1 = $div64(u, b$1, false);
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
				u = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	isPowerOfTwo = function(x) {
		var x;
		return (x & ((x - 1 >> 0))) === 0;
	};
	Itoa = function(i) {
		var i;
		return $internalize(i.toString(), $String);
	};
	$pkg.Itoa = Itoa;
	ryuFtoaFixed32 = function(d, mant, exp, prec) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, d, d0, dexp2, dfrac, di, e2, exact, exp, extra, extraMask, mant, prec, q, roundUp, y, y$1, y$2, y$3, y$4, y$5, y$6;
		if (prec < 0) {
			$panic(new $String("ryuFtoaFixed32 called with negative prec"));
		}
		if (prec > 9) {
			$panic(new $String("ryuFtoaFixed32 called with prec > 9"));
		}
		if (mant === 0) {
			_tmp = 0;
			_tmp$1 = 0;
			d.nd = _tmp;
			d.dp = _tmp$1;
			return;
		}
		e2 = exp;
		b = bits.Len32(mant);
		if (b < 25) {
			mant = (y = ((((25 - b >> 0) >>> 0))), y < 32 ? (mant << y) : 0) >>> 0;
			e2 = e2 + (((b) - 25 >> 0)) >> 0;
		}
		q = (-mulByLog2Log10(e2 + 24 >> 0) + prec >> 0) - 1 >> 0;
		exact = q <= 27 && q >= 0;
		_tuple = mult64bitPow10(mant, e2, q);
		di = _tuple[0];
		dexp2 = _tuple[1];
		d0 = _tuple[2];
		if (dexp2 >= 0) {
			$panic(new $String("not enough significant bits after mult64bitPow10"));
		}
		if (q < 0 && q >= -10 && divisibleByPower5((new $Uint64(0, mant)), -q)) {
			exact = true;
			d0 = true;
		}
		extra = ((-dexp2 >>> 0));
		extraMask = ((((y$1 = extra, y$1 < 32 ? (1 << y$1) : 0) >>> 0) - 1 >>> 0));
		_tmp$2 = (y$2 = extra, y$2 < 32 ? (di >>> y$2) : 0) >>> 0;
		_tmp$3 = (di & extraMask) >>> 0;
		di = _tmp$2;
		dfrac = _tmp$3;
		roundUp = false;
		if (exact) {
			roundUp = dfrac > ((y$3 = ((extra - 1 >>> 0)), y$3 < 32 ? (1 << y$3) : 0) >>> 0) || ((dfrac === ((y$4 = ((extra - 1 >>> 0)), y$4 < 32 ? (1 << y$4) : 0) >>> 0)) && !d0) || ((dfrac === ((y$5 = ((extra - 1 >>> 0)), y$5 < 32 ? (1 << y$5) : 0) >>> 0)) && d0 && (((di & 1) >>> 0) === 1));
		} else {
			roundUp = ((y$6 = ((extra - 1 >>> 0)), y$6 < 32 ? (dfrac >>> y$6) : 0) >>> 0) === 1;
		}
		if (!((dfrac === 0))) {
			d0 = false;
		}
		formatDecimal(d, (new $Uint64(0, di)), !d0, roundUp, prec);
		d.dp = d.dp - (q) >> 0;
	};
	ryuFtoaFixed64 = function(d, mant, exp, prec) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, d, d0, dexp2, dfrac, di, e2, exact, exp, extra, extraMask, mant, prec, q, roundUp, x, x$1, x$2, x$3, x$4, x$5;
		if (prec > 18) {
			$panic(new $String("ryuFtoaFixed64 called with prec > 18"));
		}
		if ((mant.$high === 0 && mant.$low === 0)) {
			_tmp = 0;
			_tmp$1 = 0;
			d.nd = _tmp;
			d.dp = _tmp$1;
			return;
		}
		e2 = exp;
		b = bits.Len64(mant);
		if (b < 55) {
			mant = $shiftLeft64(mant, (((55 - b >> 0) >>> 0)));
			e2 = e2 + (((b) - 55 >> 0)) >> 0;
		}
		q = (-mulByLog2Log10(e2 + 54 >> 0) + prec >> 0) - 1 >> 0;
		exact = q <= 55 && q >= 0;
		_tuple = mult128bitPow10(mant, e2, q);
		di = _tuple[0];
		dexp2 = _tuple[1];
		d0 = _tuple[2];
		if (dexp2 >= 0) {
			$panic(new $String("not enough significant bits after mult128bitPow10"));
		}
		if (q < 0 && q >= -22 && divisibleByPower5(mant, -q)) {
			exact = true;
			d0 = true;
		}
		extra = ((-dexp2 >>> 0));
		extraMask = ((x = $shiftLeft64(new $Uint64(0, 1), extra), new $Uint64(x.$high - 0, x.$low - 1)));
		_tmp$2 = $shiftRightUint64(di, extra);
		_tmp$3 = new $Uint64(di.$high & extraMask.$high, (di.$low & extraMask.$low) >>> 0);
		di = _tmp$2;
		dfrac = _tmp$3;
		roundUp = false;
		if (exact) {
			roundUp = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (dfrac.$high > x$1.$high || (dfrac.$high === x$1.$high && dfrac.$low > x$1.$low))) || ((x$2 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (dfrac.$high === x$2.$high && dfrac.$low === x$2.$low)) && !d0) || ((x$3 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (dfrac.$high === x$3.$high && dfrac.$low === x$3.$low)) && d0 && (x$4 = new $Uint64(di.$high & 0, (di.$low & 1) >>> 0), (x$4.$high === 0 && x$4.$low === 1)));
		} else {
			roundUp = (x$5 = $shiftRightUint64(dfrac, ((extra - 1 >>> 0))), (x$5.$high === 0 && x$5.$low === 1));
		}
		if (!((dfrac.$high === 0 && dfrac.$low === 0))) {
			d0 = false;
		}
		formatDecimal(d, di, !d0, roundUp, prec);
		d.dp = d.dp - (q) >> 0;
	};
	formatDecimal = function(d, m, trunc, roundUp, prec) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, a, b, d, m, max$1, n, prec, roundUp, trimmed, trunc, v, v1, v2, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		max$1 = ((prec < 0 || prec >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[prec]);
		trimmed = 0;
		while (true) {
			if (!((m.$high > max$1.$high || (m.$high === max$1.$high && m.$low >= max$1.$low)))) { break; }
			_tmp = $div64(m, new $Uint64(0, 10), false);
			_tmp$1 = $div64(m, new $Uint64(0, 10), true);
			a = _tmp;
			b = _tmp$1;
			m = a;
			trimmed = trimmed + (1) >> 0;
			if ((b.$high > 0 || (b.$high === 0 && b.$low > 5))) {
				roundUp = true;
			} else if ((b.$high < 0 || (b.$high === 0 && b.$low < 5))) {
				roundUp = false;
			} else {
				roundUp = trunc || (x = new $Uint64(m.$high & 0, (m.$low & 1) >>> 0), (x.$high === 0 && x.$low === 1));
			}
			if (!((b.$high === 0 && b.$low === 0))) {
				trunc = true;
			}
		}
		if (roundUp) {
			m = (x$1 = new $Uint64(0, 1), new $Uint64(m.$high + x$1.$high, m.$low + x$1.$low));
		}
		if ((m.$high > max$1.$high || (m.$high === max$1.$high && m.$low >= max$1.$low))) {
			m = $div64(m, (new $Uint64(0, 10)), false);
			trimmed = trimmed + (1) >> 0;
		}
		n = ((prec >>> 0));
		d.nd = (prec);
		v = m;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low >= 100)))) { break; }
			_tmp$2 = new $Uint64(0, 0);
			_tmp$3 = new $Uint64(0, 0);
			v1 = _tmp$2;
			v2 = _tmp$3;
			if ((x$2 = $shiftRightUint64(v, 32), (x$2.$high === 0 && x$2.$low === 0))) {
				_tmp$4 = (new $Uint64(0, (_q = ((v.$low >>> 0)) / 100, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))));
				_tmp$5 = (new $Uint64(0, (_r = ((v.$low >>> 0)) % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
				v1 = _tmp$4;
				v2 = _tmp$5;
			} else {
				_tmp$6 = $div64(v, new $Uint64(0, 100), false);
				_tmp$7 = $div64(v, new $Uint64(0, 100), true);
				v1 = _tmp$6;
				v2 = _tmp$7;
			}
			n = n - (2) >>> 0;
			(x$4 = d.d, x$5 = n + 1 >>> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt($flatten64((x$3 = $mul64(new $Uint64(0, 2), v2), new $Uint64(x$3.$high + 0, x$3.$low + 1))))));
			(x$7 = d.d, x$8 = n + 0 >>> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt($flatten64((x$6 = $mul64(new $Uint64(0, 2), v2), new $Uint64(x$6.$high + 0, x$6.$low + 0))))));
			v = v1;
		}
		if ((v.$high > 0 || (v.$high === 0 && v.$low > 0))) {
			n = n - (1) >>> 0;
			(x$10 = d.d, ((n < 0 || n >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + n] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt($flatten64((x$9 = $mul64(new $Uint64(0, 2), v), new $Uint64(x$9.$high + 0, x$9.$low + 1))))));
		}
		if ((v.$high > 0 || (v.$high === 0 && v.$low >= 10))) {
			n = n - (1) >>> 0;
			(x$11 = d.d, ((n < 0 || n >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + n] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt($flatten64($mul64(new $Uint64(0, 2), v)))));
		}
		while (true) {
			if (!((x$12 = d.d, x$13 = d.nd - 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + x$13])) === 48)) { break; }
			d.nd = d.nd - (1) >> 0;
			trimmed = trimmed + (1) >> 0;
		}
		d.dp = d.nd + trimmed >> 0;
	};
	ryuFtoaShortest = function(d, mant, exp, flt) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, c0, cup, d, dc, dc0, dc32, dl, dl0, dl32, du, du0, du32, e2, exp, extra, extraMask, flt, fracc, fracl, fracu, lok, mant, mc, ml, mu, q, uok, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		if ((mant.$high === 0 && mant.$low === 0)) {
			_tmp = 0;
			_tmp$1 = 0;
			d.nd = _tmp;
			d.dp = _tmp$1;
			return;
		}
		if (exp <= 0 && bits.TrailingZeros64(mant) >= -exp) {
			mant = $shiftRightUint64(mant, (((-exp >>> 0))));
			ryuDigits(d, mant, mant, mant, true, false);
			return;
		}
		_tuple = computeBounds(mant, exp, flt);
		ml = _tuple[0];
		mc = _tuple[1];
		mu = _tuple[2];
		e2 = _tuple[3];
		if (e2 === 0) {
			ryuDigits(d, ml, mc, mu, true, false);
			return;
		}
		q = mulByLog2Log10(-e2) + 1 >> 0;
		_tmp$2 = new $Uint64(0, 0);
		_tmp$3 = new $Uint64(0, 0);
		_tmp$4 = new $Uint64(0, 0);
		dl = _tmp$2;
		dc = _tmp$3;
		du = _tmp$4;
		_tmp$5 = false;
		_tmp$6 = false;
		_tmp$7 = false;
		dl0 = _tmp$5;
		dc0 = _tmp$6;
		du0 = _tmp$7;
		if (flt === float32info) {
			_tmp$8 = 0;
			_tmp$9 = 0;
			_tmp$10 = 0;
			dl32 = _tmp$8;
			dc32 = _tmp$9;
			du32 = _tmp$10;
			_tuple$1 = mult64bitPow10(((ml.$low >>> 0)), e2, q);
			dl32 = _tuple$1[0];
			dl0 = _tuple$1[2];
			_tuple$2 = mult64bitPow10(((mc.$low >>> 0)), e2, q);
			dc32 = _tuple$2[0];
			dc0 = _tuple$2[2];
			_tuple$3 = mult64bitPow10(((mu.$low >>> 0)), e2, q);
			du32 = _tuple$3[0];
			e2 = _tuple$3[1];
			du0 = _tuple$3[2];
			_tmp$11 = (new $Uint64(0, dl32));
			_tmp$12 = (new $Uint64(0, dc32));
			_tmp$13 = (new $Uint64(0, du32));
			dl = _tmp$11;
			dc = _tmp$12;
			du = _tmp$13;
		} else {
			_tuple$4 = mult128bitPow10(ml, e2, q);
			dl = _tuple$4[0];
			dl0 = _tuple$4[2];
			_tuple$5 = mult128bitPow10(mc, e2, q);
			dc = _tuple$5[0];
			dc0 = _tuple$5[2];
			_tuple$6 = mult128bitPow10(mu, e2, q);
			du = _tuple$6[0];
			e2 = _tuple$6[1];
			du0 = _tuple$6[2];
		}
		if (e2 >= 0) {
			$panic(new $String("not enough significant bits after mult128bitPow10"));
		}
		if (q > 55) {
			_tmp$14 = false;
			_tmp$15 = false;
			_tmp$16 = false;
			dl0 = _tmp$14;
			dc0 = _tmp$15;
			du0 = _tmp$16;
		}
		if (q < 0 && q >= -24) {
			if (divisibleByPower5(ml, -q)) {
				dl0 = true;
			}
			if (divisibleByPower5(mc, -q)) {
				dc0 = true;
			}
			if (divisibleByPower5(mu, -q)) {
				du0 = true;
			}
		}
		extra = ((-e2 >>> 0));
		extraMask = ((x = $shiftLeft64(new $Uint64(0, 1), extra), new $Uint64(x.$high - 0, x.$low - 1)));
		_tmp$17 = $shiftRightUint64(dl, extra);
		_tmp$18 = new $Uint64(dl.$high & extraMask.$high, (dl.$low & extraMask.$low) >>> 0);
		dl = _tmp$17;
		fracl = _tmp$18;
		_tmp$19 = $shiftRightUint64(dc, extra);
		_tmp$20 = new $Uint64(dc.$high & extraMask.$high, (dc.$low & extraMask.$low) >>> 0);
		dc = _tmp$19;
		fracc = _tmp$20;
		_tmp$21 = $shiftRightUint64(du, extra);
		_tmp$22 = new $Uint64(du.$high & extraMask.$high, (du.$low & extraMask.$low) >>> 0);
		du = _tmp$21;
		fracu = _tmp$22;
		uok = !du0 || (fracu.$high > 0 || (fracu.$high === 0 && fracu.$low > 0));
		if (du0 && (fracu.$high === 0 && fracu.$low === 0)) {
			uok = (x$1 = new $Uint64(mant.$high & 0, (mant.$low & 1) >>> 0), (x$1.$high === 0 && x$1.$low === 0));
		}
		if (!uok) {
			du = (x$2 = new $Uint64(0, 1), new $Uint64(du.$high - x$2.$high, du.$low - x$2.$low));
		}
		cup = false;
		if (dc0) {
			cup = (x$3 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (fracc.$high > x$3.$high || (fracc.$high === x$3.$high && fracc.$low > x$3.$low))) || ((x$4 = $shiftLeft64(new $Uint64(0, 1), ((extra - 1 >>> 0))), (fracc.$high === x$4.$high && fracc.$low === x$4.$low)) && (x$5 = new $Uint64(dc.$high & 0, (dc.$low & 1) >>> 0), (x$5.$high === 0 && x$5.$low === 1)));
		} else {
			cup = (x$6 = $shiftRightUint64(fracc, ((extra - 1 >>> 0))), (x$6.$high === 0 && x$6.$low === 1));
		}
		lok = dl0 && (fracl.$high === 0 && fracl.$low === 0) && ((x$7 = new $Uint64(mant.$high & 0, (mant.$low & 1) >>> 0), (x$7.$high === 0 && x$7.$low === 0)));
		if (!lok) {
			dl = (x$8 = new $Uint64(0, 1), new $Uint64(dl.$high + x$8.$high, dl.$low + x$8.$low));
		}
		c0 = dc0 && (fracc.$high === 0 && fracc.$low === 0);
		ryuDigits(d, dl, dc, du, c0, cup);
		d.dp = d.dp - (q) >> 0;
	};
	mulByLog2Log10 = function(x) {
		var x;
		return (($imul(x, 78913))) >> 18 >> 0;
	};
	mulByLog10Log2 = function(x) {
		var x;
		return (($imul(x, 108853))) >> 15 >> 0;
	};
	computeBounds = function(mant, exp, flt) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, central, e2, exp, flt, lower$1, mant, upper, x, x$1, x$2, x$3, x$4;
		lower$1 = new $Uint64(0, 0);
		central = new $Uint64(0, 0);
		upper = new $Uint64(0, 0);
		e2 = 0;
		if (!((x = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x.$high && mant.$low === x.$low))) || (exp === ((flt.bias + 1 >> 0) - ((flt.mantbits >> 0)) >> 0))) {
			_tmp = (x$1 = $mul64(new $Uint64(0, 2), mant), new $Uint64(x$1.$high - 0, x$1.$low - 1));
			_tmp$1 = $mul64(new $Uint64(0, 2), mant);
			_tmp$2 = (x$2 = $mul64(new $Uint64(0, 2), mant), new $Uint64(x$2.$high + 0, x$2.$low + 1));
			lower$1 = _tmp;
			central = _tmp$1;
			upper = _tmp$2;
			e2 = exp - 1 >> 0;
			return [lower$1, central, upper, e2];
		} else {
			_tmp$3 = (x$3 = $mul64(new $Uint64(0, 4), mant), new $Uint64(x$3.$high - 0, x$3.$low - 1));
			_tmp$4 = $mul64(new $Uint64(0, 4), mant);
			_tmp$5 = (x$4 = $mul64(new $Uint64(0, 4), mant), new $Uint64(x$4.$high + 0, x$4.$low + 2));
			lower$1 = _tmp$3;
			central = _tmp$4;
			upper = _tmp$5;
			e2 = exp - 2 >> 0;
			return [lower$1, central, upper, e2];
		}
	};
	ryuDigits = function(d, lower$1, central, upper, c0, cup) {
		var _q, _r, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, c0, central, chi, clo, cup, d, lhi, llo, lower$1, n, uhi, ulo, upper, v, v1, v2, x, x$1, x$2, x$3;
		_tuple = divmod1e9(lower$1);
		lhi = _tuple[0];
		llo = _tuple[1];
		_tuple$1 = divmod1e9(central);
		chi = _tuple$1[0];
		clo = _tuple$1[1];
		_tuple$2 = divmod1e9(upper);
		uhi = _tuple$2[0];
		ulo = _tuple$2[1];
		if (uhi === 0) {
			ryuDigits32(d, llo, clo, ulo, c0, cup, 8);
		} else if (lhi < uhi) {
			if (!((llo === 0))) {
				lhi = lhi + (1) >>> 0;
			}
			c0 = c0 && (clo === 0);
			cup = (clo > 500000000) || ((clo === 500000000) && cup);
			ryuDigits32(d, lhi, chi, uhi, c0, cup, 8);
			d.dp = d.dp + (9) >> 0;
		} else {
			d.nd = 0;
			n = 9;
			v = chi;
			while (true) {
				if (!(v > 0)) { break; }
				_tmp = (_q = v / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				_tmp$1 = (_r = v % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
				v1 = _tmp;
				v2 = _tmp$1;
				v = v1;
				n = n - (1) >>> 0;
				(x = d.d, ((n < 0 || n >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + n] = (((v2 + 48 >>> 0) << 24 >>> 24))));
			}
			d.d = $subslice(d.d, n);
			d.nd = (((9 - n >>> 0) >> 0));
			ryuDigits32(d, llo, clo, ulo, c0, cup, d.nd + 8 >> 0);
		}
		while (true) {
			if (!(d.nd > 0 && ((x$1 = d.d, x$2 = d.nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === 48))) { break; }
			d.nd = d.nd - (1) >> 0;
		}
		while (true) {
			if (!(d.nd > 0 && ((x$3 = d.d, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) === 48))) { break; }
			d.nd = d.nd - (1) >> 0;
			d.dp = d.dp - (1) >> 0;
			d.d = $subslice(d.d, 1);
		}
	};
	ryuDigits32 = function(d, lower$1, central, upper, c0, cup, endindex) {
		var _q, _q$1, _q$2, _q$3, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, c, c0, cNextDigit, cdigit, central, cup, d, endindex, l, lower$1, n, trimmed, u, upper, v, v1, v2, x, x$1, x$2, x$3;
		if (upper === 0) {
			d.dp = endindex + 1 >> 0;
			return;
		}
		trimmed = 0;
		cNextDigit = 0;
		while (true) {
			if (!(upper > 0)) { break; }
			l = (_q = ((lower$1 + 9 >>> 0)) / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp = (_q$1 = central / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$1 = (_r = central % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			c = _tmp;
			cdigit = _tmp$1;
			u = (_q$2 = upper / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
			if (l > u) {
				break;
			}
			if ((l === (c + 1 >>> 0)) && c < u) {
				c = c + (1) >>> 0;
				cdigit = 0;
				cup = false;
			}
			trimmed = trimmed + (1) >> 0;
			c0 = c0 && (cNextDigit === 0);
			cNextDigit = ((cdigit >> 0));
			_tmp$2 = l;
			_tmp$3 = c;
			_tmp$4 = u;
			lower$1 = _tmp$2;
			central = _tmp$3;
			upper = _tmp$4;
		}
		if (trimmed > 0) {
			cup = cNextDigit > 5 || ((cNextDigit === 5) && !c0) || ((cNextDigit === 5) && c0 && (((central & 1) >>> 0) === 1));
		}
		if (central < upper && cup) {
			central = central + (1) >>> 0;
		}
		endindex = endindex - (trimmed) >> 0;
		v = central;
		n = endindex;
		while (true) {
			if (!(n > d.nd)) { break; }
			_tmp$5 = (_q$3 = v / 100, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$6 = (_r$1 = v % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			v1 = _tmp$5;
			v2 = _tmp$6;
			(x = d.d, ((n < 0 || n >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + n] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((($imul(2, v2) >>> 0) + 1 >>> 0))));
			(x$1 = d.d, x$2 = n - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((($imul(2, v2) >>> 0) + 0 >>> 0))));
			n = n - (2) >> 0;
			v = v1;
		}
		if (n === d.nd) {
			(x$3 = d.d, ((n < 0 || n >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + n] = (((v + 48 >>> 0) << 24 >>> 24))));
		}
		d.nd = endindex + 1 >> 0;
		d.dp = d.nd + trimmed >> 0;
	};
	mult64bitPow10 = function(m, e2, q) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e2, exact, hi, lo, m, pow, q, resE, resM, x, x$1, x$2, x$3, x$4;
		resM = 0;
		resE = 0;
		exact = false;
		if (q === 0) {
			_tmp = m << 6 >>> 0;
			_tmp$1 = e2 - 6 >> 0;
			_tmp$2 = true;
			resM = _tmp;
			resE = _tmp$1;
			exact = _tmp$2;
			return [resM, resE, exact];
		}
		if (q < -348 || 347 < q) {
			$panic(new $String("mult64bitPow10: power of 10 is out of range"));
		}
		pow = (x = q - -348 >> 0, ((x < 0 || x >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x]))[1];
		if (q < 0) {
			pow = (x$1 = new $Uint64(0, 1), new $Uint64(pow.$high + x$1.$high, pow.$low + x$1.$low));
		}
		_tuple = bits.Mul64((new $Uint64(0, m)), pow);
		hi = _tuple[0];
		lo = _tuple[1];
		e2 = e2 + (((mulByLog10Log2(q) - 63 >> 0) + 57 >> 0)) >> 0;
		_tmp$3 = (((x$2 = $shiftLeft64(hi, 7), x$3 = $shiftRightUint64(lo, 57), new $Uint64(x$2.$high | x$3.$high, (x$2.$low | x$3.$low) >>> 0)).$low >>> 0));
		_tmp$4 = e2;
		_tmp$5 = (x$4 = $shiftLeft64(lo, 7), (x$4.$high === 0 && x$4.$low === 0));
		resM = _tmp$3;
		resE = _tmp$4;
		exact = _tmp$5;
		return [resM, resE, exact];
	};
	mult128bitPow10 = function(m, e2, q) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, carry, e2, exact, h0, h1, l0, l1, m, mid, pow, q, resE, resM, x, x$1, x$2, x$3, x$4, x$5, x$6;
		resM = new $Uint64(0, 0);
		resE = 0;
		exact = false;
		if (q === 0) {
			_tmp = $shiftLeft64(m, 8);
			_tmp$1 = e2 - 8 >> 0;
			_tmp$2 = true;
			resM = _tmp;
			resE = _tmp$1;
			exact = _tmp$2;
			return [resM, resE, exact];
		}
		if (q < -348 || 347 < q) {
			$panic(new $String("mult128bitPow10: power of 10 is out of range"));
		}
		pow = $clone((x = q - -348 >> 0, ((x < 0 || x >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x])), arrayType);
		if (q < 0) {
			pow[0] = (x$1 = pow[0], x$2 = new $Uint64(0, 1), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		}
		e2 = e2 + (((mulByLog10Log2(q) - 127 >> 0) + 119 >> 0)) >> 0;
		_tuple = bits.Mul64(m, pow[0]);
		l1 = _tuple[0];
		l0 = _tuple[1];
		_tuple$1 = bits.Mul64(m, pow[1]);
		h1 = _tuple$1[0];
		h0 = _tuple$1[1];
		_tuple$2 = bits.Add64(l1, h0, new $Uint64(0, 0));
		mid = _tuple$2[0];
		carry = _tuple$2[1];
		h1 = (x$3 = carry, new $Uint64(h1.$high + x$3.$high, h1.$low + x$3.$low));
		_tmp$3 = (x$4 = $shiftLeft64(h1, 9), x$5 = $shiftRightUint64(mid, 55), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0));
		_tmp$4 = e2;
		_tmp$5 = (x$6 = $shiftLeft64(mid, 9), (x$6.$high === 0 && x$6.$low === 0)) && (l0.$high === 0 && l0.$low === 0);
		resM = _tmp$3;
		resE = _tmp$4;
		exact = _tmp$5;
		return [resM, resE, exact];
	};
	divisibleByPower5 = function(m, k) {
		var i, k, m, x;
		if ((m.$high === 0 && m.$low === 0)) {
			return true;
		}
		i = 0;
		while (true) {
			if (!(i < k)) { break; }
			if (!((x = $div64(m, new $Uint64(0, 5), true), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			m = $div64(m, (new $Uint64(0, 5)), false);
			i = i + (1) >> 0;
		}
		return true;
	};
	divmod1e9 = function(x) {
		var _tuple, hi, q, x, x$1;
		if (false) {
			return [(($div64(x, new $Uint64(0, 1000000000), false).$low >>> 0)), (($div64(x, new $Uint64(0, 1000000000), true).$low >>> 0))];
		}
		_tuple = bits.Mul64($shiftRightUint64(x, 1), new $Uint64(2305843009, 917808536));
		hi = _tuple[0];
		q = $shiftRightUint64(hi, 28);
		return [((q.$low >>> 0)), (((x$1 = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low >>> 0))];
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _1, _2, _3, _4, bitSize, bits$1, buf, buf$1, digits, digs, dst, exp, flt, fmt, mant, neg, ok, prec, s, shortest, val, x, x$1, x$2, x$3, y, y$1;
		bits$1 = new $Uint64(0, 0);
		flt = ptrType.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits$1 = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits$1 = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits$1, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits$1, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits$1.$high & x$1.$high, (bits$1.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if ((fmt === 120) || (fmt === 88)) {
			return fmtX(dst, prec, fmt, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			buf = arrayType$3.zero();
			digs.d = new sliceType$6(buf);
			ryuFtoaShortest(digs, mant, exp - ((flt.mantbits >> 0)) >> 0, flt);
			ok = true;
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			} else {
				digits = 1;
			}
			buf$1 = arrayType$4.zero();
			if ((bitSize === 32) && digits <= 9) {
				digs.d = new sliceType$6(buf$1);
				ryuFtoaFixed32(digs, ((mant.$low >>> 0)), exp - ((flt.mantbits >> 0)) >> 0, digits);
				ok = true;
			} else if (digits <= 18) {
				digs.d = new sliceType$6(buf$1);
				ryuFtoaFixed64(digs, mant, exp - ((flt.mantbits >> 0)) >> 0, digits);
				ok = true;
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType$5.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var d, exp, explo, flt, inclusive, l, li, lower$1, m, mant, mantlo, mi, minexp, okdown, okup, u, ui, upper, upperdelta, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType$5.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower$1 = new decimal.ptr(arrayType$5.zero(), 0, 0, false, false);
		lower$1.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower$1.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		upperdelta = 0;
		ui = 0;
		while (true) {
			mi = (ui - upper.dp >> 0) + d.dp >> 0;
			if (mi >= d.nd) {
				break;
			}
			li = (ui - upper.dp >> 0) + lower$1.dp >> 0;
			l = 48;
			if (li >= 0 && li < lower$1.nd) {
				l = (x$5 = lower$1.d, ((li < 0 || li >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[li]));
			}
			m = 48;
			if (mi >= 0) {
				m = (x$6 = d.d, ((mi < 0 || mi >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[mi]));
			}
			u = 48;
			if (ui < upper.nd) {
				u = (x$7 = upper.d, ((ui < 0 || ui >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[ui]));
			}
			okdown = !((l === m)) || inclusive && ((li + 1 >> 0) === lower$1.nd);
			if ((upperdelta === 0) && (m + 1 << 24 >>> 24) < u) {
				upperdelta = 2;
			} else if ((upperdelta === 0) && !((m === u))) {
				upperdelta = 1;
			} else if ((upperdelta === 1) && (!((m === 57)) || !((u === 48)))) {
				upperdelta = 2;
			}
			okup = upperdelta > 0 && (inclusive || upperdelta > 1 || (ui + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(mi + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(mi + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(mi + 1 >> 0);
				return;
			}
			ui = ui + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	fmtX = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, ch, dst, exp, extra, flt, fmt, hex, i, mant, neg, prec, shift, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		if ((mant.$high === 0 && mant.$low === 0)) {
			exp = 0;
		}
		mant = $shiftLeft64(mant, ((60 - flt.mantbits >>> 0)));
		while (true) {
			if (!(!((mant.$high === 0 && mant.$low === 0)) && (x = new $Uint64(mant.$high & 268435456, (mant.$low & 0) >>> 0), (x.$high === 0 && x.$low === 0)))) { break; }
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		if (prec >= 0 && prec < 15) {
			shift = ((($imul(prec, 4)) >>> 0));
			extra = (x$1 = $shiftLeft64(mant, shift), new $Uint64(x$1.$high & 268435455, (x$1.$low & 4294967295) >>> 0));
			mant = $shiftRightUint64(mant, ((60 - shift >>> 0)));
			if ((x$2 = (x$3 = new $Uint64(mant.$high & 0, (mant.$low & 1) >>> 0), new $Uint64(extra.$high | x$3.$high, (extra.$low | x$3.$low) >>> 0)), (x$2.$high > 134217728 || (x$2.$high === 134217728 && x$2.$low > 0)))) {
				mant = (x$4 = new $Uint64(0, 1), new $Uint64(mant.$high + x$4.$high, mant.$low + x$4.$low));
			}
			mant = $shiftLeft64(mant, ((60 - shift >>> 0)));
			if (!((x$5 = new $Uint64(mant.$high & 536870912, (mant.$low & 0) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) {
				mant = $shiftRightUint64(mant, (1));
				exp = exp + (1) >> 0;
			}
		}
		hex = "0123456789abcdef";
		if (fmt === 88) {
			hex = "0123456789ABCDEF";
		}
		if (neg) {
			dst = $append(dst, 45);
		}
		dst = $append(dst, 48, fmt, 48 + (((x$6 = $shiftRightUint64(mant, 60), new $Uint64(x$6.$high & 0, (x$6.$low & 1) >>> 0)).$low << 24 >>> 24)) << 24 >>> 24);
		mant = $shiftLeft64(mant, (4));
		if (prec < 0 && !((mant.$high === 0 && mant.$low === 0))) {
			dst = $append(dst, 46);
			while (true) {
				if (!(!((mant.$high === 0 && mant.$low === 0)))) { break; }
				dst = $append(dst, hex.charCodeAt($flatten64((x$7 = $shiftRightUint64(mant, 60), new $Uint64(x$7.$high & 0, (x$7.$low & 15) >>> 0)))));
				mant = $shiftLeft64(mant, (4));
			}
		} else if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				dst = $append(dst, hex.charCodeAt($flatten64((x$8 = $shiftRightUint64(mant, 60), new $Uint64(x$8.$high & 0, (x$8.$low & 15) >>> 0)))));
				mant = $shiftLeft64(mant, (4));
				i = i + (1) >> 0;
			}
		}
		ch = 80;
		if (fmt === lower(fmt)) {
			ch = 112;
		}
		dst = $append(dst, ch);
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 1000) {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$3 = exp / 1000, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$3 = (((_q$4 = exp / 100, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$4 = ((_q$5 = exp / 10, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r$5 = exp % 10, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	eiselLemire64 = function(man, exp10, neg) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, clz, exp10, f, man, mergedHi, mergedLo, msb, neg, ok, retBits, retExp2, retMantissa, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xHi, xLo, yHi, yLo;
		f = 0;
		ok = false;
		if ((man.$high === 0 && man.$low === 0)) {
			if (neg) {
				f = math.Float64frombits(new $Uint64(2147483648, 0));
			}
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		}
		if (exp10 < -348 || 347 < exp10) {
			_tmp$2 = 0;
			_tmp$3 = false;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		}
		clz = bits.LeadingZeros64(man);
		man = $shiftLeft64(man, (((clz >>> 0))));
		retExp2 = (x = (new $Uint64(0, (((($imul(217706, exp10)) >> 16 >> 0) + 64 >> 0) + 1023 >> 0))), x$1 = (new $Uint64(0, clz)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low));
		_tuple = bits.Mul64(man, (x$2 = exp10 - -348 >> 0, ((x$2 < 0 || x$2 >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x$2]))[1]);
		xHi = _tuple[0];
		xLo = _tuple[1];
		if ((x$3 = new $Uint64(xHi.$high & 0, (xHi.$low & 511) >>> 0), (x$3.$high === 0 && x$3.$low === 511)) && (x$4 = new $Uint64(xLo.$high + man.$high, xLo.$low + man.$low), (x$4.$high < man.$high || (x$4.$high === man.$high && x$4.$low < man.$low)))) {
			_tuple$1 = bits.Mul64(man, (x$5 = exp10 - -348 >> 0, ((x$5 < 0 || x$5 >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x$5]))[0]);
			yHi = _tuple$1[0];
			yLo = _tuple$1[1];
			_tmp$4 = xHi;
			_tmp$5 = new $Uint64(xLo.$high + yHi.$high, xLo.$low + yHi.$low);
			mergedHi = _tmp$4;
			mergedLo = _tmp$5;
			if ((mergedLo.$high < xLo.$high || (mergedLo.$high === xLo.$high && mergedLo.$low < xLo.$low))) {
				mergedHi = (x$6 = new $Uint64(0, 1), new $Uint64(mergedHi.$high + x$6.$high, mergedHi.$low + x$6.$low));
			}
			if ((x$7 = new $Uint64(mergedHi.$high & 0, (mergedHi.$low & 511) >>> 0), (x$7.$high === 0 && x$7.$low === 511)) && (x$8 = new $Uint64(mergedLo.$high + 0, mergedLo.$low + 1), (x$8.$high === 0 && x$8.$low === 0)) && (x$9 = new $Uint64(yLo.$high + man.$high, yLo.$low + man.$low), (x$9.$high < man.$high || (x$9.$high === man.$high && x$9.$low < man.$low)))) {
				_tmp$6 = 0;
				_tmp$7 = false;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
			_tmp$8 = mergedHi;
			_tmp$9 = mergedLo;
			xHi = _tmp$8;
			xLo = _tmp$9;
		}
		msb = $shiftRightUint64(xHi, 63);
		retMantissa = $shiftRightUint64(xHi, $flatten64((new $Uint64(msb.$high + 0, msb.$low + 9))));
		retExp2 = (x$10 = new $Uint64(0 ^ msb.$high, (1 ^ msb.$low) >>> 0), new $Uint64(retExp2.$high - x$10.$high, retExp2.$low - x$10.$low));
		if ((xLo.$high === 0 && xLo.$low === 0) && (x$11 = new $Uint64(xHi.$high & 0, (xHi.$low & 511) >>> 0), (x$11.$high === 0 && x$11.$low === 0)) && (x$12 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 3) >>> 0), (x$12.$high === 0 && x$12.$low === 1))) {
			_tmp$10 = 0;
			_tmp$11 = false;
			f = _tmp$10;
			ok = _tmp$11;
			return [f, ok];
		}
		retMantissa = (x$13 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 1) >>> 0), new $Uint64(retMantissa.$high + x$13.$high, retMantissa.$low + x$13.$low));
		retMantissa = $shiftRightUint64(retMantissa, (1));
		if ((x$14 = $shiftRightUint64(retMantissa, 53), (x$14.$high > 0 || (x$14.$high === 0 && x$14.$low > 0)))) {
			retMantissa = $shiftRightUint64(retMantissa, (1));
			retExp2 = (x$15 = new $Uint64(0, 1), new $Uint64(retExp2.$high + x$15.$high, retExp2.$low + x$15.$low));
		}
		if ((x$16 = new $Uint64(retExp2.$high - 0, retExp2.$low - 1), (x$16.$high > 0 || (x$16.$high === 0 && x$16.$low >= 2046)))) {
			_tmp$12 = 0;
			_tmp$13 = false;
			f = _tmp$12;
			ok = _tmp$13;
			return [f, ok];
		}
		retBits = (x$17 = $shiftLeft64(retExp2, 52), x$18 = new $Uint64(retMantissa.$high & 1048575, (retMantissa.$low & 4294967295) >>> 0), new $Uint64(x$17.$high | x$18.$high, (x$17.$low | x$18.$low) >>> 0));
		if (neg) {
			retBits = (x$19 = new $Uint64(2147483648, 0), new $Uint64(retBits.$high | x$19.$high, (retBits.$low | x$19.$low) >>> 0));
		}
		_tmp$14 = math.Float64frombits(retBits);
		_tmp$15 = true;
		f = _tmp$14;
		ok = _tmp$15;
		return [f, ok];
	};
	eiselLemire32 = function(man, exp10, neg) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, clz, exp10, f, man, mergedHi, mergedLo, msb, neg, ok, retBits, retExp2, retMantissa, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xHi, xLo, yHi, yLo;
		f = 0;
		ok = false;
		if ((man.$high === 0 && man.$low === 0)) {
			if (neg) {
				f = math.Float32frombits(2147483648);
			}
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		}
		if (exp10 < -348 || 347 < exp10) {
			_tmp$2 = 0;
			_tmp$3 = false;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		}
		clz = bits.LeadingZeros64(man);
		man = $shiftLeft64(man, (((clz >>> 0))));
		retExp2 = (x = (new $Uint64(0, (((($imul(217706, exp10)) >> 16 >> 0) + 64 >> 0) + 127 >> 0))), x$1 = (new $Uint64(0, clz)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low));
		_tuple = bits.Mul64(man, (x$2 = exp10 - -348 >> 0, ((x$2 < 0 || x$2 >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x$2]))[1]);
		xHi = _tuple[0];
		xLo = _tuple[1];
		if ((x$3 = new $Uint64(xHi.$high & 63, (xHi.$low & 4294967295) >>> 0), (x$3.$high === 63 && x$3.$low === 4294967295)) && (x$4 = new $Uint64(xLo.$high + man.$high, xLo.$low + man.$low), (x$4.$high < man.$high || (x$4.$high === man.$high && x$4.$low < man.$low)))) {
			_tuple$1 = bits.Mul64(man, (x$5 = exp10 - -348 >> 0, ((x$5 < 0 || x$5 >= detailedPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : detailedPowersOfTen[x$5]))[0]);
			yHi = _tuple$1[0];
			yLo = _tuple$1[1];
			_tmp$4 = xHi;
			_tmp$5 = new $Uint64(xLo.$high + yHi.$high, xLo.$low + yHi.$low);
			mergedHi = _tmp$4;
			mergedLo = _tmp$5;
			if ((mergedLo.$high < xLo.$high || (mergedLo.$high === xLo.$high && mergedLo.$low < xLo.$low))) {
				mergedHi = (x$6 = new $Uint64(0, 1), new $Uint64(mergedHi.$high + x$6.$high, mergedHi.$low + x$6.$low));
			}
			if ((x$7 = new $Uint64(mergedHi.$high & 63, (mergedHi.$low & 4294967295) >>> 0), (x$7.$high === 63 && x$7.$low === 4294967295)) && (x$8 = new $Uint64(mergedLo.$high + 0, mergedLo.$low + 1), (x$8.$high === 0 && x$8.$low === 0)) && (x$9 = new $Uint64(yLo.$high + man.$high, yLo.$low + man.$low), (x$9.$high < man.$high || (x$9.$high === man.$high && x$9.$low < man.$low)))) {
				_tmp$6 = 0;
				_tmp$7 = false;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
			_tmp$8 = mergedHi;
			_tmp$9 = mergedLo;
			xHi = _tmp$8;
			xLo = _tmp$9;
		}
		msb = $shiftRightUint64(xHi, 63);
		retMantissa = $shiftRightUint64(xHi, $flatten64((new $Uint64(msb.$high + 0, msb.$low + 38))));
		retExp2 = (x$10 = new $Uint64(0 ^ msb.$high, (1 ^ msb.$low) >>> 0), new $Uint64(retExp2.$high - x$10.$high, retExp2.$low - x$10.$low));
		if ((xLo.$high === 0 && xLo.$low === 0) && (x$11 = new $Uint64(xHi.$high & 63, (xHi.$low & 4294967295) >>> 0), (x$11.$high === 0 && x$11.$low === 0)) && (x$12 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 3) >>> 0), (x$12.$high === 0 && x$12.$low === 1))) {
			_tmp$10 = 0;
			_tmp$11 = false;
			f = _tmp$10;
			ok = _tmp$11;
			return [f, ok];
		}
		retMantissa = (x$13 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 1) >>> 0), new $Uint64(retMantissa.$high + x$13.$high, retMantissa.$low + x$13.$low));
		retMantissa = $shiftRightUint64(retMantissa, (1));
		if ((x$14 = $shiftRightUint64(retMantissa, 24), (x$14.$high > 0 || (x$14.$high === 0 && x$14.$low > 0)))) {
			retMantissa = $shiftRightUint64(retMantissa, (1));
			retExp2 = (x$15 = new $Uint64(0, 1), new $Uint64(retExp2.$high + x$15.$high, retExp2.$low + x$15.$low));
		}
		if ((x$16 = new $Uint64(retExp2.$high - 0, retExp2.$low - 1), (x$16.$high > 0 || (x$16.$high === 0 && x$16.$low >= 254)))) {
			_tmp$12 = 0;
			_tmp$13 = false;
			f = _tmp$12;
			ok = _tmp$13;
			return [f, ok];
		}
		retBits = (x$17 = $shiftLeft64(retExp2, 23), x$18 = new $Uint64(retMantissa.$high & 0, (retMantissa.$low & 8388607) >>> 0), new $Uint64(x$17.$high | x$18.$high, (x$17.$low | x$18.$low) >>> 0));
		if (neg) {
			retBits = (x$19 = new $Uint64(0, 2147483648), new $Uint64(retBits.$high | x$19.$high, (retBits.$low | x$19.$low) >>> 0));
		}
		_tmp$14 = math.Float32frombits(((retBits.$low >>> 0)));
		_tmp$15 = true;
		f = _tmp$14;
		ok = _tmp$15;
		return [f, ok];
	};
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$4.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	index = function(s, c) {
		var c, s;
		return bytealg.IndexByteString(s, c);
	};
	lower = function(c) {
		var c;
		return (c | 32) >>> 0;
	};
	NumError.ptr.prototype.Error = function() {
		var {$24r, _r, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: NumError.ptr.prototype.Error, $c: true, $r, $24r, _r, e, $s};return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	NumError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	NumError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	syntaxError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	underscoreOK = function(s) {
		var hex, i, s, saw;
		saw = 94;
		i = 0;
		if (s.length >= 1 && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			s = $substring(s, 1);
		}
		hex = false;
		if (s.length >= 2 && (s.charCodeAt(0) === 48) && ((lower(s.charCodeAt(1)) === 98) || (lower(s.charCodeAt(1)) === 111) || (lower(s.charCodeAt(1)) === 120))) {
			i = 2;
			saw = 48;
			hex = lower(s.charCodeAt(1)) === 120;
		}
		while (true) {
			if (!(i < s.length)) { break; }
			if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57 || hex && 97 <= lower(s.charCodeAt(i)) && lower(s.charCodeAt(i)) <= 102) {
				saw = 48;
				i = i + (1) >> 0;
				continue;
			}
			if (s.charCodeAt(i) === 95) {
				if (!((saw === 48))) {
					return false;
				}
				saw = 95;
				i = i + (1) >> 0;
				continue;
			}
			if (saw === 95) {
				return false;
			}
			saw = 33;
			i = i + (1) >> 0;
		}
		return !((saw === 95));
	};
	commonPrefixLenIgnoreCase = function(s, prefix) {
		var c, i, n, prefix, s;
		n = prefix.length;
		if (n > s.length) {
			n = s.length;
		}
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			c = s.charCodeAt(i);
			if (65 <= c && c <= 90) {
				c = c + (32) << 24 >>> 24;
			}
			if (!((c === prefix.charCodeAt(i)))) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return n;
	};
	special = function(s) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, f, n, n$1, nsign, ok, s, sign;
		f = 0;
		n = 0;
		ok = false;
		if (s.length === 0) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = false;
			f = _tmp;
			n = _tmp$1;
			ok = _tmp$2;
			return [f, n, ok];
		}
		sign = 1;
		nsign = 0;
		_1 = s.charCodeAt(0);
		if ((_1 === (43)) || (_1 === (45))) {
			if (s.charCodeAt(0) === 45) {
				sign = -1;
			}
			nsign = 1;
			s = $substring(s, 1);
			n$1 = commonPrefixLenIgnoreCase(s, "infinity");
			if (3 < n$1 && n$1 < 8) {
				n$1 = 3;
			}
			if ((n$1 === 3) || (n$1 === 8)) {
				_tmp$3 = math.Inf(sign);
				_tmp$4 = nsign + n$1 >> 0;
				_tmp$5 = true;
				f = _tmp$3;
				n = _tmp$4;
				ok = _tmp$5;
				return [f, n, ok];
			}
		} else if ((_1 === (105)) || (_1 === (73))) {
			n$1 = commonPrefixLenIgnoreCase(s, "infinity");
			if (3 < n$1 && n$1 < 8) {
				n$1 = 3;
			}
			if ((n$1 === 3) || (n$1 === 8)) {
				_tmp$6 = math.Inf(sign);
				_tmp$7 = nsign + n$1 >> 0;
				_tmp$8 = true;
				f = _tmp$6;
				n = _tmp$7;
				ok = _tmp$8;
				return [f, n, ok];
			}
		} else if ((_1 === (110)) || (_1 === (78))) {
			if (commonPrefixLenIgnoreCase(s, "nan") === 3) {
				_tmp$9 = math.NaN();
				_tmp$10 = 3;
				_tmp$11 = true;
				f = _tmp$9;
				n = _tmp$10;
				ok = _tmp$11;
				return [f, n, ok];
			}
		}
		_tmp$12 = 0;
		_tmp$13 = 0;
		_tmp$14 = false;
		f = _tmp$12;
		n = _tmp$13;
		ok = _tmp$14;
		return [f, n, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if ((s.charCodeAt(i) === 95)) {
				i = i + (1) >> 0;
				continue;
			} else if ((s.charCodeAt(i) === 46)) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && (lower(s.charCodeAt(i)) === 101)) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57 || (s.charCodeAt(i) === 95)))) { break; }
				if (s.charCodeAt(i) === 95) {
					i = i + (1) >> 0;
					continue;
				}
				if (e < 10000) {
					e = (($imul(e, 10)) + ((s.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var _1, base, c, dp, e, esign, exp, expChar, hex, i, mantissa, maxMantDigits, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, underscores, x, x$1;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		hex = false;
		i = 0;
		ok = false;
		underscores = false;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, hex, i, ok];
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			neg = true;
			i = i + (1) >> 0;
		}
		base = new $Uint64(0, 10);
		maxMantDigits = 19;
		expChar = 101;
		if ((i + 2 >> 0) < s.length && (s.charCodeAt(i) === 48) && (lower(s.charCodeAt((i + 1 >> 0))) === 120)) {
			base = new $Uint64(0, 16);
			maxMantDigits = 16;
			i = i + (2) >> 0;
			expChar = 112;
			hex = true;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		loop:
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_1 = true;
			if (_1 === ((c === 95))) {
				underscores = true;
				i = i + (1) >> 0;
				continue;
			} else if (_1 === ((c === 46))) {
				if (sawdot) {
					break loop;
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_1 === (48 <= c && c <= 57)) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < maxMantDigits) {
					mantissa = $mul64(mantissa, (base));
					mantissa = (x = (new $Uint64(0, (c - 48 << 24 >>> 24))), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((c === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			} else if (_1 === ((base.$high === 0 && base.$low === 16) && 97 <= lower(c) && lower(c) <= 102)) {
				sawdigits = true;
				nd = nd + (1) >> 0;
				if (ndMant < maxMantDigits) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 16)));
					mantissa = (x$1 = (new $Uint64(0, ((lower(c) - 97 << 24 >>> 24) + 10 << 24 >>> 24))), new $Uint64(mantissa.$high + x$1.$high, mantissa.$low + x$1.$low));
					ndMant = ndMant + (1) >> 0;
				} else {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, hex, i, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if ((base.$high === 0 && base.$low === 16)) {
			dp = $imul(dp, (4));
			ndMant = $imul(ndMant, (4));
		}
		if (i < s.length && (lower(s.charCodeAt(i)) === expChar)) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, hex, i, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, hex, i, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57 || (s.charCodeAt(i) === 95)))) { break; }
				if (s.charCodeAt(i) === 95) {
					underscores = true;
					i = i + (1) >> 0;
					continue;
				}
				if (e < 10000) {
					e = (($imul(e, 10)) + ((s.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (($imul(e, esign))) >> 0;
		} else if ((base.$high === 0 && base.$low === 16)) {
			return [mantissa, exp, neg, trunc, hex, i, ok];
		}
		if (!((mantissa.$high === 0 && mantissa.$low === 0))) {
			exp = dp - ndMant >> 0;
		}
		if (underscores && !underscoreOK($substring(s, 0, i))) {
			return [mantissa, exp, neg, trunc, hex, i, ok];
		}
		ok = true;
		return [mantissa, exp, neg, trunc, hex, i, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var _tmp, _tmp$1, b, bits$1, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift((((1 + flt.mantbits >>> 0) >> 0)));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits$1 = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits$1 = (x$7 = $shiftLeft64((new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0))))), flt.mantbits), new $Uint64(bits$1.$high | x$7.$high, (bits$1.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits$1 = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits$1.$high | x$8.$high, (bits$1.$low | x$8.$low) >>> 0));
		}
		_tmp = bits$1;
		_tmp$1 = overflow;
		b = _tmp;
		overflow = _tmp$1;
		$s = -1; return [b, overflow];
		/* */ } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = ($flatten64(mantissa));
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + exp]);
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$2]));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = ($flatten64(mantissa));
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + exp]));
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$2])));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atofHex = function(s, flt, mantissa, exp, neg, trunc) {
		var bits$1, err, exp, flt, mantissa, maxExp, minExp, neg, round, s, trunc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1;
		maxExp = (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) + flt.bias >> 0) - 2 >> 0;
		minExp = flt.bias + 1 >> 0;
		exp = exp + (((flt.mantbits >> 0))) >> 0;
		while (true) {
			if (!(!((mantissa.$high === 0 && mantissa.$low === 0)) && (x = $shiftRightUint64(mantissa, ((flt.mantbits + 2 >>> 0))), (x.$high === 0 && x.$low === 0)))) { break; }
			mantissa = $shiftLeft64(mantissa, (1));
			exp = exp - (1) >> 0;
		}
		if (trunc) {
			mantissa = (x$1 = new $Uint64(0, 1), new $Uint64(mantissa.$high | x$1.$high, (mantissa.$low | x$1.$low) >>> 0));
		}
		while (true) {
			if (!(!((x$2 = $shiftRightUint64(mantissa, (((1 + flt.mantbits >>> 0) + 2 >>> 0))), (x$2.$high === 0 && x$2.$low === 0))))) { break; }
			mantissa = (x$3 = $shiftRightUint64(mantissa, 1), x$4 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), new $Uint64(x$3.$high | x$4.$high, (x$3.$low | x$4.$low) >>> 0));
			exp = exp + (1) >> 0;
		}
		while (true) {
			if (!((mantissa.$high > 0 || (mantissa.$high === 0 && mantissa.$low > 1)) && exp < (minExp - 2 >> 0))) { break; }
			mantissa = (x$5 = $shiftRightUint64(mantissa, 1), x$6 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), new $Uint64(x$5.$high | x$6.$high, (x$5.$low | x$6.$low) >>> 0));
			exp = exp + (1) >> 0;
		}
		round = new $Uint64(mantissa.$high & 0, (mantissa.$low & 3) >>> 0);
		mantissa = $shiftRightUint64(mantissa, (2));
		round = (x$7 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), new $Uint64(round.$high | x$7.$high, (round.$low | x$7.$low) >>> 0));
		exp = exp + (2) >> 0;
		if ((round.$high === 0 && round.$low === 3)) {
			mantissa = (x$8 = new $Uint64(0, 1), new $Uint64(mantissa.$high + x$8.$high, mantissa.$low + x$8.$low));
			if ((x$9 = $shiftLeft64(new $Uint64(0, 1), ((1 + flt.mantbits >>> 0))), (mantissa.$high === x$9.$high && mantissa.$low === x$9.$low))) {
				mantissa = $shiftRightUint64(mantissa, (1));
				exp = exp + (1) >> 0;
			}
		}
		if ((x$10 = $shiftRightUint64(mantissa, flt.mantbits), (x$10.$high === 0 && x$10.$low === 0))) {
			exp = flt.bias;
		}
		err = $ifaceNil;
		if (exp > maxExp) {
			mantissa = $shiftLeft64(new $Uint64(0, 1), flt.mantbits);
			exp = maxExp + 1 >> 0;
			err = rangeError("ParseFloat", s);
		}
		bits$1 = (x$11 = (x$12 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$12.$high - 0, x$12.$low - 1)), new $Uint64(mantissa.$high & x$11.$high, (mantissa.$low & x$11.$low) >>> 0));
		bits$1 = (x$13 = $shiftLeft64((new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))))), flt.mantbits), new $Uint64(bits$1.$high | x$13.$high, (bits$1.$low | x$13.$low) >>> 0));
		if (neg) {
			bits$1 = (x$14 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits$1.$high | x$14.$high, (bits$1.$low | x$14.$low) >>> 0));
		}
		if (flt === float32info) {
			return [(math.Float32frombits(((bits$1.$low >>> 0)))), err];
		}
		return [math.Float64frombits(bits$1), err];
	};
	atof32 = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, b, d, err, err$1, exp, f, f$1, f$2, f$3, fUp, hex, mantissa, n, n$1, neg, ok, ok$1, ok$2, ok$3, ok$4, ovf, s, trunc, val;
		f = 0;
		n = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		n$1 = _tuple[1];
		ok = _tuple[2];
		if (ok) {
			_tmp = ($fround(val));
			_tmp$1 = n$1;
			_tmp$2 = $ifaceNil;
			f = _tmp;
			n = _tmp$1;
			err = _tmp$2;
			return [f, n, err];
		}
		_tuple$1 = readFloat(s);
		mantissa = _tuple$1[0];
		exp = _tuple$1[1];
		neg = _tuple$1[2];
		trunc = _tuple$1[3];
		hex = _tuple$1[4];
		n = _tuple$1[5];
		ok$1 = _tuple$1[6];
		if (!ok$1) {
			_tmp$3 = 0;
			_tmp$4 = n;
			_tmp$5 = syntaxError("ParseFloat", s);
			f = _tmp$3;
			n = _tmp$4;
			err = _tmp$5;
			return [f, n, err];
		}
		if (hex) {
			_tuple$2 = atofHex($substring(s, 0, n), float32info, mantissa, exp, neg, trunc);
			f$1 = _tuple$2[0];
			err$1 = _tuple$2[1];
			_tmp$6 = ($fround(f$1));
			_tmp$7 = n;
			_tmp$8 = err$1;
			f = _tmp$6;
			n = _tmp$7;
			err = _tmp$8;
			return [f, n, err];
		}
		if (optimize) {
			if (!trunc) {
				_tuple$3 = atof32exact(mantissa, exp, neg);
				f$2 = _tuple$3[0];
				ok$2 = _tuple$3[1];
				if (ok$2) {
					_tmp$9 = f$2;
					_tmp$10 = n;
					_tmp$11 = $ifaceNil;
					f = _tmp$9;
					n = _tmp$10;
					err = _tmp$11;
					return [f, n, err];
				}
			}
			_tuple$4 = eiselLemire32(mantissa, exp, neg);
			f$3 = _tuple$4[0];
			ok$3 = _tuple$4[1];
			if (ok$3) {
				if (!trunc) {
					_tmp$12 = f$3;
					_tmp$13 = n;
					_tmp$14 = $ifaceNil;
					f = _tmp$12;
					n = _tmp$13;
					err = _tmp$14;
					return [f, n, err];
				}
				_tuple$5 = eiselLemire32(new $Uint64(mantissa.$high + 0, mantissa.$low + 1), exp, neg);
				fUp = _tuple$5[0];
				ok$4 = _tuple$5[1];
				if (ok$4 && (f$3 === fUp)) {
					_tmp$15 = f$3;
					_tmp$16 = n;
					_tmp$17 = $ifaceNil;
					f = _tmp$15;
					n = _tmp$16;
					err = _tmp$17;
					return [f, n, err];
				}
			}
		}
		d = new decimal.ptr(arrayType$5.zero(), 0, 0, false, false);
		if (!d.set($substring(s, 0, n))) {
			_tmp$18 = 0;
			_tmp$19 = n;
			_tmp$20 = syntaxError("ParseFloat", s);
			f = _tmp$18;
			n = _tmp$19;
			err = _tmp$20;
			return [f, n, err];
		}
		_tuple$6 = d.floatBits(float32info);
		b = _tuple$6[0];
		ovf = _tuple$6[1];
		f = math.Float32frombits(((b.$low >>> 0)));
		if (ovf) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$21 = f;
		_tmp$22 = n;
		_tmp$23 = err;
		f = _tmp$21;
		n = _tmp$22;
		err = _tmp$23;
		return [f, n, err];
	};
	atof64 = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, b, d, err, err$1, exp, f, f$1, f$2, f$3, fUp, hex, mantissa, n, n$1, neg, ok, ok$1, ok$2, ok$3, ok$4, ovf, s, trunc, val;
		f = 0;
		n = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		n$1 = _tuple[1];
		ok = _tuple[2];
		if (ok) {
			_tmp = val;
			_tmp$1 = n$1;
			_tmp$2 = $ifaceNil;
			f = _tmp;
			n = _tmp$1;
			err = _tmp$2;
			return [f, n, err];
		}
		_tuple$1 = readFloat(s);
		mantissa = _tuple$1[0];
		exp = _tuple$1[1];
		neg = _tuple$1[2];
		trunc = _tuple$1[3];
		hex = _tuple$1[4];
		n = _tuple$1[5];
		ok$1 = _tuple$1[6];
		if (!ok$1) {
			_tmp$3 = 0;
			_tmp$4 = n;
			_tmp$5 = syntaxError("ParseFloat", s);
			f = _tmp$3;
			n = _tmp$4;
			err = _tmp$5;
			return [f, n, err];
		}
		if (hex) {
			_tuple$2 = atofHex($substring(s, 0, n), float64info, mantissa, exp, neg, trunc);
			f$1 = _tuple$2[0];
			err$1 = _tuple$2[1];
			_tmp$6 = f$1;
			_tmp$7 = n;
			_tmp$8 = err$1;
			f = _tmp$6;
			n = _tmp$7;
			err = _tmp$8;
			return [f, n, err];
		}
		if (optimize) {
			if (!trunc) {
				_tuple$3 = atof64exact(mantissa, exp, neg);
				f$2 = _tuple$3[0];
				ok$2 = _tuple$3[1];
				if (ok$2) {
					_tmp$9 = f$2;
					_tmp$10 = n;
					_tmp$11 = $ifaceNil;
					f = _tmp$9;
					n = _tmp$10;
					err = _tmp$11;
					return [f, n, err];
				}
			}
			_tuple$4 = eiselLemire64(mantissa, exp, neg);
			f$3 = _tuple$4[0];
			ok$3 = _tuple$4[1];
			if (ok$3) {
				if (!trunc) {
					_tmp$12 = f$3;
					_tmp$13 = n;
					_tmp$14 = $ifaceNil;
					f = _tmp$12;
					n = _tmp$13;
					err = _tmp$14;
					return [f, n, err];
				}
				_tuple$5 = eiselLemire64(new $Uint64(mantissa.$high + 0, mantissa.$low + 1), exp, neg);
				fUp = _tuple$5[0];
				ok$4 = _tuple$5[1];
				if (ok$4 && (f$3 === fUp)) {
					_tmp$15 = f$3;
					_tmp$16 = n;
					_tmp$17 = $ifaceNil;
					f = _tmp$15;
					n = _tmp$16;
					err = _tmp$17;
					return [f, n, err];
				}
			}
		}
		d = new decimal.ptr(arrayType$5.zero(), 0, 0, false, false);
		if (!d.set($substring(s, 0, n))) {
			_tmp$18 = 0;
			_tmp$19 = n;
			_tmp$20 = syntaxError("ParseFloat", s);
			f = _tmp$18;
			n = _tmp$19;
			err = _tmp$20;
			return [f, n, err];
		}
		_tuple$6 = d.floatBits(float64info);
		b = _tuple$6[0];
		ovf = _tuple$6[1];
		f = math.Float64frombits(b);
		if (ovf) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$21 = f;
		_tmp$22 = n;
		_tmp$23 = err;
		f = _tmp$21;
		n = _tmp$22;
		err = _tmp$23;
		return [f, n, err];
	};
	ParseFloat = function(s, bitSize) {
		var _tuple, bitSize, err, f, n, s;
		_tuple = parseFloatPrefix(s, bitSize);
		f = _tuple[0];
		n = _tuple[1];
		err = _tuple[2];
		if (!((n === s.length)) && ($interfaceIsEqual(err, $ifaceNil) || !($interfaceIsEqual($assertType(err, ptrType$1).Err, $pkg.ErrSyntax)))) {
			return [0, syntaxError("ParseFloat", s)];
		}
		return [f, err];
	};
	$pkg.ParseFloat = ParseFloat;
	parseFloatPrefix = function(s, bitSize) {
		var _tuple, bitSize, err, f, n, s;
		if (bitSize === 32) {
			_tuple = atof32(s);
			f = _tuple[0];
			n = _tuple[1];
			err = _tuple[2];
			return [(f), n, err];
		}
		return atof64(s);
	};
	ptrType$2.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType], [$Uint64, $Bool], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", embedded: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", embedded: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", embedded: false, exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", embedded: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", embedded: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "nd", name: "nd", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", embedded: false, exported: false, typ: $String, tag: ""}]);
	NumError.init("", [{prop: "Func", name: "Func", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		isPrint16 = new sliceType([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1519, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2045, 2093, 2096, 2139, 2142, 2154, 2208, 2247, 2259, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2558, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2678, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2901, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3191, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3328, 3407, 3412, 3427, 3430, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6264, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6848, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7312, 7354, 7357, 7367, 7376, 7418, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8383, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11858, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12771, 12784, 40956, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42943, 42946, 42954, 42997, 43052, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43883, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType([173, 907, 909, 930, 1328, 1424, 1757, 2111, 2143, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2816, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3085, 3089, 3113, 3141, 3145, 3159, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3341, 3345, 3397, 3401, 3456, 3460, 3506, 3516, 3541, 3543, 3715, 3717, 3723, 3748, 3750, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7674, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11158, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12592, 12687, 12831, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$1([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65948, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66349, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68149, 68152, 68154, 68159, 68168, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68903, 68912, 68921, 69216, 69293, 69296, 69297, 69376, 69415, 69424, 69465, 69552, 69579, 69600, 69622, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69959, 69968, 70006, 70016, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70753, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71352, 71360, 71369, 71424, 71450, 71453, 71467, 71472, 71487, 71680, 71739, 71840, 71922, 71935, 71942, 71945, 71945, 71948, 71992, 71995, 72006, 72016, 72025, 72096, 72103, 72106, 72151, 72154, 72164, 72192, 72263, 72272, 72354, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 72960, 73014, 73018, 73031, 73040, 73049, 73056, 73112, 73120, 73129, 73440, 73464, 73648, 73648, 73664, 73713, 73727, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93760, 93850, 93952, 94026, 94031, 94087, 94095, 94111, 94176, 94180, 94192, 94193, 94208, 100343, 100352, 101589, 101632, 101640, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119520, 119539, 119552, 119638, 119648, 119672, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 123136, 123180, 123184, 123197, 123200, 123209, 123214, 123215, 123584, 123641, 123647, 123647, 124928, 125124, 125127, 125142, 125184, 125259, 125264, 125273, 125278, 125279, 126065, 126132, 126209, 126269, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127405, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127584, 127589, 127744, 128727, 128736, 128748, 128752, 128764, 128768, 128883, 128896, 128984, 128992, 129003, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129200, 129201, 129280, 129619, 129632, 129645, 129648, 129652, 129656, 129658, 129664, 129670, 129680, 129704, 129712, 129718, 129728, 129730, 129744, 129750, 129792, 129994, 130032, 130041, 131072, 173789, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 196608, 201546, 917760, 917999]);
		isNotPrint32 = new sliceType([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 3711, 3754, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 4922, 5212, 6420, 6423, 6454, 7177, 7223, 7336, 7431, 7434, 7483, 7486, 7526, 7529, 7567, 7570, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 63865, 63948, 64403]);
		isGraphic = new sliceType([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		detailedPowersOfTen = $toNativeArray($kindArray, [$clone($toNativeArray($kindUint64, [new $Uint64(389204073, 3445679187), new $Uint64(4203730336, 136053384)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(243252546, 542936756), new $Uint64(2627331460, 85033365)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1377807506, 2826154593), new $Uint64(3284164325, 106291706)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3869743031, 1385209593), new $Uint64(4105205406, 1206606456)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2418589394, 2476368732), new $Uint64(2565753378, 3975354507)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1949494919, 947977267), new $Uint64(3207191723, 2821709486)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(289385001, 111229759), new $Uint64(4008989654, 2453395034)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1254607449, 2753873159), new $Uint64(2505618534, 459630072)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1568259312, 221115977), new $Uint64(3132023167, 2722021238)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4107807788, 276394972), new $Uint64(3915028959, 2328784723)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2030508955, 2320230505), new $Uint64(2446893099, 3066103188)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2538136194, 1826546308), new $Uint64(3058616374, 2758887161)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4246412067, 135699237), new $Uint64(3823270468, 1301125303)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4264620277, 3842908407), new $Uint64(2389544042, 2960686962)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3183291699, 1582410037), new $Uint64(2986930053, 1553375055)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2905372800, 904270722), new $Uint64(3733662566, 3015460643)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1278987088, 565169201), new $Uint64(2333539104, 810921078)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3746217508, 706461501), new $Uint64(2916923880, 1013651347)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3609030061, 883076877), new $Uint64(3646154850, 1267064184)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2255643788, 1088793960), new $Uint64(2278846781, 1865656939)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1745812911, 1360992450), new $Uint64(2848558476, 3405812998)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(34782491, 627498738), new $Uint64(3560698095, 4257266248)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(21739056, 4150283095), new $Uint64(2225436309, 4271404141)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1100915645, 892886573), new $Uint64(2781795387, 2118029704)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1376144556, 2189850041), new $Uint64(3477244234, 1573795306)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1933832171, 3516139923), new $Uint64(2173277646, 2057363890)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(269806566, 3321433080), new $Uint64(2716597058, 424221215)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3558483680, 2004307702), new $Uint64(3395746322, 2677760166)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2300620952, 2505384628), new $Uint64(4244682903, 1199716560)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1437888095, 1565865392), new $Uint64(2652926814, 2360435586)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3944843767, 883589917), new $Uint64(3316158518, 803060834)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2783571061, 30745572), new $Uint64(4145198147, 3151309691)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1202861001, 556086894), new $Uint64(2590748842, 1432697645)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2577318075, 1768850442), new $Uint64(3238436052, 3938355704)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3221647594, 1137321229), new $Uint64(4048045066, 627977334)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(939787922, 1784567592), new $Uint64(2530028166, 1466227658)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3322218551, 83225842), new $Uint64(3162535207, 3980268220)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4152773188, 3325257774), new $Uint64(3953169009, 3901593451)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2058612330, 4225769757), new $Uint64(2470730631, 827883171)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1499523589, 3134728548), new $Uint64(3088413288, 4256079436)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1874404487, 697185213), new $Uint64(3860516611, 1025131999)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2782115540, 2046353494), new $Uint64(2412822882, 103836587)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2403902601, 2557941868), new $Uint64(3016028602, 2277279382)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(857394603, 4271169159), new $Uint64(3770035753, 699115580)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2683355275, 2132609812), new $Uint64(2356272345, 3121301797)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(132968622, 1592020441), new $Uint64(2945340432, 680401775)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3387436249, 4137509200), new $Uint64(3681675540, 850502218)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3190889480, 975330514), new $Uint64(2301047212, 2679047534)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1841128202, 1219163142), new $Uint64(2876309015, 3348809418)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(153926604, 3671437576), new $Uint64(3595386269, 3112269949)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(633075040, 147164837), new $Uint64(2247116418, 2482039630)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2938827448, 183956046), new $Uint64(2808895523, 955065889)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(452308838, 229945057), new $Uint64(3511119404, 120090538)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1356434847, 3364941133), new $Uint64(2194449627, 2222540234)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3843027207, 3132434592), new $Uint64(2743062034, 1704433468)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(508816713, 2841801416), new $Uint64(3428827542, 4278025484)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(636020892, 331026298), new $Uint64(4286034428, 3200048207)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2008125793, 2354375084), new $Uint64(2678771517, 4147513777)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3583899065, 4016710679), new $Uint64(3348464397, 1963166749)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1258648360, 1799662877), new $Uint64(4185580496, 3527700261)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1323526137, 1124789298), new $Uint64(2615987810, 2204812663)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(580665847, 2479728447), new $Uint64(3269984763, 608532181)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1799574133, 2025918735), new $Uint64(4087480953, 3981890698)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2198475657, 1803070121), new $Uint64(2554675596, 878068950)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(600610923, 3327579475), new $Uint64(3193344495, 1097586188)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(750763654, 3085732520), new $Uint64(3991680619, 298240911)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2079840020, 854841001), new $Uint64(2494800386, 3944496953)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3673541849, 1068551251), new $Uint64(3118500483, 2783137543)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3518185487, 2409430888), new $Uint64(3898125604, 2405180105)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(588253193, 3116507041), new $Uint64(2436328502, 3650721214)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2882800140, 674408330), new $Uint64(3045410628, 2415917869)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(382274703, 843010412), new $Uint64(3806763285, 3019897337)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2923276249, 2137494243), new $Uint64(2379227053, 2424306747)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2580353487, 3745609628), new $Uint64(2974033816, 4104125258)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1077958211, 3608270211), new $Uint64(3717542271, 835189277)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1210594794, 1718297970), new $Uint64(2323463919, 2132606034)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3660727141, 388815), new $Uint64(2904329899, 1592015718)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2428425278, 1074227842), new $Uint64(3630412374, 916277824)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1517765798, 3892617873), new $Uint64(2269007733, 3793899112)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1897207248, 2718288694), new $Uint64(2836259667, 1521148418)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(224025412, 3397860867), new $Uint64(3545324584, 827693699)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3898112266, 4271146690), new $Uint64(2215827865, 517308561)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1651414861, 3191449714), new $Uint64(2769784831, 1720377526)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4211752225, 768086671), new $Uint64(3462231039, 1076730083)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2095474228, 3164408729), new $Uint64(2163894399, 2283569038)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(471859137, 3955510912), new $Uint64(2704867999, 1780719474)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2737307570, 1723163168), new $Uint64(3381084999, 1152157518)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1274150815, 6470312), new $Uint64(4226356249, 366455074)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1870086083, 1614656681), new $Uint64(2641472655, 2913388981)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3411349428, 944579027), new $Uint64(3301840819, 2567994402)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2116703137, 1180723784), new $Uint64(4127301024, 2136251179)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(786068548, 3422306925), new $Uint64(2579563140, 1335156987)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4203811157, 4277883656), new $Uint64(3224453925, 1668946233)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2033538475, 2126129098), new $Uint64(4030567406, 3159924616)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1270961547, 791959774), new $Uint64(2519104629, 901211061)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2662443757, 4211175190), new $Uint64(3148880786, 2200255650)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1180571049, 2042743516), new $Uint64(3936100983, 602835915)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(200985993, 3961069257), new $Uint64(2460063114, 1987385183)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3472457964, 1730111099), new $Uint64(3075078893, 336747830)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2193088807, 2162638874), new $Uint64(3843848616, 1494676612)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3518164152, 2962262032), new $Uint64(2402405385, 934172882)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2250221542, 3702827541), new $Uint64(3003006731, 2241457927)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1739035104, 2481050778), new $Uint64(3753758414, 1728080585)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3771251500, 1550656736), new $Uint64(2346099009, 6308541)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1492838903, 1938320920), new $Uint64(2932623761, 1081627501)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2939790453, 1349159326), new $Uint64(3665779701, 2425776200)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1837369033, 1380095491), new $Uint64(2291112313, 2052981037)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3370453115, 2798861187), new $Uint64(2863890391, 3639968120)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4213066394, 2424834660), new $Uint64(3579862989, 3476218326)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1559424672, 2589263487), new $Uint64(2237414368, 2709507366)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4096764488, 3236579358), new $Uint64(2796767960, 3386884207)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4047213786, 4045724198), new $Uint64(3495959950, 4233605259)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1992637704, 3602319448), new $Uint64(2184974969, 1572261463)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1417055307, 207932014), new $Uint64(2731218711, 3039068653)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2845060957, 3481140489), new $Uint64(3414023389, 2725093992)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3556326197, 1130200140), new $Uint64(4267529237, 185142018)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3296445697, 1243245999), new $Uint64(2667205773, 652584673)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(899331649, 2627799323), new $Uint64(3334007216, 1889472666)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3271648210, 63523682), new $Uint64(4167509020, 2361840832)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2044780131, 1113444125), new $Uint64(2604693137, 3623634168)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2555975164, 318063332), new $Uint64(3255866422, 1308317238)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1047485307, 397579165), new $Uint64(4069833027, 3782880196)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2802161964, 4006583362), new $Uint64(2543645642, 1827429210)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1355218808, 713261907), new $Uint64(3179557053, 136802865)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2767765334, 891577384), new $Uint64(3974446316, 1244745405)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2266724245, 3778461337), new $Uint64(2484028947, 2925449526)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(685921659, 1501851199), new $Uint64(3105036184, 2583070084)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(857402074, 803572175), new $Uint64(3881295230, 3228837605)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1072747208, 1575974433), new $Uint64(2425809519, 944281679)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(267192186, 1969968041), new $Uint64(3032261899, 106610275)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3555215705, 314976404), new $Uint64(3790327373, 3354488315)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1685138903, 2881214812), new $Uint64(2368954608, 2633426109)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3180165453, 2527776691), new $Uint64(2961193260, 3291782636)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3975206816, 4233462688), new $Uint64(3701491575, 4114728295)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4095116996, 2645914180), new $Uint64(2313432234, 4182317920)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(823928949, 3307392725), new $Uint64(2891790293, 3080413753)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2103653011, 913015435), new $Uint64(3614737867, 629291719)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2925395868, 33763735), new $Uint64(2259211166, 4151403708)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3656744835, 42204668), new $Uint64(2824013958, 3041770987)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3497189219, 3273981307), new $Uint64(3530017448, 1654730086)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1112001438, 1509367405), new $Uint64(2206260905, 1034206304)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1390001797, 4034192904), new $Uint64(2757826131, 2366499704)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1737502247, 1821515659), new $Uint64(3447282664, 1884382806)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(12197080, 2749060022), new $Uint64(2154551665, 1177739254)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2162729998, 3436325028), new $Uint64(2693189581, 2545915891)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1629670674, 2147922637), new $Uint64(3366486976, 4256136688)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2037088343, 537419649), new $Uint64(4208108721, 1025203564)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3420663862, 1946500016), new $Uint64(2630067950, 3325106787)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3202088004, 285641372), new $Uint64(3287584938, 2008899836)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4002610005, 357051716), new $Uint64(4109481173, 363641147)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1964760341, 760028234), new $Uint64(2568425733, 764146629)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3529692250, 2023777117), new $Uint64(3210532166, 2028925110)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2264631665, 382237748), new $Uint64(4013165208, 388672740)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3562878438, 2923253152), new $Uint64(2508228255, 242920462)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2306114400, 1506582793), new $Uint64(3135285318, 3524876050)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(735159352, 1883228491), new $Uint64(3919106648, 2258611415)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2070087331, 1177017807), new $Uint64(2449441655, 1411632134)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(440125516, 397530434), new $Uint64(3061802069, 690798344)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(550156895, 496913043), new $Uint64(3827252586, 1937239754)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1417589883, 1921183388), new $Uint64(2392032866, 2284516670)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3919471002, 1327737411), new $Uint64(2990041083, 708162189)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1678113280, 3807155412), new $Uint64(3737551353, 4106428209)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3733175360, 2379472132), new $Uint64(2335969596, 955904894)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2518985552, 2974340165), new $Uint64(2919961995, 1194881118)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1001248292, 3717925207), new $Uint64(3649952494, 419859574)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3847005655, 176219606), new $Uint64(2281220308, 3483637705)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1587531596, 3441499980), new $Uint64(2851525386, 59579836)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1984414496, 6907679), new $Uint64(3564406732, 2221958443)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(703388148, 4317299), new $Uint64(2227754207, 3536207675)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4100460657, 5396624), new $Uint64(2784692759, 3346517769)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1904350349, 1080487604), new $Uint64(3480865949, 3109405388)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3337702616, 1212175664), new $Uint64(2175541218, 2480249279)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3098386446, 1515219580), new $Uint64(2719426523, 952827951)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2799241233, 4041508124), new $Uint64(3399283154, 117293115)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2425309718, 1830659683), new $Uint64(4249103942, 2294100042)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2589560398, 70420478), new $Uint64(2655689964, 360070702)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1089466849, 2235509245), new $Uint64(3319612455, 450088378)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3509317209, 3868128380), new $Uint64(4149515568, 3783835944)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2193323256, 806967502), new $Uint64(2593447230, 2364897465)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3815395894, 1008709377), new $Uint64(3241809038, 808638183)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3695503043, 3408370369), new $Uint64(4052261297, 3158281377)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(699076666, 1593360569), new $Uint64(2532663311, 363313125)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1947587656, 4139184359), new $Uint64(3165829138, 3675366878)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(287000923, 879013153), new $Uint64(3957286423, 2446724950)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3400601049, 12512308), new $Uint64(2473304014, 3139815829)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1029525839, 1089382210), new $Uint64(3091630018, 1777286139)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(213165475, 287985938), new $Uint64(3864537523, 74124026)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1206970245, 3938087595), new $Uint64(2415335951, 3804423900)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1508712807, 1701384022), new $Uint64(3019169939, 3681788051)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(812149185, 1052988204), new $Uint64(3773962424, 3528493240)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(507593240, 3342472187), new $Uint64(2358726515, 2205308275)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3855717022, 4178090234), new $Uint64(2948408144, 1682893519)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3745904454, 3075129145), new $Uint64(3685510180, 2103616899)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1804319372, 848213891), new $Uint64(2303443862, 3462244210)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(107915567, 1060267364), new $Uint64(2879304828, 2180321615)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3356119931, 251592381), new $Uint64(3599131035, 2725402018)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3171316780, 3915341622), new $Uint64(2249456897, 1166505349)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(742920504, 599209732), new $Uint64(2811821121, 2531873511)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4149876102, 749012165), new $Uint64(3514776401, 4238583712)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2593672563, 3689358075), new $Uint64(2196735251, 1038502084)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3242090704, 3537955770), new $Uint64(2745919064, 224385781)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(831387909, 127477416), new $Uint64(3432398830, 280482227)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4260460358, 1233088594), new $Uint64(4290498537, 2498086431)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4273400459, 3991905843), new $Uint64(2681561585, 4245658579)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4268008750, 3916140480), new $Uint64(3351951982, 2085847752)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1040043642, 2747691952), new $Uint64(4189939978, 459826043)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(113156364, 2791049294), new $Uint64(2618712486, 1361133101)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1215187279, 3488811618), new $Uint64(3273390607, 3848900024)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1518984099, 3287272698), new $Uint64(4091738259, 3737383206)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4170590534, 1517674524), new $Uint64(2557336412, 1798993591)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4139496343, 4044576803), new $Uint64(3196670515, 2248741989)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1953144957, 3981979180), new $Uint64(3995838144, 1737185663)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2831328334, 3025607900), new $Uint64(2497398840, 1085741039)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2465418594, 1634526227), new $Uint64(3121748550, 1357176299)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2008031418, 4190641431), new $Uint64(3902185687, 3843954022)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(181277812, 3692892718), new $Uint64(2438866054, 4013084000)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(226597266, 321148602), new $Uint64(3048582568, 2868871352)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(283246582, 2548919401), new $Uint64(3810728210, 3586089190)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3398254586, 519332801), new $Uint64(2381705131, 3315047567)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3174076408, 2796649650), new $Uint64(2977131414, 3070067635)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2893853686, 3495812062), new $Uint64(3721414268, 1690100896)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1808658554, 1111140715), new $Uint64(2325883917, 3203796708)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2260823192, 3536409542), new $Uint64(2907354897, 783520413)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3899770815, 125544631), new $Uint64(3634193621, 2053142340)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(289873111, 1689078130), new $Uint64(2271371013, 1820084875)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3583566861, 1037605839), new $Uint64(2839213766, 3348847917)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1258233104, 2370749123), new $Uint64(3549017208, 2038576249)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3470750250, 1481718202), new $Uint64(2218135755, 1274110155)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3264695988, 3999631400), new $Uint64(2772669694, 518895870)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1933386338, 704571954), new $Uint64(3465837117, 2796103486)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(134624637, 1514099295), new $Uint64(2166148198, 2284435591)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3389506268, 2966365943), new $Uint64(2707685248, 708060840)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4236882835, 3707957429), new $Uint64(3384606560, 885076050)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3148619896, 3561204962), new $Uint64(4230758200, 1106345063)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3578500171, 2225753101), new $Uint64(2644223875, 691465664)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(178157918, 1708449553), new $Uint64(3305279843, 4085557553)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1296439221, 4283045589), new $Uint64(4131599804, 4033205117)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1347145425, 3213774405), new $Uint64(2582249878, 373269550)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3831415430, 795992534), new $Uint64(3227812347, 2614070585)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1568043815, 3142474316), new $Uint64(4034765434, 2193846408)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(980027384, 3574659183), new $Uint64(2521728396, 2444895829)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2298776055, 173356683), new $Uint64(3152160495, 3056119786)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(725986420, 3437921326), new $Uint64(3940200619, 2746407909)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(990612425, 1217181), new $Uint64(2462625387, 1179634031)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(164523707, 1075263300), new $Uint64(3078281734, 400800715)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3426880106, 270337301), new $Uint64(3847852167, 2648484541)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2678670978, 1242702637), new $Uint64(2404907604, 3265915574)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1200855074, 3700861945), new $Uint64(3006134505, 4082394468)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1501068843, 2478593783), new $Uint64(3757668132, 1881767613)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1475038939, 1012250202), new $Uint64(2348542582, 3323588406)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3991282322, 191570929), new $Uint64(2935678228, 2007001859)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3915361078, 2386947309), new $Uint64(3669597785, 2508752324)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(299617026, 418100244), new $Uint64(2293498615, 4252324763)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3595746754, 2670108953), new $Uint64(2866873269, 4241664129)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1273457971, 1190152543), new $Uint64(3583591587, 2080854690)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1869653056, 206974427), new $Uint64(2239744742, 763663269)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3410808144, 258718034), new $Uint64(2799680927, 3102062734)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2116026532, 323397543), new $Uint64(3499601159, 2803836594)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2396258406, 2349607112), new $Uint64(2187250724, 3363010607)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1921581184, 789525242), new $Uint64(2734063405, 4203763259)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1328234656, 986906553), new $Uint64(3417579257, 2033478602)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3807776968, 1233633192), new $Uint64(4271974071, 3615590076)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(232376957, 771020745), new $Uint64(2669983794, 3870356534)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2437954844, 2037517755), new $Uint64(3337479743, 2690462019)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1973701731, 2546897194), new $Uint64(4171849679, 2289335700)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3381047230, 1054939834), new $Uint64(2607406049, 3041447548)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4226309037, 3466158440), new $Uint64(3259257562, 580583963)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4209144473, 1111472579), new $Uint64(4074071952, 2873213602)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3704457119, 3379024922), new $Uint64(2546294970, 1795758501)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1409345927, 3150039328), new $Uint64(3182868713, 97214479)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(687940585, 2863807336), new $Uint64(3978585891, 1195259923)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4188059250, 179266849), new $Uint64(2486616182, 210166539)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4161332238, 2371567209), new $Uint64(3108270227, 2410191822)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3054181650, 816975364), new $Uint64(3885337784, 1938997954)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2982605355, 1584351426), new $Uint64(2428336115, 1211873721)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(507031222, 906697459), new $Uint64(3035420144, 441100328)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(633789027, 3280855472), new $Uint64(3794275180, 551375410)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1469859966, 1513663758), new $Uint64(2371421987, 2492093279)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(763583133, 4039563345), new $Uint64(2964277484, 2041374775)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4175704389, 1828228709), new $Uint64(3705346855, 2551718468)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(462331595, 1679513855), new $Uint64(2315841784, 3205436779)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3799139966, 1025650495), new $Uint64(2894802230, 4006795973)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1527699485, 3429546767), new $Uint64(3618502788, 2861011319)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2565424914, 2680337641), new $Uint64(2261564242, 3935615722)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1059297495, 1202938404), new $Uint64(2826955303, 2772036005)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2397863693, 429931181), new $Uint64(3533694129, 2391303182)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(424922984, 805577900), new $Uint64(2208558830, 4178919049)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1604895554, 1006972375), new $Uint64(2760698538, 3076165163)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(932377618, 3406199117), new $Uint64(3450873173, 1697722806)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3803961483, 3202616272), new $Uint64(2156795733, 1597947665)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1533726382, 2929528516), new $Uint64(2695994666, 3071176406)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4064641626, 1514426997), new $Uint64(3369993333, 1691486859)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4007060208, 4040517394), new $Uint64(4212491666, 3188100398)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1430670806, 2525323371), new $Uint64(2632807291, 3066304573)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2862080332, 1009170566), new $Uint64(3291009114, 2759138892)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3577600415, 1261463208), new $Uint64(4113761393, 1301439967)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3846612995, 2399027241), new $Uint64(2571100870, 3497754539)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3734524420, 1925042227), new $Uint64(3213876088, 2224709526)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2520671877, 2406302784), new $Uint64(4017345110, 2780886908)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3722903571, 2040810152), new $Uint64(2510840694, 664312493)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1432403992, 1477270866), new $Uint64(3138550867, 2977874265)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2864246814, 1846588582), new $Uint64(3923188584, 2648601007)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3400766995, 80376040), new $Uint64(2451992865, 1655375629)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1029733271, 3321695522), new $Uint64(3064991081, 3142961361)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2360908413, 3078377578), new $Uint64(3831238852, 707476229)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2012438670, 2460856898), new $Uint64(2394524282, 2589656291)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1441806514, 928587475), new $Uint64(2993155353, 1089586716)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1802258142, 3308217992), new $Uint64(3741444191, 2435725219)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(589540427, 993894421), new $Uint64(2338402619, 3132940998)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2884409182, 168626202), new $Uint64(2923003274, 2842434423)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2531769653, 2358266401), new $Uint64(3653754093, 1405559381)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2119226945, 2010787412), new $Uint64(2283596308, 1415345525)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3722775505, 3587226089), new $Uint64(2854495385, 1769181906)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2505985734, 1262807140), new $Uint64(3568119231, 3285219207)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3176853819, 4010479934), new $Uint64(2230074519, 3663874740)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3971067274, 3939358094), new $Uint64(2787593149, 3506101601)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1742608621, 2776713970), new $Uint64(3484491437, 1161401530)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2162872212, 2272317143), new $Uint64(2177807148, 1262746868)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2703590265, 2840396429), new $Uint64(2722258935, 1578433585)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(158262360, 329270064), new $Uint64(3402823669, 899300158)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2345311598, 411587580), new $Uint64(4253529586, 2197867021)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2002690660, 3478467709), new $Uint64(2658455991, 2447408712)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2503363326, 53117341), new $Uint64(3323069989, 1985519066)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(981720509, 2213880324), new $Uint64(4153837486, 3555640657)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3297929878, 1920546114), new $Uint64(2596148429, 1148533586)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1974928700, 253198995), new $Uint64(3245185536, 2509408807)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1394919051, 316498744), new $Uint64(4056481920, 3136761009)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3556178966, 3955908099), new $Uint64(2535301200, 1960475630)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2297740060, 2797401476), new $Uint64(3169126500, 2450594538)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(724691427, 3496751845), new $Uint64(3961408125, 3063243173)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(989803054, 1648598991), new $Uint64(2475880078, 2451397895)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(163511993, 4208232386), new $Uint64(3094850098, 916763721)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1278131816, 2039065011), new $Uint64(3868562622, 3293438299)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(261961473, 1274415632), new $Uint64(2417851639, 984657113)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1401193665, 2666761364), new $Uint64(3022314549, 157079567)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(677750258, 112226233), new $Uint64(3777893186, 1270091283)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4181690295, 1143883219), new $Uint64(2361183241, 1867548875)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4153371045, 356112200), new $Uint64(2951479051, 3408177918)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3044230158, 1518882075), new $Uint64(3689348814, 3186480574)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(828902024, 4170526768), new $Uint64(2305843009, 917808535)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4257353003, 918191165), new $Uint64(2882303761, 2221002492)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1026723958, 73997132), new $Uint64(3602879701, 3849994940)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2789186121, 3267473679), new $Uint64(2251799813, 2943117749)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(265257180, 863116627), new $Uint64(2814749767, 457671715)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3552796947, 1078895784), new $Uint64(3518437208, 3793315115)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1683627180, 137438953), new $Uint64(2199023255, 2370821947)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1030792151, 171798691), new $Uint64(2748779069, 1889785610)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3435973836, 3435973836), new $Uint64(3435973836, 3435973836)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2147483648, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2684354560, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3355443200, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4194304000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2621440000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3276800000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4096000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2560000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3200000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(4000000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2500000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3125000000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3906250000, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2441406250, 0)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3051757812, 2147483648)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3814697265, 2684354560)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2384185791, 67108864)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2980232238, 3305111552)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3725290298, 1983905792)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2328306436, 2313682944)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2910383045, 2892103680)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3637978807, 393904128)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2273736754, 1856802816)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2842170943, 173519872)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3552713678, 3438125312)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2220446049, 1075086496)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(2775557561, 2417599944)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(0, 0), new $Uint64(3469446951, 4095741754)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1073741824, 0), new $Uint64(2168404344, 4170451332)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1342177280, 0), new $Uint64(2710505431, 918096869)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2751463424, 0), new $Uint64(3388131789, 73879262)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1291845632, 0), new $Uint64(4235164736, 1166090902)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4028628992, 0), new $Uint64(2646977960, 728806813)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1814560768, 0), new $Uint64(3308722450, 911008517)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3341942784, 0), new $Uint64(4135903062, 3286244294)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1014972416, 0), new $Uint64(2584939414, 980160860)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1268715520, 0), new $Uint64(3231174267, 3372684723)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(512152576, 0), new $Uint64(4038967834, 3142114080)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(320095360, 0), new $Uint64(2524354896, 3037563124)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(400119200, 0), new $Uint64(3155443620, 3796953905)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1573890824, 0), new $Uint64(3944304526, 451225085)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1520552677, 0), new $Uint64(2465190328, 3503241150)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4048174494, 1073741824), new $Uint64(3081487911, 84084141)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1838992645, 3489660928), new $Uint64(3851859888, 3326330649)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3833724963, 2717908992), new $Uint64(2407412430, 2078956655)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3718414380, 2323644416), new $Uint64(3009265538, 451212171)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3574276151, 2904555520), new $Uint64(3761581922, 2711498862)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1160180770, 3425959936), new $Uint64(2350988701, 2768428613)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2523967787, 2134966272), new $Uint64(2938735877, 239310294)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1007476086, 1594966016), new $Uint64(3673419846, 1372879692)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2777156201, 4218079232), new $Uint64(2295887403, 4079275279)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2397703428, 2051373568), new $Uint64(2869859254, 4025352275)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1923387461, 2564216960), new $Uint64(3587324068, 2884206696)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1202117163, 2139506512), new $Uint64(2242077542, 3950112833)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2576388278, 1600641316), new $Uint64(2802596928, 2790157393)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4294227171, 4148285293), new $Uint64(3503246160, 3487696741)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3220762894, 2055807396), new $Uint64(2189528850, 2179810463)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2952211794, 422275597), new $Uint64(2736911063, 577279431)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2616522918, 2675328144), new $Uint64(3421138828, 3942824761)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(49428176, 1196676532), new $Uint64(4276423536, 633563656)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(30892610, 747922832), new $Uint64(2672764710, 395977285)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1112357586, 3082387189), new $Uint64(3340955887, 2642455254)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3537930631, 1705500338), new $Uint64(4176194859, 2229327243)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1674335732, 2676550447), new $Uint64(2610121787, 856458615)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1019177841, 3345688059), new $Uint64(3262652233, 4291798741)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2347714126, 960884602), new $Uint64(4078315292, 2143522954)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2541063152, 3821778348), new $Uint64(2548947057, 3487185494)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1028845293, 482255639), new $Uint64(3186183822, 1137756396)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1286056616, 1676561373), new $Uint64(3982729777, 3569679143)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2414398121, 1047850858), new $Uint64(2489206111, 620436728)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3017997651, 2383555396), new $Uint64(3111507638, 3996771382)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1625013416, 1905702422), new $Uint64(3889384548, 2848480580)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3163117033, 1191064013), new $Uint64(2430865342, 3927784010)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1806412643, 2562571841), new $Uint64(3038581678, 2762246365)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3331757628, 2129472977), new $Uint64(3798227098, 1305324308)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4229832165, 3478404258), new $Uint64(2373891936, 1889569516)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(992322911, 1126779851), new $Uint64(2967364920, 2361961896)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1240403639, 334732990), new $Uint64(3709206150, 2952452370)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1848994098, 1819820855), new $Uint64(2318253844, 771540907)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1237500799, 127292420), new $Uint64(2897817305, 964426134)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3694359646, 3380340998), new $Uint64(3622271631, 2279274491)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1772103867, 1038971299), new $Uint64(2263919769, 3035159293)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3288871658, 224972300), new $Uint64(2829899712, 572723644)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4111089572, 2428699024), new $Uint64(3537374640, 715904555)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2032560070, 3665420538), new $Uint64(2210859150, 447440347)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1466958264, 2434292024), new $Uint64(2763573937, 2706784082)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3981181478, 3042865030), new $Uint64(3454467422, 162254630)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1414496600, 828048820), new $Uint64(2159042138, 3322634616)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1768120750, 1035061025), new $Uint64(2698802673, 2005809622)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(62667289, 3441309929), new $Uint64(3373503341, 3581003852)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(78334112, 1080411939), new $Uint64(4216879177, 1255029343)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1659571556, 675257462), new $Uint64(2635549485, 3468747899)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1000722621, 844071828), new $Uint64(3294436857, 1114709402)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3398386924, 2128831609), new $Uint64(4118046071, 2467128576)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2123991827, 3478003403), new $Uint64(2573778794, 3152568096)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2654989784, 3273762430), new $Uint64(3217223493, 1793226472)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3318737230, 4092203038), new $Uint64(4021529366, 3315274914)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3147952593, 1483885074), new $Uint64(2513455854, 998304997)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(713715269, 2928598167), new $Uint64(3141819817, 3395364895)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4113369559, 439522237), new $Uint64(3927274772, 1022980646)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1497114150, 1885314134), new $Uint64(2454546732, 2786846552)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1871392688, 209159020), new $Uint64(3068183415, 3483558190)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(191757212, 261448775), new $Uint64(3835229269, 3280705914)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1193590081, 2310889132), new $Uint64(2397018293, 2587312108)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1491987601, 3962353239), new $Uint64(2996272867, 12914663)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(791242678, 1731716077), new $Uint64(3745341083, 3237368801)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3178881234, 8580724), new $Uint64(2340838177, 1486484588)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3973601542, 2158209553), new $Uint64(2926047721, 2931847559)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3893260104, 550278293), new $Uint64(3657559652, 443583977)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(822674829, 343923933), new $Uint64(2285974782, 2424723634)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3175827184, 1503646741), new $Uint64(2857468478, 883420894)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1822300332, 1879558426), new $Uint64(3571835597, 3251759766)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(65195883, 3322207664), new $Uint64(2232397248, 2569220766)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2228978502, 3079017756), new $Uint64(2790496560, 3211525957)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3859964952, 1701288547), new $Uint64(3488120700, 4014407446)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1338736271, 1063305342), new $Uint64(2180075438, 361521006)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3820903987, 255389853), new $Uint64(2725094297, 2599384905)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1554904511, 3540462789), new $Uint64(3406367872, 28005660)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1943630639, 3351836662), new $Uint64(4257959840, 35007075)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(677898237, 3705510650), new $Uint64(2661224900, 21879422)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2994856445, 1410662840), new $Uint64(3326531125, 27349277)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(522345084, 2837070374), new $Uint64(4158163906, 1107928421)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(863336589, 3920652632), new $Uint64(2598852441, 1766197087)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(5428913, 1679590318), new $Uint64(3248565551, 3281488183)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3228011613, 3173229722), new $Uint64(4060706939, 3028118404)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4164990906, 2520139488), new $Uint64(2537941837, 1355703090)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3058754985, 1002690712), new $Uint64(3172427296, 2768370687)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2749701907, 2327105214), new $Uint64(3965534120, 3460463359)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3329176428, 917569847), new $Uint64(2478458825, 2162789599)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3087728711, 1146962308), new $Uint64(3098073531, 3777228823)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2785919065, 359961061), new $Uint64(3872591914, 3647794205)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2278070327, 2909330223), new $Uint64(2420369946, 3353613202)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(700104261, 2562920955), new $Uint64(3025462433, 2044532855)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4096355798, 4277393018), new $Uint64(3781828041, 3629407892)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(412738726, 1599628812), new $Uint64(2363642526, 657767197)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1589665231, 4147019663), new $Uint64(2954553157, 2969692644)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1987081539, 4110032755), new $Uint64(3693191447, 490890333)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1778796874, 2031899560), new $Uint64(2308244654, 1917419194)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(76012445, 392390802), new $Uint64(2885305818, 249290345)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1168757380, 1564230326), new $Uint64(3606632272, 2459096579)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(193602450, 3125127602), new $Uint64(2254145170, 1536935362)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2389486711, 1758925854), new $Uint64(2817681462, 4068652850)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(839374741, 1124915494), new $Uint64(3522101828, 2938332415)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2135221949, 1239943096), new $Uint64(2201313642, 3983941407)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1595285612, 2623670694), new $Uint64(2751642053, 2832443111)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(920365191, 3279588367), new $Uint64(3439552567, 319328417)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3259582804, 3660355465), new $Uint64(2149720354, 1810192996)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4074478506, 280477036), new $Uint64(2687150443, 115257597)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1871872660, 2498079943), new $Uint64(3358938053, 3365297469)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3413582649, 3122599929), new $Uint64(4198672567, 985396364)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4280972804, 341012219), new $Uint64(2624170354, 2226485463)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4277474181, 426265274), new $Uint64(3280212943, 635623181)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2125617254, 1606573417), new $Uint64(4100266178, 4015754449)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4012865343, 4225333857), new $Uint64(2562666361, 3583588354)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2868598031, 4207925498), new $Uint64(3203332952, 1258259971)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2512005715, 4186165048), new $Uint64(4004166190, 1572824964)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3717487220, 2079482243), new $Uint64(2502603868, 4204241074)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2499375377, 2599352804), new $Uint64(3128254836, 960334047)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2050477398, 27965533), new $Uint64(3910318545, 1200417559)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2892161109, 3238703930), new $Uint64(2443949090, 3434615534)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1467717739, 827154441), new $Uint64(3054936363, 2145785770)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3982130821, 4255168523), new $Uint64(3818670454, 1608490388)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(341348115, 3196351239), new $Uint64(2386669033, 4226531965)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1500426968, 2921697224), new $Uint64(2983336292, 2061939484)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1875533710, 3652121531), new $Uint64(3729170365, 2577424355)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(635337657, 1208834132), new $Uint64(2330731478, 2147761134)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2941655719, 2584784490), new $Uint64(2913414348, 537217769)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(455844177, 2157238788), new $Uint64(3641767935, 671522212)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2432386258, 4032628802), new $Uint64(2276104959, 2030314118)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(892999175, 2893302355), new $Uint64(2845131199, 1464150824)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1116248969, 2542886120), new $Uint64(3556413999, 756446706)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1771397429, 4273658385), new $Uint64(2222758749, 2083391927)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1140504963, 2120847509), new $Uint64(2778448436, 3677981733)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2499373028, 1577317563), new $Uint64(3473060546, 302509870)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(488366318, 3133307125), new $Uint64(2170662841, 1262810493)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1684199722, 1769150258), new $Uint64(2713328551, 2652254940)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2105249653, 63954174), new $Uint64(3391660689, 2241576851)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1557820242, 1153684542), new $Uint64(4239575861, 3875712888)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(973637651, 1794794663), new $Uint64(2649734913, 2959191467)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(143305240, 1169751504), new $Uint64(3312168642, 477763862)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2326615198, 1462189381), new $Uint64(4140210802, 2744688475)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(917263586, 4135093835), new $Uint64(2587631751, 2789172121)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2220321307, 3021383645), new $Uint64(3234539689, 2412723327)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1701659810, 2702987733), new $Uint64(4043174611, 4089645983)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2674150117, 2763109157), new $Uint64(2526984132, 2019157827)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2268945823, 232660974), new $Uint64(3158730165, 2523947284)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2836182278, 3512051690), new $Uint64(3948412706, 4228675929)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(162001188, 1121290482), new $Uint64(2467757941, 3716664280)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(202501485, 1401613103), new $Uint64(3084697427, 1424604878)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2400610504, 2825758202), new $Uint64(3855871784, 707014273)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4184736125, 1766098876), new $Uint64(2409919865, 441883920)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(935952860, 3281365420), new $Uint64(3012399831, 1626096725)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2243682899, 4101706775), new $Uint64(3765499789, 958879082)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2476043636, 2026695822), new $Uint64(2353437368, 1136170338)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(947570897, 2533369778), new $Uint64(2941796710, 1420212923)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(110721797, 4240454046), new $Uint64(3677245887, 3922749802)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1142942947, 3187154691), new $Uint64(2298278679, 4062331362)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3576162332, 2910201539), new $Uint64(2872848349, 4004172378)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2322719267, 3637751924), new $Uint64(3591060437, 1783990001)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4136054102, 1736724041), new $Uint64(2244412773, 1651864662)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3022583980, 23421403), new $Uint64(2805515966, 3138572652)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3778229975, 29276754), new $Uint64(3506894958, 1775732167)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3972006470, 1628910707), new $Uint64(2191809349, 36090780)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(670040791, 4183622032), new $Uint64(2739761686, 1118855300)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(837550989, 4155785716), new $Uint64(3424702107, 3546052773)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2120680561, 1973506673), new $Uint64(4280877634, 3358824142)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(251683526, 3917796230), new $Uint64(2675548521, 3173006913)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1388346232, 2749761640), new $Uint64(3344435652, 745033169)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2809174614, 3437202050), new $Uint64(4180544565, 931291461)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2292605046, 1074509457), new $Uint64(2612840353, 1118928075)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1792014483, 3490620469), new $Uint64(3266050441, 2472401918)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(92534456, 3289533763), new $Uint64(4082563051, 4164244222)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3279059507, 2055958602), new $Uint64(2551601907, 2065781726)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1951340736, 1496206428), new $Uint64(3189502384, 1508485334)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(291692272, 1870258035), new $Uint64(3986877980, 1885606668)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2329791318, 1168911272), new $Uint64(2491798737, 3325987815)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1838497323, 3608622738), new $Uint64(3114748422, 936259297)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3371863478, 3437036599), new $Uint64(3893435527, 3317807769)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(496801938, 1074406050), new $Uint64(2433397204, 3684242592)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(621002422, 3490491211), new $Uint64(3041746506, 310335944)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(776253028, 2215630365), new $Uint64(3802183132, 2535403578)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1558899966, 3532252626), new $Uint64(2376364457, 3732110884)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1948624958, 2267832135), new $Uint64(2970455572, 1443913133)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3509523022, 687306521), new $Uint64(3713069465, 1804891416)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2193451888, 3650792047), new $Uint64(2320668415, 3812411695)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1668073037, 268522763), new $Uint64(2900835519, 3691772795)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1011349472, 1409395278), new $Uint64(3626044399, 3540974170)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1705835244, 880872049), new $Uint64(2266277749, 3823721592)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2132294055, 1101090061), new $Uint64(2832847187, 1558426518)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(517883921, 302620752), new $Uint64(3541058984, 874291324)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2471161098, 2873492530), new $Uint64(2213161865, 546432077)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4162693197, 1444382015), new $Uint64(2766452331, 1756781920)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(908399200, 2879219342), new $Uint64(3458065414, 1122235577)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3252104060, 1799512089), new $Uint64(2161290883, 3922622707)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2991388251, 2249390111), new $Uint64(2701613604, 3829536560)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3739235314, 1737995815), new $Uint64(3377017006, 491953404)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(379076847, 25011121), new $Uint64(4221271257, 2762425404)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2384406677, 1626244686), new $Uint64(2638294536, 115903141)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4054250170, 3106547682), new $Uint64(3297868170, 144878926)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2920329065, 1735700955), new $Uint64(4122335212, 2328582306)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2898947489, 3769167657), new $Uint64(2576459507, 3602847589)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(402458890, 1490234099), new $Uint64(3220574384, 3429817663)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3724299084, 4010276272), new $Uint64(4025717980, 4287272078)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1253945104, 358939022), new $Uint64(2516073738, 532061401)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2641173204, 448673777), new $Uint64(3145092172, 2812560399)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2227724681, 560842221), new $Uint64(3931365215, 3515700499)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(855457013, 3034880948), new $Uint64(2457103259, 3807925548)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1069321267, 572375713), new $Uint64(3071379074, 3686165111)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(262909759, 3936695114), new $Uint64(3839223843, 2460222741)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(701189511, 4071047182), new $Uint64(2399514902, 1000768301)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1950228713, 4015067154), new $Uint64(2999393627, 3398444024)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2437785892, 1797608470), new $Uint64(3749242034, 3174313206)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(449874358, 3270988942), new $Uint64(2343276271, 3057687578)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2709826596, 1941252529), new $Uint64(2929095339, 2748367648)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3387283245, 2426565662), new $Uint64(3661369174, 2361717736)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2117052028, 2053474450), new $Uint64(2288355734, 402331761)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3720056859, 2566843063), new $Uint64(2860444667, 2650398349)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1428845602, 2134812005), new $Uint64(3575555834, 2239256113)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3577383061, 2407999327), new $Uint64(2234722396, 2473276894)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2324245178, 4083740983), new $Uint64(2793402995, 3091596118)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(757822825, 2957192581), new $Uint64(3491753744, 2790753324)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2621122914, 237632627), new $Uint64(2182346090, 1744220827)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2202661818, 2444524431), new $Uint64(2727932613, 32792386)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(605843625, 908171891), new $Uint64(3409915766, 1114732307)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3978530003, 2208956688), new $Uint64(4262394707, 3540899031)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4097193988, 843727018), new $Uint64(2663996692, 1676190982)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2974008837, 1054658773), new $Uint64(3329995865, 2095238728)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3717511046, 2392065290), new $Uint64(4162494831, 3692790234)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3397186228, 421298982), new $Uint64(2601559269, 3918606632)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4246482785, 526623728), new $Uint64(3251949087, 1677032818)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3160619833, 1732021484), new $Uint64(4064936359, 1022549199)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3586000131, 3766867987), new $Uint64(2540585224, 2249705985)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1261274692, 3634843160), new $Uint64(3175731530, 2812132482)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3724077014, 248586654), new $Uint64(3969664413, 1367681954)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3401289957, 3376592131), new $Uint64(2481040258, 1391672133)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1030386975, 999514691), new $Uint64(3101300322, 3887073815)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(214241895, 175651540), new $Uint64(3876625403, 2711358621)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(670772096, 1720394949), new $Uint64(2422890877, 1157728226)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2985948768, 2150493686), new $Uint64(3028613596, 2520902106)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1584952312, 2688117107), new $Uint64(3785766995, 3151127633)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3674949755, 1680073192), new $Uint64(2366104372, 1432583858)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2446203546, 1026349666), new $Uint64(2957630465, 1790729823)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1984012608, 3430420731), new $Uint64(3697038081, 3312154103)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2850620616, 2144012957), new $Uint64(2310648801, 459483578)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1415792122, 2680016196), new $Uint64(2888311001, 1648096297)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2843481977, 1202536597), new $Uint64(3610388751, 3133862195)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1240305323, 3435939933), new $Uint64(2256492969, 3569276608)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1550381654, 3221183092), new $Uint64(2820616212, 1240370288)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1937977068, 1878995217), new $Uint64(3525770265, 1550462860)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3358719315, 3321855659), new $Uint64(2203606415, 3653393847)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3124657320, 3078577749), new $Uint64(2754508019, 3493000485)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(684596178, 3848222187), new $Uint64(3443135024, 3292508783)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2038485347, 3478880691), new $Uint64(2151959390, 2057817989)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3621848508, 3274859039), new $Uint64(2689949238, 424788838)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2379826987, 4093573799), new $Uint64(3362436547, 2678469696)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2974783734, 4043225425), new $Uint64(4203045684, 2274345296)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1859239834, 1453274067), new $Uint64(2626903552, 3568949458)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(176566144, 3964076232), new $Uint64(3283629441, 166219527)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3441933153, 660127994), new $Uint64(4104536801, 1281516232)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2151208220, 3096934556), new $Uint64(2565335500, 3485302205)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3762752099, 3871168195), new $Uint64(3206669376, 61660460)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(408472828, 3765218420), new $Uint64(4008336720, 77075576)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(255295518, 205777864), new $Uint64(2505210450, 48172235)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3540344869, 2404705978), new $Uint64(3131513062, 2207698941)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1204205614, 4079624297), new $Uint64(3914391328, 612140029)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1289499421, 1476023361), new $Uint64(2446494580, 382587518)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3759357924, 2918771026), new $Uint64(3058118225, 478234397)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1477971933, 3648463782), new $Uint64(3822647781, 1671534821)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1460603370, 2817160776), new $Uint64(2389154863, 1581580175)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(752012389, 1373967322), new $Uint64(2986443579, 903233395)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4161240958, 2791200977), new $Uint64(3733054474, 55299919)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4211388335, 670758786), new $Uint64(2333159046, 1108304273)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2043009946, 4059673955), new $Uint64(2916448807, 3532863990)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(406278785, 2927108796), new $Uint64(3645561009, 3342338164)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2401407889, 218830261), new $Uint64(2278475631, 478348616)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3001759861, 1347279650), new $Uint64(2848094538, 3819161242)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1604716178, 2757841387), new $Uint64(3560118173, 2626467905)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3687302171, 2797392691), new $Uint64(2225073858, 2178413352)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(314160418, 2422999040), new $Uint64(2781342323, 575533043)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3613925995, 881265152), new $Uint64(3476677903, 3940641775)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3869316483, 13919808), new $Uint64(2172923689, 4073513845)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1615420131, 3238625232), new $Uint64(2716154612, 1870666835)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(945533340, 2974539716), new $Uint64(3395193265, 2338333544)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1181916675, 3718174645), new $Uint64(4243991581, 3996658754)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1812439746, 1786988241), new $Uint64(2652494738, 3034782633)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3339291507, 86251653), new $Uint64(3315618423, 1645994643)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3100372559, 3329040039), new $Uint64(4144523029, 983751480)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1937732849, 3691262760), new $Uint64(2590326893, 1151715587)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1348424238, 1392852978), new $Uint64(3237908616, 2513386308)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1685530297, 3888549871), new $Uint64(4047385770, 3141732885)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1590327348, 819730933), new $Uint64(2529616106, 3037324877)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3061651009, 1024663666), new $Uint64(3162020133, 1649172448)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3827063761, 2354571407), new $Uint64(3952525166, 3135207384)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2391914850, 4155961689), new $Uint64(2470328229, 885762791)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1916151739, 3047468464), new $Uint64(3087910286, 2180945313)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3468931498, 2735593756), new $Uint64(3859887858, 578697993)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(557469450, 2783487921), new $Uint64(2412429911, 1435428070)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2844320461, 1331876253), new $Uint64(3015537389, 720543263)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2481658752, 2738587141), new $Uint64(3769421736, 1974420903)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3161649456, 1711616963), new $Uint64(2355888585, 1234013064)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(3952061820, 2139521204), new $Uint64(2944860731, 2616258154)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2792593627, 2674401505), new $Uint64(3681075914, 2196580869)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2282241929, 1134630028), new $Uint64(2300672446, 2446604867)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1779060587, 2492029360), new $Uint64(2875840558, 910772436)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(2223825734, 2041294876), new $Uint64(3594800697, 3285949193)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(4074245644, 202067473), new $Uint64(2246750436, 443105509)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1871581583, 252584341), new $Uint64(2808438045, 553881887)]), arrayType), $clone($toNativeArray($kindUint64, [new $Uint64(1265735154, 3536955899), new $Uint64(3510547556, 1766094183)]), arrayType)]);
		leftcheats = new sliceType$2([$clone(new leftCheat.ptr(0, ""), leftCheat), $clone(new leftCheat.ptr(1, "5"), leftCheat), $clone(new leftCheat.ptr(1, "25"), leftCheat), $clone(new leftCheat.ptr(1, "125"), leftCheat), $clone(new leftCheat.ptr(2, "625"), leftCheat), $clone(new leftCheat.ptr(2, "3125"), leftCheat), $clone(new leftCheat.ptr(2, "15625"), leftCheat), $clone(new leftCheat.ptr(3, "78125"), leftCheat), $clone(new leftCheat.ptr(3, "390625"), leftCheat), $clone(new leftCheat.ptr(3, "1953125"), leftCheat), $clone(new leftCheat.ptr(4, "9765625"), leftCheat), $clone(new leftCheat.ptr(4, "48828125"), leftCheat), $clone(new leftCheat.ptr(4, "244140625"), leftCheat), $clone(new leftCheat.ptr(4, "1220703125"), leftCheat), $clone(new leftCheat.ptr(5, "6103515625"), leftCheat), $clone(new leftCheat.ptr(5, "30517578125"), leftCheat), $clone(new leftCheat.ptr(5, "152587890625"), leftCheat), $clone(new leftCheat.ptr(6, "762939453125"), leftCheat), $clone(new leftCheat.ptr(6, "3814697265625"), leftCheat), $clone(new leftCheat.ptr(6, "19073486328125"), leftCheat), $clone(new leftCheat.ptr(7, "95367431640625"), leftCheat), $clone(new leftCheat.ptr(7, "476837158203125"), leftCheat), $clone(new leftCheat.ptr(7, "2384185791015625"), leftCheat), $clone(new leftCheat.ptr(7, "11920928955078125"), leftCheat), $clone(new leftCheat.ptr(8, "59604644775390625"), leftCheat), $clone(new leftCheat.ptr(8, "298023223876953125"), leftCheat), $clone(new leftCheat.ptr(8, "1490116119384765625"), leftCheat), $clone(new leftCheat.ptr(9, "7450580596923828125"), leftCheat), $clone(new leftCheat.ptr(9, "37252902984619140625"), leftCheat), $clone(new leftCheat.ptr(9, "186264514923095703125"), leftCheat), $clone(new leftCheat.ptr(10, "931322574615478515625"), leftCheat), $clone(new leftCheat.ptr(10, "4656612873077392578125"), leftCheat), $clone(new leftCheat.ptr(10, "23283064365386962890625"), leftCheat), $clone(new leftCheat.ptr(10, "116415321826934814453125"), leftCheat), $clone(new leftCheat.ptr(11, "582076609134674072265625"), leftCheat), $clone(new leftCheat.ptr(11, "2910383045673370361328125"), leftCheat), $clone(new leftCheat.ptr(11, "14551915228366851806640625"), leftCheat), $clone(new leftCheat.ptr(12, "72759576141834259033203125"), leftCheat), $clone(new leftCheat.ptr(12, "363797880709171295166015625"), leftCheat), $clone(new leftCheat.ptr(12, "1818989403545856475830078125"), leftCheat), $clone(new leftCheat.ptr(13, "9094947017729282379150390625"), leftCheat), $clone(new leftCheat.ptr(13, "45474735088646411895751953125"), leftCheat), $clone(new leftCheat.ptr(13, "227373675443232059478759765625"), leftCheat), $clone(new leftCheat.ptr(13, "1136868377216160297393798828125"), leftCheat), $clone(new leftCheat.ptr(14, "5684341886080801486968994140625"), leftCheat), $clone(new leftCheat.ptr(14, "28421709430404007434844970703125"), leftCheat), $clone(new leftCheat.ptr(14, "142108547152020037174224853515625"), leftCheat), $clone(new leftCheat.ptr(15, "710542735760100185871124267578125"), leftCheat), $clone(new leftCheat.ptr(15, "3552713678800500929355621337890625"), leftCheat), $clone(new leftCheat.ptr(15, "17763568394002504646778106689453125"), leftCheat), $clone(new leftCheat.ptr(16, "88817841970012523233890533447265625"), leftCheat), $clone(new leftCheat.ptr(16, "444089209850062616169452667236328125"), leftCheat), $clone(new leftCheat.ptr(16, "2220446049250313080847263336181640625"), leftCheat), $clone(new leftCheat.ptr(16, "11102230246251565404236316680908203125"), leftCheat), $clone(new leftCheat.ptr(17, "55511151231257827021181583404541015625"), leftCheat), $clone(new leftCheat.ptr(17, "277555756156289135105907917022705078125"), leftCheat), $clone(new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), leftCheat), $clone(new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), leftCheat), $clone(new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), leftCheat), $clone(new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), leftCheat), $clone(new leftCheat.ptr(19, "867361737988403547205962240695953369140625"), leftCheat)]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		optimize = true;
		powtab = new sliceType$3([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$4([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$5([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable;
	Acquire = function(addr) {
		var addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
	};
	$pkg.Disable = Disable;
	Enable = function() {
	};
	$pkg.Enable = Enable;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, ptrType$5, CompareAndSwapInt32, CompareAndSwapUint64, CompareAndSwapPointer, AddInt32, LoadInt32, LoadInt64, LoadUint64, LoadPointer, StoreInt32, StoreInt64, StoreUint32, StorePointer, sameType;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = $ifaceNil;
			return;
		}
		this.v = v_;
	});
	ptrType$5 = $ptrType(Value);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	CompareAndSwapPointer = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapPointer = CompareAndSwapPointer;
	AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadInt32 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadInt32 = LoadInt32;
	LoadInt64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadInt64 = LoadInt64;
	LoadUint64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	LoadPointer = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadPointer = LoadPointer;
	StoreInt32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt32 = StoreInt32;
	StoreInt64 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreInt64 = StoreInt64;
	StoreUint32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	StorePointer = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StorePointer = StorePointer;
	Value.ptr.prototype.Load = function() {
		var v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(new$1) {
		var new$1, v;
		v = this;
		v.checkNew("store", new$1);
		v.v = new$1;
	};
	Value.prototype.Store = function(new$1) { return this.$val.Store(new$1); };
	Value.ptr.prototype.Swap = function(new$1) {
		var _tmp, _tmp$1, new$1, old, v;
		old = $ifaceNil;
		v = this;
		v.checkNew("swap", new$1);
		_tmp = v.v;
		_tmp$1 = new$1;
		old = _tmp;
		v.v = _tmp$1;
		old = old;
		return old;
	};
	Value.prototype.Swap = function(new$1) { return this.$val.Swap(new$1); };
	Value.ptr.prototype.CompareAndSwap = function(old, new$1) {
		var new$1, old, swapped, v;
		swapped = false;
		v = this;
		v.checkNew("compare and swap", new$1);
		if (!($interfaceIsEqual(v.v, $ifaceNil) && $interfaceIsEqual(old, $ifaceNil)) && !sameType(old, new$1)) {
			$panic(new $String("sync/atomic: compare and swap of inconsistently typed values into Value"));
		}
		if (!($interfaceIsEqual(v.v, old))) {
			swapped = false;
			return swapped;
		}
		v.v = new$1;
		swapped = true;
		return swapped;
	};
	Value.prototype.CompareAndSwap = function(old, new$1) { return this.$val.CompareAndSwap(old, new$1); };
	Value.ptr.prototype.checkNew = function(op, new$1) {
		var new$1, op, v;
		v = this;
		if ($interfaceIsEqual(new$1, $ifaceNil)) {
			$panic(new $String("sync/atomic: " + op + " of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !sameType(new$1, v.v)) {
			$panic(new $String("sync/atomic: " + op + " of inconsistently typed value into Value"));
		}
	};
	Value.prototype.checkNew = function(op, new$1) { return this.$val.checkNew(op, new$1); };
	sameType = function(x, y) {
		var x, y;
		return x.constructor === y.constructor;
	};
	ptrType$5.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}, {prop: "CompareAndSwap", name: "CompareAndSwap", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$Bool], false)}, {prop: "checkNew", name: "checkNew", pkg: "sync/atomic", typ: $funcType([$String, $emptyInterface], [], false)}];
	Value.init("sync/atomic", [{prop: "v", name: "v", embedded: false, exported: false, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, js, race, atomic, RWMutex, rlocker, notifyList, Mutex, Locker, Map, readOnly, entry, Pool, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$9, ptrType$10, chanType, sliceType$2, ptrType$15, funcType$1, ptrType$16, mapType, sliceType$3, ptrType$18, funcType$2, expunged, semWaiters, semAwoken, init, runtime_doSpin, fatal, newEntry, runtime_Semacquire, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, throw$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	atomic = $packages["sync/atomic"];
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	Map = $pkg.Map = $newType(0, $kindStruct, "sync.Map", true, "sync", true, function(mu_, read_, dirty_, misses_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new Mutex.ptr(0, 0);
			this.read = new atomic.Value.ptr($ifaceNil);
			this.dirty = false;
			this.misses = 0;
			return;
		}
		this.mu = mu_;
		this.read = read_;
		this.dirty = dirty_;
		this.misses = misses_;
	});
	readOnly = $pkg.readOnly = $newType(0, $kindStruct, "sync.readOnly", true, "sync", false, function(m_, amended_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			this.amended = false;
			return;
		}
		this.m = m_;
		this.amended = amended_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "sync.entry", true, "sync", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = 0;
			return;
		}
		this.p = p_;
	});
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.store = store_;
		this.New = New_;
	});
	ptrType$1 = $ptrType($Uint32);
	ptrType$2 = $ptrType($Int32);
	ptrType$3 = $ptrType(rlocker);
	ptrType$4 = $ptrType(RWMutex);
	ptrType$5 = $ptrType($UnsafePointer);
	ptrType$9 = $ptrType($emptyInterface);
	ptrType$10 = $ptrType(entry);
	chanType = $chanType($Bool, false, false);
	sliceType$2 = $sliceType(chanType);
	ptrType$15 = $ptrType(Mutex);
	funcType$1 = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
	ptrType$16 = $ptrType(Map);
	mapType = $mapType($emptyInterface, ptrType$10);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$18 = $ptrType(Pool);
	funcType$2 = $funcType([], [$emptyInterface], false);
	RWMutex.ptr.prototype.RLock = function() {
		var {rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_SemacquireMutex((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false, 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.RLock, $c: true, $r, rw, $s};return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.TryRLock = function() {
		var c, rw;
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		while (true) {
			c = atomic.LoadInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))));
			if (c < 0) {
				if (false) {
					race.Enable();
				}
				return false;
			}
			if (atomic.CompareAndSwapInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), c, c + 1 >> 0)) {
				if (false) {
					race.Enable();
					race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
				}
				return true;
			}
		}
	};
	RWMutex.prototype.TryRLock = function() { return this.$val.TryRLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var {r, rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.ReleaseMerge(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			$r = rw.rUnlockSlow(r); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.RUnlock, $c: true, $r, r, rw, $s};return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.rUnlockSlow = function(r) {
		var {r, rw, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		/* */ if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) { */ case 1:
			race.Enable();
			$r = fatal("sync: RUnlock of unlocked RWMutex"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$2(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$2(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 4:
			$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false, 1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.rUnlockSlow, $c: true, $r, r, rw, $s};return $f;
	};
	RWMutex.prototype.rUnlockSlow = function(r) { return this.$val.rUnlockSlow(r); };
	RWMutex.ptr.prototype.Lock = function() {
		var {r, rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$2(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$2(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_SemacquireMutex((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.Lock, $c: true, $r, r, rw, $s};return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.TryLock = function() {
		var {rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		if (!rw.w.TryLock()) {
			if (false) {
				race.Enable();
			}
			$s = -1; return false;
		}
		/* */ if (!atomic.CompareAndSwapInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 0, -1073741824)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!atomic.CompareAndSwapInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 0, -1073741824)) { */ case 1:
			$r = rw.w.Unlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (false) {
				race.Enable();
			}
			$s = -1; return false;
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.TryLock, $c: true, $r, rw, $s};return $f;
	};
	RWMutex.prototype.TryLock = function() { return this.$val.TryLock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var {i, r, rw, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Release(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$2(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		/* */ if (r >= 1073741824) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r >= 1073741824) { */ case 1:
			race.Enable();
			$r = fatal("sync: Unlock of unlocked RWMutex"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < ((r >> 0)))) { break; } */ if(!(i < ((r >> 0)))) { $s = 5; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false, 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		$s = 4; continue;
		case 5:
		$r = rw.w.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: RWMutex.ptr.prototype.Unlock, $c: true, $r, i, r, rw, $s};return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return ($pointerOfStructConversion(rw, ptrType$3));
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var {r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$4)).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: rlocker.ptr.prototype.Lock, $c: true, $r, r, $s};return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var {r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$4)).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: rlocker.ptr.prototype.Unlock, $c: true, $r, r, $s};return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	init = function() {
		var n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	fatal = function() {
		$throwRuntimeError("native function not implemented: sync.fatal");
	};
	Mutex.ptr.prototype.Lock = function() {
		var {m, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		$r = m.lockSlow(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Mutex.ptr.prototype.Lock, $c: true, $r, m, $s};return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.TryLock = function() {
		var m, old;
		m = this;
		old = m.state;
		if (!(((old & 5) === 0))) {
			return false;
		}
		if (!atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 1)) {
			return false;
		}
		if (false) {
			race.Acquire((m));
		}
		return true;
	};
	Mutex.prototype.TryLock = function() { return this.$val.TryLock(); };
	Mutex.ptr.prototype.lockSlow = function() {
		var {_r, _r$1, _v, awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		waitStartTime = new $Int64(0, 0);
		starving = false;
		awoke = false;
		iter = 0;
		old = m.state;
		/* while (true) { */ case 1:
			/* */ if (((old & 5) === 1) && runtime_canSpin(iter)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((old & 5) === 1) && runtime_canSpin(iter)) { */ case 3:
				if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
					awoke = true;
				}
				$r = runtime_doSpin(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				iter = iter + (1) >> 0;
				old = m.state;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			new$1 = old;
			if ((old & 4) === 0) {
				new$1 = new$1 | (1);
			}
			if (!(((old & 5) === 0))) {
				new$1 = new$1 + (8) >> 0;
			}
			if (starving && !(((old & 1) === 0))) {
				new$1 = new$1 | (4);
			}
			if (awoke) {
				if ((new$1 & 2) === 0) {
					throw$1("sync: inconsistent mutex state");
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
				if ((old & 5) === 0) {
					/* break; */ $s = 2; continue;
				}
				queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
				/* */ if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) { */ case 9:
					_r = runtime_nanotime(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					waitStartTime = _r;
				/* } */ case 10:
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo, 1); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (starving) { _v = true; $s = 13; continue s; }
				_r$1 = runtime_nanotime(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = (x = (x$1 = _r$1, new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000))); case 13:
				starving = _v;
				old = m.state;
				if (!(((old & 4) === 0))) {
					if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
						throw$1("sync: inconsistent mutex state");
					}
					delta = -7;
					if (!starving || ((old >> 3 >> 0) === 1)) {
						delta = delta - (4) >> 0;
					}
					atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
					/* break; */ $s = 2; continue;
				}
				awoke = true;
				iter = 0;
				$s = 8; continue;
			/* } else { */ case 7:
				old = m.state;
			/* } */ case 8:
		$s = 1; continue;
		case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Mutex.ptr.prototype.lockSlow, $c: true, $r, _r, _r$1, _v, awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s};return $f;
	};
	Mutex.prototype.lockSlow = function() { return this.$val.lockSlow(); };
	Mutex.ptr.prototype.Unlock = function() {
		var {m, new$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		/* */ if (!((new$1 === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((new$1 === 0))) { */ case 1:
			$r = m.unlockSlow(new$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Mutex.ptr.prototype.Unlock, $c: true, $r, m, new$1, $s};return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Mutex.ptr.prototype.unlockSlow = function(new$1) {
		var {m, new$1, old, $s, $r, $c} = $restore(this, {new$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		/* */ if ((((new$1 + 1 >> 0)) & 1) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((new$1 + 1 >> 0)) & 1) === 0) { */ case 1:
			$r = fatal("sync: unlock of unlocked mutex"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ if ((new$1 & 4) === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((new$1 & 4) === 0) { */ case 4:
			old = new$1;
			/* while (true) { */ case 7:
				if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
					$s = -1; return;
				}
				new$1 = ((old - 8 >> 0)) | 2;
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$2(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 9:
					$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false, 1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 10:
				old = m.state;
			$s = 7; continue;
			case 8:
			$s = 6; continue;
		/* } else { */ case 5:
			$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true, 1); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Mutex.ptr.prototype.unlockSlow, $c: true, $r, m, new$1, old, $s};return $f;
	};
	Mutex.prototype.unlockSlow = function(new$1) { return this.$val.unlockSlow(new$1); };
	newEntry = function(i) {
		var i, i$24ptr;
		return new entry.ptr(((i$24ptr || (i$24ptr = new ptrType$9(function() { return i; }, function($v) { i = $v; })))));
	};
	Map.ptr.prototype.Load = function(key) {
		var {_entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, m, ok, read, value, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		value = $ifaceNil;
		ok = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = $mapIndex(read.m,$emptyInterface.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [ptrType$10.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = $mapIndex(read.m,$emptyInterface.keyFor(key)), _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$10.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				_tuple$4 = (_entry$2 = $mapIndex(m.dirty,$emptyInterface.keyFor(key)), _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$10.nil, false]);
				e = _tuple$4[0];
				ok = _tuple$4[1];
				m.missLocked();
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!ok) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			$s = -1; return [value, ok];
		}
		_tuple$5 = e.load();
		value = _tuple$5[0];
		ok = _tuple$5[1];
		$s = -1; return [value, ok];
		/* */ } return; } var $f = {$blk: Map.ptr.prototype.Load, $c: true, $r, _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, m, ok, read, value, $s};return $f;
	};
	Map.prototype.Load = function(key) { return this.$val.Load(key); };
	entry.ptr.prototype.load = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, ok, p, value;
		value = $ifaceNil;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === 0 || p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			return [value, ok];
		}
		_tmp$2 = (p).$get();
		_tmp$3 = true;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	entry.prototype.load = function() { return this.$val.load(); };
	Map.ptr.prototype.Store = function(key, value) {
		var {_entry, _entry$1, _entry$2, _key, _key$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, e$2, key, m, ok, ok$1, ok$2, read, value, x, $s, $r, $c} = $restore(this, {key, value});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		value = [value];
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = $mapIndex(read.m,$emptyInterface.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [ptrType$10.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok && e.tryStore((value.$ptr || (value.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))))) {
			$s = -1; return;
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$2 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$2[0]);
		_tuple$3 = (_entry$1 = $mapIndex(read.m,$emptyInterface.keyFor(key)), _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$10.nil, false]);
		e$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		if (ok$1) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map")).set($emptyInterface.keyFor(_key), { k: _key, v: e$1 });
			}
			e$1.storeLocked((value.$ptr || (value.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
		} else {
			_tuple$4 = (_entry$2 = $mapIndex(m.dirty,$emptyInterface.keyFor(key)), _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$10.nil, false]);
			e$2 = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2) {
				e$2.storeLocked((value.$ptr || (value.$ptr = new ptrType$9(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map")).set($emptyInterface.keyFor(_key$1), { k: _key$1, v: newEntry(value[0]) });
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Map.ptr.prototype.Store, $c: true, $r, _entry, _entry$1, _entry$2, _key, _key$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, e$2, key, m, ok, ok$1, ok$2, read, value, x, $s};return $f;
	};
	Map.prototype.Store = function(key, value) { return this.$val.Store(key, value); };
	entry.ptr.prototype.tryStore = function(i) {
		var e, i, p;
		e = this;
		while (true) {
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				return false;
			}
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, (i))) {
				return true;
			}
		}
	};
	entry.prototype.tryStore = function(i) { return this.$val.tryStore(i); };
	entry.ptr.prototype.unexpungeLocked = function() {
		var e, wasExpunged;
		wasExpunged = false;
		e = this;
		wasExpunged = atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), expunged, 0);
		return wasExpunged;
	};
	entry.prototype.unexpungeLocked = function() { return this.$val.unexpungeLocked(); };
	entry.ptr.prototype.storeLocked = function(i) {
		var e, i;
		e = this;
		atomic.StorePointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), (i));
	};
	entry.prototype.storeLocked = function(i) { return this.$val.storeLocked(i); };
	Map.ptr.prototype.LoadOrStore = function(key, value) {
		var {_entry, _entry$1, _entry$2, _key, _key$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, actual, actual$1, e, e$1, e$2, key, loaded, loaded$1, m, ok, ok$1, ok$2, ok$3, read, value, x, $s, $r, $c} = $restore(this, {key, value});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		actual = $ifaceNil;
		loaded = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = $mapIndex(read.m,$emptyInterface.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [ptrType$10.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = e.tryLoadOrStore(value);
			actual$1 = _tuple$2[0];
			loaded$1 = _tuple$2[1];
			ok$1 = _tuple$2[2];
			if (ok$1) {
				_tmp = actual$1;
				_tmp$1 = loaded$1;
				actual = _tmp;
				loaded = _tmp$1;
				$s = -1; return [actual, loaded];
			}
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$3 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$3[0]);
		_tuple$4 = (_entry$1 = $mapIndex(read.m,$emptyInterface.keyFor(key)), _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$10.nil, false]);
		e$1 = _tuple$4[0];
		ok$2 = _tuple$4[1];
		if (ok$2) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map")).set($emptyInterface.keyFor(_key), { k: _key, v: e$1 });
			}
			_tuple$5 = e$1.tryLoadOrStore(value);
			actual = _tuple$5[0];
			loaded = _tuple$5[1];
		} else {
			_tuple$6 = (_entry$2 = $mapIndex(m.dirty,$emptyInterface.keyFor(key)), _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$10.nil, false]);
			e$2 = _tuple$6[0];
			ok$3 = _tuple$6[1];
			if (ok$3) {
				_tuple$7 = e$2.tryLoadOrStore(value);
				actual = _tuple$7[0];
				loaded = _tuple$7[1];
				m.missLocked();
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map")).set($emptyInterface.keyFor(_key$1), { k: _key$1, v: newEntry(value) });
				_tmp$2 = value;
				_tmp$3 = false;
				actual = _tmp$2;
				loaded = _tmp$3;
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = actual;
		_tmp$5 = loaded;
		actual = _tmp$4;
		loaded = _tmp$5;
		$s = -1; return [actual, loaded];
		/* */ } return; } var $f = {$blk: Map.ptr.prototype.LoadOrStore, $c: true, $r, _entry, _entry$1, _entry$2, _key, _key$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, actual, actual$1, e, e$1, e$2, key, loaded, loaded$1, m, ok, ok$1, ok$2, ok$3, read, value, x, $s};return $f;
	};
	Map.prototype.LoadOrStore = function(key, value) { return this.$val.LoadOrStore(key, value); };
	entry.ptr.prototype.tryLoadOrStore = function(i) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, actual, e, i, ic, ic$24ptr, loaded, ok, p;
		actual = $ifaceNil;
		loaded = false;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			_tmp$2 = false;
			actual = _tmp;
			loaded = _tmp$1;
			ok = _tmp$2;
			return [actual, loaded, ok];
		}
		if (!(p === 0)) {
			_tmp$3 = (p).$get();
			_tmp$4 = true;
			_tmp$5 = true;
			actual = _tmp$3;
			loaded = _tmp$4;
			ok = _tmp$5;
			return [actual, loaded, ok];
		}
		ic = i;
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, ((ic$24ptr || (ic$24ptr = new ptrType$9(function() { return ic; }, function($v) { ic = $v; })))))) {
				_tmp$6 = i;
				_tmp$7 = false;
				_tmp$8 = true;
				actual = _tmp$6;
				loaded = _tmp$7;
				ok = _tmp$8;
				return [actual, loaded, ok];
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				_tmp$9 = $ifaceNil;
				_tmp$10 = false;
				_tmp$11 = false;
				actual = _tmp$9;
				loaded = _tmp$10;
				ok = _tmp$11;
				return [actual, loaded, ok];
			}
			if (!(p === 0)) {
				_tmp$12 = (p).$get();
				_tmp$13 = true;
				_tmp$14 = true;
				actual = _tmp$12;
				loaded = _tmp$13;
				ok = _tmp$14;
				return [actual, loaded, ok];
			}
		}
	};
	entry.prototype.tryLoadOrStore = function(i) { return this.$val.tryLoadOrStore(i); };
	Map.ptr.prototype.LoadAndDelete = function(key) {
		var {_entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, loaded, m, ok, read, value, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		value = $ifaceNil;
		loaded = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = $mapIndex(read.m,$emptyInterface.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [ptrType$10.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = $mapIndex(read.m,$emptyInterface.keyFor(key)), _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$10.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				_tuple$4 = (_entry$2 = $mapIndex(m.dirty,$emptyInterface.keyFor(key)), _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$10.nil, false]);
				e = _tuple$4[0];
				ok = _tuple$4[1];
				$mapDelete(m.dirty, $emptyInterface.keyFor(key));
				m.missLocked();
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (ok) {
			_tuple$5 = e.delete$();
			value = _tuple$5[0];
			loaded = _tuple$5[1];
			$s = -1; return [value, loaded];
		}
		_tmp = $ifaceNil;
		_tmp$1 = false;
		value = _tmp;
		loaded = _tmp$1;
		$s = -1; return [value, loaded];
		/* */ } return; } var $f = {$blk: Map.ptr.prototype.LoadAndDelete, $c: true, $r, _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, loaded, m, ok, read, value, $s};return $f;
	};
	Map.prototype.LoadAndDelete = function(key) { return this.$val.LoadAndDelete(key); };
	Map.ptr.prototype.Delete = function(key) {
		var {_r, key, m, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.LoadAndDelete(key); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Map.ptr.prototype.Delete, $c: true, $r, _r, key, m, $s};return $f;
	};
	Map.prototype.Delete = function(key) { return this.$val.Delete(key); };
	entry.ptr.prototype.delete$ = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, ok, p, value;
		value = $ifaceNil;
		ok = false;
		e = this;
		while (true) {
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === 0 || p === expunged) {
				_tmp = $ifaceNil;
				_tmp$1 = false;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, 0)) {
				_tmp$2 = (p).$get();
				_tmp$3 = true;
				value = _tmp$2;
				ok = _tmp$3;
				return [value, ok];
			}
		}
	};
	entry.prototype.delete$ = function() { return this.$val.delete$(); };
	Map.ptr.prototype.Range = function(f) {
		var {_entry, _i, _key, _keys, _r, _ref, _size, _tuple, _tuple$1, _tuple$2, e, f, k, m, ok, read, v, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		/* */ if (read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$1[0]);
			if (read.amended) {
				readOnly.copy(read, new readOnly.ptr(m.dirty, false));
				m.read.Store(new read.constructor.elem(read));
				m.dirty = false;
				m.misses = 0;
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = read.m;
		_i = 0;
		_keys = _ref ? _ref.keys() : undefined;
		_size = _ref ? _ref.size : 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _size)) { break; } */ if(!(_i < _size)) { $s = 6; continue; }
			_key = _keys.next().value;
			_entry = _ref.get(_key);
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 5; continue;
			}
			k = _entry.k;
			e = _entry.v;
			_tuple$2 = e.load();
			v = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok) {
				_i++;
				/* continue; */ $s = 5; continue;
			}
			_r = f(k, v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r) { */ case 7:
				/* break; */ $s = 6; continue;
			/* } */ case 8:
			_i++;
		$s = 5; continue;
		case 6:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Map.ptr.prototype.Range, $c: true, $r, _entry, _i, _key, _keys, _r, _ref, _size, _tuple, _tuple$1, _tuple$2, e, f, k, m, ok, read, v, $s};return $f;
	};
	Map.prototype.Range = function(f) { return this.$val.Range(f); };
	Map.ptr.prototype.missLocked = function() {
		var m, x;
		m = this;
		m.misses = m.misses + (1) >> 0;
		if (m.misses < (m.dirty ? m.dirty.size : 0)) {
			return;
		}
		m.read.Store((x = new readOnly.ptr(m.dirty, false), new x.constructor.elem(x)));
		m.dirty = false;
		m.misses = 0;
	};
	Map.prototype.missLocked = function() { return this.$val.missLocked(); };
	Map.ptr.prototype.dirtyLocked = function() {
		var _entry, _i, _key, _key$1, _keys, _ref, _size, _tuple, e, k, m, read, x;
		m = this;
		if (!(m.dirty === false)) {
			return;
		}
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		m.dirty = (x = (read.m ? read.m.size : 0), ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : new $global.Map()));
		_ref = read.m;
		_i = 0;
		_keys = _ref ? _ref.keys() : undefined;
		_size = _ref ? _ref.size : 0;
		while (true) {
			if (!(_i < _size)) { break; }
			_key = _keys.next().value;
			_entry = _ref.get(_key);
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			e = _entry.v;
			if (!e.tryExpungeLocked()) {
				_key$1 = k; (m.dirty || $throwRuntimeError("assignment to entry in nil map")).set($emptyInterface.keyFor(_key$1), { k: _key$1, v: e });
			}
			_i++;
		}
	};
	Map.prototype.dirtyLocked = function() { return this.$val.dirtyLocked(); };
	entry.ptr.prototype.tryExpungeLocked = function() {
		var e, isExpunged, p;
		isExpunged = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		while (true) {
			if (!(p === 0)) { break; }
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, expunged)) {
				isExpunged = true;
				return isExpunged;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		}
		isExpunged = p === expunged;
		return isExpunged;
	};
	entry.prototype.tryExpungeLocked = function() { return this.$val.tryExpungeLocked(); };
	runtime_Semacquire = function(s) {
		var {s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = runtime_SemacquireMutex(s, false, 1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runtime_Semacquire, $c: true, $r, s, $s};return $f;
	};
	$linknames["sync.runtime_Semacquire"] = runtime_Semacquire;
	runtime_SemacquireMutex = function(s, lifo, skipframes) {
		var {_entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, skipframes, $s, $r, $c} = $restore(this, {s, lifo, skipframes});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if (((s.$get() - (_entry = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((s.$get() - (_entry = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			if (lifo) {
				_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key), { k: _key, v: $appendSlice(new sliceType$2([ch]), (_entry$1 = $mapIndex(semWaiters,ptrType$1.keyFor(s)), _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil)) });
			} else {
				_key$1 = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key$1), { k: _key$1, v: $append((_entry$2 = $mapIndex(semWaiters,ptrType$1.keyFor(s)), _entry$2 !== undefined ? _entry$2.v : sliceType$2.nil), ch) });
			}
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
			_key$2 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key$2), { k: _key$2, v: (_entry$3 = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry$3 !== undefined ? _entry$3.v : 0) - (1) >>> 0 });
			if ((_entry$4 = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry$4 !== undefined ? _entry$4.v : 0) === 0) {
				$mapDelete(semAwoken, ptrType$1.keyFor(s));
			}
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runtime_SemacquireMutex, $c: true, $r, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, skipframes, $s};return $f;
	};
	runtime_Semrelease = function(s, handoff, skipframes) {
		var {_entry, _entry$1, _key, _key$1, ch, handoff, s, skipframes, w, $s, $r, $c} = $restore(this, {s, handoff, skipframes});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = $mapIndex(semWaiters,ptrType$1.keyFor(s)), _entry !== undefined ? _entry.v : sliceType$2.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key), { k: _key, v: w });
		if (w.$length === 0) {
			$mapDelete(semWaiters, ptrType$1.keyFor(s));
		}
		_key$1 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$1.keyFor(_key$1), { k: _key$1, v: (_entry$1 = $mapIndex(semAwoken,ptrType$1.keyFor(s)), _entry$1 !== undefined ? _entry$1.v : 0) + (1) >>> 0 });
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runtime_Semrelease, $c: true, $r, _entry, _entry$1, _key, _key$1, ch, handoff, s, skipframes, w, $s};return $f;
	};
	$linknames["sync.runtime_Semrelease"] = runtime_Semrelease;
	runtime_notifyListCheck = function(size) {
		var size;
	};
	runtime_canSpin = function(i) {
		var i;
		return false;
	};
	runtime_nanotime = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_nanotime");
	};
	throw$1 = function(s) {
		var s;
		$throwRuntimeError($externalize(s, $String));
	};
	Pool.ptr.prototype.Get = function() {
		var {$24r, _r, p, x, x$1, x$2, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } var $f = {$blk: Pool.ptr.prototype.Get, $c: true, $r, $24r, _r, p, x, x$1, x$2, $s};return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	ptrType$4.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "TryRLock", name: "TryRLock", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "rUnlockSlow", name: "rUnlockSlow", pkg: "sync", typ: $funcType([$Int32], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "TryLock", name: "TryLock", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$3.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$15.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "TryLock", name: "TryLock", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "lockSlow", name: "lockSlow", pkg: "sync", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "unlockSlow", name: "unlockSlow", pkg: "sync", typ: $funcType([$Int32], [], false)}];
	ptrType$16.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [], false)}, {prop: "LoadOrStore", name: "LoadOrStore", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "LoadAndDelete", name: "LoadAndDelete", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Range", name: "Range", pkg: "", typ: $funcType([funcType$1], [], false)}, {prop: "missLocked", name: "missLocked", pkg: "sync", typ: $funcType([], [], false)}, {prop: "dirtyLocked", name: "dirtyLocked", pkg: "sync", typ: $funcType([], [], false)}];
	ptrType$10.methods = [{prop: "load", name: "load", pkg: "sync", typ: $funcType([], [$emptyInterface, $Bool], false)}, {prop: "tryStore", name: "tryStore", pkg: "sync", typ: $funcType([ptrType$9], [$Bool], false)}, {prop: "unexpungeLocked", name: "unexpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "storeLocked", name: "storeLocked", pkg: "sync", typ: $funcType([ptrType$9], [], false)}, {prop: "tryLoadOrStore", name: "tryLoadOrStore", pkg: "sync", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool, $Bool], false)}, {prop: "delete$", name: "delete", pkg: "sync", typ: $funcType([], [$emptyInterface, $Bool], false)}, {prop: "tryExpungeLocked", name: "tryExpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}];
	ptrType$18.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	RWMutex.init("sync", [{prop: "w", name: "w", embedded: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", embedded: false, exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", embedded: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", embedded: false, exported: false, typ: $Int32, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Map.init("sync", [{prop: "mu", name: "mu", embedded: false, exported: false, typ: Mutex, tag: ""}, {prop: "read", name: "read", embedded: false, exported: false, typ: atomic.Value, tag: ""}, {prop: "dirty", name: "dirty", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "misses", name: "misses", embedded: false, exported: false, typ: $Int, tag: ""}]);
	readOnly.init("sync", [{prop: "m", name: "m", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "amended", name: "amended", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	entry.init("sync", [{prop: "p", name: "p", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	Pool.init("sync", [{prop: "store", name: "store", embedded: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: funcType$2, tag: ""}]);
	$pkg.$initLinknames = function() {
		runtime_nanotime = $linknames["runtime.nanotime"];
};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		expunged = (new Uint8Array(8));
		semWaiters = new $global.Map();
		semAwoken = new $global.Map();
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, SpecialCase, d, foldPair, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType, ptrType, sliceType$4, _C, _Cc, _Cf, _Co, _Cs, _L, _Ll, _Lm, _Lo, _Lt, _Lu, _M, _Mc, _Me, _Mn, _N, _Nd, _Nl, _No, _P, _Pc, _Pd, _Pe, _Pf, _Pi, _Po, _Ps, _S, _Sc, _Sk, _Sm, _So, _Z, _Zl, _Zp, _Zs, _Adlam, _Ahom, _Anatolian_Hieroglyphs, _Arabic, _Armenian, _Avestan, _Balinese, _Bamum, _Bassa_Vah, _Batak, _Bengali, _Bhaiksuki, _Bopomofo, _Brahmi, _Braille, _Buginese, _Buhid, _Canadian_Aboriginal, _Carian, _Caucasian_Albanian, _Chakma, _Cham, _Cherokee, _Chorasmian, _Common, _Coptic, _Cuneiform, _Cypriot, _Cyrillic, _Deseret, _Devanagari, _Dives_Akuru, _Dogra, _Duployan, _Egyptian_Hieroglyphs, _Elbasan, _Elymaic, _Ethiopic, _Georgian, _Glagolitic, _Gothic, _Grantha, _Greek, _Gujarati, _Gunjala_Gondi, _Gurmukhi, _Han, _Hangul, _Hanifi_Rohingya, _Hanunoo, _Hatran, _Hebrew, _Hiragana, _Imperial_Aramaic, _Inherited, _Inscriptional_Pahlavi, _Inscriptional_Parthian, _Javanese, _Kaithi, _Kannada, _Katakana, _Kayah_Li, _Kharoshthi, _Khitan_Small_Script, _Khmer, _Khojki, _Khudawadi, _Lao, _Latin, _Lepcha, _Limbu, _Linear_A, _Linear_B, _Lisu, _Lycian, _Lydian, _Mahajani, _Makasar, _Malayalam, _Mandaic, _Manichaean, _Marchen, _Masaram_Gondi, _Medefaidrin, _Meetei_Mayek, _Mende_Kikakui, _Meroitic_Cursive, _Meroitic_Hieroglyphs, _Miao, _Modi, _Mongolian, _Mro, _Multani, _Myanmar, _Nabataean, _Nandinagari, _New_Tai_Lue, _Newa, _Nko, _Nushu, _Nyiakeng_Puachue_Hmong, _Ogham, _Ol_Chiki, _Old_Hungarian, _Old_Italic, _Old_North_Arabian, _Old_Permic, _Old_Persian, _Old_Sogdian, _Old_South_Arabian, _Old_Turkic, _Oriya, _Osage, _Osmanya, _Pahawh_Hmong, _Palmyrene, _Pau_Cin_Hau, _Phags_Pa, _Phoenician, _Psalter_Pahlavi, _Rejang, _Runic, _Samaritan, _Saurashtra, _Sharada, _Shavian, _Siddham, _SignWriting, _Sinhala, _Sogdian, _Sora_Sompeng, _Soyombo, _Sundanese, _Syloti_Nagri, _Syriac, _Tagalog, _Tagbanwa, _Tai_Le, _Tai_Tham, _Tai_Viet, _Takri, _Tamil, _Tangut, _Telugu, _Thaana, _Thai, _Tibetan, _Tifinagh, _Tirhuta, _Ugaritic, _Vai, _Wancho, _Warang_Citi, _Yezidi, _Yi, _Zanabazar_Square, _ASCII_Hex_Digit, _Bidi_Control, _Dash, _Deprecated, _Diacritic, _Extender, _Hex_Digit, _Hyphen, _IDS_Binary_Operator, _IDS_Trinary_Operator, _Ideographic, _Join_Control, _Logical_Order_Exception, _Noncharacter_Code_Point, _Other_Alphabetic, _Other_Default_Ignorable_Code_Point, _Other_Grapheme_Extend, _Other_ID_Continue, _Other_ID_Start, _Other_Lowercase, _Other_Math, _Other_Uppercase, _Pattern_Syntax, _Pattern_White_Space, _Prepended_Concatenation_Mark, _Quotation_Mark, _Radical, _Regional_Indicator, _Sentence_Terminal, _Soft_Dotted, _Terminal_Punctuation, _Unified_Ideograph, _Variation_Selector, _White_Space, _CaseRanges, properties, asciiFold, caseOrbit, foldL, foldLl, foldLt, foldLu, foldM, foldMn, foldCommon, foldGreek, foldInherited, is16, is32, Is, isExcludingLatin, To, ToUpper, ToLower, ToTitle, SimpleFold, IsPrint, In, IsLetter, IsSpace, to, IsDigit;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	SpecialCase = $pkg.SpecialCase = $newType(12, $kindSlice, "unicode.SpecialCase", true, "unicode", true, null);
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", true, "unicode", false, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	sliceType$2 = $sliceType(foldPair);
	sliceType$3 = $sliceType(CaseRange);
	arrayType = $arrayType($Int32, 3);
	ptrType = $ptrType(RangeTable);
	sliceType$4 = $sliceType(ptrType);
	is16 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && ((r >>> 0)) <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >>> 0))) {
			return is16(r16, ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	$pkg.Is = Is;
	isExcludingLatin = function(rangeTab, r) {
		var off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && ((r >>> 0)) <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >>> 0))) {
			return is16($subslice(r16, off), ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	To = function(_case, r) {
		var _case, _tuple, r;
		_tuple = to(_case, r, $pkg.CaseRanges);
		r = _tuple[0];
		return r;
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	ToTitle = function(r) {
		var r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(2, r);
	};
	$pkg.ToTitle = ToTitle;
	SpecialCase.prototype.ToUpper = function(r) {
		var _tuple, hadMapping, r, r1, special;
		special = this;
		_tuple = to(0, r, ($convertSliceType(special, sliceType$3)));
		r1 = _tuple[0];
		hadMapping = _tuple[1];
		if ((r1 === r) && !hadMapping) {
			r1 = ToUpper(r);
		}
		return r1;
	};
	$ptrType(SpecialCase).prototype.ToUpper = function(r) { return this.$get().ToUpper(r); };
	SpecialCase.prototype.ToTitle = function(r) {
		var _tuple, hadMapping, r, r1, special;
		special = this;
		_tuple = to(2, r, ($convertSliceType(special, sliceType$3)));
		r1 = _tuple[0];
		hadMapping = _tuple[1];
		if ((r1 === r) && !hadMapping) {
			r1 = ToTitle(r);
		}
		return r1;
	};
	$ptrType(SpecialCase).prototype.ToTitle = function(r) { return this.$get().ToTitle(r); };
	SpecialCase.prototype.ToLower = function(r) {
		var _tuple, hadMapping, r, r1, special;
		special = this;
		_tuple = to(1, r, ($convertSliceType(special, sliceType$3)));
		r1 = _tuple[0];
		hadMapping = _tuple[1];
		if ((r1 === r) && !hadMapping) {
			r1 = ToLower(r);
		}
		return r1;
	};
	$ptrType(SpecialCase).prototype.ToLower = function(r) { return this.$get().ToLower(r); };
	SimpleFold = function(r) {
		var _q, hi, l, lo, m, r;
		if (r < 0 || r > 1114111) {
			return r;
		}
		if (((r >> 0)) < 128) {
			return ((((r < 0 || r >= asciiFold.length) ? ($throwRuntimeError("index out of range"), undefined) : asciiFold[r]) >> 0));
		}
		lo = 0;
		hi = caseOrbit.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((((m < 0 || m >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0)) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && (((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0)) === r)) {
			return ((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0));
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.SimpleFold = SimpleFold;
	IsPrint = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	$pkg.IsPrint = IsPrint;
	In = function(r, ranges) {
		var _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	IsLetter = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	$pkg.IsLetter = IsLetter;
	IsSpace = function(r) {
		var _1, r;
		if (((r >>> 0)) <= 255) {
			_1 = r;
			if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (32)) || (_1 === (133)) || (_1 === (160))) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	to = function(_case, r, caseRange) {
		var _case, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, caseRange, cr, delta, foundMapping, hi, lo, m, mappedRune, r, x;
		mappedRune = 0;
		foundMapping = false;
		if (_case < 0 || 3 <= _case) {
			_tmp = 65533;
			_tmp$1 = false;
			mappedRune = _tmp;
			foundMapping = _tmp$1;
			return [mappedRune, foundMapping];
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseRange.$array[caseRange.$offset + m]);
			if (((cr.Lo >> 0)) <= r && r <= ((cr.Hi >> 0))) {
				delta = ((x = cr.Delta, ((_case < 0 || _case >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[_case])));
				if (delta > 1114111) {
					_tmp$2 = ((cr.Lo >> 0)) + ((((((r - ((cr.Lo >> 0)) >> 0)) & ~1) >> 0) | (((_case & 1) >> 0)))) >> 0;
					_tmp$3 = true;
					mappedRune = _tmp$2;
					foundMapping = _tmp$3;
					return [mappedRune, foundMapping];
				}
				_tmp$4 = r + delta >> 0;
				_tmp$5 = true;
				mappedRune = _tmp$4;
				foundMapping = _tmp$5;
				return [mappedRune, foundMapping];
			}
			if (r < ((cr.Lo >> 0))) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		_tmp$6 = r;
		_tmp$7 = false;
		mappedRune = _tmp$6;
		foundMapping = _tmp$7;
		return [mappedRune, foundMapping];
	};
	IsDigit = function(r) {
		var r;
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	$pkg.IsDigit = IsDigit;
	SpecialCase.methods = [{prop: "ToUpper", name: "ToUpper", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "ToTitle", name: "ToTitle", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "ToLower", name: "ToLower", pkg: "", typ: $funcType([$Int32], [$Int32], false)}];
	RangeTable.init("", [{prop: "R16", name: "R16", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", embedded: false, exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", embedded: false, exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", embedded: false, exported: true, typ: $Uint32, tag: ""}]);
	CaseRange.init("", [{prop: "Lo", name: "Lo", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", embedded: false, exported: true, typ: d, tag: ""}]);
	SpecialCase.init(CaseRange);
	d.init($Int32, 3);
	foldPair.init("", [{prop: "From", name: "From", embedded: false, exported: true, typ: $Uint16, tag: ""}, {prop: "To", name: "To", embedded: false, exported: true, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_C = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(0, 31, 1), Range16), $clone(new Range16.ptr(127, 159, 1), Range16), $clone(new Range16.ptr(173, 1536, 1363), Range16), $clone(new Range16.ptr(1537, 1541, 1), Range16), $clone(new Range16.ptr(1564, 1757, 193), Range16), $clone(new Range16.ptr(1807, 2274, 467), Range16), $clone(new Range16.ptr(6158, 8203, 2045), Range16), $clone(new Range16.ptr(8204, 8207, 1), Range16), $clone(new Range16.ptr(8234, 8238, 1), Range16), $clone(new Range16.ptr(8288, 8292, 1), Range16), $clone(new Range16.ptr(8294, 8303, 1), Range16), $clone(new Range16.ptr(55296, 63743, 1), Range16), $clone(new Range16.ptr(65279, 65529, 250), Range16), $clone(new Range16.ptr(65530, 65531, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(69821, 69837, 16), Range32), $clone(new Range32.ptr(78896, 78904, 1), Range32), $clone(new Range32.ptr(113824, 113827, 1), Range32), $clone(new Range32.ptr(119155, 119162, 1), Range32), $clone(new Range32.ptr(917505, 917536, 31), Range32), $clone(new Range32.ptr(917537, 917631, 1), Range32), $clone(new Range32.ptr(983040, 1048573, 1), Range32), $clone(new Range32.ptr(1048576, 1114109, 1), Range32)]), 2);
		_Cc = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(0, 31, 1), Range16), $clone(new Range16.ptr(127, 159, 1), Range16)]), sliceType$1.nil, 2);
		_Cf = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(173, 1536, 1363), Range16), $clone(new Range16.ptr(1537, 1541, 1), Range16), $clone(new Range16.ptr(1564, 1757, 193), Range16), $clone(new Range16.ptr(1807, 2274, 467), Range16), $clone(new Range16.ptr(6158, 8203, 2045), Range16), $clone(new Range16.ptr(8204, 8207, 1), Range16), $clone(new Range16.ptr(8234, 8238, 1), Range16), $clone(new Range16.ptr(8288, 8292, 1), Range16), $clone(new Range16.ptr(8294, 8303, 1), Range16), $clone(new Range16.ptr(65279, 65529, 250), Range16), $clone(new Range16.ptr(65530, 65531, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(69821, 69837, 16), Range32), $clone(new Range32.ptr(78896, 78904, 1), Range32), $clone(new Range32.ptr(113824, 113827, 1), Range32), $clone(new Range32.ptr(119155, 119162, 1), Range32), $clone(new Range32.ptr(917505, 917536, 31), Range32), $clone(new Range32.ptr(917537, 917631, 1), Range32)]), 0);
		_Co = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(57344, 63743, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(983040, 1048573, 1), Range32), $clone(new Range32.ptr(1048576, 1114109, 1), Range32)]), 0);
		_Cs = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(55296, 57343, 1), Range16)]), sliceType$1.nil, 0);
		_L = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(65, 90, 1), Range16), $clone(new Range16.ptr(97, 122, 1), Range16), $clone(new Range16.ptr(170, 181, 11), Range16), $clone(new Range16.ptr(186, 192, 6), Range16), $clone(new Range16.ptr(193, 214, 1), Range16), $clone(new Range16.ptr(216, 246, 1), Range16), $clone(new Range16.ptr(248, 705, 1), Range16), $clone(new Range16.ptr(710, 721, 1), Range16), $clone(new Range16.ptr(736, 740, 1), Range16), $clone(new Range16.ptr(748, 750, 2), Range16), $clone(new Range16.ptr(880, 884, 1), Range16), $clone(new Range16.ptr(886, 887, 1), Range16), $clone(new Range16.ptr(890, 893, 1), Range16), $clone(new Range16.ptr(895, 902, 7), Range16), $clone(new Range16.ptr(904, 906, 1), Range16), $clone(new Range16.ptr(908, 910, 2), Range16), $clone(new Range16.ptr(911, 929, 1), Range16), $clone(new Range16.ptr(931, 1013, 1), Range16), $clone(new Range16.ptr(1015, 1153, 1), Range16), $clone(new Range16.ptr(1162, 1327, 1), Range16), $clone(new Range16.ptr(1329, 1366, 1), Range16), $clone(new Range16.ptr(1369, 1376, 7), Range16), $clone(new Range16.ptr(1377, 1416, 1), Range16), $clone(new Range16.ptr(1488, 1514, 1), Range16), $clone(new Range16.ptr(1519, 1522, 1), Range16), $clone(new Range16.ptr(1568, 1610, 1), Range16), $clone(new Range16.ptr(1646, 1647, 1), Range16), $clone(new Range16.ptr(1649, 1747, 1), Range16), $clone(new Range16.ptr(1749, 1765, 16), Range16), $clone(new Range16.ptr(1766, 1774, 8), Range16), $clone(new Range16.ptr(1775, 1786, 11), Range16), $clone(new Range16.ptr(1787, 1788, 1), Range16), $clone(new Range16.ptr(1791, 1808, 17), Range16), $clone(new Range16.ptr(1810, 1839, 1), Range16), $clone(new Range16.ptr(1869, 1957, 1), Range16), $clone(new Range16.ptr(1969, 1994, 25), Range16), $clone(new Range16.ptr(1995, 2026, 1), Range16), $clone(new Range16.ptr(2036, 2037, 1), Range16), $clone(new Range16.ptr(2042, 2048, 6), Range16), $clone(new Range16.ptr(2049, 2069, 1), Range16), $clone(new Range16.ptr(2074, 2084, 10), Range16), $clone(new Range16.ptr(2088, 2112, 24), Range16), $clone(new Range16.ptr(2113, 2136, 1), Range16), $clone(new Range16.ptr(2144, 2154, 1), Range16), $clone(new Range16.ptr(2208, 2228, 1), Range16), $clone(new Range16.ptr(2230, 2247, 1), Range16), $clone(new Range16.ptr(2308, 2361, 1), Range16), $clone(new Range16.ptr(2365, 2384, 19), Range16), $clone(new Range16.ptr(2392, 2401, 1), Range16), $clone(new Range16.ptr(2417, 2432, 1), Range16), $clone(new Range16.ptr(2437, 2444, 1), Range16), $clone(new Range16.ptr(2447, 2448, 1), Range16), $clone(new Range16.ptr(2451, 2472, 1), Range16), $clone(new Range16.ptr(2474, 2480, 1), Range16), $clone(new Range16.ptr(2482, 2486, 4), Range16), $clone(new Range16.ptr(2487, 2489, 1), Range16), $clone(new Range16.ptr(2493, 2510, 17), Range16), $clone(new Range16.ptr(2524, 2525, 1), Range16), $clone(new Range16.ptr(2527, 2529, 1), Range16), $clone(new Range16.ptr(2544, 2545, 1), Range16), $clone(new Range16.ptr(2556, 2565, 9), Range16), $clone(new Range16.ptr(2566, 2570, 1), Range16), $clone(new Range16.ptr(2575, 2576, 1), Range16), $clone(new Range16.ptr(2579, 2600, 1), Range16), $clone(new Range16.ptr(2602, 2608, 1), Range16), $clone(new Range16.ptr(2610, 2611, 1), Range16), $clone(new Range16.ptr(2613, 2614, 1), Range16), $clone(new Range16.ptr(2616, 2617, 1), Range16), $clone(new Range16.ptr(2649, 2652, 1), Range16), $clone(new Range16.ptr(2654, 2674, 20), Range16), $clone(new Range16.ptr(2675, 2676, 1), Range16), $clone(new Range16.ptr(2693, 2701, 1), Range16), $clone(new Range16.ptr(2703, 2705, 1), Range16), $clone(new Range16.ptr(2707, 2728, 1), Range16), $clone(new Range16.ptr(2730, 2736, 1), Range16), $clone(new Range16.ptr(2738, 2739, 1), Range16), $clone(new Range16.ptr(2741, 2745, 1), Range16), $clone(new Range16.ptr(2749, 2768, 19), Range16), $clone(new Range16.ptr(2784, 2785, 1), Range16), $clone(new Range16.ptr(2809, 2821, 12), Range16), $clone(new Range16.ptr(2822, 2828, 1), Range16), $clone(new Range16.ptr(2831, 2832, 1), Range16), $clone(new Range16.ptr(2835, 2856, 1), Range16), $clone(new Range16.ptr(2858, 2864, 1), Range16), $clone(new Range16.ptr(2866, 2867, 1), Range16), $clone(new Range16.ptr(2869, 2873, 1), Range16), $clone(new Range16.ptr(2877, 2908, 31), Range16), $clone(new Range16.ptr(2909, 2911, 2), Range16), $clone(new Range16.ptr(2912, 2913, 1), Range16), $clone(new Range16.ptr(2929, 2947, 18), Range16), $clone(new Range16.ptr(2949, 2954, 1), Range16), $clone(new Range16.ptr(2958, 2960, 1), Range16), $clone(new Range16.ptr(2962, 2965, 1), Range16), $clone(new Range16.ptr(2969, 2970, 1), Range16), $clone(new Range16.ptr(2972, 2974, 2), Range16), $clone(new Range16.ptr(2975, 2979, 4), Range16), $clone(new Range16.ptr(2980, 2984, 4), Range16), $clone(new Range16.ptr(2985, 2986, 1), Range16), $clone(new Range16.ptr(2990, 3001, 1), Range16), $clone(new Range16.ptr(3024, 3077, 53), Range16), $clone(new Range16.ptr(3078, 3084, 1), Range16), $clone(new Range16.ptr(3086, 3088, 1), Range16), $clone(new Range16.ptr(3090, 3112, 1), Range16), $clone(new Range16.ptr(3114, 3129, 1), Range16), $clone(new Range16.ptr(3133, 3160, 27), Range16), $clone(new Range16.ptr(3161, 3162, 1), Range16), $clone(new Range16.ptr(3168, 3169, 1), Range16), $clone(new Range16.ptr(3200, 3205, 5), Range16), $clone(new Range16.ptr(3206, 3212, 1), Range16), $clone(new Range16.ptr(3214, 3216, 1), Range16), $clone(new Range16.ptr(3218, 3240, 1), Range16), $clone(new Range16.ptr(3242, 3251, 1), Range16), $clone(new Range16.ptr(3253, 3257, 1), Range16), $clone(new Range16.ptr(3261, 3294, 33), Range16), $clone(new Range16.ptr(3296, 3297, 1), Range16), $clone(new Range16.ptr(3313, 3314, 1), Range16), $clone(new Range16.ptr(3332, 3340, 1), Range16), $clone(new Range16.ptr(3342, 3344, 1), Range16), $clone(new Range16.ptr(3346, 3386, 1), Range16), $clone(new Range16.ptr(3389, 3406, 17), Range16), $clone(new Range16.ptr(3412, 3414, 1), Range16), $clone(new Range16.ptr(3423, 3425, 1), Range16), $clone(new Range16.ptr(3450, 3455, 1), Range16), $clone(new Range16.ptr(3461, 3478, 1), Range16), $clone(new Range16.ptr(3482, 3505, 1), Range16), $clone(new Range16.ptr(3507, 3515, 1), Range16), $clone(new Range16.ptr(3517, 3520, 3), Range16), $clone(new Range16.ptr(3521, 3526, 1), Range16), $clone(new Range16.ptr(3585, 3632, 1), Range16), $clone(new Range16.ptr(3634, 3635, 1), Range16), $clone(new Range16.ptr(3648, 3654, 1), Range16), $clone(new Range16.ptr(3713, 3714, 1), Range16), $clone(new Range16.ptr(3716, 3718, 2), Range16), $clone(new Range16.ptr(3719, 3722, 1), Range16), $clone(new Range16.ptr(3724, 3747, 1), Range16), $clone(new Range16.ptr(3749, 3751, 2), Range16), $clone(new Range16.ptr(3752, 3760, 1), Range16), $clone(new Range16.ptr(3762, 3763, 1), Range16), $clone(new Range16.ptr(3773, 3776, 3), Range16), $clone(new Range16.ptr(3777, 3780, 1), Range16), $clone(new Range16.ptr(3782, 3804, 22), Range16), $clone(new Range16.ptr(3805, 3807, 1), Range16), $clone(new Range16.ptr(3840, 3904, 64), Range16), $clone(new Range16.ptr(3905, 3911, 1), Range16), $clone(new Range16.ptr(3913, 3948, 1), Range16), $clone(new Range16.ptr(3976, 3980, 1), Range16), $clone(new Range16.ptr(4096, 4138, 1), Range16), $clone(new Range16.ptr(4159, 4176, 17), Range16), $clone(new Range16.ptr(4177, 4181, 1), Range16), $clone(new Range16.ptr(4186, 4189, 1), Range16), $clone(new Range16.ptr(4193, 4197, 4), Range16), $clone(new Range16.ptr(4198, 4206, 8), Range16), $clone(new Range16.ptr(4207, 4208, 1), Range16), $clone(new Range16.ptr(4213, 4225, 1), Range16), $clone(new Range16.ptr(4238, 4256, 18), Range16), $clone(new Range16.ptr(4257, 4293, 1), Range16), $clone(new Range16.ptr(4295, 4301, 6), Range16), $clone(new Range16.ptr(4304, 4346, 1), Range16), $clone(new Range16.ptr(4348, 4680, 1), Range16), $clone(new Range16.ptr(4682, 4685, 1), Range16), $clone(new Range16.ptr(4688, 4694, 1), Range16), $clone(new Range16.ptr(4696, 4698, 2), Range16), $clone(new Range16.ptr(4699, 4701, 1), Range16), $clone(new Range16.ptr(4704, 4744, 1), Range16), $clone(new Range16.ptr(4746, 4749, 1), Range16), $clone(new Range16.ptr(4752, 4784, 1), Range16), $clone(new Range16.ptr(4786, 4789, 1), Range16), $clone(new Range16.ptr(4792, 4798, 1), Range16), $clone(new Range16.ptr(4800, 4802, 2), Range16), $clone(new Range16.ptr(4803, 4805, 1), Range16), $clone(new Range16.ptr(4808, 4822, 1), Range16), $clone(new Range16.ptr(4824, 4880, 1), Range16), $clone(new Range16.ptr(4882, 4885, 1), Range16), $clone(new Range16.ptr(4888, 4954, 1), Range16), $clone(new Range16.ptr(4992, 5007, 1), Range16), $clone(new Range16.ptr(5024, 5109, 1), Range16), $clone(new Range16.ptr(5112, 5117, 1), Range16), $clone(new Range16.ptr(5121, 5740, 1), Range16), $clone(new Range16.ptr(5743, 5759, 1), Range16), $clone(new Range16.ptr(5761, 5786, 1), Range16), $clone(new Range16.ptr(5792, 5866, 1), Range16), $clone(new Range16.ptr(5873, 5880, 1), Range16), $clone(new Range16.ptr(5888, 5900, 1), Range16), $clone(new Range16.ptr(5902, 5905, 1), Range16), $clone(new Range16.ptr(5920, 5937, 1), Range16), $clone(new Range16.ptr(5952, 5969, 1), Range16), $clone(new Range16.ptr(5984, 5996, 1), Range16), $clone(new Range16.ptr(5998, 6000, 1), Range16), $clone(new Range16.ptr(6016, 6067, 1), Range16), $clone(new Range16.ptr(6103, 6108, 5), Range16), $clone(new Range16.ptr(6176, 6264, 1), Range16), $clone(new Range16.ptr(6272, 6276, 1), Range16), $clone(new Range16.ptr(6279, 6312, 1), Range16), $clone(new Range16.ptr(6314, 6320, 6), Range16), $clone(new Range16.ptr(6321, 6389, 1), Range16), $clone(new Range16.ptr(6400, 6430, 1), Range16), $clone(new Range16.ptr(6480, 6509, 1), Range16), $clone(new Range16.ptr(6512, 6516, 1), Range16), $clone(new Range16.ptr(6528, 6571, 1), Range16), $clone(new Range16.ptr(6576, 6601, 1), Range16), $clone(new Range16.ptr(6656, 6678, 1), Range16), $clone(new Range16.ptr(6688, 6740, 1), Range16), $clone(new Range16.ptr(6823, 6917, 94), Range16), $clone(new Range16.ptr(6918, 6963, 1), Range16), $clone(new Range16.ptr(6981, 6987, 1), Range16), $clone(new Range16.ptr(7043, 7072, 1), Range16), $clone(new Range16.ptr(7086, 7087, 1), Range16), $clone(new Range16.ptr(7098, 7141, 1), Range16), $clone(new Range16.ptr(7168, 7203, 1), Range16), $clone(new Range16.ptr(7245, 7247, 1), Range16), $clone(new Range16.ptr(7258, 7293, 1), Range16), $clone(new Range16.ptr(7296, 7304, 1), Range16), $clone(new Range16.ptr(7312, 7354, 1), Range16), $clone(new Range16.ptr(7357, 7359, 1), Range16), $clone(new Range16.ptr(7401, 7404, 1), Range16), $clone(new Range16.ptr(7406, 7411, 1), Range16), $clone(new Range16.ptr(7413, 7414, 1), Range16), $clone(new Range16.ptr(7418, 7424, 6), Range16), $clone(new Range16.ptr(7425, 7615, 1), Range16), $clone(new Range16.ptr(7680, 7957, 1), Range16), $clone(new Range16.ptr(7960, 7965, 1), Range16), $clone(new Range16.ptr(7968, 8005, 1), Range16), $clone(new Range16.ptr(8008, 8013, 1), Range16), $clone(new Range16.ptr(8016, 8023, 1), Range16), $clone(new Range16.ptr(8025, 8031, 2), Range16), $clone(new Range16.ptr(8032, 8061, 1), Range16), $clone(new Range16.ptr(8064, 8116, 1), Range16), $clone(new Range16.ptr(8118, 8124, 1), Range16), $clone(new Range16.ptr(8126, 8130, 4), Range16), $clone(new Range16.ptr(8131, 8132, 1), Range16), $clone(new Range16.ptr(8134, 8140, 1), Range16), $clone(new Range16.ptr(8144, 8147, 1), Range16), $clone(new Range16.ptr(8150, 8155, 1), Range16), $clone(new Range16.ptr(8160, 8172, 1), Range16), $clone(new Range16.ptr(8178, 8180, 1), Range16), $clone(new Range16.ptr(8182, 8188, 1), Range16), $clone(new Range16.ptr(8305, 8319, 14), Range16), $clone(new Range16.ptr(8336, 8348, 1), Range16), $clone(new Range16.ptr(8450, 8455, 5), Range16), $clone(new Range16.ptr(8458, 8467, 1), Range16), $clone(new Range16.ptr(8469, 8473, 4), Range16), $clone(new Range16.ptr(8474, 8477, 1), Range16), $clone(new Range16.ptr(8484, 8490, 2), Range16), $clone(new Range16.ptr(8491, 8493, 1), Range16), $clone(new Range16.ptr(8495, 8505, 1), Range16), $clone(new Range16.ptr(8508, 8511, 1), Range16), $clone(new Range16.ptr(8517, 8521, 1), Range16), $clone(new Range16.ptr(8526, 8579, 53), Range16), $clone(new Range16.ptr(8580, 11264, 2684), Range16), $clone(new Range16.ptr(11265, 11310, 1), Range16), $clone(new Range16.ptr(11312, 11358, 1), Range16), $clone(new Range16.ptr(11360, 11492, 1), Range16), $clone(new Range16.ptr(11499, 11502, 1), Range16), $clone(new Range16.ptr(11506, 11507, 1), Range16), $clone(new Range16.ptr(11520, 11557, 1), Range16), $clone(new Range16.ptr(11559, 11565, 6), Range16), $clone(new Range16.ptr(11568, 11623, 1), Range16), $clone(new Range16.ptr(11631, 11648, 17), Range16), $clone(new Range16.ptr(11649, 11670, 1), Range16), $clone(new Range16.ptr(11680, 11686, 1), Range16), $clone(new Range16.ptr(11688, 11694, 1), Range16), $clone(new Range16.ptr(11696, 11702, 1), Range16), $clone(new Range16.ptr(11704, 11710, 1), Range16), $clone(new Range16.ptr(11712, 11718, 1), Range16), $clone(new Range16.ptr(11720, 11726, 1), Range16), $clone(new Range16.ptr(11728, 11734, 1), Range16), $clone(new Range16.ptr(11736, 11742, 1), Range16), $clone(new Range16.ptr(11823, 12293, 470), Range16), $clone(new Range16.ptr(12294, 12337, 43), Range16), $clone(new Range16.ptr(12338, 12341, 1), Range16), $clone(new Range16.ptr(12347, 12348, 1), Range16), $clone(new Range16.ptr(12353, 12438, 1), Range16), $clone(new Range16.ptr(12445, 12447, 1), Range16), $clone(new Range16.ptr(12449, 12538, 1), Range16), $clone(new Range16.ptr(12540, 12543, 1), Range16), $clone(new Range16.ptr(12549, 12591, 1), Range16), $clone(new Range16.ptr(12593, 12686, 1), Range16), $clone(new Range16.ptr(12704, 12735, 1), Range16), $clone(new Range16.ptr(12784, 12799, 1), Range16), $clone(new Range16.ptr(13312, 19903, 1), Range16), $clone(new Range16.ptr(19968, 40956, 1), Range16), $clone(new Range16.ptr(40960, 42124, 1), Range16), $clone(new Range16.ptr(42192, 42237, 1), Range16), $clone(new Range16.ptr(42240, 42508, 1), Range16), $clone(new Range16.ptr(42512, 42527, 1), Range16), $clone(new Range16.ptr(42538, 42539, 1), Range16), $clone(new Range16.ptr(42560, 42606, 1), Range16), $clone(new Range16.ptr(42623, 42653, 1), Range16), $clone(new Range16.ptr(42656, 42725, 1), Range16), $clone(new Range16.ptr(42775, 42783, 1), Range16), $clone(new Range16.ptr(42786, 42888, 1), Range16), $clone(new Range16.ptr(42891, 42943, 1), Range16), $clone(new Range16.ptr(42946, 42954, 1), Range16), $clone(new Range16.ptr(42997, 43009, 1), Range16), $clone(new Range16.ptr(43011, 43013, 1), Range16), $clone(new Range16.ptr(43015, 43018, 1), Range16), $clone(new Range16.ptr(43020, 43042, 1), Range16), $clone(new Range16.ptr(43072, 43123, 1), Range16), $clone(new Range16.ptr(43138, 43187, 1), Range16), $clone(new Range16.ptr(43250, 43255, 1), Range16), $clone(new Range16.ptr(43259, 43261, 2), Range16), $clone(new Range16.ptr(43262, 43274, 12), Range16), $clone(new Range16.ptr(43275, 43301, 1), Range16), $clone(new Range16.ptr(43312, 43334, 1), Range16), $clone(new Range16.ptr(43360, 43388, 1), Range16), $clone(new Range16.ptr(43396, 43442, 1), Range16), $clone(new Range16.ptr(43471, 43488, 17), Range16), $clone(new Range16.ptr(43489, 43492, 1), Range16), $clone(new Range16.ptr(43494, 43503, 1), Range16), $clone(new Range16.ptr(43514, 43518, 1), Range16), $clone(new Range16.ptr(43520, 43560, 1), Range16), $clone(new Range16.ptr(43584, 43586, 1), Range16), $clone(new Range16.ptr(43588, 43595, 1), Range16), $clone(new Range16.ptr(43616, 43638, 1), Range16), $clone(new Range16.ptr(43642, 43646, 4), Range16), $clone(new Range16.ptr(43647, 43695, 1), Range16), $clone(new Range16.ptr(43697, 43701, 4), Range16), $clone(new Range16.ptr(43702, 43705, 3), Range16), $clone(new Range16.ptr(43706, 43709, 1), Range16), $clone(new Range16.ptr(43712, 43714, 2), Range16), $clone(new Range16.ptr(43739, 43741, 1), Range16), $clone(new Range16.ptr(43744, 43754, 1), Range16), $clone(new Range16.ptr(43762, 43764, 1), Range16), $clone(new Range16.ptr(43777, 43782, 1), Range16), $clone(new Range16.ptr(43785, 43790, 1), Range16), $clone(new Range16.ptr(43793, 43798, 1), Range16), $clone(new Range16.ptr(43808, 43814, 1), Range16), $clone(new Range16.ptr(43816, 43822, 1), Range16), $clone(new Range16.ptr(43824, 43866, 1), Range16), $clone(new Range16.ptr(43868, 43881, 1), Range16), $clone(new Range16.ptr(43888, 44002, 1), Range16), $clone(new Range16.ptr(44032, 55203, 1), Range16), $clone(new Range16.ptr(55216, 55238, 1), Range16), $clone(new Range16.ptr(55243, 55291, 1), Range16), $clone(new Range16.ptr(63744, 64109, 1), Range16), $clone(new Range16.ptr(64112, 64217, 1), Range16), $clone(new Range16.ptr(64256, 64262, 1), Range16), $clone(new Range16.ptr(64275, 64279, 1), Range16), $clone(new Range16.ptr(64285, 64287, 2), Range16), $clone(new Range16.ptr(64288, 64296, 1), Range16), $clone(new Range16.ptr(64298, 64310, 1), Range16), $clone(new Range16.ptr(64312, 64316, 1), Range16), $clone(new Range16.ptr(64318, 64320, 2), Range16), $clone(new Range16.ptr(64321, 64323, 2), Range16), $clone(new Range16.ptr(64324, 64326, 2), Range16), $clone(new Range16.ptr(64327, 64433, 1), Range16), $clone(new Range16.ptr(64467, 64829, 1), Range16), $clone(new Range16.ptr(64848, 64911, 1), Range16), $clone(new Range16.ptr(64914, 64967, 1), Range16), $clone(new Range16.ptr(65008, 65019, 1), Range16), $clone(new Range16.ptr(65136, 65140, 1), Range16), $clone(new Range16.ptr(65142, 65276, 1), Range16), $clone(new Range16.ptr(65313, 65338, 1), Range16), $clone(new Range16.ptr(65345, 65370, 1), Range16), $clone(new Range16.ptr(65382, 65470, 1), Range16), $clone(new Range16.ptr(65474, 65479, 1), Range16), $clone(new Range16.ptr(65482, 65487, 1), Range16), $clone(new Range16.ptr(65490, 65495, 1), Range16), $clone(new Range16.ptr(65498, 65500, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65536, 65547, 1), Range32), $clone(new Range32.ptr(65549, 65574, 1), Range32), $clone(new Range32.ptr(65576, 65594, 1), Range32), $clone(new Range32.ptr(65596, 65597, 1), Range32), $clone(new Range32.ptr(65599, 65613, 1), Range32), $clone(new Range32.ptr(65616, 65629, 1), Range32), $clone(new Range32.ptr(65664, 65786, 1), Range32), $clone(new Range32.ptr(66176, 66204, 1), Range32), $clone(new Range32.ptr(66208, 66256, 1), Range32), $clone(new Range32.ptr(66304, 66335, 1), Range32), $clone(new Range32.ptr(66349, 66368, 1), Range32), $clone(new Range32.ptr(66370, 66377, 1), Range32), $clone(new Range32.ptr(66384, 66421, 1), Range32), $clone(new Range32.ptr(66432, 66461, 1), Range32), $clone(new Range32.ptr(66464, 66499, 1), Range32), $clone(new Range32.ptr(66504, 66511, 1), Range32), $clone(new Range32.ptr(66560, 66717, 1), Range32), $clone(new Range32.ptr(66736, 66771, 1), Range32), $clone(new Range32.ptr(66776, 66811, 1), Range32), $clone(new Range32.ptr(66816, 66855, 1), Range32), $clone(new Range32.ptr(66864, 66915, 1), Range32), $clone(new Range32.ptr(67072, 67382, 1), Range32), $clone(new Range32.ptr(67392, 67413, 1), Range32), $clone(new Range32.ptr(67424, 67431, 1), Range32), $clone(new Range32.ptr(67584, 67589, 1), Range32), $clone(new Range32.ptr(67592, 67594, 2), Range32), $clone(new Range32.ptr(67595, 67637, 1), Range32), $clone(new Range32.ptr(67639, 67640, 1), Range32), $clone(new Range32.ptr(67644, 67647, 3), Range32), $clone(new Range32.ptr(67648, 67669, 1), Range32), $clone(new Range32.ptr(67680, 67702, 1), Range32), $clone(new Range32.ptr(67712, 67742, 1), Range32), $clone(new Range32.ptr(67808, 67826, 1), Range32), $clone(new Range32.ptr(67828, 67829, 1), Range32), $clone(new Range32.ptr(67840, 67861, 1), Range32), $clone(new Range32.ptr(67872, 67897, 1), Range32), $clone(new Range32.ptr(67968, 68023, 1), Range32), $clone(new Range32.ptr(68030, 68031, 1), Range32), $clone(new Range32.ptr(68096, 68112, 16), Range32), $clone(new Range32.ptr(68113, 68115, 1), Range32), $clone(new Range32.ptr(68117, 68119, 1), Range32), $clone(new Range32.ptr(68121, 68149, 1), Range32), $clone(new Range32.ptr(68192, 68220, 1), Range32), $clone(new Range32.ptr(68224, 68252, 1), Range32), $clone(new Range32.ptr(68288, 68295, 1), Range32), $clone(new Range32.ptr(68297, 68324, 1), Range32), $clone(new Range32.ptr(68352, 68405, 1), Range32), $clone(new Range32.ptr(68416, 68437, 1), Range32), $clone(new Range32.ptr(68448, 68466, 1), Range32), $clone(new Range32.ptr(68480, 68497, 1), Range32), $clone(new Range32.ptr(68608, 68680, 1), Range32), $clone(new Range32.ptr(68736, 68786, 1), Range32), $clone(new Range32.ptr(68800, 68850, 1), Range32), $clone(new Range32.ptr(68864, 68899, 1), Range32), $clone(new Range32.ptr(69248, 69289, 1), Range32), $clone(new Range32.ptr(69296, 69297, 1), Range32), $clone(new Range32.ptr(69376, 69404, 1), Range32), $clone(new Range32.ptr(69415, 69424, 9), Range32), $clone(new Range32.ptr(69425, 69445, 1), Range32), $clone(new Range32.ptr(69552, 69572, 1), Range32), $clone(new Range32.ptr(69600, 69622, 1), Range32), $clone(new Range32.ptr(69635, 69687, 1), Range32), $clone(new Range32.ptr(69763, 69807, 1), Range32), $clone(new Range32.ptr(69840, 69864, 1), Range32), $clone(new Range32.ptr(69891, 69926, 1), Range32), $clone(new Range32.ptr(69956, 69959, 3), Range32), $clone(new Range32.ptr(69968, 70002, 1), Range32), $clone(new Range32.ptr(70006, 70019, 13), Range32), $clone(new Range32.ptr(70020, 70066, 1), Range32), $clone(new Range32.ptr(70081, 70084, 1), Range32), $clone(new Range32.ptr(70106, 70108, 2), Range32), $clone(new Range32.ptr(70144, 70161, 1), Range32), $clone(new Range32.ptr(70163, 70187, 1), Range32), $clone(new Range32.ptr(70272, 70278, 1), Range32), $clone(new Range32.ptr(70280, 70282, 2), Range32), $clone(new Range32.ptr(70283, 70285, 1), Range32), $clone(new Range32.ptr(70287, 70301, 1), Range32), $clone(new Range32.ptr(70303, 70312, 1), Range32), $clone(new Range32.ptr(70320, 70366, 1), Range32), $clone(new Range32.ptr(70405, 70412, 1), Range32), $clone(new Range32.ptr(70415, 70416, 1), Range32), $clone(new Range32.ptr(70419, 70440, 1), Range32), $clone(new Range32.ptr(70442, 70448, 1), Range32), $clone(new Range32.ptr(70450, 70451, 1), Range32), $clone(new Range32.ptr(70453, 70457, 1), Range32), $clone(new Range32.ptr(70461, 70480, 19), Range32), $clone(new Range32.ptr(70493, 70497, 1), Range32), $clone(new Range32.ptr(70656, 70708, 1), Range32), $clone(new Range32.ptr(70727, 70730, 1), Range32), $clone(new Range32.ptr(70751, 70753, 1), Range32), $clone(new Range32.ptr(70784, 70831, 1), Range32), $clone(new Range32.ptr(70852, 70853, 1), Range32), $clone(new Range32.ptr(70855, 71040, 185), Range32), $clone(new Range32.ptr(71041, 71086, 1), Range32), $clone(new Range32.ptr(71128, 71131, 1), Range32), $clone(new Range32.ptr(71168, 71215, 1), Range32), $clone(new Range32.ptr(71236, 71296, 60), Range32), $clone(new Range32.ptr(71297, 71338, 1), Range32), $clone(new Range32.ptr(71352, 71424, 72), Range32), $clone(new Range32.ptr(71425, 71450, 1), Range32), $clone(new Range32.ptr(71680, 71723, 1), Range32), $clone(new Range32.ptr(71840, 71903, 1), Range32), $clone(new Range32.ptr(71935, 71942, 1), Range32), $clone(new Range32.ptr(71945, 71948, 3), Range32), $clone(new Range32.ptr(71949, 71955, 1), Range32), $clone(new Range32.ptr(71957, 71958, 1), Range32), $clone(new Range32.ptr(71960, 71983, 1), Range32), $clone(new Range32.ptr(71999, 72001, 2), Range32), $clone(new Range32.ptr(72096, 72103, 1), Range32), $clone(new Range32.ptr(72106, 72144, 1), Range32), $clone(new Range32.ptr(72161, 72163, 2), Range32), $clone(new Range32.ptr(72192, 72203, 11), Range32), $clone(new Range32.ptr(72204, 72242, 1), Range32), $clone(new Range32.ptr(72250, 72272, 22), Range32), $clone(new Range32.ptr(72284, 72329, 1), Range32), $clone(new Range32.ptr(72349, 72384, 35), Range32), $clone(new Range32.ptr(72385, 72440, 1), Range32), $clone(new Range32.ptr(72704, 72712, 1), Range32), $clone(new Range32.ptr(72714, 72750, 1), Range32), $clone(new Range32.ptr(72768, 72818, 50), Range32), $clone(new Range32.ptr(72819, 72847, 1), Range32), $clone(new Range32.ptr(72960, 72966, 1), Range32), $clone(new Range32.ptr(72968, 72969, 1), Range32), $clone(new Range32.ptr(72971, 73008, 1), Range32), $clone(new Range32.ptr(73030, 73056, 26), Range32), $clone(new Range32.ptr(73057, 73061, 1), Range32), $clone(new Range32.ptr(73063, 73064, 1), Range32), $clone(new Range32.ptr(73066, 73097, 1), Range32), $clone(new Range32.ptr(73112, 73440, 328), Range32), $clone(new Range32.ptr(73441, 73458, 1), Range32), $clone(new Range32.ptr(73648, 73728, 80), Range32), $clone(new Range32.ptr(73729, 74649, 1), Range32), $clone(new Range32.ptr(74880, 75075, 1), Range32), $clone(new Range32.ptr(77824, 78894, 1), Range32), $clone(new Range32.ptr(82944, 83526, 1), Range32), $clone(new Range32.ptr(92160, 92728, 1), Range32), $clone(new Range32.ptr(92736, 92766, 1), Range32), $clone(new Range32.ptr(92880, 92909, 1), Range32), $clone(new Range32.ptr(92928, 92975, 1), Range32), $clone(new Range32.ptr(92992, 92995, 1), Range32), $clone(new Range32.ptr(93027, 93047, 1), Range32), $clone(new Range32.ptr(93053, 93071, 1), Range32), $clone(new Range32.ptr(93760, 93823, 1), Range32), $clone(new Range32.ptr(93952, 94026, 1), Range32), $clone(new Range32.ptr(94032, 94099, 67), Range32), $clone(new Range32.ptr(94100, 94111, 1), Range32), $clone(new Range32.ptr(94176, 94177, 1), Range32), $clone(new Range32.ptr(94179, 94208, 29), Range32), $clone(new Range32.ptr(94209, 100343, 1), Range32), $clone(new Range32.ptr(100352, 101589, 1), Range32), $clone(new Range32.ptr(101632, 101640, 1), Range32), $clone(new Range32.ptr(110592, 110878, 1), Range32), $clone(new Range32.ptr(110928, 110930, 1), Range32), $clone(new Range32.ptr(110948, 110951, 1), Range32), $clone(new Range32.ptr(110960, 111355, 1), Range32), $clone(new Range32.ptr(113664, 113770, 1), Range32), $clone(new Range32.ptr(113776, 113788, 1), Range32), $clone(new Range32.ptr(113792, 113800, 1), Range32), $clone(new Range32.ptr(113808, 113817, 1), Range32), $clone(new Range32.ptr(119808, 119892, 1), Range32), $clone(new Range32.ptr(119894, 119964, 1), Range32), $clone(new Range32.ptr(119966, 119967, 1), Range32), $clone(new Range32.ptr(119970, 119973, 3), Range32), $clone(new Range32.ptr(119974, 119977, 3), Range32), $clone(new Range32.ptr(119978, 119980, 1), Range32), $clone(new Range32.ptr(119982, 119993, 1), Range32), $clone(new Range32.ptr(119995, 119997, 2), Range32), $clone(new Range32.ptr(119998, 120003, 1), Range32), $clone(new Range32.ptr(120005, 120069, 1), Range32), $clone(new Range32.ptr(120071, 120074, 1), Range32), $clone(new Range32.ptr(120077, 120084, 1), Range32), $clone(new Range32.ptr(120086, 120092, 1), Range32), $clone(new Range32.ptr(120094, 120121, 1), Range32), $clone(new Range32.ptr(120123, 120126, 1), Range32), $clone(new Range32.ptr(120128, 120132, 1), Range32), $clone(new Range32.ptr(120134, 120138, 4), Range32), $clone(new Range32.ptr(120139, 120144, 1), Range32), $clone(new Range32.ptr(120146, 120485, 1), Range32), $clone(new Range32.ptr(120488, 120512, 1), Range32), $clone(new Range32.ptr(120514, 120538, 1), Range32), $clone(new Range32.ptr(120540, 120570, 1), Range32), $clone(new Range32.ptr(120572, 120596, 1), Range32), $clone(new Range32.ptr(120598, 120628, 1), Range32), $clone(new Range32.ptr(120630, 120654, 1), Range32), $clone(new Range32.ptr(120656, 120686, 1), Range32), $clone(new Range32.ptr(120688, 120712, 1), Range32), $clone(new Range32.ptr(120714, 120744, 1), Range32), $clone(new Range32.ptr(120746, 120770, 1), Range32), $clone(new Range32.ptr(120772, 120779, 1), Range32), $clone(new Range32.ptr(123136, 123180, 1), Range32), $clone(new Range32.ptr(123191, 123197, 1), Range32), $clone(new Range32.ptr(123214, 123584, 370), Range32), $clone(new Range32.ptr(123585, 123627, 1), Range32), $clone(new Range32.ptr(124928, 125124, 1), Range32), $clone(new Range32.ptr(125184, 125251, 1), Range32), $clone(new Range32.ptr(125259, 126464, 1205), Range32), $clone(new Range32.ptr(126465, 126467, 1), Range32), $clone(new Range32.ptr(126469, 126495, 1), Range32), $clone(new Range32.ptr(126497, 126498, 1), Range32), $clone(new Range32.ptr(126500, 126503, 3), Range32), $clone(new Range32.ptr(126505, 126514, 1), Range32), $clone(new Range32.ptr(126516, 126519, 1), Range32), $clone(new Range32.ptr(126521, 126523, 2), Range32), $clone(new Range32.ptr(126530, 126535, 5), Range32), $clone(new Range32.ptr(126537, 126541, 2), Range32), $clone(new Range32.ptr(126542, 126543, 1), Range32), $clone(new Range32.ptr(126545, 126546, 1), Range32), $clone(new Range32.ptr(126548, 126551, 3), Range32), $clone(new Range32.ptr(126553, 126561, 2), Range32), $clone(new Range32.ptr(126562, 126564, 2), Range32), $clone(new Range32.ptr(126567, 126570, 1), Range32), $clone(new Range32.ptr(126572, 126578, 1), Range32), $clone(new Range32.ptr(126580, 126583, 1), Range32), $clone(new Range32.ptr(126585, 126588, 1), Range32), $clone(new Range32.ptr(126590, 126592, 2), Range32), $clone(new Range32.ptr(126593, 126601, 1), Range32), $clone(new Range32.ptr(126603, 126619, 1), Range32), $clone(new Range32.ptr(126625, 126627, 1), Range32), $clone(new Range32.ptr(126629, 126633, 1), Range32), $clone(new Range32.ptr(126635, 126651, 1), Range32), $clone(new Range32.ptr(131072, 173789, 1), Range32), $clone(new Range32.ptr(173824, 177972, 1), Range32), $clone(new Range32.ptr(177984, 178205, 1), Range32), $clone(new Range32.ptr(178208, 183969, 1), Range32), $clone(new Range32.ptr(183984, 191456, 1), Range32), $clone(new Range32.ptr(194560, 195101, 1), Range32), $clone(new Range32.ptr(196608, 201546, 1), Range32)]), 6);
		_Ll = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(97, 122, 1), Range16), $clone(new Range16.ptr(181, 223, 42), Range16), $clone(new Range16.ptr(224, 246, 1), Range16), $clone(new Range16.ptr(248, 255, 1), Range16), $clone(new Range16.ptr(257, 311, 2), Range16), $clone(new Range16.ptr(312, 328, 2), Range16), $clone(new Range16.ptr(329, 375, 2), Range16), $clone(new Range16.ptr(378, 382, 2), Range16), $clone(new Range16.ptr(383, 384, 1), Range16), $clone(new Range16.ptr(387, 389, 2), Range16), $clone(new Range16.ptr(392, 396, 4), Range16), $clone(new Range16.ptr(397, 402, 5), Range16), $clone(new Range16.ptr(405, 409, 4), Range16), $clone(new Range16.ptr(410, 411, 1), Range16), $clone(new Range16.ptr(414, 417, 3), Range16), $clone(new Range16.ptr(419, 421, 2), Range16), $clone(new Range16.ptr(424, 426, 2), Range16), $clone(new Range16.ptr(427, 429, 2), Range16), $clone(new Range16.ptr(432, 436, 4), Range16), $clone(new Range16.ptr(438, 441, 3), Range16), $clone(new Range16.ptr(442, 445, 3), Range16), $clone(new Range16.ptr(446, 447, 1), Range16), $clone(new Range16.ptr(454, 460, 3), Range16), $clone(new Range16.ptr(462, 476, 2), Range16), $clone(new Range16.ptr(477, 495, 2), Range16), $clone(new Range16.ptr(496, 499, 3), Range16), $clone(new Range16.ptr(501, 505, 4), Range16), $clone(new Range16.ptr(507, 563, 2), Range16), $clone(new Range16.ptr(564, 569, 1), Range16), $clone(new Range16.ptr(572, 575, 3), Range16), $clone(new Range16.ptr(576, 578, 2), Range16), $clone(new Range16.ptr(583, 591, 2), Range16), $clone(new Range16.ptr(592, 659, 1), Range16), $clone(new Range16.ptr(661, 687, 1), Range16), $clone(new Range16.ptr(881, 883, 2), Range16), $clone(new Range16.ptr(887, 891, 4), Range16), $clone(new Range16.ptr(892, 893, 1), Range16), $clone(new Range16.ptr(912, 940, 28), Range16), $clone(new Range16.ptr(941, 974, 1), Range16), $clone(new Range16.ptr(976, 977, 1), Range16), $clone(new Range16.ptr(981, 983, 1), Range16), $clone(new Range16.ptr(985, 1007, 2), Range16), $clone(new Range16.ptr(1008, 1011, 1), Range16), $clone(new Range16.ptr(1013, 1019, 3), Range16), $clone(new Range16.ptr(1020, 1072, 52), Range16), $clone(new Range16.ptr(1073, 1119, 1), Range16), $clone(new Range16.ptr(1121, 1153, 2), Range16), $clone(new Range16.ptr(1163, 1215, 2), Range16), $clone(new Range16.ptr(1218, 1230, 2), Range16), $clone(new Range16.ptr(1231, 1327, 2), Range16), $clone(new Range16.ptr(1376, 1416, 1), Range16), $clone(new Range16.ptr(4304, 4346, 1), Range16), $clone(new Range16.ptr(4349, 4351, 1), Range16), $clone(new Range16.ptr(5112, 5117, 1), Range16), $clone(new Range16.ptr(7296, 7304, 1), Range16), $clone(new Range16.ptr(7424, 7467, 1), Range16), $clone(new Range16.ptr(7531, 7543, 1), Range16), $clone(new Range16.ptr(7545, 7578, 1), Range16), $clone(new Range16.ptr(7681, 7829, 2), Range16), $clone(new Range16.ptr(7830, 7837, 1), Range16), $clone(new Range16.ptr(7839, 7935, 2), Range16), $clone(new Range16.ptr(7936, 7943, 1), Range16), $clone(new Range16.ptr(7952, 7957, 1), Range16), $clone(new Range16.ptr(7968, 7975, 1), Range16), $clone(new Range16.ptr(7984, 7991, 1), Range16), $clone(new Range16.ptr(8000, 8005, 1), Range16), $clone(new Range16.ptr(8016, 8023, 1), Range16), $clone(new Range16.ptr(8032, 8039, 1), Range16), $clone(new Range16.ptr(8048, 8061, 1), Range16), $clone(new Range16.ptr(8064, 8071, 1), Range16), $clone(new Range16.ptr(8080, 8087, 1), Range16), $clone(new Range16.ptr(8096, 8103, 1), Range16), $clone(new Range16.ptr(8112, 8116, 1), Range16), $clone(new Range16.ptr(8118, 8119, 1), Range16), $clone(new Range16.ptr(8126, 8130, 4), Range16), $clone(new Range16.ptr(8131, 8132, 1), Range16), $clone(new Range16.ptr(8134, 8135, 1), Range16), $clone(new Range16.ptr(8144, 8147, 1), Range16), $clone(new Range16.ptr(8150, 8151, 1), Range16), $clone(new Range16.ptr(8160, 8167, 1), Range16), $clone(new Range16.ptr(8178, 8180, 1), Range16), $clone(new Range16.ptr(8182, 8183, 1), Range16), $clone(new Range16.ptr(8458, 8462, 4), Range16), $clone(new Range16.ptr(8463, 8467, 4), Range16), $clone(new Range16.ptr(8495, 8505, 5), Range16), $clone(new Range16.ptr(8508, 8509, 1), Range16), $clone(new Range16.ptr(8518, 8521, 1), Range16), $clone(new Range16.ptr(8526, 8580, 54), Range16), $clone(new Range16.ptr(11312, 11358, 1), Range16), $clone(new Range16.ptr(11361, 11365, 4), Range16), $clone(new Range16.ptr(11366, 11372, 2), Range16), $clone(new Range16.ptr(11377, 11379, 2), Range16), $clone(new Range16.ptr(11380, 11382, 2), Range16), $clone(new Range16.ptr(11383, 11387, 1), Range16), $clone(new Range16.ptr(11393, 11491, 2), Range16), $clone(new Range16.ptr(11492, 11500, 8), Range16), $clone(new Range16.ptr(11502, 11507, 5), Range16), $clone(new Range16.ptr(11520, 11557, 1), Range16), $clone(new Range16.ptr(11559, 11565, 6), Range16), $clone(new Range16.ptr(42561, 42605, 2), Range16), $clone(new Range16.ptr(42625, 42651, 2), Range16), $clone(new Range16.ptr(42787, 42799, 2), Range16), $clone(new Range16.ptr(42800, 42801, 1), Range16), $clone(new Range16.ptr(42803, 42865, 2), Range16), $clone(new Range16.ptr(42866, 42872, 1), Range16), $clone(new Range16.ptr(42874, 42876, 2), Range16), $clone(new Range16.ptr(42879, 42887, 2), Range16), $clone(new Range16.ptr(42892, 42894, 2), Range16), $clone(new Range16.ptr(42897, 42899, 2), Range16), $clone(new Range16.ptr(42900, 42901, 1), Range16), $clone(new Range16.ptr(42903, 42921, 2), Range16), $clone(new Range16.ptr(42927, 42933, 6), Range16), $clone(new Range16.ptr(42935, 42943, 2), Range16), $clone(new Range16.ptr(42947, 42952, 5), Range16), $clone(new Range16.ptr(42954, 42998, 44), Range16), $clone(new Range16.ptr(43002, 43824, 822), Range16), $clone(new Range16.ptr(43825, 43866, 1), Range16), $clone(new Range16.ptr(43872, 43880, 1), Range16), $clone(new Range16.ptr(43888, 43967, 1), Range16), $clone(new Range16.ptr(64256, 64262, 1), Range16), $clone(new Range16.ptr(64275, 64279, 1), Range16), $clone(new Range16.ptr(65345, 65370, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66600, 66639, 1), Range32), $clone(new Range32.ptr(66776, 66811, 1), Range32), $clone(new Range32.ptr(68800, 68850, 1), Range32), $clone(new Range32.ptr(71872, 71903, 1), Range32), $clone(new Range32.ptr(93792, 93823, 1), Range32), $clone(new Range32.ptr(119834, 119859, 1), Range32), $clone(new Range32.ptr(119886, 119892, 1), Range32), $clone(new Range32.ptr(119894, 119911, 1), Range32), $clone(new Range32.ptr(119938, 119963, 1), Range32), $clone(new Range32.ptr(119990, 119993, 1), Range32), $clone(new Range32.ptr(119995, 119997, 2), Range32), $clone(new Range32.ptr(119998, 120003, 1), Range32), $clone(new Range32.ptr(120005, 120015, 1), Range32), $clone(new Range32.ptr(120042, 120067, 1), Range32), $clone(new Range32.ptr(120094, 120119, 1), Range32), $clone(new Range32.ptr(120146, 120171, 1), Range32), $clone(new Range32.ptr(120198, 120223, 1), Range32), $clone(new Range32.ptr(120250, 120275, 1), Range32), $clone(new Range32.ptr(120302, 120327, 1), Range32), $clone(new Range32.ptr(120354, 120379, 1), Range32), $clone(new Range32.ptr(120406, 120431, 1), Range32), $clone(new Range32.ptr(120458, 120485, 1), Range32), $clone(new Range32.ptr(120514, 120538, 1), Range32), $clone(new Range32.ptr(120540, 120545, 1), Range32), $clone(new Range32.ptr(120572, 120596, 1), Range32), $clone(new Range32.ptr(120598, 120603, 1), Range32), $clone(new Range32.ptr(120630, 120654, 1), Range32), $clone(new Range32.ptr(120656, 120661, 1), Range32), $clone(new Range32.ptr(120688, 120712, 1), Range32), $clone(new Range32.ptr(120714, 120719, 1), Range32), $clone(new Range32.ptr(120746, 120770, 1), Range32), $clone(new Range32.ptr(120772, 120777, 1), Range32), $clone(new Range32.ptr(120779, 125218, 4439), Range32), $clone(new Range32.ptr(125219, 125251, 1), Range32)]), 4);
		_Lm = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(688, 705, 1), Range16), $clone(new Range16.ptr(710, 721, 1), Range16), $clone(new Range16.ptr(736, 740, 1), Range16), $clone(new Range16.ptr(748, 750, 2), Range16), $clone(new Range16.ptr(884, 890, 6), Range16), $clone(new Range16.ptr(1369, 1600, 231), Range16), $clone(new Range16.ptr(1765, 1766, 1), Range16), $clone(new Range16.ptr(2036, 2037, 1), Range16), $clone(new Range16.ptr(2042, 2074, 32), Range16), $clone(new Range16.ptr(2084, 2088, 4), Range16), $clone(new Range16.ptr(2417, 3654, 1237), Range16), $clone(new Range16.ptr(3782, 4348, 566), Range16), $clone(new Range16.ptr(6103, 6211, 108), Range16), $clone(new Range16.ptr(6823, 7288, 465), Range16), $clone(new Range16.ptr(7289, 7293, 1), Range16), $clone(new Range16.ptr(7468, 7530, 1), Range16), $clone(new Range16.ptr(7544, 7579, 35), Range16), $clone(new Range16.ptr(7580, 7615, 1), Range16), $clone(new Range16.ptr(8305, 8319, 14), Range16), $clone(new Range16.ptr(8336, 8348, 1), Range16), $clone(new Range16.ptr(11388, 11389, 1), Range16), $clone(new Range16.ptr(11631, 11823, 192), Range16), $clone(new Range16.ptr(12293, 12337, 44), Range16), $clone(new Range16.ptr(12338, 12341, 1), Range16), $clone(new Range16.ptr(12347, 12445, 98), Range16), $clone(new Range16.ptr(12446, 12540, 94), Range16), $clone(new Range16.ptr(12541, 12542, 1), Range16), $clone(new Range16.ptr(40981, 42232, 1251), Range16), $clone(new Range16.ptr(42233, 42237, 1), Range16), $clone(new Range16.ptr(42508, 42623, 115), Range16), $clone(new Range16.ptr(42652, 42653, 1), Range16), $clone(new Range16.ptr(42775, 42783, 1), Range16), $clone(new Range16.ptr(42864, 42888, 24), Range16), $clone(new Range16.ptr(43000, 43001, 1), Range16), $clone(new Range16.ptr(43471, 43494, 23), Range16), $clone(new Range16.ptr(43632, 43741, 109), Range16), $clone(new Range16.ptr(43763, 43764, 1), Range16), $clone(new Range16.ptr(43868, 43871, 1), Range16), $clone(new Range16.ptr(43881, 65392, 21511), Range16), $clone(new Range16.ptr(65438, 65439, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(92992, 92995, 1), Range32), $clone(new Range32.ptr(94099, 94111, 1), Range32), $clone(new Range32.ptr(94176, 94177, 1), Range32), $clone(new Range32.ptr(94179, 123191, 29012), Range32), $clone(new Range32.ptr(123192, 123197, 1), Range32), $clone(new Range32.ptr(125259, 125259, 1), Range32)]), 0);
		_Lo = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(170, 186, 16), Range16), $clone(new Range16.ptr(443, 448, 5), Range16), $clone(new Range16.ptr(449, 451, 1), Range16), $clone(new Range16.ptr(660, 1488, 828), Range16), $clone(new Range16.ptr(1489, 1514, 1), Range16), $clone(new Range16.ptr(1519, 1522, 1), Range16), $clone(new Range16.ptr(1568, 1599, 1), Range16), $clone(new Range16.ptr(1601, 1610, 1), Range16), $clone(new Range16.ptr(1646, 1647, 1), Range16), $clone(new Range16.ptr(1649, 1747, 1), Range16), $clone(new Range16.ptr(1749, 1774, 25), Range16), $clone(new Range16.ptr(1775, 1786, 11), Range16), $clone(new Range16.ptr(1787, 1788, 1), Range16), $clone(new Range16.ptr(1791, 1808, 17), Range16), $clone(new Range16.ptr(1810, 1839, 1), Range16), $clone(new Range16.ptr(1869, 1957, 1), Range16), $clone(new Range16.ptr(1969, 1994, 25), Range16), $clone(new Range16.ptr(1995, 2026, 1), Range16), $clone(new Range16.ptr(2048, 2069, 1), Range16), $clone(new Range16.ptr(2112, 2136, 1), Range16), $clone(new Range16.ptr(2144, 2154, 1), Range16), $clone(new Range16.ptr(2208, 2228, 1), Range16), $clone(new Range16.ptr(2230, 2247, 1), Range16), $clone(new Range16.ptr(2308, 2361, 1), Range16), $clone(new Range16.ptr(2365, 2384, 19), Range16), $clone(new Range16.ptr(2392, 2401, 1), Range16), $clone(new Range16.ptr(2418, 2432, 1), Range16), $clone(new Range16.ptr(2437, 2444, 1), Range16), $clone(new Range16.ptr(2447, 2448, 1), Range16), $clone(new Range16.ptr(2451, 2472, 1), Range16), $clone(new Range16.ptr(2474, 2480, 1), Range16), $clone(new Range16.ptr(2482, 2486, 4), Range16), $clone(new Range16.ptr(2487, 2489, 1), Range16), $clone(new Range16.ptr(2493, 2510, 17), Range16), $clone(new Range16.ptr(2524, 2525, 1), Range16), $clone(new Range16.ptr(2527, 2529, 1), Range16), $clone(new Range16.ptr(2544, 2545, 1), Range16), $clone(new Range16.ptr(2556, 2565, 9), Range16), $clone(new Range16.ptr(2566, 2570, 1), Range16), $clone(new Range16.ptr(2575, 2576, 1), Range16), $clone(new Range16.ptr(2579, 2600, 1), Range16), $clone(new Range16.ptr(2602, 2608, 1), Range16), $clone(new Range16.ptr(2610, 2611, 1), Range16), $clone(new Range16.ptr(2613, 2614, 1), Range16), $clone(new Range16.ptr(2616, 2617, 1), Range16), $clone(new Range16.ptr(2649, 2652, 1), Range16), $clone(new Range16.ptr(2654, 2674, 20), Range16), $clone(new Range16.ptr(2675, 2676, 1), Range16), $clone(new Range16.ptr(2693, 2701, 1), Range16), $clone(new Range16.ptr(2703, 2705, 1), Range16), $clone(new Range16.ptr(2707, 2728, 1), Range16), $clone(new Range16.ptr(2730, 2736, 1), Range16), $clone(new Range16.ptr(2738, 2739, 1), Range16), $clone(new Range16.ptr(2741, 2745, 1), Range16), $clone(new Range16.ptr(2749, 2768, 19), Range16), $clone(new Range16.ptr(2784, 2785, 1), Range16), $clone(new Range16.ptr(2809, 2821, 12), Range16), $clone(new Range16.ptr(2822, 2828, 1), Range16), $clone(new Range16.ptr(2831, 2832, 1), Range16), $clone(new Range16.ptr(2835, 2856, 1), Range16), $clone(new Range16.ptr(2858, 2864, 1), Range16), $clone(new Range16.ptr(2866, 2867, 1), Range16), $clone(new Range16.ptr(2869, 2873, 1), Range16), $clone(new Range16.ptr(2877, 2908, 31), Range16), $clone(new Range16.ptr(2909, 2911, 2), Range16), $clone(new Range16.ptr(2912, 2913, 1), Range16), $clone(new Range16.ptr(2929, 2947, 18), Range16), $clone(new Range16.ptr(2949, 2954, 1), Range16), $clone(new Range16.ptr(2958, 2960, 1), Range16), $clone(new Range16.ptr(2962, 2965, 1), Range16), $clone(new Range16.ptr(2969, 2970, 1), Range16), $clone(new Range16.ptr(2972, 2974, 2), Range16), $clone(new Range16.ptr(2975, 2979, 4), Range16), $clone(new Range16.ptr(2980, 2984, 4), Range16), $clone(new Range16.ptr(2985, 2986, 1), Range16), $clone(new Range16.ptr(2990, 3001, 1), Range16), $clone(new Range16.ptr(3024, 3077, 53), Range16), $clone(new Range16.ptr(3078, 3084, 1), Range16), $clone(new Range16.ptr(3086, 3088, 1), Range16), $clone(new Range16.ptr(3090, 3112, 1), Range16), $clone(new Range16.ptr(3114, 3129, 1), Range16), $clone(new Range16.ptr(3133, 3160, 27), Range16), $clone(new Range16.ptr(3161, 3162, 1), Range16), $clone(new Range16.ptr(3168, 3169, 1), Range16), $clone(new Range16.ptr(3200, 3205, 5), Range16), $clone(new Range16.ptr(3206, 3212, 1), Range16), $clone(new Range16.ptr(3214, 3216, 1), Range16), $clone(new Range16.ptr(3218, 3240, 1), Range16), $clone(new Range16.ptr(3242, 3251, 1), Range16), $clone(new Range16.ptr(3253, 3257, 1), Range16), $clone(new Range16.ptr(3261, 3294, 33), Range16), $clone(new Range16.ptr(3296, 3297, 1), Range16), $clone(new Range16.ptr(3313, 3314, 1), Range16), $clone(new Range16.ptr(3332, 3340, 1), Range16), $clone(new Range16.ptr(3342, 3344, 1), Range16), $clone(new Range16.ptr(3346, 3386, 1), Range16), $clone(new Range16.ptr(3389, 3406, 17), Range16), $clone(new Range16.ptr(3412, 3414, 1), Range16), $clone(new Range16.ptr(3423, 3425, 1), Range16), $clone(new Range16.ptr(3450, 3455, 1), Range16), $clone(new Range16.ptr(3461, 3478, 1), Range16), $clone(new Range16.ptr(3482, 3505, 1), Range16), $clone(new Range16.ptr(3507, 3515, 1), Range16), $clone(new Range16.ptr(3517, 3520, 3), Range16), $clone(new Range16.ptr(3521, 3526, 1), Range16), $clone(new Range16.ptr(3585, 3632, 1), Range16), $clone(new Range16.ptr(3634, 3635, 1), Range16), $clone(new Range16.ptr(3648, 3653, 1), Range16), $clone(new Range16.ptr(3713, 3714, 1), Range16), $clone(new Range16.ptr(3716, 3718, 2), Range16), $clone(new Range16.ptr(3719, 3722, 1), Range16), $clone(new Range16.ptr(3724, 3747, 1), Range16), $clone(new Range16.ptr(3749, 3751, 2), Range16), $clone(new Range16.ptr(3752, 3760, 1), Range16), $clone(new Range16.ptr(3762, 3763, 1), Range16), $clone(new Range16.ptr(3773, 3776, 3), Range16), $clone(new Range16.ptr(3777, 3780, 1), Range16), $clone(new Range16.ptr(3804, 3807, 1), Range16), $clone(new Range16.ptr(3840, 3904, 64), Range16), $clone(new Range16.ptr(3905, 3911, 1), Range16), $clone(new Range16.ptr(3913, 3948, 1), Range16), $clone(new Range16.ptr(3976, 3980, 1), Range16), $clone(new Range16.ptr(4096, 4138, 1), Range16), $clone(new Range16.ptr(4159, 4176, 17), Range16), $clone(new Range16.ptr(4177, 4181, 1), Range16), $clone(new Range16.ptr(4186, 4189, 1), Range16), $clone(new Range16.ptr(4193, 4197, 4), Range16), $clone(new Range16.ptr(4198, 4206, 8), Range16), $clone(new Range16.ptr(4207, 4208, 1), Range16), $clone(new Range16.ptr(4213, 4225, 1), Range16), $clone(new Range16.ptr(4238, 4352, 114), Range16), $clone(new Range16.ptr(4353, 4680, 1), Range16), $clone(new Range16.ptr(4682, 4685, 1), Range16), $clone(new Range16.ptr(4688, 4694, 1), Range16), $clone(new Range16.ptr(4696, 4698, 2), Range16), $clone(new Range16.ptr(4699, 4701, 1), Range16), $clone(new Range16.ptr(4704, 4744, 1), Range16), $clone(new Range16.ptr(4746, 4749, 1), Range16), $clone(new Range16.ptr(4752, 4784, 1), Range16), $clone(new Range16.ptr(4786, 4789, 1), Range16), $clone(new Range16.ptr(4792, 4798, 1), Range16), $clone(new Range16.ptr(4800, 4802, 2), Range16), $clone(new Range16.ptr(4803, 4805, 1), Range16), $clone(new Range16.ptr(4808, 4822, 1), Range16), $clone(new Range16.ptr(4824, 4880, 1), Range16), $clone(new Range16.ptr(4882, 4885, 1), Range16), $clone(new Range16.ptr(4888, 4954, 1), Range16), $clone(new Range16.ptr(4992, 5007, 1), Range16), $clone(new Range16.ptr(5121, 5740, 1), Range16), $clone(new Range16.ptr(5743, 5759, 1), Range16), $clone(new Range16.ptr(5761, 5786, 1), Range16), $clone(new Range16.ptr(5792, 5866, 1), Range16), $clone(new Range16.ptr(5873, 5880, 1), Range16), $clone(new Range16.ptr(5888, 5900, 1), Range16), $clone(new Range16.ptr(5902, 5905, 1), Range16), $clone(new Range16.ptr(5920, 5937, 1), Range16), $clone(new Range16.ptr(5952, 5969, 1), Range16), $clone(new Range16.ptr(5984, 5996, 1), Range16), $clone(new Range16.ptr(5998, 6000, 1), Range16), $clone(new Range16.ptr(6016, 6067, 1), Range16), $clone(new Range16.ptr(6108, 6176, 68), Range16), $clone(new Range16.ptr(6177, 6210, 1), Range16), $clone(new Range16.ptr(6212, 6264, 1), Range16), $clone(new Range16.ptr(6272, 6276, 1), Range16), $clone(new Range16.ptr(6279, 6312, 1), Range16), $clone(new Range16.ptr(6314, 6320, 6), Range16), $clone(new Range16.ptr(6321, 6389, 1), Range16), $clone(new Range16.ptr(6400, 6430, 1), Range16), $clone(new Range16.ptr(6480, 6509, 1), Range16), $clone(new Range16.ptr(6512, 6516, 1), Range16), $clone(new Range16.ptr(6528, 6571, 1), Range16), $clone(new Range16.ptr(6576, 6601, 1), Range16), $clone(new Range16.ptr(6656, 6678, 1), Range16), $clone(new Range16.ptr(6688, 6740, 1), Range16), $clone(new Range16.ptr(6917, 6963, 1), Range16), $clone(new Range16.ptr(6981, 6987, 1), Range16), $clone(new Range16.ptr(7043, 7072, 1), Range16), $clone(new Range16.ptr(7086, 7087, 1), Range16), $clone(new Range16.ptr(7098, 7141, 1), Range16), $clone(new Range16.ptr(7168, 7203, 1), Range16), $clone(new Range16.ptr(7245, 7247, 1), Range16), $clone(new Range16.ptr(7258, 7287, 1), Range16), $clone(new Range16.ptr(7401, 7404, 1), Range16), $clone(new Range16.ptr(7406, 7411, 1), Range16), $clone(new Range16.ptr(7413, 7414, 1), Range16), $clone(new Range16.ptr(7418, 8501, 1083), Range16), $clone(new Range16.ptr(8502, 8504, 1), Range16), $clone(new Range16.ptr(11568, 11623, 1), Range16), $clone(new Range16.ptr(11648, 11670, 1), Range16), $clone(new Range16.ptr(11680, 11686, 1), Range16), $clone(new Range16.ptr(11688, 11694, 1), Range16), $clone(new Range16.ptr(11696, 11702, 1), Range16), $clone(new Range16.ptr(11704, 11710, 1), Range16), $clone(new Range16.ptr(11712, 11718, 1), Range16), $clone(new Range16.ptr(11720, 11726, 1), Range16), $clone(new Range16.ptr(11728, 11734, 1), Range16), $clone(new Range16.ptr(11736, 11742, 1), Range16), $clone(new Range16.ptr(12294, 12348, 54), Range16), $clone(new Range16.ptr(12353, 12438, 1), Range16), $clone(new Range16.ptr(12447, 12449, 2), Range16), $clone(new Range16.ptr(12450, 12538, 1), Range16), $clone(new Range16.ptr(12543, 12549, 6), Range16), $clone(new Range16.ptr(12550, 12591, 1), Range16), $clone(new Range16.ptr(12593, 12686, 1), Range16), $clone(new Range16.ptr(12704, 12735, 1), Range16), $clone(new Range16.ptr(12784, 12799, 1), Range16), $clone(new Range16.ptr(13312, 19903, 1), Range16), $clone(new Range16.ptr(19968, 40956, 1), Range16), $clone(new Range16.ptr(40960, 40980, 1), Range16), $clone(new Range16.ptr(40982, 42124, 1), Range16), $clone(new Range16.ptr(42192, 42231, 1), Range16), $clone(new Range16.ptr(42240, 42507, 1), Range16), $clone(new Range16.ptr(42512, 42527, 1), Range16), $clone(new Range16.ptr(42538, 42539, 1), Range16), $clone(new Range16.ptr(42606, 42656, 50), Range16), $clone(new Range16.ptr(42657, 42725, 1), Range16), $clone(new Range16.ptr(42895, 42999, 104), Range16), $clone(new Range16.ptr(43003, 43009, 1), Range16), $clone(new Range16.ptr(43011, 43013, 1), Range16), $clone(new Range16.ptr(43015, 43018, 1), Range16), $clone(new Range16.ptr(43020, 43042, 1), Range16), $clone(new Range16.ptr(43072, 43123, 1), Range16), $clone(new Range16.ptr(43138, 43187, 1), Range16), $clone(new Range16.ptr(43250, 43255, 1), Range16), $clone(new Range16.ptr(43259, 43261, 2), Range16), $clone(new Range16.ptr(43262, 43274, 12), Range16), $clone(new Range16.ptr(43275, 43301, 1), Range16), $clone(new Range16.ptr(43312, 43334, 1), Range16), $clone(new Range16.ptr(43360, 43388, 1), Range16), $clone(new Range16.ptr(43396, 43442, 1), Range16), $clone(new Range16.ptr(43488, 43492, 1), Range16), $clone(new Range16.ptr(43495, 43503, 1), Range16), $clone(new Range16.ptr(43514, 43518, 1), Range16), $clone(new Range16.ptr(43520, 43560, 1), Range16), $clone(new Range16.ptr(43584, 43586, 1), Range16), $clone(new Range16.ptr(43588, 43595, 1), Range16), $clone(new Range16.ptr(43616, 43631, 1), Range16), $clone(new Range16.ptr(43633, 43638, 1), Range16), $clone(new Range16.ptr(43642, 43646, 4), Range16), $clone(new Range16.ptr(43647, 43695, 1), Range16), $clone(new Range16.ptr(43697, 43701, 4), Range16), $clone(new Range16.ptr(43702, 43705, 3), Range16), $clone(new Range16.ptr(43706, 43709, 1), Range16), $clone(new Range16.ptr(43712, 43714, 2), Range16), $clone(new Range16.ptr(43739, 43740, 1), Range16), $clone(new Range16.ptr(43744, 43754, 1), Range16), $clone(new Range16.ptr(43762, 43777, 15), Range16), $clone(new Range16.ptr(43778, 43782, 1), Range16), $clone(new Range16.ptr(43785, 43790, 1), Range16), $clone(new Range16.ptr(43793, 43798, 1), Range16), $clone(new Range16.ptr(43808, 43814, 1), Range16), $clone(new Range16.ptr(43816, 43822, 1), Range16), $clone(new Range16.ptr(43968, 44002, 1), Range16), $clone(new Range16.ptr(44032, 55203, 1), Range16), $clone(new Range16.ptr(55216, 55238, 1), Range16), $clone(new Range16.ptr(55243, 55291, 1), Range16), $clone(new Range16.ptr(63744, 64109, 1), Range16), $clone(new Range16.ptr(64112, 64217, 1), Range16), $clone(new Range16.ptr(64285, 64287, 2), Range16), $clone(new Range16.ptr(64288, 64296, 1), Range16), $clone(new Range16.ptr(64298, 64310, 1), Range16), $clone(new Range16.ptr(64312, 64316, 1), Range16), $clone(new Range16.ptr(64318, 64320, 2), Range16), $clone(new Range16.ptr(64321, 64323, 2), Range16), $clone(new Range16.ptr(64324, 64326, 2), Range16), $clone(new Range16.ptr(64327, 64433, 1), Range16), $clone(new Range16.ptr(64467, 64829, 1), Range16), $clone(new Range16.ptr(64848, 64911, 1), Range16), $clone(new Range16.ptr(64914, 64967, 1), Range16), $clone(new Range16.ptr(65008, 65019, 1), Range16), $clone(new Range16.ptr(65136, 65140, 1), Range16), $clone(new Range16.ptr(65142, 65276, 1), Range16), $clone(new Range16.ptr(65382, 65391, 1), Range16), $clone(new Range16.ptr(65393, 65437, 1), Range16), $clone(new Range16.ptr(65440, 65470, 1), Range16), $clone(new Range16.ptr(65474, 65479, 1), Range16), $clone(new Range16.ptr(65482, 65487, 1), Range16), $clone(new Range16.ptr(65490, 65495, 1), Range16), $clone(new Range16.ptr(65498, 65500, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65536, 65547, 1), Range32), $clone(new Range32.ptr(65549, 65574, 1), Range32), $clone(new Range32.ptr(65576, 65594, 1), Range32), $clone(new Range32.ptr(65596, 65597, 1), Range32), $clone(new Range32.ptr(65599, 65613, 1), Range32), $clone(new Range32.ptr(65616, 65629, 1), Range32), $clone(new Range32.ptr(65664, 65786, 1), Range32), $clone(new Range32.ptr(66176, 66204, 1), Range32), $clone(new Range32.ptr(66208, 66256, 1), Range32), $clone(new Range32.ptr(66304, 66335, 1), Range32), $clone(new Range32.ptr(66349, 66368, 1), Range32), $clone(new Range32.ptr(66370, 66377, 1), Range32), $clone(new Range32.ptr(66384, 66421, 1), Range32), $clone(new Range32.ptr(66432, 66461, 1), Range32), $clone(new Range32.ptr(66464, 66499, 1), Range32), $clone(new Range32.ptr(66504, 66511, 1), Range32), $clone(new Range32.ptr(66640, 66717, 1), Range32), $clone(new Range32.ptr(66816, 66855, 1), Range32), $clone(new Range32.ptr(66864, 66915, 1), Range32), $clone(new Range32.ptr(67072, 67382, 1), Range32), $clone(new Range32.ptr(67392, 67413, 1), Range32), $clone(new Range32.ptr(67424, 67431, 1), Range32), $clone(new Range32.ptr(67584, 67589, 1), Range32), $clone(new Range32.ptr(67592, 67594, 2), Range32), $clone(new Range32.ptr(67595, 67637, 1), Range32), $clone(new Range32.ptr(67639, 67640, 1), Range32), $clone(new Range32.ptr(67644, 67647, 3), Range32), $clone(new Range32.ptr(67648, 67669, 1), Range32), $clone(new Range32.ptr(67680, 67702, 1), Range32), $clone(new Range32.ptr(67712, 67742, 1), Range32), $clone(new Range32.ptr(67808, 67826, 1), Range32), $clone(new Range32.ptr(67828, 67829, 1), Range32), $clone(new Range32.ptr(67840, 67861, 1), Range32), $clone(new Range32.ptr(67872, 67897, 1), Range32), $clone(new Range32.ptr(67968, 68023, 1), Range32), $clone(new Range32.ptr(68030, 68031, 1), Range32), $clone(new Range32.ptr(68096, 68112, 16), Range32), $clone(new Range32.ptr(68113, 68115, 1), Range32), $clone(new Range32.ptr(68117, 68119, 1), Range32), $clone(new Range32.ptr(68121, 68149, 1), Range32), $clone(new Range32.ptr(68192, 68220, 1), Range32), $clone(new Range32.ptr(68224, 68252, 1), Range32), $clone(new Range32.ptr(68288, 68295, 1), Range32), $clone(new Range32.ptr(68297, 68324, 1), Range32), $clone(new Range32.ptr(68352, 68405, 1), Range32), $clone(new Range32.ptr(68416, 68437, 1), Range32), $clone(new Range32.ptr(68448, 68466, 1), Range32), $clone(new Range32.ptr(68480, 68497, 1), Range32), $clone(new Range32.ptr(68608, 68680, 1), Range32), $clone(new Range32.ptr(68864, 68899, 1), Range32), $clone(new Range32.ptr(69248, 69289, 1), Range32), $clone(new Range32.ptr(69296, 69297, 1), Range32), $clone(new Range32.ptr(69376, 69404, 1), Range32), $clone(new Range32.ptr(69415, 69424, 9), Range32), $clone(new Range32.ptr(69425, 69445, 1), Range32), $clone(new Range32.ptr(69552, 69572, 1), Range32), $clone(new Range32.ptr(69600, 69622, 1), Range32), $clone(new Range32.ptr(69635, 69687, 1), Range32), $clone(new Range32.ptr(69763, 69807, 1), Range32), $clone(new Range32.ptr(69840, 69864, 1), Range32), $clone(new Range32.ptr(69891, 69926, 1), Range32), $clone(new Range32.ptr(69956, 69959, 3), Range32), $clone(new Range32.ptr(69968, 70002, 1), Range32), $clone(new Range32.ptr(70006, 70019, 13), Range32), $clone(new Range32.ptr(70020, 70066, 1), Range32), $clone(new Range32.ptr(70081, 70084, 1), Range32), $clone(new Range32.ptr(70106, 70108, 2), Range32), $clone(new Range32.ptr(70144, 70161, 1), Range32), $clone(new Range32.ptr(70163, 70187, 1), Range32), $clone(new Range32.ptr(70272, 70278, 1), Range32), $clone(new Range32.ptr(70280, 70282, 2), Range32), $clone(new Range32.ptr(70283, 70285, 1), Range32), $clone(new Range32.ptr(70287, 70301, 1), Range32), $clone(new Range32.ptr(70303, 70312, 1), Range32), $clone(new Range32.ptr(70320, 70366, 1), Range32), $clone(new Range32.ptr(70405, 70412, 1), Range32), $clone(new Range32.ptr(70415, 70416, 1), Range32), $clone(new Range32.ptr(70419, 70440, 1), Range32), $clone(new Range32.ptr(70442, 70448, 1), Range32), $clone(new Range32.ptr(70450, 70451, 1), Range32), $clone(new Range32.ptr(70453, 70457, 1), Range32), $clone(new Range32.ptr(70461, 70480, 19), Range32), $clone(new Range32.ptr(70493, 70497, 1), Range32), $clone(new Range32.ptr(70656, 70708, 1), Range32), $clone(new Range32.ptr(70727, 70730, 1), Range32), $clone(new Range32.ptr(70751, 70753, 1), Range32), $clone(new Range32.ptr(70784, 70831, 1), Range32), $clone(new Range32.ptr(70852, 70853, 1), Range32), $clone(new Range32.ptr(70855, 71040, 185), Range32), $clone(new Range32.ptr(71041, 71086, 1), Range32), $clone(new Range32.ptr(71128, 71131, 1), Range32), $clone(new Range32.ptr(71168, 71215, 1), Range32), $clone(new Range32.ptr(71236, 71296, 60), Range32), $clone(new Range32.ptr(71297, 71338, 1), Range32), $clone(new Range32.ptr(71352, 71424, 72), Range32), $clone(new Range32.ptr(71425, 71450, 1), Range32), $clone(new Range32.ptr(71680, 71723, 1), Range32), $clone(new Range32.ptr(71935, 71942, 1), Range32), $clone(new Range32.ptr(71945, 71948, 3), Range32), $clone(new Range32.ptr(71949, 71955, 1), Range32), $clone(new Range32.ptr(71957, 71958, 1), Range32), $clone(new Range32.ptr(71960, 71983, 1), Range32), $clone(new Range32.ptr(71999, 72001, 2), Range32), $clone(new Range32.ptr(72096, 72103, 1), Range32), $clone(new Range32.ptr(72106, 72144, 1), Range32), $clone(new Range32.ptr(72161, 72163, 2), Range32), $clone(new Range32.ptr(72192, 72203, 11), Range32), $clone(new Range32.ptr(72204, 72242, 1), Range32), $clone(new Range32.ptr(72250, 72272, 22), Range32), $clone(new Range32.ptr(72284, 72329, 1), Range32), $clone(new Range32.ptr(72349, 72384, 35), Range32), $clone(new Range32.ptr(72385, 72440, 1), Range32), $clone(new Range32.ptr(72704, 72712, 1), Range32), $clone(new Range32.ptr(72714, 72750, 1), Range32), $clone(new Range32.ptr(72768, 72818, 50), Range32), $clone(new Range32.ptr(72819, 72847, 1), Range32), $clone(new Range32.ptr(72960, 72966, 1), Range32), $clone(new Range32.ptr(72968, 72969, 1), Range32), $clone(new Range32.ptr(72971, 73008, 1), Range32), $clone(new Range32.ptr(73030, 73056, 26), Range32), $clone(new Range32.ptr(73057, 73061, 1), Range32), $clone(new Range32.ptr(73063, 73064, 1), Range32), $clone(new Range32.ptr(73066, 73097, 1), Range32), $clone(new Range32.ptr(73112, 73440, 328), Range32), $clone(new Range32.ptr(73441, 73458, 1), Range32), $clone(new Range32.ptr(73648, 73728, 80), Range32), $clone(new Range32.ptr(73729, 74649, 1), Range32), $clone(new Range32.ptr(74880, 75075, 1), Range32), $clone(new Range32.ptr(77824, 78894, 1), Range32), $clone(new Range32.ptr(82944, 83526, 1), Range32), $clone(new Range32.ptr(92160, 92728, 1), Range32), $clone(new Range32.ptr(92736, 92766, 1), Range32), $clone(new Range32.ptr(92880, 92909, 1), Range32), $clone(new Range32.ptr(92928, 92975, 1), Range32), $clone(new Range32.ptr(93027, 93047, 1), Range32), $clone(new Range32.ptr(93053, 93071, 1), Range32), $clone(new Range32.ptr(93952, 94026, 1), Range32), $clone(new Range32.ptr(94032, 94208, 176), Range32), $clone(new Range32.ptr(94209, 100343, 1), Range32), $clone(new Range32.ptr(100352, 101589, 1), Range32), $clone(new Range32.ptr(101632, 101640, 1), Range32), $clone(new Range32.ptr(110592, 110878, 1), Range32), $clone(new Range32.ptr(110928, 110930, 1), Range32), $clone(new Range32.ptr(110948, 110951, 1), Range32), $clone(new Range32.ptr(110960, 111355, 1), Range32), $clone(new Range32.ptr(113664, 113770, 1), Range32), $clone(new Range32.ptr(113776, 113788, 1), Range32), $clone(new Range32.ptr(113792, 113800, 1), Range32), $clone(new Range32.ptr(113808, 113817, 1), Range32), $clone(new Range32.ptr(123136, 123180, 1), Range32), $clone(new Range32.ptr(123214, 123584, 370), Range32), $clone(new Range32.ptr(123585, 123627, 1), Range32), $clone(new Range32.ptr(124928, 125124, 1), Range32), $clone(new Range32.ptr(126464, 126467, 1), Range32), $clone(new Range32.ptr(126469, 126495, 1), Range32), $clone(new Range32.ptr(126497, 126498, 1), Range32), $clone(new Range32.ptr(126500, 126503, 3), Range32), $clone(new Range32.ptr(126505, 126514, 1), Range32), $clone(new Range32.ptr(126516, 126519, 1), Range32), $clone(new Range32.ptr(126521, 126523, 2), Range32), $clone(new Range32.ptr(126530, 126535, 5), Range32), $clone(new Range32.ptr(126537, 126541, 2), Range32), $clone(new Range32.ptr(126542, 126543, 1), Range32), $clone(new Range32.ptr(126545, 126546, 1), Range32), $clone(new Range32.ptr(126548, 126551, 3), Range32), $clone(new Range32.ptr(126553, 126561, 2), Range32), $clone(new Range32.ptr(126562, 126564, 2), Range32), $clone(new Range32.ptr(126567, 126570, 1), Range32), $clone(new Range32.ptr(126572, 126578, 1), Range32), $clone(new Range32.ptr(126580, 126583, 1), Range32), $clone(new Range32.ptr(126585, 126588, 1), Range32), $clone(new Range32.ptr(126590, 126592, 2), Range32), $clone(new Range32.ptr(126593, 126601, 1), Range32), $clone(new Range32.ptr(126603, 126619, 1), Range32), $clone(new Range32.ptr(126625, 126627, 1), Range32), $clone(new Range32.ptr(126629, 126633, 1), Range32), $clone(new Range32.ptr(126635, 126651, 1), Range32), $clone(new Range32.ptr(131072, 173789, 1), Range32), $clone(new Range32.ptr(173824, 177972, 1), Range32), $clone(new Range32.ptr(177984, 178205, 1), Range32), $clone(new Range32.ptr(178208, 183969, 1), Range32), $clone(new Range32.ptr(183984, 191456, 1), Range32), $clone(new Range32.ptr(194560, 195101, 1), Range32), $clone(new Range32.ptr(196608, 201546, 1), Range32)]), 1);
		_Lt = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(453, 459, 3), Range16), $clone(new Range16.ptr(498, 8072, 7574), Range16), $clone(new Range16.ptr(8073, 8079, 1), Range16), $clone(new Range16.ptr(8088, 8095, 1), Range16), $clone(new Range16.ptr(8104, 8111, 1), Range16), $clone(new Range16.ptr(8124, 8140, 16), Range16), $clone(new Range16.ptr(8188, 8188, 1), Range16)]), sliceType$1.nil, 0);
		_Lu = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(65, 90, 1), Range16), $clone(new Range16.ptr(192, 214, 1), Range16), $clone(new Range16.ptr(216, 222, 1), Range16), $clone(new Range16.ptr(256, 310, 2), Range16), $clone(new Range16.ptr(313, 327, 2), Range16), $clone(new Range16.ptr(330, 376, 2), Range16), $clone(new Range16.ptr(377, 381, 2), Range16), $clone(new Range16.ptr(385, 386, 1), Range16), $clone(new Range16.ptr(388, 390, 2), Range16), $clone(new Range16.ptr(391, 393, 2), Range16), $clone(new Range16.ptr(394, 395, 1), Range16), $clone(new Range16.ptr(398, 401, 1), Range16), $clone(new Range16.ptr(403, 404, 1), Range16), $clone(new Range16.ptr(406, 408, 1), Range16), $clone(new Range16.ptr(412, 413, 1), Range16), $clone(new Range16.ptr(415, 416, 1), Range16), $clone(new Range16.ptr(418, 422, 2), Range16), $clone(new Range16.ptr(423, 425, 2), Range16), $clone(new Range16.ptr(428, 430, 2), Range16), $clone(new Range16.ptr(431, 433, 2), Range16), $clone(new Range16.ptr(434, 435, 1), Range16), $clone(new Range16.ptr(437, 439, 2), Range16), $clone(new Range16.ptr(440, 444, 4), Range16), $clone(new Range16.ptr(452, 461, 3), Range16), $clone(new Range16.ptr(463, 475, 2), Range16), $clone(new Range16.ptr(478, 494, 2), Range16), $clone(new Range16.ptr(497, 500, 3), Range16), $clone(new Range16.ptr(502, 504, 1), Range16), $clone(new Range16.ptr(506, 562, 2), Range16), $clone(new Range16.ptr(570, 571, 1), Range16), $clone(new Range16.ptr(573, 574, 1), Range16), $clone(new Range16.ptr(577, 579, 2), Range16), $clone(new Range16.ptr(580, 582, 1), Range16), $clone(new Range16.ptr(584, 590, 2), Range16), $clone(new Range16.ptr(880, 882, 2), Range16), $clone(new Range16.ptr(886, 895, 9), Range16), $clone(new Range16.ptr(902, 904, 2), Range16), $clone(new Range16.ptr(905, 906, 1), Range16), $clone(new Range16.ptr(908, 910, 2), Range16), $clone(new Range16.ptr(911, 913, 2), Range16), $clone(new Range16.ptr(914, 929, 1), Range16), $clone(new Range16.ptr(931, 939, 1), Range16), $clone(new Range16.ptr(975, 978, 3), Range16), $clone(new Range16.ptr(979, 980, 1), Range16), $clone(new Range16.ptr(984, 1006, 2), Range16), $clone(new Range16.ptr(1012, 1015, 3), Range16), $clone(new Range16.ptr(1017, 1018, 1), Range16), $clone(new Range16.ptr(1021, 1071, 1), Range16), $clone(new Range16.ptr(1120, 1152, 2), Range16), $clone(new Range16.ptr(1162, 1216, 2), Range16), $clone(new Range16.ptr(1217, 1229, 2), Range16), $clone(new Range16.ptr(1232, 1326, 2), Range16), $clone(new Range16.ptr(1329, 1366, 1), Range16), $clone(new Range16.ptr(4256, 4293, 1), Range16), $clone(new Range16.ptr(4295, 4301, 6), Range16), $clone(new Range16.ptr(5024, 5109, 1), Range16), $clone(new Range16.ptr(7312, 7354, 1), Range16), $clone(new Range16.ptr(7357, 7359, 1), Range16), $clone(new Range16.ptr(7680, 7828, 2), Range16), $clone(new Range16.ptr(7838, 7934, 2), Range16), $clone(new Range16.ptr(7944, 7951, 1), Range16), $clone(new Range16.ptr(7960, 7965, 1), Range16), $clone(new Range16.ptr(7976, 7983, 1), Range16), $clone(new Range16.ptr(7992, 7999, 1), Range16), $clone(new Range16.ptr(8008, 8013, 1), Range16), $clone(new Range16.ptr(8025, 8031, 2), Range16), $clone(new Range16.ptr(8040, 8047, 1), Range16), $clone(new Range16.ptr(8120, 8123, 1), Range16), $clone(new Range16.ptr(8136, 8139, 1), Range16), $clone(new Range16.ptr(8152, 8155, 1), Range16), $clone(new Range16.ptr(8168, 8172, 1), Range16), $clone(new Range16.ptr(8184, 8187, 1), Range16), $clone(new Range16.ptr(8450, 8455, 5), Range16), $clone(new Range16.ptr(8459, 8461, 1), Range16), $clone(new Range16.ptr(8464, 8466, 1), Range16), $clone(new Range16.ptr(8469, 8473, 4), Range16), $clone(new Range16.ptr(8474, 8477, 1), Range16), $clone(new Range16.ptr(8484, 8490, 2), Range16), $clone(new Range16.ptr(8491, 8493, 1), Range16), $clone(new Range16.ptr(8496, 8499, 1), Range16), $clone(new Range16.ptr(8510, 8511, 1), Range16), $clone(new Range16.ptr(8517, 8579, 62), Range16), $clone(new Range16.ptr(11264, 11310, 1), Range16), $clone(new Range16.ptr(11360, 11362, 2), Range16), $clone(new Range16.ptr(11363, 11364, 1), Range16), $clone(new Range16.ptr(11367, 11373, 2), Range16), $clone(new Range16.ptr(11374, 11376, 1), Range16), $clone(new Range16.ptr(11378, 11381, 3), Range16), $clone(new Range16.ptr(11390, 11392, 1), Range16), $clone(new Range16.ptr(11394, 11490, 2), Range16), $clone(new Range16.ptr(11499, 11501, 2), Range16), $clone(new Range16.ptr(11506, 42560, 31054), Range16), $clone(new Range16.ptr(42562, 42604, 2), Range16), $clone(new Range16.ptr(42624, 42650, 2), Range16), $clone(new Range16.ptr(42786, 42798, 2), Range16), $clone(new Range16.ptr(42802, 42862, 2), Range16), $clone(new Range16.ptr(42873, 42877, 2), Range16), $clone(new Range16.ptr(42878, 42886, 2), Range16), $clone(new Range16.ptr(42891, 42893, 2), Range16), $clone(new Range16.ptr(42896, 42898, 2), Range16), $clone(new Range16.ptr(42902, 42922, 2), Range16), $clone(new Range16.ptr(42923, 42926, 1), Range16), $clone(new Range16.ptr(42928, 42932, 1), Range16), $clone(new Range16.ptr(42934, 42942, 2), Range16), $clone(new Range16.ptr(42946, 42948, 2), Range16), $clone(new Range16.ptr(42949, 42951, 1), Range16), $clone(new Range16.ptr(42953, 42997, 44), Range16), $clone(new Range16.ptr(65313, 65338, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66560, 66599, 1), Range32), $clone(new Range32.ptr(66736, 66771, 1), Range32), $clone(new Range32.ptr(68736, 68786, 1), Range32), $clone(new Range32.ptr(71840, 71871, 1), Range32), $clone(new Range32.ptr(93760, 93791, 1), Range32), $clone(new Range32.ptr(119808, 119833, 1), Range32), $clone(new Range32.ptr(119860, 119885, 1), Range32), $clone(new Range32.ptr(119912, 119937, 1), Range32), $clone(new Range32.ptr(119964, 119966, 2), Range32), $clone(new Range32.ptr(119967, 119973, 3), Range32), $clone(new Range32.ptr(119974, 119977, 3), Range32), $clone(new Range32.ptr(119978, 119980, 1), Range32), $clone(new Range32.ptr(119982, 119989, 1), Range32), $clone(new Range32.ptr(120016, 120041, 1), Range32), $clone(new Range32.ptr(120068, 120069, 1), Range32), $clone(new Range32.ptr(120071, 120074, 1), Range32), $clone(new Range32.ptr(120077, 120084, 1), Range32), $clone(new Range32.ptr(120086, 120092, 1), Range32), $clone(new Range32.ptr(120120, 120121, 1), Range32), $clone(new Range32.ptr(120123, 120126, 1), Range32), $clone(new Range32.ptr(120128, 120132, 1), Range32), $clone(new Range32.ptr(120134, 120138, 4), Range32), $clone(new Range32.ptr(120139, 120144, 1), Range32), $clone(new Range32.ptr(120172, 120197, 1), Range32), $clone(new Range32.ptr(120224, 120249, 1), Range32), $clone(new Range32.ptr(120276, 120301, 1), Range32), $clone(new Range32.ptr(120328, 120353, 1), Range32), $clone(new Range32.ptr(120380, 120405, 1), Range32), $clone(new Range32.ptr(120432, 120457, 1), Range32), $clone(new Range32.ptr(120488, 120512, 1), Range32), $clone(new Range32.ptr(120546, 120570, 1), Range32), $clone(new Range32.ptr(120604, 120628, 1), Range32), $clone(new Range32.ptr(120662, 120686, 1), Range32), $clone(new Range32.ptr(120720, 120744, 1), Range32), $clone(new Range32.ptr(120778, 125184, 4406), Range32), $clone(new Range32.ptr(125185, 125217, 1), Range32)]), 3);
		_M = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(768, 879, 1), Range16), $clone(new Range16.ptr(1155, 1161, 1), Range16), $clone(new Range16.ptr(1425, 1469, 1), Range16), $clone(new Range16.ptr(1471, 1473, 2), Range16), $clone(new Range16.ptr(1474, 1476, 2), Range16), $clone(new Range16.ptr(1477, 1479, 2), Range16), $clone(new Range16.ptr(1552, 1562, 1), Range16), $clone(new Range16.ptr(1611, 1631, 1), Range16), $clone(new Range16.ptr(1648, 1750, 102), Range16), $clone(new Range16.ptr(1751, 1756, 1), Range16), $clone(new Range16.ptr(1759, 1764, 1), Range16), $clone(new Range16.ptr(1767, 1768, 1), Range16), $clone(new Range16.ptr(1770, 1773, 1), Range16), $clone(new Range16.ptr(1809, 1840, 31), Range16), $clone(new Range16.ptr(1841, 1866, 1), Range16), $clone(new Range16.ptr(1958, 1968, 1), Range16), $clone(new Range16.ptr(2027, 2035, 1), Range16), $clone(new Range16.ptr(2045, 2070, 25), Range16), $clone(new Range16.ptr(2071, 2073, 1), Range16), $clone(new Range16.ptr(2075, 2083, 1), Range16), $clone(new Range16.ptr(2085, 2087, 1), Range16), $clone(new Range16.ptr(2089, 2093, 1), Range16), $clone(new Range16.ptr(2137, 2139, 1), Range16), $clone(new Range16.ptr(2259, 2273, 1), Range16), $clone(new Range16.ptr(2275, 2307, 1), Range16), $clone(new Range16.ptr(2362, 2364, 1), Range16), $clone(new Range16.ptr(2366, 2383, 1), Range16), $clone(new Range16.ptr(2385, 2391, 1), Range16), $clone(new Range16.ptr(2402, 2403, 1), Range16), $clone(new Range16.ptr(2433, 2435, 1), Range16), $clone(new Range16.ptr(2492, 2494, 2), Range16), $clone(new Range16.ptr(2495, 2500, 1), Range16), $clone(new Range16.ptr(2503, 2504, 1), Range16), $clone(new Range16.ptr(2507, 2509, 1), Range16), $clone(new Range16.ptr(2519, 2530, 11), Range16), $clone(new Range16.ptr(2531, 2558, 27), Range16), $clone(new Range16.ptr(2561, 2563, 1), Range16), $clone(new Range16.ptr(2620, 2622, 2), Range16), $clone(new Range16.ptr(2623, 2626, 1), Range16), $clone(new Range16.ptr(2631, 2632, 1), Range16), $clone(new Range16.ptr(2635, 2637, 1), Range16), $clone(new Range16.ptr(2641, 2672, 31), Range16), $clone(new Range16.ptr(2673, 2677, 4), Range16), $clone(new Range16.ptr(2689, 2691, 1), Range16), $clone(new Range16.ptr(2748, 2750, 2), Range16), $clone(new Range16.ptr(2751, 2757, 1), Range16), $clone(new Range16.ptr(2759, 2761, 1), Range16), $clone(new Range16.ptr(2763, 2765, 1), Range16), $clone(new Range16.ptr(2786, 2787, 1), Range16), $clone(new Range16.ptr(2810, 2815, 1), Range16), $clone(new Range16.ptr(2817, 2819, 1), Range16), $clone(new Range16.ptr(2876, 2878, 2), Range16), $clone(new Range16.ptr(2879, 2884, 1), Range16), $clone(new Range16.ptr(2887, 2888, 1), Range16), $clone(new Range16.ptr(2891, 2893, 1), Range16), $clone(new Range16.ptr(2901, 2903, 1), Range16), $clone(new Range16.ptr(2914, 2915, 1), Range16), $clone(new Range16.ptr(2946, 3006, 60), Range16), $clone(new Range16.ptr(3007, 3010, 1), Range16), $clone(new Range16.ptr(3014, 3016, 1), Range16), $clone(new Range16.ptr(3018, 3021, 1), Range16), $clone(new Range16.ptr(3031, 3072, 41), Range16), $clone(new Range16.ptr(3073, 3076, 1), Range16), $clone(new Range16.ptr(3134, 3140, 1), Range16), $clone(new Range16.ptr(3142, 3144, 1), Range16), $clone(new Range16.ptr(3146, 3149, 1), Range16), $clone(new Range16.ptr(3157, 3158, 1), Range16), $clone(new Range16.ptr(3170, 3171, 1), Range16), $clone(new Range16.ptr(3201, 3203, 1), Range16), $clone(new Range16.ptr(3260, 3262, 2), Range16), $clone(new Range16.ptr(3263, 3268, 1), Range16), $clone(new Range16.ptr(3270, 3272, 1), Range16), $clone(new Range16.ptr(3274, 3277, 1), Range16), $clone(new Range16.ptr(3285, 3286, 1), Range16), $clone(new Range16.ptr(3298, 3299, 1), Range16), $clone(new Range16.ptr(3328, 3331, 1), Range16), $clone(new Range16.ptr(3387, 3388, 1), Range16), $clone(new Range16.ptr(3390, 3396, 1), Range16), $clone(new Range16.ptr(3398, 3400, 1), Range16), $clone(new Range16.ptr(3402, 3405, 1), Range16), $clone(new Range16.ptr(3415, 3426, 11), Range16), $clone(new Range16.ptr(3427, 3457, 30), Range16), $clone(new Range16.ptr(3458, 3459, 1), Range16), $clone(new Range16.ptr(3530, 3535, 5), Range16), $clone(new Range16.ptr(3536, 3540, 1), Range16), $clone(new Range16.ptr(3542, 3544, 2), Range16), $clone(new Range16.ptr(3545, 3551, 1), Range16), $clone(new Range16.ptr(3570, 3571, 1), Range16), $clone(new Range16.ptr(3633, 3636, 3), Range16), $clone(new Range16.ptr(3637, 3642, 1), Range16), $clone(new Range16.ptr(3655, 3662, 1), Range16), $clone(new Range16.ptr(3761, 3764, 3), Range16), $clone(new Range16.ptr(3765, 3772, 1), Range16), $clone(new Range16.ptr(3784, 3789, 1), Range16), $clone(new Range16.ptr(3864, 3865, 1), Range16), $clone(new Range16.ptr(3893, 3897, 2), Range16), $clone(new Range16.ptr(3902, 3903, 1), Range16), $clone(new Range16.ptr(3953, 3972, 1), Range16), $clone(new Range16.ptr(3974, 3975, 1), Range16), $clone(new Range16.ptr(3981, 3991, 1), Range16), $clone(new Range16.ptr(3993, 4028, 1), Range16), $clone(new Range16.ptr(4038, 4139, 101), Range16), $clone(new Range16.ptr(4140, 4158, 1), Range16), $clone(new Range16.ptr(4182, 4185, 1), Range16), $clone(new Range16.ptr(4190, 4192, 1), Range16), $clone(new Range16.ptr(4194, 4196, 1), Range16), $clone(new Range16.ptr(4199, 4205, 1), Range16), $clone(new Range16.ptr(4209, 4212, 1), Range16), $clone(new Range16.ptr(4226, 4237, 1), Range16), $clone(new Range16.ptr(4239, 4250, 11), Range16), $clone(new Range16.ptr(4251, 4253, 1), Range16), $clone(new Range16.ptr(4957, 4959, 1), Range16), $clone(new Range16.ptr(5906, 5908, 1), Range16), $clone(new Range16.ptr(5938, 5940, 1), Range16), $clone(new Range16.ptr(5970, 5971, 1), Range16), $clone(new Range16.ptr(6002, 6003, 1), Range16), $clone(new Range16.ptr(6068, 6099, 1), Range16), $clone(new Range16.ptr(6109, 6155, 46), Range16), $clone(new Range16.ptr(6156, 6157, 1), Range16), $clone(new Range16.ptr(6277, 6278, 1), Range16), $clone(new Range16.ptr(6313, 6432, 119), Range16), $clone(new Range16.ptr(6433, 6443, 1), Range16), $clone(new Range16.ptr(6448, 6459, 1), Range16), $clone(new Range16.ptr(6679, 6683, 1), Range16), $clone(new Range16.ptr(6741, 6750, 1), Range16), $clone(new Range16.ptr(6752, 6780, 1), Range16), $clone(new Range16.ptr(6783, 6832, 49), Range16), $clone(new Range16.ptr(6833, 6848, 1), Range16), $clone(new Range16.ptr(6912, 6916, 1), Range16), $clone(new Range16.ptr(6964, 6980, 1), Range16), $clone(new Range16.ptr(7019, 7027, 1), Range16), $clone(new Range16.ptr(7040, 7042, 1), Range16), $clone(new Range16.ptr(7073, 7085, 1), Range16), $clone(new Range16.ptr(7142, 7155, 1), Range16), $clone(new Range16.ptr(7204, 7223, 1), Range16), $clone(new Range16.ptr(7376, 7378, 1), Range16), $clone(new Range16.ptr(7380, 7400, 1), Range16), $clone(new Range16.ptr(7405, 7412, 7), Range16), $clone(new Range16.ptr(7415, 7417, 1), Range16), $clone(new Range16.ptr(7616, 7673, 1), Range16), $clone(new Range16.ptr(7675, 7679, 1), Range16), $clone(new Range16.ptr(8400, 8432, 1), Range16), $clone(new Range16.ptr(11503, 11505, 1), Range16), $clone(new Range16.ptr(11647, 11744, 97), Range16), $clone(new Range16.ptr(11745, 11775, 1), Range16), $clone(new Range16.ptr(12330, 12335, 1), Range16), $clone(new Range16.ptr(12441, 12442, 1), Range16), $clone(new Range16.ptr(42607, 42610, 1), Range16), $clone(new Range16.ptr(42612, 42621, 1), Range16), $clone(new Range16.ptr(42654, 42655, 1), Range16), $clone(new Range16.ptr(42736, 42737, 1), Range16), $clone(new Range16.ptr(43010, 43014, 4), Range16), $clone(new Range16.ptr(43019, 43043, 24), Range16), $clone(new Range16.ptr(43044, 43047, 1), Range16), $clone(new Range16.ptr(43052, 43136, 84), Range16), $clone(new Range16.ptr(43137, 43188, 51), Range16), $clone(new Range16.ptr(43189, 43205, 1), Range16), $clone(new Range16.ptr(43232, 43249, 1), Range16), $clone(new Range16.ptr(43263, 43302, 39), Range16), $clone(new Range16.ptr(43303, 43309, 1), Range16), $clone(new Range16.ptr(43335, 43347, 1), Range16), $clone(new Range16.ptr(43392, 43395, 1), Range16), $clone(new Range16.ptr(43443, 43456, 1), Range16), $clone(new Range16.ptr(43493, 43561, 68), Range16), $clone(new Range16.ptr(43562, 43574, 1), Range16), $clone(new Range16.ptr(43587, 43596, 9), Range16), $clone(new Range16.ptr(43597, 43643, 46), Range16), $clone(new Range16.ptr(43644, 43645, 1), Range16), $clone(new Range16.ptr(43696, 43698, 2), Range16), $clone(new Range16.ptr(43699, 43700, 1), Range16), $clone(new Range16.ptr(43703, 43704, 1), Range16), $clone(new Range16.ptr(43710, 43711, 1), Range16), $clone(new Range16.ptr(43713, 43755, 42), Range16), $clone(new Range16.ptr(43756, 43759, 1), Range16), $clone(new Range16.ptr(43765, 43766, 1), Range16), $clone(new Range16.ptr(44003, 44010, 1), Range16), $clone(new Range16.ptr(44012, 44013, 1), Range16), $clone(new Range16.ptr(64286, 65024, 738), Range16), $clone(new Range16.ptr(65025, 65039, 1), Range16), $clone(new Range16.ptr(65056, 65071, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66045, 66272, 227), Range32), $clone(new Range32.ptr(66422, 66426, 1), Range32), $clone(new Range32.ptr(68097, 68099, 1), Range32), $clone(new Range32.ptr(68101, 68102, 1), Range32), $clone(new Range32.ptr(68108, 68111, 1), Range32), $clone(new Range32.ptr(68152, 68154, 1), Range32), $clone(new Range32.ptr(68159, 68325, 166), Range32), $clone(new Range32.ptr(68326, 68900, 574), Range32), $clone(new Range32.ptr(68901, 68903, 1), Range32), $clone(new Range32.ptr(69291, 69292, 1), Range32), $clone(new Range32.ptr(69446, 69456, 1), Range32), $clone(new Range32.ptr(69632, 69634, 1), Range32), $clone(new Range32.ptr(69688, 69702, 1), Range32), $clone(new Range32.ptr(69759, 69762, 1), Range32), $clone(new Range32.ptr(69808, 69818, 1), Range32), $clone(new Range32.ptr(69888, 69890, 1), Range32), $clone(new Range32.ptr(69927, 69940, 1), Range32), $clone(new Range32.ptr(69957, 69958, 1), Range32), $clone(new Range32.ptr(70003, 70016, 13), Range32), $clone(new Range32.ptr(70017, 70018, 1), Range32), $clone(new Range32.ptr(70067, 70080, 1), Range32), $clone(new Range32.ptr(70089, 70092, 1), Range32), $clone(new Range32.ptr(70094, 70095, 1), Range32), $clone(new Range32.ptr(70188, 70199, 1), Range32), $clone(new Range32.ptr(70206, 70367, 161), Range32), $clone(new Range32.ptr(70368, 70378, 1), Range32), $clone(new Range32.ptr(70400, 70403, 1), Range32), $clone(new Range32.ptr(70459, 70460, 1), Range32), $clone(new Range32.ptr(70462, 70468, 1), Range32), $clone(new Range32.ptr(70471, 70472, 1), Range32), $clone(new Range32.ptr(70475, 70477, 1), Range32), $clone(new Range32.ptr(70487, 70498, 11), Range32), $clone(new Range32.ptr(70499, 70502, 3), Range32), $clone(new Range32.ptr(70503, 70508, 1), Range32), $clone(new Range32.ptr(70512, 70516, 1), Range32), $clone(new Range32.ptr(70709, 70726, 1), Range32), $clone(new Range32.ptr(70750, 70832, 82), Range32), $clone(new Range32.ptr(70833, 70851, 1), Range32), $clone(new Range32.ptr(71087, 71093, 1), Range32), $clone(new Range32.ptr(71096, 71104, 1), Range32), $clone(new Range32.ptr(71132, 71133, 1), Range32), $clone(new Range32.ptr(71216, 71232, 1), Range32), $clone(new Range32.ptr(71339, 71351, 1), Range32), $clone(new Range32.ptr(71453, 71467, 1), Range32), $clone(new Range32.ptr(71724, 71738, 1), Range32), $clone(new Range32.ptr(71984, 71989, 1), Range32), $clone(new Range32.ptr(71991, 71992, 1), Range32), $clone(new Range32.ptr(71995, 71998, 1), Range32), $clone(new Range32.ptr(72000, 72002, 2), Range32), $clone(new Range32.ptr(72003, 72145, 142), Range32), $clone(new Range32.ptr(72146, 72151, 1), Range32), $clone(new Range32.ptr(72154, 72160, 1), Range32), $clone(new Range32.ptr(72164, 72193, 29), Range32), $clone(new Range32.ptr(72194, 72202, 1), Range32), $clone(new Range32.ptr(72243, 72249, 1), Range32), $clone(new Range32.ptr(72251, 72254, 1), Range32), $clone(new Range32.ptr(72263, 72273, 10), Range32), $clone(new Range32.ptr(72274, 72283, 1), Range32), $clone(new Range32.ptr(72330, 72345, 1), Range32), $clone(new Range32.ptr(72751, 72758, 1), Range32), $clone(new Range32.ptr(72760, 72767, 1), Range32), $clone(new Range32.ptr(72850, 72871, 1), Range32), $clone(new Range32.ptr(72873, 72886, 1), Range32), $clone(new Range32.ptr(73009, 73014, 1), Range32), $clone(new Range32.ptr(73018, 73020, 2), Range32), $clone(new Range32.ptr(73021, 73023, 2), Range32), $clone(new Range32.ptr(73024, 73029, 1), Range32), $clone(new Range32.ptr(73031, 73098, 67), Range32), $clone(new Range32.ptr(73099, 73102, 1), Range32), $clone(new Range32.ptr(73104, 73105, 1), Range32), $clone(new Range32.ptr(73107, 73111, 1), Range32), $clone(new Range32.ptr(73459, 73462, 1), Range32), $clone(new Range32.ptr(92912, 92916, 1), Range32), $clone(new Range32.ptr(92976, 92982, 1), Range32), $clone(new Range32.ptr(94031, 94033, 2), Range32), $clone(new Range32.ptr(94034, 94087, 1), Range32), $clone(new Range32.ptr(94095, 94098, 1), Range32), $clone(new Range32.ptr(94180, 94192, 12), Range32), $clone(new Range32.ptr(94193, 113821, 19628), Range32), $clone(new Range32.ptr(113822, 119141, 5319), Range32), $clone(new Range32.ptr(119142, 119145, 1), Range32), $clone(new Range32.ptr(119149, 119154, 1), Range32), $clone(new Range32.ptr(119163, 119170, 1), Range32), $clone(new Range32.ptr(119173, 119179, 1), Range32), $clone(new Range32.ptr(119210, 119213, 1), Range32), $clone(new Range32.ptr(119362, 119364, 1), Range32), $clone(new Range32.ptr(121344, 121398, 1), Range32), $clone(new Range32.ptr(121403, 121452, 1), Range32), $clone(new Range32.ptr(121461, 121476, 15), Range32), $clone(new Range32.ptr(121499, 121503, 1), Range32), $clone(new Range32.ptr(121505, 121519, 1), Range32), $clone(new Range32.ptr(122880, 122886, 1), Range32), $clone(new Range32.ptr(122888, 122904, 1), Range32), $clone(new Range32.ptr(122907, 122913, 1), Range32), $clone(new Range32.ptr(122915, 122916, 1), Range32), $clone(new Range32.ptr(122918, 122922, 1), Range32), $clone(new Range32.ptr(123184, 123190, 1), Range32), $clone(new Range32.ptr(123628, 123631, 1), Range32), $clone(new Range32.ptr(125136, 125142, 1), Range32), $clone(new Range32.ptr(125252, 125258, 1), Range32), $clone(new Range32.ptr(917760, 917999, 1), Range32)]), 0);
		_Mc = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2307, 2363, 56), Range16), $clone(new Range16.ptr(2366, 2368, 1), Range16), $clone(new Range16.ptr(2377, 2380, 1), Range16), $clone(new Range16.ptr(2382, 2383, 1), Range16), $clone(new Range16.ptr(2434, 2435, 1), Range16), $clone(new Range16.ptr(2494, 2496, 1), Range16), $clone(new Range16.ptr(2503, 2504, 1), Range16), $clone(new Range16.ptr(2507, 2508, 1), Range16), $clone(new Range16.ptr(2519, 2563, 44), Range16), $clone(new Range16.ptr(2622, 2624, 1), Range16), $clone(new Range16.ptr(2691, 2750, 59), Range16), $clone(new Range16.ptr(2751, 2752, 1), Range16), $clone(new Range16.ptr(2761, 2763, 2), Range16), $clone(new Range16.ptr(2764, 2818, 54), Range16), $clone(new Range16.ptr(2819, 2878, 59), Range16), $clone(new Range16.ptr(2880, 2887, 7), Range16), $clone(new Range16.ptr(2888, 2891, 3), Range16), $clone(new Range16.ptr(2892, 2903, 11), Range16), $clone(new Range16.ptr(3006, 3007, 1), Range16), $clone(new Range16.ptr(3009, 3010, 1), Range16), $clone(new Range16.ptr(3014, 3016, 1), Range16), $clone(new Range16.ptr(3018, 3020, 1), Range16), $clone(new Range16.ptr(3031, 3073, 42), Range16), $clone(new Range16.ptr(3074, 3075, 1), Range16), $clone(new Range16.ptr(3137, 3140, 1), Range16), $clone(new Range16.ptr(3202, 3203, 1), Range16), $clone(new Range16.ptr(3262, 3264, 2), Range16), $clone(new Range16.ptr(3265, 3268, 1), Range16), $clone(new Range16.ptr(3271, 3272, 1), Range16), $clone(new Range16.ptr(3274, 3275, 1), Range16), $clone(new Range16.ptr(3285, 3286, 1), Range16), $clone(new Range16.ptr(3330, 3331, 1), Range16), $clone(new Range16.ptr(3390, 3392, 1), Range16), $clone(new Range16.ptr(3398, 3400, 1), Range16), $clone(new Range16.ptr(3402, 3404, 1), Range16), $clone(new Range16.ptr(3415, 3458, 43), Range16), $clone(new Range16.ptr(3459, 3535, 76), Range16), $clone(new Range16.ptr(3536, 3537, 1), Range16), $clone(new Range16.ptr(3544, 3551, 1), Range16), $clone(new Range16.ptr(3570, 3571, 1), Range16), $clone(new Range16.ptr(3902, 3903, 1), Range16), $clone(new Range16.ptr(3967, 4139, 172), Range16), $clone(new Range16.ptr(4140, 4145, 5), Range16), $clone(new Range16.ptr(4152, 4155, 3), Range16), $clone(new Range16.ptr(4156, 4182, 26), Range16), $clone(new Range16.ptr(4183, 4194, 11), Range16), $clone(new Range16.ptr(4195, 4196, 1), Range16), $clone(new Range16.ptr(4199, 4205, 1), Range16), $clone(new Range16.ptr(4227, 4228, 1), Range16), $clone(new Range16.ptr(4231, 4236, 1), Range16), $clone(new Range16.ptr(4239, 4250, 11), Range16), $clone(new Range16.ptr(4251, 4252, 1), Range16), $clone(new Range16.ptr(6070, 6078, 8), Range16), $clone(new Range16.ptr(6079, 6085, 1), Range16), $clone(new Range16.ptr(6087, 6088, 1), Range16), $clone(new Range16.ptr(6435, 6438, 1), Range16), $clone(new Range16.ptr(6441, 6443, 1), Range16), $clone(new Range16.ptr(6448, 6449, 1), Range16), $clone(new Range16.ptr(6451, 6456, 1), Range16), $clone(new Range16.ptr(6681, 6682, 1), Range16), $clone(new Range16.ptr(6741, 6743, 2), Range16), $clone(new Range16.ptr(6753, 6755, 2), Range16), $clone(new Range16.ptr(6756, 6765, 9), Range16), $clone(new Range16.ptr(6766, 6770, 1), Range16), $clone(new Range16.ptr(6916, 6965, 49), Range16), $clone(new Range16.ptr(6971, 6973, 2), Range16), $clone(new Range16.ptr(6974, 6977, 1), Range16), $clone(new Range16.ptr(6979, 6980, 1), Range16), $clone(new Range16.ptr(7042, 7073, 31), Range16), $clone(new Range16.ptr(7078, 7079, 1), Range16), $clone(new Range16.ptr(7082, 7143, 61), Range16), $clone(new Range16.ptr(7146, 7148, 1), Range16), $clone(new Range16.ptr(7150, 7154, 4), Range16), $clone(new Range16.ptr(7155, 7204, 49), Range16), $clone(new Range16.ptr(7205, 7211, 1), Range16), $clone(new Range16.ptr(7220, 7221, 1), Range16), $clone(new Range16.ptr(7393, 7415, 22), Range16), $clone(new Range16.ptr(12334, 12335, 1), Range16), $clone(new Range16.ptr(43043, 43044, 1), Range16), $clone(new Range16.ptr(43047, 43136, 89), Range16), $clone(new Range16.ptr(43137, 43188, 51), Range16), $clone(new Range16.ptr(43189, 43203, 1), Range16), $clone(new Range16.ptr(43346, 43347, 1), Range16), $clone(new Range16.ptr(43395, 43444, 49), Range16), $clone(new Range16.ptr(43445, 43450, 5), Range16), $clone(new Range16.ptr(43451, 43454, 3), Range16), $clone(new Range16.ptr(43455, 43456, 1), Range16), $clone(new Range16.ptr(43567, 43568, 1), Range16), $clone(new Range16.ptr(43571, 43572, 1), Range16), $clone(new Range16.ptr(43597, 43643, 46), Range16), $clone(new Range16.ptr(43645, 43755, 110), Range16), $clone(new Range16.ptr(43758, 43759, 1), Range16), $clone(new Range16.ptr(43765, 44003, 238), Range16), $clone(new Range16.ptr(44004, 44006, 2), Range16), $clone(new Range16.ptr(44007, 44009, 2), Range16), $clone(new Range16.ptr(44010, 44012, 2), Range16)]), new sliceType$1([$clone(new Range32.ptr(69632, 69634, 2), Range32), $clone(new Range32.ptr(69762, 69808, 46), Range32), $clone(new Range32.ptr(69809, 69810, 1), Range32), $clone(new Range32.ptr(69815, 69816, 1), Range32), $clone(new Range32.ptr(69932, 69957, 25), Range32), $clone(new Range32.ptr(69958, 70018, 60), Range32), $clone(new Range32.ptr(70067, 70069, 1), Range32), $clone(new Range32.ptr(70079, 70080, 1), Range32), $clone(new Range32.ptr(70094, 70188, 94), Range32), $clone(new Range32.ptr(70189, 70190, 1), Range32), $clone(new Range32.ptr(70194, 70195, 1), Range32), $clone(new Range32.ptr(70197, 70368, 171), Range32), $clone(new Range32.ptr(70369, 70370, 1), Range32), $clone(new Range32.ptr(70402, 70403, 1), Range32), $clone(new Range32.ptr(70462, 70463, 1), Range32), $clone(new Range32.ptr(70465, 70468, 1), Range32), $clone(new Range32.ptr(70471, 70472, 1), Range32), $clone(new Range32.ptr(70475, 70477, 1), Range32), $clone(new Range32.ptr(70487, 70498, 11), Range32), $clone(new Range32.ptr(70499, 70709, 210), Range32), $clone(new Range32.ptr(70710, 70711, 1), Range32), $clone(new Range32.ptr(70720, 70721, 1), Range32), $clone(new Range32.ptr(70725, 70832, 107), Range32), $clone(new Range32.ptr(70833, 70834, 1), Range32), $clone(new Range32.ptr(70841, 70843, 2), Range32), $clone(new Range32.ptr(70844, 70846, 1), Range32), $clone(new Range32.ptr(70849, 71087, 238), Range32), $clone(new Range32.ptr(71088, 71089, 1), Range32), $clone(new Range32.ptr(71096, 71099, 1), Range32), $clone(new Range32.ptr(71102, 71216, 114), Range32), $clone(new Range32.ptr(71217, 71218, 1), Range32), $clone(new Range32.ptr(71227, 71228, 1), Range32), $clone(new Range32.ptr(71230, 71340, 110), Range32), $clone(new Range32.ptr(71342, 71343, 1), Range32), $clone(new Range32.ptr(71350, 71456, 106), Range32), $clone(new Range32.ptr(71457, 71462, 5), Range32), $clone(new Range32.ptr(71724, 71726, 1), Range32), $clone(new Range32.ptr(71736, 71984, 248), Range32), $clone(new Range32.ptr(71985, 71989, 1), Range32), $clone(new Range32.ptr(71991, 71992, 1), Range32), $clone(new Range32.ptr(71997, 72000, 3), Range32), $clone(new Range32.ptr(72002, 72145, 143), Range32), $clone(new Range32.ptr(72146, 72147, 1), Range32), $clone(new Range32.ptr(72156, 72159, 1), Range32), $clone(new Range32.ptr(72164, 72249, 85), Range32), $clone(new Range32.ptr(72279, 72280, 1), Range32), $clone(new Range32.ptr(72343, 72751, 408), Range32), $clone(new Range32.ptr(72766, 72873, 107), Range32), $clone(new Range32.ptr(72881, 72884, 3), Range32), $clone(new Range32.ptr(73098, 73102, 1), Range32), $clone(new Range32.ptr(73107, 73108, 1), Range32), $clone(new Range32.ptr(73110, 73461, 351), Range32), $clone(new Range32.ptr(73462, 94033, 20571), Range32), $clone(new Range32.ptr(94034, 94087, 1), Range32), $clone(new Range32.ptr(94192, 94193, 1), Range32), $clone(new Range32.ptr(119141, 119142, 1), Range32), $clone(new Range32.ptr(119149, 119154, 1), Range32)]), 0);
		_Me = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1160, 1161, 1), Range16), $clone(new Range16.ptr(6846, 8413, 1567), Range16), $clone(new Range16.ptr(8414, 8416, 1), Range16), $clone(new Range16.ptr(8418, 8420, 1), Range16), $clone(new Range16.ptr(42608, 42610, 1), Range16)]), sliceType$1.nil, 0);
		_Mn = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(768, 879, 1), Range16), $clone(new Range16.ptr(1155, 1159, 1), Range16), $clone(new Range16.ptr(1425, 1469, 1), Range16), $clone(new Range16.ptr(1471, 1473, 2), Range16), $clone(new Range16.ptr(1474, 1476, 2), Range16), $clone(new Range16.ptr(1477, 1479, 2), Range16), $clone(new Range16.ptr(1552, 1562, 1), Range16), $clone(new Range16.ptr(1611, 1631, 1), Range16), $clone(new Range16.ptr(1648, 1750, 102), Range16), $clone(new Range16.ptr(1751, 1756, 1), Range16), $clone(new Range16.ptr(1759, 1764, 1), Range16), $clone(new Range16.ptr(1767, 1768, 1), Range16), $clone(new Range16.ptr(1770, 1773, 1), Range16), $clone(new Range16.ptr(1809, 1840, 31), Range16), $clone(new Range16.ptr(1841, 1866, 1), Range16), $clone(new Range16.ptr(1958, 1968, 1), Range16), $clone(new Range16.ptr(2027, 2035, 1), Range16), $clone(new Range16.ptr(2045, 2070, 25), Range16), $clone(new Range16.ptr(2071, 2073, 1), Range16), $clone(new Range16.ptr(2075, 2083, 1), Range16), $clone(new Range16.ptr(2085, 2087, 1), Range16), $clone(new Range16.ptr(2089, 2093, 1), Range16), $clone(new Range16.ptr(2137, 2139, 1), Range16), $clone(new Range16.ptr(2259, 2273, 1), Range16), $clone(new Range16.ptr(2275, 2306, 1), Range16), $clone(new Range16.ptr(2362, 2364, 2), Range16), $clone(new Range16.ptr(2369, 2376, 1), Range16), $clone(new Range16.ptr(2381, 2385, 4), Range16), $clone(new Range16.ptr(2386, 2391, 1), Range16), $clone(new Range16.ptr(2402, 2403, 1), Range16), $clone(new Range16.ptr(2433, 2492, 59), Range16), $clone(new Range16.ptr(2497, 2500, 1), Range16), $clone(new Range16.ptr(2509, 2530, 21), Range16), $clone(new Range16.ptr(2531, 2558, 27), Range16), $clone(new Range16.ptr(2561, 2562, 1), Range16), $clone(new Range16.ptr(2620, 2625, 5), Range16), $clone(new Range16.ptr(2626, 2631, 5), Range16), $clone(new Range16.ptr(2632, 2635, 3), Range16), $clone(new Range16.ptr(2636, 2637, 1), Range16), $clone(new Range16.ptr(2641, 2672, 31), Range16), $clone(new Range16.ptr(2673, 2677, 4), Range16), $clone(new Range16.ptr(2689, 2690, 1), Range16), $clone(new Range16.ptr(2748, 2753, 5), Range16), $clone(new Range16.ptr(2754, 2757, 1), Range16), $clone(new Range16.ptr(2759, 2760, 1), Range16), $clone(new Range16.ptr(2765, 2786, 21), Range16), $clone(new Range16.ptr(2787, 2810, 23), Range16), $clone(new Range16.ptr(2811, 2815, 1), Range16), $clone(new Range16.ptr(2817, 2876, 59), Range16), $clone(new Range16.ptr(2879, 2881, 2), Range16), $clone(new Range16.ptr(2882, 2884, 1), Range16), $clone(new Range16.ptr(2893, 2901, 8), Range16), $clone(new Range16.ptr(2902, 2914, 12), Range16), $clone(new Range16.ptr(2915, 2946, 31), Range16), $clone(new Range16.ptr(3008, 3021, 13), Range16), $clone(new Range16.ptr(3072, 3076, 4), Range16), $clone(new Range16.ptr(3134, 3136, 1), Range16), $clone(new Range16.ptr(3142, 3144, 1), Range16), $clone(new Range16.ptr(3146, 3149, 1), Range16), $clone(new Range16.ptr(3157, 3158, 1), Range16), $clone(new Range16.ptr(3170, 3171, 1), Range16), $clone(new Range16.ptr(3201, 3260, 59), Range16), $clone(new Range16.ptr(3263, 3270, 7), Range16), $clone(new Range16.ptr(3276, 3277, 1), Range16), $clone(new Range16.ptr(3298, 3299, 1), Range16), $clone(new Range16.ptr(3328, 3329, 1), Range16), $clone(new Range16.ptr(3387, 3388, 1), Range16), $clone(new Range16.ptr(3393, 3396, 1), Range16), $clone(new Range16.ptr(3405, 3426, 21), Range16), $clone(new Range16.ptr(3427, 3457, 30), Range16), $clone(new Range16.ptr(3530, 3538, 8), Range16), $clone(new Range16.ptr(3539, 3540, 1), Range16), $clone(new Range16.ptr(3542, 3633, 91), Range16), $clone(new Range16.ptr(3636, 3642, 1), Range16), $clone(new Range16.ptr(3655, 3662, 1), Range16), $clone(new Range16.ptr(3761, 3764, 3), Range16), $clone(new Range16.ptr(3765, 3772, 1), Range16), $clone(new Range16.ptr(3784, 3789, 1), Range16), $clone(new Range16.ptr(3864, 3865, 1), Range16), $clone(new Range16.ptr(3893, 3897, 2), Range16), $clone(new Range16.ptr(3953, 3966, 1), Range16), $clone(new Range16.ptr(3968, 3972, 1), Range16), $clone(new Range16.ptr(3974, 3975, 1), Range16), $clone(new Range16.ptr(3981, 3991, 1), Range16), $clone(new Range16.ptr(3993, 4028, 1), Range16), $clone(new Range16.ptr(4038, 4141, 103), Range16), $clone(new Range16.ptr(4142, 4144, 1), Range16), $clone(new Range16.ptr(4146, 4151, 1), Range16), $clone(new Range16.ptr(4153, 4154, 1), Range16), $clone(new Range16.ptr(4157, 4158, 1), Range16), $clone(new Range16.ptr(4184, 4185, 1), Range16), $clone(new Range16.ptr(4190, 4192, 1), Range16), $clone(new Range16.ptr(4209, 4212, 1), Range16), $clone(new Range16.ptr(4226, 4229, 3), Range16), $clone(new Range16.ptr(4230, 4237, 7), Range16), $clone(new Range16.ptr(4253, 4957, 704), Range16), $clone(new Range16.ptr(4958, 4959, 1), Range16), $clone(new Range16.ptr(5906, 5908, 1), Range16), $clone(new Range16.ptr(5938, 5940, 1), Range16), $clone(new Range16.ptr(5970, 5971, 1), Range16), $clone(new Range16.ptr(6002, 6003, 1), Range16), $clone(new Range16.ptr(6068, 6069, 1), Range16), $clone(new Range16.ptr(6071, 6077, 1), Range16), $clone(new Range16.ptr(6086, 6089, 3), Range16), $clone(new Range16.ptr(6090, 6099, 1), Range16), $clone(new Range16.ptr(6109, 6155, 46), Range16), $clone(new Range16.ptr(6156, 6157, 1), Range16), $clone(new Range16.ptr(6277, 6278, 1), Range16), $clone(new Range16.ptr(6313, 6432, 119), Range16), $clone(new Range16.ptr(6433, 6434, 1), Range16), $clone(new Range16.ptr(6439, 6440, 1), Range16), $clone(new Range16.ptr(6450, 6457, 7), Range16), $clone(new Range16.ptr(6458, 6459, 1), Range16), $clone(new Range16.ptr(6679, 6680, 1), Range16), $clone(new Range16.ptr(6683, 6742, 59), Range16), $clone(new Range16.ptr(6744, 6750, 1), Range16), $clone(new Range16.ptr(6752, 6754, 2), Range16), $clone(new Range16.ptr(6757, 6764, 1), Range16), $clone(new Range16.ptr(6771, 6780, 1), Range16), $clone(new Range16.ptr(6783, 6832, 49), Range16), $clone(new Range16.ptr(6833, 6845, 1), Range16), $clone(new Range16.ptr(6847, 6848, 1), Range16), $clone(new Range16.ptr(6912, 6915, 1), Range16), $clone(new Range16.ptr(6964, 6966, 2), Range16), $clone(new Range16.ptr(6967, 6970, 1), Range16), $clone(new Range16.ptr(6972, 6978, 6), Range16), $clone(new Range16.ptr(7019, 7027, 1), Range16), $clone(new Range16.ptr(7040, 7041, 1), Range16), $clone(new Range16.ptr(7074, 7077, 1), Range16), $clone(new Range16.ptr(7080, 7081, 1), Range16), $clone(new Range16.ptr(7083, 7085, 1), Range16), $clone(new Range16.ptr(7142, 7144, 2), Range16), $clone(new Range16.ptr(7145, 7149, 4), Range16), $clone(new Range16.ptr(7151, 7153, 1), Range16), $clone(new Range16.ptr(7212, 7219, 1), Range16), $clone(new Range16.ptr(7222, 7223, 1), Range16), $clone(new Range16.ptr(7376, 7378, 1), Range16), $clone(new Range16.ptr(7380, 7392, 1), Range16), $clone(new Range16.ptr(7394, 7400, 1), Range16), $clone(new Range16.ptr(7405, 7412, 7), Range16), $clone(new Range16.ptr(7416, 7417, 1), Range16), $clone(new Range16.ptr(7616, 7673, 1), Range16), $clone(new Range16.ptr(7675, 7679, 1), Range16), $clone(new Range16.ptr(8400, 8412, 1), Range16), $clone(new Range16.ptr(8417, 8421, 4), Range16), $clone(new Range16.ptr(8422, 8432, 1), Range16), $clone(new Range16.ptr(11503, 11505, 1), Range16), $clone(new Range16.ptr(11647, 11744, 97), Range16), $clone(new Range16.ptr(11745, 11775, 1), Range16), $clone(new Range16.ptr(12330, 12333, 1), Range16), $clone(new Range16.ptr(12441, 12442, 1), Range16), $clone(new Range16.ptr(42607, 42612, 5), Range16), $clone(new Range16.ptr(42613, 42621, 1), Range16), $clone(new Range16.ptr(42654, 42655, 1), Range16), $clone(new Range16.ptr(42736, 42737, 1), Range16), $clone(new Range16.ptr(43010, 43014, 4), Range16), $clone(new Range16.ptr(43019, 43045, 26), Range16), $clone(new Range16.ptr(43046, 43052, 6), Range16), $clone(new Range16.ptr(43204, 43205, 1), Range16), $clone(new Range16.ptr(43232, 43249, 1), Range16), $clone(new Range16.ptr(43263, 43302, 39), Range16), $clone(new Range16.ptr(43303, 43309, 1), Range16), $clone(new Range16.ptr(43335, 43345, 1), Range16), $clone(new Range16.ptr(43392, 43394, 1), Range16), $clone(new Range16.ptr(43443, 43446, 3), Range16), $clone(new Range16.ptr(43447, 43449, 1), Range16), $clone(new Range16.ptr(43452, 43453, 1), Range16), $clone(new Range16.ptr(43493, 43561, 68), Range16), $clone(new Range16.ptr(43562, 43566, 1), Range16), $clone(new Range16.ptr(43569, 43570, 1), Range16), $clone(new Range16.ptr(43573, 43574, 1), Range16), $clone(new Range16.ptr(43587, 43596, 9), Range16), $clone(new Range16.ptr(43644, 43696, 52), Range16), $clone(new Range16.ptr(43698, 43700, 1), Range16), $clone(new Range16.ptr(43703, 43704, 1), Range16), $clone(new Range16.ptr(43710, 43711, 1), Range16), $clone(new Range16.ptr(43713, 43756, 43), Range16), $clone(new Range16.ptr(43757, 43766, 9), Range16), $clone(new Range16.ptr(44005, 44008, 3), Range16), $clone(new Range16.ptr(44013, 64286, 20273), Range16), $clone(new Range16.ptr(65024, 65039, 1), Range16), $clone(new Range16.ptr(65056, 65071, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66045, 66272, 227), Range32), $clone(new Range32.ptr(66422, 66426, 1), Range32), $clone(new Range32.ptr(68097, 68099, 1), Range32), $clone(new Range32.ptr(68101, 68102, 1), Range32), $clone(new Range32.ptr(68108, 68111, 1), Range32), $clone(new Range32.ptr(68152, 68154, 1), Range32), $clone(new Range32.ptr(68159, 68325, 166), Range32), $clone(new Range32.ptr(68326, 68900, 574), Range32), $clone(new Range32.ptr(68901, 68903, 1), Range32), $clone(new Range32.ptr(69291, 69292, 1), Range32), $clone(new Range32.ptr(69446, 69456, 1), Range32), $clone(new Range32.ptr(69633, 69688, 55), Range32), $clone(new Range32.ptr(69689, 69702, 1), Range32), $clone(new Range32.ptr(69759, 69761, 1), Range32), $clone(new Range32.ptr(69811, 69814, 1), Range32), $clone(new Range32.ptr(69817, 69818, 1), Range32), $clone(new Range32.ptr(69888, 69890, 1), Range32), $clone(new Range32.ptr(69927, 69931, 1), Range32), $clone(new Range32.ptr(69933, 69940, 1), Range32), $clone(new Range32.ptr(70003, 70016, 13), Range32), $clone(new Range32.ptr(70017, 70070, 53), Range32), $clone(new Range32.ptr(70071, 70078, 1), Range32), $clone(new Range32.ptr(70089, 70092, 1), Range32), $clone(new Range32.ptr(70095, 70191, 96), Range32), $clone(new Range32.ptr(70192, 70193, 1), Range32), $clone(new Range32.ptr(70196, 70198, 2), Range32), $clone(new Range32.ptr(70199, 70206, 7), Range32), $clone(new Range32.ptr(70367, 70371, 4), Range32), $clone(new Range32.ptr(70372, 70378, 1), Range32), $clone(new Range32.ptr(70400, 70401, 1), Range32), $clone(new Range32.ptr(70459, 70460, 1), Range32), $clone(new Range32.ptr(70464, 70502, 38), Range32), $clone(new Range32.ptr(70503, 70508, 1), Range32), $clone(new Range32.ptr(70512, 70516, 1), Range32), $clone(new Range32.ptr(70712, 70719, 1), Range32), $clone(new Range32.ptr(70722, 70724, 1), Range32), $clone(new Range32.ptr(70726, 70750, 24), Range32), $clone(new Range32.ptr(70835, 70840, 1), Range32), $clone(new Range32.ptr(70842, 70847, 5), Range32), $clone(new Range32.ptr(70848, 70850, 2), Range32), $clone(new Range32.ptr(70851, 71090, 239), Range32), $clone(new Range32.ptr(71091, 71093, 1), Range32), $clone(new Range32.ptr(71100, 71101, 1), Range32), $clone(new Range32.ptr(71103, 71104, 1), Range32), $clone(new Range32.ptr(71132, 71133, 1), Range32), $clone(new Range32.ptr(71219, 71226, 1), Range32), $clone(new Range32.ptr(71229, 71231, 2), Range32), $clone(new Range32.ptr(71232, 71339, 107), Range32), $clone(new Range32.ptr(71341, 71344, 3), Range32), $clone(new Range32.ptr(71345, 71349, 1), Range32), $clone(new Range32.ptr(71351, 71453, 102), Range32), $clone(new Range32.ptr(71454, 71455, 1), Range32), $clone(new Range32.ptr(71458, 71461, 1), Range32), $clone(new Range32.ptr(71463, 71467, 1), Range32), $clone(new Range32.ptr(71727, 71735, 1), Range32), $clone(new Range32.ptr(71737, 71738, 1), Range32), $clone(new Range32.ptr(71995, 71996, 1), Range32), $clone(new Range32.ptr(71998, 72003, 5), Range32), $clone(new Range32.ptr(72148, 72151, 1), Range32), $clone(new Range32.ptr(72154, 72155, 1), Range32), $clone(new Range32.ptr(72160, 72193, 33), Range32), $clone(new Range32.ptr(72194, 72202, 1), Range32), $clone(new Range32.ptr(72243, 72248, 1), Range32), $clone(new Range32.ptr(72251, 72254, 1), Range32), $clone(new Range32.ptr(72263, 72273, 10), Range32), $clone(new Range32.ptr(72274, 72278, 1), Range32), $clone(new Range32.ptr(72281, 72283, 1), Range32), $clone(new Range32.ptr(72330, 72342, 1), Range32), $clone(new Range32.ptr(72344, 72345, 1), Range32), $clone(new Range32.ptr(72752, 72758, 1), Range32), $clone(new Range32.ptr(72760, 72765, 1), Range32), $clone(new Range32.ptr(72767, 72850, 83), Range32), $clone(new Range32.ptr(72851, 72871, 1), Range32), $clone(new Range32.ptr(72874, 72880, 1), Range32), $clone(new Range32.ptr(72882, 72883, 1), Range32), $clone(new Range32.ptr(72885, 72886, 1), Range32), $clone(new Range32.ptr(73009, 73014, 1), Range32), $clone(new Range32.ptr(73018, 73020, 2), Range32), $clone(new Range32.ptr(73021, 73023, 2), Range32), $clone(new Range32.ptr(73024, 73029, 1), Range32), $clone(new Range32.ptr(73031, 73104, 73), Range32), $clone(new Range32.ptr(73105, 73109, 4), Range32), $clone(new Range32.ptr(73111, 73459, 348), Range32), $clone(new Range32.ptr(73460, 92912, 19452), Range32), $clone(new Range32.ptr(92913, 92916, 1), Range32), $clone(new Range32.ptr(92976, 92982, 1), Range32), $clone(new Range32.ptr(94031, 94095, 64), Range32), $clone(new Range32.ptr(94096, 94098, 1), Range32), $clone(new Range32.ptr(94180, 113821, 19641), Range32), $clone(new Range32.ptr(113822, 119143, 5321), Range32), $clone(new Range32.ptr(119144, 119145, 1), Range32), $clone(new Range32.ptr(119163, 119170, 1), Range32), $clone(new Range32.ptr(119173, 119179, 1), Range32), $clone(new Range32.ptr(119210, 119213, 1), Range32), $clone(new Range32.ptr(119362, 119364, 1), Range32), $clone(new Range32.ptr(121344, 121398, 1), Range32), $clone(new Range32.ptr(121403, 121452, 1), Range32), $clone(new Range32.ptr(121461, 121476, 15), Range32), $clone(new Range32.ptr(121499, 121503, 1), Range32), $clone(new Range32.ptr(121505, 121519, 1), Range32), $clone(new Range32.ptr(122880, 122886, 1), Range32), $clone(new Range32.ptr(122888, 122904, 1), Range32), $clone(new Range32.ptr(122907, 122913, 1), Range32), $clone(new Range32.ptr(122915, 122916, 1), Range32), $clone(new Range32.ptr(122918, 122922, 1), Range32), $clone(new Range32.ptr(123184, 123190, 1), Range32), $clone(new Range32.ptr(123628, 123631, 1), Range32), $clone(new Range32.ptr(125136, 125142, 1), Range32), $clone(new Range32.ptr(125252, 125258, 1), Range32), $clone(new Range32.ptr(917760, 917999, 1), Range32)]), 0);
		_N = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(48, 57, 1), Range16), $clone(new Range16.ptr(178, 179, 1), Range16), $clone(new Range16.ptr(185, 188, 3), Range16), $clone(new Range16.ptr(189, 190, 1), Range16), $clone(new Range16.ptr(1632, 1641, 1), Range16), $clone(new Range16.ptr(1776, 1785, 1), Range16), $clone(new Range16.ptr(1984, 1993, 1), Range16), $clone(new Range16.ptr(2406, 2415, 1), Range16), $clone(new Range16.ptr(2534, 2543, 1), Range16), $clone(new Range16.ptr(2548, 2553, 1), Range16), $clone(new Range16.ptr(2662, 2671, 1), Range16), $clone(new Range16.ptr(2790, 2799, 1), Range16), $clone(new Range16.ptr(2918, 2927, 1), Range16), $clone(new Range16.ptr(2930, 2935, 1), Range16), $clone(new Range16.ptr(3046, 3058, 1), Range16), $clone(new Range16.ptr(3174, 3183, 1), Range16), $clone(new Range16.ptr(3192, 3198, 1), Range16), $clone(new Range16.ptr(3302, 3311, 1), Range16), $clone(new Range16.ptr(3416, 3422, 1), Range16), $clone(new Range16.ptr(3430, 3448, 1), Range16), $clone(new Range16.ptr(3558, 3567, 1), Range16), $clone(new Range16.ptr(3664, 3673, 1), Range16), $clone(new Range16.ptr(3792, 3801, 1), Range16), $clone(new Range16.ptr(3872, 3891, 1), Range16), $clone(new Range16.ptr(4160, 4169, 1), Range16), $clone(new Range16.ptr(4240, 4249, 1), Range16), $clone(new Range16.ptr(4969, 4988, 1), Range16), $clone(new Range16.ptr(5870, 5872, 1), Range16), $clone(new Range16.ptr(6112, 6121, 1), Range16), $clone(new Range16.ptr(6128, 6137, 1), Range16), $clone(new Range16.ptr(6160, 6169, 1), Range16), $clone(new Range16.ptr(6470, 6479, 1), Range16), $clone(new Range16.ptr(6608, 6618, 1), Range16), $clone(new Range16.ptr(6784, 6793, 1), Range16), $clone(new Range16.ptr(6800, 6809, 1), Range16), $clone(new Range16.ptr(6992, 7001, 1), Range16), $clone(new Range16.ptr(7088, 7097, 1), Range16), $clone(new Range16.ptr(7232, 7241, 1), Range16), $clone(new Range16.ptr(7248, 7257, 1), Range16), $clone(new Range16.ptr(8304, 8308, 4), Range16), $clone(new Range16.ptr(8309, 8313, 1), Range16), $clone(new Range16.ptr(8320, 8329, 1), Range16), $clone(new Range16.ptr(8528, 8578, 1), Range16), $clone(new Range16.ptr(8581, 8585, 1), Range16), $clone(new Range16.ptr(9312, 9371, 1), Range16), $clone(new Range16.ptr(9450, 9471, 1), Range16), $clone(new Range16.ptr(10102, 10131, 1), Range16), $clone(new Range16.ptr(11517, 12295, 778), Range16), $clone(new Range16.ptr(12321, 12329, 1), Range16), $clone(new Range16.ptr(12344, 12346, 1), Range16), $clone(new Range16.ptr(12690, 12693, 1), Range16), $clone(new Range16.ptr(12832, 12841, 1), Range16), $clone(new Range16.ptr(12872, 12879, 1), Range16), $clone(new Range16.ptr(12881, 12895, 1), Range16), $clone(new Range16.ptr(12928, 12937, 1), Range16), $clone(new Range16.ptr(12977, 12991, 1), Range16), $clone(new Range16.ptr(42528, 42537, 1), Range16), $clone(new Range16.ptr(42726, 42735, 1), Range16), $clone(new Range16.ptr(43056, 43061, 1), Range16), $clone(new Range16.ptr(43216, 43225, 1), Range16), $clone(new Range16.ptr(43264, 43273, 1), Range16), $clone(new Range16.ptr(43472, 43481, 1), Range16), $clone(new Range16.ptr(43504, 43513, 1), Range16), $clone(new Range16.ptr(43600, 43609, 1), Range16), $clone(new Range16.ptr(44016, 44025, 1), Range16), $clone(new Range16.ptr(65296, 65305, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65799, 65843, 1), Range32), $clone(new Range32.ptr(65856, 65912, 1), Range32), $clone(new Range32.ptr(65930, 65931, 1), Range32), $clone(new Range32.ptr(66273, 66299, 1), Range32), $clone(new Range32.ptr(66336, 66339, 1), Range32), $clone(new Range32.ptr(66369, 66378, 9), Range32), $clone(new Range32.ptr(66513, 66517, 1), Range32), $clone(new Range32.ptr(66720, 66729, 1), Range32), $clone(new Range32.ptr(67672, 67679, 1), Range32), $clone(new Range32.ptr(67705, 67711, 1), Range32), $clone(new Range32.ptr(67751, 67759, 1), Range32), $clone(new Range32.ptr(67835, 67839, 1), Range32), $clone(new Range32.ptr(67862, 67867, 1), Range32), $clone(new Range32.ptr(68028, 68029, 1), Range32), $clone(new Range32.ptr(68032, 68047, 1), Range32), $clone(new Range32.ptr(68050, 68095, 1), Range32), $clone(new Range32.ptr(68160, 68168, 1), Range32), $clone(new Range32.ptr(68221, 68222, 1), Range32), $clone(new Range32.ptr(68253, 68255, 1), Range32), $clone(new Range32.ptr(68331, 68335, 1), Range32), $clone(new Range32.ptr(68440, 68447, 1), Range32), $clone(new Range32.ptr(68472, 68479, 1), Range32), $clone(new Range32.ptr(68521, 68527, 1), Range32), $clone(new Range32.ptr(68858, 68863, 1), Range32), $clone(new Range32.ptr(68912, 68921, 1), Range32), $clone(new Range32.ptr(69216, 69246, 1), Range32), $clone(new Range32.ptr(69405, 69414, 1), Range32), $clone(new Range32.ptr(69457, 69460, 1), Range32), $clone(new Range32.ptr(69573, 69579, 1), Range32), $clone(new Range32.ptr(69714, 69743, 1), Range32), $clone(new Range32.ptr(69872, 69881, 1), Range32), $clone(new Range32.ptr(69942, 69951, 1), Range32), $clone(new Range32.ptr(70096, 70105, 1), Range32), $clone(new Range32.ptr(70113, 70132, 1), Range32), $clone(new Range32.ptr(70384, 70393, 1), Range32), $clone(new Range32.ptr(70736, 70745, 1), Range32), $clone(new Range32.ptr(70864, 70873, 1), Range32), $clone(new Range32.ptr(71248, 71257, 1), Range32), $clone(new Range32.ptr(71360, 71369, 1), Range32), $clone(new Range32.ptr(71472, 71483, 1), Range32), $clone(new Range32.ptr(71904, 71922, 1), Range32), $clone(new Range32.ptr(72016, 72025, 1), Range32), $clone(new Range32.ptr(72784, 72812, 1), Range32), $clone(new Range32.ptr(73040, 73049, 1), Range32), $clone(new Range32.ptr(73120, 73129, 1), Range32), $clone(new Range32.ptr(73664, 73684, 1), Range32), $clone(new Range32.ptr(74752, 74862, 1), Range32), $clone(new Range32.ptr(92768, 92777, 1), Range32), $clone(new Range32.ptr(93008, 93017, 1), Range32), $clone(new Range32.ptr(93019, 93025, 1), Range32), $clone(new Range32.ptr(93824, 93846, 1), Range32), $clone(new Range32.ptr(119520, 119539, 1), Range32), $clone(new Range32.ptr(119648, 119672, 1), Range32), $clone(new Range32.ptr(120782, 120831, 1), Range32), $clone(new Range32.ptr(123200, 123209, 1), Range32), $clone(new Range32.ptr(123632, 123641, 1), Range32), $clone(new Range32.ptr(125127, 125135, 1), Range32), $clone(new Range32.ptr(125264, 125273, 1), Range32), $clone(new Range32.ptr(126065, 126123, 1), Range32), $clone(new Range32.ptr(126125, 126127, 1), Range32), $clone(new Range32.ptr(126129, 126132, 1), Range32), $clone(new Range32.ptr(126209, 126253, 1), Range32), $clone(new Range32.ptr(126255, 126269, 1), Range32), $clone(new Range32.ptr(127232, 127244, 1), Range32), $clone(new Range32.ptr(130032, 130041, 1), Range32)]), 4);
		_Nd = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(48, 57, 1), Range16), $clone(new Range16.ptr(1632, 1641, 1), Range16), $clone(new Range16.ptr(1776, 1785, 1), Range16), $clone(new Range16.ptr(1984, 1993, 1), Range16), $clone(new Range16.ptr(2406, 2415, 1), Range16), $clone(new Range16.ptr(2534, 2543, 1), Range16), $clone(new Range16.ptr(2662, 2671, 1), Range16), $clone(new Range16.ptr(2790, 2799, 1), Range16), $clone(new Range16.ptr(2918, 2927, 1), Range16), $clone(new Range16.ptr(3046, 3055, 1), Range16), $clone(new Range16.ptr(3174, 3183, 1), Range16), $clone(new Range16.ptr(3302, 3311, 1), Range16), $clone(new Range16.ptr(3430, 3439, 1), Range16), $clone(new Range16.ptr(3558, 3567, 1), Range16), $clone(new Range16.ptr(3664, 3673, 1), Range16), $clone(new Range16.ptr(3792, 3801, 1), Range16), $clone(new Range16.ptr(3872, 3881, 1), Range16), $clone(new Range16.ptr(4160, 4169, 1), Range16), $clone(new Range16.ptr(4240, 4249, 1), Range16), $clone(new Range16.ptr(6112, 6121, 1), Range16), $clone(new Range16.ptr(6160, 6169, 1), Range16), $clone(new Range16.ptr(6470, 6479, 1), Range16), $clone(new Range16.ptr(6608, 6617, 1), Range16), $clone(new Range16.ptr(6784, 6793, 1), Range16), $clone(new Range16.ptr(6800, 6809, 1), Range16), $clone(new Range16.ptr(6992, 7001, 1), Range16), $clone(new Range16.ptr(7088, 7097, 1), Range16), $clone(new Range16.ptr(7232, 7241, 1), Range16), $clone(new Range16.ptr(7248, 7257, 1), Range16), $clone(new Range16.ptr(42528, 42537, 1), Range16), $clone(new Range16.ptr(43216, 43225, 1), Range16), $clone(new Range16.ptr(43264, 43273, 1), Range16), $clone(new Range16.ptr(43472, 43481, 1), Range16), $clone(new Range16.ptr(43504, 43513, 1), Range16), $clone(new Range16.ptr(43600, 43609, 1), Range16), $clone(new Range16.ptr(44016, 44025, 1), Range16), $clone(new Range16.ptr(65296, 65305, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66720, 66729, 1), Range32), $clone(new Range32.ptr(68912, 68921, 1), Range32), $clone(new Range32.ptr(69734, 69743, 1), Range32), $clone(new Range32.ptr(69872, 69881, 1), Range32), $clone(new Range32.ptr(69942, 69951, 1), Range32), $clone(new Range32.ptr(70096, 70105, 1), Range32), $clone(new Range32.ptr(70384, 70393, 1), Range32), $clone(new Range32.ptr(70736, 70745, 1), Range32), $clone(new Range32.ptr(70864, 70873, 1), Range32), $clone(new Range32.ptr(71248, 71257, 1), Range32), $clone(new Range32.ptr(71360, 71369, 1), Range32), $clone(new Range32.ptr(71472, 71481, 1), Range32), $clone(new Range32.ptr(71904, 71913, 1), Range32), $clone(new Range32.ptr(72016, 72025, 1), Range32), $clone(new Range32.ptr(72784, 72793, 1), Range32), $clone(new Range32.ptr(73040, 73049, 1), Range32), $clone(new Range32.ptr(73120, 73129, 1), Range32), $clone(new Range32.ptr(92768, 92777, 1), Range32), $clone(new Range32.ptr(93008, 93017, 1), Range32), $clone(new Range32.ptr(120782, 120831, 1), Range32), $clone(new Range32.ptr(123200, 123209, 1), Range32), $clone(new Range32.ptr(123632, 123641, 1), Range32), $clone(new Range32.ptr(125264, 125273, 1), Range32), $clone(new Range32.ptr(130032, 130041, 1), Range32)]), 1);
		_Nl = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5870, 5872, 1), Range16), $clone(new Range16.ptr(8544, 8578, 1), Range16), $clone(new Range16.ptr(8581, 8584, 1), Range16), $clone(new Range16.ptr(12295, 12321, 26), Range16), $clone(new Range16.ptr(12322, 12329, 1), Range16), $clone(new Range16.ptr(12344, 12346, 1), Range16), $clone(new Range16.ptr(42726, 42735, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65856, 65908, 1), Range32), $clone(new Range32.ptr(66369, 66378, 9), Range32), $clone(new Range32.ptr(66513, 66517, 1), Range32), $clone(new Range32.ptr(74752, 74862, 1), Range32)]), 0);
		_No = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(178, 179, 1), Range16), $clone(new Range16.ptr(185, 188, 3), Range16), $clone(new Range16.ptr(189, 190, 1), Range16), $clone(new Range16.ptr(2548, 2553, 1), Range16), $clone(new Range16.ptr(2930, 2935, 1), Range16), $clone(new Range16.ptr(3056, 3058, 1), Range16), $clone(new Range16.ptr(3192, 3198, 1), Range16), $clone(new Range16.ptr(3416, 3422, 1), Range16), $clone(new Range16.ptr(3440, 3448, 1), Range16), $clone(new Range16.ptr(3882, 3891, 1), Range16), $clone(new Range16.ptr(4969, 4988, 1), Range16), $clone(new Range16.ptr(6128, 6137, 1), Range16), $clone(new Range16.ptr(6618, 8304, 1686), Range16), $clone(new Range16.ptr(8308, 8313, 1), Range16), $clone(new Range16.ptr(8320, 8329, 1), Range16), $clone(new Range16.ptr(8528, 8543, 1), Range16), $clone(new Range16.ptr(8585, 9312, 727), Range16), $clone(new Range16.ptr(9313, 9371, 1), Range16), $clone(new Range16.ptr(9450, 9471, 1), Range16), $clone(new Range16.ptr(10102, 10131, 1), Range16), $clone(new Range16.ptr(11517, 12690, 1173), Range16), $clone(new Range16.ptr(12691, 12693, 1), Range16), $clone(new Range16.ptr(12832, 12841, 1), Range16), $clone(new Range16.ptr(12872, 12879, 1), Range16), $clone(new Range16.ptr(12881, 12895, 1), Range16), $clone(new Range16.ptr(12928, 12937, 1), Range16), $clone(new Range16.ptr(12977, 12991, 1), Range16), $clone(new Range16.ptr(43056, 43061, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65799, 65843, 1), Range32), $clone(new Range32.ptr(65909, 65912, 1), Range32), $clone(new Range32.ptr(65930, 65931, 1), Range32), $clone(new Range32.ptr(66273, 66299, 1), Range32), $clone(new Range32.ptr(66336, 66339, 1), Range32), $clone(new Range32.ptr(67672, 67679, 1), Range32), $clone(new Range32.ptr(67705, 67711, 1), Range32), $clone(new Range32.ptr(67751, 67759, 1), Range32), $clone(new Range32.ptr(67835, 67839, 1), Range32), $clone(new Range32.ptr(67862, 67867, 1), Range32), $clone(new Range32.ptr(68028, 68029, 1), Range32), $clone(new Range32.ptr(68032, 68047, 1), Range32), $clone(new Range32.ptr(68050, 68095, 1), Range32), $clone(new Range32.ptr(68160, 68168, 1), Range32), $clone(new Range32.ptr(68221, 68222, 1), Range32), $clone(new Range32.ptr(68253, 68255, 1), Range32), $clone(new Range32.ptr(68331, 68335, 1), Range32), $clone(new Range32.ptr(68440, 68447, 1), Range32), $clone(new Range32.ptr(68472, 68479, 1), Range32), $clone(new Range32.ptr(68521, 68527, 1), Range32), $clone(new Range32.ptr(68858, 68863, 1), Range32), $clone(new Range32.ptr(69216, 69246, 1), Range32), $clone(new Range32.ptr(69405, 69414, 1), Range32), $clone(new Range32.ptr(69457, 69460, 1), Range32), $clone(new Range32.ptr(69573, 69579, 1), Range32), $clone(new Range32.ptr(69714, 69733, 1), Range32), $clone(new Range32.ptr(70113, 70132, 1), Range32), $clone(new Range32.ptr(71482, 71483, 1), Range32), $clone(new Range32.ptr(71914, 71922, 1), Range32), $clone(new Range32.ptr(72794, 72812, 1), Range32), $clone(new Range32.ptr(73664, 73684, 1), Range32), $clone(new Range32.ptr(93019, 93025, 1), Range32), $clone(new Range32.ptr(93824, 93846, 1), Range32), $clone(new Range32.ptr(119520, 119539, 1), Range32), $clone(new Range32.ptr(119648, 119672, 1), Range32), $clone(new Range32.ptr(125127, 125135, 1), Range32), $clone(new Range32.ptr(126065, 126123, 1), Range32), $clone(new Range32.ptr(126125, 126127, 1), Range32), $clone(new Range32.ptr(126129, 126132, 1), Range32), $clone(new Range32.ptr(126209, 126253, 1), Range32), $clone(new Range32.ptr(126255, 126269, 1), Range32), $clone(new Range32.ptr(127232, 127244, 1), Range32)]), 3);
		_P = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(33, 35, 1), Range16), $clone(new Range16.ptr(37, 42, 1), Range16), $clone(new Range16.ptr(44, 47, 1), Range16), $clone(new Range16.ptr(58, 59, 1), Range16), $clone(new Range16.ptr(63, 64, 1), Range16), $clone(new Range16.ptr(91, 93, 1), Range16), $clone(new Range16.ptr(95, 123, 28), Range16), $clone(new Range16.ptr(125, 161, 36), Range16), $clone(new Range16.ptr(167, 171, 4), Range16), $clone(new Range16.ptr(182, 183, 1), Range16), $clone(new Range16.ptr(187, 191, 4), Range16), $clone(new Range16.ptr(894, 903, 9), Range16), $clone(new Range16.ptr(1370, 1375, 1), Range16), $clone(new Range16.ptr(1417, 1418, 1), Range16), $clone(new Range16.ptr(1470, 1472, 2), Range16), $clone(new Range16.ptr(1475, 1478, 3), Range16), $clone(new Range16.ptr(1523, 1524, 1), Range16), $clone(new Range16.ptr(1545, 1546, 1), Range16), $clone(new Range16.ptr(1548, 1549, 1), Range16), $clone(new Range16.ptr(1563, 1566, 3), Range16), $clone(new Range16.ptr(1567, 1642, 75), Range16), $clone(new Range16.ptr(1643, 1645, 1), Range16), $clone(new Range16.ptr(1748, 1792, 44), Range16), $clone(new Range16.ptr(1793, 1805, 1), Range16), $clone(new Range16.ptr(2039, 2041, 1), Range16), $clone(new Range16.ptr(2096, 2110, 1), Range16), $clone(new Range16.ptr(2142, 2404, 262), Range16), $clone(new Range16.ptr(2405, 2416, 11), Range16), $clone(new Range16.ptr(2557, 2678, 121), Range16), $clone(new Range16.ptr(2800, 3191, 391), Range16), $clone(new Range16.ptr(3204, 3572, 368), Range16), $clone(new Range16.ptr(3663, 3674, 11), Range16), $clone(new Range16.ptr(3675, 3844, 169), Range16), $clone(new Range16.ptr(3845, 3858, 1), Range16), $clone(new Range16.ptr(3860, 3898, 38), Range16), $clone(new Range16.ptr(3899, 3901, 1), Range16), $clone(new Range16.ptr(3973, 4048, 75), Range16), $clone(new Range16.ptr(4049, 4052, 1), Range16), $clone(new Range16.ptr(4057, 4058, 1), Range16), $clone(new Range16.ptr(4170, 4175, 1), Range16), $clone(new Range16.ptr(4347, 4960, 613), Range16), $clone(new Range16.ptr(4961, 4968, 1), Range16), $clone(new Range16.ptr(5120, 5742, 622), Range16), $clone(new Range16.ptr(5787, 5788, 1), Range16), $clone(new Range16.ptr(5867, 5869, 1), Range16), $clone(new Range16.ptr(5941, 5942, 1), Range16), $clone(new Range16.ptr(6100, 6102, 1), Range16), $clone(new Range16.ptr(6104, 6106, 1), Range16), $clone(new Range16.ptr(6144, 6154, 1), Range16), $clone(new Range16.ptr(6468, 6469, 1), Range16), $clone(new Range16.ptr(6686, 6687, 1), Range16), $clone(new Range16.ptr(6816, 6822, 1), Range16), $clone(new Range16.ptr(6824, 6829, 1), Range16), $clone(new Range16.ptr(7002, 7008, 1), Range16), $clone(new Range16.ptr(7164, 7167, 1), Range16), $clone(new Range16.ptr(7227, 7231, 1), Range16), $clone(new Range16.ptr(7294, 7295, 1), Range16), $clone(new Range16.ptr(7360, 7367, 1), Range16), $clone(new Range16.ptr(7379, 8208, 829), Range16), $clone(new Range16.ptr(8209, 8231, 1), Range16), $clone(new Range16.ptr(8240, 8259, 1), Range16), $clone(new Range16.ptr(8261, 8273, 1), Range16), $clone(new Range16.ptr(8275, 8286, 1), Range16), $clone(new Range16.ptr(8317, 8318, 1), Range16), $clone(new Range16.ptr(8333, 8334, 1), Range16), $clone(new Range16.ptr(8968, 8971, 1), Range16), $clone(new Range16.ptr(9001, 9002, 1), Range16), $clone(new Range16.ptr(10088, 10101, 1), Range16), $clone(new Range16.ptr(10181, 10182, 1), Range16), $clone(new Range16.ptr(10214, 10223, 1), Range16), $clone(new Range16.ptr(10627, 10648, 1), Range16), $clone(new Range16.ptr(10712, 10715, 1), Range16), $clone(new Range16.ptr(10748, 10749, 1), Range16), $clone(new Range16.ptr(11513, 11516, 1), Range16), $clone(new Range16.ptr(11518, 11519, 1), Range16), $clone(new Range16.ptr(11632, 11776, 144), Range16), $clone(new Range16.ptr(11777, 11822, 1), Range16), $clone(new Range16.ptr(11824, 11855, 1), Range16), $clone(new Range16.ptr(11858, 12289, 431), Range16), $clone(new Range16.ptr(12290, 12291, 1), Range16), $clone(new Range16.ptr(12296, 12305, 1), Range16), $clone(new Range16.ptr(12308, 12319, 1), Range16), $clone(new Range16.ptr(12336, 12349, 13), Range16), $clone(new Range16.ptr(12448, 12539, 91), Range16), $clone(new Range16.ptr(42238, 42239, 1), Range16), $clone(new Range16.ptr(42509, 42511, 1), Range16), $clone(new Range16.ptr(42611, 42622, 11), Range16), $clone(new Range16.ptr(42738, 42743, 1), Range16), $clone(new Range16.ptr(43124, 43127, 1), Range16), $clone(new Range16.ptr(43214, 43215, 1), Range16), $clone(new Range16.ptr(43256, 43258, 1), Range16), $clone(new Range16.ptr(43260, 43310, 50), Range16), $clone(new Range16.ptr(43311, 43359, 48), Range16), $clone(new Range16.ptr(43457, 43469, 1), Range16), $clone(new Range16.ptr(43486, 43487, 1), Range16), $clone(new Range16.ptr(43612, 43615, 1), Range16), $clone(new Range16.ptr(43742, 43743, 1), Range16), $clone(new Range16.ptr(43760, 43761, 1), Range16), $clone(new Range16.ptr(44011, 64830, 20819), Range16), $clone(new Range16.ptr(64831, 65040, 209), Range16), $clone(new Range16.ptr(65041, 65049, 1), Range16), $clone(new Range16.ptr(65072, 65106, 1), Range16), $clone(new Range16.ptr(65108, 65121, 1), Range16), $clone(new Range16.ptr(65123, 65128, 5), Range16), $clone(new Range16.ptr(65130, 65131, 1), Range16), $clone(new Range16.ptr(65281, 65283, 1), Range16), $clone(new Range16.ptr(65285, 65290, 1), Range16), $clone(new Range16.ptr(65292, 65295, 1), Range16), $clone(new Range16.ptr(65306, 65307, 1), Range16), $clone(new Range16.ptr(65311, 65312, 1), Range16), $clone(new Range16.ptr(65339, 65341, 1), Range16), $clone(new Range16.ptr(65343, 65371, 28), Range16), $clone(new Range16.ptr(65373, 65375, 2), Range16), $clone(new Range16.ptr(65376, 65381, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65792, 65794, 1), Range32), $clone(new Range32.ptr(66463, 66512, 49), Range32), $clone(new Range32.ptr(66927, 67671, 744), Range32), $clone(new Range32.ptr(67871, 67903, 32), Range32), $clone(new Range32.ptr(68176, 68184, 1), Range32), $clone(new Range32.ptr(68223, 68336, 113), Range32), $clone(new Range32.ptr(68337, 68342, 1), Range32), $clone(new Range32.ptr(68409, 68415, 1), Range32), $clone(new Range32.ptr(68505, 68508, 1), Range32), $clone(new Range32.ptr(69293, 69461, 168), Range32), $clone(new Range32.ptr(69462, 69465, 1), Range32), $clone(new Range32.ptr(69703, 69709, 1), Range32), $clone(new Range32.ptr(69819, 69820, 1), Range32), $clone(new Range32.ptr(69822, 69825, 1), Range32), $clone(new Range32.ptr(69952, 69955, 1), Range32), $clone(new Range32.ptr(70004, 70005, 1), Range32), $clone(new Range32.ptr(70085, 70088, 1), Range32), $clone(new Range32.ptr(70093, 70107, 14), Range32), $clone(new Range32.ptr(70109, 70111, 1), Range32), $clone(new Range32.ptr(70200, 70205, 1), Range32), $clone(new Range32.ptr(70313, 70731, 418), Range32), $clone(new Range32.ptr(70732, 70735, 1), Range32), $clone(new Range32.ptr(70746, 70747, 1), Range32), $clone(new Range32.ptr(70749, 70854, 105), Range32), $clone(new Range32.ptr(71105, 71127, 1), Range32), $clone(new Range32.ptr(71233, 71235, 1), Range32), $clone(new Range32.ptr(71264, 71276, 1), Range32), $clone(new Range32.ptr(71484, 71486, 1), Range32), $clone(new Range32.ptr(71739, 72004, 265), Range32), $clone(new Range32.ptr(72005, 72006, 1), Range32), $clone(new Range32.ptr(72162, 72255, 93), Range32), $clone(new Range32.ptr(72256, 72262, 1), Range32), $clone(new Range32.ptr(72346, 72348, 1), Range32), $clone(new Range32.ptr(72350, 72354, 1), Range32), $clone(new Range32.ptr(72769, 72773, 1), Range32), $clone(new Range32.ptr(72816, 72817, 1), Range32), $clone(new Range32.ptr(73463, 73464, 1), Range32), $clone(new Range32.ptr(73727, 74864, 1137), Range32), $clone(new Range32.ptr(74865, 74868, 1), Range32), $clone(new Range32.ptr(92782, 92783, 1), Range32), $clone(new Range32.ptr(92917, 92983, 66), Range32), $clone(new Range32.ptr(92984, 92987, 1), Range32), $clone(new Range32.ptr(92996, 93847, 851), Range32), $clone(new Range32.ptr(93848, 93850, 1), Range32), $clone(new Range32.ptr(94178, 113823, 19645), Range32), $clone(new Range32.ptr(121479, 121483, 1), Range32), $clone(new Range32.ptr(125278, 125279, 1), Range32)]), 11);
		_Pc = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(95, 8255, 8160), Range16), $clone(new Range16.ptr(8256, 8276, 20), Range16), $clone(new Range16.ptr(65075, 65076, 1), Range16), $clone(new Range16.ptr(65101, 65103, 1), Range16), $clone(new Range16.ptr(65343, 65343, 1), Range16)]), sliceType$1.nil, 0);
		_Pd = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(45, 1418, 1373), Range16), $clone(new Range16.ptr(1470, 5120, 3650), Range16), $clone(new Range16.ptr(6150, 8208, 2058), Range16), $clone(new Range16.ptr(8209, 8213, 1), Range16), $clone(new Range16.ptr(11799, 11802, 3), Range16), $clone(new Range16.ptr(11834, 11835, 1), Range16), $clone(new Range16.ptr(11840, 12316, 476), Range16), $clone(new Range16.ptr(12336, 12448, 112), Range16), $clone(new Range16.ptr(65073, 65074, 1), Range16), $clone(new Range16.ptr(65112, 65123, 11), Range16), $clone(new Range16.ptr(65293, 65293, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(69293, 69293, 1), Range32)]), 0);
		_Pe = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(41, 93, 52), Range16), $clone(new Range16.ptr(125, 3899, 3774), Range16), $clone(new Range16.ptr(3901, 5788, 1887), Range16), $clone(new Range16.ptr(8262, 8318, 56), Range16), $clone(new Range16.ptr(8334, 8969, 635), Range16), $clone(new Range16.ptr(8971, 9002, 31), Range16), $clone(new Range16.ptr(10089, 10101, 2), Range16), $clone(new Range16.ptr(10182, 10215, 33), Range16), $clone(new Range16.ptr(10217, 10223, 2), Range16), $clone(new Range16.ptr(10628, 10648, 2), Range16), $clone(new Range16.ptr(10713, 10715, 2), Range16), $clone(new Range16.ptr(10749, 11811, 1062), Range16), $clone(new Range16.ptr(11813, 11817, 2), Range16), $clone(new Range16.ptr(12297, 12305, 2), Range16), $clone(new Range16.ptr(12309, 12315, 2), Range16), $clone(new Range16.ptr(12318, 12319, 1), Range16), $clone(new Range16.ptr(64830, 65048, 218), Range16), $clone(new Range16.ptr(65078, 65092, 2), Range16), $clone(new Range16.ptr(65096, 65114, 18), Range16), $clone(new Range16.ptr(65116, 65118, 2), Range16), $clone(new Range16.ptr(65289, 65341, 52), Range16), $clone(new Range16.ptr(65373, 65379, 3), Range16)]), sliceType$1.nil, 1);
		_Pf = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(187, 8217, 8030), Range16), $clone(new Range16.ptr(8221, 8250, 29), Range16), $clone(new Range16.ptr(11779, 11781, 2), Range16), $clone(new Range16.ptr(11786, 11789, 3), Range16), $clone(new Range16.ptr(11805, 11809, 4), Range16)]), sliceType$1.nil, 0);
		_Pi = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(171, 8216, 8045), Range16), $clone(new Range16.ptr(8219, 8220, 1), Range16), $clone(new Range16.ptr(8223, 8249, 26), Range16), $clone(new Range16.ptr(11778, 11780, 2), Range16), $clone(new Range16.ptr(11785, 11788, 3), Range16), $clone(new Range16.ptr(11804, 11808, 4), Range16)]), sliceType$1.nil, 0);
		_Po = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(33, 35, 1), Range16), $clone(new Range16.ptr(37, 39, 1), Range16), $clone(new Range16.ptr(42, 46, 2), Range16), $clone(new Range16.ptr(47, 58, 11), Range16), $clone(new Range16.ptr(59, 63, 4), Range16), $clone(new Range16.ptr(64, 92, 28), Range16), $clone(new Range16.ptr(161, 167, 6), Range16), $clone(new Range16.ptr(182, 183, 1), Range16), $clone(new Range16.ptr(191, 894, 703), Range16), $clone(new Range16.ptr(903, 1370, 467), Range16), $clone(new Range16.ptr(1371, 1375, 1), Range16), $clone(new Range16.ptr(1417, 1472, 55), Range16), $clone(new Range16.ptr(1475, 1478, 3), Range16), $clone(new Range16.ptr(1523, 1524, 1), Range16), $clone(new Range16.ptr(1545, 1546, 1), Range16), $clone(new Range16.ptr(1548, 1549, 1), Range16), $clone(new Range16.ptr(1563, 1566, 3), Range16), $clone(new Range16.ptr(1567, 1642, 75), Range16), $clone(new Range16.ptr(1643, 1645, 1), Range16), $clone(new Range16.ptr(1748, 1792, 44), Range16), $clone(new Range16.ptr(1793, 1805, 1), Range16), $clone(new Range16.ptr(2039, 2041, 1), Range16), $clone(new Range16.ptr(2096, 2110, 1), Range16), $clone(new Range16.ptr(2142, 2404, 262), Range16), $clone(new Range16.ptr(2405, 2416, 11), Range16), $clone(new Range16.ptr(2557, 2678, 121), Range16), $clone(new Range16.ptr(2800, 3191, 391), Range16), $clone(new Range16.ptr(3204, 3572, 368), Range16), $clone(new Range16.ptr(3663, 3674, 11), Range16), $clone(new Range16.ptr(3675, 3844, 169), Range16), $clone(new Range16.ptr(3845, 3858, 1), Range16), $clone(new Range16.ptr(3860, 3973, 113), Range16), $clone(new Range16.ptr(4048, 4052, 1), Range16), $clone(new Range16.ptr(4057, 4058, 1), Range16), $clone(new Range16.ptr(4170, 4175, 1), Range16), $clone(new Range16.ptr(4347, 4960, 613), Range16), $clone(new Range16.ptr(4961, 4968, 1), Range16), $clone(new Range16.ptr(5742, 5867, 125), Range16), $clone(new Range16.ptr(5868, 5869, 1), Range16), $clone(new Range16.ptr(5941, 5942, 1), Range16), $clone(new Range16.ptr(6100, 6102, 1), Range16), $clone(new Range16.ptr(6104, 6106, 1), Range16), $clone(new Range16.ptr(6144, 6149, 1), Range16), $clone(new Range16.ptr(6151, 6154, 1), Range16), $clone(new Range16.ptr(6468, 6469, 1), Range16), $clone(new Range16.ptr(6686, 6687, 1), Range16), $clone(new Range16.ptr(6816, 6822, 1), Range16), $clone(new Range16.ptr(6824, 6829, 1), Range16), $clone(new Range16.ptr(7002, 7008, 1), Range16), $clone(new Range16.ptr(7164, 7167, 1), Range16), $clone(new Range16.ptr(7227, 7231, 1), Range16), $clone(new Range16.ptr(7294, 7295, 1), Range16), $clone(new Range16.ptr(7360, 7367, 1), Range16), $clone(new Range16.ptr(7379, 8214, 835), Range16), $clone(new Range16.ptr(8215, 8224, 9), Range16), $clone(new Range16.ptr(8225, 8231, 1), Range16), $clone(new Range16.ptr(8240, 8248, 1), Range16), $clone(new Range16.ptr(8251, 8254, 1), Range16), $clone(new Range16.ptr(8257, 8259, 1), Range16), $clone(new Range16.ptr(8263, 8273, 1), Range16), $clone(new Range16.ptr(8275, 8277, 2), Range16), $clone(new Range16.ptr(8278, 8286, 1), Range16), $clone(new Range16.ptr(11513, 11516, 1), Range16), $clone(new Range16.ptr(11518, 11519, 1), Range16), $clone(new Range16.ptr(11632, 11776, 144), Range16), $clone(new Range16.ptr(11777, 11782, 5), Range16), $clone(new Range16.ptr(11783, 11784, 1), Range16), $clone(new Range16.ptr(11787, 11790, 3), Range16), $clone(new Range16.ptr(11791, 11798, 1), Range16), $clone(new Range16.ptr(11800, 11801, 1), Range16), $clone(new Range16.ptr(11803, 11806, 3), Range16), $clone(new Range16.ptr(11807, 11818, 11), Range16), $clone(new Range16.ptr(11819, 11822, 1), Range16), $clone(new Range16.ptr(11824, 11833, 1), Range16), $clone(new Range16.ptr(11836, 11839, 1), Range16), $clone(new Range16.ptr(11841, 11843, 2), Range16), $clone(new Range16.ptr(11844, 11855, 1), Range16), $clone(new Range16.ptr(11858, 12289, 431), Range16), $clone(new Range16.ptr(12290, 12291, 1), Range16), $clone(new Range16.ptr(12349, 12539, 190), Range16), $clone(new Range16.ptr(42238, 42239, 1), Range16), $clone(new Range16.ptr(42509, 42511, 1), Range16), $clone(new Range16.ptr(42611, 42622, 11), Range16), $clone(new Range16.ptr(42738, 42743, 1), Range16), $clone(new Range16.ptr(43124, 43127, 1), Range16), $clone(new Range16.ptr(43214, 43215, 1), Range16), $clone(new Range16.ptr(43256, 43258, 1), Range16), $clone(new Range16.ptr(43260, 43310, 50), Range16), $clone(new Range16.ptr(43311, 43359, 48), Range16), $clone(new Range16.ptr(43457, 43469, 1), Range16), $clone(new Range16.ptr(43486, 43487, 1), Range16), $clone(new Range16.ptr(43612, 43615, 1), Range16), $clone(new Range16.ptr(43742, 43743, 1), Range16), $clone(new Range16.ptr(43760, 43761, 1), Range16), $clone(new Range16.ptr(44011, 65040, 21029), Range16), $clone(new Range16.ptr(65041, 65046, 1), Range16), $clone(new Range16.ptr(65049, 65072, 23), Range16), $clone(new Range16.ptr(65093, 65094, 1), Range16), $clone(new Range16.ptr(65097, 65100, 1), Range16), $clone(new Range16.ptr(65104, 65106, 1), Range16), $clone(new Range16.ptr(65108, 65111, 1), Range16), $clone(new Range16.ptr(65119, 65121, 1), Range16), $clone(new Range16.ptr(65128, 65130, 2), Range16), $clone(new Range16.ptr(65131, 65281, 150), Range16), $clone(new Range16.ptr(65282, 65283, 1), Range16), $clone(new Range16.ptr(65285, 65287, 1), Range16), $clone(new Range16.ptr(65290, 65294, 2), Range16), $clone(new Range16.ptr(65295, 65306, 11), Range16), $clone(new Range16.ptr(65307, 65311, 4), Range16), $clone(new Range16.ptr(65312, 65340, 28), Range16), $clone(new Range16.ptr(65377, 65380, 3), Range16), $clone(new Range16.ptr(65381, 65381, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65792, 65794, 1), Range32), $clone(new Range32.ptr(66463, 66512, 49), Range32), $clone(new Range32.ptr(66927, 67671, 744), Range32), $clone(new Range32.ptr(67871, 67903, 32), Range32), $clone(new Range32.ptr(68176, 68184, 1), Range32), $clone(new Range32.ptr(68223, 68336, 113), Range32), $clone(new Range32.ptr(68337, 68342, 1), Range32), $clone(new Range32.ptr(68409, 68415, 1), Range32), $clone(new Range32.ptr(68505, 68508, 1), Range32), $clone(new Range32.ptr(69461, 69465, 1), Range32), $clone(new Range32.ptr(69703, 69709, 1), Range32), $clone(new Range32.ptr(69819, 69820, 1), Range32), $clone(new Range32.ptr(69822, 69825, 1), Range32), $clone(new Range32.ptr(69952, 69955, 1), Range32), $clone(new Range32.ptr(70004, 70005, 1), Range32), $clone(new Range32.ptr(70085, 70088, 1), Range32), $clone(new Range32.ptr(70093, 70107, 14), Range32), $clone(new Range32.ptr(70109, 70111, 1), Range32), $clone(new Range32.ptr(70200, 70205, 1), Range32), $clone(new Range32.ptr(70313, 70731, 418), Range32), $clone(new Range32.ptr(70732, 70735, 1), Range32), $clone(new Range32.ptr(70746, 70747, 1), Range32), $clone(new Range32.ptr(70749, 70854, 105), Range32), $clone(new Range32.ptr(71105, 71127, 1), Range32), $clone(new Range32.ptr(71233, 71235, 1), Range32), $clone(new Range32.ptr(71264, 71276, 1), Range32), $clone(new Range32.ptr(71484, 71486, 1), Range32), $clone(new Range32.ptr(71739, 72004, 265), Range32), $clone(new Range32.ptr(72005, 72006, 1), Range32), $clone(new Range32.ptr(72162, 72255, 93), Range32), $clone(new Range32.ptr(72256, 72262, 1), Range32), $clone(new Range32.ptr(72346, 72348, 1), Range32), $clone(new Range32.ptr(72350, 72354, 1), Range32), $clone(new Range32.ptr(72769, 72773, 1), Range32), $clone(new Range32.ptr(72816, 72817, 1), Range32), $clone(new Range32.ptr(73463, 73464, 1), Range32), $clone(new Range32.ptr(73727, 74864, 1137), Range32), $clone(new Range32.ptr(74865, 74868, 1), Range32), $clone(new Range32.ptr(92782, 92783, 1), Range32), $clone(new Range32.ptr(92917, 92983, 66), Range32), $clone(new Range32.ptr(92984, 92987, 1), Range32), $clone(new Range32.ptr(92996, 93847, 851), Range32), $clone(new Range32.ptr(93848, 93850, 1), Range32), $clone(new Range32.ptr(94178, 113823, 19645), Range32), $clone(new Range32.ptr(121479, 121483, 1), Range32), $clone(new Range32.ptr(125278, 125279, 1), Range32)]), 8);
		_Ps = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(40, 91, 51), Range16), $clone(new Range16.ptr(123, 3898, 3775), Range16), $clone(new Range16.ptr(3900, 5787, 1887), Range16), $clone(new Range16.ptr(8218, 8222, 4), Range16), $clone(new Range16.ptr(8261, 8317, 56), Range16), $clone(new Range16.ptr(8333, 8968, 635), Range16), $clone(new Range16.ptr(8970, 9001, 31), Range16), $clone(new Range16.ptr(10088, 10100, 2), Range16), $clone(new Range16.ptr(10181, 10214, 33), Range16), $clone(new Range16.ptr(10216, 10222, 2), Range16), $clone(new Range16.ptr(10627, 10647, 2), Range16), $clone(new Range16.ptr(10712, 10714, 2), Range16), $clone(new Range16.ptr(10748, 11810, 1062), Range16), $clone(new Range16.ptr(11812, 11816, 2), Range16), $clone(new Range16.ptr(11842, 12296, 454), Range16), $clone(new Range16.ptr(12298, 12304, 2), Range16), $clone(new Range16.ptr(12308, 12314, 2), Range16), $clone(new Range16.ptr(12317, 64831, 52514), Range16), $clone(new Range16.ptr(65047, 65077, 30), Range16), $clone(new Range16.ptr(65079, 65091, 2), Range16), $clone(new Range16.ptr(65095, 65113, 18), Range16), $clone(new Range16.ptr(65115, 65117, 2), Range16), $clone(new Range16.ptr(65288, 65339, 51), Range16), $clone(new Range16.ptr(65371, 65375, 4), Range16), $clone(new Range16.ptr(65378, 65378, 1), Range16)]), sliceType$1.nil, 1);
		_S = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(36, 43, 7), Range16), $clone(new Range16.ptr(60, 62, 1), Range16), $clone(new Range16.ptr(94, 96, 2), Range16), $clone(new Range16.ptr(124, 126, 2), Range16), $clone(new Range16.ptr(162, 166, 1), Range16), $clone(new Range16.ptr(168, 169, 1), Range16), $clone(new Range16.ptr(172, 174, 2), Range16), $clone(new Range16.ptr(175, 177, 1), Range16), $clone(new Range16.ptr(180, 184, 4), Range16), $clone(new Range16.ptr(215, 247, 32), Range16), $clone(new Range16.ptr(706, 709, 1), Range16), $clone(new Range16.ptr(722, 735, 1), Range16), $clone(new Range16.ptr(741, 747, 1), Range16), $clone(new Range16.ptr(749, 751, 2), Range16), $clone(new Range16.ptr(752, 767, 1), Range16), $clone(new Range16.ptr(885, 900, 15), Range16), $clone(new Range16.ptr(901, 1014, 113), Range16), $clone(new Range16.ptr(1154, 1421, 267), Range16), $clone(new Range16.ptr(1422, 1423, 1), Range16), $clone(new Range16.ptr(1542, 1544, 1), Range16), $clone(new Range16.ptr(1547, 1550, 3), Range16), $clone(new Range16.ptr(1551, 1758, 207), Range16), $clone(new Range16.ptr(1769, 1789, 20), Range16), $clone(new Range16.ptr(1790, 2038, 248), Range16), $clone(new Range16.ptr(2046, 2047, 1), Range16), $clone(new Range16.ptr(2546, 2547, 1), Range16), $clone(new Range16.ptr(2554, 2555, 1), Range16), $clone(new Range16.ptr(2801, 2928, 127), Range16), $clone(new Range16.ptr(3059, 3066, 1), Range16), $clone(new Range16.ptr(3199, 3407, 208), Range16), $clone(new Range16.ptr(3449, 3647, 198), Range16), $clone(new Range16.ptr(3841, 3843, 1), Range16), $clone(new Range16.ptr(3859, 3861, 2), Range16), $clone(new Range16.ptr(3862, 3863, 1), Range16), $clone(new Range16.ptr(3866, 3871, 1), Range16), $clone(new Range16.ptr(3892, 3896, 2), Range16), $clone(new Range16.ptr(4030, 4037, 1), Range16), $clone(new Range16.ptr(4039, 4044, 1), Range16), $clone(new Range16.ptr(4046, 4047, 1), Range16), $clone(new Range16.ptr(4053, 4056, 1), Range16), $clone(new Range16.ptr(4254, 4255, 1), Range16), $clone(new Range16.ptr(5008, 5017, 1), Range16), $clone(new Range16.ptr(5741, 6107, 366), Range16), $clone(new Range16.ptr(6464, 6622, 158), Range16), $clone(new Range16.ptr(6623, 6655, 1), Range16), $clone(new Range16.ptr(7009, 7018, 1), Range16), $clone(new Range16.ptr(7028, 7036, 1), Range16), $clone(new Range16.ptr(8125, 8127, 2), Range16), $clone(new Range16.ptr(8128, 8129, 1), Range16), $clone(new Range16.ptr(8141, 8143, 1), Range16), $clone(new Range16.ptr(8157, 8159, 1), Range16), $clone(new Range16.ptr(8173, 8175, 1), Range16), $clone(new Range16.ptr(8189, 8190, 1), Range16), $clone(new Range16.ptr(8260, 8274, 14), Range16), $clone(new Range16.ptr(8314, 8316, 1), Range16), $clone(new Range16.ptr(8330, 8332, 1), Range16), $clone(new Range16.ptr(8352, 8383, 1), Range16), $clone(new Range16.ptr(8448, 8449, 1), Range16), $clone(new Range16.ptr(8451, 8454, 1), Range16), $clone(new Range16.ptr(8456, 8457, 1), Range16), $clone(new Range16.ptr(8468, 8470, 2), Range16), $clone(new Range16.ptr(8471, 8472, 1), Range16), $clone(new Range16.ptr(8478, 8483, 1), Range16), $clone(new Range16.ptr(8485, 8489, 2), Range16), $clone(new Range16.ptr(8494, 8506, 12), Range16), $clone(new Range16.ptr(8507, 8512, 5), Range16), $clone(new Range16.ptr(8513, 8516, 1), Range16), $clone(new Range16.ptr(8522, 8525, 1), Range16), $clone(new Range16.ptr(8527, 8586, 59), Range16), $clone(new Range16.ptr(8587, 8592, 5), Range16), $clone(new Range16.ptr(8593, 8967, 1), Range16), $clone(new Range16.ptr(8972, 9000, 1), Range16), $clone(new Range16.ptr(9003, 9254, 1), Range16), $clone(new Range16.ptr(9280, 9290, 1), Range16), $clone(new Range16.ptr(9372, 9449, 1), Range16), $clone(new Range16.ptr(9472, 10087, 1), Range16), $clone(new Range16.ptr(10132, 10180, 1), Range16), $clone(new Range16.ptr(10183, 10213, 1), Range16), $clone(new Range16.ptr(10224, 10626, 1), Range16), $clone(new Range16.ptr(10649, 10711, 1), Range16), $clone(new Range16.ptr(10716, 10747, 1), Range16), $clone(new Range16.ptr(10750, 11123, 1), Range16), $clone(new Range16.ptr(11126, 11157, 1), Range16), $clone(new Range16.ptr(11159, 11263, 1), Range16), $clone(new Range16.ptr(11493, 11498, 1), Range16), $clone(new Range16.ptr(11856, 11857, 1), Range16), $clone(new Range16.ptr(11904, 11929, 1), Range16), $clone(new Range16.ptr(11931, 12019, 1), Range16), $clone(new Range16.ptr(12032, 12245, 1), Range16), $clone(new Range16.ptr(12272, 12283, 1), Range16), $clone(new Range16.ptr(12292, 12306, 14), Range16), $clone(new Range16.ptr(12307, 12320, 13), Range16), $clone(new Range16.ptr(12342, 12343, 1), Range16), $clone(new Range16.ptr(12350, 12351, 1), Range16), $clone(new Range16.ptr(12443, 12444, 1), Range16), $clone(new Range16.ptr(12688, 12689, 1), Range16), $clone(new Range16.ptr(12694, 12703, 1), Range16), $clone(new Range16.ptr(12736, 12771, 1), Range16), $clone(new Range16.ptr(12800, 12830, 1), Range16), $clone(new Range16.ptr(12842, 12871, 1), Range16), $clone(new Range16.ptr(12880, 12896, 16), Range16), $clone(new Range16.ptr(12897, 12927, 1), Range16), $clone(new Range16.ptr(12938, 12976, 1), Range16), $clone(new Range16.ptr(12992, 13311, 1), Range16), $clone(new Range16.ptr(19904, 19967, 1), Range16), $clone(new Range16.ptr(42128, 42182, 1), Range16), $clone(new Range16.ptr(42752, 42774, 1), Range16), $clone(new Range16.ptr(42784, 42785, 1), Range16), $clone(new Range16.ptr(42889, 42890, 1), Range16), $clone(new Range16.ptr(43048, 43051, 1), Range16), $clone(new Range16.ptr(43062, 43065, 1), Range16), $clone(new Range16.ptr(43639, 43641, 1), Range16), $clone(new Range16.ptr(43867, 43882, 15), Range16), $clone(new Range16.ptr(43883, 64297, 20414), Range16), $clone(new Range16.ptr(64434, 64449, 1), Range16), $clone(new Range16.ptr(65020, 65021, 1), Range16), $clone(new Range16.ptr(65122, 65124, 2), Range16), $clone(new Range16.ptr(65125, 65126, 1), Range16), $clone(new Range16.ptr(65129, 65284, 155), Range16), $clone(new Range16.ptr(65291, 65308, 17), Range16), $clone(new Range16.ptr(65309, 65310, 1), Range16), $clone(new Range16.ptr(65342, 65344, 2), Range16), $clone(new Range16.ptr(65372, 65374, 2), Range16), $clone(new Range16.ptr(65504, 65510, 1), Range16), $clone(new Range16.ptr(65512, 65518, 1), Range16), $clone(new Range16.ptr(65532, 65533, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65847, 65855, 1), Range32), $clone(new Range32.ptr(65913, 65929, 1), Range32), $clone(new Range32.ptr(65932, 65934, 1), Range32), $clone(new Range32.ptr(65936, 65948, 1), Range32), $clone(new Range32.ptr(65952, 66000, 48), Range32), $clone(new Range32.ptr(66001, 66044, 1), Range32), $clone(new Range32.ptr(67703, 67704, 1), Range32), $clone(new Range32.ptr(68296, 71487, 3191), Range32), $clone(new Range32.ptr(73685, 73713, 1), Range32), $clone(new Range32.ptr(92988, 92991, 1), Range32), $clone(new Range32.ptr(92997, 113820, 20823), Range32), $clone(new Range32.ptr(118784, 119029, 1), Range32), $clone(new Range32.ptr(119040, 119078, 1), Range32), $clone(new Range32.ptr(119081, 119140, 1), Range32), $clone(new Range32.ptr(119146, 119148, 1), Range32), $clone(new Range32.ptr(119171, 119172, 1), Range32), $clone(new Range32.ptr(119180, 119209, 1), Range32), $clone(new Range32.ptr(119214, 119272, 1), Range32), $clone(new Range32.ptr(119296, 119361, 1), Range32), $clone(new Range32.ptr(119365, 119552, 187), Range32), $clone(new Range32.ptr(119553, 119638, 1), Range32), $clone(new Range32.ptr(120513, 120539, 26), Range32), $clone(new Range32.ptr(120571, 120597, 26), Range32), $clone(new Range32.ptr(120629, 120655, 26), Range32), $clone(new Range32.ptr(120687, 120713, 26), Range32), $clone(new Range32.ptr(120745, 120771, 26), Range32), $clone(new Range32.ptr(120832, 121343, 1), Range32), $clone(new Range32.ptr(121399, 121402, 1), Range32), $clone(new Range32.ptr(121453, 121460, 1), Range32), $clone(new Range32.ptr(121462, 121475, 1), Range32), $clone(new Range32.ptr(121477, 121478, 1), Range32), $clone(new Range32.ptr(123215, 123647, 432), Range32), $clone(new Range32.ptr(126124, 126128, 4), Range32), $clone(new Range32.ptr(126254, 126704, 450), Range32), $clone(new Range32.ptr(126705, 126976, 271), Range32), $clone(new Range32.ptr(126977, 127019, 1), Range32), $clone(new Range32.ptr(127024, 127123, 1), Range32), $clone(new Range32.ptr(127136, 127150, 1), Range32), $clone(new Range32.ptr(127153, 127167, 1), Range32), $clone(new Range32.ptr(127169, 127183, 1), Range32), $clone(new Range32.ptr(127185, 127221, 1), Range32), $clone(new Range32.ptr(127245, 127405, 1), Range32), $clone(new Range32.ptr(127462, 127490, 1), Range32), $clone(new Range32.ptr(127504, 127547, 1), Range32), $clone(new Range32.ptr(127552, 127560, 1), Range32), $clone(new Range32.ptr(127568, 127569, 1), Range32), $clone(new Range32.ptr(127584, 127589, 1), Range32), $clone(new Range32.ptr(127744, 128727, 1), Range32), $clone(new Range32.ptr(128736, 128748, 1), Range32), $clone(new Range32.ptr(128752, 128764, 1), Range32), $clone(new Range32.ptr(128768, 128883, 1), Range32), $clone(new Range32.ptr(128896, 128984, 1), Range32), $clone(new Range32.ptr(128992, 129003, 1), Range32), $clone(new Range32.ptr(129024, 129035, 1), Range32), $clone(new Range32.ptr(129040, 129095, 1), Range32), $clone(new Range32.ptr(129104, 129113, 1), Range32), $clone(new Range32.ptr(129120, 129159, 1), Range32), $clone(new Range32.ptr(129168, 129197, 1), Range32), $clone(new Range32.ptr(129200, 129201, 1), Range32), $clone(new Range32.ptr(129280, 129400, 1), Range32), $clone(new Range32.ptr(129402, 129483, 1), Range32), $clone(new Range32.ptr(129485, 129619, 1), Range32), $clone(new Range32.ptr(129632, 129645, 1), Range32), $clone(new Range32.ptr(129648, 129652, 1), Range32), $clone(new Range32.ptr(129656, 129658, 1), Range32), $clone(new Range32.ptr(129664, 129670, 1), Range32), $clone(new Range32.ptr(129680, 129704, 1), Range32), $clone(new Range32.ptr(129712, 129718, 1), Range32), $clone(new Range32.ptr(129728, 129730, 1), Range32), $clone(new Range32.ptr(129744, 129750, 1), Range32), $clone(new Range32.ptr(129792, 129938, 1), Range32), $clone(new Range32.ptr(129940, 129994, 1), Range32)]), 10);
		_Sc = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(36, 162, 126), Range16), $clone(new Range16.ptr(163, 165, 1), Range16), $clone(new Range16.ptr(1423, 1547, 124), Range16), $clone(new Range16.ptr(2046, 2047, 1), Range16), $clone(new Range16.ptr(2546, 2547, 1), Range16), $clone(new Range16.ptr(2555, 2801, 246), Range16), $clone(new Range16.ptr(3065, 3647, 582), Range16), $clone(new Range16.ptr(6107, 8352, 2245), Range16), $clone(new Range16.ptr(8353, 8383, 1), Range16), $clone(new Range16.ptr(43064, 65020, 21956), Range16), $clone(new Range16.ptr(65129, 65284, 155), Range16), $clone(new Range16.ptr(65504, 65505, 1), Range16), $clone(new Range16.ptr(65509, 65510, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(73693, 73696, 1), Range32), $clone(new Range32.ptr(123647, 126128, 2481), Range32)]), 2);
		_Sk = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(94, 96, 2), Range16), $clone(new Range16.ptr(168, 175, 7), Range16), $clone(new Range16.ptr(180, 184, 4), Range16), $clone(new Range16.ptr(706, 709, 1), Range16), $clone(new Range16.ptr(722, 735, 1), Range16), $clone(new Range16.ptr(741, 747, 1), Range16), $clone(new Range16.ptr(749, 751, 2), Range16), $clone(new Range16.ptr(752, 767, 1), Range16), $clone(new Range16.ptr(885, 900, 15), Range16), $clone(new Range16.ptr(901, 8125, 7224), Range16), $clone(new Range16.ptr(8127, 8129, 1), Range16), $clone(new Range16.ptr(8141, 8143, 1), Range16), $clone(new Range16.ptr(8157, 8159, 1), Range16), $clone(new Range16.ptr(8173, 8175, 1), Range16), $clone(new Range16.ptr(8189, 8190, 1), Range16), $clone(new Range16.ptr(12443, 12444, 1), Range16), $clone(new Range16.ptr(42752, 42774, 1), Range16), $clone(new Range16.ptr(42784, 42785, 1), Range16), $clone(new Range16.ptr(42889, 42890, 1), Range16), $clone(new Range16.ptr(43867, 43882, 15), Range16), $clone(new Range16.ptr(43883, 64434, 20551), Range16), $clone(new Range16.ptr(64435, 64449, 1), Range16), $clone(new Range16.ptr(65342, 65344, 2), Range16), $clone(new Range16.ptr(65507, 65507, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(127995, 127999, 1), Range32)]), 3);
		_Sm = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43, 60, 17), Range16), $clone(new Range16.ptr(61, 62, 1), Range16), $clone(new Range16.ptr(124, 126, 2), Range16), $clone(new Range16.ptr(172, 177, 5), Range16), $clone(new Range16.ptr(215, 247, 32), Range16), $clone(new Range16.ptr(1014, 1542, 528), Range16), $clone(new Range16.ptr(1543, 1544, 1), Range16), $clone(new Range16.ptr(8260, 8274, 14), Range16), $clone(new Range16.ptr(8314, 8316, 1), Range16), $clone(new Range16.ptr(8330, 8332, 1), Range16), $clone(new Range16.ptr(8472, 8512, 40), Range16), $clone(new Range16.ptr(8513, 8516, 1), Range16), $clone(new Range16.ptr(8523, 8592, 69), Range16), $clone(new Range16.ptr(8593, 8596, 1), Range16), $clone(new Range16.ptr(8602, 8603, 1), Range16), $clone(new Range16.ptr(8608, 8614, 3), Range16), $clone(new Range16.ptr(8622, 8654, 32), Range16), $clone(new Range16.ptr(8655, 8658, 3), Range16), $clone(new Range16.ptr(8660, 8692, 32), Range16), $clone(new Range16.ptr(8693, 8959, 1), Range16), $clone(new Range16.ptr(8992, 8993, 1), Range16), $clone(new Range16.ptr(9084, 9115, 31), Range16), $clone(new Range16.ptr(9116, 9139, 1), Range16), $clone(new Range16.ptr(9180, 9185, 1), Range16), $clone(new Range16.ptr(9655, 9665, 10), Range16), $clone(new Range16.ptr(9720, 9727, 1), Range16), $clone(new Range16.ptr(9839, 10176, 337), Range16), $clone(new Range16.ptr(10177, 10180, 1), Range16), $clone(new Range16.ptr(10183, 10213, 1), Range16), $clone(new Range16.ptr(10224, 10239, 1), Range16), $clone(new Range16.ptr(10496, 10626, 1), Range16), $clone(new Range16.ptr(10649, 10711, 1), Range16), $clone(new Range16.ptr(10716, 10747, 1), Range16), $clone(new Range16.ptr(10750, 11007, 1), Range16), $clone(new Range16.ptr(11056, 11076, 1), Range16), $clone(new Range16.ptr(11079, 11084, 1), Range16), $clone(new Range16.ptr(64297, 65122, 825), Range16), $clone(new Range16.ptr(65124, 65126, 1), Range16), $clone(new Range16.ptr(65291, 65308, 17), Range16), $clone(new Range16.ptr(65309, 65310, 1), Range16), $clone(new Range16.ptr(65372, 65374, 2), Range16), $clone(new Range16.ptr(65506, 65513, 7), Range16), $clone(new Range16.ptr(65514, 65516, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(120513, 120539, 26), Range32), $clone(new Range32.ptr(120571, 120597, 26), Range32), $clone(new Range32.ptr(120629, 120655, 26), Range32), $clone(new Range32.ptr(120687, 120713, 26), Range32), $clone(new Range32.ptr(120745, 120771, 26), Range32), $clone(new Range32.ptr(126704, 126705, 1), Range32)]), 5);
		_So = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(166, 169, 3), Range16), $clone(new Range16.ptr(174, 176, 2), Range16), $clone(new Range16.ptr(1154, 1421, 267), Range16), $clone(new Range16.ptr(1422, 1550, 128), Range16), $clone(new Range16.ptr(1551, 1758, 207), Range16), $clone(new Range16.ptr(1769, 1789, 20), Range16), $clone(new Range16.ptr(1790, 2038, 248), Range16), $clone(new Range16.ptr(2554, 2928, 374), Range16), $clone(new Range16.ptr(3059, 3064, 1), Range16), $clone(new Range16.ptr(3066, 3199, 133), Range16), $clone(new Range16.ptr(3407, 3449, 42), Range16), $clone(new Range16.ptr(3841, 3843, 1), Range16), $clone(new Range16.ptr(3859, 3861, 2), Range16), $clone(new Range16.ptr(3862, 3863, 1), Range16), $clone(new Range16.ptr(3866, 3871, 1), Range16), $clone(new Range16.ptr(3892, 3896, 2), Range16), $clone(new Range16.ptr(4030, 4037, 1), Range16), $clone(new Range16.ptr(4039, 4044, 1), Range16), $clone(new Range16.ptr(4046, 4047, 1), Range16), $clone(new Range16.ptr(4053, 4056, 1), Range16), $clone(new Range16.ptr(4254, 4255, 1), Range16), $clone(new Range16.ptr(5008, 5017, 1), Range16), $clone(new Range16.ptr(5741, 6464, 723), Range16), $clone(new Range16.ptr(6622, 6655, 1), Range16), $clone(new Range16.ptr(7009, 7018, 1), Range16), $clone(new Range16.ptr(7028, 7036, 1), Range16), $clone(new Range16.ptr(8448, 8449, 1), Range16), $clone(new Range16.ptr(8451, 8454, 1), Range16), $clone(new Range16.ptr(8456, 8457, 1), Range16), $clone(new Range16.ptr(8468, 8470, 2), Range16), $clone(new Range16.ptr(8471, 8478, 7), Range16), $clone(new Range16.ptr(8479, 8483, 1), Range16), $clone(new Range16.ptr(8485, 8489, 2), Range16), $clone(new Range16.ptr(8494, 8506, 12), Range16), $clone(new Range16.ptr(8507, 8522, 15), Range16), $clone(new Range16.ptr(8524, 8525, 1), Range16), $clone(new Range16.ptr(8527, 8586, 59), Range16), $clone(new Range16.ptr(8587, 8597, 10), Range16), $clone(new Range16.ptr(8598, 8601, 1), Range16), $clone(new Range16.ptr(8604, 8607, 1), Range16), $clone(new Range16.ptr(8609, 8610, 1), Range16), $clone(new Range16.ptr(8612, 8613, 1), Range16), $clone(new Range16.ptr(8615, 8621, 1), Range16), $clone(new Range16.ptr(8623, 8653, 1), Range16), $clone(new Range16.ptr(8656, 8657, 1), Range16), $clone(new Range16.ptr(8659, 8661, 2), Range16), $clone(new Range16.ptr(8662, 8691, 1), Range16), $clone(new Range16.ptr(8960, 8967, 1), Range16), $clone(new Range16.ptr(8972, 8991, 1), Range16), $clone(new Range16.ptr(8994, 9000, 1), Range16), $clone(new Range16.ptr(9003, 9083, 1), Range16), $clone(new Range16.ptr(9085, 9114, 1), Range16), $clone(new Range16.ptr(9140, 9179, 1), Range16), $clone(new Range16.ptr(9186, 9254, 1), Range16), $clone(new Range16.ptr(9280, 9290, 1), Range16), $clone(new Range16.ptr(9372, 9449, 1), Range16), $clone(new Range16.ptr(9472, 9654, 1), Range16), $clone(new Range16.ptr(9656, 9664, 1), Range16), $clone(new Range16.ptr(9666, 9719, 1), Range16), $clone(new Range16.ptr(9728, 9838, 1), Range16), $clone(new Range16.ptr(9840, 10087, 1), Range16), $clone(new Range16.ptr(10132, 10175, 1), Range16), $clone(new Range16.ptr(10240, 10495, 1), Range16), $clone(new Range16.ptr(11008, 11055, 1), Range16), $clone(new Range16.ptr(11077, 11078, 1), Range16), $clone(new Range16.ptr(11085, 11123, 1), Range16), $clone(new Range16.ptr(11126, 11157, 1), Range16), $clone(new Range16.ptr(11159, 11263, 1), Range16), $clone(new Range16.ptr(11493, 11498, 1), Range16), $clone(new Range16.ptr(11856, 11857, 1), Range16), $clone(new Range16.ptr(11904, 11929, 1), Range16), $clone(new Range16.ptr(11931, 12019, 1), Range16), $clone(new Range16.ptr(12032, 12245, 1), Range16), $clone(new Range16.ptr(12272, 12283, 1), Range16), $clone(new Range16.ptr(12292, 12306, 14), Range16), $clone(new Range16.ptr(12307, 12320, 13), Range16), $clone(new Range16.ptr(12342, 12343, 1), Range16), $clone(new Range16.ptr(12350, 12351, 1), Range16), $clone(new Range16.ptr(12688, 12689, 1), Range16), $clone(new Range16.ptr(12694, 12703, 1), Range16), $clone(new Range16.ptr(12736, 12771, 1), Range16), $clone(new Range16.ptr(12800, 12830, 1), Range16), $clone(new Range16.ptr(12842, 12871, 1), Range16), $clone(new Range16.ptr(12880, 12896, 16), Range16), $clone(new Range16.ptr(12897, 12927, 1), Range16), $clone(new Range16.ptr(12938, 12976, 1), Range16), $clone(new Range16.ptr(12992, 13311, 1), Range16), $clone(new Range16.ptr(19904, 19967, 1), Range16), $clone(new Range16.ptr(42128, 42182, 1), Range16), $clone(new Range16.ptr(43048, 43051, 1), Range16), $clone(new Range16.ptr(43062, 43063, 1), Range16), $clone(new Range16.ptr(43065, 43639, 574), Range16), $clone(new Range16.ptr(43640, 43641, 1), Range16), $clone(new Range16.ptr(65021, 65508, 487), Range16), $clone(new Range16.ptr(65512, 65517, 5), Range16), $clone(new Range16.ptr(65518, 65532, 14), Range16), $clone(new Range16.ptr(65533, 65533, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65847, 65855, 1), Range32), $clone(new Range32.ptr(65913, 65929, 1), Range32), $clone(new Range32.ptr(65932, 65934, 1), Range32), $clone(new Range32.ptr(65936, 65948, 1), Range32), $clone(new Range32.ptr(65952, 66000, 48), Range32), $clone(new Range32.ptr(66001, 66044, 1), Range32), $clone(new Range32.ptr(67703, 67704, 1), Range32), $clone(new Range32.ptr(68296, 71487, 3191), Range32), $clone(new Range32.ptr(73685, 73692, 1), Range32), $clone(new Range32.ptr(73697, 73713, 1), Range32), $clone(new Range32.ptr(92988, 92991, 1), Range32), $clone(new Range32.ptr(92997, 113820, 20823), Range32), $clone(new Range32.ptr(118784, 119029, 1), Range32), $clone(new Range32.ptr(119040, 119078, 1), Range32), $clone(new Range32.ptr(119081, 119140, 1), Range32), $clone(new Range32.ptr(119146, 119148, 1), Range32), $clone(new Range32.ptr(119171, 119172, 1), Range32), $clone(new Range32.ptr(119180, 119209, 1), Range32), $clone(new Range32.ptr(119214, 119272, 1), Range32), $clone(new Range32.ptr(119296, 119361, 1), Range32), $clone(new Range32.ptr(119365, 119552, 187), Range32), $clone(new Range32.ptr(119553, 119638, 1), Range32), $clone(new Range32.ptr(120832, 121343, 1), Range32), $clone(new Range32.ptr(121399, 121402, 1), Range32), $clone(new Range32.ptr(121453, 121460, 1), Range32), $clone(new Range32.ptr(121462, 121475, 1), Range32), $clone(new Range32.ptr(121477, 121478, 1), Range32), $clone(new Range32.ptr(123215, 126124, 2909), Range32), $clone(new Range32.ptr(126254, 126976, 722), Range32), $clone(new Range32.ptr(126977, 127019, 1), Range32), $clone(new Range32.ptr(127024, 127123, 1), Range32), $clone(new Range32.ptr(127136, 127150, 1), Range32), $clone(new Range32.ptr(127153, 127167, 1), Range32), $clone(new Range32.ptr(127169, 127183, 1), Range32), $clone(new Range32.ptr(127185, 127221, 1), Range32), $clone(new Range32.ptr(127245, 127405, 1), Range32), $clone(new Range32.ptr(127462, 127490, 1), Range32), $clone(new Range32.ptr(127504, 127547, 1), Range32), $clone(new Range32.ptr(127552, 127560, 1), Range32), $clone(new Range32.ptr(127568, 127569, 1), Range32), $clone(new Range32.ptr(127584, 127589, 1), Range32), $clone(new Range32.ptr(127744, 127994, 1), Range32), $clone(new Range32.ptr(128000, 128727, 1), Range32), $clone(new Range32.ptr(128736, 128748, 1), Range32), $clone(new Range32.ptr(128752, 128764, 1), Range32), $clone(new Range32.ptr(128768, 128883, 1), Range32), $clone(new Range32.ptr(128896, 128984, 1), Range32), $clone(new Range32.ptr(128992, 129003, 1), Range32), $clone(new Range32.ptr(129024, 129035, 1), Range32), $clone(new Range32.ptr(129040, 129095, 1), Range32), $clone(new Range32.ptr(129104, 129113, 1), Range32), $clone(new Range32.ptr(129120, 129159, 1), Range32), $clone(new Range32.ptr(129168, 129197, 1), Range32), $clone(new Range32.ptr(129200, 129201, 1), Range32), $clone(new Range32.ptr(129280, 129400, 1), Range32), $clone(new Range32.ptr(129402, 129483, 1), Range32), $clone(new Range32.ptr(129485, 129619, 1), Range32), $clone(new Range32.ptr(129632, 129645, 1), Range32), $clone(new Range32.ptr(129648, 129652, 1), Range32), $clone(new Range32.ptr(129656, 129658, 1), Range32), $clone(new Range32.ptr(129664, 129670, 1), Range32), $clone(new Range32.ptr(129680, 129704, 1), Range32), $clone(new Range32.ptr(129712, 129718, 1), Range32), $clone(new Range32.ptr(129728, 129730, 1), Range32), $clone(new Range32.ptr(129744, 129750, 1), Range32), $clone(new Range32.ptr(129792, 129938, 1), Range32), $clone(new Range32.ptr(129940, 129994, 1), Range32)]), 2);
		_Z = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(32, 160, 128), Range16), $clone(new Range16.ptr(5760, 8192, 2432), Range16), $clone(new Range16.ptr(8193, 8202, 1), Range16), $clone(new Range16.ptr(8232, 8233, 1), Range16), $clone(new Range16.ptr(8239, 8287, 48), Range16), $clone(new Range16.ptr(12288, 12288, 1), Range16)]), sliceType$1.nil, 1);
		_Zl = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(8232, 8232, 1), Range16)]), sliceType$1.nil, 0);
		_Zp = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(8233, 8233, 1), Range16)]), sliceType$1.nil, 0);
		_Zs = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(32, 160, 128), Range16), $clone(new Range16.ptr(5760, 8192, 2432), Range16), $clone(new Range16.ptr(8193, 8202, 1), Range16), $clone(new Range16.ptr(8239, 8287, 48), Range16), $clone(new Range16.ptr(12288, 12288, 1), Range16)]), sliceType$1.nil, 1);
		$pkg.Cc = _Cc;
		$pkg.Cf = _Cf;
		$pkg.Co = _Co;
		$pkg.Cs = _Cs;
		$pkg.Digit = _Nd;
		$pkg.Nd = _Nd;
		$pkg.Letter = _L;
		$pkg.L = _L;
		$pkg.Lm = _Lm;
		$pkg.Lo = _Lo;
		$pkg.Ll = _Ll;
		$pkg.M = _M;
		$pkg.Mc = _Mc;
		$pkg.Me = _Me;
		$pkg.Mn = _Mn;
		$pkg.Nl = _Nl;
		$pkg.No = _No;
		$pkg.N = _N;
		$pkg.C = _C;
		$pkg.Pc = _Pc;
		$pkg.Pd = _Pd;
		$pkg.Pe = _Pe;
		$pkg.Pf = _Pf;
		$pkg.Pi = _Pi;
		$pkg.Po = _Po;
		$pkg.Ps = _Ps;
		$pkg.P = _P;
		$pkg.Sc = _Sc;
		$pkg.Sk = _Sk;
		$pkg.Sm = _Sm;
		$pkg.So = _So;
		$pkg.Z = _Z;
		$pkg.S = _S;
		$pkg.Lt = _Lt;
		$pkg.Lu = _Lu;
		$pkg.Zl = _Zl;
		$pkg.Zp = _Zp;
		$pkg.Zs = _Zs;
		$pkg.Categories = $makeMap($String.keyFor, [{ k: "C", v: $pkg.C }, { k: "Cc", v: $pkg.Cc }, { k: "Cf", v: $pkg.Cf }, { k: "Co", v: $pkg.Co }, { k: "Cs", v: $pkg.Cs }, { k: "L", v: $pkg.L }, { k: "Ll", v: $pkg.Ll }, { k: "Lm", v: $pkg.Lm }, { k: "Lo", v: $pkg.Lo }, { k: "Lt", v: $pkg.Lt }, { k: "Lu", v: $pkg.Lu }, { k: "M", v: $pkg.M }, { k: "Mc", v: $pkg.Mc }, { k: "Me", v: $pkg.Me }, { k: "Mn", v: $pkg.Mn }, { k: "N", v: $pkg.N }, { k: "Nd", v: $pkg.Nd }, { k: "Nl", v: $pkg.Nl }, { k: "No", v: $pkg.No }, { k: "P", v: $pkg.P }, { k: "Pc", v: $pkg.Pc }, { k: "Pd", v: $pkg.Pd }, { k: "Pe", v: $pkg.Pe }, { k: "Pf", v: $pkg.Pf }, { k: "Pi", v: $pkg.Pi }, { k: "Po", v: $pkg.Po }, { k: "Ps", v: $pkg.Ps }, { k: "S", v: $pkg.S }, { k: "Sc", v: $pkg.Sc }, { k: "Sk", v: $pkg.Sk }, { k: "Sm", v: $pkg.Sm }, { k: "So", v: $pkg.So }, { k: "Z", v: $pkg.Z }, { k: "Zl", v: $pkg.Zl }, { k: "Zp", v: $pkg.Zp }, { k: "Zs", v: $pkg.Zs }]);
		_Adlam = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(125184, 125259, 1), Range32), $clone(new Range32.ptr(125264, 125273, 1), Range32), $clone(new Range32.ptr(125278, 125279, 1), Range32)]), 0);
		_Ahom = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(71424, 71450, 1), Range32), $clone(new Range32.ptr(71453, 71467, 1), Range32), $clone(new Range32.ptr(71472, 71487, 1), Range32)]), 0);
		_Anatolian_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(82944, 83526, 1), Range32)]), 0);
		_Arabic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1536, 1540, 1), Range16), $clone(new Range16.ptr(1542, 1547, 1), Range16), $clone(new Range16.ptr(1549, 1562, 1), Range16), $clone(new Range16.ptr(1564, 1568, 2), Range16), $clone(new Range16.ptr(1569, 1599, 1), Range16), $clone(new Range16.ptr(1601, 1610, 1), Range16), $clone(new Range16.ptr(1622, 1647, 1), Range16), $clone(new Range16.ptr(1649, 1756, 1), Range16), $clone(new Range16.ptr(1758, 1791, 1), Range16), $clone(new Range16.ptr(1872, 1919, 1), Range16), $clone(new Range16.ptr(2208, 2228, 1), Range16), $clone(new Range16.ptr(2230, 2247, 1), Range16), $clone(new Range16.ptr(2259, 2273, 1), Range16), $clone(new Range16.ptr(2275, 2303, 1), Range16), $clone(new Range16.ptr(64336, 64449, 1), Range16), $clone(new Range16.ptr(64467, 64829, 1), Range16), $clone(new Range16.ptr(64848, 64911, 1), Range16), $clone(new Range16.ptr(64914, 64967, 1), Range16), $clone(new Range16.ptr(65008, 65021, 1), Range16), $clone(new Range16.ptr(65136, 65140, 1), Range16), $clone(new Range16.ptr(65142, 65276, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(69216, 69246, 1), Range32), $clone(new Range32.ptr(126464, 126467, 1), Range32), $clone(new Range32.ptr(126469, 126495, 1), Range32), $clone(new Range32.ptr(126497, 126498, 1), Range32), $clone(new Range32.ptr(126500, 126503, 3), Range32), $clone(new Range32.ptr(126505, 126514, 1), Range32), $clone(new Range32.ptr(126516, 126519, 1), Range32), $clone(new Range32.ptr(126521, 126523, 2), Range32), $clone(new Range32.ptr(126530, 126535, 5), Range32), $clone(new Range32.ptr(126537, 126541, 2), Range32), $clone(new Range32.ptr(126542, 126543, 1), Range32), $clone(new Range32.ptr(126545, 126546, 1), Range32), $clone(new Range32.ptr(126548, 126551, 3), Range32), $clone(new Range32.ptr(126553, 126561, 2), Range32), $clone(new Range32.ptr(126562, 126564, 2), Range32), $clone(new Range32.ptr(126567, 126570, 1), Range32), $clone(new Range32.ptr(126572, 126578, 1), Range32), $clone(new Range32.ptr(126580, 126583, 1), Range32), $clone(new Range32.ptr(126585, 126588, 1), Range32), $clone(new Range32.ptr(126590, 126592, 2), Range32), $clone(new Range32.ptr(126593, 126601, 1), Range32), $clone(new Range32.ptr(126603, 126619, 1), Range32), $clone(new Range32.ptr(126625, 126627, 1), Range32), $clone(new Range32.ptr(126629, 126633, 1), Range32), $clone(new Range32.ptr(126635, 126651, 1), Range32), $clone(new Range32.ptr(126704, 126705, 1), Range32)]), 0);
		_Armenian = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1329, 1366, 1), Range16), $clone(new Range16.ptr(1369, 1418, 1), Range16), $clone(new Range16.ptr(1421, 1423, 1), Range16), $clone(new Range16.ptr(64275, 64279, 1), Range16)]), sliceType$1.nil, 0);
		_Avestan = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68352, 68405, 1), Range32), $clone(new Range32.ptr(68409, 68415, 1), Range32)]), 0);
		_Balinese = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6912, 6987, 1), Range16), $clone(new Range16.ptr(6992, 7036, 1), Range16)]), sliceType$1.nil, 0);
		_Bamum = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(42656, 42743, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(92160, 92728, 1), Range32)]), 0);
		_Bassa_Vah = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(92880, 92909, 1), Range32), $clone(new Range32.ptr(92912, 92917, 1), Range32)]), 0);
		_Batak = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(7104, 7155, 1), Range16), $clone(new Range16.ptr(7164, 7167, 1), Range16)]), sliceType$1.nil, 0);
		_Bengali = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2432, 2435, 1), Range16), $clone(new Range16.ptr(2437, 2444, 1), Range16), $clone(new Range16.ptr(2447, 2448, 1), Range16), $clone(new Range16.ptr(2451, 2472, 1), Range16), $clone(new Range16.ptr(2474, 2480, 1), Range16), $clone(new Range16.ptr(2482, 2486, 4), Range16), $clone(new Range16.ptr(2487, 2489, 1), Range16), $clone(new Range16.ptr(2492, 2500, 1), Range16), $clone(new Range16.ptr(2503, 2504, 1), Range16), $clone(new Range16.ptr(2507, 2510, 1), Range16), $clone(new Range16.ptr(2519, 2524, 5), Range16), $clone(new Range16.ptr(2525, 2527, 2), Range16), $clone(new Range16.ptr(2528, 2531, 1), Range16), $clone(new Range16.ptr(2534, 2558, 1), Range16)]), sliceType$1.nil, 0);
		_Bhaiksuki = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(72704, 72712, 1), Range32), $clone(new Range32.ptr(72714, 72758, 1), Range32), $clone(new Range32.ptr(72760, 72773, 1), Range32), $clone(new Range32.ptr(72784, 72812, 1), Range32)]), 0);
		_Bopomofo = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(746, 747, 1), Range16), $clone(new Range16.ptr(12549, 12591, 1), Range16), $clone(new Range16.ptr(12704, 12735, 1), Range16)]), sliceType$1.nil, 0);
		_Brahmi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69632, 69709, 1), Range32), $clone(new Range32.ptr(69714, 69743, 1), Range32), $clone(new Range32.ptr(69759, 69759, 1), Range32)]), 0);
		_Braille = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(10240, 10495, 1), Range16)]), sliceType$1.nil, 0);
		_Buginese = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6656, 6683, 1), Range16), $clone(new Range16.ptr(6686, 6687, 1), Range16)]), sliceType$1.nil, 0);
		_Buhid = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5952, 5971, 1), Range16)]), sliceType$1.nil, 0);
		_Canadian_Aboriginal = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5120, 5759, 1), Range16), $clone(new Range16.ptr(6320, 6389, 1), Range16)]), sliceType$1.nil, 0);
		_Carian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66208, 66256, 1), Range32)]), 0);
		_Caucasian_Albanian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66864, 66915, 1), Range32), $clone(new Range32.ptr(66927, 66927, 1), Range32)]), 0);
		_Chakma = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69888, 69940, 1), Range32), $clone(new Range32.ptr(69942, 69959, 1), Range32)]), 0);
		_Cham = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43520, 43574, 1), Range16), $clone(new Range16.ptr(43584, 43597, 1), Range16), $clone(new Range16.ptr(43600, 43609, 1), Range16), $clone(new Range16.ptr(43612, 43615, 1), Range16)]), sliceType$1.nil, 0);
		_Cherokee = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5024, 5109, 1), Range16), $clone(new Range16.ptr(5112, 5117, 1), Range16), $clone(new Range16.ptr(43888, 43967, 1), Range16)]), sliceType$1.nil, 0);
		_Chorasmian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69552, 69579, 1), Range32)]), 0);
		_Common = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(0, 64, 1), Range16), $clone(new Range16.ptr(91, 96, 1), Range16), $clone(new Range16.ptr(123, 169, 1), Range16), $clone(new Range16.ptr(171, 185, 1), Range16), $clone(new Range16.ptr(187, 191, 1), Range16), $clone(new Range16.ptr(215, 247, 32), Range16), $clone(new Range16.ptr(697, 735, 1), Range16), $clone(new Range16.ptr(741, 745, 1), Range16), $clone(new Range16.ptr(748, 767, 1), Range16), $clone(new Range16.ptr(884, 894, 10), Range16), $clone(new Range16.ptr(901, 903, 2), Range16), $clone(new Range16.ptr(1541, 1548, 7), Range16), $clone(new Range16.ptr(1563, 1567, 4), Range16), $clone(new Range16.ptr(1600, 1757, 157), Range16), $clone(new Range16.ptr(2274, 2404, 130), Range16), $clone(new Range16.ptr(2405, 3647, 1242), Range16), $clone(new Range16.ptr(4053, 4056, 1), Range16), $clone(new Range16.ptr(4347, 5867, 1520), Range16), $clone(new Range16.ptr(5868, 5869, 1), Range16), $clone(new Range16.ptr(5941, 5942, 1), Range16), $clone(new Range16.ptr(6146, 6147, 1), Range16), $clone(new Range16.ptr(6149, 7379, 1230), Range16), $clone(new Range16.ptr(7393, 7401, 8), Range16), $clone(new Range16.ptr(7402, 7404, 1), Range16), $clone(new Range16.ptr(7406, 7411, 1), Range16), $clone(new Range16.ptr(7413, 7415, 1), Range16), $clone(new Range16.ptr(7418, 8192, 774), Range16), $clone(new Range16.ptr(8193, 8203, 1), Range16), $clone(new Range16.ptr(8206, 8292, 1), Range16), $clone(new Range16.ptr(8294, 8304, 1), Range16), $clone(new Range16.ptr(8308, 8318, 1), Range16), $clone(new Range16.ptr(8320, 8334, 1), Range16), $clone(new Range16.ptr(8352, 8383, 1), Range16), $clone(new Range16.ptr(8448, 8485, 1), Range16), $clone(new Range16.ptr(8487, 8489, 1), Range16), $clone(new Range16.ptr(8492, 8497, 1), Range16), $clone(new Range16.ptr(8499, 8525, 1), Range16), $clone(new Range16.ptr(8527, 8543, 1), Range16), $clone(new Range16.ptr(8585, 8587, 1), Range16), $clone(new Range16.ptr(8592, 9254, 1), Range16), $clone(new Range16.ptr(9280, 9290, 1), Range16), $clone(new Range16.ptr(9312, 10239, 1), Range16), $clone(new Range16.ptr(10496, 11123, 1), Range16), $clone(new Range16.ptr(11126, 11157, 1), Range16), $clone(new Range16.ptr(11159, 11263, 1), Range16), $clone(new Range16.ptr(11776, 11858, 1), Range16), $clone(new Range16.ptr(12272, 12283, 1), Range16), $clone(new Range16.ptr(12288, 12292, 1), Range16), $clone(new Range16.ptr(12294, 12296, 2), Range16), $clone(new Range16.ptr(12297, 12320, 1), Range16), $clone(new Range16.ptr(12336, 12343, 1), Range16), $clone(new Range16.ptr(12348, 12351, 1), Range16), $clone(new Range16.ptr(12443, 12444, 1), Range16), $clone(new Range16.ptr(12448, 12539, 91), Range16), $clone(new Range16.ptr(12540, 12688, 148), Range16), $clone(new Range16.ptr(12689, 12703, 1), Range16), $clone(new Range16.ptr(12736, 12771, 1), Range16), $clone(new Range16.ptr(12832, 12895, 1), Range16), $clone(new Range16.ptr(12927, 13007, 1), Range16), $clone(new Range16.ptr(13055, 13144, 89), Range16), $clone(new Range16.ptr(13145, 13311, 1), Range16), $clone(new Range16.ptr(19904, 19967, 1), Range16), $clone(new Range16.ptr(42752, 42785, 1), Range16), $clone(new Range16.ptr(42888, 42890, 1), Range16), $clone(new Range16.ptr(43056, 43065, 1), Range16), $clone(new Range16.ptr(43310, 43471, 161), Range16), $clone(new Range16.ptr(43867, 43882, 15), Range16), $clone(new Range16.ptr(43883, 64830, 20947), Range16), $clone(new Range16.ptr(64831, 65040, 209), Range16), $clone(new Range16.ptr(65041, 65049, 1), Range16), $clone(new Range16.ptr(65072, 65106, 1), Range16), $clone(new Range16.ptr(65108, 65126, 1), Range16), $clone(new Range16.ptr(65128, 65131, 1), Range16), $clone(new Range16.ptr(65279, 65281, 2), Range16), $clone(new Range16.ptr(65282, 65312, 1), Range16), $clone(new Range16.ptr(65339, 65344, 1), Range16), $clone(new Range16.ptr(65371, 65381, 1), Range16), $clone(new Range16.ptr(65392, 65438, 46), Range16), $clone(new Range16.ptr(65439, 65504, 65), Range16), $clone(new Range16.ptr(65505, 65510, 1), Range16), $clone(new Range16.ptr(65512, 65518, 1), Range16), $clone(new Range16.ptr(65529, 65533, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(65792, 65794, 1), Range32), $clone(new Range32.ptr(65799, 65843, 1), Range32), $clone(new Range32.ptr(65847, 65855, 1), Range32), $clone(new Range32.ptr(65936, 65948, 1), Range32), $clone(new Range32.ptr(66000, 66044, 1), Range32), $clone(new Range32.ptr(66273, 66299, 1), Range32), $clone(new Range32.ptr(94178, 94179, 1), Range32), $clone(new Range32.ptr(113824, 113827, 1), Range32), $clone(new Range32.ptr(118784, 119029, 1), Range32), $clone(new Range32.ptr(119040, 119078, 1), Range32), $clone(new Range32.ptr(119081, 119142, 1), Range32), $clone(new Range32.ptr(119146, 119162, 1), Range32), $clone(new Range32.ptr(119171, 119172, 1), Range32), $clone(new Range32.ptr(119180, 119209, 1), Range32), $clone(new Range32.ptr(119214, 119272, 1), Range32), $clone(new Range32.ptr(119520, 119539, 1), Range32), $clone(new Range32.ptr(119552, 119638, 1), Range32), $clone(new Range32.ptr(119648, 119672, 1), Range32), $clone(new Range32.ptr(119808, 119892, 1), Range32), $clone(new Range32.ptr(119894, 119964, 1), Range32), $clone(new Range32.ptr(119966, 119967, 1), Range32), $clone(new Range32.ptr(119970, 119973, 3), Range32), $clone(new Range32.ptr(119974, 119977, 3), Range32), $clone(new Range32.ptr(119978, 119980, 1), Range32), $clone(new Range32.ptr(119982, 119993, 1), Range32), $clone(new Range32.ptr(119995, 119997, 2), Range32), $clone(new Range32.ptr(119998, 120003, 1), Range32), $clone(new Range32.ptr(120005, 120069, 1), Range32), $clone(new Range32.ptr(120071, 120074, 1), Range32), $clone(new Range32.ptr(120077, 120084, 1), Range32), $clone(new Range32.ptr(120086, 120092, 1), Range32), $clone(new Range32.ptr(120094, 120121, 1), Range32), $clone(new Range32.ptr(120123, 120126, 1), Range32), $clone(new Range32.ptr(120128, 120132, 1), Range32), $clone(new Range32.ptr(120134, 120138, 4), Range32), $clone(new Range32.ptr(120139, 120144, 1), Range32), $clone(new Range32.ptr(120146, 120485, 1), Range32), $clone(new Range32.ptr(120488, 120779, 1), Range32), $clone(new Range32.ptr(120782, 120831, 1), Range32), $clone(new Range32.ptr(126065, 126132, 1), Range32), $clone(new Range32.ptr(126209, 126269, 1), Range32), $clone(new Range32.ptr(126976, 127019, 1), Range32), $clone(new Range32.ptr(127024, 127123, 1), Range32), $clone(new Range32.ptr(127136, 127150, 1), Range32), $clone(new Range32.ptr(127153, 127167, 1), Range32), $clone(new Range32.ptr(127169, 127183, 1), Range32), $clone(new Range32.ptr(127185, 127221, 1), Range32), $clone(new Range32.ptr(127232, 127405, 1), Range32), $clone(new Range32.ptr(127462, 127487, 1), Range32), $clone(new Range32.ptr(127489, 127490, 1), Range32), $clone(new Range32.ptr(127504, 127547, 1), Range32), $clone(new Range32.ptr(127552, 127560, 1), Range32), $clone(new Range32.ptr(127568, 127569, 1), Range32), $clone(new Range32.ptr(127584, 127589, 1), Range32), $clone(new Range32.ptr(127744, 128727, 1), Range32), $clone(new Range32.ptr(128736, 128748, 1), Range32), $clone(new Range32.ptr(128752, 128764, 1), Range32), $clone(new Range32.ptr(128768, 128883, 1), Range32), $clone(new Range32.ptr(128896, 128984, 1), Range32), $clone(new Range32.ptr(128992, 129003, 1), Range32), $clone(new Range32.ptr(129024, 129035, 1), Range32), $clone(new Range32.ptr(129040, 129095, 1), Range32), $clone(new Range32.ptr(129104, 129113, 1), Range32), $clone(new Range32.ptr(129120, 129159, 1), Range32), $clone(new Range32.ptr(129168, 129197, 1), Range32), $clone(new Range32.ptr(129200, 129201, 1), Range32), $clone(new Range32.ptr(129280, 129400, 1), Range32), $clone(new Range32.ptr(129402, 129483, 1), Range32), $clone(new Range32.ptr(129485, 129619, 1), Range32), $clone(new Range32.ptr(129632, 129645, 1), Range32), $clone(new Range32.ptr(129648, 129652, 1), Range32), $clone(new Range32.ptr(129656, 129658, 1), Range32), $clone(new Range32.ptr(129664, 129670, 1), Range32), $clone(new Range32.ptr(129680, 129704, 1), Range32), $clone(new Range32.ptr(129712, 129718, 1), Range32), $clone(new Range32.ptr(129728, 129730, 1), Range32), $clone(new Range32.ptr(129744, 129750, 1), Range32), $clone(new Range32.ptr(129792, 129938, 1), Range32), $clone(new Range32.ptr(129940, 129994, 1), Range32), $clone(new Range32.ptr(130032, 130041, 1), Range32), $clone(new Range32.ptr(917505, 917536, 31), Range32), $clone(new Range32.ptr(917537, 917631, 1), Range32)]), 6);
		_Coptic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(994, 1007, 1), Range16), $clone(new Range16.ptr(11392, 11507, 1), Range16), $clone(new Range16.ptr(11513, 11519, 1), Range16)]), sliceType$1.nil, 0);
		_Cuneiform = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(73728, 74649, 1), Range32), $clone(new Range32.ptr(74752, 74862, 1), Range32), $clone(new Range32.ptr(74864, 74868, 1), Range32), $clone(new Range32.ptr(74880, 75075, 1), Range32)]), 0);
		_Cypriot = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67584, 67589, 1), Range32), $clone(new Range32.ptr(67592, 67594, 2), Range32), $clone(new Range32.ptr(67595, 67637, 1), Range32), $clone(new Range32.ptr(67639, 67640, 1), Range32), $clone(new Range32.ptr(67644, 67647, 3), Range32)]), 0);
		_Cyrillic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1024, 1156, 1), Range16), $clone(new Range16.ptr(1159, 1327, 1), Range16), $clone(new Range16.ptr(7296, 7304, 1), Range16), $clone(new Range16.ptr(7467, 7544, 77), Range16), $clone(new Range16.ptr(11744, 11775, 1), Range16), $clone(new Range16.ptr(42560, 42655, 1), Range16), $clone(new Range16.ptr(65070, 65071, 1), Range16)]), sliceType$1.nil, 0);
		_Deseret = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66560, 66639, 1), Range32)]), 0);
		_Devanagari = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2304, 2384, 1), Range16), $clone(new Range16.ptr(2389, 2403, 1), Range16), $clone(new Range16.ptr(2406, 2431, 1), Range16), $clone(new Range16.ptr(43232, 43263, 1), Range16)]), sliceType$1.nil, 0);
		_Dives_Akuru = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(71936, 71942, 1), Range32), $clone(new Range32.ptr(71945, 71948, 3), Range32), $clone(new Range32.ptr(71949, 71955, 1), Range32), $clone(new Range32.ptr(71957, 71958, 1), Range32), $clone(new Range32.ptr(71960, 71989, 1), Range32), $clone(new Range32.ptr(71991, 71992, 1), Range32), $clone(new Range32.ptr(71995, 72006, 1), Range32), $clone(new Range32.ptr(72016, 72025, 1), Range32)]), 0);
		_Dogra = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(71680, 71739, 1), Range32)]), 0);
		_Duployan = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(113664, 113770, 1), Range32), $clone(new Range32.ptr(113776, 113788, 1), Range32), $clone(new Range32.ptr(113792, 113800, 1), Range32), $clone(new Range32.ptr(113808, 113817, 1), Range32), $clone(new Range32.ptr(113820, 113823, 1), Range32)]), 0);
		_Egyptian_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(77824, 78894, 1), Range32), $clone(new Range32.ptr(78896, 78904, 1), Range32)]), 0);
		_Elbasan = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66816, 66855, 1), Range32)]), 0);
		_Elymaic = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69600, 69622, 1), Range32)]), 0);
		_Ethiopic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(4608, 4680, 1), Range16), $clone(new Range16.ptr(4682, 4685, 1), Range16), $clone(new Range16.ptr(4688, 4694, 1), Range16), $clone(new Range16.ptr(4696, 4698, 2), Range16), $clone(new Range16.ptr(4699, 4701, 1), Range16), $clone(new Range16.ptr(4704, 4744, 1), Range16), $clone(new Range16.ptr(4746, 4749, 1), Range16), $clone(new Range16.ptr(4752, 4784, 1), Range16), $clone(new Range16.ptr(4786, 4789, 1), Range16), $clone(new Range16.ptr(4792, 4798, 1), Range16), $clone(new Range16.ptr(4800, 4802, 2), Range16), $clone(new Range16.ptr(4803, 4805, 1), Range16), $clone(new Range16.ptr(4808, 4822, 1), Range16), $clone(new Range16.ptr(4824, 4880, 1), Range16), $clone(new Range16.ptr(4882, 4885, 1), Range16), $clone(new Range16.ptr(4888, 4954, 1), Range16), $clone(new Range16.ptr(4957, 4988, 1), Range16), $clone(new Range16.ptr(4992, 5017, 1), Range16), $clone(new Range16.ptr(11648, 11670, 1), Range16), $clone(new Range16.ptr(11680, 11686, 1), Range16), $clone(new Range16.ptr(11688, 11694, 1), Range16), $clone(new Range16.ptr(11696, 11702, 1), Range16), $clone(new Range16.ptr(11704, 11710, 1), Range16), $clone(new Range16.ptr(11712, 11718, 1), Range16), $clone(new Range16.ptr(11720, 11726, 1), Range16), $clone(new Range16.ptr(11728, 11734, 1), Range16), $clone(new Range16.ptr(11736, 11742, 1), Range16), $clone(new Range16.ptr(43777, 43782, 1), Range16), $clone(new Range16.ptr(43785, 43790, 1), Range16), $clone(new Range16.ptr(43793, 43798, 1), Range16), $clone(new Range16.ptr(43808, 43814, 1), Range16), $clone(new Range16.ptr(43816, 43822, 1), Range16)]), sliceType$1.nil, 0);
		_Georgian = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(4256, 4293, 1), Range16), $clone(new Range16.ptr(4295, 4301, 6), Range16), $clone(new Range16.ptr(4304, 4346, 1), Range16), $clone(new Range16.ptr(4348, 4351, 1), Range16), $clone(new Range16.ptr(7312, 7354, 1), Range16), $clone(new Range16.ptr(7357, 7359, 1), Range16), $clone(new Range16.ptr(11520, 11557, 1), Range16), $clone(new Range16.ptr(11559, 11565, 6), Range16)]), sliceType$1.nil, 0);
		_Glagolitic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(11264, 11310, 1), Range16), $clone(new Range16.ptr(11312, 11358, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(122880, 122886, 1), Range32), $clone(new Range32.ptr(122888, 122904, 1), Range32), $clone(new Range32.ptr(122907, 122913, 1), Range32), $clone(new Range32.ptr(122915, 122916, 1), Range32), $clone(new Range32.ptr(122918, 122922, 1), Range32)]), 0);
		_Gothic = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66352, 66378, 1), Range32)]), 0);
		_Grantha = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(70400, 70403, 1), Range32), $clone(new Range32.ptr(70405, 70412, 1), Range32), $clone(new Range32.ptr(70415, 70416, 1), Range32), $clone(new Range32.ptr(70419, 70440, 1), Range32), $clone(new Range32.ptr(70442, 70448, 1), Range32), $clone(new Range32.ptr(70450, 70451, 1), Range32), $clone(new Range32.ptr(70453, 70457, 1), Range32), $clone(new Range32.ptr(70460, 70468, 1), Range32), $clone(new Range32.ptr(70471, 70472, 1), Range32), $clone(new Range32.ptr(70475, 70477, 1), Range32), $clone(new Range32.ptr(70480, 70487, 7), Range32), $clone(new Range32.ptr(70493, 70499, 1), Range32), $clone(new Range32.ptr(70502, 70508, 1), Range32), $clone(new Range32.ptr(70512, 70516, 1), Range32)]), 0);
		_Greek = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(880, 883, 1), Range16), $clone(new Range16.ptr(885, 887, 1), Range16), $clone(new Range16.ptr(890, 893, 1), Range16), $clone(new Range16.ptr(895, 900, 5), Range16), $clone(new Range16.ptr(902, 904, 2), Range16), $clone(new Range16.ptr(905, 906, 1), Range16), $clone(new Range16.ptr(908, 910, 2), Range16), $clone(new Range16.ptr(911, 929, 1), Range16), $clone(new Range16.ptr(931, 993, 1), Range16), $clone(new Range16.ptr(1008, 1023, 1), Range16), $clone(new Range16.ptr(7462, 7466, 1), Range16), $clone(new Range16.ptr(7517, 7521, 1), Range16), $clone(new Range16.ptr(7526, 7530, 1), Range16), $clone(new Range16.ptr(7615, 7936, 321), Range16), $clone(new Range16.ptr(7937, 7957, 1), Range16), $clone(new Range16.ptr(7960, 7965, 1), Range16), $clone(new Range16.ptr(7968, 8005, 1), Range16), $clone(new Range16.ptr(8008, 8013, 1), Range16), $clone(new Range16.ptr(8016, 8023, 1), Range16), $clone(new Range16.ptr(8025, 8031, 2), Range16), $clone(new Range16.ptr(8032, 8061, 1), Range16), $clone(new Range16.ptr(8064, 8116, 1), Range16), $clone(new Range16.ptr(8118, 8132, 1), Range16), $clone(new Range16.ptr(8134, 8147, 1), Range16), $clone(new Range16.ptr(8150, 8155, 1), Range16), $clone(new Range16.ptr(8157, 8175, 1), Range16), $clone(new Range16.ptr(8178, 8180, 1), Range16), $clone(new Range16.ptr(8182, 8190, 1), Range16), $clone(new Range16.ptr(8486, 43877, 35391), Range16)]), new sliceType$1([$clone(new Range32.ptr(65856, 65934, 1), Range32), $clone(new Range32.ptr(65952, 119296, 53344), Range32), $clone(new Range32.ptr(119297, 119365, 1), Range32)]), 0);
		_Gujarati = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2689, 2691, 1), Range16), $clone(new Range16.ptr(2693, 2701, 1), Range16), $clone(new Range16.ptr(2703, 2705, 1), Range16), $clone(new Range16.ptr(2707, 2728, 1), Range16), $clone(new Range16.ptr(2730, 2736, 1), Range16), $clone(new Range16.ptr(2738, 2739, 1), Range16), $clone(new Range16.ptr(2741, 2745, 1), Range16), $clone(new Range16.ptr(2748, 2757, 1), Range16), $clone(new Range16.ptr(2759, 2761, 1), Range16), $clone(new Range16.ptr(2763, 2765, 1), Range16), $clone(new Range16.ptr(2768, 2784, 16), Range16), $clone(new Range16.ptr(2785, 2787, 1), Range16), $clone(new Range16.ptr(2790, 2801, 1), Range16), $clone(new Range16.ptr(2809, 2815, 1), Range16)]), sliceType$1.nil, 0);
		_Gunjala_Gondi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(73056, 73061, 1), Range32), $clone(new Range32.ptr(73063, 73064, 1), Range32), $clone(new Range32.ptr(73066, 73102, 1), Range32), $clone(new Range32.ptr(73104, 73105, 1), Range32), $clone(new Range32.ptr(73107, 73112, 1), Range32), $clone(new Range32.ptr(73120, 73129, 1), Range32)]), 0);
		_Gurmukhi = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2561, 2563, 1), Range16), $clone(new Range16.ptr(2565, 2570, 1), Range16), $clone(new Range16.ptr(2575, 2576, 1), Range16), $clone(new Range16.ptr(2579, 2600, 1), Range16), $clone(new Range16.ptr(2602, 2608, 1), Range16), $clone(new Range16.ptr(2610, 2611, 1), Range16), $clone(new Range16.ptr(2613, 2614, 1), Range16), $clone(new Range16.ptr(2616, 2617, 1), Range16), $clone(new Range16.ptr(2620, 2622, 2), Range16), $clone(new Range16.ptr(2623, 2626, 1), Range16), $clone(new Range16.ptr(2631, 2632, 1), Range16), $clone(new Range16.ptr(2635, 2637, 1), Range16), $clone(new Range16.ptr(2641, 2649, 8), Range16), $clone(new Range16.ptr(2650, 2652, 1), Range16), $clone(new Range16.ptr(2654, 2662, 8), Range16), $clone(new Range16.ptr(2663, 2678, 1), Range16)]), sliceType$1.nil, 0);
		_Han = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(11904, 11929, 1), Range16), $clone(new Range16.ptr(11931, 12019, 1), Range16), $clone(new Range16.ptr(12032, 12245, 1), Range16), $clone(new Range16.ptr(12293, 12295, 2), Range16), $clone(new Range16.ptr(12321, 12329, 1), Range16), $clone(new Range16.ptr(12344, 12347, 1), Range16), $clone(new Range16.ptr(13312, 19903, 1), Range16), $clone(new Range16.ptr(19968, 40956, 1), Range16), $clone(new Range16.ptr(63744, 64109, 1), Range16), $clone(new Range16.ptr(64112, 64217, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(94192, 94193, 1), Range32), $clone(new Range32.ptr(131072, 173789, 1), Range32), $clone(new Range32.ptr(173824, 177972, 1), Range32), $clone(new Range32.ptr(177984, 178205, 1), Range32), $clone(new Range32.ptr(178208, 183969, 1), Range32), $clone(new Range32.ptr(183984, 191456, 1), Range32), $clone(new Range32.ptr(194560, 195101, 1), Range32), $clone(new Range32.ptr(196608, 201546, 1), Range32)]), 0);
		_Hangul = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(4352, 4607, 1), Range16), $clone(new Range16.ptr(12334, 12335, 1), Range16), $clone(new Range16.ptr(12593, 12686, 1), Range16), $clone(new Range16.ptr(12800, 12830, 1), Range16), $clone(new Range16.ptr(12896, 12926, 1), Range16), $clone(new Range16.ptr(43360, 43388, 1), Range16), $clone(new Range16.ptr(44032, 55203, 1), Range16), $clone(new Range16.ptr(55216, 55238, 1), Range16), $clone(new Range16.ptr(55243, 55291, 1), Range16), $clone(new Range16.ptr(65440, 65470, 1), Range16), $clone(new Range16.ptr(65474, 65479, 1), Range16), $clone(new Range16.ptr(65482, 65487, 1), Range16), $clone(new Range16.ptr(65490, 65495, 1), Range16), $clone(new Range16.ptr(65498, 65500, 1), Range16)]), sliceType$1.nil, 0);
		_Hanifi_Rohingya = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68864, 68903, 1), Range32), $clone(new Range32.ptr(68912, 68921, 1), Range32)]), 0);
		_Hanunoo = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5920, 5940, 1), Range16)]), sliceType$1.nil, 0);
		_Hatran = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67808, 67826, 1), Range32), $clone(new Range32.ptr(67828, 67829, 1), Range32), $clone(new Range32.ptr(67835, 67839, 1), Range32)]), 0);
		_Hebrew = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1425, 1479, 1), Range16), $clone(new Range16.ptr(1488, 1514, 1), Range16), $clone(new Range16.ptr(1519, 1524, 1), Range16), $clone(new Range16.ptr(64285, 64310, 1), Range16), $clone(new Range16.ptr(64312, 64316, 1), Range16), $clone(new Range16.ptr(64318, 64320, 2), Range16), $clone(new Range16.ptr(64321, 64323, 2), Range16), $clone(new Range16.ptr(64324, 64326, 2), Range16), $clone(new Range16.ptr(64327, 64335, 1), Range16)]), sliceType$1.nil, 0);
		_Hiragana = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(12353, 12438, 1), Range16), $clone(new Range16.ptr(12445, 12447, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(110593, 110878, 1), Range32), $clone(new Range32.ptr(110928, 110930, 1), Range32), $clone(new Range32.ptr(127488, 127488, 1), Range32)]), 0);
		_Imperial_Aramaic = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67648, 67669, 1), Range32), $clone(new Range32.ptr(67671, 67679, 1), Range32)]), 0);
		_Inherited = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(768, 879, 1), Range16), $clone(new Range16.ptr(1157, 1158, 1), Range16), $clone(new Range16.ptr(1611, 1621, 1), Range16), $clone(new Range16.ptr(1648, 2385, 737), Range16), $clone(new Range16.ptr(2386, 2388, 1), Range16), $clone(new Range16.ptr(6832, 6848, 1), Range16), $clone(new Range16.ptr(7376, 7378, 1), Range16), $clone(new Range16.ptr(7380, 7392, 1), Range16), $clone(new Range16.ptr(7394, 7400, 1), Range16), $clone(new Range16.ptr(7405, 7412, 7), Range16), $clone(new Range16.ptr(7416, 7417, 1), Range16), $clone(new Range16.ptr(7616, 7673, 1), Range16), $clone(new Range16.ptr(7675, 7679, 1), Range16), $clone(new Range16.ptr(8204, 8205, 1), Range16), $clone(new Range16.ptr(8400, 8432, 1), Range16), $clone(new Range16.ptr(12330, 12333, 1), Range16), $clone(new Range16.ptr(12441, 12442, 1), Range16), $clone(new Range16.ptr(65024, 65039, 1), Range16), $clone(new Range16.ptr(65056, 65069, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66045, 66272, 227), Range32), $clone(new Range32.ptr(70459, 119143, 48684), Range32), $clone(new Range32.ptr(119144, 119145, 1), Range32), $clone(new Range32.ptr(119163, 119170, 1), Range32), $clone(new Range32.ptr(119173, 119179, 1), Range32), $clone(new Range32.ptr(119210, 119213, 1), Range32), $clone(new Range32.ptr(917760, 917999, 1), Range32)]), 0);
		_Inscriptional_Pahlavi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68448, 68466, 1), Range32), $clone(new Range32.ptr(68472, 68479, 1), Range32)]), 0);
		_Inscriptional_Parthian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68416, 68437, 1), Range32), $clone(new Range32.ptr(68440, 68447, 1), Range32)]), 0);
		_Javanese = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43392, 43469, 1), Range16), $clone(new Range16.ptr(43472, 43481, 1), Range16), $clone(new Range16.ptr(43486, 43487, 1), Range16)]), sliceType$1.nil, 0);
		_Kaithi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69760, 69825, 1), Range32), $clone(new Range32.ptr(69837, 69837, 1), Range32)]), 0);
		_Kannada = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(3200, 3212, 1), Range16), $clone(new Range16.ptr(3214, 3216, 1), Range16), $clone(new Range16.ptr(3218, 3240, 1), Range16), $clone(new Range16.ptr(3242, 3251, 1), Range16), $clone(new Range16.ptr(3253, 3257, 1), Range16), $clone(new Range16.ptr(3260, 3268, 1), Range16), $clone(new Range16.ptr(3270, 3272, 1), Range16), $clone(new Range16.ptr(3274, 3277, 1), Range16), $clone(new Range16.ptr(3285, 3286, 1), Range16), $clone(new Range16.ptr(3294, 3296, 2), Range16), $clone(new Range16.ptr(3297, 3299, 1), Range16), $clone(new Range16.ptr(3302, 3311, 1), Range16), $clone(new Range16.ptr(3313, 3314, 1), Range16)]), sliceType$1.nil, 0);
		_Katakana = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(12449, 12538, 1), Range16), $clone(new Range16.ptr(12541, 12543, 1), Range16), $clone(new Range16.ptr(12784, 12799, 1), Range16), $clone(new Range16.ptr(13008, 13054, 1), Range16), $clone(new Range16.ptr(13056, 13143, 1), Range16), $clone(new Range16.ptr(65382, 65391, 1), Range16), $clone(new Range16.ptr(65393, 65437, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(110592, 110948, 356), Range32), $clone(new Range32.ptr(110949, 110951, 1), Range32)]), 0);
		_Kayah_Li = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43264, 43309, 1), Range16), $clone(new Range16.ptr(43311, 43311, 1), Range16)]), sliceType$1.nil, 0);
		_Kharoshthi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68096, 68099, 1), Range32), $clone(new Range32.ptr(68101, 68102, 1), Range32), $clone(new Range32.ptr(68108, 68115, 1), Range32), $clone(new Range32.ptr(68117, 68119, 1), Range32), $clone(new Range32.ptr(68121, 68149, 1), Range32), $clone(new Range32.ptr(68152, 68154, 1), Range32), $clone(new Range32.ptr(68159, 68168, 1), Range32), $clone(new Range32.ptr(68176, 68184, 1), Range32)]), 0);
		_Khitan_Small_Script = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(94180, 101120, 6940), Range32), $clone(new Range32.ptr(101121, 101589, 1), Range32)]), 0);
		_Khmer = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6016, 6109, 1), Range16), $clone(new Range16.ptr(6112, 6121, 1), Range16), $clone(new Range16.ptr(6128, 6137, 1), Range16), $clone(new Range16.ptr(6624, 6655, 1), Range16)]), sliceType$1.nil, 0);
		_Khojki = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(70144, 70161, 1), Range32), $clone(new Range32.ptr(70163, 70206, 1), Range32)]), 0);
		_Khudawadi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(70320, 70378, 1), Range32), $clone(new Range32.ptr(70384, 70393, 1), Range32)]), 0);
		_Lao = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(3713, 3714, 1), Range16), $clone(new Range16.ptr(3716, 3718, 2), Range16), $clone(new Range16.ptr(3719, 3722, 1), Range16), $clone(new Range16.ptr(3724, 3747, 1), Range16), $clone(new Range16.ptr(3749, 3751, 2), Range16), $clone(new Range16.ptr(3752, 3773, 1), Range16), $clone(new Range16.ptr(3776, 3780, 1), Range16), $clone(new Range16.ptr(3782, 3784, 2), Range16), $clone(new Range16.ptr(3785, 3789, 1), Range16), $clone(new Range16.ptr(3792, 3801, 1), Range16), $clone(new Range16.ptr(3804, 3807, 1), Range16)]), sliceType$1.nil, 0);
		_Latin = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(65, 90, 1), Range16), $clone(new Range16.ptr(97, 122, 1), Range16), $clone(new Range16.ptr(170, 186, 16), Range16), $clone(new Range16.ptr(192, 214, 1), Range16), $clone(new Range16.ptr(216, 246, 1), Range16), $clone(new Range16.ptr(248, 696, 1), Range16), $clone(new Range16.ptr(736, 740, 1), Range16), $clone(new Range16.ptr(7424, 7461, 1), Range16), $clone(new Range16.ptr(7468, 7516, 1), Range16), $clone(new Range16.ptr(7522, 7525, 1), Range16), $clone(new Range16.ptr(7531, 7543, 1), Range16), $clone(new Range16.ptr(7545, 7614, 1), Range16), $clone(new Range16.ptr(7680, 7935, 1), Range16), $clone(new Range16.ptr(8305, 8319, 14), Range16), $clone(new Range16.ptr(8336, 8348, 1), Range16), $clone(new Range16.ptr(8490, 8491, 1), Range16), $clone(new Range16.ptr(8498, 8526, 28), Range16), $clone(new Range16.ptr(8544, 8584, 1), Range16), $clone(new Range16.ptr(11360, 11391, 1), Range16), $clone(new Range16.ptr(42786, 42887, 1), Range16), $clone(new Range16.ptr(42891, 42943, 1), Range16), $clone(new Range16.ptr(42946, 42954, 1), Range16), $clone(new Range16.ptr(42997, 43007, 1), Range16), $clone(new Range16.ptr(43824, 43866, 1), Range16), $clone(new Range16.ptr(43868, 43876, 1), Range16), $clone(new Range16.ptr(43878, 43881, 1), Range16), $clone(new Range16.ptr(64256, 64262, 1), Range16), $clone(new Range16.ptr(65313, 65338, 1), Range16), $clone(new Range16.ptr(65345, 65370, 1), Range16)]), sliceType$1.nil, 5);
		_Lepcha = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(7168, 7223, 1), Range16), $clone(new Range16.ptr(7227, 7241, 1), Range16), $clone(new Range16.ptr(7245, 7247, 1), Range16)]), sliceType$1.nil, 0);
		_Limbu = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6400, 6430, 1), Range16), $clone(new Range16.ptr(6432, 6443, 1), Range16), $clone(new Range16.ptr(6448, 6459, 1), Range16), $clone(new Range16.ptr(6464, 6468, 4), Range16), $clone(new Range16.ptr(6469, 6479, 1), Range16)]), sliceType$1.nil, 0);
		_Linear_A = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67072, 67382, 1), Range32), $clone(new Range32.ptr(67392, 67413, 1), Range32), $clone(new Range32.ptr(67424, 67431, 1), Range32)]), 0);
		_Linear_B = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(65536, 65547, 1), Range32), $clone(new Range32.ptr(65549, 65574, 1), Range32), $clone(new Range32.ptr(65576, 65594, 1), Range32), $clone(new Range32.ptr(65596, 65597, 1), Range32), $clone(new Range32.ptr(65599, 65613, 1), Range32), $clone(new Range32.ptr(65616, 65629, 1), Range32), $clone(new Range32.ptr(65664, 65786, 1), Range32)]), 0);
		_Lisu = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(42192, 42239, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(73648, 73648, 1), Range32)]), 0);
		_Lycian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66176, 66204, 1), Range32)]), 0);
		_Lydian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67872, 67897, 1), Range32), $clone(new Range32.ptr(67903, 67903, 1), Range32)]), 0);
		_Mahajani = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69968, 70006, 1), Range32)]), 0);
		_Makasar = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(73440, 73464, 1), Range32)]), 0);
		_Malayalam = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(3328, 3340, 1), Range16), $clone(new Range16.ptr(3342, 3344, 1), Range16), $clone(new Range16.ptr(3346, 3396, 1), Range16), $clone(new Range16.ptr(3398, 3400, 1), Range16), $clone(new Range16.ptr(3402, 3407, 1), Range16), $clone(new Range16.ptr(3412, 3427, 1), Range16), $clone(new Range16.ptr(3430, 3455, 1), Range16)]), sliceType$1.nil, 0);
		_Mandaic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2112, 2139, 1), Range16), $clone(new Range16.ptr(2142, 2142, 1), Range16)]), sliceType$1.nil, 0);
		_Manichaean = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68288, 68326, 1), Range32), $clone(new Range32.ptr(68331, 68342, 1), Range32)]), 0);
		_Marchen = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(72816, 72847, 1), Range32), $clone(new Range32.ptr(72850, 72871, 1), Range32), $clone(new Range32.ptr(72873, 72886, 1), Range32)]), 0);
		_Masaram_Gondi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(72960, 72966, 1), Range32), $clone(new Range32.ptr(72968, 72969, 1), Range32), $clone(new Range32.ptr(72971, 73014, 1), Range32), $clone(new Range32.ptr(73018, 73020, 2), Range32), $clone(new Range32.ptr(73021, 73023, 2), Range32), $clone(new Range32.ptr(73024, 73031, 1), Range32), $clone(new Range32.ptr(73040, 73049, 1), Range32)]), 0);
		_Medefaidrin = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(93760, 93850, 1), Range32)]), 0);
		_Meetei_Mayek = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43744, 43766, 1), Range16), $clone(new Range16.ptr(43968, 44013, 1), Range16), $clone(new Range16.ptr(44016, 44025, 1), Range16)]), sliceType$1.nil, 0);
		_Mende_Kikakui = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(124928, 125124, 1), Range32), $clone(new Range32.ptr(125127, 125142, 1), Range32)]), 0);
		_Meroitic_Cursive = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68000, 68023, 1), Range32), $clone(new Range32.ptr(68028, 68047, 1), Range32), $clone(new Range32.ptr(68050, 68095, 1), Range32)]), 0);
		_Meroitic_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67968, 67999, 1), Range32)]), 0);
		_Miao = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(93952, 94026, 1), Range32), $clone(new Range32.ptr(94031, 94087, 1), Range32), $clone(new Range32.ptr(94095, 94111, 1), Range32)]), 0);
		_Modi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(71168, 71236, 1), Range32), $clone(new Range32.ptr(71248, 71257, 1), Range32)]), 0);
		_Mongolian = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6144, 6145, 1), Range16), $clone(new Range16.ptr(6148, 6150, 2), Range16), $clone(new Range16.ptr(6151, 6158, 1), Range16), $clone(new Range16.ptr(6160, 6169, 1), Range16), $clone(new Range16.ptr(6176, 6264, 1), Range16), $clone(new Range16.ptr(6272, 6314, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(71264, 71276, 1), Range32)]), 0);
		_Mro = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(92736, 92766, 1), Range32), $clone(new Range32.ptr(92768, 92777, 1), Range32), $clone(new Range32.ptr(92782, 92783, 1), Range32)]), 0);
		_Multani = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(70272, 70278, 1), Range32), $clone(new Range32.ptr(70280, 70282, 2), Range32), $clone(new Range32.ptr(70283, 70285, 1), Range32), $clone(new Range32.ptr(70287, 70301, 1), Range32), $clone(new Range32.ptr(70303, 70313, 1), Range32)]), 0);
		_Myanmar = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(4096, 4255, 1), Range16), $clone(new Range16.ptr(43488, 43518, 1), Range16), $clone(new Range16.ptr(43616, 43647, 1), Range16)]), sliceType$1.nil, 0);
		_Nabataean = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67712, 67742, 1), Range32), $clone(new Range32.ptr(67751, 67759, 1), Range32)]), 0);
		_Nandinagari = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(72096, 72103, 1), Range32), $clone(new Range32.ptr(72106, 72151, 1), Range32), $clone(new Range32.ptr(72154, 72164, 1), Range32)]), 0);
		_New_Tai_Lue = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6528, 6571, 1), Range16), $clone(new Range16.ptr(6576, 6601, 1), Range16), $clone(new Range16.ptr(6608, 6618, 1), Range16), $clone(new Range16.ptr(6622, 6623, 1), Range16)]), sliceType$1.nil, 0);
		_Newa = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(70656, 70747, 1), Range32), $clone(new Range32.ptr(70749, 70753, 1), Range32)]), 0);
		_Nko = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1984, 2042, 1), Range16), $clone(new Range16.ptr(2045, 2047, 1), Range16)]), sliceType$1.nil, 0);
		_Nushu = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(94177, 110960, 16783), Range32), $clone(new Range32.ptr(110961, 111355, 1), Range32)]), 0);
		_Nyiakeng_Puachue_Hmong = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(123136, 123180, 1), Range32), $clone(new Range32.ptr(123184, 123197, 1), Range32), $clone(new Range32.ptr(123200, 123209, 1), Range32), $clone(new Range32.ptr(123214, 123215, 1), Range32)]), 0);
		_Ogham = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5760, 5788, 1), Range16)]), sliceType$1.nil, 0);
		_Ol_Chiki = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(7248, 7295, 1), Range16)]), sliceType$1.nil, 0);
		_Old_Hungarian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68736, 68786, 1), Range32), $clone(new Range32.ptr(68800, 68850, 1), Range32), $clone(new Range32.ptr(68858, 68863, 1), Range32)]), 0);
		_Old_Italic = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66304, 66339, 1), Range32), $clone(new Range32.ptr(66349, 66351, 1), Range32)]), 0);
		_Old_North_Arabian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68224, 68255, 1), Range32)]), 0);
		_Old_Permic = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66384, 66426, 1), Range32)]), 0);
		_Old_Persian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66464, 66499, 1), Range32), $clone(new Range32.ptr(66504, 66517, 1), Range32)]), 0);
		_Old_Sogdian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69376, 69415, 1), Range32)]), 0);
		_Old_South_Arabian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68192, 68223, 1), Range32)]), 0);
		_Old_Turkic = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68608, 68680, 1), Range32)]), 0);
		_Oriya = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2817, 2819, 1), Range16), $clone(new Range16.ptr(2821, 2828, 1), Range16), $clone(new Range16.ptr(2831, 2832, 1), Range16), $clone(new Range16.ptr(2835, 2856, 1), Range16), $clone(new Range16.ptr(2858, 2864, 1), Range16), $clone(new Range16.ptr(2866, 2867, 1), Range16), $clone(new Range16.ptr(2869, 2873, 1), Range16), $clone(new Range16.ptr(2876, 2884, 1), Range16), $clone(new Range16.ptr(2887, 2888, 1), Range16), $clone(new Range16.ptr(2891, 2893, 1), Range16), $clone(new Range16.ptr(2901, 2903, 1), Range16), $clone(new Range16.ptr(2908, 2909, 1), Range16), $clone(new Range16.ptr(2911, 2915, 1), Range16), $clone(new Range16.ptr(2918, 2935, 1), Range16)]), sliceType$1.nil, 0);
		_Osage = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66736, 66771, 1), Range32), $clone(new Range32.ptr(66776, 66811, 1), Range32)]), 0);
		_Osmanya = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66688, 66717, 1), Range32), $clone(new Range32.ptr(66720, 66729, 1), Range32)]), 0);
		_Pahawh_Hmong = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(92928, 92997, 1), Range32), $clone(new Range32.ptr(93008, 93017, 1), Range32), $clone(new Range32.ptr(93019, 93025, 1), Range32), $clone(new Range32.ptr(93027, 93047, 1), Range32), $clone(new Range32.ptr(93053, 93071, 1), Range32)]), 0);
		_Palmyrene = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67680, 67711, 1), Range32)]), 0);
		_Pau_Cin_Hau = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(72384, 72440, 1), Range32)]), 0);
		_Phags_Pa = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43072, 43127, 1), Range16)]), sliceType$1.nil, 0);
		_Phoenician = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(67840, 67867, 1), Range32), $clone(new Range32.ptr(67871, 67871, 1), Range32)]), 0);
		_Psalter_Pahlavi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(68480, 68497, 1), Range32), $clone(new Range32.ptr(68505, 68508, 1), Range32), $clone(new Range32.ptr(68521, 68527, 1), Range32)]), 0);
		_Rejang = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43312, 43347, 1), Range16), $clone(new Range16.ptr(43359, 43359, 1), Range16)]), sliceType$1.nil, 0);
		_Runic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5792, 5866, 1), Range16), $clone(new Range16.ptr(5870, 5880, 1), Range16)]), sliceType$1.nil, 0);
		_Samaritan = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2048, 2093, 1), Range16), $clone(new Range16.ptr(2096, 2110, 1), Range16)]), sliceType$1.nil, 0);
		_Saurashtra = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43136, 43205, 1), Range16), $clone(new Range16.ptr(43214, 43225, 1), Range16)]), sliceType$1.nil, 0);
		_Sharada = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(70016, 70111, 1), Range32)]), 0);
		_Shavian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66640, 66687, 1), Range32)]), 0);
		_Siddham = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(71040, 71093, 1), Range32), $clone(new Range32.ptr(71096, 71133, 1), Range32)]), 0);
		_SignWriting = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(120832, 121483, 1), Range32), $clone(new Range32.ptr(121499, 121503, 1), Range32), $clone(new Range32.ptr(121505, 121519, 1), Range32)]), 0);
		_Sinhala = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(3457, 3459, 1), Range16), $clone(new Range16.ptr(3461, 3478, 1), Range16), $clone(new Range16.ptr(3482, 3505, 1), Range16), $clone(new Range16.ptr(3507, 3515, 1), Range16), $clone(new Range16.ptr(3517, 3520, 3), Range16), $clone(new Range16.ptr(3521, 3526, 1), Range16), $clone(new Range16.ptr(3530, 3535, 5), Range16), $clone(new Range16.ptr(3536, 3540, 1), Range16), $clone(new Range16.ptr(3542, 3544, 2), Range16), $clone(new Range16.ptr(3545, 3551, 1), Range16), $clone(new Range16.ptr(3558, 3567, 1), Range16), $clone(new Range16.ptr(3570, 3572, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(70113, 70132, 1), Range32)]), 0);
		_Sogdian = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69424, 69465, 1), Range32)]), 0);
		_Sora_Sompeng = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69840, 69864, 1), Range32), $clone(new Range32.ptr(69872, 69881, 1), Range32)]), 0);
		_Soyombo = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(72272, 72354, 1), Range32)]), 0);
		_Sundanese = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(7040, 7103, 1), Range16), $clone(new Range16.ptr(7360, 7367, 1), Range16)]), sliceType$1.nil, 0);
		_Syloti_Nagri = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43008, 43052, 1), Range16)]), sliceType$1.nil, 0);
		_Syriac = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1792, 1805, 1), Range16), $clone(new Range16.ptr(1807, 1866, 1), Range16), $clone(new Range16.ptr(1869, 1871, 1), Range16), $clone(new Range16.ptr(2144, 2154, 1), Range16)]), sliceType$1.nil, 0);
		_Tagalog = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5888, 5900, 1), Range16), $clone(new Range16.ptr(5902, 5908, 1), Range16)]), sliceType$1.nil, 0);
		_Tagbanwa = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(5984, 5996, 1), Range16), $clone(new Range16.ptr(5998, 6000, 1), Range16), $clone(new Range16.ptr(6002, 6003, 1), Range16)]), sliceType$1.nil, 0);
		_Tai_Le = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6480, 6509, 1), Range16), $clone(new Range16.ptr(6512, 6516, 1), Range16)]), sliceType$1.nil, 0);
		_Tai_Tham = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6688, 6750, 1), Range16), $clone(new Range16.ptr(6752, 6780, 1), Range16), $clone(new Range16.ptr(6783, 6793, 1), Range16), $clone(new Range16.ptr(6800, 6809, 1), Range16), $clone(new Range16.ptr(6816, 6829, 1), Range16)]), sliceType$1.nil, 0);
		_Tai_Viet = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(43648, 43714, 1), Range16), $clone(new Range16.ptr(43739, 43743, 1), Range16)]), sliceType$1.nil, 0);
		_Takri = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(71296, 71352, 1), Range32), $clone(new Range32.ptr(71360, 71369, 1), Range32)]), 0);
		_Tamil = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2946, 2947, 1), Range16), $clone(new Range16.ptr(2949, 2954, 1), Range16), $clone(new Range16.ptr(2958, 2960, 1), Range16), $clone(new Range16.ptr(2962, 2965, 1), Range16), $clone(new Range16.ptr(2969, 2970, 1), Range16), $clone(new Range16.ptr(2972, 2974, 2), Range16), $clone(new Range16.ptr(2975, 2979, 4), Range16), $clone(new Range16.ptr(2980, 2984, 4), Range16), $clone(new Range16.ptr(2985, 2986, 1), Range16), $clone(new Range16.ptr(2990, 3001, 1), Range16), $clone(new Range16.ptr(3006, 3010, 1), Range16), $clone(new Range16.ptr(3014, 3016, 1), Range16), $clone(new Range16.ptr(3018, 3021, 1), Range16), $clone(new Range16.ptr(3024, 3031, 7), Range16), $clone(new Range16.ptr(3046, 3066, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(73664, 73713, 1), Range32), $clone(new Range32.ptr(73727, 73727, 1), Range32)]), 0);
		_Tangut = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(94176, 94208, 32), Range32), $clone(new Range32.ptr(94209, 100343, 1), Range32), $clone(new Range32.ptr(100352, 101119, 1), Range32), $clone(new Range32.ptr(101632, 101640, 1), Range32)]), 0);
		_Telugu = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(3072, 3084, 1), Range16), $clone(new Range16.ptr(3086, 3088, 1), Range16), $clone(new Range16.ptr(3090, 3112, 1), Range16), $clone(new Range16.ptr(3114, 3129, 1), Range16), $clone(new Range16.ptr(3133, 3140, 1), Range16), $clone(new Range16.ptr(3142, 3144, 1), Range16), $clone(new Range16.ptr(3146, 3149, 1), Range16), $clone(new Range16.ptr(3157, 3158, 1), Range16), $clone(new Range16.ptr(3160, 3162, 1), Range16), $clone(new Range16.ptr(3168, 3171, 1), Range16), $clone(new Range16.ptr(3174, 3183, 1), Range16), $clone(new Range16.ptr(3191, 3199, 1), Range16)]), sliceType$1.nil, 0);
		_Thaana = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1920, 1969, 1), Range16)]), sliceType$1.nil, 0);
		_Thai = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(3585, 3642, 1), Range16), $clone(new Range16.ptr(3648, 3675, 1), Range16)]), sliceType$1.nil, 0);
		_Tibetan = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(3840, 3911, 1), Range16), $clone(new Range16.ptr(3913, 3948, 1), Range16), $clone(new Range16.ptr(3953, 3991, 1), Range16), $clone(new Range16.ptr(3993, 4028, 1), Range16), $clone(new Range16.ptr(4030, 4044, 1), Range16), $clone(new Range16.ptr(4046, 4052, 1), Range16), $clone(new Range16.ptr(4057, 4058, 1), Range16)]), sliceType$1.nil, 0);
		_Tifinagh = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(11568, 11623, 1), Range16), $clone(new Range16.ptr(11631, 11632, 1), Range16), $clone(new Range16.ptr(11647, 11647, 1), Range16)]), sliceType$1.nil, 0);
		_Tirhuta = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(70784, 70855, 1), Range32), $clone(new Range32.ptr(70864, 70873, 1), Range32)]), 0);
		_Ugaritic = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(66432, 66461, 1), Range32), $clone(new Range32.ptr(66463, 66463, 1), Range32)]), 0);
		_Vai = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(42240, 42539, 1), Range16)]), sliceType$1.nil, 0);
		_Wancho = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(123584, 123641, 1), Range32), $clone(new Range32.ptr(123647, 123647, 1), Range32)]), 0);
		_Warang_Citi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(71840, 71922, 1), Range32), $clone(new Range32.ptr(71935, 71935, 1), Range32)]), 0);
		_Yezidi = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(69248, 69289, 1), Range32), $clone(new Range32.ptr(69291, 69293, 1), Range32), $clone(new Range32.ptr(69296, 69297, 1), Range32)]), 0);
		_Yi = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(40960, 42124, 1), Range16), $clone(new Range16.ptr(42128, 42182, 1), Range16)]), sliceType$1.nil, 0);
		_Zanabazar_Square = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(72192, 72263, 1), Range32)]), 0);
		$pkg.Adlam = _Adlam;
		$pkg.Ahom = _Ahom;
		$pkg.Anatolian_Hieroglyphs = _Anatolian_Hieroglyphs;
		$pkg.Arabic = _Arabic;
		$pkg.Armenian = _Armenian;
		$pkg.Avestan = _Avestan;
		$pkg.Balinese = _Balinese;
		$pkg.Bamum = _Bamum;
		$pkg.Bassa_Vah = _Bassa_Vah;
		$pkg.Batak = _Batak;
		$pkg.Bengali = _Bengali;
		$pkg.Bhaiksuki = _Bhaiksuki;
		$pkg.Bopomofo = _Bopomofo;
		$pkg.Brahmi = _Brahmi;
		$pkg.Braille = _Braille;
		$pkg.Buginese = _Buginese;
		$pkg.Buhid = _Buhid;
		$pkg.Canadian_Aboriginal = _Canadian_Aboriginal;
		$pkg.Carian = _Carian;
		$pkg.Caucasian_Albanian = _Caucasian_Albanian;
		$pkg.Chakma = _Chakma;
		$pkg.Cham = _Cham;
		$pkg.Cherokee = _Cherokee;
		$pkg.Chorasmian = _Chorasmian;
		$pkg.Common = _Common;
		$pkg.Coptic = _Coptic;
		$pkg.Cuneiform = _Cuneiform;
		$pkg.Cypriot = _Cypriot;
		$pkg.Cyrillic = _Cyrillic;
		$pkg.Deseret = _Deseret;
		$pkg.Devanagari = _Devanagari;
		$pkg.Dives_Akuru = _Dives_Akuru;
		$pkg.Dogra = _Dogra;
		$pkg.Duployan = _Duployan;
		$pkg.Egyptian_Hieroglyphs = _Egyptian_Hieroglyphs;
		$pkg.Elbasan = _Elbasan;
		$pkg.Elymaic = _Elymaic;
		$pkg.Ethiopic = _Ethiopic;
		$pkg.Georgian = _Georgian;
		$pkg.Glagolitic = _Glagolitic;
		$pkg.Gothic = _Gothic;
		$pkg.Grantha = _Grantha;
		$pkg.Greek = _Greek;
		$pkg.Gujarati = _Gujarati;
		$pkg.Gunjala_Gondi = _Gunjala_Gondi;
		$pkg.Gurmukhi = _Gurmukhi;
		$pkg.Han = _Han;
		$pkg.Hangul = _Hangul;
		$pkg.Hanifi_Rohingya = _Hanifi_Rohingya;
		$pkg.Hanunoo = _Hanunoo;
		$pkg.Hatran = _Hatran;
		$pkg.Hebrew = _Hebrew;
		$pkg.Hiragana = _Hiragana;
		$pkg.Imperial_Aramaic = _Imperial_Aramaic;
		$pkg.Inherited = _Inherited;
		$pkg.Inscriptional_Pahlavi = _Inscriptional_Pahlavi;
		$pkg.Inscriptional_Parthian = _Inscriptional_Parthian;
		$pkg.Javanese = _Javanese;
		$pkg.Kaithi = _Kaithi;
		$pkg.Kannada = _Kannada;
		$pkg.Katakana = _Katakana;
		$pkg.Kayah_Li = _Kayah_Li;
		$pkg.Kharoshthi = _Kharoshthi;
		$pkg.Khitan_Small_Script = _Khitan_Small_Script;
		$pkg.Khmer = _Khmer;
		$pkg.Khojki = _Khojki;
		$pkg.Khudawadi = _Khudawadi;
		$pkg.Lao = _Lao;
		$pkg.Latin = _Latin;
		$pkg.Lepcha = _Lepcha;
		$pkg.Limbu = _Limbu;
		$pkg.Linear_A = _Linear_A;
		$pkg.Linear_B = _Linear_B;
		$pkg.Lisu = _Lisu;
		$pkg.Lycian = _Lycian;
		$pkg.Lydian = _Lydian;
		$pkg.Mahajani = _Mahajani;
		$pkg.Makasar = _Makasar;
		$pkg.Malayalam = _Malayalam;
		$pkg.Mandaic = _Mandaic;
		$pkg.Manichaean = _Manichaean;
		$pkg.Marchen = _Marchen;
		$pkg.Masaram_Gondi = _Masaram_Gondi;
		$pkg.Medefaidrin = _Medefaidrin;
		$pkg.Meetei_Mayek = _Meetei_Mayek;
		$pkg.Mende_Kikakui = _Mende_Kikakui;
		$pkg.Meroitic_Cursive = _Meroitic_Cursive;
		$pkg.Meroitic_Hieroglyphs = _Meroitic_Hieroglyphs;
		$pkg.Miao = _Miao;
		$pkg.Modi = _Modi;
		$pkg.Mongolian = _Mongolian;
		$pkg.Mro = _Mro;
		$pkg.Multani = _Multani;
		$pkg.Myanmar = _Myanmar;
		$pkg.Nabataean = _Nabataean;
		$pkg.Nandinagari = _Nandinagari;
		$pkg.New_Tai_Lue = _New_Tai_Lue;
		$pkg.Newa = _Newa;
		$pkg.Nko = _Nko;
		$pkg.Nushu = _Nushu;
		$pkg.Nyiakeng_Puachue_Hmong = _Nyiakeng_Puachue_Hmong;
		$pkg.Ogham = _Ogham;
		$pkg.Ol_Chiki = _Ol_Chiki;
		$pkg.Old_Hungarian = _Old_Hungarian;
		$pkg.Old_Italic = _Old_Italic;
		$pkg.Old_North_Arabian = _Old_North_Arabian;
		$pkg.Old_Permic = _Old_Permic;
		$pkg.Old_Persian = _Old_Persian;
		$pkg.Old_Sogdian = _Old_Sogdian;
		$pkg.Old_South_Arabian = _Old_South_Arabian;
		$pkg.Old_Turkic = _Old_Turkic;
		$pkg.Oriya = _Oriya;
		$pkg.Osage = _Osage;
		$pkg.Osmanya = _Osmanya;
		$pkg.Pahawh_Hmong = _Pahawh_Hmong;
		$pkg.Palmyrene = _Palmyrene;
		$pkg.Pau_Cin_Hau = _Pau_Cin_Hau;
		$pkg.Phags_Pa = _Phags_Pa;
		$pkg.Phoenician = _Phoenician;
		$pkg.Psalter_Pahlavi = _Psalter_Pahlavi;
		$pkg.Rejang = _Rejang;
		$pkg.Runic = _Runic;
		$pkg.Samaritan = _Samaritan;
		$pkg.Saurashtra = _Saurashtra;
		$pkg.Sharada = _Sharada;
		$pkg.Shavian = _Shavian;
		$pkg.Siddham = _Siddham;
		$pkg.SignWriting = _SignWriting;
		$pkg.Sinhala = _Sinhala;
		$pkg.Sogdian = _Sogdian;
		$pkg.Sora_Sompeng = _Sora_Sompeng;
		$pkg.Soyombo = _Soyombo;
		$pkg.Sundanese = _Sundanese;
		$pkg.Syloti_Nagri = _Syloti_Nagri;
		$pkg.Syriac = _Syriac;
		$pkg.Tagalog = _Tagalog;
		$pkg.Tagbanwa = _Tagbanwa;
		$pkg.Tai_Le = _Tai_Le;
		$pkg.Tai_Tham = _Tai_Tham;
		$pkg.Tai_Viet = _Tai_Viet;
		$pkg.Takri = _Takri;
		$pkg.Tamil = _Tamil;
		$pkg.Tangut = _Tangut;
		$pkg.Telugu = _Telugu;
		$pkg.Thaana = _Thaana;
		$pkg.Thai = _Thai;
		$pkg.Tibetan = _Tibetan;
		$pkg.Tifinagh = _Tifinagh;
		$pkg.Tirhuta = _Tirhuta;
		$pkg.Ugaritic = _Ugaritic;
		$pkg.Vai = _Vai;
		$pkg.Wancho = _Wancho;
		$pkg.Warang_Citi = _Warang_Citi;
		$pkg.Yezidi = _Yezidi;
		$pkg.Yi = _Yi;
		$pkg.Zanabazar_Square = _Zanabazar_Square;
		$pkg.Scripts = $makeMap($String.keyFor, [{ k: "Adlam", v: $pkg.Adlam }, { k: "Ahom", v: $pkg.Ahom }, { k: "Anatolian_Hieroglyphs", v: $pkg.Anatolian_Hieroglyphs }, { k: "Arabic", v: $pkg.Arabic }, { k: "Armenian", v: $pkg.Armenian }, { k: "Avestan", v: $pkg.Avestan }, { k: "Balinese", v: $pkg.Balinese }, { k: "Bamum", v: $pkg.Bamum }, { k: "Bassa_Vah", v: $pkg.Bassa_Vah }, { k: "Batak", v: $pkg.Batak }, { k: "Bengali", v: $pkg.Bengali }, { k: "Bhaiksuki", v: $pkg.Bhaiksuki }, { k: "Bopomofo", v: $pkg.Bopomofo }, { k: "Brahmi", v: $pkg.Brahmi }, { k: "Braille", v: $pkg.Braille }, { k: "Buginese", v: $pkg.Buginese }, { k: "Buhid", v: $pkg.Buhid }, { k: "Canadian_Aboriginal", v: $pkg.Canadian_Aboriginal }, { k: "Carian", v: $pkg.Carian }, { k: "Caucasian_Albanian", v: $pkg.Caucasian_Albanian }, { k: "Chakma", v: $pkg.Chakma }, { k: "Cham", v: $pkg.Cham }, { k: "Cherokee", v: $pkg.Cherokee }, { k: "Chorasmian", v: $pkg.Chorasmian }, { k: "Common", v: $pkg.Common }, { k: "Coptic", v: $pkg.Coptic }, { k: "Cuneiform", v: $pkg.Cuneiform }, { k: "Cypriot", v: $pkg.Cypriot }, { k: "Cyrillic", v: $pkg.Cyrillic }, { k: "Deseret", v: $pkg.Deseret }, { k: "Devanagari", v: $pkg.Devanagari }, { k: "Dives_Akuru", v: $pkg.Dives_Akuru }, { k: "Dogra", v: $pkg.Dogra }, { k: "Duployan", v: $pkg.Duployan }, { k: "Egyptian_Hieroglyphs", v: $pkg.Egyptian_Hieroglyphs }, { k: "Elbasan", v: $pkg.Elbasan }, { k: "Elymaic", v: $pkg.Elymaic }, { k: "Ethiopic", v: $pkg.Ethiopic }, { k: "Georgian", v: $pkg.Georgian }, { k: "Glagolitic", v: $pkg.Glagolitic }, { k: "Gothic", v: $pkg.Gothic }, { k: "Grantha", v: $pkg.Grantha }, { k: "Greek", v: $pkg.Greek }, { k: "Gujarati", v: $pkg.Gujarati }, { k: "Gunjala_Gondi", v: $pkg.Gunjala_Gondi }, { k: "Gurmukhi", v: $pkg.Gurmukhi }, { k: "Han", v: $pkg.Han }, { k: "Hangul", v: $pkg.Hangul }, { k: "Hanifi_Rohingya", v: $pkg.Hanifi_Rohingya }, { k: "Hanunoo", v: $pkg.Hanunoo }, { k: "Hatran", v: $pkg.Hatran }, { k: "Hebrew", v: $pkg.Hebrew }, { k: "Hiragana", v: $pkg.Hiragana }, { k: "Imperial_Aramaic", v: $pkg.Imperial_Aramaic }, { k: "Inherited", v: $pkg.Inherited }, { k: "Inscriptional_Pahlavi", v: $pkg.Inscriptional_Pahlavi }, { k: "Inscriptional_Parthian", v: $pkg.Inscriptional_Parthian }, { k: "Javanese", v: $pkg.Javanese }, { k: "Kaithi", v: $pkg.Kaithi }, { k: "Kannada", v: $pkg.Kannada }, { k: "Katakana", v: $pkg.Katakana }, { k: "Kayah_Li", v: $pkg.Kayah_Li }, { k: "Kharoshthi", v: $pkg.Kharoshthi }, { k: "Khitan_Small_Script", v: $pkg.Khitan_Small_Script }, { k: "Khmer", v: $pkg.Khmer }, { k: "Khojki", v: $pkg.Khojki }, { k: "Khudawadi", v: $pkg.Khudawadi }, { k: "Lao", v: $pkg.Lao }, { k: "Latin", v: $pkg.Latin }, { k: "Lepcha", v: $pkg.Lepcha }, { k: "Limbu", v: $pkg.Limbu }, { k: "Linear_A", v: $pkg.Linear_A }, { k: "Linear_B", v: $pkg.Linear_B }, { k: "Lisu", v: $pkg.Lisu }, { k: "Lycian", v: $pkg.Lycian }, { k: "Lydian", v: $pkg.Lydian }, { k: "Mahajani", v: $pkg.Mahajani }, { k: "Makasar", v: $pkg.Makasar }, { k: "Malayalam", v: $pkg.Malayalam }, { k: "Mandaic", v: $pkg.Mandaic }, { k: "Manichaean", v: $pkg.Manichaean }, { k: "Marchen", v: $pkg.Marchen }, { k: "Masaram_Gondi", v: $pkg.Masaram_Gondi }, { k: "Medefaidrin", v: $pkg.Medefaidrin }, { k: "Meetei_Mayek", v: $pkg.Meetei_Mayek }, { k: "Mende_Kikakui", v: $pkg.Mende_Kikakui }, { k: "Meroitic_Cursive", v: $pkg.Meroitic_Cursive }, { k: "Meroitic_Hieroglyphs", v: $pkg.Meroitic_Hieroglyphs }, { k: "Miao", v: $pkg.Miao }, { k: "Modi", v: $pkg.Modi }, { k: "Mongolian", v: $pkg.Mongolian }, { k: "Mro", v: $pkg.Mro }, { k: "Multani", v: $pkg.Multani }, { k: "Myanmar", v: $pkg.Myanmar }, { k: "Nabataean", v: $pkg.Nabataean }, { k: "Nandinagari", v: $pkg.Nandinagari }, { k: "New_Tai_Lue", v: $pkg.New_Tai_Lue }, { k: "Newa", v: $pkg.Newa }, { k: "Nko", v: $pkg.Nko }, { k: "Nushu", v: $pkg.Nushu }, { k: "Nyiakeng_Puachue_Hmong", v: $pkg.Nyiakeng_Puachue_Hmong }, { k: "Ogham", v: $pkg.Ogham }, { k: "Ol_Chiki", v: $pkg.Ol_Chiki }, { k: "Old_Hungarian", v: $pkg.Old_Hungarian }, { k: "Old_Italic", v: $pkg.Old_Italic }, { k: "Old_North_Arabian", v: $pkg.Old_North_Arabian }, { k: "Old_Permic", v: $pkg.Old_Permic }, { k: "Old_Persian", v: $pkg.Old_Persian }, { k: "Old_Sogdian", v: $pkg.Old_Sogdian }, { k: "Old_South_Arabian", v: $pkg.Old_South_Arabian }, { k: "Old_Turkic", v: $pkg.Old_Turkic }, { k: "Oriya", v: $pkg.Oriya }, { k: "Osage", v: $pkg.Osage }, { k: "Osmanya", v: $pkg.Osmanya }, { k: "Pahawh_Hmong", v: $pkg.Pahawh_Hmong }, { k: "Palmyrene", v: $pkg.Palmyrene }, { k: "Pau_Cin_Hau", v: $pkg.Pau_Cin_Hau }, { k: "Phags_Pa", v: $pkg.Phags_Pa }, { k: "Phoenician", v: $pkg.Phoenician }, { k: "Psalter_Pahlavi", v: $pkg.Psalter_Pahlavi }, { k: "Rejang", v: $pkg.Rejang }, { k: "Runic", v: $pkg.Runic }, { k: "Samaritan", v: $pkg.Samaritan }, { k: "Saurashtra", v: $pkg.Saurashtra }, { k: "Sharada", v: $pkg.Sharada }, { k: "Shavian", v: $pkg.Shavian }, { k: "Siddham", v: $pkg.Siddham }, { k: "SignWriting", v: $pkg.SignWriting }, { k: "Sinhala", v: $pkg.Sinhala }, { k: "Sogdian", v: $pkg.Sogdian }, { k: "Sora_Sompeng", v: $pkg.Sora_Sompeng }, { k: "Soyombo", v: $pkg.Soyombo }, { k: "Sundanese", v: $pkg.Sundanese }, { k: "Syloti_Nagri", v: $pkg.Syloti_Nagri }, { k: "Syriac", v: $pkg.Syriac }, { k: "Tagalog", v: $pkg.Tagalog }, { k: "Tagbanwa", v: $pkg.Tagbanwa }, { k: "Tai_Le", v: $pkg.Tai_Le }, { k: "Tai_Tham", v: $pkg.Tai_Tham }, { k: "Tai_Viet", v: $pkg.Tai_Viet }, { k: "Takri", v: $pkg.Takri }, { k: "Tamil", v: $pkg.Tamil }, { k: "Tangut", v: $pkg.Tangut }, { k: "Telugu", v: $pkg.Telugu }, { k: "Thaana", v: $pkg.Thaana }, { k: "Thai", v: $pkg.Thai }, { k: "Tibetan", v: $pkg.Tibetan }, { k: "Tifinagh", v: $pkg.Tifinagh }, { k: "Tirhuta", v: $pkg.Tirhuta }, { k: "Ugaritic", v: $pkg.Ugaritic }, { k: "Vai", v: $pkg.Vai }, { k: "Wancho", v: $pkg.Wancho }, { k: "Warang_Citi", v: $pkg.Warang_Citi }, { k: "Yezidi", v: $pkg.Yezidi }, { k: "Yi", v: $pkg.Yi }, { k: "Zanabazar_Square", v: $pkg.Zanabazar_Square }]);
		_ASCII_Hex_Digit = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(48, 57, 1), Range16), $clone(new Range16.ptr(65, 70, 1), Range16), $clone(new Range16.ptr(97, 102, 1), Range16)]), sliceType$1.nil, 3);
		_Bidi_Control = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1564, 8206, 6642), Range16), $clone(new Range16.ptr(8207, 8234, 27), Range16), $clone(new Range16.ptr(8235, 8238, 1), Range16), $clone(new Range16.ptr(8294, 8297, 1), Range16)]), sliceType$1.nil, 0);
		_Dash = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(45, 1418, 1373), Range16), $clone(new Range16.ptr(1470, 5120, 3650), Range16), $clone(new Range16.ptr(6150, 8208, 2058), Range16), $clone(new Range16.ptr(8209, 8213, 1), Range16), $clone(new Range16.ptr(8275, 8315, 40), Range16), $clone(new Range16.ptr(8331, 8722, 391), Range16), $clone(new Range16.ptr(11799, 11802, 3), Range16), $clone(new Range16.ptr(11834, 11835, 1), Range16), $clone(new Range16.ptr(11840, 12316, 476), Range16), $clone(new Range16.ptr(12336, 12448, 112), Range16), $clone(new Range16.ptr(65073, 65074, 1), Range16), $clone(new Range16.ptr(65112, 65123, 11), Range16), $clone(new Range16.ptr(65293, 65293, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(69293, 69293, 1), Range32)]), 0);
		_Deprecated = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(329, 1651, 1322), Range16), $clone(new Range16.ptr(3959, 3961, 2), Range16), $clone(new Range16.ptr(6051, 6052, 1), Range16), $clone(new Range16.ptr(8298, 8303, 1), Range16), $clone(new Range16.ptr(9001, 9002, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(917505, 917505, 1), Range32)]), 0);
		_Diacritic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(94, 96, 2), Range16), $clone(new Range16.ptr(168, 175, 7), Range16), $clone(new Range16.ptr(180, 183, 3), Range16), $clone(new Range16.ptr(184, 688, 504), Range16), $clone(new Range16.ptr(689, 846, 1), Range16), $clone(new Range16.ptr(848, 855, 1), Range16), $clone(new Range16.ptr(861, 866, 1), Range16), $clone(new Range16.ptr(884, 885, 1), Range16), $clone(new Range16.ptr(890, 900, 10), Range16), $clone(new Range16.ptr(901, 1155, 254), Range16), $clone(new Range16.ptr(1156, 1159, 1), Range16), $clone(new Range16.ptr(1369, 1425, 56), Range16), $clone(new Range16.ptr(1426, 1441, 1), Range16), $clone(new Range16.ptr(1443, 1469, 1), Range16), $clone(new Range16.ptr(1471, 1473, 2), Range16), $clone(new Range16.ptr(1474, 1476, 2), Range16), $clone(new Range16.ptr(1611, 1618, 1), Range16), $clone(new Range16.ptr(1623, 1624, 1), Range16), $clone(new Range16.ptr(1759, 1760, 1), Range16), $clone(new Range16.ptr(1765, 1766, 1), Range16), $clone(new Range16.ptr(1770, 1772, 1), Range16), $clone(new Range16.ptr(1840, 1866, 1), Range16), $clone(new Range16.ptr(1958, 1968, 1), Range16), $clone(new Range16.ptr(2027, 2037, 1), Range16), $clone(new Range16.ptr(2072, 2073, 1), Range16), $clone(new Range16.ptr(2275, 2302, 1), Range16), $clone(new Range16.ptr(2364, 2381, 17), Range16), $clone(new Range16.ptr(2385, 2388, 1), Range16), $clone(new Range16.ptr(2417, 2492, 75), Range16), $clone(new Range16.ptr(2509, 2620, 111), Range16), $clone(new Range16.ptr(2637, 2748, 111), Range16), $clone(new Range16.ptr(2765, 2813, 48), Range16), $clone(new Range16.ptr(2814, 2815, 1), Range16), $clone(new Range16.ptr(2876, 2893, 17), Range16), $clone(new Range16.ptr(2901, 3021, 120), Range16), $clone(new Range16.ptr(3149, 3260, 111), Range16), $clone(new Range16.ptr(3277, 3387, 110), Range16), $clone(new Range16.ptr(3388, 3405, 17), Range16), $clone(new Range16.ptr(3530, 3655, 125), Range16), $clone(new Range16.ptr(3656, 3660, 1), Range16), $clone(new Range16.ptr(3662, 3770, 108), Range16), $clone(new Range16.ptr(3784, 3788, 1), Range16), $clone(new Range16.ptr(3864, 3865, 1), Range16), $clone(new Range16.ptr(3893, 3897, 2), Range16), $clone(new Range16.ptr(3902, 3903, 1), Range16), $clone(new Range16.ptr(3970, 3972, 1), Range16), $clone(new Range16.ptr(3974, 3975, 1), Range16), $clone(new Range16.ptr(4038, 4151, 113), Range16), $clone(new Range16.ptr(4153, 4154, 1), Range16), $clone(new Range16.ptr(4195, 4196, 1), Range16), $clone(new Range16.ptr(4201, 4205, 1), Range16), $clone(new Range16.ptr(4231, 4237, 1), Range16), $clone(new Range16.ptr(4239, 4250, 11), Range16), $clone(new Range16.ptr(4251, 4957, 706), Range16), $clone(new Range16.ptr(4958, 4959, 1), Range16), $clone(new Range16.ptr(6089, 6099, 1), Range16), $clone(new Range16.ptr(6109, 6457, 348), Range16), $clone(new Range16.ptr(6458, 6459, 1), Range16), $clone(new Range16.ptr(6773, 6780, 1), Range16), $clone(new Range16.ptr(6783, 6832, 49), Range16), $clone(new Range16.ptr(6833, 6845, 1), Range16), $clone(new Range16.ptr(6964, 6980, 16), Range16), $clone(new Range16.ptr(7019, 7027, 1), Range16), $clone(new Range16.ptr(7082, 7083, 1), Range16), $clone(new Range16.ptr(7222, 7223, 1), Range16), $clone(new Range16.ptr(7288, 7293, 1), Range16), $clone(new Range16.ptr(7376, 7400, 1), Range16), $clone(new Range16.ptr(7405, 7412, 7), Range16), $clone(new Range16.ptr(7415, 7417, 1), Range16), $clone(new Range16.ptr(7468, 7530, 1), Range16), $clone(new Range16.ptr(7620, 7631, 1), Range16), $clone(new Range16.ptr(7669, 7673, 1), Range16), $clone(new Range16.ptr(7677, 7679, 1), Range16), $clone(new Range16.ptr(8125, 8127, 2), Range16), $clone(new Range16.ptr(8128, 8129, 1), Range16), $clone(new Range16.ptr(8141, 8143, 1), Range16), $clone(new Range16.ptr(8157, 8159, 1), Range16), $clone(new Range16.ptr(8173, 8175, 1), Range16), $clone(new Range16.ptr(8189, 8190, 1), Range16), $clone(new Range16.ptr(11503, 11505, 1), Range16), $clone(new Range16.ptr(11823, 12330, 507), Range16), $clone(new Range16.ptr(12331, 12335, 1), Range16), $clone(new Range16.ptr(12441, 12444, 1), Range16), $clone(new Range16.ptr(12540, 42607, 30067), Range16), $clone(new Range16.ptr(42620, 42621, 1), Range16), $clone(new Range16.ptr(42623, 42652, 29), Range16), $clone(new Range16.ptr(42653, 42736, 83), Range16), $clone(new Range16.ptr(42737, 42752, 15), Range16), $clone(new Range16.ptr(42753, 42785, 1), Range16), $clone(new Range16.ptr(42888, 42890, 1), Range16), $clone(new Range16.ptr(43000, 43001, 1), Range16), $clone(new Range16.ptr(43204, 43232, 28), Range16), $clone(new Range16.ptr(43233, 43249, 1), Range16), $clone(new Range16.ptr(43307, 43310, 1), Range16), $clone(new Range16.ptr(43347, 43443, 96), Range16), $clone(new Range16.ptr(43456, 43493, 37), Range16), $clone(new Range16.ptr(43643, 43645, 1), Range16), $clone(new Range16.ptr(43711, 43714, 1), Range16), $clone(new Range16.ptr(43766, 43867, 101), Range16), $clone(new Range16.ptr(43868, 43871, 1), Range16), $clone(new Range16.ptr(43881, 43883, 1), Range16), $clone(new Range16.ptr(44012, 44013, 1), Range16), $clone(new Range16.ptr(64286, 65056, 770), Range16), $clone(new Range16.ptr(65057, 65071, 1), Range16), $clone(new Range16.ptr(65342, 65344, 2), Range16), $clone(new Range16.ptr(65392, 65438, 46), Range16), $clone(new Range16.ptr(65439, 65507, 68), Range16)]), new sliceType$1([$clone(new Range32.ptr(66272, 68325, 2053), Range32), $clone(new Range32.ptr(68326, 68898, 572), Range32), $clone(new Range32.ptr(68899, 68903, 1), Range32), $clone(new Range32.ptr(69446, 69456, 1), Range32), $clone(new Range32.ptr(69817, 69818, 1), Range32), $clone(new Range32.ptr(69939, 69940, 1), Range32), $clone(new Range32.ptr(70003, 70080, 77), Range32), $clone(new Range32.ptr(70090, 70092, 1), Range32), $clone(new Range32.ptr(70197, 70198, 1), Range32), $clone(new Range32.ptr(70377, 70378, 1), Range32), $clone(new Range32.ptr(70460, 70477, 17), Range32), $clone(new Range32.ptr(70502, 70508, 1), Range32), $clone(new Range32.ptr(70512, 70516, 1), Range32), $clone(new Range32.ptr(70722, 70726, 4), Range32), $clone(new Range32.ptr(70850, 70851, 1), Range32), $clone(new Range32.ptr(71103, 71104, 1), Range32), $clone(new Range32.ptr(71231, 71350, 119), Range32), $clone(new Range32.ptr(71351, 71467, 116), Range32), $clone(new Range32.ptr(71737, 71738, 1), Range32), $clone(new Range32.ptr(71997, 71998, 1), Range32), $clone(new Range32.ptr(72003, 72160, 157), Range32), $clone(new Range32.ptr(72244, 72263, 19), Range32), $clone(new Range32.ptr(72345, 72767, 422), Range32), $clone(new Range32.ptr(73026, 73028, 2), Range32), $clone(new Range32.ptr(73029, 73111, 82), Range32), $clone(new Range32.ptr(92912, 92916, 1), Range32), $clone(new Range32.ptr(92976, 92982, 1), Range32), $clone(new Range32.ptr(94095, 94111, 1), Range32), $clone(new Range32.ptr(94192, 94193, 1), Range32), $clone(new Range32.ptr(119143, 119145, 1), Range32), $clone(new Range32.ptr(119149, 119154, 1), Range32), $clone(new Range32.ptr(119163, 119170, 1), Range32), $clone(new Range32.ptr(119173, 119179, 1), Range32), $clone(new Range32.ptr(119210, 119213, 1), Range32), $clone(new Range32.ptr(123184, 123190, 1), Range32), $clone(new Range32.ptr(123628, 123631, 1), Range32), $clone(new Range32.ptr(125136, 125142, 1), Range32), $clone(new Range32.ptr(125252, 125254, 1), Range32), $clone(new Range32.ptr(125256, 125258, 1), Range32)]), 3);
		_Extender = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(183, 720, 537), Range16), $clone(new Range16.ptr(721, 1600, 879), Range16), $clone(new Range16.ptr(2042, 2901, 859), Range16), $clone(new Range16.ptr(3654, 3782, 128), Range16), $clone(new Range16.ptr(6154, 6211, 57), Range16), $clone(new Range16.ptr(6823, 7222, 399), Range16), $clone(new Range16.ptr(7291, 12293, 5002), Range16), $clone(new Range16.ptr(12337, 12341, 1), Range16), $clone(new Range16.ptr(12445, 12446, 1), Range16), $clone(new Range16.ptr(12540, 12542, 1), Range16), $clone(new Range16.ptr(40981, 42508, 1527), Range16), $clone(new Range16.ptr(43471, 43494, 23), Range16), $clone(new Range16.ptr(43632, 43741, 109), Range16), $clone(new Range16.ptr(43763, 43764, 1), Range16), $clone(new Range16.ptr(65392, 65392, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(70493, 71110, 617), Range32), $clone(new Range32.ptr(71111, 71112, 1), Range32), $clone(new Range32.ptr(72344, 92994, 20650), Range32), $clone(new Range32.ptr(92995, 94176, 1181), Range32), $clone(new Range32.ptr(94177, 94179, 2), Range32), $clone(new Range32.ptr(123196, 123197, 1), Range32), $clone(new Range32.ptr(125252, 125254, 1), Range32)]), 0);
		_Hex_Digit = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(48, 57, 1), Range16), $clone(new Range16.ptr(65, 70, 1), Range16), $clone(new Range16.ptr(97, 102, 1), Range16), $clone(new Range16.ptr(65296, 65305, 1), Range16), $clone(new Range16.ptr(65313, 65318, 1), Range16), $clone(new Range16.ptr(65345, 65350, 1), Range16)]), sliceType$1.nil, 3);
		_Hyphen = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(45, 173, 128), Range16), $clone(new Range16.ptr(1418, 6150, 4732), Range16), $clone(new Range16.ptr(8208, 8209, 1), Range16), $clone(new Range16.ptr(11799, 12539, 740), Range16), $clone(new Range16.ptr(65123, 65293, 170), Range16), $clone(new Range16.ptr(65381, 65381, 1), Range16)]), sliceType$1.nil, 1);
		_IDS_Binary_Operator = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(12272, 12273, 1), Range16), $clone(new Range16.ptr(12276, 12283, 1), Range16)]), sliceType$1.nil, 0);
		_IDS_Trinary_Operator = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(12274, 12275, 1), Range16)]), sliceType$1.nil, 0);
		_Ideographic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(12294, 12295, 1), Range16), $clone(new Range16.ptr(12321, 12329, 1), Range16), $clone(new Range16.ptr(12344, 12346, 1), Range16), $clone(new Range16.ptr(13312, 19903, 1), Range16), $clone(new Range16.ptr(19968, 40956, 1), Range16), $clone(new Range16.ptr(63744, 64109, 1), Range16), $clone(new Range16.ptr(64112, 64217, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(94180, 94208, 28), Range32), $clone(new Range32.ptr(94209, 100343, 1), Range32), $clone(new Range32.ptr(100352, 101589, 1), Range32), $clone(new Range32.ptr(101632, 101640, 1), Range32), $clone(new Range32.ptr(110960, 111355, 1), Range32), $clone(new Range32.ptr(131072, 173789, 1), Range32), $clone(new Range32.ptr(173824, 177972, 1), Range32), $clone(new Range32.ptr(177984, 178205, 1), Range32), $clone(new Range32.ptr(178208, 183969, 1), Range32), $clone(new Range32.ptr(183984, 191456, 1), Range32), $clone(new Range32.ptr(194560, 195101, 1), Range32), $clone(new Range32.ptr(196608, 201546, 1), Range32)]), 0);
		_Join_Control = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(8204, 8205, 1), Range16)]), sliceType$1.nil, 0);
		_Logical_Order_Exception = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(3648, 3652, 1), Range16), $clone(new Range16.ptr(3776, 3780, 1), Range16), $clone(new Range16.ptr(6581, 6583, 1), Range16), $clone(new Range16.ptr(6586, 43701, 37115), Range16), $clone(new Range16.ptr(43702, 43705, 3), Range16), $clone(new Range16.ptr(43707, 43708, 1), Range16)]), sliceType$1.nil, 0);
		_Noncharacter_Code_Point = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(64976, 65007, 1), Range16), $clone(new Range16.ptr(65534, 65535, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(131070, 131071, 1), Range32), $clone(new Range32.ptr(196606, 196607, 1), Range32), $clone(new Range32.ptr(262142, 262143, 1), Range32), $clone(new Range32.ptr(327678, 327679, 1), Range32), $clone(new Range32.ptr(393214, 393215, 1), Range32), $clone(new Range32.ptr(458750, 458751, 1), Range32), $clone(new Range32.ptr(524286, 524287, 1), Range32), $clone(new Range32.ptr(589822, 589823, 1), Range32), $clone(new Range32.ptr(655358, 655359, 1), Range32), $clone(new Range32.ptr(720894, 720895, 1), Range32), $clone(new Range32.ptr(786430, 786431, 1), Range32), $clone(new Range32.ptr(851966, 851967, 1), Range32), $clone(new Range32.ptr(917502, 917503, 1), Range32), $clone(new Range32.ptr(983038, 983039, 1), Range32), $clone(new Range32.ptr(1048574, 1048575, 1), Range32), $clone(new Range32.ptr(1114110, 1114111, 1), Range32)]), 0);
		_Other_Alphabetic = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(837, 1456, 619), Range16), $clone(new Range16.ptr(1457, 1469, 1), Range16), $clone(new Range16.ptr(1471, 1473, 2), Range16), $clone(new Range16.ptr(1474, 1476, 2), Range16), $clone(new Range16.ptr(1477, 1479, 2), Range16), $clone(new Range16.ptr(1552, 1562, 1), Range16), $clone(new Range16.ptr(1611, 1623, 1), Range16), $clone(new Range16.ptr(1625, 1631, 1), Range16), $clone(new Range16.ptr(1648, 1750, 102), Range16), $clone(new Range16.ptr(1751, 1756, 1), Range16), $clone(new Range16.ptr(1761, 1764, 1), Range16), $clone(new Range16.ptr(1767, 1768, 1), Range16), $clone(new Range16.ptr(1773, 1809, 36), Range16), $clone(new Range16.ptr(1840, 1855, 1), Range16), $clone(new Range16.ptr(1958, 1968, 1), Range16), $clone(new Range16.ptr(2070, 2071, 1), Range16), $clone(new Range16.ptr(2075, 2083, 1), Range16), $clone(new Range16.ptr(2085, 2087, 1), Range16), $clone(new Range16.ptr(2089, 2092, 1), Range16), $clone(new Range16.ptr(2260, 2271, 1), Range16), $clone(new Range16.ptr(2275, 2281, 1), Range16), $clone(new Range16.ptr(2288, 2307, 1), Range16), $clone(new Range16.ptr(2362, 2363, 1), Range16), $clone(new Range16.ptr(2366, 2380, 1), Range16), $clone(new Range16.ptr(2382, 2383, 1), Range16), $clone(new Range16.ptr(2389, 2391, 1), Range16), $clone(new Range16.ptr(2402, 2403, 1), Range16), $clone(new Range16.ptr(2433, 2435, 1), Range16), $clone(new Range16.ptr(2494, 2500, 1), Range16), $clone(new Range16.ptr(2503, 2504, 1), Range16), $clone(new Range16.ptr(2507, 2508, 1), Range16), $clone(new Range16.ptr(2519, 2530, 11), Range16), $clone(new Range16.ptr(2531, 2561, 30), Range16), $clone(new Range16.ptr(2562, 2563, 1), Range16), $clone(new Range16.ptr(2622, 2626, 1), Range16), $clone(new Range16.ptr(2631, 2632, 1), Range16), $clone(new Range16.ptr(2635, 2636, 1), Range16), $clone(new Range16.ptr(2641, 2672, 31), Range16), $clone(new Range16.ptr(2673, 2677, 4), Range16), $clone(new Range16.ptr(2689, 2691, 1), Range16), $clone(new Range16.ptr(2750, 2757, 1), Range16), $clone(new Range16.ptr(2759, 2761, 1), Range16), $clone(new Range16.ptr(2763, 2764, 1), Range16), $clone(new Range16.ptr(2786, 2787, 1), Range16), $clone(new Range16.ptr(2810, 2812, 1), Range16), $clone(new Range16.ptr(2817, 2819, 1), Range16), $clone(new Range16.ptr(2878, 2884, 1), Range16), $clone(new Range16.ptr(2887, 2888, 1), Range16), $clone(new Range16.ptr(2891, 2892, 1), Range16), $clone(new Range16.ptr(2902, 2903, 1), Range16), $clone(new Range16.ptr(2914, 2915, 1), Range16), $clone(new Range16.ptr(2946, 3006, 60), Range16), $clone(new Range16.ptr(3007, 3010, 1), Range16), $clone(new Range16.ptr(3014, 3016, 1), Range16), $clone(new Range16.ptr(3018, 3020, 1), Range16), $clone(new Range16.ptr(3031, 3072, 41), Range16), $clone(new Range16.ptr(3073, 3075, 1), Range16), $clone(new Range16.ptr(3134, 3140, 1), Range16), $clone(new Range16.ptr(3142, 3144, 1), Range16), $clone(new Range16.ptr(3146, 3148, 1), Range16), $clone(new Range16.ptr(3157, 3158, 1), Range16), $clone(new Range16.ptr(3170, 3171, 1), Range16), $clone(new Range16.ptr(3201, 3203, 1), Range16), $clone(new Range16.ptr(3262, 3268, 1), Range16), $clone(new Range16.ptr(3270, 3272, 1), Range16), $clone(new Range16.ptr(3274, 3276, 1), Range16), $clone(new Range16.ptr(3285, 3286, 1), Range16), $clone(new Range16.ptr(3298, 3299, 1), Range16), $clone(new Range16.ptr(3328, 3331, 1), Range16), $clone(new Range16.ptr(3390, 3396, 1), Range16), $clone(new Range16.ptr(3398, 3400, 1), Range16), $clone(new Range16.ptr(3402, 3404, 1), Range16), $clone(new Range16.ptr(3415, 3426, 11), Range16), $clone(new Range16.ptr(3427, 3457, 30), Range16), $clone(new Range16.ptr(3458, 3459, 1), Range16), $clone(new Range16.ptr(3535, 3540, 1), Range16), $clone(new Range16.ptr(3542, 3544, 2), Range16), $clone(new Range16.ptr(3545, 3551, 1), Range16), $clone(new Range16.ptr(3570, 3571, 1), Range16), $clone(new Range16.ptr(3633, 3636, 3), Range16), $clone(new Range16.ptr(3637, 3642, 1), Range16), $clone(new Range16.ptr(3661, 3761, 100), Range16), $clone(new Range16.ptr(3764, 3769, 1), Range16), $clone(new Range16.ptr(3771, 3772, 1), Range16), $clone(new Range16.ptr(3789, 3953, 164), Range16), $clone(new Range16.ptr(3954, 3969, 1), Range16), $clone(new Range16.ptr(3981, 3991, 1), Range16), $clone(new Range16.ptr(3993, 4028, 1), Range16), $clone(new Range16.ptr(4139, 4150, 1), Range16), $clone(new Range16.ptr(4152, 4155, 3), Range16), $clone(new Range16.ptr(4156, 4158, 1), Range16), $clone(new Range16.ptr(4182, 4185, 1), Range16), $clone(new Range16.ptr(4190, 4192, 1), Range16), $clone(new Range16.ptr(4194, 4196, 1), Range16), $clone(new Range16.ptr(4199, 4205, 1), Range16), $clone(new Range16.ptr(4209, 4212, 1), Range16), $clone(new Range16.ptr(4226, 4237, 1), Range16), $clone(new Range16.ptr(4239, 4250, 11), Range16), $clone(new Range16.ptr(4251, 4253, 1), Range16), $clone(new Range16.ptr(5906, 5907, 1), Range16), $clone(new Range16.ptr(5938, 5939, 1), Range16), $clone(new Range16.ptr(5970, 5971, 1), Range16), $clone(new Range16.ptr(6002, 6003, 1), Range16), $clone(new Range16.ptr(6070, 6088, 1), Range16), $clone(new Range16.ptr(6277, 6278, 1), Range16), $clone(new Range16.ptr(6313, 6432, 119), Range16), $clone(new Range16.ptr(6433, 6443, 1), Range16), $clone(new Range16.ptr(6448, 6456, 1), Range16), $clone(new Range16.ptr(6679, 6683, 1), Range16), $clone(new Range16.ptr(6741, 6750, 1), Range16), $clone(new Range16.ptr(6753, 6772, 1), Range16), $clone(new Range16.ptr(6847, 6848, 1), Range16), $clone(new Range16.ptr(6912, 6916, 1), Range16), $clone(new Range16.ptr(6965, 6979, 1), Range16), $clone(new Range16.ptr(7040, 7042, 1), Range16), $clone(new Range16.ptr(7073, 7081, 1), Range16), $clone(new Range16.ptr(7084, 7085, 1), Range16), $clone(new Range16.ptr(7143, 7153, 1), Range16), $clone(new Range16.ptr(7204, 7222, 1), Range16), $clone(new Range16.ptr(7655, 7668, 1), Range16), $clone(new Range16.ptr(9398, 9449, 1), Range16), $clone(new Range16.ptr(11744, 11775, 1), Range16), $clone(new Range16.ptr(42612, 42619, 1), Range16), $clone(new Range16.ptr(42654, 42655, 1), Range16), $clone(new Range16.ptr(43010, 43019, 9), Range16), $clone(new Range16.ptr(43043, 43047, 1), Range16), $clone(new Range16.ptr(43136, 43137, 1), Range16), $clone(new Range16.ptr(43188, 43203, 1), Range16), $clone(new Range16.ptr(43205, 43263, 58), Range16), $clone(new Range16.ptr(43302, 43306, 1), Range16), $clone(new Range16.ptr(43335, 43346, 1), Range16), $clone(new Range16.ptr(43392, 43395, 1), Range16), $clone(new Range16.ptr(43444, 43455, 1), Range16), $clone(new Range16.ptr(43493, 43561, 68), Range16), $clone(new Range16.ptr(43562, 43574, 1), Range16), $clone(new Range16.ptr(43587, 43596, 9), Range16), $clone(new Range16.ptr(43597, 43643, 46), Range16), $clone(new Range16.ptr(43644, 43645, 1), Range16), $clone(new Range16.ptr(43696, 43698, 2), Range16), $clone(new Range16.ptr(43699, 43700, 1), Range16), $clone(new Range16.ptr(43703, 43704, 1), Range16), $clone(new Range16.ptr(43710, 43755, 45), Range16), $clone(new Range16.ptr(43756, 43759, 1), Range16), $clone(new Range16.ptr(43765, 44003, 238), Range16), $clone(new Range16.ptr(44004, 44010, 1), Range16), $clone(new Range16.ptr(64286, 64286, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66422, 66426, 1), Range32), $clone(new Range32.ptr(68097, 68099, 1), Range32), $clone(new Range32.ptr(68101, 68102, 1), Range32), $clone(new Range32.ptr(68108, 68111, 1), Range32), $clone(new Range32.ptr(68900, 68903, 1), Range32), $clone(new Range32.ptr(69291, 69292, 1), Range32), $clone(new Range32.ptr(69632, 69634, 1), Range32), $clone(new Range32.ptr(69688, 69701, 1), Range32), $clone(new Range32.ptr(69762, 69808, 46), Range32), $clone(new Range32.ptr(69809, 69816, 1), Range32), $clone(new Range32.ptr(69888, 69890, 1), Range32), $clone(new Range32.ptr(69927, 69938, 1), Range32), $clone(new Range32.ptr(69957, 69958, 1), Range32), $clone(new Range32.ptr(70016, 70018, 1), Range32), $clone(new Range32.ptr(70067, 70079, 1), Range32), $clone(new Range32.ptr(70094, 70095, 1), Range32), $clone(new Range32.ptr(70188, 70196, 1), Range32), $clone(new Range32.ptr(70199, 70206, 7), Range32), $clone(new Range32.ptr(70367, 70376, 1), Range32), $clone(new Range32.ptr(70400, 70403, 1), Range32), $clone(new Range32.ptr(70462, 70468, 1), Range32), $clone(new Range32.ptr(70471, 70472, 1), Range32), $clone(new Range32.ptr(70475, 70476, 1), Range32), $clone(new Range32.ptr(70487, 70498, 11), Range32), $clone(new Range32.ptr(70499, 70709, 210), Range32), $clone(new Range32.ptr(70710, 70721, 1), Range32), $clone(new Range32.ptr(70723, 70725, 1), Range32), $clone(new Range32.ptr(70832, 70849, 1), Range32), $clone(new Range32.ptr(71087, 71093, 1), Range32), $clone(new Range32.ptr(71096, 71102, 1), Range32), $clone(new Range32.ptr(71132, 71133, 1), Range32), $clone(new Range32.ptr(71216, 71230, 1), Range32), $clone(new Range32.ptr(71232, 71339, 107), Range32), $clone(new Range32.ptr(71340, 71349, 1), Range32), $clone(new Range32.ptr(71453, 71466, 1), Range32), $clone(new Range32.ptr(71724, 71736, 1), Range32), $clone(new Range32.ptr(71984, 71989, 1), Range32), $clone(new Range32.ptr(71991, 71992, 1), Range32), $clone(new Range32.ptr(71995, 71996, 1), Range32), $clone(new Range32.ptr(72000, 72002, 2), Range32), $clone(new Range32.ptr(72145, 72151, 1), Range32), $clone(new Range32.ptr(72154, 72159, 1), Range32), $clone(new Range32.ptr(72164, 72193, 29), Range32), $clone(new Range32.ptr(72194, 72202, 1), Range32), $clone(new Range32.ptr(72245, 72249, 1), Range32), $clone(new Range32.ptr(72251, 72254, 1), Range32), $clone(new Range32.ptr(72273, 72283, 1), Range32), $clone(new Range32.ptr(72330, 72343, 1), Range32), $clone(new Range32.ptr(72751, 72758, 1), Range32), $clone(new Range32.ptr(72760, 72766, 1), Range32), $clone(new Range32.ptr(72850, 72871, 1), Range32), $clone(new Range32.ptr(72873, 72886, 1), Range32), $clone(new Range32.ptr(73009, 73014, 1), Range32), $clone(new Range32.ptr(73018, 73020, 2), Range32), $clone(new Range32.ptr(73021, 73023, 2), Range32), $clone(new Range32.ptr(73024, 73025, 1), Range32), $clone(new Range32.ptr(73027, 73031, 4), Range32), $clone(new Range32.ptr(73098, 73102, 1), Range32), $clone(new Range32.ptr(73104, 73105, 1), Range32), $clone(new Range32.ptr(73107, 73110, 1), Range32), $clone(new Range32.ptr(73459, 73462, 1), Range32), $clone(new Range32.ptr(94031, 94033, 2), Range32), $clone(new Range32.ptr(94034, 94087, 1), Range32), $clone(new Range32.ptr(94095, 94098, 1), Range32), $clone(new Range32.ptr(94192, 94193, 1), Range32), $clone(new Range32.ptr(113822, 122880, 9058), Range32), $clone(new Range32.ptr(122881, 122886, 1), Range32), $clone(new Range32.ptr(122888, 122904, 1), Range32), $clone(new Range32.ptr(122907, 122913, 1), Range32), $clone(new Range32.ptr(122915, 122916, 1), Range32), $clone(new Range32.ptr(122918, 122922, 1), Range32), $clone(new Range32.ptr(125255, 127280, 2025), Range32), $clone(new Range32.ptr(127281, 127305, 1), Range32), $clone(new Range32.ptr(127312, 127337, 1), Range32), $clone(new Range32.ptr(127344, 127369, 1), Range32)]), 0);
		_Other_Default_Ignorable_Code_Point = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(847, 4447, 3600), Range16), $clone(new Range16.ptr(4448, 6068, 1620), Range16), $clone(new Range16.ptr(6069, 8293, 2224), Range16), $clone(new Range16.ptr(12644, 65440, 52796), Range16), $clone(new Range16.ptr(65520, 65528, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(917504, 917506, 2), Range32), $clone(new Range32.ptr(917507, 917535, 1), Range32), $clone(new Range32.ptr(917632, 917759, 1), Range32), $clone(new Range32.ptr(918000, 921599, 1), Range32)]), 0);
		_Other_Grapheme_Extend = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(2494, 2519, 25), Range16), $clone(new Range16.ptr(2878, 2903, 25), Range16), $clone(new Range16.ptr(3006, 3031, 25), Range16), $clone(new Range16.ptr(3266, 3285, 19), Range16), $clone(new Range16.ptr(3286, 3390, 104), Range16), $clone(new Range16.ptr(3415, 3535, 120), Range16), $clone(new Range16.ptr(3551, 6965, 3414), Range16), $clone(new Range16.ptr(8204, 12334, 4130), Range16), $clone(new Range16.ptr(12335, 65438, 53103), Range16), $clone(new Range16.ptr(65439, 65439, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(70462, 70487, 25), Range32), $clone(new Range32.ptr(70832, 70845, 13), Range32), $clone(new Range32.ptr(71087, 71984, 897), Range32), $clone(new Range32.ptr(119141, 119150, 9), Range32), $clone(new Range32.ptr(119151, 119154, 1), Range32), $clone(new Range32.ptr(917536, 917631, 1), Range32)]), 0);
		_Other_ID_Continue = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(183, 903, 720), Range16), $clone(new Range16.ptr(4969, 4977, 1), Range16), $clone(new Range16.ptr(6618, 6618, 1), Range16)]), sliceType$1.nil, 0);
		_Other_ID_Start = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6277, 6278, 1), Range16), $clone(new Range16.ptr(8472, 8494, 22), Range16), $clone(new Range16.ptr(12443, 12444, 1), Range16)]), sliceType$1.nil, 0);
		_Other_Lowercase = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(170, 186, 16), Range16), $clone(new Range16.ptr(688, 696, 1), Range16), $clone(new Range16.ptr(704, 705, 1), Range16), $clone(new Range16.ptr(736, 740, 1), Range16), $clone(new Range16.ptr(837, 890, 53), Range16), $clone(new Range16.ptr(7468, 7530, 1), Range16), $clone(new Range16.ptr(7544, 7579, 35), Range16), $clone(new Range16.ptr(7580, 7615, 1), Range16), $clone(new Range16.ptr(8305, 8319, 14), Range16), $clone(new Range16.ptr(8336, 8348, 1), Range16), $clone(new Range16.ptr(8560, 8575, 1), Range16), $clone(new Range16.ptr(9424, 9449, 1), Range16), $clone(new Range16.ptr(11388, 11389, 1), Range16), $clone(new Range16.ptr(42652, 42653, 1), Range16), $clone(new Range16.ptr(42864, 43000, 136), Range16), $clone(new Range16.ptr(43001, 43868, 867), Range16), $clone(new Range16.ptr(43869, 43871, 1), Range16)]), sliceType$1.nil, 1);
		_Other_Math = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(94, 976, 882), Range16), $clone(new Range16.ptr(977, 978, 1), Range16), $clone(new Range16.ptr(981, 1008, 27), Range16), $clone(new Range16.ptr(1009, 1012, 3), Range16), $clone(new Range16.ptr(1013, 8214, 7201), Range16), $clone(new Range16.ptr(8242, 8244, 1), Range16), $clone(new Range16.ptr(8256, 8289, 33), Range16), $clone(new Range16.ptr(8290, 8292, 1), Range16), $clone(new Range16.ptr(8317, 8318, 1), Range16), $clone(new Range16.ptr(8333, 8334, 1), Range16), $clone(new Range16.ptr(8400, 8412, 1), Range16), $clone(new Range16.ptr(8417, 8421, 4), Range16), $clone(new Range16.ptr(8422, 8427, 5), Range16), $clone(new Range16.ptr(8428, 8431, 1), Range16), $clone(new Range16.ptr(8450, 8455, 5), Range16), $clone(new Range16.ptr(8458, 8467, 1), Range16), $clone(new Range16.ptr(8469, 8473, 4), Range16), $clone(new Range16.ptr(8474, 8477, 1), Range16), $clone(new Range16.ptr(8484, 8488, 4), Range16), $clone(new Range16.ptr(8489, 8492, 3), Range16), $clone(new Range16.ptr(8493, 8495, 2), Range16), $clone(new Range16.ptr(8496, 8497, 1), Range16), $clone(new Range16.ptr(8499, 8504, 1), Range16), $clone(new Range16.ptr(8508, 8511, 1), Range16), $clone(new Range16.ptr(8517, 8521, 1), Range16), $clone(new Range16.ptr(8597, 8601, 1), Range16), $clone(new Range16.ptr(8604, 8607, 1), Range16), $clone(new Range16.ptr(8609, 8610, 1), Range16), $clone(new Range16.ptr(8612, 8613, 1), Range16), $clone(new Range16.ptr(8615, 8617, 2), Range16), $clone(new Range16.ptr(8618, 8621, 1), Range16), $clone(new Range16.ptr(8624, 8625, 1), Range16), $clone(new Range16.ptr(8630, 8631, 1), Range16), $clone(new Range16.ptr(8636, 8653, 1), Range16), $clone(new Range16.ptr(8656, 8657, 1), Range16), $clone(new Range16.ptr(8659, 8661, 2), Range16), $clone(new Range16.ptr(8662, 8667, 1), Range16), $clone(new Range16.ptr(8669, 8676, 7), Range16), $clone(new Range16.ptr(8677, 8968, 291), Range16), $clone(new Range16.ptr(8969, 8971, 1), Range16), $clone(new Range16.ptr(9140, 9141, 1), Range16), $clone(new Range16.ptr(9143, 9168, 25), Range16), $clone(new Range16.ptr(9186, 9632, 446), Range16), $clone(new Range16.ptr(9633, 9646, 13), Range16), $clone(new Range16.ptr(9647, 9654, 1), Range16), $clone(new Range16.ptr(9660, 9664, 1), Range16), $clone(new Range16.ptr(9670, 9671, 1), Range16), $clone(new Range16.ptr(9674, 9675, 1), Range16), $clone(new Range16.ptr(9679, 9683, 1), Range16), $clone(new Range16.ptr(9698, 9700, 2), Range16), $clone(new Range16.ptr(9703, 9708, 1), Range16), $clone(new Range16.ptr(9733, 9734, 1), Range16), $clone(new Range16.ptr(9792, 9794, 2), Range16), $clone(new Range16.ptr(9824, 9827, 1), Range16), $clone(new Range16.ptr(9837, 9838, 1), Range16), $clone(new Range16.ptr(10181, 10182, 1), Range16), $clone(new Range16.ptr(10214, 10223, 1), Range16), $clone(new Range16.ptr(10627, 10648, 1), Range16), $clone(new Range16.ptr(10712, 10715, 1), Range16), $clone(new Range16.ptr(10748, 10749, 1), Range16), $clone(new Range16.ptr(65121, 65123, 2), Range16), $clone(new Range16.ptr(65128, 65340, 212), Range16), $clone(new Range16.ptr(65342, 65342, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(119808, 119892, 1), Range32), $clone(new Range32.ptr(119894, 119964, 1), Range32), $clone(new Range32.ptr(119966, 119967, 1), Range32), $clone(new Range32.ptr(119970, 119973, 3), Range32), $clone(new Range32.ptr(119974, 119977, 3), Range32), $clone(new Range32.ptr(119978, 119980, 1), Range32), $clone(new Range32.ptr(119982, 119993, 1), Range32), $clone(new Range32.ptr(119995, 119997, 2), Range32), $clone(new Range32.ptr(119998, 120003, 1), Range32), $clone(new Range32.ptr(120005, 120069, 1), Range32), $clone(new Range32.ptr(120071, 120074, 1), Range32), $clone(new Range32.ptr(120077, 120084, 1), Range32), $clone(new Range32.ptr(120086, 120092, 1), Range32), $clone(new Range32.ptr(120094, 120121, 1), Range32), $clone(new Range32.ptr(120123, 120126, 1), Range32), $clone(new Range32.ptr(120128, 120132, 1), Range32), $clone(new Range32.ptr(120134, 120138, 4), Range32), $clone(new Range32.ptr(120139, 120144, 1), Range32), $clone(new Range32.ptr(120146, 120485, 1), Range32), $clone(new Range32.ptr(120488, 120512, 1), Range32), $clone(new Range32.ptr(120514, 120538, 1), Range32), $clone(new Range32.ptr(120540, 120570, 1), Range32), $clone(new Range32.ptr(120572, 120596, 1), Range32), $clone(new Range32.ptr(120598, 120628, 1), Range32), $clone(new Range32.ptr(120630, 120654, 1), Range32), $clone(new Range32.ptr(120656, 120686, 1), Range32), $clone(new Range32.ptr(120688, 120712, 1), Range32), $clone(new Range32.ptr(120714, 120744, 1), Range32), $clone(new Range32.ptr(120746, 120770, 1), Range32), $clone(new Range32.ptr(120772, 120779, 1), Range32), $clone(new Range32.ptr(120782, 120831, 1), Range32), $clone(new Range32.ptr(126464, 126467, 1), Range32), $clone(new Range32.ptr(126469, 126495, 1), Range32), $clone(new Range32.ptr(126497, 126498, 1), Range32), $clone(new Range32.ptr(126500, 126503, 3), Range32), $clone(new Range32.ptr(126505, 126514, 1), Range32), $clone(new Range32.ptr(126516, 126519, 1), Range32), $clone(new Range32.ptr(126521, 126523, 2), Range32), $clone(new Range32.ptr(126530, 126535, 5), Range32), $clone(new Range32.ptr(126537, 126541, 2), Range32), $clone(new Range32.ptr(126542, 126543, 1), Range32), $clone(new Range32.ptr(126545, 126546, 1), Range32), $clone(new Range32.ptr(126548, 126551, 3), Range32), $clone(new Range32.ptr(126553, 126561, 2), Range32), $clone(new Range32.ptr(126562, 126564, 2), Range32), $clone(new Range32.ptr(126567, 126570, 1), Range32), $clone(new Range32.ptr(126572, 126578, 1), Range32), $clone(new Range32.ptr(126580, 126583, 1), Range32), $clone(new Range32.ptr(126585, 126588, 1), Range32), $clone(new Range32.ptr(126590, 126592, 2), Range32), $clone(new Range32.ptr(126593, 126601, 1), Range32), $clone(new Range32.ptr(126603, 126619, 1), Range32), $clone(new Range32.ptr(126625, 126627, 1), Range32), $clone(new Range32.ptr(126629, 126633, 1), Range32), $clone(new Range32.ptr(126635, 126651, 1), Range32)]), 0);
		_Other_Uppercase = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(8544, 8559, 1), Range16), $clone(new Range16.ptr(9398, 9423, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(127280, 127305, 1), Range32), $clone(new Range32.ptr(127312, 127337, 1), Range32), $clone(new Range32.ptr(127344, 127369, 1), Range32)]), 0);
		_Pattern_Syntax = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(33, 47, 1), Range16), $clone(new Range16.ptr(58, 64, 1), Range16), $clone(new Range16.ptr(91, 94, 1), Range16), $clone(new Range16.ptr(96, 123, 27), Range16), $clone(new Range16.ptr(124, 126, 1), Range16), $clone(new Range16.ptr(161, 167, 1), Range16), $clone(new Range16.ptr(169, 171, 2), Range16), $clone(new Range16.ptr(172, 176, 2), Range16), $clone(new Range16.ptr(177, 187, 5), Range16), $clone(new Range16.ptr(191, 215, 24), Range16), $clone(new Range16.ptr(247, 8208, 7961), Range16), $clone(new Range16.ptr(8209, 8231, 1), Range16), $clone(new Range16.ptr(8240, 8254, 1), Range16), $clone(new Range16.ptr(8257, 8275, 1), Range16), $clone(new Range16.ptr(8277, 8286, 1), Range16), $clone(new Range16.ptr(8592, 9311, 1), Range16), $clone(new Range16.ptr(9472, 10101, 1), Range16), $clone(new Range16.ptr(10132, 11263, 1), Range16), $clone(new Range16.ptr(11776, 11903, 1), Range16), $clone(new Range16.ptr(12289, 12291, 1), Range16), $clone(new Range16.ptr(12296, 12320, 1), Range16), $clone(new Range16.ptr(12336, 64830, 52494), Range16), $clone(new Range16.ptr(64831, 65093, 262), Range16), $clone(new Range16.ptr(65094, 65094, 1), Range16)]), sliceType$1.nil, 10);
		_Pattern_White_Space = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(9, 13, 1), Range16), $clone(new Range16.ptr(32, 133, 101), Range16), $clone(new Range16.ptr(8206, 8207, 1), Range16), $clone(new Range16.ptr(8232, 8233, 1), Range16)]), sliceType$1.nil, 2);
		_Prepended_Concatenation_Mark = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(1536, 1541, 1), Range16), $clone(new Range16.ptr(1757, 1807, 50), Range16), $clone(new Range16.ptr(2274, 2274, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(69821, 69837, 16), Range32)]), 0);
		_Quotation_Mark = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(34, 39, 5), Range16), $clone(new Range16.ptr(171, 187, 16), Range16), $clone(new Range16.ptr(8216, 8223, 1), Range16), $clone(new Range16.ptr(8249, 8250, 1), Range16), $clone(new Range16.ptr(11842, 12300, 458), Range16), $clone(new Range16.ptr(12301, 12303, 1), Range16), $clone(new Range16.ptr(12317, 12319, 1), Range16), $clone(new Range16.ptr(65089, 65092, 1), Range16), $clone(new Range16.ptr(65282, 65287, 5), Range16), $clone(new Range16.ptr(65378, 65379, 1), Range16)]), sliceType$1.nil, 2);
		_Radical = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(11904, 11929, 1), Range16), $clone(new Range16.ptr(11931, 12019, 1), Range16), $clone(new Range16.ptr(12032, 12245, 1), Range16)]), sliceType$1.nil, 0);
		_Regional_Indicator = new RangeTable.ptr(new sliceType([]), new sliceType$1([$clone(new Range32.ptr(127462, 127487, 1), Range32)]), 0);
		_Sentence_Terminal = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(33, 46, 13), Range16), $clone(new Range16.ptr(63, 1417, 1354), Range16), $clone(new Range16.ptr(1566, 1567, 1), Range16), $clone(new Range16.ptr(1748, 1792, 44), Range16), $clone(new Range16.ptr(1793, 1794, 1), Range16), $clone(new Range16.ptr(2041, 2103, 62), Range16), $clone(new Range16.ptr(2105, 2109, 4), Range16), $clone(new Range16.ptr(2110, 2404, 294), Range16), $clone(new Range16.ptr(2405, 4170, 1765), Range16), $clone(new Range16.ptr(4171, 4962, 791), Range16), $clone(new Range16.ptr(4967, 4968, 1), Range16), $clone(new Range16.ptr(5742, 5941, 199), Range16), $clone(new Range16.ptr(5942, 6147, 205), Range16), $clone(new Range16.ptr(6153, 6468, 315), Range16), $clone(new Range16.ptr(6469, 6824, 355), Range16), $clone(new Range16.ptr(6825, 6827, 1), Range16), $clone(new Range16.ptr(7002, 7003, 1), Range16), $clone(new Range16.ptr(7006, 7007, 1), Range16), $clone(new Range16.ptr(7227, 7228, 1), Range16), $clone(new Range16.ptr(7294, 7295, 1), Range16), $clone(new Range16.ptr(8252, 8253, 1), Range16), $clone(new Range16.ptr(8263, 8265, 1), Range16), $clone(new Range16.ptr(11822, 11836, 14), Range16), $clone(new Range16.ptr(12290, 42239, 29949), Range16), $clone(new Range16.ptr(42510, 42511, 1), Range16), $clone(new Range16.ptr(42739, 42743, 4), Range16), $clone(new Range16.ptr(43126, 43127, 1), Range16), $clone(new Range16.ptr(43214, 43215, 1), Range16), $clone(new Range16.ptr(43311, 43464, 153), Range16), $clone(new Range16.ptr(43465, 43613, 148), Range16), $clone(new Range16.ptr(43614, 43615, 1), Range16), $clone(new Range16.ptr(43760, 43761, 1), Range16), $clone(new Range16.ptr(44011, 65106, 21095), Range16), $clone(new Range16.ptr(65110, 65111, 1), Range16), $clone(new Range16.ptr(65281, 65294, 13), Range16), $clone(new Range16.ptr(65311, 65377, 66), Range16)]), new sliceType$1([$clone(new Range32.ptr(68182, 68183, 1), Range32), $clone(new Range32.ptr(69461, 69465, 1), Range32), $clone(new Range32.ptr(69703, 69704, 1), Range32), $clone(new Range32.ptr(69822, 69825, 1), Range32), $clone(new Range32.ptr(69953, 69955, 1), Range32), $clone(new Range32.ptr(70085, 70086, 1), Range32), $clone(new Range32.ptr(70093, 70110, 17), Range32), $clone(new Range32.ptr(70111, 70200, 89), Range32), $clone(new Range32.ptr(70201, 70203, 2), Range32), $clone(new Range32.ptr(70204, 70313, 109), Range32), $clone(new Range32.ptr(70731, 70732, 1), Range32), $clone(new Range32.ptr(71106, 71107, 1), Range32), $clone(new Range32.ptr(71113, 71127, 1), Range32), $clone(new Range32.ptr(71233, 71234, 1), Range32), $clone(new Range32.ptr(71484, 71486, 1), Range32), $clone(new Range32.ptr(72004, 72006, 2), Range32), $clone(new Range32.ptr(72258, 72259, 1), Range32), $clone(new Range32.ptr(72347, 72348, 1), Range32), $clone(new Range32.ptr(72769, 72770, 1), Range32), $clone(new Range32.ptr(73463, 73464, 1), Range32), $clone(new Range32.ptr(92782, 92783, 1), Range32), $clone(new Range32.ptr(92917, 92983, 66), Range32), $clone(new Range32.ptr(92984, 92996, 12), Range32), $clone(new Range32.ptr(93848, 113823, 19975), Range32), $clone(new Range32.ptr(121480, 121480, 1), Range32)]), 1);
		_Soft_Dotted = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(105, 106, 1), Range16), $clone(new Range16.ptr(303, 585, 282), Range16), $clone(new Range16.ptr(616, 669, 53), Range16), $clone(new Range16.ptr(690, 1011, 321), Range16), $clone(new Range16.ptr(1110, 1112, 2), Range16), $clone(new Range16.ptr(7522, 7574, 52), Range16), $clone(new Range16.ptr(7588, 7592, 4), Range16), $clone(new Range16.ptr(7725, 7883, 158), Range16), $clone(new Range16.ptr(8305, 8520, 215), Range16), $clone(new Range16.ptr(8521, 11388, 2867), Range16)]), new sliceType$1([$clone(new Range32.ptr(119842, 119843, 1), Range32), $clone(new Range32.ptr(119894, 119895, 1), Range32), $clone(new Range32.ptr(119946, 119947, 1), Range32), $clone(new Range32.ptr(119998, 119999, 1), Range32), $clone(new Range32.ptr(120050, 120051, 1), Range32), $clone(new Range32.ptr(120102, 120103, 1), Range32), $clone(new Range32.ptr(120154, 120155, 1), Range32), $clone(new Range32.ptr(120206, 120207, 1), Range32), $clone(new Range32.ptr(120258, 120259, 1), Range32), $clone(new Range32.ptr(120310, 120311, 1), Range32), $clone(new Range32.ptr(120362, 120363, 1), Range32), $clone(new Range32.ptr(120414, 120415, 1), Range32), $clone(new Range32.ptr(120466, 120467, 1), Range32)]), 1);
		_Terminal_Punctuation = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(33, 44, 11), Range16), $clone(new Range16.ptr(46, 58, 12), Range16), $clone(new Range16.ptr(59, 63, 4), Range16), $clone(new Range16.ptr(894, 903, 9), Range16), $clone(new Range16.ptr(1417, 1475, 58), Range16), $clone(new Range16.ptr(1548, 1563, 15), Range16), $clone(new Range16.ptr(1566, 1567, 1), Range16), $clone(new Range16.ptr(1748, 1792, 44), Range16), $clone(new Range16.ptr(1793, 1802, 1), Range16), $clone(new Range16.ptr(1804, 2040, 236), Range16), $clone(new Range16.ptr(2041, 2096, 55), Range16), $clone(new Range16.ptr(2097, 2110, 1), Range16), $clone(new Range16.ptr(2142, 2404, 262), Range16), $clone(new Range16.ptr(2405, 3674, 1269), Range16), $clone(new Range16.ptr(3675, 3848, 173), Range16), $clone(new Range16.ptr(3853, 3858, 1), Range16), $clone(new Range16.ptr(4170, 4171, 1), Range16), $clone(new Range16.ptr(4961, 4968, 1), Range16), $clone(new Range16.ptr(5742, 5867, 125), Range16), $clone(new Range16.ptr(5868, 5869, 1), Range16), $clone(new Range16.ptr(5941, 5942, 1), Range16), $clone(new Range16.ptr(6100, 6102, 1), Range16), $clone(new Range16.ptr(6106, 6146, 40), Range16), $clone(new Range16.ptr(6147, 6149, 1), Range16), $clone(new Range16.ptr(6152, 6153, 1), Range16), $clone(new Range16.ptr(6468, 6469, 1), Range16), $clone(new Range16.ptr(6824, 6827, 1), Range16), $clone(new Range16.ptr(7002, 7003, 1), Range16), $clone(new Range16.ptr(7005, 7007, 1), Range16), $clone(new Range16.ptr(7227, 7231, 1), Range16), $clone(new Range16.ptr(7294, 7295, 1), Range16), $clone(new Range16.ptr(8252, 8253, 1), Range16), $clone(new Range16.ptr(8263, 8265, 1), Range16), $clone(new Range16.ptr(11822, 11836, 14), Range16), $clone(new Range16.ptr(11841, 11852, 11), Range16), $clone(new Range16.ptr(11854, 11855, 1), Range16), $clone(new Range16.ptr(12289, 12290, 1), Range16), $clone(new Range16.ptr(42238, 42239, 1), Range16), $clone(new Range16.ptr(42509, 42511, 1), Range16), $clone(new Range16.ptr(42739, 42743, 1), Range16), $clone(new Range16.ptr(43126, 43127, 1), Range16), $clone(new Range16.ptr(43214, 43215, 1), Range16), $clone(new Range16.ptr(43311, 43463, 152), Range16), $clone(new Range16.ptr(43464, 43465, 1), Range16), $clone(new Range16.ptr(43613, 43615, 1), Range16), $clone(new Range16.ptr(43743, 43760, 17), Range16), $clone(new Range16.ptr(43761, 44011, 250), Range16), $clone(new Range16.ptr(65104, 65106, 1), Range16), $clone(new Range16.ptr(65108, 65111, 1), Range16), $clone(new Range16.ptr(65281, 65292, 11), Range16), $clone(new Range16.ptr(65294, 65306, 12), Range16), $clone(new Range16.ptr(65307, 65311, 4), Range16), $clone(new Range16.ptr(65377, 65380, 3), Range16)]), new sliceType$1([$clone(new Range32.ptr(66463, 66512, 49), Range32), $clone(new Range32.ptr(67671, 67871, 200), Range32), $clone(new Range32.ptr(68182, 68183, 1), Range32), $clone(new Range32.ptr(68336, 68341, 1), Range32), $clone(new Range32.ptr(68410, 68415, 1), Range32), $clone(new Range32.ptr(68505, 68508, 1), Range32), $clone(new Range32.ptr(69461, 69465, 1), Range32), $clone(new Range32.ptr(69703, 69709, 1), Range32), $clone(new Range32.ptr(69822, 69825, 1), Range32), $clone(new Range32.ptr(69953, 69955, 1), Range32), $clone(new Range32.ptr(70085, 70086, 1), Range32), $clone(new Range32.ptr(70093, 70110, 17), Range32), $clone(new Range32.ptr(70111, 70200, 89), Range32), $clone(new Range32.ptr(70201, 70204, 1), Range32), $clone(new Range32.ptr(70313, 70731, 418), Range32), $clone(new Range32.ptr(70732, 70733, 1), Range32), $clone(new Range32.ptr(70746, 70747, 1), Range32), $clone(new Range32.ptr(71106, 71109, 1), Range32), $clone(new Range32.ptr(71113, 71127, 1), Range32), $clone(new Range32.ptr(71233, 71234, 1), Range32), $clone(new Range32.ptr(71484, 71486, 1), Range32), $clone(new Range32.ptr(72004, 72006, 2), Range32), $clone(new Range32.ptr(72258, 72259, 1), Range32), $clone(new Range32.ptr(72347, 72348, 1), Range32), $clone(new Range32.ptr(72353, 72354, 1), Range32), $clone(new Range32.ptr(72769, 72771, 1), Range32), $clone(new Range32.ptr(72817, 73463, 646), Range32), $clone(new Range32.ptr(73464, 74864, 1400), Range32), $clone(new Range32.ptr(74865, 74868, 1), Range32), $clone(new Range32.ptr(92782, 92783, 1), Range32), $clone(new Range32.ptr(92917, 92983, 66), Range32), $clone(new Range32.ptr(92984, 92985, 1), Range32), $clone(new Range32.ptr(92996, 93847, 851), Range32), $clone(new Range32.ptr(93848, 113823, 19975), Range32), $clone(new Range32.ptr(121479, 121482, 1), Range32)]), 3);
		_Unified_Ideograph = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(13312, 19903, 1), Range16), $clone(new Range16.ptr(19968, 40956, 1), Range16), $clone(new Range16.ptr(64014, 64015, 1), Range16), $clone(new Range16.ptr(64017, 64019, 2), Range16), $clone(new Range16.ptr(64020, 64031, 11), Range16), $clone(new Range16.ptr(64033, 64035, 2), Range16), $clone(new Range16.ptr(64036, 64039, 3), Range16), $clone(new Range16.ptr(64040, 64041, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(131072, 173789, 1), Range32), $clone(new Range32.ptr(173824, 177972, 1), Range32), $clone(new Range32.ptr(177984, 178205, 1), Range32), $clone(new Range32.ptr(178208, 183969, 1), Range32), $clone(new Range32.ptr(183984, 191456, 1), Range32), $clone(new Range32.ptr(196608, 201546, 1), Range32)]), 0);
		_Variation_Selector = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(6155, 6157, 1), Range16), $clone(new Range16.ptr(65024, 65039, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(917760, 917999, 1), Range32)]), 0);
		_White_Space = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(9, 13, 1), Range16), $clone(new Range16.ptr(32, 133, 101), Range16), $clone(new Range16.ptr(160, 5760, 5600), Range16), $clone(new Range16.ptr(8192, 8202, 1), Range16), $clone(new Range16.ptr(8232, 8233, 1), Range16), $clone(new Range16.ptr(8239, 8287, 48), Range16), $clone(new Range16.ptr(12288, 12288, 1), Range16)]), sliceType$1.nil, 2);
		$pkg.ASCII_Hex_Digit = _ASCII_Hex_Digit;
		$pkg.Bidi_Control = _Bidi_Control;
		$pkg.Dash = _Dash;
		$pkg.Deprecated = _Deprecated;
		$pkg.Diacritic = _Diacritic;
		$pkg.Extender = _Extender;
		$pkg.Hex_Digit = _Hex_Digit;
		$pkg.Hyphen = _Hyphen;
		$pkg.IDS_Binary_Operator = _IDS_Binary_Operator;
		$pkg.IDS_Trinary_Operator = _IDS_Trinary_Operator;
		$pkg.Ideographic = _Ideographic;
		$pkg.Join_Control = _Join_Control;
		$pkg.Logical_Order_Exception = _Logical_Order_Exception;
		$pkg.Noncharacter_Code_Point = _Noncharacter_Code_Point;
		$pkg.Other_Alphabetic = _Other_Alphabetic;
		$pkg.Other_Default_Ignorable_Code_Point = _Other_Default_Ignorable_Code_Point;
		$pkg.Other_Grapheme_Extend = _Other_Grapheme_Extend;
		$pkg.Other_ID_Continue = _Other_ID_Continue;
		$pkg.Other_ID_Start = _Other_ID_Start;
		$pkg.Other_Lowercase = _Other_Lowercase;
		$pkg.Other_Math = _Other_Math;
		$pkg.Other_Uppercase = _Other_Uppercase;
		$pkg.Pattern_Syntax = _Pattern_Syntax;
		$pkg.Pattern_White_Space = _Pattern_White_Space;
		$pkg.Prepended_Concatenation_Mark = _Prepended_Concatenation_Mark;
		$pkg.Quotation_Mark = _Quotation_Mark;
		$pkg.Radical = _Radical;
		$pkg.Regional_Indicator = _Regional_Indicator;
		$pkg.Sentence_Terminal = _Sentence_Terminal;
		$pkg.Soft_Dotted = _Soft_Dotted;
		$pkg.Terminal_Punctuation = _Terminal_Punctuation;
		$pkg.Unified_Ideograph = _Unified_Ideograph;
		$pkg.Variation_Selector = _Variation_Selector;
		$pkg.White_Space = _White_Space;
		$pkg.Properties = $makeMap($String.keyFor, [{ k: "ASCII_Hex_Digit", v: $pkg.ASCII_Hex_Digit }, { k: "Bidi_Control", v: $pkg.Bidi_Control }, { k: "Dash", v: $pkg.Dash }, { k: "Deprecated", v: $pkg.Deprecated }, { k: "Diacritic", v: $pkg.Diacritic }, { k: "Extender", v: $pkg.Extender }, { k: "Hex_Digit", v: $pkg.Hex_Digit }, { k: "Hyphen", v: $pkg.Hyphen }, { k: "IDS_Binary_Operator", v: $pkg.IDS_Binary_Operator }, { k: "IDS_Trinary_Operator", v: $pkg.IDS_Trinary_Operator }, { k: "Ideographic", v: $pkg.Ideographic }, { k: "Join_Control", v: $pkg.Join_Control }, { k: "Logical_Order_Exception", v: $pkg.Logical_Order_Exception }, { k: "Noncharacter_Code_Point", v: $pkg.Noncharacter_Code_Point }, { k: "Other_Alphabetic", v: $pkg.Other_Alphabetic }, { k: "Other_Default_Ignorable_Code_Point", v: $pkg.Other_Default_Ignorable_Code_Point }, { k: "Other_Grapheme_Extend", v: $pkg.Other_Grapheme_Extend }, { k: "Other_ID_Continue", v: $pkg.Other_ID_Continue }, { k: "Other_ID_Start", v: $pkg.Other_ID_Start }, { k: "Other_Lowercase", v: $pkg.Other_Lowercase }, { k: "Other_Math", v: $pkg.Other_Math }, { k: "Other_Uppercase", v: $pkg.Other_Uppercase }, { k: "Pattern_Syntax", v: $pkg.Pattern_Syntax }, { k: "Pattern_White_Space", v: $pkg.Pattern_White_Space }, { k: "Prepended_Concatenation_Mark", v: $pkg.Prepended_Concatenation_Mark }, { k: "Quotation_Mark", v: $pkg.Quotation_Mark }, { k: "Radical", v: $pkg.Radical }, { k: "Regional_Indicator", v: $pkg.Regional_Indicator }, { k: "Sentence_Terminal", v: $pkg.Sentence_Terminal }, { k: "STerm", v: $pkg.Sentence_Terminal }, { k: "Soft_Dotted", v: $pkg.Soft_Dotted }, { k: "Terminal_Punctuation", v: $pkg.Terminal_Punctuation }, { k: "Unified_Ideograph", v: $pkg.Unified_Ideograph }, { k: "Variation_Selector", v: $pkg.Variation_Selector }, { k: "White_Space", v: $pkg.White_Space }]);
		caseOrbit = new sliceType$2([$clone(new foldPair.ptr(75, 107), foldPair), $clone(new foldPair.ptr(83, 115), foldPair), $clone(new foldPair.ptr(107, 8490), foldPair), $clone(new foldPair.ptr(115, 383), foldPair), $clone(new foldPair.ptr(181, 924), foldPair), $clone(new foldPair.ptr(197, 229), foldPair), $clone(new foldPair.ptr(223, 7838), foldPair), $clone(new foldPair.ptr(229, 8491), foldPair), $clone(new foldPair.ptr(304, 304), foldPair), $clone(new foldPair.ptr(305, 305), foldPair), $clone(new foldPair.ptr(383, 83), foldPair), $clone(new foldPair.ptr(452, 453), foldPair), $clone(new foldPair.ptr(453, 454), foldPair), $clone(new foldPair.ptr(454, 452), foldPair), $clone(new foldPair.ptr(455, 456), foldPair), $clone(new foldPair.ptr(456, 457), foldPair), $clone(new foldPair.ptr(457, 455), foldPair), $clone(new foldPair.ptr(458, 459), foldPair), $clone(new foldPair.ptr(459, 460), foldPair), $clone(new foldPair.ptr(460, 458), foldPair), $clone(new foldPair.ptr(497, 498), foldPair), $clone(new foldPair.ptr(498, 499), foldPair), $clone(new foldPair.ptr(499, 497), foldPair), $clone(new foldPair.ptr(837, 921), foldPair), $clone(new foldPair.ptr(914, 946), foldPair), $clone(new foldPair.ptr(917, 949), foldPair), $clone(new foldPair.ptr(920, 952), foldPair), $clone(new foldPair.ptr(921, 953), foldPair), $clone(new foldPair.ptr(922, 954), foldPair), $clone(new foldPair.ptr(924, 956), foldPair), $clone(new foldPair.ptr(928, 960), foldPair), $clone(new foldPair.ptr(929, 961), foldPair), $clone(new foldPair.ptr(931, 962), foldPair), $clone(new foldPair.ptr(934, 966), foldPair), $clone(new foldPair.ptr(937, 969), foldPair), $clone(new foldPair.ptr(946, 976), foldPair), $clone(new foldPair.ptr(949, 1013), foldPair), $clone(new foldPair.ptr(952, 977), foldPair), $clone(new foldPair.ptr(953, 8126), foldPair), $clone(new foldPair.ptr(954, 1008), foldPair), $clone(new foldPair.ptr(956, 181), foldPair), $clone(new foldPair.ptr(960, 982), foldPair), $clone(new foldPair.ptr(961, 1009), foldPair), $clone(new foldPair.ptr(962, 963), foldPair), $clone(new foldPair.ptr(963, 931), foldPair), $clone(new foldPair.ptr(966, 981), foldPair), $clone(new foldPair.ptr(969, 8486), foldPair), $clone(new foldPair.ptr(976, 914), foldPair), $clone(new foldPair.ptr(977, 1012), foldPair), $clone(new foldPair.ptr(981, 934), foldPair), $clone(new foldPair.ptr(982, 928), foldPair), $clone(new foldPair.ptr(1008, 922), foldPair), $clone(new foldPair.ptr(1009, 929), foldPair), $clone(new foldPair.ptr(1012, 920), foldPair), $clone(new foldPair.ptr(1013, 917), foldPair), $clone(new foldPair.ptr(1042, 1074), foldPair), $clone(new foldPair.ptr(1044, 1076), foldPair), $clone(new foldPair.ptr(1054, 1086), foldPair), $clone(new foldPair.ptr(1057, 1089), foldPair), $clone(new foldPair.ptr(1058, 1090), foldPair), $clone(new foldPair.ptr(1066, 1098), foldPair), $clone(new foldPair.ptr(1074, 7296), foldPair), $clone(new foldPair.ptr(1076, 7297), foldPair), $clone(new foldPair.ptr(1086, 7298), foldPair), $clone(new foldPair.ptr(1089, 7299), foldPair), $clone(new foldPair.ptr(1090, 7300), foldPair), $clone(new foldPair.ptr(1098, 7302), foldPair), $clone(new foldPair.ptr(1122, 1123), foldPair), $clone(new foldPair.ptr(1123, 7303), foldPair), $clone(new foldPair.ptr(7296, 1042), foldPair), $clone(new foldPair.ptr(7297, 1044), foldPair), $clone(new foldPair.ptr(7298, 1054), foldPair), $clone(new foldPair.ptr(7299, 1057), foldPair), $clone(new foldPair.ptr(7300, 7301), foldPair), $clone(new foldPair.ptr(7301, 1058), foldPair), $clone(new foldPair.ptr(7302, 1066), foldPair), $clone(new foldPair.ptr(7303, 1122), foldPair), $clone(new foldPair.ptr(7304, 42570), foldPair), $clone(new foldPair.ptr(7776, 7777), foldPair), $clone(new foldPair.ptr(7777, 7835), foldPair), $clone(new foldPair.ptr(7835, 7776), foldPair), $clone(new foldPair.ptr(7838, 223), foldPair), $clone(new foldPair.ptr(8126, 837), foldPair), $clone(new foldPair.ptr(8486, 937), foldPair), $clone(new foldPair.ptr(8490, 75), foldPair), $clone(new foldPair.ptr(8491, 197), foldPair), $clone(new foldPair.ptr(42570, 42571), foldPair), $clone(new foldPair.ptr(42571, 7304), foldPair)]);
		foldL = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(837, 837, 1), Range16)]), sliceType$1.nil, 0);
		foldLl = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(65, 90, 1), Range16), $clone(new Range16.ptr(192, 214, 1), Range16), $clone(new Range16.ptr(216, 222, 1), Range16), $clone(new Range16.ptr(256, 302, 2), Range16), $clone(new Range16.ptr(306, 310, 2), Range16), $clone(new Range16.ptr(313, 327, 2), Range16), $clone(new Range16.ptr(330, 376, 2), Range16), $clone(new Range16.ptr(377, 381, 2), Range16), $clone(new Range16.ptr(385, 386, 1), Range16), $clone(new Range16.ptr(388, 390, 2), Range16), $clone(new Range16.ptr(391, 393, 2), Range16), $clone(new Range16.ptr(394, 395, 1), Range16), $clone(new Range16.ptr(398, 401, 1), Range16), $clone(new Range16.ptr(403, 404, 1), Range16), $clone(new Range16.ptr(406, 408, 1), Range16), $clone(new Range16.ptr(412, 413, 1), Range16), $clone(new Range16.ptr(415, 416, 1), Range16), $clone(new Range16.ptr(418, 422, 2), Range16), $clone(new Range16.ptr(423, 425, 2), Range16), $clone(new Range16.ptr(428, 430, 2), Range16), $clone(new Range16.ptr(431, 433, 2), Range16), $clone(new Range16.ptr(434, 435, 1), Range16), $clone(new Range16.ptr(437, 439, 2), Range16), $clone(new Range16.ptr(440, 444, 4), Range16), $clone(new Range16.ptr(452, 453, 1), Range16), $clone(new Range16.ptr(455, 456, 1), Range16), $clone(new Range16.ptr(458, 459, 1), Range16), $clone(new Range16.ptr(461, 475, 2), Range16), $clone(new Range16.ptr(478, 494, 2), Range16), $clone(new Range16.ptr(497, 498, 1), Range16), $clone(new Range16.ptr(500, 502, 2), Range16), $clone(new Range16.ptr(503, 504, 1), Range16), $clone(new Range16.ptr(506, 562, 2), Range16), $clone(new Range16.ptr(570, 571, 1), Range16), $clone(new Range16.ptr(573, 574, 1), Range16), $clone(new Range16.ptr(577, 579, 2), Range16), $clone(new Range16.ptr(580, 582, 1), Range16), $clone(new Range16.ptr(584, 590, 2), Range16), $clone(new Range16.ptr(837, 880, 43), Range16), $clone(new Range16.ptr(882, 886, 4), Range16), $clone(new Range16.ptr(895, 902, 7), Range16), $clone(new Range16.ptr(904, 906, 1), Range16), $clone(new Range16.ptr(908, 910, 2), Range16), $clone(new Range16.ptr(911, 913, 2), Range16), $clone(new Range16.ptr(914, 929, 1), Range16), $clone(new Range16.ptr(931, 939, 1), Range16), $clone(new Range16.ptr(975, 984, 9), Range16), $clone(new Range16.ptr(986, 1006, 2), Range16), $clone(new Range16.ptr(1012, 1015, 3), Range16), $clone(new Range16.ptr(1017, 1018, 1), Range16), $clone(new Range16.ptr(1021, 1071, 1), Range16), $clone(new Range16.ptr(1120, 1152, 2), Range16), $clone(new Range16.ptr(1162, 1216, 2), Range16), $clone(new Range16.ptr(1217, 1229, 2), Range16), $clone(new Range16.ptr(1232, 1326, 2), Range16), $clone(new Range16.ptr(1329, 1366, 1), Range16), $clone(new Range16.ptr(4256, 4293, 1), Range16), $clone(new Range16.ptr(4295, 4301, 6), Range16), $clone(new Range16.ptr(5024, 5109, 1), Range16), $clone(new Range16.ptr(7312, 7354, 1), Range16), $clone(new Range16.ptr(7357, 7359, 1), Range16), $clone(new Range16.ptr(7680, 7828, 2), Range16), $clone(new Range16.ptr(7838, 7934, 2), Range16), $clone(new Range16.ptr(7944, 7951, 1), Range16), $clone(new Range16.ptr(7960, 7965, 1), Range16), $clone(new Range16.ptr(7976, 7983, 1), Range16), $clone(new Range16.ptr(7992, 7999, 1), Range16), $clone(new Range16.ptr(8008, 8013, 1), Range16), $clone(new Range16.ptr(8025, 8031, 2), Range16), $clone(new Range16.ptr(8040, 8047, 1), Range16), $clone(new Range16.ptr(8072, 8079, 1), Range16), $clone(new Range16.ptr(8088, 8095, 1), Range16), $clone(new Range16.ptr(8104, 8111, 1), Range16), $clone(new Range16.ptr(8120, 8124, 1), Range16), $clone(new Range16.ptr(8136, 8140, 1), Range16), $clone(new Range16.ptr(8152, 8155, 1), Range16), $clone(new Range16.ptr(8168, 8172, 1), Range16), $clone(new Range16.ptr(8184, 8188, 1), Range16), $clone(new Range16.ptr(8486, 8490, 4), Range16), $clone(new Range16.ptr(8491, 8498, 7), Range16), $clone(new Range16.ptr(8579, 11264, 2685), Range16), $clone(new Range16.ptr(11265, 11310, 1), Range16), $clone(new Range16.ptr(11360, 11362, 2), Range16), $clone(new Range16.ptr(11363, 11364, 1), Range16), $clone(new Range16.ptr(11367, 11373, 2), Range16), $clone(new Range16.ptr(11374, 11376, 1), Range16), $clone(new Range16.ptr(11378, 11381, 3), Range16), $clone(new Range16.ptr(11390, 11392, 1), Range16), $clone(new Range16.ptr(11394, 11490, 2), Range16), $clone(new Range16.ptr(11499, 11501, 2), Range16), $clone(new Range16.ptr(11506, 42560, 31054), Range16), $clone(new Range16.ptr(42562, 42604, 2), Range16), $clone(new Range16.ptr(42624, 42650, 2), Range16), $clone(new Range16.ptr(42786, 42798, 2), Range16), $clone(new Range16.ptr(42802, 42862, 2), Range16), $clone(new Range16.ptr(42873, 42877, 2), Range16), $clone(new Range16.ptr(42878, 42886, 2), Range16), $clone(new Range16.ptr(42891, 42893, 2), Range16), $clone(new Range16.ptr(42896, 42898, 2), Range16), $clone(new Range16.ptr(42902, 42922, 2), Range16), $clone(new Range16.ptr(42923, 42926, 1), Range16), $clone(new Range16.ptr(42928, 42932, 1), Range16), $clone(new Range16.ptr(42934, 42942, 2), Range16), $clone(new Range16.ptr(42946, 42948, 2), Range16), $clone(new Range16.ptr(42949, 42951, 1), Range16), $clone(new Range16.ptr(42953, 42997, 44), Range16), $clone(new Range16.ptr(65313, 65338, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66560, 66599, 1), Range32), $clone(new Range32.ptr(66736, 66771, 1), Range32), $clone(new Range32.ptr(68736, 68786, 1), Range32), $clone(new Range32.ptr(71840, 71871, 1), Range32), $clone(new Range32.ptr(93760, 93791, 1), Range32), $clone(new Range32.ptr(125184, 125217, 1), Range32)]), 3);
		foldLt = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(452, 454, 2), Range16), $clone(new Range16.ptr(455, 457, 2), Range16), $clone(new Range16.ptr(458, 460, 2), Range16), $clone(new Range16.ptr(497, 499, 2), Range16), $clone(new Range16.ptr(8064, 8071, 1), Range16), $clone(new Range16.ptr(8080, 8087, 1), Range16), $clone(new Range16.ptr(8096, 8103, 1), Range16), $clone(new Range16.ptr(8115, 8131, 16), Range16), $clone(new Range16.ptr(8179, 8179, 1), Range16)]), sliceType$1.nil, 0);
		foldLu = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(97, 122, 1), Range16), $clone(new Range16.ptr(181, 223, 42), Range16), $clone(new Range16.ptr(224, 246, 1), Range16), $clone(new Range16.ptr(248, 255, 1), Range16), $clone(new Range16.ptr(257, 303, 2), Range16), $clone(new Range16.ptr(307, 311, 2), Range16), $clone(new Range16.ptr(314, 328, 2), Range16), $clone(new Range16.ptr(331, 375, 2), Range16), $clone(new Range16.ptr(378, 382, 2), Range16), $clone(new Range16.ptr(383, 384, 1), Range16), $clone(new Range16.ptr(387, 389, 2), Range16), $clone(new Range16.ptr(392, 396, 4), Range16), $clone(new Range16.ptr(402, 405, 3), Range16), $clone(new Range16.ptr(409, 410, 1), Range16), $clone(new Range16.ptr(414, 417, 3), Range16), $clone(new Range16.ptr(419, 421, 2), Range16), $clone(new Range16.ptr(424, 429, 5), Range16), $clone(new Range16.ptr(432, 436, 4), Range16), $clone(new Range16.ptr(438, 441, 3), Range16), $clone(new Range16.ptr(445, 447, 2), Range16), $clone(new Range16.ptr(453, 454, 1), Range16), $clone(new Range16.ptr(456, 457, 1), Range16), $clone(new Range16.ptr(459, 460, 1), Range16), $clone(new Range16.ptr(462, 476, 2), Range16), $clone(new Range16.ptr(477, 495, 2), Range16), $clone(new Range16.ptr(498, 499, 1), Range16), $clone(new Range16.ptr(501, 505, 4), Range16), $clone(new Range16.ptr(507, 543, 2), Range16), $clone(new Range16.ptr(547, 563, 2), Range16), $clone(new Range16.ptr(572, 575, 3), Range16), $clone(new Range16.ptr(576, 578, 2), Range16), $clone(new Range16.ptr(583, 591, 2), Range16), $clone(new Range16.ptr(592, 596, 1), Range16), $clone(new Range16.ptr(598, 599, 1), Range16), $clone(new Range16.ptr(601, 603, 2), Range16), $clone(new Range16.ptr(604, 608, 4), Range16), $clone(new Range16.ptr(609, 613, 2), Range16), $clone(new Range16.ptr(614, 616, 2), Range16), $clone(new Range16.ptr(617, 620, 1), Range16), $clone(new Range16.ptr(623, 625, 2), Range16), $clone(new Range16.ptr(626, 629, 3), Range16), $clone(new Range16.ptr(637, 640, 3), Range16), $clone(new Range16.ptr(642, 643, 1), Range16), $clone(new Range16.ptr(647, 652, 1), Range16), $clone(new Range16.ptr(658, 669, 11), Range16), $clone(new Range16.ptr(670, 837, 167), Range16), $clone(new Range16.ptr(881, 883, 2), Range16), $clone(new Range16.ptr(887, 891, 4), Range16), $clone(new Range16.ptr(892, 893, 1), Range16), $clone(new Range16.ptr(940, 943, 1), Range16), $clone(new Range16.ptr(945, 974, 1), Range16), $clone(new Range16.ptr(976, 977, 1), Range16), $clone(new Range16.ptr(981, 983, 1), Range16), $clone(new Range16.ptr(985, 1007, 2), Range16), $clone(new Range16.ptr(1008, 1011, 1), Range16), $clone(new Range16.ptr(1013, 1019, 3), Range16), $clone(new Range16.ptr(1072, 1119, 1), Range16), $clone(new Range16.ptr(1121, 1153, 2), Range16), $clone(new Range16.ptr(1163, 1215, 2), Range16), $clone(new Range16.ptr(1218, 1230, 2), Range16), $clone(new Range16.ptr(1231, 1327, 2), Range16), $clone(new Range16.ptr(1377, 1414, 1), Range16), $clone(new Range16.ptr(4304, 4346, 1), Range16), $clone(new Range16.ptr(4349, 4351, 1), Range16), $clone(new Range16.ptr(5112, 5117, 1), Range16), $clone(new Range16.ptr(7296, 7304, 1), Range16), $clone(new Range16.ptr(7545, 7549, 4), Range16), $clone(new Range16.ptr(7566, 7681, 115), Range16), $clone(new Range16.ptr(7683, 7829, 2), Range16), $clone(new Range16.ptr(7835, 7841, 6), Range16), $clone(new Range16.ptr(7843, 7935, 2), Range16), $clone(new Range16.ptr(7936, 7943, 1), Range16), $clone(new Range16.ptr(7952, 7957, 1), Range16), $clone(new Range16.ptr(7968, 7975, 1), Range16), $clone(new Range16.ptr(7984, 7991, 1), Range16), $clone(new Range16.ptr(8000, 8005, 1), Range16), $clone(new Range16.ptr(8017, 8023, 2), Range16), $clone(new Range16.ptr(8032, 8039, 1), Range16), $clone(new Range16.ptr(8048, 8061, 1), Range16), $clone(new Range16.ptr(8112, 8113, 1), Range16), $clone(new Range16.ptr(8126, 8144, 18), Range16), $clone(new Range16.ptr(8145, 8160, 15), Range16), $clone(new Range16.ptr(8161, 8165, 4), Range16), $clone(new Range16.ptr(8526, 8580, 54), Range16), $clone(new Range16.ptr(11312, 11358, 1), Range16), $clone(new Range16.ptr(11361, 11365, 4), Range16), $clone(new Range16.ptr(11366, 11372, 2), Range16), $clone(new Range16.ptr(11379, 11382, 3), Range16), $clone(new Range16.ptr(11393, 11491, 2), Range16), $clone(new Range16.ptr(11500, 11502, 2), Range16), $clone(new Range16.ptr(11507, 11520, 13), Range16), $clone(new Range16.ptr(11521, 11557, 1), Range16), $clone(new Range16.ptr(11559, 11565, 6), Range16), $clone(new Range16.ptr(42561, 42605, 2), Range16), $clone(new Range16.ptr(42625, 42651, 2), Range16), $clone(new Range16.ptr(42787, 42799, 2), Range16), $clone(new Range16.ptr(42803, 42863, 2), Range16), $clone(new Range16.ptr(42874, 42876, 2), Range16), $clone(new Range16.ptr(42879, 42887, 2), Range16), $clone(new Range16.ptr(42892, 42897, 5), Range16), $clone(new Range16.ptr(42899, 42900, 1), Range16), $clone(new Range16.ptr(42903, 42921, 2), Range16), $clone(new Range16.ptr(42933, 42943, 2), Range16), $clone(new Range16.ptr(42947, 42952, 5), Range16), $clone(new Range16.ptr(42954, 42998, 44), Range16), $clone(new Range16.ptr(43859, 43888, 29), Range16), $clone(new Range16.ptr(43889, 43967, 1), Range16), $clone(new Range16.ptr(65345, 65370, 1), Range16)]), new sliceType$1([$clone(new Range32.ptr(66600, 66639, 1), Range32), $clone(new Range32.ptr(66776, 66811, 1), Range32), $clone(new Range32.ptr(68800, 68850, 1), Range32), $clone(new Range32.ptr(71872, 71903, 1), Range32), $clone(new Range32.ptr(93792, 93823, 1), Range32), $clone(new Range32.ptr(125218, 125251, 1), Range32)]), 4);
		foldM = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(921, 953, 32), Range16), $clone(new Range16.ptr(8126, 8126, 1), Range16)]), sliceType$1.nil, 0);
		foldMn = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(921, 953, 32), Range16), $clone(new Range16.ptr(8126, 8126, 1), Range16)]), sliceType$1.nil, 0);
		$pkg.FoldCategory = $makeMap($String.keyFor, [{ k: "L", v: foldL }, { k: "Ll", v: foldLl }, { k: "Lt", v: foldLt }, { k: "Lu", v: foldLu }, { k: "M", v: foldM }, { k: "Mn", v: foldMn }]);
		foldCommon = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(924, 956, 32), Range16)]), sliceType$1.nil, 0);
		foldGreek = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(181, 837, 656), Range16)]), sliceType$1.nil, 0);
		foldInherited = new RangeTable.ptr(new sliceType([$clone(new Range16.ptr(921, 953, 32), Range16), $clone(new Range16.ptr(8126, 8126, 1), Range16)]), sliceType$1.nil, 0);
		$pkg.FoldScript = $makeMap($String.keyFor, [{ k: "Common", v: foldCommon }, { k: "Greek", v: foldGreek }, { k: "Inherited", v: foldInherited }]);
		asciiFold = $toNativeArray($kindUint16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8490, 76, 77, 78, 79, 80, 81, 82, 383, 84, 85, 86, 87, 88, 89, 90, 123, 124, 125, 126, 127]);
		_CaseRanges = new sliceType$3([$clone(new CaseRange.ptr(65, 90, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(97, 122, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(181, 181, $clone($toNativeArray($kindInt32, [743, 0, 743]), d)), CaseRange), $clone(new CaseRange.ptr(192, 214, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(216, 222, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(224, 246, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(248, 254, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(255, 255, $clone($toNativeArray($kindInt32, [121, 0, 121]), d)), CaseRange), $clone(new CaseRange.ptr(256, 303, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(304, 304, $clone($toNativeArray($kindInt32, [0, -199, 0]), d)), CaseRange), $clone(new CaseRange.ptr(305, 305, $clone($toNativeArray($kindInt32, [-232, 0, -232]), d)), CaseRange), $clone(new CaseRange.ptr(306, 311, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(313, 328, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(330, 375, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(376, 376, $clone($toNativeArray($kindInt32, [0, -121, 0]), d)), CaseRange), $clone(new CaseRange.ptr(377, 382, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(383, 383, $clone($toNativeArray($kindInt32, [-300, 0, -300]), d)), CaseRange), $clone(new CaseRange.ptr(384, 384, $clone($toNativeArray($kindInt32, [195, 0, 195]), d)), CaseRange), $clone(new CaseRange.ptr(385, 385, $clone($toNativeArray($kindInt32, [0, 210, 0]), d)), CaseRange), $clone(new CaseRange.ptr(386, 389, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(390, 390, $clone($toNativeArray($kindInt32, [0, 206, 0]), d)), CaseRange), $clone(new CaseRange.ptr(391, 392, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(393, 394, $clone($toNativeArray($kindInt32, [0, 205, 0]), d)), CaseRange), $clone(new CaseRange.ptr(395, 396, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(398, 398, $clone($toNativeArray($kindInt32, [0, 79, 0]), d)), CaseRange), $clone(new CaseRange.ptr(399, 399, $clone($toNativeArray($kindInt32, [0, 202, 0]), d)), CaseRange), $clone(new CaseRange.ptr(400, 400, $clone($toNativeArray($kindInt32, [0, 203, 0]), d)), CaseRange), $clone(new CaseRange.ptr(401, 402, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(403, 403, $clone($toNativeArray($kindInt32, [0, 205, 0]), d)), CaseRange), $clone(new CaseRange.ptr(404, 404, $clone($toNativeArray($kindInt32, [0, 207, 0]), d)), CaseRange), $clone(new CaseRange.ptr(405, 405, $clone($toNativeArray($kindInt32, [97, 0, 97]), d)), CaseRange), $clone(new CaseRange.ptr(406, 406, $clone($toNativeArray($kindInt32, [0, 211, 0]), d)), CaseRange), $clone(new CaseRange.ptr(407, 407, $clone($toNativeArray($kindInt32, [0, 209, 0]), d)), CaseRange), $clone(new CaseRange.ptr(408, 409, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(410, 410, $clone($toNativeArray($kindInt32, [163, 0, 163]), d)), CaseRange), $clone(new CaseRange.ptr(412, 412, $clone($toNativeArray($kindInt32, [0, 211, 0]), d)), CaseRange), $clone(new CaseRange.ptr(413, 413, $clone($toNativeArray($kindInt32, [0, 213, 0]), d)), CaseRange), $clone(new CaseRange.ptr(414, 414, $clone($toNativeArray($kindInt32, [130, 0, 130]), d)), CaseRange), $clone(new CaseRange.ptr(415, 415, $clone($toNativeArray($kindInt32, [0, 214, 0]), d)), CaseRange), $clone(new CaseRange.ptr(416, 421, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(422, 422, $clone($toNativeArray($kindInt32, [0, 218, 0]), d)), CaseRange), $clone(new CaseRange.ptr(423, 424, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(425, 425, $clone($toNativeArray($kindInt32, [0, 218, 0]), d)), CaseRange), $clone(new CaseRange.ptr(428, 429, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(430, 430, $clone($toNativeArray($kindInt32, [0, 218, 0]), d)), CaseRange), $clone(new CaseRange.ptr(431, 432, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(433, 434, $clone($toNativeArray($kindInt32, [0, 217, 0]), d)), CaseRange), $clone(new CaseRange.ptr(435, 438, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(439, 439, $clone($toNativeArray($kindInt32, [0, 219, 0]), d)), CaseRange), $clone(new CaseRange.ptr(440, 441, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(444, 445, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(447, 447, $clone($toNativeArray($kindInt32, [56, 0, 56]), d)), CaseRange), $clone(new CaseRange.ptr(452, 452, $clone($toNativeArray($kindInt32, [0, 2, 1]), d)), CaseRange), $clone(new CaseRange.ptr(453, 453, $clone($toNativeArray($kindInt32, [-1, 1, 0]), d)), CaseRange), $clone(new CaseRange.ptr(454, 454, $clone($toNativeArray($kindInt32, [-2, 0, -1]), d)), CaseRange), $clone(new CaseRange.ptr(455, 455, $clone($toNativeArray($kindInt32, [0, 2, 1]), d)), CaseRange), $clone(new CaseRange.ptr(456, 456, $clone($toNativeArray($kindInt32, [-1, 1, 0]), d)), CaseRange), $clone(new CaseRange.ptr(457, 457, $clone($toNativeArray($kindInt32, [-2, 0, -1]), d)), CaseRange), $clone(new CaseRange.ptr(458, 458, $clone($toNativeArray($kindInt32, [0, 2, 1]), d)), CaseRange), $clone(new CaseRange.ptr(459, 459, $clone($toNativeArray($kindInt32, [-1, 1, 0]), d)), CaseRange), $clone(new CaseRange.ptr(460, 460, $clone($toNativeArray($kindInt32, [-2, 0, -1]), d)), CaseRange), $clone(new CaseRange.ptr(461, 476, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(477, 477, $clone($toNativeArray($kindInt32, [-79, 0, -79]), d)), CaseRange), $clone(new CaseRange.ptr(478, 495, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(497, 497, $clone($toNativeArray($kindInt32, [0, 2, 1]), d)), CaseRange), $clone(new CaseRange.ptr(498, 498, $clone($toNativeArray($kindInt32, [-1, 1, 0]), d)), CaseRange), $clone(new CaseRange.ptr(499, 499, $clone($toNativeArray($kindInt32, [-2, 0, -1]), d)), CaseRange), $clone(new CaseRange.ptr(500, 501, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(502, 502, $clone($toNativeArray($kindInt32, [0, -97, 0]), d)), CaseRange), $clone(new CaseRange.ptr(503, 503, $clone($toNativeArray($kindInt32, [0, -56, 0]), d)), CaseRange), $clone(new CaseRange.ptr(504, 543, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(544, 544, $clone($toNativeArray($kindInt32, [0, -130, 0]), d)), CaseRange), $clone(new CaseRange.ptr(546, 563, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(570, 570, $clone($toNativeArray($kindInt32, [0, 10795, 0]), d)), CaseRange), $clone(new CaseRange.ptr(571, 572, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(573, 573, $clone($toNativeArray($kindInt32, [0, -163, 0]), d)), CaseRange), $clone(new CaseRange.ptr(574, 574, $clone($toNativeArray($kindInt32, [0, 10792, 0]), d)), CaseRange), $clone(new CaseRange.ptr(575, 576, $clone($toNativeArray($kindInt32, [10815, 0, 10815]), d)), CaseRange), $clone(new CaseRange.ptr(577, 578, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(579, 579, $clone($toNativeArray($kindInt32, [0, -195, 0]), d)), CaseRange), $clone(new CaseRange.ptr(580, 580, $clone($toNativeArray($kindInt32, [0, 69, 0]), d)), CaseRange), $clone(new CaseRange.ptr(581, 581, $clone($toNativeArray($kindInt32, [0, 71, 0]), d)), CaseRange), $clone(new CaseRange.ptr(582, 591, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(592, 592, $clone($toNativeArray($kindInt32, [10783, 0, 10783]), d)), CaseRange), $clone(new CaseRange.ptr(593, 593, $clone($toNativeArray($kindInt32, [10780, 0, 10780]), d)), CaseRange), $clone(new CaseRange.ptr(594, 594, $clone($toNativeArray($kindInt32, [10782, 0, 10782]), d)), CaseRange), $clone(new CaseRange.ptr(595, 595, $clone($toNativeArray($kindInt32, [-210, 0, -210]), d)), CaseRange), $clone(new CaseRange.ptr(596, 596, $clone($toNativeArray($kindInt32, [-206, 0, -206]), d)), CaseRange), $clone(new CaseRange.ptr(598, 599, $clone($toNativeArray($kindInt32, [-205, 0, -205]), d)), CaseRange), $clone(new CaseRange.ptr(601, 601, $clone($toNativeArray($kindInt32, [-202, 0, -202]), d)), CaseRange), $clone(new CaseRange.ptr(603, 603, $clone($toNativeArray($kindInt32, [-203, 0, -203]), d)), CaseRange), $clone(new CaseRange.ptr(604, 604, $clone($toNativeArray($kindInt32, [42319, 0, 42319]), d)), CaseRange), $clone(new CaseRange.ptr(608, 608, $clone($toNativeArray($kindInt32, [-205, 0, -205]), d)), CaseRange), $clone(new CaseRange.ptr(609, 609, $clone($toNativeArray($kindInt32, [42315, 0, 42315]), d)), CaseRange), $clone(new CaseRange.ptr(611, 611, $clone($toNativeArray($kindInt32, [-207, 0, -207]), d)), CaseRange), $clone(new CaseRange.ptr(613, 613, $clone($toNativeArray($kindInt32, [42280, 0, 42280]), d)), CaseRange), $clone(new CaseRange.ptr(614, 614, $clone($toNativeArray($kindInt32, [42308, 0, 42308]), d)), CaseRange), $clone(new CaseRange.ptr(616, 616, $clone($toNativeArray($kindInt32, [-209, 0, -209]), d)), CaseRange), $clone(new CaseRange.ptr(617, 617, $clone($toNativeArray($kindInt32, [-211, 0, -211]), d)), CaseRange), $clone(new CaseRange.ptr(618, 618, $clone($toNativeArray($kindInt32, [42308, 0, 42308]), d)), CaseRange), $clone(new CaseRange.ptr(619, 619, $clone($toNativeArray($kindInt32, [10743, 0, 10743]), d)), CaseRange), $clone(new CaseRange.ptr(620, 620, $clone($toNativeArray($kindInt32, [42305, 0, 42305]), d)), CaseRange), $clone(new CaseRange.ptr(623, 623, $clone($toNativeArray($kindInt32, [-211, 0, -211]), d)), CaseRange), $clone(new CaseRange.ptr(625, 625, $clone($toNativeArray($kindInt32, [10749, 0, 10749]), d)), CaseRange), $clone(new CaseRange.ptr(626, 626, $clone($toNativeArray($kindInt32, [-213, 0, -213]), d)), CaseRange), $clone(new CaseRange.ptr(629, 629, $clone($toNativeArray($kindInt32, [-214, 0, -214]), d)), CaseRange), $clone(new CaseRange.ptr(637, 637, $clone($toNativeArray($kindInt32, [10727, 0, 10727]), d)), CaseRange), $clone(new CaseRange.ptr(640, 640, $clone($toNativeArray($kindInt32, [-218, 0, -218]), d)), CaseRange), $clone(new CaseRange.ptr(642, 642, $clone($toNativeArray($kindInt32, [42307, 0, 42307]), d)), CaseRange), $clone(new CaseRange.ptr(643, 643, $clone($toNativeArray($kindInt32, [-218, 0, -218]), d)), CaseRange), $clone(new CaseRange.ptr(647, 647, $clone($toNativeArray($kindInt32, [42282, 0, 42282]), d)), CaseRange), $clone(new CaseRange.ptr(648, 648, $clone($toNativeArray($kindInt32, [-218, 0, -218]), d)), CaseRange), $clone(new CaseRange.ptr(649, 649, $clone($toNativeArray($kindInt32, [-69, 0, -69]), d)), CaseRange), $clone(new CaseRange.ptr(650, 651, $clone($toNativeArray($kindInt32, [-217, 0, -217]), d)), CaseRange), $clone(new CaseRange.ptr(652, 652, $clone($toNativeArray($kindInt32, [-71, 0, -71]), d)), CaseRange), $clone(new CaseRange.ptr(658, 658, $clone($toNativeArray($kindInt32, [-219, 0, -219]), d)), CaseRange), $clone(new CaseRange.ptr(669, 669, $clone($toNativeArray($kindInt32, [42261, 0, 42261]), d)), CaseRange), $clone(new CaseRange.ptr(670, 670, $clone($toNativeArray($kindInt32, [42258, 0, 42258]), d)), CaseRange), $clone(new CaseRange.ptr(837, 837, $clone($toNativeArray($kindInt32, [84, 0, 84]), d)), CaseRange), $clone(new CaseRange.ptr(880, 883, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(886, 887, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(891, 893, $clone($toNativeArray($kindInt32, [130, 0, 130]), d)), CaseRange), $clone(new CaseRange.ptr(895, 895, $clone($toNativeArray($kindInt32, [0, 116, 0]), d)), CaseRange), $clone(new CaseRange.ptr(902, 902, $clone($toNativeArray($kindInt32, [0, 38, 0]), d)), CaseRange), $clone(new CaseRange.ptr(904, 906, $clone($toNativeArray($kindInt32, [0, 37, 0]), d)), CaseRange), $clone(new CaseRange.ptr(908, 908, $clone($toNativeArray($kindInt32, [0, 64, 0]), d)), CaseRange), $clone(new CaseRange.ptr(910, 911, $clone($toNativeArray($kindInt32, [0, 63, 0]), d)), CaseRange), $clone(new CaseRange.ptr(913, 929, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(931, 939, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(940, 940, $clone($toNativeArray($kindInt32, [-38, 0, -38]), d)), CaseRange), $clone(new CaseRange.ptr(941, 943, $clone($toNativeArray($kindInt32, [-37, 0, -37]), d)), CaseRange), $clone(new CaseRange.ptr(945, 961, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(962, 962, $clone($toNativeArray($kindInt32, [-31, 0, -31]), d)), CaseRange), $clone(new CaseRange.ptr(963, 971, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(972, 972, $clone($toNativeArray($kindInt32, [-64, 0, -64]), d)), CaseRange), $clone(new CaseRange.ptr(973, 974, $clone($toNativeArray($kindInt32, [-63, 0, -63]), d)), CaseRange), $clone(new CaseRange.ptr(975, 975, $clone($toNativeArray($kindInt32, [0, 8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(976, 976, $clone($toNativeArray($kindInt32, [-62, 0, -62]), d)), CaseRange), $clone(new CaseRange.ptr(977, 977, $clone($toNativeArray($kindInt32, [-57, 0, -57]), d)), CaseRange), $clone(new CaseRange.ptr(981, 981, $clone($toNativeArray($kindInt32, [-47, 0, -47]), d)), CaseRange), $clone(new CaseRange.ptr(982, 982, $clone($toNativeArray($kindInt32, [-54, 0, -54]), d)), CaseRange), $clone(new CaseRange.ptr(983, 983, $clone($toNativeArray($kindInt32, [-8, 0, -8]), d)), CaseRange), $clone(new CaseRange.ptr(984, 1007, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1008, 1008, $clone($toNativeArray($kindInt32, [-86, 0, -86]), d)), CaseRange), $clone(new CaseRange.ptr(1009, 1009, $clone($toNativeArray($kindInt32, [-80, 0, -80]), d)), CaseRange), $clone(new CaseRange.ptr(1010, 1010, $clone($toNativeArray($kindInt32, [7, 0, 7]), d)), CaseRange), $clone(new CaseRange.ptr(1011, 1011, $clone($toNativeArray($kindInt32, [-116, 0, -116]), d)), CaseRange), $clone(new CaseRange.ptr(1012, 1012, $clone($toNativeArray($kindInt32, [0, -60, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1013, 1013, $clone($toNativeArray($kindInt32, [-96, 0, -96]), d)), CaseRange), $clone(new CaseRange.ptr(1015, 1016, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1017, 1017, $clone($toNativeArray($kindInt32, [0, -7, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1018, 1019, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1021, 1023, $clone($toNativeArray($kindInt32, [0, -130, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1024, 1039, $clone($toNativeArray($kindInt32, [0, 80, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1040, 1071, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1072, 1103, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(1104, 1119, $clone($toNativeArray($kindInt32, [-80, 0, -80]), d)), CaseRange), $clone(new CaseRange.ptr(1120, 1153, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1162, 1215, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1216, 1216, $clone($toNativeArray($kindInt32, [0, 15, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1217, 1230, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1231, 1231, $clone($toNativeArray($kindInt32, [-15, 0, -15]), d)), CaseRange), $clone(new CaseRange.ptr(1232, 1327, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(1329, 1366, $clone($toNativeArray($kindInt32, [0, 48, 0]), d)), CaseRange), $clone(new CaseRange.ptr(1377, 1414, $clone($toNativeArray($kindInt32, [-48, 0, -48]), d)), CaseRange), $clone(new CaseRange.ptr(4256, 4293, $clone($toNativeArray($kindInt32, [0, 7264, 0]), d)), CaseRange), $clone(new CaseRange.ptr(4295, 4295, $clone($toNativeArray($kindInt32, [0, 7264, 0]), d)), CaseRange), $clone(new CaseRange.ptr(4301, 4301, $clone($toNativeArray($kindInt32, [0, 7264, 0]), d)), CaseRange), $clone(new CaseRange.ptr(4304, 4346, $clone($toNativeArray($kindInt32, [3008, 0, 0]), d)), CaseRange), $clone(new CaseRange.ptr(4349, 4351, $clone($toNativeArray($kindInt32, [3008, 0, 0]), d)), CaseRange), $clone(new CaseRange.ptr(5024, 5103, $clone($toNativeArray($kindInt32, [0, 38864, 0]), d)), CaseRange), $clone(new CaseRange.ptr(5104, 5109, $clone($toNativeArray($kindInt32, [0, 8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(5112, 5117, $clone($toNativeArray($kindInt32, [-8, 0, -8]), d)), CaseRange), $clone(new CaseRange.ptr(7296, 7296, $clone($toNativeArray($kindInt32, [-6254, 0, -6254]), d)), CaseRange), $clone(new CaseRange.ptr(7297, 7297, $clone($toNativeArray($kindInt32, [-6253, 0, -6253]), d)), CaseRange), $clone(new CaseRange.ptr(7298, 7298, $clone($toNativeArray($kindInt32, [-6244, 0, -6244]), d)), CaseRange), $clone(new CaseRange.ptr(7299, 7300, $clone($toNativeArray($kindInt32, [-6242, 0, -6242]), d)), CaseRange), $clone(new CaseRange.ptr(7301, 7301, $clone($toNativeArray($kindInt32, [-6243, 0, -6243]), d)), CaseRange), $clone(new CaseRange.ptr(7302, 7302, $clone($toNativeArray($kindInt32, [-6236, 0, -6236]), d)), CaseRange), $clone(new CaseRange.ptr(7303, 7303, $clone($toNativeArray($kindInt32, [-6181, 0, -6181]), d)), CaseRange), $clone(new CaseRange.ptr(7304, 7304, $clone($toNativeArray($kindInt32, [35266, 0, 35266]), d)), CaseRange), $clone(new CaseRange.ptr(7312, 7354, $clone($toNativeArray($kindInt32, [0, -3008, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7357, 7359, $clone($toNativeArray($kindInt32, [0, -3008, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7545, 7545, $clone($toNativeArray($kindInt32, [35332, 0, 35332]), d)), CaseRange), $clone(new CaseRange.ptr(7549, 7549, $clone($toNativeArray($kindInt32, [3814, 0, 3814]), d)), CaseRange), $clone(new CaseRange.ptr(7566, 7566, $clone($toNativeArray($kindInt32, [35384, 0, 35384]), d)), CaseRange), $clone(new CaseRange.ptr(7680, 7829, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(7835, 7835, $clone($toNativeArray($kindInt32, [-59, 0, -59]), d)), CaseRange), $clone(new CaseRange.ptr(7838, 7838, $clone($toNativeArray($kindInt32, [0, -7615, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7840, 7935, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(7936, 7943, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(7944, 7951, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7952, 7957, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(7960, 7965, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7968, 7975, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(7976, 7983, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(7984, 7991, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(7992, 7999, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8000, 8005, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8008, 8013, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8017, 8017, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8019, 8019, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8021, 8021, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8023, 8023, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8025, 8025, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8027, 8027, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8029, 8029, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8031, 8031, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8032, 8039, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8040, 8047, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8048, 8049, $clone($toNativeArray($kindInt32, [74, 0, 74]), d)), CaseRange), $clone(new CaseRange.ptr(8050, 8053, $clone($toNativeArray($kindInt32, [86, 0, 86]), d)), CaseRange), $clone(new CaseRange.ptr(8054, 8055, $clone($toNativeArray($kindInt32, [100, 0, 100]), d)), CaseRange), $clone(new CaseRange.ptr(8056, 8057, $clone($toNativeArray($kindInt32, [128, 0, 128]), d)), CaseRange), $clone(new CaseRange.ptr(8058, 8059, $clone($toNativeArray($kindInt32, [112, 0, 112]), d)), CaseRange), $clone(new CaseRange.ptr(8060, 8061, $clone($toNativeArray($kindInt32, [126, 0, 126]), d)), CaseRange), $clone(new CaseRange.ptr(8064, 8071, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8072, 8079, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8080, 8087, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8088, 8095, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8096, 8103, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8104, 8111, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8112, 8113, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8115, 8115, $clone($toNativeArray($kindInt32, [9, 0, 9]), d)), CaseRange), $clone(new CaseRange.ptr(8120, 8121, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8122, 8123, $clone($toNativeArray($kindInt32, [0, -74, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8124, 8124, $clone($toNativeArray($kindInt32, [0, -9, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8126, 8126, $clone($toNativeArray($kindInt32, [-7205, 0, -7205]), d)), CaseRange), $clone(new CaseRange.ptr(8131, 8131, $clone($toNativeArray($kindInt32, [9, 0, 9]), d)), CaseRange), $clone(new CaseRange.ptr(8136, 8139, $clone($toNativeArray($kindInt32, [0, -86, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8140, 8140, $clone($toNativeArray($kindInt32, [0, -9, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8144, 8145, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8152, 8153, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8154, 8155, $clone($toNativeArray($kindInt32, [0, -100, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8160, 8161, $clone($toNativeArray($kindInt32, [8, 0, 8]), d)), CaseRange), $clone(new CaseRange.ptr(8165, 8165, $clone($toNativeArray($kindInt32, [7, 0, 7]), d)), CaseRange), $clone(new CaseRange.ptr(8168, 8169, $clone($toNativeArray($kindInt32, [0, -8, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8170, 8171, $clone($toNativeArray($kindInt32, [0, -112, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8172, 8172, $clone($toNativeArray($kindInt32, [0, -7, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8179, 8179, $clone($toNativeArray($kindInt32, [9, 0, 9]), d)), CaseRange), $clone(new CaseRange.ptr(8184, 8185, $clone($toNativeArray($kindInt32, [0, -128, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8186, 8187, $clone($toNativeArray($kindInt32, [0, -126, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8188, 8188, $clone($toNativeArray($kindInt32, [0, -9, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8486, 8486, $clone($toNativeArray($kindInt32, [0, -7517, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8490, 8490, $clone($toNativeArray($kindInt32, [0, -8383, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8491, 8491, $clone($toNativeArray($kindInt32, [0, -8262, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8498, 8498, $clone($toNativeArray($kindInt32, [0, 28, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8526, 8526, $clone($toNativeArray($kindInt32, [-28, 0, -28]), d)), CaseRange), $clone(new CaseRange.ptr(8544, 8559, $clone($toNativeArray($kindInt32, [0, 16, 0]), d)), CaseRange), $clone(new CaseRange.ptr(8560, 8575, $clone($toNativeArray($kindInt32, [-16, 0, -16]), d)), CaseRange), $clone(new CaseRange.ptr(8579, 8580, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(9398, 9423, $clone($toNativeArray($kindInt32, [0, 26, 0]), d)), CaseRange), $clone(new CaseRange.ptr(9424, 9449, $clone($toNativeArray($kindInt32, [-26, 0, -26]), d)), CaseRange), $clone(new CaseRange.ptr(11264, 11310, $clone($toNativeArray($kindInt32, [0, 48, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11312, 11358, $clone($toNativeArray($kindInt32, [-48, 0, -48]), d)), CaseRange), $clone(new CaseRange.ptr(11360, 11361, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11362, 11362, $clone($toNativeArray($kindInt32, [0, -10743, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11363, 11363, $clone($toNativeArray($kindInt32, [0, -3814, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11364, 11364, $clone($toNativeArray($kindInt32, [0, -10727, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11365, 11365, $clone($toNativeArray($kindInt32, [-10795, 0, -10795]), d)), CaseRange), $clone(new CaseRange.ptr(11366, 11366, $clone($toNativeArray($kindInt32, [-10792, 0, -10792]), d)), CaseRange), $clone(new CaseRange.ptr(11367, 11372, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11373, 11373, $clone($toNativeArray($kindInt32, [0, -10780, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11374, 11374, $clone($toNativeArray($kindInt32, [0, -10749, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11375, 11375, $clone($toNativeArray($kindInt32, [0, -10783, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11376, 11376, $clone($toNativeArray($kindInt32, [0, -10782, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11378, 11379, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11381, 11382, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11390, 11391, $clone($toNativeArray($kindInt32, [0, -10815, 0]), d)), CaseRange), $clone(new CaseRange.ptr(11392, 11491, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11499, 11502, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11506, 11507, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(11520, 11557, $clone($toNativeArray($kindInt32, [-7264, 0, -7264]), d)), CaseRange), $clone(new CaseRange.ptr(11559, 11559, $clone($toNativeArray($kindInt32, [-7264, 0, -7264]), d)), CaseRange), $clone(new CaseRange.ptr(11565, 11565, $clone($toNativeArray($kindInt32, [-7264, 0, -7264]), d)), CaseRange), $clone(new CaseRange.ptr(42560, 42605, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42624, 42651, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42786, 42799, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42802, 42863, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42873, 42876, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42877, 42877, $clone($toNativeArray($kindInt32, [0, -35332, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42878, 42887, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42891, 42892, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42893, 42893, $clone($toNativeArray($kindInt32, [0, -42280, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42896, 42899, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42900, 42900, $clone($toNativeArray($kindInt32, [48, 0, 48]), d)), CaseRange), $clone(new CaseRange.ptr(42902, 42921, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42922, 42922, $clone($toNativeArray($kindInt32, [0, -42308, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42923, 42923, $clone($toNativeArray($kindInt32, [0, -42319, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42924, 42924, $clone($toNativeArray($kindInt32, [0, -42315, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42925, 42925, $clone($toNativeArray($kindInt32, [0, -42305, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42926, 42926, $clone($toNativeArray($kindInt32, [0, -42308, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42928, 42928, $clone($toNativeArray($kindInt32, [0, -42258, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42929, 42929, $clone($toNativeArray($kindInt32, [0, -42282, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42930, 42930, $clone($toNativeArray($kindInt32, [0, -42261, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42931, 42931, $clone($toNativeArray($kindInt32, [0, 928, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42932, 42943, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42946, 42947, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42948, 42948, $clone($toNativeArray($kindInt32, [0, -48, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42949, 42949, $clone($toNativeArray($kindInt32, [0, -42307, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42950, 42950, $clone($toNativeArray($kindInt32, [0, -35384, 0]), d)), CaseRange), $clone(new CaseRange.ptr(42951, 42954, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(42997, 42998, $clone($toNativeArray($kindInt32, [1114112, 1114112, 1114112]), d)), CaseRange), $clone(new CaseRange.ptr(43859, 43859, $clone($toNativeArray($kindInt32, [-928, 0, -928]), d)), CaseRange), $clone(new CaseRange.ptr(43888, 43967, $clone($toNativeArray($kindInt32, [-38864, 0, -38864]), d)), CaseRange), $clone(new CaseRange.ptr(65313, 65338, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(65345, 65370, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(66560, 66599, $clone($toNativeArray($kindInt32, [0, 40, 0]), d)), CaseRange), $clone(new CaseRange.ptr(66600, 66639, $clone($toNativeArray($kindInt32, [-40, 0, -40]), d)), CaseRange), $clone(new CaseRange.ptr(66736, 66771, $clone($toNativeArray($kindInt32, [0, 40, 0]), d)), CaseRange), $clone(new CaseRange.ptr(66776, 66811, $clone($toNativeArray($kindInt32, [-40, 0, -40]), d)), CaseRange), $clone(new CaseRange.ptr(68736, 68786, $clone($toNativeArray($kindInt32, [0, 64, 0]), d)), CaseRange), $clone(new CaseRange.ptr(68800, 68850, $clone($toNativeArray($kindInt32, [-64, 0, -64]), d)), CaseRange), $clone(new CaseRange.ptr(71840, 71871, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(71872, 71903, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(93760, 93791, $clone($toNativeArray($kindInt32, [0, 32, 0]), d)), CaseRange), $clone(new CaseRange.ptr(93792, 93823, $clone($toNativeArray($kindInt32, [-32, 0, -32]), d)), CaseRange), $clone(new CaseRange.ptr(125184, 125217, $clone($toNativeArray($kindInt32, [0, 34, 0]), d)), CaseRange), $clone(new CaseRange.ptr(125218, 125251, $clone($toNativeArray($kindInt32, [-34, 0, -34]), d)), CaseRange)]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		$pkg.PrintRanges = new sliceType$4([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, abi, bytealg, goarch, itoa, unsafeheader, math, runtime, strconv, sync, unicode, utf8, Value, flag, ValueError, MapIter, Type, Kind, tflag, rtype, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, uncommonType, funcType, name, nameData, hiter, sliceType$1, ptrType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, ptrType$2, funcType$1, sliceType$7, sliceType$8, ptrType$6, ptrType$8, ptrType$9, sliceType$10, ptrType$10, sliceType$11, ptrType$11, ptrType$12, sliceType$12, ptrType$13, ptrType$14, funcType$2, sliceType$14, sliceType$15, ptrType$18, structType$3, sliceType$16, ptrType$19, ptrType$20, sliceType$17, sliceType$18, arrayType$7, sliceType$20, funcType$3, ptrType$23, arrayType$8, ptrType$24, funcType$4, funcType$5, ptrType$26, ptrType$27, bytesType, uint8Type, stringType, kindNames, initialized, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, copyVal, overflowFloat32, Indirect, convertOp, makeFloat, makeFloat32, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I, PtrTo, PointerTo, implements$1, specialChannelAssignability, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, methodValueCallCodePtr, methodValueCall, init, New, jsType, reflectType, setKindType, newName, newMethodName, resolveReflectName, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapaccess_faststr, mapassign_faststr, mapdelete_faststr, mapiterinit, mapiterkey, mapiterelem, mapiternext, maplen, cvtDirect, cvtSliceArrayPtr, methodReceiver, valueInterface, ifaceE2I, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, stringsLastIndex, stringsHasPrefix, valueMethodName, verifyNotInHeapPtr;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	abi = $packages["internal/abi"];
	bytealg = $packages["internal/bytealg"];
	goarch = $packages["internal/goarch"];
	itoa = $packages["internal/itoa"];
	unsafeheader = $packages["internal/unsafeheader"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	MapIter = $pkg.MapIter = $newType(0, $kindStruct, "reflect.MapIter", true, "reflect", true, function(m_, hiter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Value.ptr(ptrType$1.nil, 0, 0);
			this.hiter = new hiter.ptr($ifaceNil, null, null, 0, null);
			return;
		}
		this.m = m_;
		this.hiter = hiter_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, equal_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.equal = $throwNilPointerError;
			this.gcdata = ptrType$14.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.equal = equal_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$14.nil);
			this.methods = sliceType$14.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hasher_, keysize_, valuesize_, bucketsize_, flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hasher = $throwNilPointerError;
			this.keysize = 0;
			this.valuesize = 0;
			this.bucketsize = 0;
			this.flags = 0;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hasher = hasher_;
		this.keysize = keysize_;
		this.valuesize = valuesize_;
		this.bucketsize = bucketsize_;
		this.flags = flags_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$14.nil);
			this.typ = ptrType$1.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$14.nil);
			this.fields = sliceType$15.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$7.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$13.nil;
			this.index = sliceType$7.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, xcount_, moff_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this.xcount = 0;
			this.moff = 0;
			this._methods = sliceType$11.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this.xcount = xcount_;
		this.moff = moff_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$14.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, exported_, embedded_, pkgPath_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			this.embedded = false;
			this.pkgPath = "";
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
		this.embedded = embedded_;
		this.pkgPath = pkgPath_;
	});
	hiter = $pkg.hiter = $newType(0, $kindStruct, "reflect.hiter", true, "reflect", false, function(t_, m_, keys_, i_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			this.last = null;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
		this.last = last_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$5], [ptrType$2], true);
	sliceType$7 = $sliceType($Int);
	sliceType$8 = $sliceType(Value);
	ptrType$6 = $ptrType(runtime.Func);
	ptrType$8 = $ptrType($UnsafePointer);
	ptrType$9 = $ptrType(unsafeheader.Slice);
	sliceType$10 = $sliceType($Int32);
	ptrType$10 = $ptrType(uncommonType);
	sliceType$11 = $sliceType(method);
	ptrType$11 = $ptrType(interfaceType);
	ptrType$12 = $ptrType(imethod);
	sliceType$12 = $sliceType(fieldScan);
	ptrType$13 = $ptrType(structType);
	ptrType$14 = $ptrType($Uint8);
	funcType$2 = $funcType([], [], false);
	sliceType$14 = $sliceType(imethod);
	sliceType$15 = $sliceType(structField);
	ptrType$18 = $ptrType(nameData);
	structType$3 = $structType("reflect", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	sliceType$16 = $sliceType(ptrType$2);
	ptrType$19 = $ptrType($String);
	ptrType$20 = $ptrType(funcType);
	sliceType$17 = $sliceType(Type);
	sliceType$18 = $sliceType(sliceType$16);
	arrayType$7 = $arrayType($Uintptr, 5);
	sliceType$20 = $sliceType($Uintptr);
	funcType$3 = $funcType([$String], [$Bool], false);
	ptrType$23 = $ptrType(MapIter);
	arrayType$8 = $arrayType($Uintptr, 2);
	ptrType$24 = $ptrType(ValueError);
	funcType$4 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	funcType$5 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	ptrType$26 = $ptrType(structField);
	ptrType$27 = $ptrType(hiter);
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((((((f & 31) >>> 0) >>> 0)) === expected))) {
			$panic(new ValueError.ptr(valueMethodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if ((f === 0) || !((((f & 96) >>> 0) === 0))) {
			new flag(f).mustBeExportedSlow();
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeExportedSlow = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(valueMethodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + valueMethodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExportedSlow = function() { return new flag(this.$get()).mustBeExportedSlow(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0)) || (((f & 256) >>> 0) === 0)) {
			new flag(f).mustBeAssignableSlow();
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	flag.prototype.mustBeAssignableSlow = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(valueMethodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + valueMethodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + valueMethodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignableSlow = function() { return new flag(this.$get()).mustBeAssignableSlow(); };
	Value.ptr.prototype.Addr = function() {
		var fl, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		fl = (v.flag & 96) >>> 0;
		return new Value.ptr(v.typ.ptrTo(), v.ptr, (fl | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		if (!((new flag(v.flag).kind() === 1))) {
			$clone(v, Value).panicNotBool();
		}
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.panicNotBool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
	};
	Value.prototype.panicNotBool = function() { return this.$val.panicNotBool(); };
	Value.ptr.prototype.Bytes = function() {
		var {$24r, _r, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === bytesType) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).bytesSlow(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Bytes, $c: true, $r, $24r, _r, v, $s};return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var {_r, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.runes, $c: true, $r, _r, v, $s};return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var {$24r, _r, in$1, v, $s, $r, $c} = $restore(this, {in$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Call, $c: true, $r, $24r, _r, in$1, v, $s};return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var {$24r, _r, in$1, v, $s, $r, $c} = $restore(this, {in$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.CallSlice, $c: true, $r, $24r, _r, in$1, v, $s};return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.CanComplex = function() {
		var _1, v;
		v = this;
		_1 = new flag(v.flag).kind();
		if ((_1 === (15)) || (_1 === (16))) {
			return true;
		} else {
			return false;
		}
	};
	Value.prototype.CanComplex = function() { return this.$val.CanComplex(); };
	Value.ptr.prototype.Complex = function() {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var {$24r, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r, $c} = $restore(this, {index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (i > 0) { */ case 7:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 11; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 10:
			/* } */ case 8:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		$s = 5; continue;
		case 6:
		$s = -1; return v;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.FieldByIndex, $c: true, $r, $24r, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s};return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByIndexErr = function(index) {
		var {$24r, $24r$1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _v, i, index, v, x, $s, $r, $c} = $restore(this, {index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = [_r, $ifaceNil];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (i > 0) { */ case 7:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 11; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					/* */ if ($clone(v, Value).IsNil()) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if ($clone(v, Value).IsNil()) { */ case 13:
						_r$2 = v.typ.Elem().Name(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$3 = errors.New("reflect: indirection through nil pointer to embedded struct field " + _r$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$24r$1 = [new Value.ptr(ptrType$1.nil, 0, 0), _r$3];
						$s = 17; case 17: return $24r$1;
					/* } */ case 14:
					_r$4 = $clone(v, Value).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					v = _r$4;
				/* } */ case 10:
			/* } */ case 8:
			_r$5 = $clone(v, Value).Field(x); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			v = _r$5;
			_i++;
		$s = 5; continue;
		case 6:
		$s = -1; return [v, $ifaceNil];
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.FieldByIndexErr, $c: true, $r, $24r, $24r$1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _v, i, index, v, x, $s};return $f;
	};
	Value.prototype.FieldByIndexErr = function(index) { return this.$val.FieldByIndexErr(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var {$24r, _r, _r$1, _tuple, f, name$1, ok, v, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.FieldByName, $c: true, $r, $24r, _r, _r$1, _tuple, f, name$1, ok, v, $s};return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var {$24r, _r, _r$1, _tuple, f, match, ok, v, $s, $r, $c} = $restore(this, {match});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = _r$1;
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.FieldByNameFunc, $c: true, $r, $24r, _r, _r$1, _tuple, f, match, ok, v, $s};return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.CanFloat = function() {
		var _1, v;
		v = this;
		_1 = new flag(v.flag).kind();
		if ((_1 === (13)) || (_1 === (14))) {
			return true;
		} else {
			return false;
		}
	};
	Value.prototype.CanFloat = function() { return this.$val.CanFloat(); };
	Value.ptr.prototype.Float = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.CanInt = function() {
		var _1, v;
		v = this;
		_1 = new flag(v.flag).kind();
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			return true;
		} else {
			return false;
		}
	};
	Value.prototype.CanInt = function() { return this.$val.CanInt(); };
	Value.ptr.prototype.Int = function() {
		var _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var {$24r, _r, i, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$24r = i;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Interface, $c: true, $r, $24r, _r, i, v, $s};return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.IsZero = function() {
		var {$24r, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, c, i, i$1, v, x, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			_1 = new flag(v.flag).kind();
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 3; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 4; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 5; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 6; continue; }
			/* */ if (_1 === (17)) { $s = 7; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 8; continue; }
			/* */ if (_1 === (24)) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (1)) { */ case 2:
				$s = -1; return !$clone(v, Value).Bool();
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 3:
				$s = -1; return (x = $clone(v, Value).Int(), (x.$high === 0 && x.$low === 0));
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 4:
				$s = -1; return (x$1 = $clone(v, Value).Uint(), (x$1.$high === 0 && x$1.$low === 0));
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 5:
				$s = -1; return (x$2 = math.Float64bits($clone(v, Value).Float()), (x$2.$high === 0 && x$2.$low === 0));
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 6:
				c = $clone(v, Value).Complex();
				$s = -1; return (x$3 = math.Float64bits(c.$real), (x$3.$high === 0 && x$3.$low === 0)) && (x$4 = math.Float64bits(c.$imag), (x$4.$high === 0 && x$4.$low === 0));
			/* } else if (_1 === (17)) { */ case 7:
				i = 0;
				/* while (true) { */ case 13:
					_r = $clone(v, Value).Len(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					/* if (!(i < _r)) { break; } */ if(!(i < _r)) { $s = 14; continue; }
					_r$1 = $clone(v, Value).Index(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = $clone(_r$1, Value).IsZero(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (!_r$2) { */ case 16:
						$s = -1; return false;
					/* } */ case 17:
					i = i + (1) >> 0;
				$s = 13; continue;
				case 14:
				$s = -1; return true;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 8:
				$s = -1; return $clone(v, Value).IsNil();
			/* } else if (_1 === (24)) { */ case 9:
				_r$3 = $clone(v, Value).Len(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$24r = _r$3 === 0;
				$s = 21; case 21: return $24r;
			/* } else if (_1 === (25)) { */ case 10:
				i$1 = 0;
				/* while (true) { */ case 22:
					/* if (!(i$1 < $clone(v, Value).NumField())) { break; } */ if(!(i$1 < $clone(v, Value).NumField())) { $s = 23; continue; }
					_r$4 = $clone(v, Value).Field(i$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = $clone(_r$4, Value).IsZero(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* */ if (!_r$5) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (!_r$5) { */ case 24:
						$s = -1; return false;
					/* } */ case 25:
					i$1 = i$1 + (1) >> 0;
				$s = 22; continue;
				case 23:
				$s = -1; return true;
			/* } else { */ case 11:
				$panic(new ValueError.ptr("reflect.Value.IsZero", $clone(v, Value).Kind()));
			/* } */ case 12:
		case 1:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.IsZero, $c: true, $r, $24r, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, c, i, i$1, v, x, x$1, x$2, x$3, x$4, $s};return $f;
	};
	Value.prototype.IsZero = function() { return this.$val.IsZero(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var {_r, e, fl, k, k$1, key, tt, typ, v, $s, $r, $c} = $restore(this, {key});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		e = 0;
		/* */ if ((tt.key === stringType || (new flag(key.flag).kind() === 24)) && tt.key === key.typ && tt.elem.size <= 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((tt.key === stringType || (new flag(key.flag).kind() === 24)) && tt.key === key.typ && tt.elem.size <= 128) { */ case 1:
			k = (key.ptr).$get();
			e = mapaccess_faststr(v.typ, $clone(v, Value).pointer(), k);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			k$1 = 0;
			if (!((((key.flag & 128) >>> 0) === 0))) {
				k$1 = key.ptr;
			} else {
				k$1 = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
			}
			e = mapaccess(v.typ, $clone(v, Value).pointer(), k$1);
		/* } */ case 3:
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		$s = -1; return copyVal(typ, fl, e);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MapIndex, $c: true, $r, _r, e, fl, k, k$1, key, tt, typ, v, $s};return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var {_r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		it = [it];
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it[0] = new hiter.ptr($ifaceNil, null, null, 0, null);
		mapiterinit(v.typ, m, it[0]);
		a = $makeSlice(sliceType$8, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = copyVal(keyType, fl, key));
			mapiternext(it[0]);
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MapKeys, $c: true, $r, _r, a, fl, i, it, key, keyType, m, mlen, tt, v, $s};return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	hiter.ptr.prototype.initialized = function() {
		var h;
		h = this;
		return !($interfaceIsEqual(h.t, $ifaceNil));
	};
	hiter.prototype.initialized = function() { return this.$val.initialized(); };
	MapIter.ptr.prototype.Key = function() {
		var {_r, iter, iterkey, ktype, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		iter = this;
		if (!iter.hiter.initialized()) {
			$panic(new $String("MapIter.Key called before Next"));
		}
		_r = mapiterkey(iter.hiter); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iterkey = _r;
		if (iterkey === 0) {
			$panic(new $String("MapIter.Key called on exhausted iterator"));
		}
		t = (iter.m.typ.kindType);
		ktype = t.key;
		$s = -1; return copyVal(ktype, (new flag(iter.m.flag).ro() | ((ktype.Kind() >>> 0))) >>> 0, iterkey);
		/* */ } return; } var $f = {$blk: MapIter.ptr.prototype.Key, $c: true, $r, _r, iter, iterkey, ktype, t, $s};return $f;
	};
	MapIter.prototype.Key = function() { return this.$val.Key(); };
	Value.ptr.prototype.SetIterKey = function(iter) {
		var {_r, _r$1, iter, iterkey, key, ktype, t, target, v, $s, $r, $c} = $restore(this, {iter});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (!iter.hiter.initialized()) {
			$panic(new $String("reflect: Value.SetIterKey called before Next"));
		}
		_r = mapiterkey(iter.hiter); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iterkey = _r;
		if (iterkey === 0) {
			$panic(new $String("reflect: Value.SetIterKey called on exhausted iterator"));
		}
		new flag(v.flag).mustBeAssignable();
		target = 0;
		if (new flag(v.flag).kind() === 20) {
			target = v.ptr;
		}
		t = (iter.m.typ.kindType);
		ktype = t.key;
		key = new Value.ptr(ktype, iterkey, (((iter.m.flag | ((ktype.Kind() >>> 0))) >>> 0) | 128) >>> 0);
		_r$1 = $clone(key, Value).assignTo("reflect.MapIter.SetKey", v.typ, target); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		key = _r$1;
		typedmemmove(v.typ, v.ptr, key.ptr);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetIterKey, $c: true, $r, _r, _r$1, iter, iterkey, key, ktype, t, target, v, $s};return $f;
	};
	Value.prototype.SetIterKey = function(iter) { return this.$val.SetIterKey(iter); };
	MapIter.ptr.prototype.Value = function() {
		var {_r, iter, iterelem, t, vtype, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		iter = this;
		if (!iter.hiter.initialized()) {
			$panic(new $String("MapIter.Value called before Next"));
		}
		_r = mapiterelem(iter.hiter); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iterelem = _r;
		if (iterelem === 0) {
			$panic(new $String("MapIter.Value called on exhausted iterator"));
		}
		t = (iter.m.typ.kindType);
		vtype = t.elem;
		$s = -1; return copyVal(vtype, (new flag(iter.m.flag).ro() | ((vtype.Kind() >>> 0))) >>> 0, iterelem);
		/* */ } return; } var $f = {$blk: MapIter.ptr.prototype.Value, $c: true, $r, _r, iter, iterelem, t, vtype, $s};return $f;
	};
	MapIter.prototype.Value = function() { return this.$val.Value(); };
	Value.ptr.prototype.SetIterValue = function(iter) {
		var {_r, _r$1, elem, iter, iterelem, t, target, v, vtype, $s, $r, $c} = $restore(this, {iter});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (!iter.hiter.initialized()) {
			$panic(new $String("reflect: Value.SetIterValue called before Next"));
		}
		_r = mapiterelem(iter.hiter); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iterelem = _r;
		if (iterelem === 0) {
			$panic(new $String("reflect: Value.SetIterValue called on exhausted iterator"));
		}
		new flag(v.flag).mustBeAssignable();
		target = 0;
		if (new flag(v.flag).kind() === 20) {
			target = v.ptr;
		}
		t = (iter.m.typ.kindType);
		vtype = t.elem;
		elem = new Value.ptr(vtype, iterelem, (((iter.m.flag | ((vtype.Kind() >>> 0))) >>> 0) | 128) >>> 0);
		_r$1 = $clone(elem, Value).assignTo("reflect.MapIter.SetValue", v.typ, target); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		elem = _r$1;
		typedmemmove(v.typ, v.ptr, elem.ptr);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetIterValue, $c: true, $r, _r, _r$1, elem, iter, iterelem, t, target, v, vtype, $s};return $f;
	};
	Value.prototype.SetIterValue = function(iter) { return this.$val.SetIterValue(iter); };
	MapIter.ptr.prototype.Next = function() {
		var {$24r, _r, _r$1, iter, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		iter = this;
		if (!$clone(iter.m, Value).IsValid()) {
			$panic(new $String("MapIter.Next called on an iterator that does not have an associated map Value"));
		}
		/* */ if (!iter.hiter.initialized()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!iter.hiter.initialized()) { */ case 1:
			mapiterinit(iter.m.typ, $clone(iter.m, Value).pointer(), iter.hiter);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = mapiterkey(iter.hiter); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 0) { */ case 4:
				$panic(new $String("MapIter.Next called on exhausted iterator"));
			/* } */ case 5:
			mapiternext(iter.hiter);
		/* } */ case 3:
		_r$1 = mapiterkey(iter.hiter); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = !(_r$1 === 0);
		$s = 8; case 8: return $24r;
		/* */ } return; } var $f = {$blk: MapIter.ptr.prototype.Next, $c: true, $r, $24r, _r, _r$1, iter, $s};return $f;
	};
	MapIter.prototype.Next = function() { return this.$val.Next(); };
	MapIter.ptr.prototype.Reset = function(v) {
		var iter, v;
		iter = this;
		if ($clone(v, Value).IsValid()) {
			new flag(v.flag).mustBe(21);
		}
		iter.m = v;
		hiter.copy(iter.hiter, new hiter.ptr($ifaceNil, null, null, 0, null));
	};
	MapIter.prototype.Reset = function(v) { return this.$val.Reset(v); };
	Value.ptr.prototype.MapRange = function() {
		var v;
		v = this;
		if (!((new flag(v.flag).kind() === 21))) {
			new flag(v.flag).panicNotMap();
		}
		return new MapIter.ptr($clone(v, Value), new hiter.ptr($ifaceNil, null, null, 0, null));
	};
	Value.prototype.MapRange = function() { return this.$val.MapRange(); };
	flag.prototype.panicNotMap = function() {
		var f;
		f = this.$val;
		new flag(f).mustBe(21);
	};
	$ptrType(flag).prototype.panicNotMap = function() { return new flag(this.$get()).panicNotMap(); };
	copyVal = function(typ, fl, ptr) {
		var c, fl, ptr, typ;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, ptr);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		}
		return new Value.ptr(typ, (ptr).$get(), fl);
	};
	Value.ptr.prototype.Method = function(i) {
		var fl, i, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0)) || ((i >>> 0)) >= ((v.typ.NumMethod() >>> 0))) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (new flag(v.flag).ro() | (((v.flag & 128) >>> 0))) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var {_r, _tuple, m, name$1, ok, v, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return $clone(v, Value).Method(m.Index);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.MethodByName, $c: true, $r, _r, _tuple, m, name$1, ok, v, $s};return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var {$24r, _r, _tuple, ok, v, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$24r = [x, ok];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Recv, $c: true, $r, $24r, _r, _tuple, ok, v, x, $s};return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var {_r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r, $c} = $restore(this, {nb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.recv, $c: true, $r, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s};return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var {_r, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Send, $c: true, $r, _r, v, x, $s};return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var {$24r, _r, _r$1, nb, p, selected, tt, v, x, $s, $r, $c} = $restore(this, {x, nb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$24r = selected;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.send, $c: true, $r, $24r, _r, _r$1, nb, p, selected, tt, v, x, $s};return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var {_r, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.setRunes, $c: true, $r, _r, v, x, $s};return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, elem) {
		var {_r, _r$1, _r$2, e, e$1, elem, k, k$1, key, tt, v, $s, $r, $c} = $restore(this, {key, elem});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		/* */ if ((tt.key === stringType || (new flag(key.flag).kind() === 24)) && tt.key === key.typ && tt.elem.size <= 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((tt.key === stringType || (new flag(key.flag).kind() === 24)) && tt.key === key.typ && tt.elem.size <= 128) { */ case 1:
			k = (key.ptr).$get();
			if (elem.typ === ptrType$1.nil) {
				mapdelete_faststr(v.typ, $clone(v, Value).pointer(), k);
				$s = -1; return;
			}
			new flag(elem.flag).mustBeExported();
			_r = $clone(elem, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			elem = _r;
			e = 0;
			if (!((((elem.flag & 128) >>> 0) === 0))) {
				e = elem.ptr;
			} else {
				e = ((elem.$ptr_ptr || (elem.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, elem))));
			}
			$r = mapassign_faststr(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		_r$1 = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		key = _r$1;
		k$1 = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k$1 = key.ptr;
		} else {
			k$1 = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (elem.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k$1);
			$s = -1; return;
		}
		new flag(elem.flag).mustBeExported();
		_r$2 = $clone(elem, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		elem = _r$2;
		e$1 = 0;
		if (!((((elem.flag & 128) >>> 0) === 0))) {
			e$1 = elem.ptr;
		} else {
			e$1 = ((elem.$ptr_ptr || (elem.$ptr_ptr = new ptrType$8(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, elem))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k$1, e$1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetMapIndex, $c: true, $r, _r, _r$1, _r$2, e, e$1, elem, k, k$1, key, tt, v, $s};return $f;
	};
	Value.prototype.SetMapIndex = function(key, elem) { return this.$val.SetMapIndex(key, elem); };
	Value.ptr.prototype.SetUint = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var {$24r, _r, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (new flag(v.flag).kind() === 24) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).stringNonString(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.String, $c: true, $r, $24r, _r, v, $s};return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.stringNonString = function() {
		var {$24r, _r, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		if (new flag(v.flag).kind() === 0) {
			$s = -1; return "<invalid Value>";
		}
		_r = $clone(v, Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = "<" + _r + " Value>";
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.stringNonString, $c: true, $r, $24r, _r, v, $s};return $f;
	};
	Value.prototype.stringNonString = function() { return this.$val.stringNonString(); };
	Value.ptr.prototype.TryRecv = function() {
		var {$24r, _r, _tuple, ok, v, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$24r = [x, ok];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.TryRecv, $c: true, $r, $24r, _r, _tuple, ok, v, x, $s};return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var {$24r, _r, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.TrySend, $c: true, $r, $24r, _r, v, x, $s};return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var v;
		v = this;
		if (!((v.flag === 0)) && (((v.flag & 512) >>> 0) === 0)) {
			return v.typ;
		}
		return $clone(v, Value).typeSlow();
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.typeSlow = function() {
		var i, m, m$1, ms, tt, v, x;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((v.flag & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ms = v.typ.exportedMethods();
		if (((i >>> 0)) >= ((ms.$length >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.typeSlow = function() { return this.$val.typeSlow(); };
	Value.ptr.prototype.CanUint = function() {
		var _1, v;
		v = this;
		_1 = new flag(v.flag).kind();
		if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
			return true;
		} else {
			return false;
		}
	};
	Value.prototype.CanUint = function() { return this.$val.CanUint(); };
	Value.ptr.prototype.Uint = function() {
		var _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	Value.ptr.prototype.UnsafePointer = function() {
		var {_1, _r, code, k, p, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		code = [code];
		v = this;
		k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (22)) { $s = 2; continue; }
			/* */ if ((_1 === (18)) || (_1 === (21)) || (_1 === (26))) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (23)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (22)) { */ case 2:
				if (v.typ.ptrdata === 0) {
					if (!verifyNotInHeapPtr((v.ptr).$get())) {
						$panic(new $String("reflect: reflect.Value.UnsafePointer on an invalid notinheap pointer"));
					}
					$s = -1; return (v.ptr).$get();
				}
				$s = -1; return $clone(v, Value).pointer();
			/* } else if ((_1 === (18)) || (_1 === (21)) || (_1 === (26))) { */ case 3:
				$s = -1; return $clone(v, Value).pointer();
			/* } else if (_1 === (19)) { */ case 4:
				/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 7:
					_r = methodValueCallCodePtr(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					code[0] = _r;
					$s = -1; return code[0];
				/* } */ case 8:
				p = $clone(v, Value).pointer();
				if (!(p === 0)) {
					p = (p).$get();
				}
				$s = -1; return p;
			/* } else if (_1 === (23)) { */ case 5:
				$s = -1; return ($pointerOfStructConversion(v.ptr, ptrType$9)).Data;
			/* } */ case 6:
		case 1:
		$panic(new ValueError.ptr("reflect.Value.UnsafePointer", new flag(v.flag).kind()));
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.UnsafePointer, $c: true, $r, _1, _r, code, k, p, v, $s};return $f;
	};
	Value.prototype.UnsafePointer = function() { return this.$val.UnsafePointer(); };
	Indirect = function(v) {
		var {$24r, _r, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!(($clone(v, Value).Kind() === 22))) {
			$s = -1; return v;
		}
		_r = $clone(v, Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Indirect, $c: true, $r, $24r, _r, v, $s};return $f;
	};
	$pkg.Indirect = Indirect;
	Value.ptr.prototype.Convert = function(t) {
		var {$24r, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$24r = _r$4;
		$s = 10; case 10: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Convert, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s};return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	Value.ptr.prototype.CanConvert = function(t) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, n, t, v, vt, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		vt = $clone(v, Value).Type();
		_r = vt.ConvertibleTo(t); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$1 = vt.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r$1 === 23)) { _v$1 = false; $s = 7; continue s; }
		_r$2 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 22; case 7:
		if (!(_v$1)) { _v = false; $s = 6; continue s; }
		_r$3 = t.Elem(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v = _r$4 === 17; case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			_r$5 = t.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = _r$5.Len(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			n = _r$6;
			_r$7 = $clone(v, Value).Len(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (n > _r$7) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (n > _r$7) { */ case 14:
				$s = -1; return false;
			/* } */ case 15:
		/* } */ case 5:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.CanConvert, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, n, t, v, vt, $s};return $f;
	};
	Value.prototype.CanConvert = function(t) { return this.$val.CanConvert(t); };
	convertOp = function(dst, src) {
		var {_1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, _v$4, _v$5, dst, src, $s, $r, $c} = $restore(this, {dst, src});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ if (_1 === (18)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 9; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 9; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 9; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 9; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 12; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 12:
				/* */ if (_v) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v) { */ case 10:
						_r$1 = dst.Elem().Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 14:
				/* } */ case 11:
				$s = 9; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 18; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 18:
				/* */ if (_v$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_v$1) { */ case 16:
						_r$3 = src.Elem().Kind(); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 20:
				/* } */ case 17:
				if (!(dst.Kind() === 22)) { _v$3 = false; $s = 25; continue s; }
				_r$4 = dst.Elem().Kind(); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_v$3 = _r$4 === 17; case 25:
				if (!(_v$3)) { _v$2 = false; $s = 24; continue s; }
				_r$5 = dst.Elem().Elem(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$2 = $interfaceIsEqual(src.Elem(), _r$5); case 24:
				/* */ if (_v$2) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_v$2) { */ case 22:
					$s = -1; return cvtSliceArrayPtr;
				/* } */ case 23:
				$s = 9; continue;
			/* } else if (_1 === (18)) { */ case 8:
				if (!(dst.Kind() === 18)) { _v$4 = false; $s = 30; continue s; }
				_r$6 = specialChannelAssignability(dst, src); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$4 = _r$6; case 30:
				/* */ if (_v$4) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (_v$4) { */ case 28:
					$s = -1; return cvtDirect;
				/* } */ case 29:
			/* } */ case 9:
		case 1:
		_r$7 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (_r$7) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (_r$7) { */ case 32:
			$s = -1; return cvtDirect;
		/* } */ case 33:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$5 = false; $s = 37; continue s; }
		_r$8 = dst.Elem().common(); /* */ $s = 38; case 38: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg = _r$8;
		_r$9 = src.Elem().common(); /* */ $s = 39; case 39: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_arg$1 = _r$9;
		_r$10 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 40; case 40: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_v$5 = _r$10; case 37:
		/* */ if (_v$5) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (_v$5) { */ case 35:
			$s = -1; return cvtDirect;
		/* } */ case 36:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } var $f = {$blk: convertOp, $c: true, $r, _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, _v$4, _v$5, dst, src, $s};return $f;
	};
	makeFloat = function(f, v, t) {
		var {_1, _r, f, ptr, t, typ, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } var $f = {$blk: makeFloat, $c: true, $r, _1, _r, f, ptr, t, typ, v, $s};return $f;
	};
	makeFloat32 = function(f, v, t) {
		var {_r, f, ptr, t, typ, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		(ptr).$set(v);
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } var $f = {$blk: makeFloat32, $c: true, $r, _r, f, ptr, t, typ, v, $s};return $f;
	};
	makeComplex = function(f, v, t) {
		var {_1, _r, f, ptr, t, typ, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } var $f = {$blk: makeComplex, $c: true, $r, _1, _r, f, ptr, t, typ, v, $s};return $f;
	};
	makeString = function(f, v, t) {
		var {_r, f, ret, t, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: makeString, $c: true, $r, _r, f, ret, t, v, $s};return $f;
	};
	makeBytes = function(f, v, t) {
		var {_r, f, ret, t, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: makeBytes, $c: true, $r, _r, f, ret, t, v, $s};return $f;
	};
	makeRunes = function(f, v, t) {
		var {_r, f, ret, t, v, $s, $r, $c} = $restore(this, {f, v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(New(t), Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: makeRunes, $c: true, $r, _r, f, ret, t, v, $s};return $f;
	};
	cvtInt = function(v, t) {
		var {$24r, _r, t, v, x, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtInt, $c: true, $r, $24r, _r, t, v, x, $s};return $f;
	};
	cvtUint = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtUint, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtFloatInt = function(v, t) {
		var {$24r, _r, t, v, x, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtFloatInt, $c: true, $r, $24r, _r, t, v, x, $s};return $f;
	};
	cvtFloatUint = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtFloatUint, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtIntFloat = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtIntFloat, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtUintFloat = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtUintFloat, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtFloat = function(v, t) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _v, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(v, Value).Type().Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (!(_r === 13)) { _v = false; $s = 3; continue s; }
		_r$1 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1 === 13; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$2 = makeFloat32(new flag(v.flag).ro(), (v.ptr).$get(), t); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$24r = _r$2;
			$s = 7; case 7: return $24r;
		/* } */ case 2:
		_r$3 = makeFloat(new flag(v.flag).ro(), $clone(v, Value).Float(), t); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r$1 = _r$3;
		$s = 9; case 9: return $24r$1;
		/* */ } return; } var $f = {$blk: cvtFloat, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _v, t, v, $s};return $f;
	};
	cvtComplex = function(v, t) {
		var {$24r, _r, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeComplex(new flag(v.flag).ro(), $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtComplex, $c: true, $r, $24r, _r, t, v, $s};return $f;
	};
	cvtIntString = function(v, t) {
		var {$24r, _r, s, t, v, x, x$1, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = "\xEF\xBF\xBD";
		x = $clone(v, Value).Int();
		if ((x$1 = (new $Int64(0, (((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)))), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			s = ($encodeRune((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0))));
		}
		_r = makeString(new flag(v.flag).ro(), s, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtIntString, $c: true, $r, $24r, _r, s, t, v, x, x$1, $s};return $f;
	};
	cvtUintString = function(v, t) {
		var {$24r, _r, s, t, v, x, x$1, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = "\xEF\xBF\xBD";
		x = $clone(v, Value).Uint();
		if ((x$1 = (new $Uint64(0, ((x.$low >> 0)))), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			s = ($encodeRune(((x.$low >> 0))));
		}
		_r = makeString(new flag(v.flag).ro(), s, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: cvtUintString, $c: true, $r, $24r, _r, s, t, v, x, x$1, $s};return $f;
	};
	cvtBytesString = function(v, t) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: cvtBytesString, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s};return $f;
	};
	cvtStringBytes = function(v, t) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$4($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: cvtStringBytes, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s};return $f;
	};
	cvtRunesString = function(v, t) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: cvtRunesString, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s};return $f;
	};
	cvtStringRunes = function(v, t) {
		var {$24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$10($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: cvtStringRunes, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s};return $f;
	};
	cvtT2I = function(v, typ) {
		var {$24r, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r, $c} = $restore(this, {v, typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r$4, target, (((new flag(v.flag).ro() | 128) >>> 0) | 20) >>> 0);
		$s = 9; case 9: return $24r;
		/* */ } return; } var $f = {$blk: cvtT2I, $c: true, $r, $24r, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s};return $f;
	};
	cvtI2I = function(v, typ) {
		var {$24r, _r, _r$1, _r$2, ret, typ, v, $s, $r, $c} = $restore(this, {v, typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (new flag(v.flag).ro())) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 6; case 6: return $24r;
		/* */ } return; } var $f = {$blk: cvtI2I, $c: true, $r, $24r, _r, _r$1, _r$2, ret, typ, v, $s};return $f;
	};
	structField.ptr.prototype.embedded = function() {
		var f;
		f = this;
		return $clone(f.name, name).embedded();
	};
	structField.prototype.embedded = function() { return this.$val.embedded(); };
	Method.ptr.prototype.IsExported = function() {
		var m;
		m = this;
		return m.PkgPath === "";
	};
	Method.prototype.IsExported = function() { return this.$val.IsExported(); };
	Kind.prototype.String = function() {
		var k, x;
		k = this.$val;
		if (((k >>> 0)) < ((kindNames.$length >>> 0))) {
			return (x = ((k >>> 0)), ((x < 0 || x >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + x]));
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var t, ut;
		t = this;
		ut = t.uncommon();
		if (ut === ptrType$10.nil) {
			return sliceType$11.nil;
		}
		return ut.exportedMethods();
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			return tt.NumMethod();
		}
		return t.exportedMethods().$length;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var {$24r, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, t, tt, ut, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$10.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		_ref = ut.exportedMethods();
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			/* */ if ($clone(t.nameOff(p.name), name).name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(t.nameOff(p.name), name).name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$24r = [m, ok];
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			_i++;
		$s = 1; continue;
		case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.MethodByName, $c: true, $r, $24r, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, t, tt, ut, $s};return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$10.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.hasName = function() {
		var t;
		t = this;
		return !((((t.tflag & 4) >>> 0) === 0));
	};
	rtype.prototype.hasName = function() { return this.$val.hasName(); };
	rtype.ptr.prototype.Name = function() {
		var _1, i, s, sqBrackets, t;
		t = this;
		if (!t.hasName()) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		sqBrackets = 0;
		while (true) {
			if (!(i >= 0 && (!((s.charCodeAt(i) === 46)) || !((sqBrackets === 0))))) { break; }
			_1 = s.charCodeAt(i);
			if (_1 === (93)) {
				sqBrackets = sqBrackets + (1) >> 0;
			} else if (_1 === (91)) {
				sqBrackets = sqBrackets - (1) >> 0;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type " + t.String()));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var {$24r, _r, index, t, tt, $s, $r, $c} = $restore(this, {index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.FieldByIndex, $c: true, $r, $24r, _r, index, t, tt, $s};return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var {$24r, _r, name$1, t, tt, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.FieldByName, $c: true, $r, $24r, _r, name$1, t, tt, $s};return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var {$24r, _r, match, t, tt, $s, $r, $c} = $restore(this, {match});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.FieldByNameFunc, $c: true, $r, $24r, _r, match, t, tt, $s};return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type " + t.String()));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type " + t.String()));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type " + t.String()));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$11.nil) {
			return [m, ok];
		}
		p = ptrType$12.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructField.ptr.prototype.IsExported = function() {
		var f;
		f = this;
		return f.PkgPath === "";
	};
	StructField.prototype.IsExported = function() { return this.$val.IsExported(); };
	StructTag.prototype.Get = function(key) {
		var _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var f, i, p, t, tag, x;
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		f.Name = $clone(p.name, name).name();
		f.Anonymous = p.embedded();
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(t.pkgPath, name).name();
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset;
		f.Index = new sliceType$7([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var {_i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r, $c} = $restore(this, {index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return f;
		/* */ } return; } var $f = {$blk: structType.ptr.prototype.FieldByIndex, $c: true, $r, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s};return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var {_entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r, $c} = $restore(this, {match});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
		ok = false;
		t = this;
		current = new sliceType$12([]);
		next = new sliceType$12([$clone(new fieldScan.ptr(t, sliceType$7.nil), fieldScan)]);
		nextCount = false;
		visited = $makeMap(ptrType$13.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				if ((_entry = $mapIndex(visited,ptrType$13.keyFor(t$1)), _entry !== undefined ? _entry.v : false)) {
					_i++;
					/* continue; */ $s = 3; continue;
				}
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$13.keyFor(_key), { k: _key, v: true });
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 5:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = $clone(f.name, name).name();
					ntyp = ptrType$1.nil;
					/* */ if (f.embedded()) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (f.embedded()) { */ case 7:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 9; continue; }
						/* */ $s = 10; continue;
						/* if (ntyp.Kind() === 22) { */ case 9:
							_r = ntyp.Elem().common(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 10:
					/* } */ case 8:
					_r$1 = match(fname); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_r$1) { */ case 12:
						if ((_entry$1 = $mapIndex(count,ptrType$13.keyFor(t$1)), _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						StructField.copy(result, t$1.Field(i));
						result.Index = sliceType$7.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 5; continue;
					/* } */ case 13:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 5; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = $mapIndex(nextCount,ptrType$13.keyFor(styp)), _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$13.keyFor(_key$1), { k: _key$1, v: 2 });
						_i$1++;
						/* continue; */ $s = 5; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$13.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$13.keyFor(_key$2), { k: _key$2, v: 1 });
					if ((_entry$3 = $mapIndex(count,ptrType$13.keyFor(t$1)), _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$13.keyFor(_key$3), { k: _key$3, v: 2 });
					}
					index = sliceType$7.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				$s = 5; continue;
				case 6:
				_i++;
			$s = 3; continue;
			case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		$s = 1; continue;
		case 2:
		$s = -1; return [result, ok];
		/* */ } return; } var $f = {$blk: structType.ptr.prototype.FieldByNameFunc, $c: true, $r, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s};return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var {$24r, _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasEmbeds, i, name$1, present, t, tf, x, $s, $r, $c} = $restore(this, {name$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$7.nil, false);
		present = false;
		t = this;
		hasEmbeds = false;
		if (!(name$1[0] === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(tf.name, name).name() === name$1[0]) {
					_tmp = $clone(t.Field(i), StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				}
				if (tf.embedded()) {
					hasEmbeds = true;
				}
				_i++;
			}
		}
		if (!hasEmbeds) {
			$s = -1; return [f, present];
		}
		_r = t.FieldByNameFunc((function(name$1) { return function(s) {
			var s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$24r = [f, present];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: structType.ptr.prototype.FieldByName, $c: true, $r, $24r, _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasEmbeds, i, name$1, present, t, tf, x, $s};return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var t;
		return PointerTo(t);
	};
	$pkg.PtrTo = PtrTo;
	PointerTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PointerTo = PointerTo;
	rtype.ptr.prototype.Implements = function(u) {
		var {_r, t, u, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Implements, $c: true, $r, _r, t, u, $s};return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var {$24r, _r, t, u, uu, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r || implements$1(uu, t);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.AssignableTo, $c: true, $r, $24r, _r, t, u, uu, $s};return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var {$24r, _r, t, u, uu, $s, $r, $c} = $restore(this, {u});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = !(_r === $throwNilPointerError);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.ConvertibleTo, $c: true, $r, $24r, _r, t, u, uu, $s};return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$10.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	specialChannelAssignability = function(T, V) {
		var {$24r, T, V, _r, _v, $s, $r, $c} = $restore(this, {T, V});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!((V.ChanDir() === 3) && (T.Name() === "" || V.Name() === ""))) { _v = false; $s = 1; continue s; }
		_r = haveIdenticalType(T.Elem(), V.Elem(), true); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: specialChannelAssignability, $c: true, $r, $24r, T, V, _r, _v, $s};return $f;
	};
	directlyAssignable = function(T, V) {
		var {$24r, T, V, _r, _r$1, _v, $s, $r, $c} = $restore(this, {T, V});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (T.hasName() && V.hasName() || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		if (!(T.Kind() === 18)) { _v = false; $s = 3; continue s; }
		_r = specialChannelAssignability(T, V); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return true;
		/* } */ case 2:
		_r$1 = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 6; case 6: return $24r;
		/* */ } return; } var $f = {$blk: directlyAssignable, $c: true, $r, $24r, T, V, _r, _r$1, _v, $s};return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var {$24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _v, _v$1, cmpTags, $s, $r, $c} = $restore(this, {T, V, cmpTags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v$1 = true; $s = 4; continue s; }
		_r$2 = T.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$1 = !((_r$2 === _r$3)); case 4:
		if (_v$1) { _v = true; $s = 3; continue s; }
		_r$4 = T.PkgPath(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = V.PkgPath(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v = !(_r$4 === _r$5); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$6 = T.common(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg = _r$6;
		_r$7 = V.common(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_arg$1 = _r$7;
		_r$8 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$24r = _r$8;
		$s = 14; case 14: return $24r;
		/* */ } return; } var $f = {$blk: haveIdenticalType, $c: true, $r, $24r, T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _v, _v$1, cmpTags, $s};return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var {$24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _v, _v$1, _v$2, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r, $c} = $restore(this, {T, V, cmpTags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$24r = _v;
				$s = 12; case 12: return $24r;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === T.ChanDir())) { _v$1 = false; $s = 13; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 13:
				$24r$1 = _v$1;
				$s = 15; case 15: return $24r$1;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 16:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 17; continue; }
					_r$2 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!_r$2) { */ case 18:
						$s = -1; return false;
					/* } */ case 19:
					i = i + (1) >> 0;
				$s = 16; continue;
				case 17:
				i$1 = 0;
				/* while (true) { */ case 21:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 22; continue; }
					_r$3 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (!_r$3) { */ case 23:
						$s = -1; return false;
					/* } */ case 24:
					i$1 = i$1 + (1) >> 0;
				$s = 21; continue;
				case 22:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$4 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				if (!(_r$4)) { _v$2 = false; $s = 26; continue s; }
				_r$5 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$2 = _r$5; case 26:
				$24r$2 = _v$2;
				$s = 29; case 29: return $24r$2;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$24r$3 = _r$6;
				$s = 31; case 31: return $24r$3;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$7 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					/* */ if (!_r$7) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$7) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offset === vf.offset))) {
						$s = -1; return false;
					}
					if (!(tf.embedded() === vf.embedded())) {
						$s = -1; return false;
					}
					_i++;
				$s = 32; continue;
				case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: haveIdenticalUnderlyingType, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _v, _v$1, _v$2, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s};return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	methodValueCallCodePtr = function() {
		var {$24r, _r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = abi.FuncPCABI0(new funcType$2(methodValueCall)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: methodValueCallCodePtr, $c: true, $r, $24r, _r, $s};return $f;
	};
	methodValueCall = function() {
		$throwRuntimeError("native function not implemented: reflect.methodValueCall");
	};
	init = function() {
		var {used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, sliceType$11.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), new name.ptr(ptrType$14.nil), sliceType$14.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), new name.ptr(ptrType$14.nil), sliceType$15.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$14.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: init, $c: true, $r, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	New = function(typ) {
		var fl, pt, ptr, t, typ;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		t = $assertType(typ, ptrType$1);
		pt = t.ptrTo();
		ptr = unsafe_New(t);
		fl = 22;
		return new Value.ptr(pt, ptr, fl);
	};
	$pkg.New = New;
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _ref, _ref$1, _ref$2, _ref$3, dir, exported, exported$1, f, fields, i, i$1, i$2, i$3, i$4, i$5, imethods, in$1, m, m$1, m$2, methodSet, methods, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut, xcount;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), $throwNilPointerError, ptrType$14.nil, resolveReflectName($clone(newName(internalStr(typ.string), "", !!(typ.exported), false), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = sliceType$11.nil;
				i = 0;
				while (true) {
					if (!(i < $parseInt(methodSet.length))) { break; }
					m = methodSet[i];
					exported = internalStr(m.pkg) === "";
					if (!exported) {
						i = i + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(resolveReflectName($clone(newMethodName(m), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					i = i + (1) >> 0;
				}
				xcount = ((reflectMethods.$length << 16 >>> 16));
				i$1 = 0;
				while (true) {
					if (!(i$1 < $parseInt(methodSet.length))) { break; }
					m$1 = methodSet[i$1];
					exported$1 = internalStr(m$1.pkg) === "";
					if (exported$1) {
						i$1 = i$1 + (1) >> 0;
						continue;
					}
					reflectMethods = $append(reflectMethods, new method.ptr(resolveReflectName($clone(newMethodName(m$1), name)), newTypeOff(reflectType(m$1.typ)), 0, 0));
					i$1 = i$1 + (1) >> 0;
				}
				ut = new uncommonType.ptr(resolveReflectName($clone(newName(internalStr(typ.pkg), "", false, false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), xcount, 0, reflectMethods);
				ut.jsType = typ;
				rt.uncommonType = ut;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref = in$1;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$2 = _i;
					((i$2 < 0 || i$2 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$2] = reflectType(params[i$2]));
					_i++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$1 = out;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$3 = _i$1;
					((i$3 < 0 || i$3 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$3] = reflectType(results[i$3]));
					_i$1++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$14, $parseInt(methods.length));
				_ref$2 = imethods;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$4 = _i$2;
					m$2 = methods[i$4];
					imethod.copy(((i$4 < 0 || i$4 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$4]), new imethod.ptr(resolveReflectName($clone(newMethodName(m$2), name)), newTypeOff(reflectType(m$2.typ))));
					_i$2++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false, false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, $throwNilPointerError, 0, 0, 0, 0));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$15, $parseInt(fields.length));
				_ref$3 = reflectFields;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$5 = _i$3;
					f = fields[i$5];
					structField.copy(((i$5 < 0 || i$5 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$5]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported), !!(f.embedded)), name), reflectType(f.typ), ((i$5 >>> 0))));
					_i$3++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false, false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	uncommonType.ptr.prototype.exportedMethods = function() {
		var t;
		t = this;
		return $subslice(t._methods, 0, t.xcount, t.xcount);
	};
	uncommonType.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.uncommon = function() {
		var obj, t;
		t = this;
		obj = t.uncommonType;
		if (obj === undefined) {
			return ptrType$10.nil;
		}
		return ((obj));
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$18.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$18.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$18.nil).pkgPath;
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$18.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	name.ptr.prototype.embedded = function() {
		var _entry, n;
		n = this;
		return (_entry = $mapIndex(nameMap,ptrType$14.keyFor(n.bytes)), _entry !== undefined ? _entry.v : ptrType$18.nil).embedded;
	};
	name.prototype.embedded = function() { return this.$val.embedded(); };
	newName = function(n, tag, exported, embedded) {
		var _key, b, embedded, exported, n, tag;
		b = $newDataPointer(0, ptrType$14);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$14.keyFor(_key), { k: _key, v: new nameData.ptr(n, tag, exported, embedded, "") });
		return new name.ptr(b);
	};
	newMethodName = function(m) {
		var _key, b, m;
		b = $newDataPointer(0, ptrType$14);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map")).set(ptrType$14.keyFor(_key), { k: _key, v: new nameData.ptr(internalStr(m.name), "", internalStr(m.pkg) === "", false, internalStr(m.pkg)) });
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	resolveReflectName = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$3.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r, $c} = $restore(this, {t, v, fl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$24r = new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
			$s = 10; case 10: return $24r;
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		$s = 12; case 12: return $24r$1;
		/* */ } return; } var $f = {$blk: makeValue, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s};return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var {$24r, _r, _r$1, cap, len, typ, $s, $r, $c} = $restore(this, {typ, len, cap});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var {$24r, _r$1, _r$2, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$24r = _r$2.zero();
			$s = 3; case 3: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$1, _r$2, $s};return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 5; case 5: return $24r;
		/* */ } return; } var $f = {$blk: MakeSlice, $c: true, $r, $24r, _r, _r$1, cap, len, typ, $s};return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, $throwNilPointerError, ptrType$14.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var {$24r, _r, i, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: ValueOf, $c: true, $r, $24r, _r, i, $s};return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var {_i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r, $c} = $restore(this, {in$1, out, variadic});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$16, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$16, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$16), $externalize(jsOut, sliceType$16), $externalize(variadic, $Bool)));
		/* */ } return; } var $f = {$blk: FuncOf, $c: true, $r, _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s};return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var {$24r, _r, typ, $s, $r, $c} = $restore(this, {typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Zero, $c: true, $r, $24r, _r, typ, $s};return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var {_1, _r, bits, f, ptr, t, typ, $s, $r, $c} = $restore(this, {f, bits, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } var $f = {$blk: makeInt, $c: true, $r, _1, _r, bits, f, ptr, t, typ, $s};return $f;
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = jsType(t.Key()).keyFor(kv);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		if (!!!(m)) {
			return 0;
		}
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m.get(k);
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var {_r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r, $c} = $restore(this, {t, m, key, val});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m.set(k, entry);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: mapassign, $c: true, $r, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s};return $f;
	};
	mapdelete = function(t, m, key) {
		var _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		if (!!!(m)) {
			return;
		}
		m.delete(k);
	};
	mapaccess_faststr = function(t, m, key) {
		var key, key$24ptr, m, t, val;
		val = 0;
		val = mapaccess(t, m, ((key$24ptr || (key$24ptr = new ptrType$19(function() { return key; }, function($v) { key = $v; })))));
		return val;
	};
	mapassign_faststr = function(t, m, key, val) {
		var {key, m, t, val, $s, $r, $c} = $restore(this, {t, m, key, val});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		key = [key];
		$r = mapassign(t, m, ((key.$ptr || (key.$ptr = new ptrType$19(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, key)))), val); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: mapassign_faststr, $c: true, $r, key, m, t, val, $s};return $f;
	};
	mapdelete_faststr = function(t, m, key) {
		var key, key$24ptr, m, t;
		mapdelete(t, m, ((key$24ptr || (key$24ptr = new ptrType$19(function() { return key; }, function($v) { key = $v; })))));
	};
	hiter.ptr.prototype.skipUntilValidKey = function() {
		var entry, iter, k;
		iter = this;
		while (true) {
			if (!(iter.i < $parseInt(iter.keys.length))) { break; }
			k = iter.keys[iter.i];
			entry = iter.m.get(k);
			if (!(entry === undefined)) {
				break;
			}
			iter.i = iter.i + (1) >> 0;
		}
	};
	hiter.prototype.skipUntilValidKey = function() { return this.$val.skipUntilValidKey(); };
	mapiterinit = function(t, m, it) {
		var it, keys, keysIter, m, mapObj, t;
		mapObj = m;
		keys = new ($global.Array)();
		if (!(mapObj.keys === undefined)) {
			keysIter = mapObj.keys();
			if (!(mapObj.keys === undefined)) {
				keys = $global.Array.from(keysIter);
			}
		}
		hiter.copy(it, new hiter.ptr(t, mapObj, keys, 0, null));
	};
	mapiterkey = function(it) {
		var {$24r, _r, _r$1, _r$2, it, k, kv, $s, $r, $c} = $restore(this, {it});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		kv = null;
		if (!(it.last === null)) {
			kv = it.last;
		} else {
			it.skipUntilValidKey();
			if (it.i === $parseInt(it.keys.length)) {
				$s = -1; return 0;
			}
			k = it.keys[it.i];
			kv = it.m.get(k);
			it.last = kv;
		}
		_r = it.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.k, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: mapiterkey, $c: true, $r, $24r, _r, _r$1, _r$2, it, k, kv, $s};return $f;
	};
	mapiterelem = function(it) {
		var {$24r, _r, _r$1, _r$2, it, k, kv, $s, $r, $c} = $restore(this, {it});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		kv = null;
		if (!(it.last === null)) {
			kv = it.last;
		} else {
			it.skipUntilValidKey();
			if (it.i === $parseInt(it.keys.length)) {
				$s = -1; return 0;
			}
			k = it.keys[it.i];
			kv = it.m.get(k);
			it.last = kv;
		}
		_r = it.t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = ($newDataPointer(kv.v, _r$2));
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: mapiterelem, $c: true, $r, $24r, _r, _r$1, _r$2, it, k, kv, $s};return $f;
	};
	mapiternext = function(it) {
		var it;
		it.last = null;
		it.i = it.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt(m.size) >> 0;
	};
	cvtDirect = function(v, typ) {
		var {$24r, $24r$1, _1, _2, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r, $c} = $restore(this, {v, typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ if (_1 === (22)) { $s = 8; continue; }
			/* */ if (_1 === (25)) { $s = 9; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24)) || (_1 === (26))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (23)) { */ case 7:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 12; continue;
			/* } else if (_1 === (22)) { */ case 8:
					_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_2 = _r$3;
					/* */ if (_2 === (25)) { $s = 16; continue; }
					/* */ if (_2 === (17)) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (_2 === (25)) { */ case 16:
						_r$4 = typ.Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 20; continue; }
						/* */ $s = 21; continue;
						/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 20:
							val = srcVal;
							/* break; */ $s = 13; continue;
						/* } */ case 21:
						val = new (jsType(typ))();
						_arg = val;
						_arg$1 = srcVal;
						_r$5 = typ.Elem(); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_arg$2 = _r$5;
						$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 19; continue;
					/* } else if (_2 === (17)) { */ case 17:
						val = srcVal;
						$s = 19; continue;
					/* } else { */ case 18:
						val = new (jsType(typ))(srcVal.$get, srcVal.$set);
					/* } */ case 19:
				case 13:
				$s = 12; continue;
			/* } else if (_1 === (25)) { */ case 9:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 12; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24)) || (_1 === (26))) { */ case 10:
				val = v.ptr;
				$s = 12; continue;
			/* } else { */ case 11:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 12:
		case 5:
		_r$6 = typ.common(); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$24r$1 = new Value.ptr(_r$6, (val), (((new flag(v.flag).ro() | ((v.flag & 128) >>> 0)) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		$s = 27; case 27: return $24r$1;
		/* */ } return; } var $f = {$blk: cvtDirect, $c: true, $r, $24r, $24r$1, _1, _2, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s};return $f;
	};
	cvtSliceArrayPtr = function(v, t) {
		var {$24r, _r, _r$1, _r$2, alen, array, slen, slice, t, v, $s, $r, $c} = $restore(this, {v, t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		slice = $clone(v, Value).object();
		slen = $parseInt(slice.$length) >> 0;
		_r = t.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Len(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		alen = _r$1;
		if (alen > slen) {
			$panic(new $String("reflect: cannot convert slice with length " + itoa.Itoa(slen) + " to pointer to array with length " + itoa.Itoa(alen)));
		}
		array = $sliceToGoArray(slice, jsType(t));
		_r$2 = t.common(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r$2, (array), (((v.flag & ~415) >>> 0) | 22) >>> 0);
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: cvtSliceArrayPtr, $c: true, $r, $24r, _r, _r$1, _r$2, alen, array, slen, slice, t, v, $s};return $f;
	};
	methodReceiver = function(op, v, i) {
		var _, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x;
		_ = ptrType$1.nil;
		t = ptrType$20.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (tt.rtype.typeOff(m.typ).kindType);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ms = v.typ.exportedMethods();
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = (v.typ.typeOff(m$1.mtyp).kindType);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_, t, fn];
	};
	valueInterface = function(v, safe) {
		var {_r, cv, safe, v, $s, $r, $c} = $restore(this, {v, safe});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			if (!((((v.flag & 128) >>> 0) === 0)) && ($clone(v, Value).Kind() === 25)) {
				cv = jsType(v.typ).zero();
				copyStruct(cv, $clone(v, Value).object(), v.typ);
				$s = -1; return ((new (jsType(v.typ))(cv)));
			}
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } var $f = {$blk: valueInterface, $c: true, $r, _r, cv, safe, v, $s};return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	makeMethodValue = function(op, v) {
		var {$24r, _r, _tuple, fn, fv, op, rcvr, v, $s, $r, $c} = $restore(this, {op, v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$16)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = new Value.ptr(_r, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: makeMethodValue, $c: true, $r, $24r, _r, _tuple, fn, fv, op, rcvr, v, $s};return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var {$24r, _1, _r, _r$1, i, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 8:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 9; continue; }
					_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!_r$1) { */ case 10:
						$s = -1; return false;
					/* } */ case 11:
					i = i + (1) >> 0;
				$s = 8; continue;
				case 9:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Comparable, $c: true, $r, $24r, _1, _r, _r$1, i, t, $s};return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var {_i, _i$1, _r, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		methods = t.exportedMethods();
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$17, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$17, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		mt = _r;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$16)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: rtype.ptr.prototype.Method, $c: true, $r, _i, _i$1, _r, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s};return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var {_r, _r$1, _r$2, context, dst, fl, target, v, x, $s, $r, $c} = $restore(this, {context, dst, target});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				if (dst.NumMethod() === 0) {
					(target).$set(x);
				} else {
					ifaceE2I(dst, x, target);
				}
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.assignTo, $c: true, $r, _r, _r$1, _r$2, context, dst, fl, target, v, x, $s};return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.call = function(op, in$1) {
		var {$24r, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r, $c} = $restore(this, {op, in$1});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$20.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = (v.typ.kindType);
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.rtype.NumIn();
		if (isSlice) {
			if (!t.rtype.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.rtype.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.rtype.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type();
			_tmp$1 = t.rtype.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		/* */ if (!isSlice && t.rtype.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.rtype.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.rtype.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.rtype.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				xt$1 = $clone(x$2, Value).Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = $clone(slice, Value).Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = $clone(_r$8, Value).Set($clone(x$2, Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			$s = 12; continue;
			case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$8, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.rtype.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.rtype.NumOut();
		argsArray = new ($global.Array)(t.rtype.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.rtype.In(i$2);
			_r$9 = t.rtype.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $clone(_r$10, Value).object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		$s = 21; continue;
		case 22:
		_r$13 = callHelper(new sliceType$5([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$8.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.rtype.Out(0), wrapJsObject(t.rtype.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$24r = new sliceType$8([$clone(_r$14, Value)]);
				$s = 34; case 34: return $24r;
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$8, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 35:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 36; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.rtype.Out(i$3), wrapJsObject(t.rtype.Out(i$3), results[i$3]), 0); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				$s = 35; continue;
				case 36:
				$s = -1; return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$8.nil;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.call, $c: true, $r, $24r, _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s};return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var {$24r, _1, _r, _r$1, k, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if ((_1 === (18)) || (_1 === (23))) { $s = 3; continue; }
			/* */ if (_1 === (22)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				$s = -1; return v.typ.Len();
			/* } else if ((_1 === (18)) || (_1 === (23))) { */ case 3:
				$s = -1; return $parseInt($clone(v, Value).object().$capacity) >> 0;
			/* } else if (_1 === (22)) { */ case 4:
				_r = v.typ.Elem().Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === 17) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_r === 17) { */ case 6:
					_r$1 = v.typ.Elem().Len(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$24r = _r$1;
					$s = 10; case 10: return $24r;
				/* } */ case 7:
				$panic(new $String("reflect: call of reflect.Value.Cap on ptr to non-array Value"));
			/* } */ case 5:
		case 1:
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Cap, $c: true, $r, $24r, _1, _r, _r$1, k, v, $s};return $f;
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var {$24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 7; case 7: return $24r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Elem, $c: true, $r, $24r, _1, _r, fl, k, tt, typ, v, val, val$1, $s};return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var {$24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.embedded()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				$s = 5; continue;
				case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 16; case 16: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Field, $c: true, $r, $24r, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s};return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var {$24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r, $c} = $restore(this, {i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 10; case 10: return $24r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 11:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 12:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$24r$1 = _r$1;
				$s = 14; case 14: return $24r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$14(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Index, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s};return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else if (_1 === (26)) {
			return $clone(v, Value).object() === 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var {$24r, _1, _r, _r$1, k, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if ((_1 === (17)) || (_1 === (24))) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (18)) { $s = 4; continue; }
			/* */ if (_1 === (21)) { $s = 5; continue; }
			/* */ if (_1 === (22)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (17)) || (_1 === (24))) { */ case 2:
				$s = -1; return $parseInt($clone(v, Value).object().length);
			/* } else if (_1 === (23)) { */ case 3:
				$s = -1; return $parseInt($clone(v, Value).object().$length) >> 0;
			/* } else if (_1 === (18)) { */ case 4:
				$s = -1; return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
			/* } else if (_1 === (21)) { */ case 5:
				$s = -1; return $parseInt($clone(v, Value).object().size) >> 0;
			/* } else if (_1 === (22)) { */ case 6:
				_r = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === 17) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_r === 17) { */ case 9:
					_r$1 = v.typ.Elem().Len(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$24r = _r$1;
					$s = 13; case 13: return $24r;
				/* } */ case 10:
				$panic(new $String("reflect: call of reflect.Value.Len on ptr to non-array Value"));
				$s = 8; continue;
			/* } else { */ case 7:
				$panic(new ValueError.ptr("reflect.Value.Len", k));
			/* } */ case 8:
		case 1:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Len, $c: true, $r, $24r, _1, _r, _r$1, k, v, $s};return $f;
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var {_1, _r, _r$1, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if ((_1 === (17)) || (_1 === (25))) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((_1 === (17)) || (_1 === (25))) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 8; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 8; continue;
				/* } else { */ case 7:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 8:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Set, $c: true, $r, _1, _r, _r$1, v, x, $s};return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.bytesSlow = function() {
		var {_1, _r, _r$1, v, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
			_1 = new flag(v.flag).kind();
			/* */ if (_1 === (23)) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (23)) { */ case 2:
				_r = v.typ.Elem().Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!((_r === 8))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((_r === 8))) { */ case 5:
					$panic(new $String("reflect.Value.Bytes of non-byte slice"));
				/* } */ case 6:
				$s = -1; return (v.ptr).$get();
			/* } else if (_1 === (17)) { */ case 3:
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!((_r$1 === 8))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!((_r$1 === 8))) { */ case 8:
					$panic(new $String("reflect.Value.Bytes of non-byte array"));
				/* } */ case 9:
				if (!$clone(v, Value).CanAddr()) {
					$panic(new $String("reflect.Value.Bytes of unaddressable byte array"));
				}
				$s = -1; return $assertType($internalize(v.ptr, $emptyInterface), sliceType$4);
			/* } */ case 4:
		case 1:
		$panic(new ValueError.ptr("reflect.Value.Bytes", new flag(v.flag).kind()));
		$s = -1; return sliceType$4.nil;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.bytesSlow, $c: true, $r, _1, _r, _r$1, v, $s};return $f;
	};
	Value.prototype.bytesSlow = function() { return this.$val.bytesSlow(); };
	Value.ptr.prototype.SetBytes = function(x) {
		var {_r, _r$1, _v, slice, typedSlice, v, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.SetBytes, $c: true, $r, _r, _r$1, _v, slice, typedSlice, v, x, $s};return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var {$24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r, $c} = $restore(this, {i, j});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 8; case 8: return $24r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Slice, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s};return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var {$24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r, $c} = $restore(this, {i, j, k});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Value.ptr.prototype.Slice3, $c: true, $r, $24r, _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s};return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(ch, nb, val) {
		var {_r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r, $c} = $restore(this, {ch, nb, val});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$18([new sliceType$16([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$16([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } var $f = {$blk: chanrecv, $c: true, $r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s};return $f;
	};
	chansend = function(ch, val, nb) {
		var {_r, ch, comms, nb, selectRes, val, $s, $r, $c} = $restore(this, {ch, val, nb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		comms = new sliceType$18([new sliceType$16([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$16([]));
		}
		_r = selectHelper(new sliceType$5([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: chansend, $c: true, $r, _r, ch, comms, nb, selectRes, val, $s};return $f;
	};
	stringsLastIndex = function(s, c) {
		var c, i, s;
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === c) {
				return i;
			}
			i = i - (1) >> 0;
		}
		return -1;
	};
	stringsHasPrefix = function(s, prefix) {
		var prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	valueMethodName = function() {
		var _tuple, frame, frames, idx, methodName, more, n, name$1, pc;
		pc = arrayType$7.zero();
		n = runtime.Callers(1, new sliceType$20(pc));
		frames = runtime.CallersFrames($subslice(new sliceType$20(pc), 0, n));
		frame = new runtime.Frame.ptr(0, ptrType$6.nil, "", "", 0, 0);
		more = true;
		while (true) {
			if (!(more)) { break; }
			_tuple = frames.Next();
			runtime.Frame.copy(frame, _tuple[0]);
			more = _tuple[1];
			name$1 = frame.Function;
			if (stringsHasPrefix(name$1, "Object.$packages.reflect.")) {
				idx = stringsLastIndex(name$1, 46);
				if (idx >= 0) {
					methodName = $substring(name$1, (idx + 1 >> 0));
					if (methodName.length > 0 && 65 <= methodName.charCodeAt(0) && methodName.charCodeAt(0) <= 90) {
						return "reflect.Value." + methodName;
					}
				}
			}
		}
		return "unknown method";
	};
	verifyNotInHeapPtr = function(p) {
		var p;
		return true;
	};
	Value.methods = [{prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "panicNotBool", name: "panicNotBool", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$4], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$10], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "capNonSlice", name: "capNonSlice", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "CanComplex", name: "CanComplex", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$7], [Value], false)}, {prop: "FieldByIndexErr", name: "FieldByIndexErr", pkg: "", typ: $funcType([sliceType$7], [Value, $error], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "CanFloat", name: "CanFloat", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "CanInt", name: "CanInt", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "lenNonSlice", name: "lenNonSlice", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "SetIterKey", name: "SetIterKey", pkg: "", typ: $funcType([ptrType$23], [], false)}, {prop: "SetIterValue", name: "SetIterValue", pkg: "", typ: $funcType([ptrType$23], [], false)}, {prop: "MapRange", name: "MapRange", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$10], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "stringNonString", name: "stringNonString", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "typeSlow", name: "typeSlow", pkg: "reflect", typ: $funcType([], [Type], false)}, {prop: "CanUint", name: "CanUint", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "UnsafePointer", name: "UnsafePointer", pkg: "", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}, {prop: "CanConvert", name: "CanConvert", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$8], [sliceType$8], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$8], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "bytesSlow", name: "bytesSlow", pkg: "reflect", typ: $funcType([], [sliceType$4], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$4], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "reflect", typ: $funcType([], [flag], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeExportedSlow", name: "mustBeExportedSlow", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignableSlow", name: "mustBeAssignableSlow", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "panicNotMap", name: "panicNotMap", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$24.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([Value], [], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$11], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hasName", name: "hasName", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$7], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "gcSlice", name: "gcSlice", pkg: "reflect", typ: $funcType([$Uintptr, $Uintptr], [sliceType$4], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$10], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$26.methods = [{prop: "embedded", name: "embedded", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
	ptrType$13.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$7], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	Method.methods = [{prop: "IsExported", name: "IsExported", pkg: "", typ: $funcType([], [$Bool], false)}];
	StructField.methods = [{prop: "IsExported", name: "IsExported", pkg: "", typ: $funcType([], [$Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	ptrType$10.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$11], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$11], false)}];
	ptrType$20.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int, $String], [ptrType$14], false)}, {prop: "hasTag", name: "hasTag", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "readVarint", name: "readVarint", pkg: "reflect", typ: $funcType([$Int], [$Int, $Int], false)}, {prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "embedded", name: "embedded", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "setPkgPath", name: "setPkgPath", pkg: "reflect", typ: $funcType([$String], [], false)}];
	ptrType$27.methods = [{prop: "initialized", name: "initialized", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "skipUntilValidKey", name: "skipUntilValidKey", pkg: "reflect", typ: $funcType([], [], false)}];
	Value.init("reflect", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", embedded: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", embedded: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", embedded: false, exported: true, typ: Kind, tag: ""}]);
	MapIter.init("reflect", [{prop: "m", name: "m", embedded: false, exported: false, typ: Value, tag: ""}, {prop: "hiter", name: "hiter", embedded: false, exported: false, typ: hiter, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$7], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$10], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", embedded: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", embedded: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "equal", name: "equal", embedded: false, exported: false, typ: funcType$4, tag: ""}, {prop: "gcdata", name: "gcdata", embedded: false, exported: false, typ: ptrType$14, tag: ""}, {prop: "str", name: "str", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", embedded: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", embedded: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", embedded: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", embedded: false, exported: false, typ: sliceType$14, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "key", name: "key", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hasher", name: "hasher", embedded: false, exported: false, typ: funcType$5, tag: ""}, {prop: "keysize", name: "keysize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "flags", name: "flags", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "elem", name: "elem", embedded: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", embedded: false, exported: false, typ: sliceType$15, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", embedded: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", embedded: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", embedded: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: sliceType$7, tag: ""}, {prop: "Anonymous", name: "Anonymous", embedded: false, exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", embedded: false, exported: false, typ: ptrType$13, tag: ""}, {prop: "index", name: "index", embedded: false, exported: false, typ: sliceType$7, tag: ""}]);
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "xcount", name: "xcount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", embedded: false, exported: false, typ: sliceType$11, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "rtype", embedded: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", embedded: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", embedded: false, exported: false, typ: ptrType$14, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "embedded", name: "embedded", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "pkgPath", name: "pkgPath", embedded: false, exported: false, typ: $String, tag: ""}]);
	hiter.init("reflect", [{prop: "t", name: "t", embedded: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "last", name: "last", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = abi.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = goarch.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = itoa.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unsafeheader.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		kindNames = new sliceType$3(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		initialized = false;
		nameMap = new $global.Map();
		bytesType = $assertType(TypeOf((sliceType$4.nil)), ptrType$1);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		stringType = $assertType(TypeOf(new $String("")), ptrType$1);
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		$r = init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflectlite, bits, xorshift, IntSlice, ptrType, ptrType$1, sliceType, insertionSort, siftDown, heapSort, pdqsort, partition, partitionEqual, partialInsertionSort, breakPatterns, choosePivot, order2, median, medianAdjacent, reverseRange, swapRange, stable, symMerge, rotate, Sort, nextPowerOfTwo, Ints, Stable, Search, SearchInts;
	reflectlite = $packages["internal/reflectlite"];
	bits = $packages["math/bits"];
	xorshift = $pkg.xorshift = $newType(8, $kindUint64, "sort.xorshift", true, "sort", false, null);
	IntSlice = $pkg.IntSlice = $newType(12, $kindSlice, "sort.IntSlice", true, "sort", true, null);
	ptrType = $ptrType(xorshift);
	ptrType$1 = $ptrType($Int);
	sliceType = $sliceType($Int);
	insertionSort = function(data, a, b) {
		var {_r, _v, a, b, data, i, j, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			$s = 3; continue;
			case 4:
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: insertionSort, $c: true, $r, _r, _v, a, b, data, i, j, $s};return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var {_r, _r$1, _v, child, data, first, hi, lo, root, $s, $r, $c} = $restore(this, {data, lo, hi, first});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: siftDown, $c: true, $r, _r, _r$1, _v, child, data, first, hi, lo, root, $s};return $f;
	};
	heapSort = function(data, a, b) {
		var {_q, a, b, data, first, hi, i, i$1, lo, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		$s = 1; continue;
		case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		$s = 4; continue;
		case 5:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: heapSort, $c: true, $r, _q, a, b, data, first, hi, i, i$1, lo, $s};return $f;
	};
	pdqsort = function(data, a, b, limit) {
		var {_q, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _v, a, alreadyPartitioned, b, balanceThreshold, data, hint, leftLen, length, limit, mid, mid$1, pivot, rightLen, wasBalanced, wasPartitioned, $s, $r, $c} = $restore(this, {data, a, b, limit});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		wasBalanced = true;
		wasPartitioned = true;
		/* while (true) { */ case 1:
			length = b - a >> 0;
			/* */ if (length <= 12) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (length <= 12) { */ case 3:
				$r = insertionSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			/* */ if (limit === 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (limit === 0) { */ case 6:
				$r = heapSort(data, a, b); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 7:
			/* */ if (!wasBalanced) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!wasBalanced) { */ case 9:
				$r = breakPatterns(data, a, b); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				limit = limit - (1) >> 0;
			/* } */ case 10:
			_r = choosePivot(data, a, b); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			pivot = _tuple[0];
			hint = _tuple[1];
			/* */ if (hint === 2) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (hint === 2) { */ case 13:
				$r = reverseRange(data, a, b); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				pivot = ((b - 1 >> 0)) - ((pivot - a >> 0)) >> 0;
				hint = 1;
			/* } */ case 14:
			/* */ if (wasBalanced && wasPartitioned && (hint === 1)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (wasBalanced && wasPartitioned && (hint === 1)) { */ case 16:
				_r$1 = partialInsertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (_r$1) { */ case 18:
					$s = -1; return;
				/* } */ case 19:
			/* } */ case 17:
			if (!(a > 0)) { _v = false; $s = 23; continue s; }
			_r$2 = data.Less(a - 1 >> 0, pivot); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = !_r$2; case 23:
			/* */ if (_v) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (_v) { */ case 21:
				_r$3 = partitionEqual(data, a, b, pivot); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				mid = _r$3;
				a = mid;
				/* continue; */ $s = 1; continue;
			/* } */ case 22:
			_r$4 = partition(data, a, b, pivot); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			mid$1 = _tuple$1[0];
			alreadyPartitioned = _tuple$1[1];
			wasPartitioned = alreadyPartitioned;
			_tmp = mid$1 - a >> 0;
			_tmp$1 = b - mid$1 >> 0;
			leftLen = _tmp;
			rightLen = _tmp$1;
			balanceThreshold = (_q = length / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			/* */ if (leftLen < rightLen) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (leftLen < rightLen) { */ case 27:
				wasBalanced = leftLen >= balanceThreshold;
				$r = pdqsort(data, a, mid$1, limit); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mid$1 + 1 >> 0;
				$s = 29; continue;
			/* } else { */ case 28:
				wasBalanced = rightLen >= balanceThreshold;
				$r = pdqsort(data, mid$1 + 1 >> 0, b, limit); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mid$1;
			/* } */ case 29:
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pdqsort, $c: true, $r, _q, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _v, a, alreadyPartitioned, b, balanceThreshold, data, hint, leftLen, length, limit, mid, mid$1, pivot, rightLen, wasBalanced, wasPartitioned, $s};return $f;
	};
	partition = function(data, a, b, pivot) {
		var {_r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _v, _v$1, _v$2, _v$3, a, alreadyPartitioned, b, data, i, j, newpivot, pivot, $s, $r, $c} = $restore(this, {data, a, b, pivot});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		newpivot = 0;
		alreadyPartitioned = false;
		$r = data.Swap(a, pivot); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = a + 1 >> 0;
		_tmp$1 = b - 1 >> 0;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 2:
			if (!(i <= j)) { _v = false; $s = 4; continue s; }
			_r = data.Less(i, a); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 4:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 3; continue; }
			i = i + (1) >> 0;
		$s = 2; continue;
		case 3:
		/* while (true) { */ case 6:
			if (!(i <= j)) { _v$1 = false; $s = 8; continue s; }
			_r$1 = data.Less(j, a); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v$1 = !_r$1; case 8:
			/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 7; continue; }
			j = j - (1) >> 0;
		$s = 6; continue;
		case 7:
		/* */ if (i > j) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (i > j) { */ case 10:
			$r = data.Swap(j, a); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = j;
			_tmp$3 = true;
			newpivot = _tmp$2;
			alreadyPartitioned = _tmp$3;
			$s = -1; return [newpivot, alreadyPartitioned];
		/* } */ case 11:
		$r = data.Swap(i, j); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = i + (1) >> 0;
		j = j - (1) >> 0;
		/* while (true) { */ case 14:
			/* while (true) { */ case 16:
				if (!(i <= j)) { _v$2 = false; $s = 18; continue s; }
				_r$2 = data.Less(i, a); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 18:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 17; continue; }
				i = i + (1) >> 0;
			$s = 16; continue;
			case 17:
			/* while (true) { */ case 20:
				if (!(i <= j)) { _v$3 = false; $s = 22; continue s; }
				_r$3 = data.Less(j, a); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v$3 = !_r$3; case 22:
				/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 21; continue; }
				j = j - (1) >> 0;
			$s = 20; continue;
			case 21:
			if (i > j) {
				/* break; */ $s = 15; continue;
			}
			$r = data.Swap(i, j); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 14; continue;
		case 15:
		$r = data.Swap(j, a); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = j;
		_tmp$5 = false;
		newpivot = _tmp$4;
		alreadyPartitioned = _tmp$5;
		$s = -1; return [newpivot, alreadyPartitioned];
		/* */ } return; } var $f = {$blk: partition, $c: true, $r, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _v, _v$1, _v$2, _v$3, a, alreadyPartitioned, b, data, i, j, newpivot, pivot, $s};return $f;
	};
	partitionEqual = function(data, a, b, pivot) {
		var {_r, _r$1, _tmp, _tmp$1, _v, _v$1, a, b, data, i, j, newpivot, pivot, $s, $r, $c} = $restore(this, {data, a, b, pivot});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		newpivot = 0;
		$r = data.Swap(a, pivot); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp = a + 1 >> 0;
		_tmp$1 = b - 1 >> 0;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 2:
			/* while (true) { */ case 4:
				if (!(i <= j)) { _v = false; $s = 6; continue s; }
				_r = data.Less(a, i); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = !_r; case 6:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 5; continue; }
				i = i + (1) >> 0;
			$s = 4; continue;
			case 5:
			/* while (true) { */ case 8:
				if (!(i <= j)) { _v$1 = false; $s = 10; continue s; }
				_r$1 = data.Less(a, j); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 10:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 9; continue; }
				j = j - (1) >> 0;
			$s = 8; continue;
			case 9:
			if (i > j) {
				/* break; */ $s = 3; continue;
			}
			$r = data.Swap(i, j); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 2; continue;
		case 3:
		newpivot = i;
		$s = -1; return newpivot;
		/* */ } return; } var $f = {$blk: partitionEqual, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _v, _v$1, a, b, data, i, j, newpivot, pivot, $s};return $f;
	};
	partialInsertionSort = function(data, a, b) {
		var {_r, _r$1, _r$2, _v, a, b, data, i, j, j$1, j$2, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		j = 0;
		/* while (true) { */ case 1:
			/* if (!(j < 5)) { break; } */ if(!(j < 5)) { $s = 2; continue; }
			/* while (true) { */ case 3:
				if (!(i < b)) { _v = false; $s = 5; continue s; }
				_r = data.Less(i, i - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = !_r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				i = i + (1) >> 0;
			$s = 3; continue;
			case 4:
			if (i === b) {
				$s = -1; return true;
			}
			if ((b - a >> 0) < 50) {
				$s = -1; return false;
			}
			$r = data.Swap(i, i - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((i - a >> 0) >= 2) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((i - a >> 0) >= 2) { */ case 8:
				j$1 = i - 1 >> 0;
				/* while (true) { */ case 10:
					/* if (!(j$1 >= 1)) { break; } */ if(!(j$1 >= 1)) { $s = 11; continue; }
					_r$1 = data.Less(j$1, j$1 - 1 >> 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!_r$1) { */ case 12:
						/* break; */ $s = 11; continue;
					/* } */ case 13:
					$r = data.Swap(j$1, j$1 - 1 >> 0); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					j$1 = j$1 - (1) >> 0;
				$s = 10; continue;
				case 11:
			/* } */ case 9:
			/* */ if ((b - i >> 0) >= 2) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if ((b - i >> 0) >= 2) { */ case 16:
				j$2 = i + 1 >> 0;
				/* while (true) { */ case 18:
					/* if (!(j$2 < b)) { break; } */ if(!(j$2 < b)) { $s = 19; continue; }
					_r$2 = data.Less(j$2, j$2 - 1 >> 0); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$2) { */ case 20:
						/* break; */ $s = 19; continue;
					/* } */ case 21:
					$r = data.Swap(j$2, j$2 - 1 >> 0); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					j$2 = j$2 + (1) >> 0;
				$s = 18; continue;
				case 19:
			/* } */ case 17:
			j = j + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: partialInsertionSort, $c: true, $r, _r, _r$1, _r$2, _v, a, b, data, i, j, j$1, j$2, $s};return $f;
	};
	breakPatterns = function(data, a, b) {
		var {_q, _q$1, a, b, data, idx, length, modulus, other, random, random$24ptr, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		length = b - a >> 0;
		/* */ if (length >= 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (length >= 8) { */ case 1:
			random = (new xorshift(0, length));
			modulus = nextPowerOfTwo(length);
			idx = (a + ($imul(((_q = length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) - 1 >> 0;
			/* while (true) { */ case 3:
				/* if (!(idx <= ((a + ($imul(((_q$1 = length / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) + 1 >> 0))) { break; } */ if(!(idx <= ((a + ($imul(((_q$1 = length / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))), 2)) >> 0) + 1 >> 0))) { $s = 4; continue; }
				other = (((((((random$24ptr || (random$24ptr = new ptrType(function() { return random; }, function($v) { random = $v; }))).Next().$low >>> 0)) & ((modulus - 1 >>> 0))) >>> 0) >> 0));
				if (other >= length) {
					other = other - (length) >> 0;
				}
				$r = data.Swap(idx, a + other >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				idx = idx + (1) >> 0;
			$s = 3; continue;
			case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: breakPatterns, $c: true, $r, _q, _q$1, a, b, data, idx, length, modulus, other, random, random$24ptr, $s};return $f;
	};
	choosePivot = function(data, a, b) {
		var {_1, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, data, hint, i, j, k, l, pivot, swaps, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		swaps = [swaps];
		pivot = 0;
		hint = 0;
		l = b - a >> 0;
		swaps[0] = 0;
		i = a + ($imul((_q = l / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 1)) >> 0;
		j = a + ($imul((_q$1 = l / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2)) >> 0;
		k = a + ($imul((_q$2 = l / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")), 3)) >> 0;
		/* */ if (l >= 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l >= 8) { */ case 1:
			/* */ if (l >= 50) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (l >= 50) { */ case 3:
				_r = medianAdjacent(data, i, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				i = _r;
				_r$1 = medianAdjacent(data, j, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				j = _r$1;
				_r$2 = medianAdjacent(data, k, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				k = _r$2;
			/* } */ case 4:
			_r$3 = median(data, i, j, k, (swaps.$ptr || (swaps.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, swaps)))); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			j = _r$3;
		/* } */ case 2:
		_1 = swaps[0];
		if (_1 === (0)) {
			_tmp = j;
			_tmp$1 = 1;
			pivot = _tmp;
			hint = _tmp$1;
			$s = -1; return [pivot, hint];
		} else if (_1 === (12)) {
			_tmp$2 = j;
			_tmp$3 = 2;
			pivot = _tmp$2;
			hint = _tmp$3;
			$s = -1; return [pivot, hint];
		} else {
			_tmp$4 = j;
			_tmp$5 = 0;
			pivot = _tmp$4;
			hint = _tmp$5;
			$s = -1; return [pivot, hint];
		}
		$s = -1; return [pivot, hint];
		/* */ } return; } var $f = {$blk: choosePivot, $c: true, $r, _1, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, data, hint, i, j, k, l, pivot, swaps, $s};return $f;
	};
	order2 = function(data, a, b, swaps) {
		var {_r, a, b, data, swaps, $s, $r, $c} = $restore(this, {data, a, b, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = data.Less(b, a); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			swaps.$set(swaps.$get() + (1) >> 0);
			$s = -1; return [b, a];
		/* } */ case 2:
		$s = -1; return [a, b];
		/* */ } return; } var $f = {$blk: order2, $c: true, $r, _r, a, b, data, swaps, $s};return $f;
	};
	median = function(data, a, b, c, swaps) {
		var {_r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, a, b, c, data, swaps, $s, $r, $c} = $restore(this, {data, a, b, c, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = order2(data, a, b, swaps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		a = _tuple[0];
		b = _tuple[1];
		_r$1 = order2(data, b, c, swaps); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		b = _tuple$1[0];
		c = _tuple$1[1];
		_r$2 = order2(data, a, b, swaps); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		a = _tuple$2[0];
		b = _tuple$2[1];
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: median, $c: true, $r, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, a, b, c, data, swaps, $s};return $f;
	};
	medianAdjacent = function(data, a, swaps) {
		var {$24r, _r, a, data, swaps, $s, $r, $c} = $restore(this, {data, a, swaps});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = median(data, a - 1 >> 0, a, a + 1 >> 0, swaps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: medianAdjacent, $c: true, $r, $24r, _r, a, data, swaps, $s};return $f;
	};
	reverseRange = function(data, a, b) {
		var {a, b, data, i, j, $s, $r, $c} = $restore(this, {data, a, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = a;
		j = b - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			$r = data.Swap(i, j); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
			j = j - (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: reverseRange, $c: true, $r, a, b, data, i, j, $s};return $f;
	};
	swapRange = function(data, a, b, n) {
		var {a, b, data, i, n, $s, $r, $c} = $restore(this, {data, a, b, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			$r = data.Swap(a + i >> 0, b + i >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: swapRange, $c: true, $r, a, b, data, i, n, $s};return $f;
	};
	stable = function(data, n) {
		var {_tmp, _tmp$1, _tmp$2, _tmp$3, a, b, blockSize, data, m, n, $s, $r, $c} = $restore(this, {data, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		blockSize = 20;
		_tmp = 0;
		_tmp$1 = blockSize;
		a = _tmp;
		b = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(b <= n)) { break; } */ if(!(b <= n)) { $s = 2; continue; }
			$r = insertionSort(data, a, b); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			a = b;
			b = b + (blockSize) >> 0;
		$s = 1; continue;
		case 2:
		$r = insertionSort(data, a, n); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 5:
			/* if (!(blockSize < n)) { break; } */ if(!(blockSize < n)) { $s = 6; continue; }
			_tmp$2 = 0;
			_tmp$3 = $imul(2, blockSize);
			a = _tmp$2;
			b = _tmp$3;
			/* while (true) { */ case 7:
				/* if (!(b <= n)) { break; } */ if(!(b <= n)) { $s = 8; continue; }
				$r = symMerge(data, a, a + blockSize >> 0, b); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = b;
				b = b + (($imul(2, blockSize))) >> 0;
			$s = 7; continue;
			case 8:
			m = a + blockSize >> 0;
			/* */ if (m < n) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (m < n) { */ case 10:
				$r = symMerge(data, a, m, n); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
			blockSize = $imul(blockSize, (2));
		$s = 5; continue;
		case 6:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: stable, $c: true, $r, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, blockSize, data, m, n, $s};return $f;
	};
	symMerge = function(data, a, m, b) {
		var {_r, _r$1, _r$2, _tmp, _tmp$1, a, b, c, data, end, h, h$1, i, i$1, j, j$1, k, k$1, m, mid, n, p, r, start, $s, $r, $c} = $restore(this, {data, a, m, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if ((m - a >> 0) === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((m - a >> 0) === 1) { */ case 1:
			i = m;
			j = b;
			/* while (true) { */ case 3:
				/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 4; continue; }
				h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
				_r = data.Less(h, a); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_r) { */ case 5:
					i = h + 1 >> 0;
					$s = 7; continue;
				/* } else { */ case 6:
					j = h;
				/* } */ case 7:
			$s = 3; continue;
			case 4:
			k = a;
			/* while (true) { */ case 9:
				/* if (!(k < (i - 1 >> 0))) { break; } */ if(!(k < (i - 1 >> 0))) { $s = 10; continue; }
				$r = data.Swap(k, k + 1 >> 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				k = k + (1) >> 0;
			$s = 9; continue;
			case 10:
			$s = -1; return;
		/* } */ case 2:
		/* */ if ((b - m >> 0) === 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - m >> 0) === 1) { */ case 12:
			i$1 = a;
			j$1 = m;
			/* while (true) { */ case 14:
				/* if (!(i$1 < j$1)) { break; } */ if(!(i$1 < j$1)) { $s = 15; continue; }
				h$1 = ((((((i$1 + j$1 >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
				_r$1 = data.Less(m, h$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (!_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!_r$1) { */ case 16:
					i$1 = h$1 + 1 >> 0;
					$s = 18; continue;
				/* } else { */ case 17:
					j$1 = h$1;
				/* } */ case 18:
			$s = 14; continue;
			case 15:
			k$1 = m;
			/* while (true) { */ case 20:
				/* if (!(k$1 > i$1)) { break; } */ if(!(k$1 > i$1)) { $s = 21; continue; }
				$r = data.Swap(k$1, k$1 - 1 >> 0); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				k$1 = k$1 - (1) >> 0;
			$s = 20; continue;
			case 21:
			$s = -1; return;
		/* } */ case 13:
		mid = ((((((a + b >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		n = mid + m >> 0;
		_tmp = 0;
		_tmp$1 = 0;
		start = _tmp;
		r = _tmp$1;
		if (m > mid) {
			start = n - b >> 0;
			r = mid;
		} else {
			start = a;
			r = m;
		}
		p = n - 1 >> 0;
		/* while (true) { */ case 23:
			/* if (!(start < r)) { break; } */ if(!(start < r)) { $s = 24; continue; }
			c = ((((((start + r >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			_r$2 = data.Less(p - c >> 0, c); /* */ $s = 28; case 28: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (!_r$2) { */ case 25:
				start = c + 1 >> 0;
				$s = 27; continue;
			/* } else { */ case 26:
				r = c;
			/* } */ case 27:
		$s = 23; continue;
		case 24:
		end = n - start >> 0;
		/* */ if (start < m && m < end) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (start < m && m < end) { */ case 29:
			$r = rotate(data, start, m, end); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 30:
		/* */ if (a < start && start < mid) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if (a < start && start < mid) { */ case 32:
			$r = symMerge(data, a, start, mid); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 33:
		/* */ if (mid < end && end < b) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (mid < end && end < b) { */ case 35:
			$r = symMerge(data, mid, end, b); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: symMerge, $c: true, $r, _r, _r$1, _r$2, _tmp, _tmp$1, a, b, c, data, end, h, h$1, i, i$1, j, j$1, k, k$1, m, mid, n, p, r, start, $s};return $f;
	};
	rotate = function(data, a, m, b) {
		var {a, b, data, i, j, m, $s, $r, $c} = $restore(this, {data, a, m, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = m - a >> 0;
		j = b - m >> 0;
		/* while (true) { */ case 1:
			/* if (!(!((i === j)))) { break; } */ if(!(!((i === j)))) { $s = 2; continue; }
			/* */ if (i > j) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > j) { */ case 3:
				$r = swapRange(data, m - i >> 0, m, j); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i - (j) >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				$r = swapRange(data, m - i >> 0, (m + j >> 0) - i >> 0, i); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (i) >> 0;
			/* } */ case 5:
		$s = 1; continue;
		case 2:
		$r = swapRange(data, m - i >> 0, m, i); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: rotate, $c: true, $r, a, b, data, i, j, m, $s};return $f;
	};
	Sort = function(data) {
		var {_r, data, limit, n, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		if (n <= 1) {
			$s = -1; return;
		}
		limit = bits.Len(((n >>> 0)));
		$r = pdqsort(data, 0, n, limit); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Sort, $c: true, $r, _r, data, limit, n, $s};return $f;
	};
	$pkg.Sort = Sort;
	$ptrType(xorshift).prototype.Next = function() {
		var r, x, x$1, x$2, x$3, x$4, x$5, x$6;
		r = this;
		r.$set((x = r.$get(), x$1 = $shiftLeft64(r.$get(), 13), new xorshift(x.$high ^ x$1.$high, (x.$low ^ x$1.$low) >>> 0)));
		r.$set((x$2 = r.$get(), x$3 = $shiftRightUint64(r.$get(), 17), new xorshift(x$2.$high ^ x$3.$high, (x$2.$low ^ x$3.$low) >>> 0)));
		r.$set((x$4 = r.$get(), x$5 = $shiftLeft64(r.$get(), 5), new xorshift(x$4.$high ^ x$5.$high, (x$4.$low ^ x$5.$low) >>> 0)));
		return ((x$6 = r.$get(), new $Uint64(x$6.$high, x$6.$low)));
	};
	nextPowerOfTwo = function(length) {
		var length, shift, y;
		shift = ((bits.Len(((length >>> 0))) >>> 0));
		return (((y = shift, y < 32 ? (1 << y) : 0) >>> 0));
	};
	IntSlice.prototype.Len = function() {
		var x;
		x = this;
		return x.$length;
	};
	$ptrType(IntSlice).prototype.Len = function() { return this.$get().Len(); };
	IntSlice.prototype.Less = function(i, j) {
		var i, j, x;
		x = this;
		return ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) < ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]);
	};
	$ptrType(IntSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	IntSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]);
		_tmp$1 = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]);
		((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = _tmp);
		((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = _tmp$1);
	};
	$ptrType(IntSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	IntSlice.prototype.Sort = function() {
		var {x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		x = this;
		$r = Sort(x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: IntSlice.prototype.Sort, $c: true, $r, x, $s};return $f;
	};
	$ptrType(IntSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Ints = function(x) {
		var {x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = Sort(($convertSliceType(x, IntSlice))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Ints, $c: true, $r, x, $s};return $f;
	};
	$pkg.Ints = Ints;
	Stable = function(data) {
		var {_arg, _arg$1, _r, data, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_arg = data;
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$r = stable(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Stable, $c: true, $r, _arg, _arg$1, _r, data, $s};return $f;
	};
	$pkg.Stable = Stable;
	Search = function(n, f) {
		var {_r, _tmp, _tmp$1, f, h, i, j, n, $s, $r, $c} = $restore(this, {n, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		$s = 1; continue;
		case 2:
		$s = -1; return i;
		/* */ } return; } var $f = {$blk: Search, $c: true, $r, _r, _tmp, _tmp$1, f, h, i, j, n, $s};return $f;
	};
	$pkg.Search = Search;
	SearchInts = function(a, x) {
		var {$24r, _r, a, x, $s, $r, $c} = $restore(this, {a, x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: SearchInts, $c: true, $r, $24r, _r, a, x, $s};return $f;
	};
	$pkg.SearchInts = SearchInts;
	IntSlice.prototype.Search = function(x) {
		var {$24r, _r, p, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchInts($convertSliceType(p, sliceType), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: IntSlice.prototype.Search, $c: true, $r, $24r, _r, p, x, $s};return $f;
	};
	$ptrType(IntSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	ptrType.methods = [{prop: "Next", name: "Next", pkg: "", typ: $funcType([], [$Uint64], false)}];
	IntSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}, {prop: "Search", name: "Search", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	IntSlice.init($Int);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflectlite.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/fmtsort"] = (function() {
	var $pkg = {}, $init, reflect, sort, SortedMap, ptrType, sliceType, Sort, compare, nilCompare, floatCompare, isNaN;
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	SortedMap = $pkg.SortedMap = $newType(0, $kindStruct, "fmtsort.SortedMap", true, "internal/fmtsort", true, function(Key_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = sliceType.nil;
			this.Value = sliceType.nil;
			return;
		}
		this.Key = Key_;
		this.Value = Value_;
	});
	ptrType = $ptrType(SortedMap);
	sliceType = $sliceType(reflect.Value);
	SortedMap.ptr.prototype.Len = function() {
		var o;
		o = this;
		return o.Key.$length;
	};
	SortedMap.prototype.Len = function() { return this.$val.Len(); };
	SortedMap.ptr.prototype.Less = function(i, j) {
		var {$24r, _r, i, j, o, x, x$1, $s, $r, $c} = $restore(this, {i, j});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		o = this;
		_r = compare($clone((x = o.Key, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), reflect.Value), $clone((x$1 = o.Key, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j])), reflect.Value)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r < 0;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: SortedMap.ptr.prototype.Less, $c: true, $r, $24r, _r, i, j, o, x, x$1, $s};return $f;
	};
	SortedMap.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	SortedMap.ptr.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, i, j, o, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		o = this;
		_tmp = (x = o.Key, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
		_tmp$1 = (x$1 = o.Key, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
		(x$2 = o.Key, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i] = _tmp));
		(x$3 = o.Key, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j] = _tmp$1));
		_tmp$2 = (x$4 = o.Value, ((j < 0 || j >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + j]));
		_tmp$3 = (x$5 = o.Value, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i]));
		(x$6 = o.Value, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i] = _tmp$2));
		(x$7 = o.Value, ((j < 0 || j >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + j] = _tmp$3));
	};
	SortedMap.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	Sort = function(mapValue) {
		var {_r, _r$1, _r$2, _r$3, _r$4, iter, key, mapValue, n, sorted, value, $s, $r, $c} = $restore(this, {mapValue});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(mapValue, reflect.Value).Type().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$s = -1; return ptrType.nil;
		/* } */ case 2:
		_r$1 = $clone(mapValue, reflect.Value).Len(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		n = _r$1;
		key = $makeSlice(sliceType, 0, n);
		value = $makeSlice(sliceType, 0, n);
		iter = $clone(mapValue, reflect.Value).MapRange();
		/* while (true) { */ case 5:
			_r$2 = iter.Next(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(_r$2)) { break; } */ if(!(_r$2)) { $s = 6; continue; }
			_r$3 = iter.Key(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			key = $append(key, _r$3);
			_r$4 = iter.Value(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = $append(value, _r$4);
		$s = 5; continue;
		case 6:
		sorted = new SortedMap.ptr(key, value);
		$r = sort.Stable(sorted); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return sorted;
		/* */ } return; } var $f = {$blk: Sort, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, iter, key, mapValue, n, sorted, value, $s};return $f;
	};
	$pkg.Sort = Sort;
	compare = function(aVal, bVal) {
		var {$24r, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, a$1, a$2, a$3, a$4, a$5, aType, aVal, ap, b, b$1, b$2, b$3, b$4, b$5, bType, bVal, bp, c, c$1, c$2, c$3, c$4, c$5, i, i$1, ok, ok$1, $s, $r, $c} = $restore(this, {aVal, bVal});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = $clone(aVal, reflect.Value).Type();
		_tmp$1 = $clone(bVal, reflect.Value).Type();
		aType = _tmp;
		bType = _tmp$1;
		if (!($interfaceIsEqual(aType, bType))) {
			$s = -1; return -1;
		}
			_1 = $clone(aVal, reflect.Value).Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 5; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 6; continue; }
			/* */ if (_1 === (1)) { $s = 7; continue; }
			/* */ if ((_1 === (22)) || (_1 === (26))) { $s = 8; continue; }
			/* */ if (_1 === (18)) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ if (_1 === (17)) { $s = 11; continue; }
			/* */ if (_1 === (20)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_tmp$2 = $clone(aVal, reflect.Value).Int();
				_tmp$3 = $clone(bVal, reflect.Value).Int();
				a = _tmp$2;
				b = _tmp$3;
				if ((a.$high < b.$high || (a.$high === b.$high && a.$low < b.$low))) {
					$s = -1; return -1;
				} else if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_tmp$4 = $clone(aVal, reflect.Value).Uint();
				_tmp$5 = $clone(bVal, reflect.Value).Uint();
				a$1 = _tmp$4;
				b$1 = _tmp$5;
				if ((a$1.$high < b$1.$high || (a$1.$high === b$1.$high && a$1.$low < b$1.$low))) {
					$s = -1; return -1;
				} else if ((a$1.$high > b$1.$high || (a$1.$high === b$1.$high && a$1.$low > b$1.$low))) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (24)) { */ case 4:
				_r = $clone(aVal, reflect.Value).String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$6 = _r;
				_r$1 = $clone(bVal, reflect.Value).String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tmp$7 = _r$1;
				a$2 = _tmp$6;
				b$2 = _tmp$7;
				if (a$2 < b$2) {
					$s = -1; return -1;
				} else if (a$2 > b$2) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 5:
				$s = -1; return floatCompare($clone(aVal, reflect.Value).Float(), $clone(bVal, reflect.Value).Float());
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 6:
				_tmp$8 = $clone(aVal, reflect.Value).Complex();
				_tmp$9 = $clone(bVal, reflect.Value).Complex();
				a$3 = _tmp$8;
				b$3 = _tmp$9;
				c = floatCompare(a$3.$real, b$3.$real);
				if (!((c === 0))) {
					$s = -1; return c;
				}
				$s = -1; return floatCompare(a$3.$imag, b$3.$imag);
			/* } else if (_1 === (1)) { */ case 7:
				_tmp$10 = $clone(aVal, reflect.Value).Bool();
				_tmp$11 = $clone(bVal, reflect.Value).Bool();
				a$4 = _tmp$10;
				b$4 = _tmp$11;
				if (a$4 === b$4) {
					$s = -1; return 0;
				} else if (a$4) {
					$s = -1; return 1;
				} else {
					$s = -1; return -1;
				}
				$s = 14; continue;
			/* } else if ((_1 === (22)) || (_1 === (26))) { */ case 8:
				_tmp$12 = $clone(aVal, reflect.Value).Pointer();
				_tmp$13 = $clone(bVal, reflect.Value).Pointer();
				a$5 = _tmp$12;
				b$5 = _tmp$13;
				if (a$5 < b$5) {
					$s = -1; return -1;
				} else if (a$5 > b$5) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (18)) { */ case 9:
				_tuple = nilCompare($clone(aVal, reflect.Value), $clone(bVal, reflect.Value));
				c$1 = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					$s = -1; return c$1;
				}
				_tmp$14 = $clone(aVal, reflect.Value).Pointer();
				_tmp$15 = $clone(bVal, reflect.Value).Pointer();
				ap = _tmp$14;
				bp = _tmp$15;
				if (ap < bp) {
					$s = -1; return -1;
				} else if (ap > bp) {
					$s = -1; return 1;
				} else {
					$s = -1; return 0;
				}
				$s = 14; continue;
			/* } else if (_1 === (25)) { */ case 10:
				i = 0;
				/* while (true) { */ case 17:
					/* if (!(i < $clone(aVal, reflect.Value).NumField())) { break; } */ if(!(i < $clone(aVal, reflect.Value).NumField())) { $s = 18; continue; }
					_r$2 = $clone(aVal, reflect.Value).Field(i); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg = $clone(_r$2, reflect.Value);
					_r$3 = $clone(bVal, reflect.Value).Field(i); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_arg$1 = $clone(_r$3, reflect.Value);
					_r$4 = compare(_arg, _arg$1); /* */ $s = 21; case 21: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					c$2 = _r$4;
					if (!((c$2 === 0))) {
						$s = -1; return c$2;
					}
					i = i + (1) >> 0;
				$s = 17; continue;
				case 18:
				$s = -1; return 0;
			/* } else if (_1 === (17)) { */ case 11:
				i$1 = 0;
				/* while (true) { */ case 22:
					_r$5 = $clone(aVal, reflect.Value).Len(); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* if (!(i$1 < _r$5)) { break; } */ if(!(i$1 < _r$5)) { $s = 23; continue; }
					_r$6 = $clone(aVal, reflect.Value).Index(i$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$2 = $clone(_r$6, reflect.Value);
					_r$7 = $clone(bVal, reflect.Value).Index(i$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_arg$3 = $clone(_r$7, reflect.Value);
					_r$8 = compare(_arg$2, _arg$3); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					c$3 = _r$8;
					if (!((c$3 === 0))) {
						$s = -1; return c$3;
					}
					i$1 = i$1 + (1) >> 0;
				$s = 22; continue;
				case 23:
				$s = -1; return 0;
			/* } else if (_1 === (20)) { */ case 12:
				_tuple$1 = nilCompare($clone(aVal, reflect.Value), $clone(bVal, reflect.Value));
				c$4 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					$s = -1; return c$4;
				}
				_r$9 = $clone(aVal, reflect.Value).Elem(); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = $clone(_r$9, reflect.Value).Type(); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = reflect.ValueOf(_r$10); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_arg$4 = $clone(_r$11, reflect.Value);
				_r$12 = $clone(bVal, reflect.Value).Elem(); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$13 = $clone(_r$12, reflect.Value).Type(); /* */ $s = 32; case 32: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = reflect.ValueOf(_r$13); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$5 = $clone(_r$14, reflect.Value);
				_r$15 = compare(_arg$4, _arg$5); /* */ $s = 34; case 34: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				c$5 = _r$15;
				if (!((c$5 === 0))) {
					$s = -1; return c$5;
				}
				_r$16 = $clone(aVal, reflect.Value).Elem(); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_arg$6 = $clone(_r$16, reflect.Value);
				_r$17 = $clone(bVal, reflect.Value).Elem(); /* */ $s = 36; case 36: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_arg$7 = $clone(_r$17, reflect.Value);
				_r$18 = compare(_arg$6, _arg$7); /* */ $s = 37; case 37: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				$24r = _r$18;
				$s = 38; case 38: return $24r;
			/* } else { */ case 13:
				_r$19 = aType.String(); /* */ $s = 39; case 39: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				$panic(new $String("bad type in compare: " + _r$19));
			/* } */ case 14:
		case 1:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: compare, $c: true, $r, $24r, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, a$1, a$2, a$3, a$4, a$5, aType, aVal, ap, b, b$1, b$2, b$3, b$4, b$5, bType, bVal, bp, c, c$1, c$2, c$3, c$4, c$5, i, i$1, ok, ok$1, $s};return $f;
	};
	nilCompare = function(aVal, bVal) {
		var aVal, bVal;
		if ($clone(aVal, reflect.Value).IsNil()) {
			if ($clone(bVal, reflect.Value).IsNil()) {
				return [0, true];
			}
			return [-1, true];
		}
		if ($clone(bVal, reflect.Value).IsNil()) {
			return [1, true];
		}
		return [0, false];
	};
	floatCompare = function(a, b) {
		var a, b;
		if (isNaN(a)) {
			return -1;
		} else if (isNaN(b)) {
			return 1;
		} else if (a < b) {
			return -1;
		} else if (a > b) {
			return 1;
		}
		return 0;
	};
	isNaN = function(a) {
		var a;
		return !((a === a));
	};
	ptrType.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	SortedMap.init("", [{prop: "Key", name: "Key", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReaderFrom, WriterTo, RuneReader, RuneScanner, LimitedReader, sliceType, sliceType$1, ptrType$2, ptrType$3, errInvalidWrite, errWhence, errOffset, blackHolePool, Copy, copyBuffer;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	LimitedReader = $pkg.LimitedReader = $newType(0, $kindStruct, "io.LimitedReader", true, "io", true, function(R_, N_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = $ifaceNil;
			this.N = new $Int64(0, 0);
			return;
		}
		this.R = R_;
		this.N = N_;
	});
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType$2 = $ptrType(sliceType$1);
	ptrType$3 = $ptrType(LimitedReader);
	Copy = function(dst, src) {
		var {$24r, _r, _tuple, dst, err, src, written, $s, $r, $c} = $restore(this, {dst, src});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = copyBuffer(dst, src, sliceType$1.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		$24r = [written, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Copy, $c: true, $r, $24r, _r, _tuple, dst, err, src, written, $s};return $f;
	};
	$pkg.Copy = Copy;
	copyBuffer = function(dst, src, buf) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, buf, dst, er, err, ew, l, nr, nw, ok, ok$1, ok$2, rt, size, src, written, wt, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {dst, src, buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = $assertType(src, WriterTo, true);
		wt = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = wt.WriteTo(dst); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			written = _tuple$1[0];
			err = _tuple$1[1];
			$24r = [written, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_tuple$2 = $assertType(dst, ReaderFrom, true);
		rt = _tuple$2[0];
		ok$1 = _tuple$2[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$1 = rt.ReadFrom(src); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			written = _tuple$3[0];
			err = _tuple$3[1];
			$24r$1 = [written, err];
			$s = 8; case 8: return $24r$1;
		/* } */ case 6:
		if (buf === sliceType$1.nil) {
			size = 32768;
			_tuple$4 = $assertType(src, ptrType$3, true);
			l = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2 && (x$2 = (new $Int64(0, size)), x$3 = l.N, (x$2.$high > x$3.$high || (x$2.$high === x$3.$high && x$2.$low > x$3.$low)))) {
				if ((x$4 = l.N, (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 1)))) {
					size = 1;
				} else {
					size = (((x$5 = l.N, x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0));
				}
			}
			buf = $makeSlice(sliceType$1, size);
		}
		/* while (true) { */ case 9:
			_r$2 = src.Read(buf); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$5 = _r$2;
			nr = _tuple$5[0];
			er = _tuple$5[1];
			/* */ if (nr > 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (nr > 0) { */ case 12:
				_r$3 = dst.Write($subslice(buf, 0, nr)); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$6 = _r$3;
				nw = _tuple$6[0];
				ew = _tuple$6[1];
				if (nw < 0 || nr < nw) {
					nw = 0;
					if ($interfaceIsEqual(ew, $ifaceNil)) {
						ew = errInvalidWrite;
					}
				}
				written = (x$6 = (new $Int64(0, nw)), new $Int64(written.$high + x$6.$high, written.$low + x$6.$low));
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					/* break; */ $s = 10; continue;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					/* break; */ $s = 10; continue;
				}
			/* } */ case 13:
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				if (!($interfaceIsEqual(er, $pkg.EOF))) {
					err = er;
				}
				/* break; */ $s = 10; continue;
			}
		$s = 9; continue;
		case 10:
		_tmp = written;
		_tmp$1 = err;
		written = _tmp;
		err = _tmp$1;
		$s = -1; return [written, err];
		/* */ } return; } var $f = {$blk: copyBuffer, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, buf, dst, er, err, ew, l, nr, nw, ok, ok$1, ok$2, rt, size, src, written, wt, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	LimitedReader.ptr.prototype.Read = function(p) {
		var {_r, _tmp, _tmp$1, _tuple, err, l, n, p, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		l = this;
		if ((x$2 = l.N, (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) {
			_tmp = 0;
			_tmp$1 = $pkg.EOF;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((x$3 = (new $Int64(0, p.$length)), x$4 = l.N, (x$3.$high > x$4.$high || (x$3.$high === x$4.$high && x$3.$low > x$4.$low)))) {
			p = $subslice(p, 0, $flatten64(l.N));
		}
		_r = l.R.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		l.N = (x$5 = l.N, x$6 = (new $Int64(0, n)), new $Int64(x$5.$high - x$6.$high, x$5.$low - x$6.$low));
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: LimitedReader.ptr.prototype.Read, $c: true, $r, _r, _tmp, _tmp$1, _tuple, err, l, n, p, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	LimitedReader.prototype.Read = function(p) { return this.$val.Read(p); };
	ptrType$3.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	LimitedReader.init("", [{prop: "R", name: "R", embedded: false, exported: true, typ: Reader, tag: ""}, {prop: "N", name: "N", embedded: false, exported: true, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		$pkg.ErrShortWrite = errors.New("short write");
		errInvalidWrite = errors.New("invalid write result");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		blackHolePool = new sync.Pool.ptr(sliceType.nil, (function() {
			var b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType$2(function() { return b; }, function($v) { b = $v; })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/oserror"] = (function() {
	var $pkg = {}, $init, errors;
	errors = $packages["errors"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall/js"] = (function() {
	var $pkg = {}, $init, js, Type, Func, Error, Value, ValueError, sliceType, funcType, arrayType, sliceType$1, mapType, sliceType$2, ptrType, sliceType$3, ptrType$1, ptrType$2, typeNames, id, instanceOf, typeOf, Global, Null, Undefined, FuncOf, objectToValue, init, getValueType, ValueOf, convertArgs, convertJSError, CopyBytesToGo, CopyBytesToJS;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Type = $pkg.Type = $newType(4, $kindInt, "js.Type", true, "syscall/js", true, null);
	Func = $pkg.Func = $newType(0, $kindStruct, "js.Func", true, "syscall/js", true, function(Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new Value.ptr(null, false, arrayType.zero());
			return;
		}
		this.Value = Value_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "syscall/js", true, function(Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = new Value.ptr(null, false, arrayType.zero());
			return;
		}
		this.Value = Value_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "js.Value", true, "syscall/js", true, function(v_, inited_, _$2_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = null;
			this.inited = false;
			this._$2 = arrayType.zero();
			return;
		}
		this.v = v_;
		this.inited = inited_;
		this._$2 = _$2_;
	});
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "js.ValueError", true, "syscall/js", true, function(Method_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Type = 0;
			return;
		}
		this.Method = Method_;
		this.Type = Type_;
	});
	sliceType = $sliceType($String);
	funcType = $funcType([], [], false);
	arrayType = $arrayType(funcType, 0);
	sliceType$1 = $sliceType(Value);
	mapType = $mapType($String, $emptyInterface);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType = $ptrType(js.Error);
	sliceType$3 = $sliceType($Uint8);
	ptrType$1 = $ptrType(js.Object);
	ptrType$2 = $ptrType(ValueError);
	Type.prototype.String = function() {
		var t;
		t = this.$val;
		if (((t >> 0)) < 0 || typeNames.$length <= ((t >> 0))) {
			$panic(new $String("bad type"));
		}
		return ((t < 0 || t >= typeNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeNames.$array[typeNames.$offset + t]);
	};
	$ptrType(Type).prototype.String = function() { return new Type(this.$get()).String(); };
	Type.prototype.isObject = function() {
		var t;
		t = this.$val;
		return (t === 6) || (t === 7);
	};
	$ptrType(Type).prototype.isObject = function() { return new Type(this.$get()).isObject(); };
	Global = function() {
		return objectToValue($global);
	};
	$pkg.Global = Global;
	Null = function() {
		return objectToValue(null);
	};
	$pkg.Null = Null;
	Undefined = function() {
		return objectToValue(undefined);
	};
	$pkg.Undefined = Undefined;
	Func.ptr.prototype.Release = function() {
		var f;
		f = this;
		$exportedFunctions = ($parseInt($exportedFunctions) >> 0) - 1 >> 0;
		Value.copy(f.Value, Null());
	};
	Func.prototype.Release = function() { return this.$val.Release(); };
	FuncOf = function(fn) {
		var fn;
		$exportedFunctions = ($parseInt($exportedFunctions) >> 0) + 1 >> 0;
		return new Func.ptr($clone(objectToValue(js.MakeFunc((function $b(this$1, args) {
			var {$24r, _i, _r, _ref, a, args, i, this$1, vargs, $s, $r, $c} = $restore(this, {this$1, args});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			vargs = $makeSlice(sliceType$1, args.$length);
			_ref = args;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				Value.copy(((i < 0 || i >= vargs.$length) ? ($throwRuntimeError("index out of range"), undefined) : vargs.$array[vargs.$offset + i]), objectToValue(a));
				_i++;
			}
			_r = fn($clone(objectToValue(this$1), Value), vargs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _i, _r, _ref, a, args, i, this$1, vargs, $s};return $f;
		}))), Value));
	};
	$pkg.FuncOf = FuncOf;
	Error.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "JavaScript error: " + $clone($clone(e.Value, Value).Get("message"), Value).String();
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	objectToValue = function(obj) {
		var obj;
		if (obj === undefined) {
			return new Value.ptr(null, false, arrayType.zero());
		}
		return new Value.ptr(obj, true, arrayType.zero());
	};
	init = function() {
		if (!($global === null)) {
			id = $id;
			instanceOf = $instanceOf;
			typeOf = $typeOf;
		}
	};
	getValueType = function(obj) {
		var _i, _ref, name, name2, obj, type2;
		if (obj === null) {
			return 1;
		}
		name = $internalize(typeOf(obj), $String);
		_ref = typeNames;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			type2 = _i;
			name2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (name === name2) {
				return ((type2 >> 0));
			}
			_i++;
		}
		return 6;
	};
	ValueOf = function(x) {
		var _ref, x, x$1, x$2, x$3, x$4, x$5;
		_ref = x;
		if ($assertType(_ref, Value, true)[1]) {
			x$1 = $clone(_ref.$val, Value);
			return x$1;
		} else if ($assertType(_ref, Func, true)[1]) {
			x$2 = $clone(_ref.$val, Func);
			return x$2.Value;
		} else if (_ref === $ifaceNil) {
			x$3 = _ref;
			return Null();
		} else if ($assertType(_ref, $Bool, true)[1] || $assertType(_ref, $Int, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Int64, true)[1] || $assertType(_ref, $Uint, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, $Uint64, true)[1] || $assertType(_ref, $Float32, true)[1] || $assertType(_ref, $Float64, true)[1] || $assertType(_ref, $UnsafePointer, true)[1] || $assertType(_ref, $String, true)[1] || $assertType(_ref, mapType, true)[1] || $assertType(_ref, sliceType$2, true)[1]) {
			x$4 = _ref;
			return objectToValue(id($externalize(x$4, $emptyInterface)));
		} else {
			x$5 = _ref;
			$panic(new $String("ValueOf: invalid value"));
		}
	};
	$pkg.ValueOf = ValueOf;
	Value.ptr.prototype.internal = function() {
		var v;
		v = this;
		if (!v.inited) {
			return undefined;
		}
		return v.v;
	};
	Value.prototype.internal = function() { return this.$val.internal(); };
	Value.ptr.prototype.Bool = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 2))) {
			$panic(new ValueError.ptr("Value.Bool", vType));
		}
		return !!($clone(v, Value).internal());
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	convertArgs = function(args) {
		var _i, _ref, arg, args, newArgs, v;
		newArgs = new sliceType$2([]);
		_ref = args;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			v = $clone(ValueOf(arg), Value);
			newArgs = $append(newArgs, new $jsObjectPtr($clone(v, Value).internal()));
			_i++;
		}
		return newArgs;
	};
	convertJSError = function() {
		var _tuple, err, jsErr, ok, x;
		err = $recover();
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return;
		}
		_tuple = $assertType(err, ptrType, true);
		jsErr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$panic((x = new Error.ptr($clone(objectToValue(jsErr.Object), Value)), new x.constructor.elem(x)));
		}
		$panic(err);
	};
	Value.ptr.prototype.Call = function(m, args) {
		var {$24r, args, m, obj, propType, v, vType, $s, $deferred, $r, $c} = $restore(this, {m, args});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 6)) && !((vType === 7))) {
			$panic(new ValueError.ptr("Value.Call", vType));
		}
		propType = $clone($clone(v, Value).Get(m), Value).Type();
		if (!((propType === 7))) {
			$panic(new $String("js: Value.Call: property " + m + " is not a function, got " + new Type(propType).String()));
		}
		$deferred.push([convertJSError, []]);
		$24r = objectToValue((obj = $clone(v, Value).internal(), obj[$externalize(m, $String)].apply(obj, $externalize(convertArgs(args), sliceType$2))));
		$s = 1; case 1: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(null, false, arrayType.zero()); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Value.ptr.prototype.Call, $c: true, $r, $24r, args, m, obj, propType, v, vType, $s, $deferred};return $f; } }
	};
	Value.prototype.Call = function(m, args) { return this.$val.Call(m, args); };
	Value.ptr.prototype.Float = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 3))) {
			$panic(new ValueError.ptr("Value.Float", vType));
		}
		return $parseFloat($clone(v, Value).internal());
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Get = function(p) {
		var p, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Get", vType));
		}
		return objectToValue($clone(v, Value).internal()[$externalize(p, $String)]);
	};
	Value.prototype.Get = function(p) { return this.$val.Get(p); };
	Value.ptr.prototype.Index = function(i) {
		var i, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Index", vType));
		}
		return objectToValue($clone(v, Value).internal()[i]);
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.Int = function() {
		var v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 3))) {
			$panic(new ValueError.ptr("Value.Int", vType));
		}
		return $parseInt($clone(v, Value).internal()) >> 0;
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.InstanceOf = function(t) {
		var t, v;
		v = this;
		return !!(instanceOf($clone(v, Value).internal(), $clone(t, Value).internal()));
	};
	Value.prototype.InstanceOf = function(t) { return this.$val.InstanceOf(t); };
	Value.ptr.prototype.Invoke = function(args) {
		var args, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!((vType === 7))) {
			$panic(new ValueError.ptr("Value.Invoke", vType));
		}
		return objectToValue($clone(v, Value).internal().apply(undefined, $externalize(convertArgs(args), sliceType$2)));
	};
	Value.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Value.ptr.prototype.JSValue = function() {
		var v;
		v = this;
		return v;
	};
	Value.prototype.JSValue = function() { return this.$val.JSValue(); };
	Value.ptr.prototype.Length = function() {
		var v;
		v = this;
		return $parseInt($clone(v, Value).internal().length);
	};
	Value.prototype.Length = function() { return this.$val.Length(); };
	Value.ptr.prototype.New = function(args) {
		var {$24r, args, v, $s, $deferred, $r, $c} = $restore(this, {args});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		v = [v];
		v[0] = this;
		$deferred.push([(function(v) { return function() {
			var _tuple, err, jsErr, ok, vType, x;
			err = $recover();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				return;
			}
			vType = $clone(v[0], Value).Type();
			if (!((vType === 7))) {
				$panic(new ValueError.ptr("Value.New", vType));
			}
			_tuple = $assertType(err, ptrType, true);
			jsErr = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				$panic((x = new Error.ptr($clone(objectToValue(jsErr.Object), Value)), new x.constructor.elem(x)));
			}
			$panic(err);
		}; })(v), []]);
		$24r = objectToValue(new ($global.Function.prototype.bind.apply($clone(v[0], Value).internal(), [undefined].concat($externalize(convertArgs(args), sliceType$2)))));
		$s = 1; case 1: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return new Value.ptr(null, false, arrayType.zero()); } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Value.ptr.prototype.New, $c: true, $r, $24r, args, v, $s, $deferred};return $f; } }
	};
	Value.prototype.New = function(args) { return this.$val.New(args); };
	Value.ptr.prototype.Set = function(p, x) {
		var p, v, vType, x, x$1;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Set", vType));
		}
		$clone(v, Value).internal()[$externalize(p, $String)] = $externalize((x$1 = convertArgs(new sliceType$2([x])), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $emptyInterface);
	};
	Value.prototype.Set = function(p, x) { return this.$val.Set(p, x); };
	Value.ptr.prototype.SetIndex = function(i, x) {
		var i, v, vType, x, x$1;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.SetIndex", vType));
		}
		$clone(v, Value).internal()[i] = $externalize((x$1 = convertArgs(new sliceType$2([x])), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $emptyInterface);
	};
	Value.prototype.SetIndex = function(i, x) { return this.$val.SetIndex(i, x); };
	Value.ptr.prototype.String = function() {
		var _1, v;
		v = this;
		_1 = $clone(v, Value).Type();
		if (_1 === (4)) {
			return $internalize($clone(v, Value).internal(), $String);
		} else if (_1 === (0)) {
			return "<undefined>";
		} else if (_1 === (1)) {
			return "<null>";
		} else if (_1 === (2)) {
			return "<boolean: " + $internalize($clone(v, Value).internal(), $String) + ">";
		} else if (_1 === (3)) {
			return "<number: " + $internalize($clone(v, Value).internal(), $String) + ">";
		} else if (_1 === (5)) {
			return "<symbol>";
		} else if (_1 === (6)) {
			return "<object>";
		} else if (_1 === (7)) {
			return "<function>";
		} else {
			$panic(new $String("bad type"));
		}
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.Truthy = function() {
		var v;
		v = this;
		return !!($clone(v, Value).internal());
	};
	Value.prototype.Truthy = function() { return this.$val.Truthy(); };
	Value.ptr.prototype.Type = function() {
		var v;
		v = this;
		return (getValueType($clone(v, Value).internal()));
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.IsNull = function() {
		var v;
		v = this;
		return $clone(v, Value).Type() === 1;
	};
	Value.prototype.IsNull = function() { return this.$val.IsNull(); };
	Value.ptr.prototype.IsUndefined = function() {
		var v;
		v = this;
		return !v.inited;
	};
	Value.prototype.IsUndefined = function() { return this.$val.IsUndefined(); };
	Value.ptr.prototype.IsNaN = function() {
		var v;
		v = this;
		return !!($global.isNaN($clone(v, Value).internal()));
	};
	Value.prototype.IsNaN = function() { return this.$val.IsNaN(); };
	Value.ptr.prototype.Delete = function(p) {
		var p, v, vType;
		v = this;
		vType = $clone(v, Value).Type();
		if (!new Type(vType).isObject()) {
			$panic(new ValueError.ptr("Value.Delete", vType));
		}
		delete $clone(v, Value).internal()[$externalize(p, $String)];
	};
	Value.prototype.Delete = function(p) { return this.$val.Delete(p); };
	Value.ptr.prototype.Equal = function(w) {
		var v, w;
		v = this;
		return $clone(v, Value).internal() === $clone(w, Value).internal();
	};
	Value.prototype.Equal = function(w) { return this.$val.Equal(w); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "syscall/js: call of " + e.Method + " on " + new Type(e.Type).String();
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	CopyBytesToGo = function(dst, src) {
		var dlen, dst, src, vlen;
		vlen = $parseInt(src.v.length);
		dlen = dst.$length;
		if (dlen < vlen) {
			vlen = dlen;
		}
		$copySlice(dst, $assertType($internalize(src.v, $emptyInterface), sliceType$3));
		return vlen;
	};
	$pkg.CopyBytesToGo = CopyBytesToGo;
	CopyBytesToJS = function(dst, src) {
		var _tuple, dst, dt, ok, src;
		_tuple = $assertType($internalize(dst.v, $emptyInterface), sliceType$3, true);
		dt = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(new $String("syscall/js: CopyBytesToJS: expected dst to be an Uint8Array"));
		}
		return $copySlice(dt, src);
	};
	$pkg.CopyBytesToJS = CopyBytesToJS;
	Type.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "isObject", name: "isObject", pkg: "syscall/js", typ: $funcType([], [$Bool], false)}];
	Func.methods = [{prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}];
	Error.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Value.methods = [{prop: "internal", name: "internal", pkg: "syscall/js", typ: $funcType([], [ptrType$1], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType$2], [Value], true)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "InstanceOf", name: "InstanceOf", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType$2], [Value], true)}, {prop: "JSValue", name: "JSValue", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType$2], [Value], true)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Truthy", name: "Truthy", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "IsNull", name: "IsNull", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsUndefined", name: "IsUndefined", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNaN", name: "IsNaN", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Value], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Func.init("", [{prop: "Value", name: "Value", embedded: true, exported: true, typ: Value, tag: ""}]);
	Error.init("", [{prop: "Value", name: "Value", embedded: true, exported: true, typ: Value, tag: ""}]);
	Value.init("syscall/js", [{prop: "v", name: "v", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "inited", name: "inited", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "_$2", name: "_", embedded: false, exported: false, typ: arrayType, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", embedded: false, exported: true, typ: Type, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		id = null;
		instanceOf = null;
		typeOf = null;
		typeNames = new sliceType(["undefined", "null", "boolean", "number", "string", "symbol", "object", "function"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, errors, bytealg, itoa, oserror, runtime, sync, js, Errno, Stat_t, Iovec, Sockaddr, SockaddrInet4, SockaddrInet6, RawConn, jsFile, callResult, sliceType, sliceType$2, ptrType, funcType, arrayType$2, ptrType$2, arrayType$3, arrayType$4, funcType$1, funcType$2, errorstr, errEAGAIN, errEINVAL, errENOENT, errnoByCode, jsProcess, jsFS, constants, uint8Array, nodeWRONLY, nodeRDWR, nodeCREATE, nodeTRUNC, nodeAPPEND, nodeEXCL, filesMu, files, envs, _r, faketimeWrite, errnoErr, StopIO, Accept, Recvfrom, Sendto, Recvmsg, SendmsgN, SetReadDeadline, SetWriteDeadline, Shutdown, SetNonblock, runtime_envs, setStat, fsCall, fdToFile, Close, CloseOnExec, ReadDirent, Lstat, Fstat, Fchmod, Fchown, Ftruncate, Chdir, Fchdir, Fsync, Read, Write, Pread, Pwrite, Seek, Dup, checkPath, recoverErr, mapJSError;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	itoa = $packages["internal/itoa"];
	oserror = $packages["internal/oserror"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	js = $packages["syscall/js"];
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Ino_, Mode_, Nlink_, Uid_, Gid_, Rdev_, Size_, Blksize_, Blocks_, Atime_, AtimeNsec_, Mtime_, MtimeNsec_, Ctime_, CtimeNsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = new $Int64(0, 0);
			this.Ino = new $Uint64(0, 0);
			this.Mode = 0;
			this.Nlink = 0;
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = new $Int64(0, 0);
			this.Size = new $Int64(0, 0);
			this.Blksize = 0;
			this.Blocks = 0;
			this.Atime = new $Int64(0, 0);
			this.AtimeNsec = new $Int64(0, 0);
			this.Mtime = new $Int64(0, 0);
			this.MtimeNsec = new $Int64(0, 0);
			this.Ctime = new $Int64(0, 0);
			this.CtimeNsec = new $Int64(0, 0);
			return;
		}
		this.Dev = Dev_;
		this.Ino = Ino_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Size = Size_;
		this.Blksize = Blksize_;
		this.Blocks = Blocks_;
		this.Atime = Atime_;
		this.AtimeNsec = AtimeNsec_;
		this.Mtime = Mtime_;
		this.MtimeNsec = MtimeNsec_;
		this.Ctime = Ctime_;
		this.CtimeNsec = CtimeNsec_;
	});
	Iovec = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.Addr = arrayType$3.zero();
			return;
		}
		this.Port = Port_;
		this.Addr = Addr_;
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.ZoneId = 0;
			this.Addr = arrayType$4.zero();
			return;
		}
		this.Port = Port_;
		this.ZoneId = ZoneId_;
		this.Addr = Addr_;
	});
	RawConn = $pkg.RawConn = $newType(8, $kindInterface, "syscall.RawConn", true, "syscall", true, null);
	jsFile = $pkg.jsFile = $newType(0, $kindStruct, "syscall.jsFile", true, "syscall", false, function(path_, entries_, dirIdx_, pos_, seeked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.entries = sliceType.nil;
			this.dirIdx = 0;
			this.pos = new $Int64(0, 0);
			this.seeked = false;
			return;
		}
		this.path = path_;
		this.entries = entries_;
		this.dirIdx = dirIdx_;
		this.pos = pos_;
		this.seeked = seeked_;
	});
	callResult = $newType(0, $kindStruct, "syscall.callResult", true, "syscall", false, function(val_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.val = new js.Value.ptr(null, false, arrayType$2.zero());
			this.err = $ifaceNil;
			return;
		}
		this.val = val_;
		this.err = err_;
	});
	sliceType = $sliceType($String);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType = $ptrType($error);
	funcType = $funcType([], [], false);
	arrayType$2 = $arrayType(funcType, 0);
	ptrType$2 = $ptrType(jsFile);
	arrayType$3 = $arrayType($Uint8, 4);
	arrayType$4 = $arrayType($Uint8, 16);
	funcType$1 = $funcType([$Uintptr], [], false);
	funcType$2 = $funcType([$Uintptr], [$Bool], false);
	faketimeWrite = function(fd, p) {
		var fd, p;
		$panic(new $String("not implemented"));
	};
	errnoErr = function(e) {
		var _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (11)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= ((e >> 0)) && ((e >> 0)) < 2054) {
			s = ((e < 0 || e >= errorstr.length) ? ($throwRuntimeError("index out of range"), undefined) : errorstr[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa.Itoa(((e >> 0)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Is = function(target) {
		var _1, e, target;
		e = this.$val;
		_1 = target;
		if ($interfaceIsEqual(_1, (oserror.ErrPermission))) {
			return (e === 13) || (e === 1);
		} else if ($interfaceIsEqual(_1, (oserror.ErrExist))) {
			return (e === 17) || (e === 39);
		} else if ($interfaceIsEqual(_1, (oserror.ErrNotExist))) {
			return e === 2;
		}
		return false;
	};
	$ptrType(Errno).prototype.Is = function(target) { return new Errno(this.$get()).Is(target); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 11) || (e === 11) || (e === 110);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	StopIO = function(fd) {
		var fd;
		return new Errno(38);
	};
	$pkg.StopIO = StopIO;
	Accept = function(fd) {
		var _tmp, _tmp$1, _tmp$2, err, fd, newfd, sa;
		newfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = $ifaceNil;
		_tmp$2 = new Errno(38);
		newfd = _tmp;
		sa = _tmp$1;
		err = _tmp$2;
		return [newfd, sa, err];
	};
	$pkg.Accept = Accept;
	Recvfrom = function(fd, p, flags) {
		var _tmp, _tmp$1, _tmp$2, err, fd, flags, from, n, p;
		n = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = $ifaceNil;
		_tmp$2 = new Errno(38);
		n = _tmp;
		from = _tmp$1;
		err = _tmp$2;
		return [n, from, err];
	};
	$pkg.Recvfrom = Recvfrom;
	Sendto = function(fd, p, flags, to) {
		var fd, flags, p, to;
		return new Errno(38);
	};
	$pkg.Sendto = Sendto;
	Recvmsg = function(fd, p, oob, flags) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, err, fd, flags, from, n, oob, oobn, p, recvflags;
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = $ifaceNil;
		_tmp$4 = new Errno(38);
		n = _tmp;
		oobn = _tmp$1;
		recvflags = _tmp$2;
		from = _tmp$3;
		err = _tmp$4;
		return [n, oobn, recvflags, from, err];
	};
	$pkg.Recvmsg = Recvmsg;
	SendmsgN = function(fd, p, oob, to, flags) {
		var _tmp, _tmp$1, err, fd, flags, n, oob, p, to;
		n = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = new Errno(38);
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$pkg.SendmsgN = SendmsgN;
	SetReadDeadline = function(fd, t) {
		var fd, t;
		return new Errno(38);
	};
	$pkg.SetReadDeadline = SetReadDeadline;
	SetWriteDeadline = function(fd, t) {
		var fd, t;
		return new Errno(38);
	};
	$pkg.SetWriteDeadline = SetWriteDeadline;
	Shutdown = function(fd, how) {
		var fd, how;
		return new Errno(38);
	};
	$pkg.Shutdown = Shutdown;
	SetNonblock = function(fd, nonblocking) {
		var fd, nonblocking;
		return $ifaceNil;
	};
	$pkg.SetNonblock = SetNonblock;
	runtime_envs = function() {
		var {_r$1, envkeys, envs$1, i, jsEnv, key, process, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		process = $clone($clone(js.Global(), js.Value).Get("process"), js.Value);
		if ($clone(process, js.Value).IsUndefined()) {
			$s = -1; return sliceType.nil;
		}
		jsEnv = $clone($clone(process, js.Value).Get("env"), js.Value);
		if ($clone(jsEnv, js.Value).IsUndefined()) {
			$s = -1; return sliceType.nil;
		}
		_r$1 = $clone($clone(js.Global(), js.Value).Get("Object"), js.Value).Call("keys", new sliceType$2([new jsEnv.constructor.elem(jsEnv)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		envkeys = $clone(_r$1, js.Value);
		envs$1 = $makeSlice(sliceType, $clone(envkeys, js.Value).Length());
		i = 0;
		while (true) {
			if (!(i < $clone(envkeys, js.Value).Length())) { break; }
			key = $clone($clone(envkeys, js.Value).Index(i), js.Value).String();
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $clone($clone(jsEnv, js.Value).Get(key), js.Value).String());
			i = i + (1) >> 0;
		}
		$s = -1; return envs$1;
		/* */ } return; } var $f = {$blk: runtime_envs, $c: true, $r, _r$1, envkeys, envs$1, i, jsEnv, key, process, $s};return $f;
	};
	setStat = function(st, jsSt) {
		var atime, ctime, jsSt, mtime, st;
		st.Dev = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("dev"), js.Value).Int()));
		st.Ino = (new $Uint64(0, $clone($clone(jsSt, js.Value).Get("ino"), js.Value).Int()));
		st.Mode = (($clone($clone(jsSt, js.Value).Get("mode"), js.Value).Int() >>> 0));
		st.Nlink = (($clone($clone(jsSt, js.Value).Get("nlink"), js.Value).Int() >>> 0));
		st.Uid = (($clone($clone(jsSt, js.Value).Get("uid"), js.Value).Int() >>> 0));
		st.Gid = (($clone($clone(jsSt, js.Value).Get("gid"), js.Value).Int() >>> 0));
		st.Rdev = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("rdev"), js.Value).Int()));
		st.Size = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("size"), js.Value).Int()));
		st.Blksize = (($clone($clone(jsSt, js.Value).Get("blksize"), js.Value).Int() >> 0));
		st.Blocks = (($clone($clone(jsSt, js.Value).Get("blocks"), js.Value).Int() >> 0));
		atime = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("atimeMs"), js.Value).Float()));
		st.Atime = $div64(atime, new $Int64(0, 1000), false);
		st.AtimeNsec = $mul64(($div64(atime, new $Int64(0, 1000), true)), new $Int64(0, 1000000));
		mtime = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("mtimeMs"), js.Value).Float()));
		st.Mtime = $div64(mtime, new $Int64(0, 1000), false);
		st.MtimeNsec = $mul64(($div64(mtime, new $Int64(0, 1000), true)), new $Int64(0, 1000000));
		ctime = (new $Int64(0, $clone($clone(jsSt, js.Value).Get("ctimeMs"), js.Value).Float()));
		st.Ctime = $div64(ctime, new $Int64(0, 1000), false);
		st.CtimeNsec = $mul64(($div64(ctime, new $Int64(0, 1000), true)), new $Int64(0, 1000000));
	};
	fsCall = function(name, args) {
		var {$24r, $24r$1, _r$1, _r$2, args, c, f, name, res, $s, $deferred, $r, $c} = $restore(this, {name, args});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		c = [c];
		c[0] = new $Chan(callResult, 1);
		f = $clone(js.FuncOf((function(c) { return function $b(this$1, args$1) {
			var {args$1, jsErr, res, this$1, $s, $r, $c} = $restore(this, {this$1, args$1});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			res = new callResult.ptr(new js.Value.ptr(null, false, arrayType$2.zero()), $ifaceNil);
			if (args$1.$length >= 1) {
				jsErr = $clone((0 >= args$1.$length ? ($throwRuntimeError("index out of range"), undefined) : args$1.$array[args$1.$offset + 0]), js.Value);
				if (!$clone(jsErr, js.Value).IsUndefined() && !$clone(jsErr, js.Value).IsNull()) {
					res.err = mapJSError($clone(jsErr, js.Value));
				}
			}
			js.Value.copy(res.val, js.Undefined());
			if (args$1.$length >= 2) {
				js.Value.copy(res.val, (1 >= args$1.$length ? ($throwRuntimeError("index out of range"), undefined) : args$1.$array[args$1.$offset + 1]));
			}
			$r = $send(c[0], $clone($clone(res, callResult), callResult)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, args$1, jsErr, res, this$1, $s};return $f;
		}; })(c)), js.Func);
		$deferred.push([$methodVal($clone(f, js.Func), "Release"), []]);
		/* */ if ($clone($clone(jsFS, js.Value).Get(name), js.Value).IsUndefined()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone($clone(jsFS, js.Value).Get(name), js.Value).IsUndefined()) { */ case 1:
			$24r = [js.Undefined(), new Errno(38)];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		_r$1 = $clone(jsFS, js.Value).Call(name, $append(args, new f.constructor.elem(f))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = $recv(c[0]); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		res = $clone(_r$2[0], callResult);
		$24r$1 = [res.val, res.err];
		$s = 6; case 6: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new js.Value.ptr(null, false, arrayType$2.zero()), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: fsCall, $c: true, $r, $24r, $24r$1, _r$1, _r$2, args, c, f, name, res, $s, $deferred};return $f; } }
	};
	fdToFile = function(fd) {
		var {_entry, _tuple, f, fd, ok, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = filesMu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = (_entry = $mapIndex(files,$Int.keyFor(fd)), _entry !== undefined ? [_entry.v, true] : [ptrType$2.nil, false]);
		f = _tuple[0];
		ok = _tuple[1];
		$r = filesMu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!ok) {
			$s = -1; return [ptrType$2.nil, new Errno(9)];
		}
		$s = -1; return [f, $ifaceNil];
		/* */ } return; } var $f = {$blk: fdToFile, $c: true, $r, _entry, _tuple, f, fd, ok, $s};return $f;
	};
	Close = function(fd) {
		var {_r$1, _tuple, err, fd, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = filesMu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$mapDelete(files, $Int.keyFor(fd));
		$r = filesMu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = fsCall("close", new sliceType$2([new $Int(fd)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Close, $c: true, $r, _r$1, _tuple, err, fd, $s};return $f;
	};
	$pkg.Close = Close;
	CloseOnExec = function(fd) {
		var fd;
	};
	$pkg.CloseOnExec = CloseOnExec;
	ReadDirent = function(fd, buf) {
		var {_r$1, _tuple, buf, entry, err, f, fd, l, n, x, x$1, $s, $r, $c} = $restore(this, {fd, buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (f.entries === sliceType.nil) {
			$s = -1; return [0, new Errno(22)];
		}
		n = 0;
		while (true) {
			if (!(f.dirIdx < f.entries.$length)) { break; }
			entry = (x = f.entries, x$1 = f.dirIdx, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			l = 2 + entry.length >> 0;
			if (l > buf.$length) {
				break;
			}
			(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = ((l << 24 >>> 24)));
			(1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1] = (((l >> 8 >> 0) << 24 >>> 24)));
			$copyString($subslice(buf, 2), entry);
			buf = $subslice(buf, l);
			n = n + (l) >> 0;
			f.dirIdx = f.dirIdx + (1) >> 0;
		}
		$s = -1; return [n, $ifaceNil];
		/* */ } return; } var $f = {$blk: ReadDirent, $c: true, $r, _r$1, _tuple, buf, entry, err, f, fd, l, n, x, x$1, $s};return $f;
	};
	$pkg.ReadDirent = ReadDirent;
	Lstat = function(path, st) {
		var {_r$1, _tuple, err, err$1, jsSt, path, st, $s, $r, $c} = $restore(this, {path, st});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		err = checkPath(path);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = fsCall("lstat", new sliceType$2([new $String(path)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		jsSt = $clone(_tuple[0], js.Value);
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		setStat(st, $clone(jsSt, js.Value));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Lstat, $c: true, $r, _r$1, _tuple, err, err$1, jsSt, path, st, $s};return $f;
	};
	$pkg.Lstat = Lstat;
	Fstat = function(fd, st) {
		var {_r$1, _tuple, err, fd, jsSt, st, $s, $r, $c} = $restore(this, {fd, st});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("fstat", new sliceType$2([new $Int(fd)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		jsSt = $clone(_tuple[0], js.Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		setStat(st, $clone(jsSt, js.Value));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Fstat, $c: true, $r, _r$1, _tuple, err, fd, jsSt, st, $s};return $f;
	};
	$pkg.Fstat = Fstat;
	Fchmod = function(fd, mode) {
		var {_r$1, _tuple, err, fd, mode, $s, $r, $c} = $restore(this, {fd, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("fchmod", new sliceType$2([new $Int(fd), new $Uint32(mode)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Fchmod, $c: true, $r, _r$1, _tuple, err, fd, mode, $s};return $f;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var {_r$1, _tuple, err, fd, gid, uid, $s, $r, $c} = $restore(this, {fd, uid, gid});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("fchown", new sliceType$2([new $Int(fd), new $Uint32(((uid >>> 0))), new $Uint32(((gid >>> 0)))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Fchown, $c: true, $r, _r$1, _tuple, err, fd, gid, uid, $s};return $f;
	};
	$pkg.Fchown = Fchown;
	Ftruncate = function(fd, length) {
		var {_r$1, _tuple, err, fd, length, $s, $r, $c} = $restore(this, {fd, length});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("ftruncate", new sliceType$2([new $Int(fd), length])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Ftruncate, $c: true, $r, _r$1, _tuple, err, fd, length, $s};return $f;
	};
	$pkg.Ftruncate = Ftruncate;
	Chdir = function(path) {
		var {$24r, $24r$1, _r$1, err, err$1, path, $s, $deferred, $r, $c} = $restore(this, {path});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		err$1 = checkPath(path);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 1:
			err[0] = err$1;
			$24r = err[0];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([recoverErr, [(err.$ptr || (err.$ptr = new ptrType(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		_r$1 = $clone(jsProcess, js.Value).Call("chdir", new sliceType$2([new $String(path)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$24r$1 = err[0];
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { var $f = {$blk: Chdir, $c: true, $r, $24r, $24r$1, _r$1, err, err$1, path, $s, $deferred};return $f; } }
	};
	$pkg.Chdir = Chdir;
	Fchdir = function(fd) {
		var {$24r, _r$1, _r$2, _tuple, err, f, fd, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = Chdir(f.path); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Fchdir, $c: true, $r, $24r, _r$1, _r$2, _tuple, err, f, fd, $s};return $f;
	};
	$pkg.Fchdir = Fchdir;
	Fsync = function(fd) {
		var {_r$1, _tuple, err, fd, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fsCall("fsync", new sliceType$2([new $Int(fd)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Fsync, $c: true, $r, _r$1, _tuple, err, fd, $s};return $f;
	};
	$pkg.Fsync = Fsync;
	Read = function(fd, b) {
		var {_r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, buf, err, err$1, f, fd, n, n$1, n2, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {fd, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		/* */ if (f.seeked) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (f.seeked) { */ case 2:
			_r$2 = Pread(fd, b, f.pos); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			n = _tuple$1[0];
			err$1 = _tuple$1[1];
			f.pos = (x = f.pos, x$1 = (new $Int64(0, n)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			$s = -1; return [n, err$1];
		/* } */ case 3:
		_r$3 = $clone(uint8Array, js.Value).New(new sliceType$2([new $Int(b.$length)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		buf = $clone(_r$3, js.Value);
		_r$4 = fsCall("read", new sliceType$2([new $Int(fd), new buf.constructor.elem(buf), new $Int(0), new $Int(b.$length), $ifaceNil])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4;
		n$1 = $clone(_tuple$2[0], js.Value);
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		js.CopyBytesToGo(b, $clone(buf, js.Value));
		n2 = $clone(n$1, js.Value).Int();
		f.pos = (x$2 = f.pos, x$3 = (new $Int64(0, n2)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		$s = -1; return [n2, err];
		/* */ } return; } var $f = {$blk: Read, $c: true, $r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, buf, err, err$1, f, fd, n, n$1, n2, x, x$1, x$2, x$3, $s};return $f;
	};
	$pkg.Read = Read;
	Write = function(fd, b) {
		var {_r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, buf, err, err$1, f, fd, n, n$1, n$2, n2, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {fd, b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		/* */ if (f.seeked) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (f.seeked) { */ case 2:
			_r$2 = Pwrite(fd, b, f.pos); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			n = _tuple$1[0];
			err$1 = _tuple$1[1];
			f.pos = (x = f.pos, x$1 = (new $Int64(0, n)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			$s = -1; return [n, err$1];
		/* } */ case 3:
		if (false && ((fd === 1) || (fd === 2))) {
			n$1 = faketimeWrite(fd, b);
			if (n$1 < 0) {
				$s = -1; return [0, errnoErr(((-n$1 >>> 0)))];
			}
			$s = -1; return [n$1, $ifaceNil];
		}
		_r$3 = $clone(uint8Array, js.Value).New(new sliceType$2([new $Int(b.$length)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		buf = $clone(_r$3, js.Value);
		js.CopyBytesToJS($clone(buf, js.Value), b);
		_r$4 = fsCall("write", new sliceType$2([new $Int(fd), new buf.constructor.elem(buf), new $Int(0), new $Int(b.$length), $ifaceNil])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$2 = _r$4;
		n$2 = $clone(_tuple$2[0], js.Value);
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		n2 = $clone(n$2, js.Value).Int();
		f.pos = (x$2 = f.pos, x$3 = (new $Int64(0, n2)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		$s = -1; return [n2, err];
		/* */ } return; } var $f = {$blk: Write, $c: true, $r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, buf, err, err$1, f, fd, n, n$1, n$2, n2, x, x$1, x$2, x$3, $s};return $f;
	};
	$pkg.Write = Write;
	Pread = function(fd, b, offset) {
		var {_r$1, _r$2, _tuple, b, buf, err, fd, n, offset, $s, $r, $c} = $restore(this, {fd, b, offset});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = $clone(uint8Array, js.Value).New(new sliceType$2([new $Int(b.$length)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		buf = $clone(_r$1, js.Value);
		_r$2 = fsCall("read", new sliceType$2([new $Int(fd), new buf.constructor.elem(buf), new $Int(0), new $Int(b.$length), offset])); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = $clone(_tuple[0], js.Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		js.CopyBytesToGo(b, $clone(buf, js.Value));
		$s = -1; return [$clone(n, js.Value).Int(), $ifaceNil];
		/* */ } return; } var $f = {$blk: Pread, $c: true, $r, _r$1, _r$2, _tuple, b, buf, err, fd, n, offset, $s};return $f;
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, b, offset) {
		var {_r$1, _r$2, _tuple, b, buf, err, fd, n, offset, $s, $r, $c} = $restore(this, {fd, b, offset});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = $clone(uint8Array, js.Value).New(new sliceType$2([new $Int(b.$length)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		buf = $clone(_r$1, js.Value);
		js.CopyBytesToJS($clone(buf, js.Value), b);
		_r$2 = fsCall("write", new sliceType$2([new $Int(fd), new buf.constructor.elem(buf), new $Int(0), new $Int(b.$length), offset])); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = $clone(_tuple[0], js.Value);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$s = -1; return [$clone(n, js.Value).Int(), $ifaceNil];
		/* */ } return; } var $f = {$blk: Pwrite, $c: true, $r, _r$1, _r$2, _tuple, b, buf, err, fd, n, offset, $s};return $f;
	};
	$pkg.Pwrite = Pwrite;
	Seek = function(fd, offset, whence) {
		var {_1, _r$1, _r$2, _tuple, err, err$1, f, fd, newPos, offset, st, whence, x, x$1, $s, $r, $c} = $restore(this, {fd, offset, whence});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		st = [st];
		_r$1 = fdToFile(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		newPos = new $Int64(0, 0);
			_1 = whence;
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ if (_1 === (2)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 3:
				newPos = offset;
				$s = 7; continue;
			/* } else if (_1 === (1)) { */ case 4:
				newPos = (x = f.pos, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 5:
				st[0] = new Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0));
				_r$2 = Fstat(fd, st[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err$1 = _r$2;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [new $Int64(0, 0), err$1];
				}
				newPos = (x$1 = st[0].Size, new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
				$s = 7; continue;
			/* } else { */ case 6:
				$s = -1; return [new $Int64(0, 0), errnoErr(22)];
			/* } */ case 7:
		case 2:
		if ((newPos.$high < 0 || (newPos.$high === 0 && newPos.$low < 0))) {
			$s = -1; return [new $Int64(0, 0), errnoErr(22)];
		}
		f.seeked = true;
		f.dirIdx = 0;
		f.pos = newPos;
		$s = -1; return [newPos, $ifaceNil];
		/* */ } return; } var $f = {$blk: Seek, $c: true, $r, _1, _r$1, _r$2, _tuple, err, err$1, f, fd, newPos, offset, st, whence, x, x$1, $s};return $f;
	};
	$pkg.Seek = Seek;
	Dup = function(fd) {
		var fd;
		return [0, new Errno(38)];
	};
	$pkg.Dup = Dup;
	checkPath = function(path) {
		var i, path;
		if (path === "") {
			return new Errno(22);
		}
		i = 0;
		while (true) {
			if (!(i < path.length)) { break; }
			if (path.charCodeAt(i) === 0) {
				return new Errno(22);
			}
			i = i + (1) >> 0;
		}
		return $ifaceNil;
	};
	recoverErr = function(errPtr) {
		var _tuple, err, errPtr, jsErr, ok;
		err = $recover();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tuple = $assertType(err, js.Error, true);
			jsErr = $clone(_tuple[0], js.Error);
			ok = _tuple[1];
			if (!ok) {
				$panic(err);
			}
			errPtr.$set(mapJSError($clone(jsErr.Value, js.Value)));
		}
	};
	mapJSError = function(jsErr) {
		var _entry, _tuple, errno, jsErr, ok;
		_tuple = (_entry = $mapIndex(errnoByCode,$String.keyFor($clone($clone(jsErr, js.Value).Get("code"), js.Value).String())), _entry !== undefined ? [_entry.v, true] : [0, false]);
		errno = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$panic(new jsErr.constructor.elem(jsErr));
		}
		return errnoErr((errno));
	};
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Is", name: "Is", pkg: "", typ: $funcType([$error], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	Stat_t.init("", [{prop: "Dev", name: "Dev", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Ino", name: "Ino", embedded: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Mode", name: "Mode", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Nlink", name: "Nlink", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Uid", name: "Uid", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Size", name: "Size", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", embedded: false, exported: true, typ: $Int32, tag: ""}, {prop: "Blocks", name: "Blocks", embedded: false, exported: true, typ: $Int32, tag: ""}, {prop: "Atime", name: "Atime", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "AtimeNsec", name: "AtimeNsec", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Mtime", name: "Mtime", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "MtimeNsec", name: "MtimeNsec", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "Ctime", name: "Ctime", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "CtimeNsec", name: "CtimeNsec", embedded: false, exported: true, typ: $Int64, tag: ""}]);
	Iovec.init("", []);
	Sockaddr.init([]);
	SockaddrInet4.init("", [{prop: "Port", name: "Port", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$3, tag: ""}]);
	SockaddrInet6.init("", [{prop: "Port", name: "Port", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "ZoneId", name: "ZoneId", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", embedded: false, exported: true, typ: arrayType$4, tag: ""}]);
	RawConn.init([{prop: "Control", name: "Control", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([funcType$2], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([funcType$2], [$error], false)}]);
	jsFile.init("syscall", [{prop: "path", name: "path", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "entries", name: "entries", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "dirIdx", name: "dirIdx", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "pos", name: "pos", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "seeked", name: "seeked", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	callResult.init("syscall", [{prop: "val", name: "val", embedded: false, exported: false, typ: js.Value, tag: ""}, {prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = itoa.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ForkLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		filesMu = new sync.Mutex.ptr(0, 0);
		errorstr = $toNativeArray($kindString, ["", "Operation not permitted", "No such file or directory", "No such process", "Interrupted system call", "I/O error", "No such device or address", "Argument list too long", "Exec format error", "Bad file number", "No child processes", "Try again", "Out of memory", "Permission denied", "Bad address", "", "Device or resource busy", "File exists", "Cross-device link", "No such device", "Not a directory", "Is a directory", "Invalid argument", "File table overflow", "Too many open files", "Not a typewriter", "", "File too large", "No space left on device", "Illegal seek", "Read-only file system", "Too many links", "Broken pipe", "Math arg out of domain of func", "Math result not representable", "Deadlock condition", "File name too long", "No record locks available", "not implemented on js", "Directory not empty", "Too many symbolic links", "", "No message of desired type", "Identifier removed", "Channel number out of range", "Level 2 not synchronized", "Level 3 halted", "Level 3 reset", "Link number out of range", "Protocol driver not attached", "No CSI structure available", "Level 2 halted", "Invalid exchange", "Invalid request descriptor", "Exchange full", "No anode", "Invalid request code", "Invalid slot", "", "Bad font file fmt", "Device not a stream", "No data (for no delay io)", "Timer expired", "Out of streams resources", "Machine is not on the network", "Package not installed", "The object is remote", "The link has been severed", "Advertise error", "Srmount error", "Communication error on send", "Protocol error", "Multihop attempted", "Cross mount point (not really error)", "Trying to read unreadable message", "Value too large for defined data type", "Given log. name not unique", "f.d. invalid for this operation", "Remote address changed", "Can't access a needed shared lib", "Accessing a corrupted shared lib", ".lib section in a.out corrupted", "Attempting to link in too many libs", "Attempting to exec a shared library", "", "", "", "", "Socket operation on non-socket", "Destination address required", "Message too long", "Protocol wrong type for socket", "Protocol not available", "Unknown protocol", "Socket type not supported", "Operation not supported on transport endpoint", "Protocol family not supported", "Address family not supported by protocol family", "Address already in use", "Address not available", "Network interface is not configured", "Network is unreachable", "", "Connection aborted", "Connection reset by peer", "No buffer space available", "Socket is already connected", "Socket is not connected", "Can't send after socket shutdown", "", "Connection timed out", "Connection refused", "Host is down", "Host is unreachable", "Socket already connected", "Connection already in progress", "", "", "", "", "", "", "Quota exceeded", "No medium (in tape drive)", "", "Operation cancelednode is remote (not really error)", "Inappropriate file type or format", "No more files", "", "No such host or network path", "Filename exists with different case"]);
		errEAGAIN = new Errno(11);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errnoByCode = $makeMap($String.keyFor, [{ k: "EPERM", v: 1 }, { k: "ENOENT", v: 2 }, { k: "ESRCH", v: 3 }, { k: "EINTR", v: 4 }, { k: "EIO", v: 5 }, { k: "ENXIO", v: 6 }, { k: "E2BIG", v: 7 }, { k: "ENOEXEC", v: 8 }, { k: "EBADF", v: 9 }, { k: "ECHILD", v: 10 }, { k: "EAGAIN", v: 11 }, { k: "ENOMEM", v: 12 }, { k: "EACCES", v: 13 }, { k: "EFAULT", v: 14 }, { k: "EBUSY", v: 16 }, { k: "EEXIST", v: 17 }, { k: "EXDEV", v: 18 }, { k: "ENODEV", v: 19 }, { k: "ENOTDIR", v: 20 }, { k: "EISDIR", v: 21 }, { k: "EINVAL", v: 22 }, { k: "ENFILE", v: 23 }, { k: "EMFILE", v: 24 }, { k: "ENOTTY", v: 25 }, { k: "EFBIG", v: 27 }, { k: "ENOSPC", v: 28 }, { k: "ESPIPE", v: 29 }, { k: "EROFS", v: 30 }, { k: "EMLINK", v: 31 }, { k: "EPIPE", v: 32 }, { k: "ENAMETOOLONG", v: 36 }, { k: "ENOSYS", v: 38 }, { k: "EDQUOT", v: 122 }, { k: "EDOM", v: 33 }, { k: "ERANGE", v: 34 }, { k: "EDEADLK", v: 35 }, { k: "ENOLCK", v: 37 }, { k: "ENOTEMPTY", v: 39 }, { k: "ELOOP", v: 40 }, { k: "ENOMSG", v: 42 }, { k: "EIDRM", v: 43 }, { k: "ECHRNG", v: 44 }, { k: "EL2NSYNC", v: 45 }, { k: "EL3HLT", v: 46 }, { k: "EL3RST", v: 47 }, { k: "ELNRNG", v: 48 }, { k: "EUNATCH", v: 49 }, { k: "ENOCSI", v: 50 }, { k: "EL2HLT", v: 51 }, { k: "EBADE", v: 52 }, { k: "EBADR", v: 53 }, { k: "EXFULL", v: 54 }, { k: "ENOANO", v: 55 }, { k: "EBADRQC", v: 56 }, { k: "EBADSLT", v: 57 }, { k: "EDEADLOCK", v: 35 }, { k: "EBFONT", v: 59 }, { k: "ENOSTR", v: 60 }, { k: "ENODATA", v: 61 }, { k: "ETIME", v: 62 }, { k: "ENOSR", v: 63 }, { k: "ENONET", v: 64 }, { k: "ENOPKG", v: 65 }, { k: "EREMOTE", v: 66 }, { k: "ENOLINK", v: 67 }, { k: "EADV", v: 68 }, { k: "ESRMNT", v: 69 }, { k: "ECOMM", v: 70 }, { k: "EPROTO", v: 71 }, { k: "EMULTIHOP", v: 72 }, { k: "EDOTDOT", v: 73 }, { k: "EBADMSG", v: 74 }, { k: "EOVERFLOW", v: 75 }, { k: "ENOTUNIQ", v: 76 }, { k: "EBADFD", v: 77 }, { k: "EREMCHG", v: 78 }, { k: "ELIBACC", v: 79 }, { k: "ELIBBAD", v: 80 }, { k: "ELIBSCN", v: 81 }, { k: "ELIBMAX", v: 82 }, { k: "ELIBEXEC", v: 83 }, { k: "EILSEQ", v: 84 }, { k: "EUSERS", v: 87 }, { k: "ENOTSOCK", v: 88 }, { k: "EDESTADDRREQ", v: 89 }, { k: "EMSGSIZE", v: 90 }, { k: "EPROTOTYPE", v: 91 }, { k: "ENOPROTOOPT", v: 92 }, { k: "EPROTONOSUPPORT", v: 93 }, { k: "ESOCKTNOSUPPORT", v: 94 }, { k: "EOPNOTSUPP", v: 95 }, { k: "EPFNOSUPPORT", v: 96 }, { k: "EAFNOSUPPORT", v: 97 }, { k: "EADDRINUSE", v: 98 }, { k: "EADDRNOTAVAIL", v: 99 }, { k: "ENETDOWN", v: 100 }, { k: "ENETUNREACH", v: 101 }, { k: "ENETRESET", v: 102 }, { k: "ECONNABORTED", v: 103 }, { k: "ECONNRESET", v: 104 }, { k: "ENOBUFS", v: 105 }, { k: "EISCONN", v: 106 }, { k: "ENOTCONN", v: 107 }, { k: "ESHUTDOWN", v: 108 }, { k: "ETOOMANYREFS", v: 109 }, { k: "ETIMEDOUT", v: 110 }, { k: "ECONNREFUSED", v: 111 }, { k: "EHOSTDOWN", v: 112 }, { k: "EHOSTUNREACH", v: 113 }, { k: "EALREADY", v: 114 }, { k: "EINPROGRESS", v: 115 }, { k: "ESTALE", v: 116 }, { k: "ENOTSUP", v: 95 }, { k: "ENOMEDIUM", v: 123 }, { k: "ECANCELED", v: 125 }, { k: "ELBIN", v: 2048 }, { k: "EFTYPE", v: 2049 }, { k: "ENMFILE", v: 2050 }, { k: "EPROCLIM", v: 2051 }, { k: "ENOSHARE", v: 2052 }, { k: "ECASECLASH", v: 2053 }, { k: "EWOULDBLOCK", v: 11 }]);
		jsProcess = $clone($clone(js.Global(), js.Value).Get("process"), js.Value);
		jsFS = $clone($clone(js.Global(), js.Value).Get("fs"), js.Value);
		constants = $clone($clone(jsFS, js.Value).Get("constants"), js.Value);
		uint8Array = $clone($clone(js.Global(), js.Value).Get("Uint8Array"), js.Value);
		nodeWRONLY = $clone($clone(constants, js.Value).Get("O_WRONLY"), js.Value).Int();
		nodeRDWR = $clone($clone(constants, js.Value).Get("O_RDWR"), js.Value).Int();
		nodeCREATE = $clone($clone(constants, js.Value).Get("O_CREAT"), js.Value).Int();
		nodeTRUNC = $clone($clone(constants, js.Value).Get("O_TRUNC"), js.Value).Int();
		nodeAPPEND = $clone($clone(constants, js.Value).Get("O_APPEND"), js.Value).Int();
		nodeEXCL = $clone($clone(constants, js.Value).Get("O_EXCL"), js.Value).Int();
		files = $makeMap($Int.keyFor, [{ k: 0, v: new jsFile.ptr("", sliceType.nil, 0, new $Int64(0, 0), false) }, { k: 1, v: new jsFile.ptr("", sliceType.nil, 0, new $Int64(0, 0), false) }, { k: 2, v: new jsFile.ptr("", sliceType.nil, 0, new $Int64(0, 0), false) }]);
		_r = runtime_envs(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		envs = _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/unix"] = (function() {
	var $pkg = {}, $init, syscall, IsNonblock, RecvfromInet4, RecvfromInet6, SendtoInet4, SendtoInet6, SendmsgNInet4, SendmsgNInet6, RecvmsgInet4, RecvmsgInet6;
	syscall = $packages["syscall"];
	IsNonblock = function(fd) {
		var _tmp, _tmp$1, err, fd, nonblocking;
		nonblocking = false;
		err = $ifaceNil;
		_tmp = false;
		_tmp$1 = $ifaceNil;
		nonblocking = _tmp;
		err = _tmp$1;
		return [nonblocking, err];
	};
	$pkg.IsNonblock = IsNonblock;
	RecvfromInet4 = function(fd, p, flags, from) {
		var fd, flags, from, p;
		return [0, new syscall.Errno(38)];
	};
	$pkg.RecvfromInet4 = RecvfromInet4;
	RecvfromInet6 = function(fd, p, flags, from) {
		var _tmp, _tmp$1, err, fd, flags, from, n, p;
		n = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = new syscall.Errno(38);
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$pkg.RecvfromInet6 = RecvfromInet6;
	SendtoInet4 = function(fd, p, flags, to) {
		var err, fd, flags, p, to;
		err = $ifaceNil;
		err = new syscall.Errno(38);
		return err;
	};
	$pkg.SendtoInet4 = SendtoInet4;
	SendtoInet6 = function(fd, p, flags, to) {
		var err, fd, flags, p, to;
		err = $ifaceNil;
		err = new syscall.Errno(38);
		return err;
	};
	$pkg.SendtoInet6 = SendtoInet6;
	SendmsgNInet4 = function(fd, p, oob, to, flags) {
		var _tmp, _tmp$1, err, fd, flags, n, oob, p, to;
		n = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = new syscall.Errno(38);
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$pkg.SendmsgNInet4 = SendmsgNInet4;
	SendmsgNInet6 = function(fd, p, oob, to, flags) {
		var _tmp, _tmp$1, err, fd, flags, n, oob, p, to;
		n = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = new syscall.Errno(38);
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$pkg.SendmsgNInet6 = SendmsgNInet6;
	RecvmsgInet4 = function(fd, p, oob, flags, from) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, err, fd, flags, from, n, oob, oobn, p, recvflags;
		n = 0;
		oobn = 0;
		recvflags = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = new syscall.Errno(38);
		n = _tmp;
		oobn = _tmp$1;
		recvflags = _tmp$2;
		err = _tmp$3;
		return [n, oobn, recvflags, err];
	};
	$pkg.RecvmsgInet4 = RecvmsgInet4;
	RecvmsgInet6 = function(fd, p, oob, flags, from) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, err, fd, flags, from, n, oob, oobn, p, recvflags;
		n = 0;
		oobn = 0;
		recvflags = 0;
		err = $ifaceNil;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = new syscall.Errno(38);
		n = _tmp;
		oobn = _tmp$1;
		recvflags = _tmp$2;
		err = _tmp$3;
		return [n, oobn, recvflags, err];
	};
	$pkg.RecvmsgInet6 = RecvmsgInet6;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = syscall.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Pool, Once, sliceType, ptrType, funcType, funcType$1, ptrType$1;
	Pool = $pkg.Pool = $newType(0, $kindStruct, "nosync.Pool", true, "github.com/gopherjs/gopherjs/nosync", true, function(store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.store = sliceType.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.store = store_;
		this.New = New_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Pool);
	funcType = $funcType([], [$emptyInterface], false);
	funcType$1 = $funcType([], [], false);
	ptrType$1 = $ptrType(Once);
	Pool.ptr.prototype.Get = function() {
		var {$24r, _r, p, x, x$1, x$2, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } var $f = {$blk: Pool.ptr.prototype.Get, $c: true, $r, $24r, _r, p, x, x$1, x$2, $s};return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	Once.ptr.prototype.Do = function(f) {
		var {f, o, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		/* */ if (o[0].done) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (o[0].done) { */ case 1:
			$s = 3; case 3: return;
		/* } */ case 2:
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Once.ptr.prototype.Do, $c: true, $r, f, o, $s, $deferred};return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$1.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	Pool.init("github.com/gopherjs/gopherjs/nosync", [{prop: "store", name: "store", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: funcType, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, Location, zone, zoneTrans, ruleKind, rule, Time, Month, Weekday, Duration, ParseError, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, ptrType$2, arrayType$2, structType, arrayType$3, arrayType$4, arrayType$5, ptrType$4, ptrType$8, badData, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, errLocation, daysBefore, startNano, zoneSources, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, unitMap, x, _r, FixedZone, tzset, tzsetName, tzsetOffset, tzsetRule, tzsetNum, tzruleTime, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, Since, absDate, daysIn, daysSinceEpoch, runtimeNano, Now, unixTime, Unix, isLeap, norm, Date, div, initLocal, itoa, init, now, Sleep, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, stdFracSecond, digitsLen, separator, formatNano, quote, isDigit, getnum, getnum3, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseSignedOffset, commaOrPeriod, parseNanoseconds, leadingInt, leadingFraction, ParseDuration;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, extend_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.extend = "";
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.extend = extend_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	ruleKind = $pkg.ruleKind = $newType(4, $kindInt, "time.ruleKind", true, "time", false, null);
	rule = $pkg.rule = $newType(0, $kindStruct, "time.rule", true, "time", false, function(kind_, day_, week_, mon_, time_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.kind = 0;
			this.day = 0;
			this.week = 0;
			this.mon = 0;
			this.time = 0;
			return;
		}
		this.kind = kind_;
		this.day = day_;
		this.week = week_;
		this.mon = mon_;
		this.time = time_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wall = new $Uint64(0, 0);
			this.ext = new $Int64(0, 0);
			this.loc = ptrType$2.nil;
			return;
		}
		this.wall = wall_;
		this.ext = ext_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	sliceType$3 = $sliceType($Uint8);
	ptrType$2 = $ptrType(Location);
	arrayType$2 = $arrayType($Uint8, 32);
	structType = $structType("", []);
	arrayType$3 = $arrayType($Uint8, 20);
	arrayType$4 = $arrayType($Uint8, 9);
	arrayType$5 = $arrayType($Uint8, 64);
	ptrType$4 = $ptrType(Time);
	ptrType$8 = $ptrType(ParseError);
	Location.ptr.prototype.get = function() {
		var {l, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$2.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } var $f = {$blk: Location.ptr.prototype.get, $c: true, $r, l, $s};return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var {$24r, _r$1, l, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1.name;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Location.ptr.prototype.String, $c: true, $r, $24r, _r$1, l, $s};return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var l, name, offset, x$1;
		l = new Location.ptr(name, new sliceType([$clone(new zone.ptr(name, offset, false), zone)]), new sliceType$1([$clone(new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false), zoneTrans)]), "", new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x$1 = l.zone, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var {_q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, eend, eisDST, ename, end, eoffset, estart, hi, isDST, l, lim, lo, m, name, offset, ok, sec, start, tx, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, zone$1, zone$2, zone$3, $s, $r, $c} = $restore(this, {sec});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		isDST = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			isDST = false;
			$s = -1; return [name, offset, start, end, isDST];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			start = l.cacheStart;
			end = l.cacheEnd;
			isDST = zone$1.isDST;
			$s = -1; return [name, offset, start, end, isDST];
		}
		if ((l.tx.$length === 0) || (x$3 = (x$4 = l.tx, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).when, (sec.$high < x$3.$high || (sec.$high === x$3.$high && sec.$low < x$3.$low)))) {
			zone$2 = (x$5 = l.zone, x$6 = l.lookupFirstZone(), ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
			name = zone$2.name;
			offset = zone$2.offset;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$7 = l.tx, (0 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			isDST = zone$2.isDST;
			$s = -1; return [name, offset, start, end, isDST];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$8 = l.zone, x$9 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9]));
		name = zone$3.name;
		offset = zone$3.offset;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		isDST = zone$3.isDST;
		if ((lo === (tx.$length - 1 >> 0)) && !(l.extend === "")) {
			_tuple = tzset(l.extend, end, sec);
			ename = _tuple[0];
			eoffset = _tuple[1];
			estart = _tuple[2];
			eend = _tuple[3];
			eisDST = _tuple[4];
			ok = _tuple[5];
			if (ok) {
				_tmp = ename;
				_tmp$1 = eoffset;
				_tmp$2 = estart;
				_tmp$3 = eend;
				_tmp$4 = eisDST;
				name = _tmp;
				offset = _tmp$1;
				start = _tmp$2;
				end = _tmp$3;
				isDST = _tmp$4;
				$s = -1; return [name, offset, start, end, isDST];
			}
		}
		$s = -1; return [name, offset, start, end, isDST];
		/* */ } return; } var $f = {$blk: Location.ptr.prototype.lookup, $c: true, $r, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, eend, eisDST, ename, end, eoffset, estart, hi, isDST, l, lim, lo, m, name, offset, ok, sec, start, tx, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, zone$1, zone$2, zone$3, $s};return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x$1, x$2, x$3, x$4, x$5, x$6, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x$1 = l.zone, x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])).isDST) {
			zi = (((x$4 = l.tx, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$5 = l.zone, ((zi < 0 || zi >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$6 = l.zone, ((zi$1 < 0 || zi$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	tzset = function(s, initEnd, sec) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, abs, d, dstIsDST, dstName, dstOffset, end, endRule, endSec, initEnd, isDST, name, offset, ok, s, sec, start, startRule, startSec, stdIsDST, stdName, stdOffset, x$1, x$2, x$3, x$4, x$5, x$6, yday, year, ysec;
		name = "";
		offset = 0;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		isDST = false;
		ok = false;
		_tmp = "";
		_tmp$1 = "";
		stdName = _tmp;
		dstName = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		stdOffset = _tmp$2;
		dstOffset = _tmp$3;
		_tuple = tzsetName(s);
		stdName = _tuple[0];
		s = _tuple[1];
		ok = _tuple[2];
		if (ok) {
			_tuple$1 = tzsetOffset(s);
			stdOffset = _tuple$1[0];
			s = _tuple$1[1];
			ok = _tuple$1[2];
		}
		if (!ok) {
			_tmp$4 = "";
			_tmp$5 = 0;
			_tmp$6 = new $Int64(0, 0);
			_tmp$7 = new $Int64(0, 0);
			_tmp$8 = false;
			_tmp$9 = false;
			name = _tmp$4;
			offset = _tmp$5;
			start = _tmp$6;
			end = _tmp$7;
			isDST = _tmp$8;
			ok = _tmp$9;
			return [name, offset, start, end, isDST, ok];
		}
		stdOffset = -stdOffset;
		if ((s.length === 0) || (s.charCodeAt(0) === 44)) {
			_tmp$10 = stdName;
			_tmp$11 = stdOffset;
			_tmp$12 = initEnd;
			_tmp$13 = new $Int64(2147483647, 4294967295);
			_tmp$14 = false;
			_tmp$15 = true;
			name = _tmp$10;
			offset = _tmp$11;
			start = _tmp$12;
			end = _tmp$13;
			isDST = _tmp$14;
			ok = _tmp$15;
			return [name, offset, start, end, isDST, ok];
		}
		_tuple$2 = tzsetName(s);
		dstName = _tuple$2[0];
		s = _tuple$2[1];
		ok = _tuple$2[2];
		if (ok) {
			if ((s.length === 0) || (s.charCodeAt(0) === 44)) {
				dstOffset = stdOffset + 3600 >> 0;
			} else {
				_tuple$3 = tzsetOffset(s);
				dstOffset = _tuple$3[0];
				s = _tuple$3[1];
				ok = _tuple$3[2];
				dstOffset = -dstOffset;
			}
		}
		if (!ok) {
			_tmp$16 = "";
			_tmp$17 = 0;
			_tmp$18 = new $Int64(0, 0);
			_tmp$19 = new $Int64(0, 0);
			_tmp$20 = false;
			_tmp$21 = false;
			name = _tmp$16;
			offset = _tmp$17;
			start = _tmp$18;
			end = _tmp$19;
			isDST = _tmp$20;
			ok = _tmp$21;
			return [name, offset, start, end, isDST, ok];
		}
		if (s.length === 0) {
			s = ",M3.2.0,M11.1.0";
		}
		if (!((s.charCodeAt(0) === 44)) && !((s.charCodeAt(0) === 59))) {
			_tmp$22 = "";
			_tmp$23 = 0;
			_tmp$24 = new $Int64(0, 0);
			_tmp$25 = new $Int64(0, 0);
			_tmp$26 = false;
			_tmp$27 = false;
			name = _tmp$22;
			offset = _tmp$23;
			start = _tmp$24;
			end = _tmp$25;
			isDST = _tmp$26;
			ok = _tmp$27;
			return [name, offset, start, end, isDST, ok];
		}
		s = $substring(s, 1);
		_tmp$28 = new rule.ptr(0, 0, 0, 0, 0);
		_tmp$29 = new rule.ptr(0, 0, 0, 0, 0);
		startRule = $clone(_tmp$28, rule);
		endRule = $clone(_tmp$29, rule);
		_tuple$4 = tzsetRule(s);
		rule.copy(startRule, _tuple$4[0]);
		s = _tuple$4[1];
		ok = _tuple$4[2];
		if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 44))) {
			_tmp$30 = "";
			_tmp$31 = 0;
			_tmp$32 = new $Int64(0, 0);
			_tmp$33 = new $Int64(0, 0);
			_tmp$34 = false;
			_tmp$35 = false;
			name = _tmp$30;
			offset = _tmp$31;
			start = _tmp$32;
			end = _tmp$33;
			isDST = _tmp$34;
			ok = _tmp$35;
			return [name, offset, start, end, isDST, ok];
		}
		s = $substring(s, 1);
		_tuple$5 = tzsetRule(s);
		rule.copy(endRule, _tuple$5[0]);
		s = _tuple$5[1];
		ok = _tuple$5[2];
		if (!ok || s.length > 0) {
			_tmp$36 = "";
			_tmp$37 = 0;
			_tmp$38 = new $Int64(0, 0);
			_tmp$39 = new $Int64(0, 0);
			_tmp$40 = false;
			_tmp$41 = false;
			name = _tmp$36;
			offset = _tmp$37;
			start = _tmp$38;
			end = _tmp$39;
			isDST = _tmp$40;
			ok = _tmp$41;
			return [name, offset, start, end, isDST, ok];
		}
		_tuple$6 = absDate(((x$1 = (x$2 = new $Int64(sec.$high + 14, sec.$low + 2006054656), new $Int64(x$2.$high + 2147483631, x$2.$low + 2739393024)), new $Uint64(x$1.$high, x$1.$low))), false);
		year = _tuple$6[0];
		yday = _tuple$6[3];
		ysec = (x$3 = (new $Int64(0, ($imul(yday, 86400)))), x$4 = $div64(sec, new $Int64(0, 86400), true), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
		d = daysSinceEpoch(year);
		abs = ((x$5 = $mul64(d, new $Uint64(0, 86400)), new $Int64(x$5.$high, x$5.$low)));
		abs = (x$6 = new $Int64(-2147483647, 3844486912), new $Int64(abs.$high + x$6.$high, abs.$low + x$6.$low));
		startSec = (new $Int64(0, tzruleTime(year, $clone(startRule, rule), stdOffset)));
		endSec = (new $Int64(0, tzruleTime(year, $clone(endRule, rule), dstOffset)));
		_tmp$42 = true;
		_tmp$43 = false;
		dstIsDST = _tmp$42;
		stdIsDST = _tmp$43;
		if ((endSec.$high < startSec.$high || (endSec.$high === startSec.$high && endSec.$low < startSec.$low))) {
			_tmp$44 = endSec;
			_tmp$45 = startSec;
			startSec = _tmp$44;
			endSec = _tmp$45;
			_tmp$46 = dstName;
			_tmp$47 = stdName;
			stdName = _tmp$46;
			dstName = _tmp$47;
			_tmp$48 = dstOffset;
			_tmp$49 = stdOffset;
			stdOffset = _tmp$48;
			dstOffset = _tmp$49;
			_tmp$50 = dstIsDST;
			_tmp$51 = stdIsDST;
			stdIsDST = _tmp$50;
			dstIsDST = _tmp$51;
		}
		if ((ysec.$high < startSec.$high || (ysec.$high === startSec.$high && ysec.$low < startSec.$low))) {
			_tmp$52 = stdName;
			_tmp$53 = stdOffset;
			_tmp$54 = abs;
			_tmp$55 = new $Int64(startSec.$high + abs.$high, startSec.$low + abs.$low);
			_tmp$56 = stdIsDST;
			_tmp$57 = true;
			name = _tmp$52;
			offset = _tmp$53;
			start = _tmp$54;
			end = _tmp$55;
			isDST = _tmp$56;
			ok = _tmp$57;
			return [name, offset, start, end, isDST, ok];
		} else if ((ysec.$high > endSec.$high || (ysec.$high === endSec.$high && ysec.$low >= endSec.$low))) {
			_tmp$58 = stdName;
			_tmp$59 = stdOffset;
			_tmp$60 = new $Int64(endSec.$high + abs.$high, endSec.$low + abs.$low);
			_tmp$61 = new $Int64(abs.$high + 0, abs.$low + 31536000);
			_tmp$62 = stdIsDST;
			_tmp$63 = true;
			name = _tmp$58;
			offset = _tmp$59;
			start = _tmp$60;
			end = _tmp$61;
			isDST = _tmp$62;
			ok = _tmp$63;
			return [name, offset, start, end, isDST, ok];
		} else {
			_tmp$64 = dstName;
			_tmp$65 = dstOffset;
			_tmp$66 = new $Int64(startSec.$high + abs.$high, startSec.$low + abs.$low);
			_tmp$67 = new $Int64(endSec.$high + abs.$high, endSec.$low + abs.$low);
			_tmp$68 = dstIsDST;
			_tmp$69 = true;
			name = _tmp$64;
			offset = _tmp$65;
			start = _tmp$66;
			end = _tmp$67;
			isDST = _tmp$68;
			ok = _tmp$69;
			return [name, offset, start, end, isDST, ok];
		}
	};
	tzsetName = function(s) {
		var _1, _i, _i$1, _ref, _ref$1, _rune, _rune$1, i, i$1, r, r$1, s;
		if (s.length === 0) {
			return ["", "", false];
		}
		if (!((s.charCodeAt(0) === 60))) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r = _rune[0];
				_1 = r;
				if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55)) || (_1 === (56)) || (_1 === (57)) || (_1 === (44)) || (_1 === (45)) || (_1 === (43))) {
					if (i < 3) {
						return ["", "", false];
					}
					return [$substring(s, 0, i), $substring(s, i), true];
				}
				_i += _rune[1];
			}
			if (s.length < 3) {
				return ["", "", false];
			}
			return [s, "", true];
		} else {
			_ref$1 = s;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.length)) { break; }
				_rune$1 = $decodeRune(_ref$1, _i$1);
				i$1 = _i$1;
				r$1 = _rune$1[0];
				if (r$1 === 62) {
					return [$substring(s, 1, i$1), $substring(s, (i$1 + 1 >> 0)), true];
				}
				_i$1 += _rune$1[1];
			}
			return ["", "", false];
		}
	};
	tzsetOffset = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, hours, mins, neg, off, offset, ok, rest, s, secs;
		offset = 0;
		rest = "";
		ok = false;
		if (s.length === 0) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = false;
			offset = _tmp;
			rest = _tmp$1;
			ok = _tmp$2;
			return [offset, rest, ok];
		}
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			s = $substring(s, 1);
			neg = true;
		}
		hours = 0;
		_tuple = tzsetNum(s, 0, 168);
		hours = _tuple[0];
		s = _tuple[1];
		ok = _tuple[2];
		if (!ok) {
			_tmp$3 = 0;
			_tmp$4 = "";
			_tmp$5 = false;
			offset = _tmp$3;
			rest = _tmp$4;
			ok = _tmp$5;
			return [offset, rest, ok];
		}
		off = $imul(hours, 3600);
		if ((s.length === 0) || !((s.charCodeAt(0) === 58))) {
			if (neg) {
				off = -off;
			}
			_tmp$6 = off;
			_tmp$7 = s;
			_tmp$8 = true;
			offset = _tmp$6;
			rest = _tmp$7;
			ok = _tmp$8;
			return [offset, rest, ok];
		}
		mins = 0;
		_tuple$1 = tzsetNum($substring(s, 1), 0, 59);
		mins = _tuple$1[0];
		s = _tuple$1[1];
		ok = _tuple$1[2];
		if (!ok) {
			_tmp$9 = 0;
			_tmp$10 = "";
			_tmp$11 = false;
			offset = _tmp$9;
			rest = _tmp$10;
			ok = _tmp$11;
			return [offset, rest, ok];
		}
		off = off + (($imul(mins, 60))) >> 0;
		if ((s.length === 0) || !((s.charCodeAt(0) === 58))) {
			if (neg) {
				off = -off;
			}
			_tmp$12 = off;
			_tmp$13 = s;
			_tmp$14 = true;
			offset = _tmp$12;
			rest = _tmp$13;
			ok = _tmp$14;
			return [offset, rest, ok];
		}
		secs = 0;
		_tuple$2 = tzsetNum($substring(s, 1), 0, 59);
		secs = _tuple$2[0];
		s = _tuple$2[1];
		ok = _tuple$2[2];
		if (!ok) {
			_tmp$15 = 0;
			_tmp$16 = "";
			_tmp$17 = false;
			offset = _tmp$15;
			rest = _tmp$16;
			ok = _tmp$17;
			return [offset, rest, ok];
		}
		off = off + (secs) >> 0;
		if (neg) {
			off = -off;
		}
		_tmp$18 = off;
		_tmp$19 = s;
		_tmp$20 = true;
		offset = _tmp$18;
		rest = _tmp$19;
		ok = _tmp$20;
		return [offset, rest, ok];
	};
	tzsetRule = function(s) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, day, day$1, jday, mon, offset, ok, r, s, week;
		r = new rule.ptr(0, 0, 0, 0, 0);
		if (s.length === 0) {
			return [new rule.ptr(0, 0, 0, 0, 0), "", false];
		}
		ok = false;
		if (s.charCodeAt(0) === 74) {
			jday = 0;
			_tuple = tzsetNum($substring(s, 1), 1, 365);
			jday = _tuple[0];
			s = _tuple[1];
			ok = _tuple[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 0;
			r.day = jday;
		} else if (s.charCodeAt(0) === 77) {
			mon = 0;
			_tuple$1 = tzsetNum($substring(s, 1), 1, 12);
			mon = _tuple$1[0];
			s = _tuple$1[1];
			ok = _tuple$1[2];
			if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 46))) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			week = 0;
			_tuple$2 = tzsetNum($substring(s, 1), 1, 5);
			week = _tuple$2[0];
			s = _tuple$2[1];
			ok = _tuple$2[2];
			if (!ok || (s.length === 0) || !((s.charCodeAt(0) === 46))) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			day = 0;
			_tuple$3 = tzsetNum($substring(s, 1), 0, 6);
			day = _tuple$3[0];
			s = _tuple$3[1];
			ok = _tuple$3[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 2;
			r.day = day;
			r.week = week;
			r.mon = mon;
		} else {
			day$1 = 0;
			_tuple$4 = tzsetNum(s, 0, 365);
			day$1 = _tuple$4[0];
			s = _tuple$4[1];
			ok = _tuple$4[2];
			if (!ok) {
				return [new rule.ptr(0, 0, 0, 0, 0), "", false];
			}
			r.kind = 1;
			r.day = day$1;
		}
		if ((s.length === 0) || !((s.charCodeAt(0) === 47))) {
			r.time = 7200;
			return [r, s, true];
		}
		_tuple$5 = tzsetOffset($substring(s, 1));
		offset = _tuple$5[0];
		s = _tuple$5[1];
		ok = _tuple$5[2];
		if (!ok) {
			return [new rule.ptr(0, 0, 0, 0, 0), "", false];
		}
		r.time = offset;
		return [r, s, true];
	};
	tzsetNum = function(s, min, max) {
		var _i, _ref, _rune, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, i, max, min, num, ok, r, rest, s;
		num = 0;
		rest = "";
		ok = false;
		if (s.length === 0) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = false;
			num = _tmp;
			rest = _tmp$1;
			ok = _tmp$2;
			return [num, rest, ok];
		}
		num = 0;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if (r < 48 || r > 57) {
				if ((i === 0) || num < min) {
					_tmp$3 = 0;
					_tmp$4 = "";
					_tmp$5 = false;
					num = _tmp$3;
					rest = _tmp$4;
					ok = _tmp$5;
					return [num, rest, ok];
				}
				_tmp$6 = num;
				_tmp$7 = $substring(s, i);
				_tmp$8 = true;
				num = _tmp$6;
				rest = _tmp$7;
				ok = _tmp$8;
				return [num, rest, ok];
			}
			num = $imul(num, (10));
			num = num + ((((r >> 0)) - 48 >> 0)) >> 0;
			if (num > max) {
				_tmp$9 = 0;
				_tmp$10 = "";
				_tmp$11 = false;
				num = _tmp$9;
				rest = _tmp$10;
				ok = _tmp$11;
				return [num, rest, ok];
			}
			_i += _rune[1];
		}
		if (num < min) {
			_tmp$12 = 0;
			_tmp$13 = "";
			_tmp$14 = false;
			num = _tmp$12;
			rest = _tmp$13;
			ok = _tmp$14;
			return [num, rest, ok];
		}
		_tmp$15 = num;
		_tmp$16 = "";
		_tmp$17 = true;
		num = _tmp$15;
		rest = _tmp$16;
		ok = _tmp$17;
		return [num, rest, ok];
	};
	tzruleTime = function(year, r, off) {
		var _1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, d, dow, i, m1, off, r, s, x$1, year, yy0, yy1, yy2;
		s = 0;
		_1 = r.kind;
		if (_1 === (0)) {
			s = $imul(((r.day - 1 >> 0)), 86400);
			if (isLeap(year) && r.day >= 60) {
				s = s + (86400) >> 0;
			}
		} else if (_1 === (1)) {
			s = $imul(r.day, 86400);
		} else if (_1 === (2)) {
			m1 = (_r$1 = ((r.mon + 9 >> 0)) % 12, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			yy0 = year;
			if (r.mon <= 2) {
				yy0 = yy0 - (1) >> 0;
			}
			yy1 = (_q = yy0 / 100, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			yy2 = (_r$2 = yy0 % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
			dow = (_r$3 = (((((((_q$1 = ((($imul(26, m1)) - 2 >> 0)) / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0) + yy2 >> 0) + (_q$2 = yy2 / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + (_q$3 = yy1 / 4, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) - ($imul(2, yy1)) >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
			if (dow < 0) {
				dow = dow + (7) >> 0;
			}
			d = r.day - dow >> 0;
			if (d < 0) {
				d = d + (7) >> 0;
			}
			i = 1;
			while (true) {
				if (!(i < r.week)) { break; }
				if ((d + 7 >> 0) >= daysIn(((r.mon >> 0)), year)) {
					break;
				}
				d = d + (7) >> 0;
				i = i + (1) >> 0;
			}
			d = d + ((((x$1 = r.mon - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0))) >> 0;
			if (isLeap(year) && r.mon > 2) {
				d = d + (1) >> 0;
			}
			s = $imul(d, 86400);
		}
		return (s + r.time >> 0) - off >> 0;
	};
	Location.ptr.prototype.lookupName = function(name, unix) {
		var {_i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x$1, x$2, x$3, zone$1, zone$2, $s, $r, $c} = $restore(this, {name, unix});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		offset = 0;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x$1 = l.zone, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$2 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$2.$high, unix.$low - x$2.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				nam = _tuple[0];
				offset$1 = _tuple[1];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = true;
					offset = _tmp;
					ok = _tmp$1;
					$s = -1; return [offset, ok];
				}
			/* } */ case 5:
			_i++;
		$s = 2; continue;
		case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$3 = l.zone, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$2 = zone$2.offset;
				_tmp$3 = true;
				offset = _tmp$2;
				ok = _tmp$3;
				$s = -1; return [offset, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, ok];
		/* */ } return; } var $f = {$blk: Location.ptr.prototype.lookupName, $c: true, $r, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x$1, x$2, x$3, zone$1, zone$2, $s};return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	Time.ptr.prototype.nsec = function() {
		var t, x$1;
		t = this;
		return (((x$1 = t.wall, new $Uint64(x$1.$high & 0, (x$1.$low & 1073741823) >>> 0)).$low >> 0));
	};
	Time.prototype.nsec = function() { return this.$val.nsec(); };
	Time.ptr.prototype.sec = function() {
		var t, x$1, x$2, x$3, x$4;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$3 = ((x$4 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$4.$high, x$4.$low))), new $Int64(13 + x$3.$high, 3618733952 + x$3.$low));
		}
		return t.ext;
	};
	Time.prototype.sec = function() { return this.$val.sec(); };
	Time.ptr.prototype.unixSec = function() {
		var t, x$1;
		t = this;
		return (x$1 = t.sec(), new $Int64(x$1.$high + -15, x$1.$low + 2288912640));
	};
	Time.prototype.unixSec = function() { return this.$val.unixSec(); };
	Time.ptr.prototype.addSec = function(d) {
		var d, dsec, sec, sum, t, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			sec = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low)));
			dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
			if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
				t.wall = (x$4 = (x$5 = (x$6 = t.wall, new $Uint64(x$6.$high & 0, (x$6.$low & 1073741823) >>> 0)), x$7 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0)), new $Uint64(x$4.$high | 2147483648, (x$4.$low | 0) >>> 0));
				return;
			}
			t.stripMono();
		}
		sum = (x$8 = t.ext, new $Int64(x$8.$high + d.$high, x$8.$low + d.$low));
		if (((x$9 = t.ext, (sum.$high > x$9.$high || (sum.$high === x$9.$high && sum.$low > x$9.$low)))) === ((d.$high > 0 || (d.$high === 0 && d.$low > 0)))) {
			t.ext = sum;
		} else if ((d.$high > 0 || (d.$high === 0 && d.$low > 0))) {
			t.ext = new $Int64(2147483647, 4294967295);
		} else {
			t.ext = new $Int64(-2147483648, 1);
		}
	};
	Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
	Time.ptr.prototype.setLoc = function(loc) {
		var loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$2.nil;
		}
		t.stripMono();
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.stripMono = function() {
		var t, x$1, x$2, x$3, x$4;
		t = this;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			t.ext = t.sec();
			t.wall = (x$3 = t.wall, x$4 = new $Uint64(0, 1073741823), new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0));
		}
	};
	Time.prototype.stripMono = function() { return this.$val.stripMono(); };
	Time.ptr.prototype.After = function(u) {
		var t, ts, u, us, x$1, x$2, x$3, x$4, x$5, x$6;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, ts, u, us, x$1, x$2, x$3, x$4, x$5, x$6;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low < x$6.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high < us.$high || (ts.$high === us.$high && ts.$low < us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() < u.nsec();
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			return (x$5 = t.ext, x$6 = u.ext, (x$5.$high === x$6.$high && x$5.$low === x$6.$low));
		}
		return (x$7 = t.sec(), x$8 = u.sec(), (x$7.$high === x$8.$high && x$7.$low === x$8.$low)) && (t.nsec() === u.nsec());
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var buf, m, n, x$1;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= longMonthNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : longMonthNames.$array[longMonthNames.$offset + x$1]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var buf, d, n;
		d = this.$val;
		if (0 <= d && d <= 6) {
			return ((d < 0 || d >= longDayNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : longDayNames.$array[longDayNames.$offset + d]);
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, d)));
		return "%!Weekday(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x$1;
		t = this;
		return (x$1 = t.sec(), (x$1.$high === 0 && x$1.$low === 0)) && (t.nsec() === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var {_r$1, _r$2, _tuple, l, offset, sec, t, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				offset = _tuple[1];
				sec = (x$4 = (new $Int64(0, offset)), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low)));
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.abs, $c: true, $r, _r$1, _r$2, _tuple, l, offset, sec, t, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var {_r$1, _r$2, _tuple, abs, l, name, offset, sec, t, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				name = _tuple[0];
				offset = _tuple[1];
			/* } */ case 9:
			sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.locabs, $c: true, $r, _r$1, _r$2, _tuple, abs, l, name, offset, sec, t, x$1, x$2, x$3, x$4, $s};return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var {_r$1, _tuple, day, month, t, year, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		$s = -1; return [year, month, day];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Date, $c: true, $r, _r$1, _tuple, day, month, t, year, $s};return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var {_r$1, _tuple, t, year, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		$s = -1; return year;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Year, $c: true, $r, _r$1, _tuple, t, year, $s};return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var {_r$1, _tuple, month, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		month = _tuple[1];
		$s = -1; return month;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Month, $c: true, $r, _r$1, _tuple, month, t, $s};return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var {_r$1, _tuple, day, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		day = _tuple[2];
		$s = -1; return day;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Day, $c: true, $r, _r$1, _tuple, day, t, $s};return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var {$24r, _r$1, _r$2, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = _r$2;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Weekday, $c: true, $r, $24r, _r$1, _r$2, t, $s};return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var {_q, _r$1, _tmp, _tmp$1, _tuple, abs, d, t, week, x$1, yday, year, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		abs = _r$1;
		d = 4 - absWeekday(abs) >> 0;
		if (d === 4) {
			d = -3;
		}
		abs = (x$1 = $mul64((new $Uint64(0, d)), new $Uint64(0, 86400)), new $Uint64(abs.$high + x$1.$high, abs.$low + x$1.$low));
		_tuple = absDate(abs, false);
		year = _tuple[0];
		yday = _tuple[3];
		_tmp = year;
		_tmp$1 = (_q = yday / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
		year = _tmp;
		week = _tmp$1;
		$s = -1; return [year, week];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.ISOWeek, $c: true, $r, _q, _r$1, _tmp, _tmp$1, _tuple, abs, d, t, week, x$1, yday, year, $s};return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var {$24r, _r$1, _r$2, _tuple, hour, min, sec, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		hour = _tuple[0];
		min = _tuple[1];
		sec = _tuple[2];
		$24r = [hour, min, sec];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Clock, $c: true, $r, $24r, _r$1, _r$2, _tuple, hour, min, sec, t, $s};return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var {$24r, _q, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = (_q = (($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Hour, $c: true, $r, $24r, _q, _r$1, t, $s};return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var {$24r, _q, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = (_q = (($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Minute, $c: true, $r, $24r, _q, _r$1, t, $s};return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var {$24r, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = (($div64(_r$1, new $Uint64(0, 60), true).$low >> 0));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Second, $c: true, $r, $24r, _r$1, t, $s};return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = this;
		return ((t.nsec() >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var {_r$1, _tuple, t, yday, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		yday = _tuple[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.YearDay, $c: true, $r, _r$1, _tuple, t, yday, $s};return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple, _tuple$1, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$2.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple[0];
			u = _tuple[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Microseconds = function() {
		var d;
		d = this;
		return $div64((new $Int64(d.$high, d.$low)), new $Int64(0, 1000), false);
	};
	$ptrType(Duration).prototype.Microseconds = function() { return this.$get().Microseconds(); };
	Duration.prototype.Milliseconds = function() {
		var d;
		d = this;
		return $div64((new $Int64(d.$high, d.$low)), new $Int64(0, 1000000), false);
	};
	$ptrType(Duration).prototype.Milliseconds = function() { return this.$get().Milliseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Duration.prototype.Truncate = function(m) {
		var d, m, x$1;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		return (x$1 = $div64(d, m, true), new Duration(d.$high - x$1.$high, d.$low - x$1.$low));
	};
	$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
	lessThanHalf = function(x$1, y) {
		var x$1, x$2, x$3, x$4, x$5, y;
		return (x$2 = (x$3 = (new $Uint64(x$1.$high, x$1.$low)), x$4 = (new $Uint64(x$1.$high, x$1.$low)), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), x$5 = (new $Uint64(y.$high, y.$low)), (x$2.$high < x$5.$high || (x$2.$high === x$5.$high && x$2.$low < x$5.$low)));
	};
	Duration.prototype.Round = function(m) {
		var d, d1, d1$1, m, r, x$1, x$2;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		r = $div64(d, m, true);
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
			r = new Duration(-r.$high, -r.$low);
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high + r.$high, d.$low + r.$low);
			}
			d1 = (x$1 = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x$1.$high + r.$high, x$1.$low + r.$low));
			if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
				return d1;
			}
			return new Duration(-2147483648, 0);
		}
		if (lessThanHalf(r, m)) {
			return new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		d1$1 = (x$2 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$2.$high - r.$high, x$2.$low - r.$low));
		if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
			return d1$1;
		}
		return new Duration(2147483647, 4294967295);
	};
	$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
	Duration.prototype.Abs = function() {
		var d;
		d = this;
		if ((d.$high > 0 || (d.$high === 0 && d.$low >= 0))) {
			return d;
		} else if ((d.$high === -2147483648 && d.$low === 0)) {
			return new Duration(2147483647, 4294967295);
		} else {
			return new Duration(-d.$high, -d.$low);
		}
	};
	$ptrType(Duration).prototype.Abs = function() { return this.$get().Abs(); };
	Time.ptr.prototype.Add = function(d) {
		var d, dsec, nsec, t, te, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		dsec = ((x$1 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$1.$high, x$1.$low)));
		nsec = t.nsec() + (((x$2 = $div64(d, new Duration(0, 1000000000), true), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high + x$3.$high, dsec.$low + x$3.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			dsec = (x$4 = new $Int64(0, 1), new $Int64(dsec.$high - x$4.$high, dsec.$low - x$4.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.wall = (x$5 = (x$6 = t.wall, new $Uint64(x$6.$high & ~0, (x$6.$low & ~1073741823) >>> 0)), x$7 = (new $Uint64(0, nsec)), new $Uint64(x$5.$high | x$7.$high, (x$5.$low | x$7.$low) >>> 0));
		t.addSec(dsec);
		if (!((x$8 = (x$9 = t.wall, new $Uint64(x$9.$high & 2147483648, (x$9.$low & 0) >>> 0)), (x$8.$high === 0 && x$8.$low === 0)))) {
			te = (x$10 = t.ext, x$11 = (new $Int64(d.$high, d.$low)), new $Int64(x$10.$high + x$11.$high, x$10.$low + x$11.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$12 = t.ext, (te.$high > x$12.$high || (te.$high === x$12.$high && te.$low > x$12.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$13 = t.ext, (te.$high < x$13.$high || (te.$high === x$13.$high && te.$low < x$13.$low)))) {
				t.stripMono();
			} else {
				t.ext = te;
			}
		}
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, d$1, t, te, u, ue, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x$1 = (x$2 = (x$3 = t.wall, x$4 = u.wall, new $Uint64(x$3.$high & x$4.$high, (x$3.$low & x$4.$low) >>> 0)), new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			te = t.ext;
			ue = u.ext;
			d = ((x$5 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$5.$high, x$5.$low)));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
				return new Duration(2147483647, 4294967295);
			}
			if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
				return new Duration(-2147483648, 0);
			}
			return d;
		}
		d$1 = (x$6 = $mul64(((x$7 = (x$8 = t.sec(), x$9 = u.sec(), new $Int64(x$8.$high - x$9.$high, x$8.$low - x$9.$low)), new Duration(x$7.$high, x$7.$low))), new Duration(0, 1000000000)), x$10 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$6.$high + x$10.$high, x$6.$low + x$10.$low));
		if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
			return d$1;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Since = function(t) {
		var {_r$1, _r$2, now$1, t, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		now$1 = new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil);
		/* */ if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) { */ case 1:
			_r$1 = runtimeNano(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			Time.copy(now$1, new Time.ptr(new $Uint64(2147483648, 0), (x$3 = _r$1, new $Int64(x$3.$high - startNano.$high, x$3.$low - startNano.$low)), ptrType$2.nil));
			$s = 3; continue;
		/* } else { */ case 2:
			_r$2 = Now(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			Time.copy(now$1, _r$2);
		/* } */ case 3:
		$s = -1; return $clone(now$1, Time).Sub($clone(t, Time));
		/* */ } return; } var $f = {$blk: Since, $c: true, $r, _r$1, _r$2, now$1, t, x$1, x$2, x$3, $s};return $f;
	};
	$pkg.Since = Since;
	Time.ptr.prototype.AddDate = function(years, months, days) {
		var {$24r, _r$1, _r$2, _r$3, _tuple, _tuple$1, day, days, hour, min, month, months, sec, t, year, years, $s, $r, $c} = $restore(this, {years, months, days});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		_r$2 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		_r$3 = Date(year + years >> 0, month + ((months >> 0)) >> 0, day + days >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.AddDate, $c: true, $r, $24r, _r$1, _r$2, _r$3, _tuple, _tuple$1, day, days, hour, min, month, months, sec, t, year, years, $s};return $f;
	};
	Time.prototype.AddDate = function(years, months, days) { return this.$val.AddDate(years, months, days); };
	Time.ptr.prototype.date = function(full) {
		var {$24r, _r$1, _r$2, _tuple, day, full, month, t, yday, year, $s, $r, $c} = $restore(this, {full});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r$1 = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		$24r = [year, month, day, yday];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.date, $c: true, $r, $24r, _r$1, _r$2, _tuple, day, full, month, t, yday, year, $s};return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day, end, full, month, n, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x$1 = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x$1.$high, d.$low - x$1.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$2 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$2.$high, n.$low - x$2.$low));
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$3.$high, y.$low + x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$4.$high, d.$low - x$4.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$5.$high, y.$low + x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$6.$high, d.$low - x$6.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$7 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$7.$high, n.$low - x$7.$low));
		y = (x$8 = n, new $Uint64(y.$high + x$8.$high, y.$low + x$8.$low));
		d = (x$9 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$9.$high, d.$low - x$9.$low));
		year = (((x$10 = (x$11 = (new $Int64(y.$high, y.$low)), new $Int64(x$11.$high + -69, x$11.$low + 4075721025)), x$10.$low + ((x$10.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$12 = month + 1 >> 0, ((x$12 < 0 || x$12 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$12])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var m, x$1, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0) >> 0));
	};
	daysSinceEpoch = function(year) {
		var d, n, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, year;
		y = ((x$1 = (x$2 = (new $Int64(0, year)), new $Int64(x$2.$high - -69, x$2.$low - 4075721025)), new $Uint64(x$1.$high, x$1.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$3 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$4 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$4.$high, y.$low - x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$5.$high, d.$low + x$5.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$6 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$6.$high, y.$low - x$6.$low));
		d = (x$7 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		n = y;
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		return d;
	};
	runtimeNano = function() {
		$throwRuntimeError("native function not implemented: time.runtimeNano");
	};
	Now = function() {
		var {_r$1, _tuple, mono, nsec, sec, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = now(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		sec = _tuple[0];
		nsec = _tuple[1];
		mono = _tuple[2];
		mono = (x$1 = startNano, new $Int64(mono.$high - x$1.$high, mono.$low - x$1.$low));
		sec = (x$2 = new $Int64(0, 2682288000), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
		if (!((x$3 = $shiftRightUint64((new $Uint64(sec.$high, sec.$low)), 33), (x$3.$high === 0 && x$3.$low === 0)))) {
			$s = -1; return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 13, sec.$low + 3618733952), $pkg.Local);
		}
		$s = -1; return new Time.ptr((x$4 = (x$5 = $shiftLeft64((new $Uint64(sec.$high, sec.$low)), 30), new $Uint64(2147483648 | x$5.$high, (0 | x$5.$low) >>> 0)), x$6 = (new $Uint64(0, nsec)), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0)), mono, $pkg.Local);
		/* */ } return; } var $f = {$blk: Now, $c: true, $r, _r$1, _tuple, mono, nsec, sec, x$1, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	$pkg.Now = Now;
	unixTime = function(sec, nsec) {
		var nsec, sec;
		return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = this;
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var {_r$1, _tuple, name, offset, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r$1 = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		name = _tuple[0];
		offset = _tuple[1];
		$s = -1; return [name, offset];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Zone, $c: true, $r, _r$1, _tuple, name, offset, t, $s};return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.ZoneBounds = function() {
		var {_r$1, _tuple, end, endSec, start, startSec, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		start = new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil);
		end = new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil);
		t = this;
		_r$1 = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		startSec = _tuple[2];
		endSec = _tuple[3];
		if (!((startSec.$high === -2147483648 && startSec.$low === 0))) {
			Time.copy(start, unixTime(startSec, 0));
			start.setLoc(t.loc);
		}
		if (!((endSec.$high === 2147483647 && endSec.$low === 4294967295))) {
			Time.copy(end, unixTime(endSec, 0));
			end.setLoc(t.loc);
		}
		$s = -1; return [start, end];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.ZoneBounds, $c: true, $r, _r$1, _tuple, end, endSec, start, startSec, t, $s};return $f;
	};
	Time.prototype.ZoneBounds = function() { return this.$val.ZoneBounds(); };
	Time.ptr.prototype.Unix = function() {
		var t;
		t = this;
		return t.unixSec();
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixMilli = function() {
		var t, x$1, x$2;
		t = this;
		return (x$1 = $mul64(t.unixSec(), new $Int64(0, 1000)), x$2 = $div64((new $Int64(0, t.nsec())), new $Int64(0, 1000000), false), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
	};
	Time.prototype.UnixMilli = function() { return this.$val.UnixMilli(); };
	Time.ptr.prototype.UnixMicro = function() {
		var t, x$1, x$2;
		t = this;
		return (x$1 = $mul64(t.unixSec(), new $Int64(0, 1000000)), x$2 = $div64((new $Int64(0, t.nsec())), new $Int64(0, 1000), false), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
	};
	Time.prototype.UnixMicro = function() { return this.$val.UnixMicro(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x$1, x$2;
		t = this;
		return (x$1 = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$2 = (new $Int64(0, t.nsec())), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var {_q, _r$1, _r$2, _r$3, _tuple, enc, nsec, offset, offsetMin, offsetSec, sec, t, version, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		offsetSec = 0;
		version = 1;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			offset = _tuple[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				version = 2;
				offsetSec = (((_r$3 = offset % 60, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) << 24 >> 24));
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		sec = t.sec();
		nsec = t.nsec();
		enc = new sliceType$3([version, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		if (version === 2) {
			enc = $append(enc, ((offsetSec << 24 >>> 24)));
		}
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.MarshalBinary, $c: true, $r, _q, _r$1, _r$2, _r$3, _tuple, enc, nsec, offset, offsetMin, offsetSec, sec, t, version, $s};return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data) {
		var {_r$1, _tuple, buf, data, localoff, nsec, offset, sec, t, version, wantLen, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		version = (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]);
		if (!((version === 1)) && !((version === 2))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		wantLen = 15;
		if (version === 2) {
			wantLen = wantLen + (1) >> 0;
		}
		if (!((buf.$length === wantLen))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		sec = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (x$7 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$8 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$7.$high | x$8.$high, (x$7.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$6.$high | x$9.$high, (x$6.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$5.$high | x$10.$high, (x$5.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$4.$high | x$11.$high, (x$4.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$3.$high | x$12.$high, (x$3.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$2.$high | x$13.$high, (x$2.$low | x$13.$low) >>> 0)), x$14 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x$1.$high | x$14.$high, (x$1.$low | x$14.$low) >>> 0));
		buf = $subslice(buf, 8);
		nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		if (version === 2) {
			offset = offset + ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0))) >> 0;
		}
		Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
		t.wall = (new $Uint64(0, nsec));
		t.ext = sec;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			localoff = _tuple[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.UnmarshalBinary, $c: true, $r, _r$1, _tuple, buf, data, localoff, nsec, offset, sec, t, version, wantLen, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	Time.prototype.UnmarshalBinary = function(data) { return this.$val.UnmarshalBinary(data); };
	Time.ptr.prototype.GobEncode = function() {
		var {$24r, _r$1, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.GobEncode, $c: true, $r, $24r, _r$1, t, $s};return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data) {
		var {$24r, _r$1, data, t, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.GobDecode, $c: true, $r, $24r, _r$1, data, t, $s};return $f;
	};
	Time.prototype.GobDecode = function(data) { return this.$val.GobDecode(data); };
	Time.ptr.prototype.MarshalJSON = function() {
		var {_r$1, _r$2, b, t, y, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$2 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = _r$2;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.MarshalJSON, $c: true, $r, _r$1, _r$2, b, t, y, $s};return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data) {
		var {_r$1, _tuple, data, err, t, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.UnmarshalJSON, $c: true, $r, _r$1, _tuple, data, err, t, $s};return $f;
	};
	Time.prototype.UnmarshalJSON = function(data) { return this.$val.UnmarshalJSON(data); };
	Time.ptr.prototype.MarshalText = function() {
		var {$24r, _r$1, _r$2, b, t, y, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$2 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$24r = [_r$2, $ifaceNil];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.MarshalText, $c: true, $r, $24r, _r$1, _r$2, b, t, y, $s};return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data) {
		var {_r$1, _tuple, data, err, t, $s, $r, $c} = $restore(this, {data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.UnmarshalText, $c: true, $r, _r$1, _tuple, data, err, t, $s};return $f;
	};
	Time.prototype.UnmarshalText = function(data) { return this.$val.UnmarshalText(data); };
	Unix = function(sec, nsec) {
		var n, nsec, sec, x$1, x$2, x$3, x$4;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x$1 = n, new $Int64(sec.$high + x$1.$high, sec.$low + x$1.$low));
			nsec = (x$2 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$2.$high, nsec.$low - x$2.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$3 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$3.$high, nsec.$low + x$3.$low));
				sec = (x$4 = new $Int64(0, 1), new $Int64(sec.$high - x$4.$high, sec.$low - x$4.$low));
			}
		}
		return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
	};
	$pkg.Unix = Unix;
	Time.ptr.prototype.IsDST = function() {
		var {_r$1, _tuple, isDST, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.loc.lookup($clone(t, Time).Unix()); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		isDST = _tuple[4];
		$s = -1; return isDST;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.IsDST, $c: true, $r, _r$1, _tuple, isDST, t, $s};return $f;
	};
	Time.prototype.IsDST = function() { return this.$val.IsDST(); };
	isLeap = function(year) {
		var _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var {_r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, abs, d, day, end, hour, loc, m, min, month, nsec, offset, sec, start, t, unix, utc, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, year, $s, $r, $c} = $restore(this, {year, month, day, hour, min, sec, nsec, loc});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple = norm(year, m, 12);
		year = _tuple[0];
		m = _tuple[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000);
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60);
		min = _tuple$2[0];
		sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60);
		hour = _tuple$3[0];
		min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24);
		day = _tuple$4[0];
		hour = _tuple$4[1];
		d = daysSinceEpoch(year);
		d = (x$1 = (new $Uint64(0, (x$2 = month - 1 >> 0, ((x$2 < 0 || x$2 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$2])))), new $Uint64(d.$high + x$1.$high, d.$low + x$1.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$3 = new $Uint64(0, 1), new $Uint64(d.$high + x$3.$high, d.$low + x$3.$low));
		}
		d = (x$4 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$5 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$5.$high, abs.$low + x$5.$low));
		unix = (x$6 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$6.$high + -2147483647, x$6.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$5 = _r$1;
		offset = _tuple$5[1];
		start = _tuple$5[2];
		end = _tuple$5[3];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
			utc = (x$7 = (new $Int64(0, offset)), new $Int64(unix.$high - x$7.$high, unix.$low - x$7.$low));
			/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low)) || (utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low)) || (utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 4:
				_r$2 = loc.lookup(utc); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$6 = _r$2;
				offset = _tuple$6[1];
			/* } */ case 5:
			unix = (x$8 = (new $Int64(0, offset)), new $Int64(unix.$high - x$8.$high, unix.$low - x$8.$low));
		/* } */ case 3:
		t = $clone(unixTime(unix, ((nsec >> 0))), Time);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } var $f = {$blk: Date, $c: true, $r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, abs, d, day, end, hour, loc, m, min, month, nsec, offset, sec, start, t, unix, utc, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, year, $s};return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		if (lessThanHalf(r, d)) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec();
		sec = t.sec();
		if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
			neg = true;
			sec = new $Int64(-sec.$high, -sec.$low);
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				sec = (x$1 = new $Int64(0, 1), new $Int64(sec.$high - x$1.$high, sec.$low - x$1.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$2 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$2.$high === 0 && x$2.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r$1 = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$3 = $div64(d, new Duration(0, 1000000000), true), (x$3.$high === 0 && x$3.$low === 0))) {
			d1 = ((x$4 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$4.$high, x$4.$low)));
			qmod2 = (((x$5 = $div64(sec, d1, false), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$6 = $mul64(((x$7 = $div64(sec, d1, true), new Duration(x$7.$high, x$7.$low))), new Duration(0, 1000000000)), x$8 = (new Duration(0, nsec)), new Duration(x$6.$high + x$8.$high, x$6.$low + x$8.$low));
		} else {
			sec$1 = (new $Uint64(sec.$high, sec.$low));
			tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$9 = new $Uint64(0, 1), new $Uint64(u1.$high + x$9.$high, u1.$low + x$9.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$10 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$10.$high, u0.$low + x$10.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$11 = new $Uint64(0, 1), new $Uint64(u1.$high + x$11.$high, u1.$low + x$11.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$12 = $shiftRightUint64(d1$1, 63), (x$12.$high === 0 && x$12.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$13 = new $Uint64(0, 1), new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
					}
					u1 = (x$14 = d1$1, new $Uint64(u1.$high - x$14.$high, u1.$low - x$14.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$15 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$15.$high && d0.$low === x$15.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$16 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$16.$high, (d0.$low | x$16.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	initLocal = function() {
		var _q, _r$1, d, min, offset, z;
		localLoc.name = "Local";
		z = new zone.ptr("", 0, false);
		d = new ($global.Date)();
		offset = $imul(($parseInt(d.getTimezoneOffset()) >> 0), -1);
		z.offset = $imul(offset, 60);
		z.name = "UTC";
		if (offset < 0) {
			z.name = z.name + ("-");
			offset = $imul(offset, (-1));
		} else {
			z.name = z.name + ("+");
		}
		z.name = z.name + (itoa((_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
		min = (_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		if (!((min === 0))) {
			z.name = z.name + (":" + itoa(min));
		}
		localLoc.zone = new sliceType([$clone(z, zone)]);
	};
	itoa = function(i) {
		var i;
		if (i < 10) {
			return $substring("0123456789", i, (i + 1 >> 0));
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", ($imul(i, 2)), (($imul(i, 2)) + 2 >> 0));
	};
	init = function() {
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	now = function() {
		var {_r$1, _tmp, _tmp$1, _tmp$2, mono, n, nsec, sec, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		sec = new $Int64(0, 0);
		nsec = 0;
		mono = new $Int64(0, 0);
		_r$1 = runtimeNano(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		n = _r$1;
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = (((x$1 = $div64(n, new $Int64(0, 1000000000), true), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
		_tmp$2 = n;
		sec = _tmp;
		nsec = _tmp$1;
		mono = _tmp$2;
		$s = -1; return [sec, nsec, mono];
		/* */ } return; } var $f = {$blk: now, $c: true, $r, _r$1, _tmp, _tmp$1, _tmp$2, mono, n, nsec, sec, x$1, $s};return $f;
	};
	Sleep = function(d) {
		var {_r$1, c, d, x$1, $s, $r, $c} = $restore(this, {d});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = [c];
		c[0] = new $Chan(structType, 0);
		$setTimeout((function(c) { return function() {
			$close(c[0]);
		}; })(c), (((x$1 = $div64(d, new Duration(0, 1000000), false), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0)));
		_r$1 = $recv(c[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Sleep, $c: true, $r, _r$1, c, d, x$1, $s};return $f;
	};
	$pkg.Sleep = Sleep;
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$87, _tmp$88, _tmp$89, _tmp$9, _tmp$90, _tmp$91, _tmp$92, c, ch, code, i, j, layout, prefix, std, std$1, suffix, x$1;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 23;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x$1 = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x$1 < 0 || x$1 >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x$1]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 48) && (layout.charCodeAt((i + 2 >> 0)) === 50)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 267;
					_tmp$20 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$21 = $substring(layout, 0, i);
					_tmp$22 = 524;
					_tmp$23 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$21;
					std = _tmp$22;
					suffix = _tmp$23;
					return [prefix, std, suffix];
				}
				_tmp$24 = $substring(layout, 0, i);
				_tmp$25 = 259;
				_tmp$26 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$24;
				std = _tmp$25;
				suffix = _tmp$26;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$27 = $substring(layout, 0, i);
					_tmp$28 = 275;
					_tmp$29 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$27;
					std = _tmp$28;
					suffix = _tmp$29;
					return [prefix, std, suffix];
				}
				_tmp$30 = $substring(layout, 0, i);
				_tmp$31 = 263;
				_tmp$32 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$30;
				std = _tmp$31;
				suffix = _tmp$32;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$33 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$34 = 275;
						_tmp$35 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$33;
						std = _tmp$34;
						suffix = _tmp$35;
						return [prefix, std, suffix];
					}
					_tmp$36 = $substring(layout, 0, i);
					_tmp$37 = 264;
					_tmp$38 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$36;
					std = _tmp$37;
					suffix = _tmp$38;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 95) && (layout.charCodeAt((i + 2 >> 0)) === 50)) {
					_tmp$39 = $substring(layout, 0, i);
					_tmp$40 = 266;
					_tmp$41 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$39;
					std = _tmp$40;
					suffix = _tmp$41;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 525;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$45 = $substring(layout, 0, i);
				_tmp$46 = 527;
				_tmp$47 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$45;
				std = _tmp$46;
				suffix = _tmp$47;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$48 = $substring(layout, 0, i);
				_tmp$49 = 529;
				_tmp$50 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$48;
				std = _tmp$49;
				suffix = _tmp$50;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 533;
					_tmp$53 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 534;
					_tmp$56 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 30;
					_tmp$59 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 33;
					_tmp$62 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 32;
					_tmp$68 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 31;
					_tmp$71 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 25;
					_tmp$74 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 28;
					_tmp$77 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$81 = $substring(layout, 0, i);
					_tmp$82 = 27;
					_tmp$83 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$81;
					std = _tmp$82;
					suffix = _tmp$83;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$84 = $substring(layout, 0, i);
					_tmp$85 = 26;
					_tmp$86 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$84;
					std = _tmp$85;
					suffix = _tmp$86;
					return [prefix, std, suffix];
				}
			} else if ((_1 === (46)) || (_1 === (44))) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						code = 34;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							code = 35;
						}
						std$1 = stdFracSecond(code, j - ((i + 1 >> 0)) >> 0, c);
						_tmp$87 = $substring(layout, 0, i);
						_tmp$88 = std$1;
						_tmp$89 = $substring(layout, j);
						prefix = _tmp$87;
						std = _tmp$88;
						suffix = _tmp$89;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$90 = layout;
		_tmp$91 = 0;
		_tmp$92 = "";
		prefix = _tmp$90;
		std = _tmp$91;
		suffix = _tmp$92;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x$1, width) {
		var _q, b, buf, i, q, u, w, width, x$1;
		u = ((x$1 >>> 0));
		if (x$1 < 0) {
			b = $append(b, 45);
			u = ((-x$1 >>> 0));
		}
		buf = arrayType$3.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x$1;
		x$1 = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple = leadingInt(s);
		q = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		x$1 = ((q.$low >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x$1 = _tmp;
			err = _tmp$1;
			return [x$1, err];
		}
		if (neg) {
			x$1 = -x$1;
		}
		_tmp$2 = x$1;
		_tmp$3 = $ifaceNil;
		x$1 = _tmp$2;
		err = _tmp$3;
		return [x$1, err];
	};
	stdFracSecond = function(code, n, c) {
		var c, code, n;
		if (c === 46) {
			return code | ((((n & 4095)) << 16 >> 0));
		}
		return (code | ((((n & 4095)) << 16 >> 0))) | 268435456;
	};
	digitsLen = function(std) {
		var std;
		return ((std >> 16 >> 0)) & 4095;
	};
	separator = function(std) {
		var std;
		if (((std >> 28 >> 0)) === 0) {
			return 46;
		}
		return 44;
	};
	formatNano = function(b, nanosec, std) {
		var _q, _r$1, b, buf, n, nanosec, separator$1, start, std, trim, u, x$1;
		n = digitsLen(std);
		separator$1 = separator(std);
		trim = (std & 65535) === 35;
		u = nanosec;
		buf = arrayType$4.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$1])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, separator$1);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var {_r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		s = _r$1;
		if (!((x$1 = (x$2 = t.wall, new $Uint64(x$2.$high & 2147483648, (x$2.$low & 0) >>> 0)), (x$1.$high === 0 && x$1.$low === 0)))) {
			m2 = ((x$3 = t.ext, new $Uint64(x$3.$high, x$3.$low)));
			sign = 43;
			if ((x$4 = t.ext, (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 0)))) {
				sign = 45;
				m2 = new $Uint64(-m2.$high, -m2.$low);
			}
			_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
			_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
			m1 = _tmp;
			m2 = _tmp$1;
			_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
			_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
			m0 = _tmp$2;
			m1 = _tmp$3;
			buf = $makeSlice(sliceType$3, 0, 24);
			buf = $appendSlice(buf, " m=");
			buf = $append(buf, sign);
			wid = 0;
			if (!((m0.$high === 0 && m0.$low === 0))) {
				buf = appendInt(buf, ((m0.$low >> 0)), 0);
				wid = 9;
			}
			buf = appendInt(buf, ((m1.$low >> 0)), wid);
			buf = $append(buf, 46);
			buf = appendInt(buf, ((m2.$low >> 0)), 9);
			s = s + (($bytesToString(buf)));
		}
		$s = -1; return s;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.String, $c: true, $r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x$1, x$2, x$3, x$4, $s};return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.GoString = function() {
		var {_1, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, loc, month, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		buf = $makeSlice(sliceType$3, 0, 70);
		buf = $appendSlice(buf, "time.Date(");
		_arg = buf;
		_r$1 = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = _r$1;
		_r$2 = appendInt(_arg, _arg$1, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		buf = _r$2;
		_r$3 = $clone(t, Time).Month(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		month = _r$3;
		/* */ if (1 <= month && month <= 12) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (1 <= month && month <= 12) { */ case 4:
			buf = $appendSlice(buf, ", time.");
			_arg$2 = buf;
			_r$4 = $clone(t, Time).Month(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = new Month(_r$4).String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$3 = _r$5;
			buf = $appendSlice(_arg$2, _arg$3);
			$s = 6; continue;
		/* } else { */ case 5:
			buf = appendInt(buf, ((month >> 0)), 0);
		/* } */ case 6:
		buf = $appendSlice(buf, ", ");
		_arg$4 = buf;
		_r$6 = $clone(t, Time).Day(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$5 = _r$6;
		_r$7 = appendInt(_arg$4, _arg$5, 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		buf = _r$7;
		buf = $appendSlice(buf, ", ");
		_arg$6 = buf;
		_r$8 = $clone(t, Time).Hour(); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg$7 = _r$8;
		_r$9 = appendInt(_arg$6, _arg$7, 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		buf = _r$9;
		buf = $appendSlice(buf, ", ");
		_arg$8 = buf;
		_r$10 = $clone(t, Time).Minute(); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_arg$9 = _r$10;
		_r$11 = appendInt(_arg$8, _arg$9, 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		buf = _r$11;
		buf = $appendSlice(buf, ", ");
		_arg$10 = buf;
		_r$12 = $clone(t, Time).Second(); /* */ $s = 15; case 15: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_arg$11 = _r$12;
		_r$13 = appendInt(_arg$10, _arg$11, 0); /* */ $s = 16; case 16: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		buf = _r$13;
		buf = $appendSlice(buf, ", ");
		buf = appendInt(buf, $clone(t, Time).Nanosecond(), 0);
		buf = $appendSlice(buf, ", ");
		loc = $clone(t, Time).Location();
		_1 = loc;
		if (_1 === ($pkg.UTC) || _1 === ptrType$2.nil) {
			buf = $appendSlice(buf, "time.UTC");
		} else if (_1 === ($pkg.Local)) {
			buf = $appendSlice(buf, "time.Local");
		} else {
			buf = $appendSlice(buf, "time.Location(");
			buf = $appendSlice(buf, (new sliceType$3($stringToBytes(quote(loc.name)))));
			buf = $appendSlice(buf, ")");
		}
		buf = $append(buf, 41);
		$s = -1; return ($bytesToString(buf));
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.GoString, $c: true, $r, _1, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, loc, month, t, $s};return $f;
	};
	Time.prototype.GoString = function() { return this.$val.GoString(); };
	Time.ptr.prototype.Format = function(layout) {
		var {_r$1, b, buf, layout, max, t, $s, $r, $c} = $restore(this, {layout});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$5.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r$1 = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.Format, $c: true, $r, _r$1, b, buf, layout, max, t, $s};return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var {_1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, yday, year, zone$1, zone$2, $s, $r, $c} = $restore(this, {b, layout});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		name = _tuple[0];
		offset = _tuple[1];
		abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		yday = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true);
				year = _tuple$2[0];
				month = _tuple$2[1];
				day = _tuple$2[2];
				yday = _tuple$2[3];
				yday = yday + (1) >> 0;
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs);
				hour = _tuple$3[0];
				min = _tuple$3[1];
				sec = _tuple$3[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (276)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (275)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (266)) {
					if (yday < 100) {
						b = $append(b, 32);
						if (yday < 10) {
							b = $append(b, 32);
						}
					}
					b = appendInt(b, yday, 0);
				} else if (_1 === (267)) {
					b = appendInt(b, yday, 3);
				} else if (_1 === (524)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (525)) {
					hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (526)) {
					hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (529)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (530)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (533)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (534)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (24)) || (_1 === (27)) || (_1 === (25)) || (_1 === (26)) || (_1 === (28)) || (_1 === (29)) || (_1 === (32)) || (_1 === (30)) || (_1 === (31)) || (_1 === (33))) {
					if ((offset === 0) && ((std === 24) || (std === 27) || (std === 25) || (std === 26) || (std === 28))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 27) || (std === 32) || (std === 28) || (std === 33)) {
						b = $append(b, 58);
					}
					if (!((std === 31)) && !((std === 26))) {
						b = appendInt(b, (_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 25) || (std === 30) || (std === 33) || (std === 28)) {
						if ((std === 33) || (std === 28)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (23)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (34)) || (_1 === (35))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: Time.ptr.prototype.AppendFormat, $c: true, $r, _1, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, yday, year, zone$1, zone$2, $s};return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var _i, _ref, _rune, buf, c, i, j, s, width;
		buf = $makeSlice(sliceType$3, 1, (s.length + 2 >> 0));
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = 34);
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c >= 128 || c < 32) {
				width = 0;
				if (c === 65533) {
					width = 1;
					if ((i + 2 >> 0) < s.length && $substring(s, i, (i + 3 >> 0)) === "\xEF\xBF\xBD") {
						width = 3;
					}
				} else {
					width = ($encodeRune(c)).length;
				}
				j = 0;
				while (true) {
					if (!(j < width)) { break; }
					buf = $appendSlice(buf, "\\x");
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt((i + j >> 0)) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt((i + j >> 0)) & 15) >>> 0)));
					j = j + (1) >> 0;
				}
			} else {
				if ((c === 34) || (c === 92)) {
					buf = $append(buf, 92);
				}
				buf = $appendSlice(buf, ($encodeRune(c)));
			}
			_i += _rune[1];
		}
		buf = $append(buf, 34);
		return ($bytesToString(buf));
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	getnum3 = function(s, fixed) {
		var _tmp, _tmp$1, fixed, i, n, s;
		_tmp = 0;
		_tmp$1 = 0;
		n = _tmp;
		i = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < 3 && isDigit(s, i))) { break; }
			n = ($imul(n, 10)) + (((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0)) >> 0;
			i = i + (1) >> 0;
		}
		if ((i === 0) || fixed && !((i === 3))) {
			return [0, s, errBad];
		}
		return [n, $substring(s, i), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var {$24r, _r$1, layout, value, $s, $r, $c} = $restore(this, {layout, value});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Parse, $c: true, $r, $24r, _r$1, layout, value, $s};return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var {$24r, $24r$1, _1, _2, _3, _4, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, d, day, defaultLocation, err, hold, hour, hour$1, hr, i, i$1, layout, local, m, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x$1, x$2, x$3, yday, year, z, zoneName, zoneOffset, $s, $r, $c} = $restore(this, {layout, value, defaultLocation, local});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = -1;
		day = -1;
		yday = -1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$2.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple = nextStdChunk(layout);
			prefix = _tuple[0];
			std = _tuple[1];
			suffix = _tuple[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$1 = skip(value, prefix);
			value = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + quote(value))];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (276)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					hold = value;
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$2 = atoi(p);
					year = _tuple$2[0];
					err = _tuple$2[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						value = hold;
					} else if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (275)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
				} else if (_1 === (258)) {
					_tuple$4 = lookup(shortMonthNames, value);
					month = _tuple$4[0];
					value = _tuple$4[1];
					err = _tuple$4[2];
					month = month + (1) >> 0;
				} else if (_1 === (257)) {
					_tuple$5 = lookup(longMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
					month = month + (1) >> 0;
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$6 = getnum(value, std === 260);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
					if ($interfaceIsEqual(err, $ifaceNil) && (month <= 0 || 12 < month)) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$7 = lookup(shortDayNames, value);
					value = _tuple$7[1];
					err = _tuple$7[2];
				} else if (_1 === (261)) {
					_tuple$8 = lookup(longDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$9 = getnum(value, std === 265);
					day = _tuple$9[0];
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_1 === (266)) || (_1 === (267))) {
					i = 0;
					while (true) {
						if (!(i < 2)) { break; }
						if ((std === 266) && value.length > 0 && (value.charCodeAt(0) === 32)) {
							value = $substring(value, 1);
						}
						i = i + (1) >> 0;
					}
					_tuple$10 = getnum3(value, std === 267);
					yday = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
				} else if (_1 === (524)) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$12 = getnum(value, std === 526);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$13 = getnum(value, std === 528);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (529)) || (_1 === (530))) {
					_tuple$14 = getnum(value, std === 530);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && commaOrPeriod(value.charCodeAt(0)) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 34) || (std === 35)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = $substring(value, n);
					}
				} else if (_1 === (533)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (534)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (24)) || (_1 === (27)) || (_1 === (25)) || (_1 === (26)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31)) || (_1 === (32)) || (_1 === (30)) || (_1 === (33))) {
					if (((std === 24) || (std === 26) || (std === 27)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 27) || (std === 32)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 31) || (std === 26)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 28) || (std === 33)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 25) || (std === 30)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (23)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (34)) {
					ndigit = 1 + digitsLen(std) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, ndigit);
				} else if (_1 === (35)) {
					if (value.length < 2 || !commaOrPeriod(value.charCodeAt(0)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i$1 = 0;
					while (true) {
						if (!(i$1 < 9 && (i$1 + 1 >> 0) < value.length && 48 <= value.charCodeAt((i$1 + 1 >> 0)) && value.charCodeAt((i$1 + 1 >> 0)) <= 57)) { break; }
						i$1 = i$1 + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i$1 >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = $substring(value, (1 + i$1 >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (yday >= 0) {
			d = 0;
			m = 0;
			if (isLeap(year)) {
				if (yday === 60) {
					m = 2;
					d = 29;
				} else if (yday > 60) {
					yday = yday - (1) >> 0;
				}
			}
			if (yday < 1 || yday > 365) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year out of range")];
			}
			if (m === 0) {
				m = (_q = ((yday - 1 >> 0)) / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
				if (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) >> 0)) < yday) {
					m = m + (1) >> 0;
				}
				d = yday - (((x$1 = m - 1 >> 0, ((x$1 < 0 || x$1 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$1])) >> 0)) >> 0;
			}
			if (month >= 0 && !((month === m))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year does not match month")];
			}
			month = m;
			if (day >= 0 && !((day === d))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day-of-year does not match day")];
			}
			day = d;
		} else {
			if (month < 0) {
				month = 1;
			}
			if (day < 0) {
				day = 1;
			}
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$2.nil)) { */ case 1:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = [_r$1, $ifaceNil];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((zoneOffset === -1))) { */ case 5:
			_r$2 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.addSec((x$2 = (new $Int64(0, zoneOffset)), new $Int64(-x$2.$high, -x$2.$low)));
			_r$3 = local.lookup(t.unixSec()); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 6:
		/* */ if (!(zoneName === "")) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(zoneName === "")) { */ case 9:
			_r$4 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[1];
			if (ok$1) {
				t$1.addSec((x$3 = (new $Int64(0, offset$1)), new $Int64(-x$3.$high, -x$3.$low)));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$25 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 10:
		_r$6 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$24r$1 = [_r$6, $ifaceNil];
		$s = 14; case 14: return $24r$1;
		/* */ } return; } var $f = {$blk: parse, $c: true, $r, $24r, $24r$1, _1, _2, _3, _4, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, d, day, defaultLocation, err, hold, hour, hour$1, hr, i, i$1, layout, local, m, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x$1, x$2, x$3, yday, year, z, zoneName, zoneOffset, $s};return $f;
	};
	parseTimeZone = function(value) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, ok$1, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		if ((value.charCodeAt(0) === 43) || (value.charCodeAt(0) === 45)) {
			length = parseSignedOffset(value);
			ok$1 = length > 0;
			_tmp$6 = length;
			_tmp$7 = ok$1;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$8 = 0;
			_tmp$9 = false;
			length = _tmp$8;
			ok = _tmp$9;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$10 = 5;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$12 = 4;
				_tmp$13 = true;
				length = _tmp$12;
				ok = _tmp$13;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$14 = 3;
			_tmp$15 = true;
			length = _tmp$14;
			ok = _tmp$15;
			return [length, ok];
		}
		_tmp$16 = 0;
		_tmp$17 = false;
		length = _tmp$16;
		ok = _tmp$17;
		return [length, ok];
	};
	parseGMT = function(value) {
		var value;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		return 3 + parseSignedOffset(value) >> 0;
	};
	parseSignedOffset = function(value) {
		var _tuple, err, rem, sign, value, x$1;
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 0;
		}
		_tuple = leadingInt($substring(value, 1));
		x$1 = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil)) || $substring(value, 1) === rem) {
			return 0;
		}
		if ((x$1.$high > 0 || (x$1.$high === 0 && x$1.$low > 23))) {
			return 0;
		}
		return value.length - rem.length >> 0;
	};
	commaOrPeriod = function(b) {
		var b;
		return (b === 46) || (b === 44);
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!commaOrPeriod(value.charCodeAt(0))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		if (nbytes > 10) {
			value = $substring(value, 0, 10);
			nbytes = 10;
		}
		_tuple = atoi($substring(value, 1, nbytes));
		ns = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x$1, x$2, x$3, x$4;
		x$1 = new $Uint64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x$1.$high > 214748364 || (x$1.$high === 214748364 && x$1.$low > 3435973836))) {
				_tmp = new $Uint64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x$1 = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x$1, rem, err];
			}
			x$1 = (x$2 = (x$3 = $mul64(x$1, new $Uint64(0, 10)), x$4 = (new $Uint64(0, c)), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), new $Uint64(x$2.$high - 0, x$2.$low - 48));
			if ((x$1.$high > 2147483648 || (x$1.$high === 2147483648 && x$1.$low > 0))) {
				_tmp$3 = new $Uint64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x$1 = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x$1, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x$1;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x$1 = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x$1, rem, err];
	};
	leadingFraction = function(s) {
		var _tmp, _tmp$1, _tmp$2, c, i, overflow, rem, s, scale, x$1, x$2, x$3, x$4, y;
		x$1 = new $Uint64(0, 0);
		scale = 0;
		rem = "";
		i = 0;
		scale = 1;
		overflow = false;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if (overflow) {
				i = i + (1) >> 0;
				continue;
			}
			if ((x$1.$high > 214748364 || (x$1.$high === 214748364 && x$1.$low > 3435973836))) {
				overflow = true;
				i = i + (1) >> 0;
				continue;
			}
			y = (x$2 = (x$3 = $mul64(x$1, new $Uint64(0, 10)), x$4 = (new $Uint64(0, c)), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), new $Uint64(x$2.$high - 0, x$2.$low - 48));
			if ((y.$high > 2147483648 || (y.$high === 2147483648 && y.$low > 0))) {
				overflow = true;
				i = i + (1) >> 0;
				continue;
			}
			x$1 = y;
			scale = scale * (10);
			i = i + (1) >> 0;
		}
		_tmp = x$1;
		_tmp$1 = scale;
		_tmp$2 = $substring(s, i);
		x$1 = _tmp;
		scale = _tmp$1;
		rem = _tmp$2;
		return [x$1, scale, rem];
	};
	ParseDuration = function(s) {
		var _entry, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, c, c$1, d, err, f, i, neg, ok, orig, pl, pl$1, post, pre, s, scale, u, unit, v, x$1, x$2, x$3, x$4;
		orig = s;
		d = new $Uint64(0, 0);
		neg = false;
		if (!(s === "")) {
			c = s.charCodeAt(0);
			if ((c === 45) || (c === 43)) {
				neg = c === 45;
				s = $substring(s, 1);
			}
		}
		if (s === "0") {
			return [new Duration(0, 0), $ifaceNil];
		}
		if (s === "") {
			return [new Duration(0, 0), errors.New("time: invalid duration " + quote(orig))];
		}
		while (true) {
			if (!(!(s === ""))) { break; }
			_tmp = new $Uint64(0, 0);
			_tmp$1 = new $Uint64(0, 0);
			v = _tmp;
			f = _tmp$1;
			scale = 1;
			err = $ifaceNil;
			if (!((s.charCodeAt(0) === 46) || 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + quote(orig))];
			}
			pl = s.length;
			_tuple = leadingInt(s);
			v = _tuple[0];
			s = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + quote(orig))];
			}
			pre = !((pl === s.length));
			post = false;
			if (!(s === "") && (s.charCodeAt(0) === 46)) {
				s = $substring(s, 1);
				pl$1 = s.length;
				_tuple$1 = leadingFraction(s);
				f = _tuple$1[0];
				scale = _tuple$1[1];
				s = _tuple$1[2];
				post = !((pl$1 === s.length));
			}
			if (!pre && !post) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + quote(orig))];
			}
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				c$1 = s.charCodeAt(i);
				if ((c$1 === 46) || 48 <= c$1 && c$1 <= 57) {
					break;
				}
				i = i + (1) >> 0;
			}
			if (i === 0) {
				return [new Duration(0, 0), errors.New("time: missing unit in duration " + quote(orig))];
			}
			u = $substring(s, 0, i);
			s = $substring(s, i);
			_tuple$2 = (_entry = $mapIndex(unitMap,$String.keyFor(u)), _entry !== undefined ? [_entry.v, true] : [new $Uint64(0, 0), false]);
			unit = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok) {
				return [new Duration(0, 0), errors.New("time: unknown unit " + quote(u) + " in duration " + quote(orig))];
			}
			if ((x$1 = $div64(new $Uint64(2147483648, 0), unit, false), (v.$high > x$1.$high || (v.$high === x$1.$high && v.$low > x$1.$low)))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + quote(orig))];
			}
			v = $mul64(v, (unit));
			if ((f.$high > 0 || (f.$high === 0 && f.$low > 0))) {
				v = (x$2 = (new $Uint64(0, ($flatten64(f)) * (($flatten64(unit)) / scale))), new $Uint64(v.$high + x$2.$high, v.$low + x$2.$low));
				if ((v.$high > 2147483648 || (v.$high === 2147483648 && v.$low > 0))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + quote(orig))];
				}
			}
			d = (x$3 = v, new $Uint64(d.$high + x$3.$high, d.$low + x$3.$low));
			if ((d.$high > 2147483648 || (d.$high === 2147483648 && d.$low > 0))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + quote(orig))];
			}
		}
		if (neg) {
			return [(x$4 = (new Duration(d.$high, d.$low)), new Duration(-x$4.$high, -x$4.$low)), $ifaceNil];
		}
		if ((d.$high > 2147483647 || (d.$high === 2147483647 && d.$low > 4294967295))) {
			return [new Duration(0, 0), errors.New("time: invalid duration " + quote(orig))];
		}
		return [(new Duration(d.$high, d.$low)), $ifaceNil];
	};
	$pkg.ParseDuration = ParseDuration;
	ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Int64, $Int64, $Bool], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool], false)}];
	Time.methods = [{prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "ZoneBounds", name: "ZoneBounds", pkg: "", typ: $funcType([], [Time, Time], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixMilli", name: "UnixMilli", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixMicro", name: "UnixMicro", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "IsDST", name: "IsDST", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}];
	ptrType$4.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Microseconds", name: "Microseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Milliseconds", name: "Milliseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([], [Duration], false)}];
	ptrType$8.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Location.init("time", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "extend", name: "extend", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "cacheStart", name: "cacheStart", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", embedded: false, exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", embedded: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	rule.init("time", [{prop: "kind", name: "kind", embedded: false, exported: false, typ: ruleKind, tag: ""}, {prop: "day", name: "day", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "week", name: "week", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "mon", name: "mon", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "time", name: "time", embedded: false, exported: false, typ: $Int, tag: ""}]);
	Time.init("time", [{prop: "wall", name: "wall", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	ParseError.init("", [{prop: "Layout", name: "Layout", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", embedded: false, exported: true, typ: $String, tag: ""}]);
	$pkg.$initLinknames = function() {
		runtimeNano = $linknames["runtime.nanotime"];
};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, "", new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		badData = errors.New("malformed time zone information");
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, "", new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		errLocation = errors.New("time: invalid location name");
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		_r = runtimeNano(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		startNano = (x = _r, new $Int64(x.$high - 0, x.$low - 1));
		zoneSources = new sliceType$2([runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		std0x = $toNativeArray($kindInt, [260, 265, 526, 528, 530, 276]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		unitMap = $makeMap($String.keyFor, [{ k: "ns", v: new $Uint64(0, 1) }, { k: "us", v: new $Uint64(0, 1000) }, { k: "\xC2\xB5s", v: new $Uint64(0, 1000) }, { k: "\xCE\xBCs", v: new $Uint64(0, 1000) }, { k: "ms", v: new $Uint64(0, 1000000) }, { k: "s", v: new $Uint64(0, 1000000000) }, { k: "m", v: new $Uint64(13, 4165425152) }, { k: "h", v: new $Uint64(838, 817405952) }]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/poll"] = (function() {
	var $pkg = {}, $init, errors, unix, io, atomic, syscall, time, FD, pollDesc, fdMutex, errNetClosing, DeadlineExceededError, ptrType, ptrType$1, ptrType$2, ptrType$3, sliceType, sliceType$1, ptrType$4, ptrType$5, ptrType$6, ptrType$7, funcType, funcType$1, ptrType$8, ptrType$9, ptrType$10, tryDupCloexec, tryDupCloexec$24ptr, accept, runtime_Semacquire, runtime_Semrelease, DupCloseOnExec, dupCloseOnExecOld, ignoringEINTRIO, ignoringEINTR, setDeadlineImpl, errClosing, fcntl;
	errors = $packages["errors"];
	unix = $packages["internal/syscall/unix"];
	io = $packages["io"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	FD = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, csema_, isBlocking_, IsStream_, ZeroReadIsEOF_, isFile_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fdmu = new fdMutex.ptr(new $Uint64(0, 0), 0, 0);
			this.Sysfd = 0;
			this.pd = new pollDesc.ptr(ptrType$2.nil, false);
			this.iovecs = ptrType$4.nil;
			this.csema = 0;
			this.isBlocking = 0;
			this.IsStream = false;
			this.ZeroReadIsEOF = false;
			this.isFile = false;
			return;
		}
		this.fdmu = fdmu_;
		this.Sysfd = Sysfd_;
		this.pd = pd_;
		this.iovecs = iovecs_;
		this.csema = csema_;
		this.isBlocking = isBlocking_;
		this.IsStream = IsStream_;
		this.ZeroReadIsEOF = ZeroReadIsEOF_;
		this.isFile = isFile_;
	});
	pollDesc = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(fd_, closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = ptrType$2.nil;
			this.closing = false;
			return;
		}
		this.fd = fd_;
		this.closing = closing_;
	});
	fdMutex = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = new $Uint64(0, 0);
			this.rsema = 0;
			this.wsema = 0;
			return;
		}
		this.state = state_;
		this.rsema = rsema_;
		this.wsema = wsema_;
	});
	errNetClosing = $pkg.errNetClosing = $newType(0, $kindStruct, "poll.errNetClosing", true, "internal/poll", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	DeadlineExceededError = $pkg.DeadlineExceededError = $newType(0, $kindStruct, "poll.DeadlineExceededError", true, "internal/poll", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType($Uint32);
	ptrType$1 = $ptrType($Int32);
	ptrType$2 = $ptrType(FD);
	ptrType$3 = $ptrType($Uint64);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType(syscall.Iovec);
	ptrType$4 = $ptrType(sliceType$1);
	ptrType$5 = $ptrType(syscall.SockaddrInet4);
	ptrType$6 = $ptrType(syscall.SockaddrInet6);
	ptrType$7 = $ptrType(syscall.Stat_t);
	funcType = $funcType([$Uintptr], [$Bool], false);
	funcType$1 = $funcType([$Uintptr], [], false);
	ptrType$8 = $ptrType(pollDesc);
	ptrType$9 = $ptrType(fdMutex);
	ptrType$10 = $ptrType(DeadlineExceededError);
	accept = function(s) {
		var {_r, _r$1, _tuple, err, ns, s, sa, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $pkg.AcceptFunc(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ns = _tuple[0];
		sa = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			syscall.CloseOnExec(ns);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "accept", err];
		}
		err = syscall.SetNonblock(ns, true);
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = $pkg.CloseFunc(ns); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return [-1, $ifaceNil, "setnonblock", err];
		/* } */ case 3:
		$s = -1; return [ns, sa, "", $ifaceNil];
		/* */ } return; } var $f = {$blk: accept, $c: true, $r, _r, _r$1, _tuple, err, ns, s, sa, $s};return $f;
	};
	runtime_Semacquire = function() {
		$throwRuntimeError("native function not implemented: internal/poll.runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		$throwRuntimeError("native function not implemented: internal/poll.runtime_Semrelease");
	};
	FD.ptr.prototype.Init = function(net, pollable) {
		var err, fd, net, pollable;
		fd = this;
		if (net === "file") {
			fd.isFile = true;
		}
		if (!pollable) {
			fd.isBlocking = 1;
			return $ifaceNil;
		}
		err = fd.pd.init(fd);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			fd.isBlocking = 1;
		}
		return err;
	};
	FD.prototype.Init = function(net, pollable) { return this.$val.Init(net, pollable); };
	FD.ptr.prototype.destroy = function() {
		var {_r, err, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		fd.pd.close();
		_r = $pkg.CloseFunc(fd.Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		fd.Sysfd = -1;
		$r = runtime_Semrelease((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.destroy, $c: true, $r, _r, err, fd, $s};return $f;
	};
	FD.prototype.destroy = function() { return this.$val.destroy(); };
	FD.ptr.prototype.Close = function() {
		var {_r, _r$1, err, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.increfAndClose(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		fd.pd.evict();
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (fd.isBlocking === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (fd.isBlocking === 0) { */ case 5:
			$r = runtime_Semacquire((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.Close, $c: true, $r, _r, _r$1, err, fd, $s};return $f;
	};
	FD.prototype.Close = function() { return this.$val.Close(); };
	FD.ptr.prototype.SetBlocking = function() {
		var {$24r, $24r$1, err, fd, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		atomic.StoreUint32((fd.$ptr_isBlocking || (fd.$ptr_isBlocking = new ptrType(function() { return this.$target.isBlocking; }, function($v) { this.$target.isBlocking = $v; }, fd))), 1);
		$24r$1 = syscall.SetNonblock(fd.Sysfd, false);
		$s = 4; case 4: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.SetBlocking, $c: true, $r, $24r, $24r$1, err, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.SetBlocking = function() { return this.$val.SetBlocking(); };
	FD.ptr.prototype.Read = function(p) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _tuple, err, err$1, err$2, fd, n, p, $s, $deferred, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		/* */ if (p.$length === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.$length === 0) { */ case 5:
			$24r$1 = [0, $ifaceNil];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 8:
			$24r$2 = [0, err$1];
			$s = 10; case 10: return $24r$2;
		/* } */ case 9:
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		/* while (true) { */ case 11:
			_r$1 = ignoringEINTRIO(syscall.Read, fd.Sysfd, p); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 11; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$3 = [n, err$2];
			$s = 14; case 14: return $24r$3;
		case 12:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Read, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, _tuple, err, err$1, err$2, fd, n, p, $s, $deferred};return $f; } }
	};
	FD.prototype.Read = function(p) { return this.$val.Read(p); };
	FD.ptr.prototype.Pread = function(p, off) {
		var {_r, _r$1, _tuple, err, err$1, fd, n, off, p, $s, $r, $c} = $restore(this, {p, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		n = 0;
		err$1 = $ifaceNil;
		/* while (true) { */ case 1:
			_r = syscall.Pread(fd.Sysfd, p, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, new syscall.Errno(4)))) {
				/* break; */ $s = 2; continue;
			}
		$s = 1; continue;
		case 2:
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			n = 0;
		}
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		err$1 = fd.eofError(n, err$1);
		$s = -1; return [n, err$1];
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.Pread, $c: true, $r, _r, _r$1, _tuple, err, err$1, fd, n, off, p, $s};return $f;
	};
	FD.prototype.Pread = function(p, off) { return this.$val.Pread(p, off); };
	FD.ptr.prototype.ReadFrom = function(p) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, $ifaceNil, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, $ifaceNil, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = syscall.Recvfrom(fd.Sysfd, p, 0);
			n = _tuple[0];
			sa = _tuple[1];
			err$2 = _tuple[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, sa, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadFrom, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadFrom = function(p) { return this.$val.ReadFrom(p); };
	FD.ptr.prototype.ReadFromInet4 = function(p, from) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, from, n, p, $s, $deferred, $r, $c} = $restore(this, {p, from});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.RecvfromInet4(fd.Sysfd, p, 0, from);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadFromInet4, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, from, n, p, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadFromInet4 = function(p, from) { return this.$val.ReadFromInet4(p, from); };
	FD.ptr.prototype.ReadFromInet6 = function(p, from) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, from, n, p, $s, $deferred, $r, $c} = $restore(this, {p, from});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.RecvfromInet6(fd.Sysfd, p, 0, from);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadFromInet6, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, from, n, p, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadFromInet6 = function(p, from) { return this.$val.ReadFromInet6(p, from); };
	FD.ptr.prototype.ReadMsg = function(p, oob, flags) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, sysflags, $s, $deferred, $r, $c} = $restore(this, {p, oob, flags});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, 0, $ifaceNil, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, 0, $ifaceNil, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = syscall.Recvmsg(fd.Sysfd, p, oob, flags);
			n = _tuple[0];
			oobn = _tuple[1];
			sysflags = _tuple[2];
			sa = _tuple[3];
			err$2 = _tuple[4];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, oobn, sysflags, sa, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadMsg, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, sysflags, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadMsg = function(p, oob, flags) { return this.$val.ReadMsg(p, oob, flags); };
	FD.ptr.prototype.ReadMsgInet4 = function(p, oob, flags, sa4) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa4, sysflags, $s, $deferred, $r, $c} = $restore(this, {p, oob, flags, sa4});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.RecvmsgInet4(fd.Sysfd, p, oob, flags, sa4);
			n = _tuple[0];
			oobn = _tuple[1];
			sysflags = _tuple[2];
			err$2 = _tuple[3];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, oobn, sysflags, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, 0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadMsgInet4, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa4, sysflags, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadMsgInet4 = function(p, oob, flags, sa4) { return this.$val.ReadMsgInet4(p, oob, flags, sa4); };
	FD.ptr.prototype.ReadMsgInet6 = function(p, oob, flags, sa6) {
		var {$24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa6, sysflags, $s, $deferred, $r, $c} = $restore(this, {p, oob, flags, sa6});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.RecvmsgInet6(fd.Sysfd, p, oob, flags, sa6);
			n = _tuple[0];
			oobn = _tuple[1];
			sysflags = _tuple[2];
			err$2 = _tuple[3];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
					/* continue; */ $s = 8; continue;
				}
				if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$24r$2 = [n, oobn, sysflags, err$2];
			$s = 10; case 10: return $24r$2;
		case 9:
		$s = -1; return [0, 0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadMsgInet6, $c: true, $r, $24r, $24r$1, $24r$2, _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa6, sysflags, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadMsgInet6 = function(p, oob, flags, sa6) { return this.$val.ReadMsgInet6(p, oob, flags, sa6); };
	FD.ptr.prototype.Write = function(p) {
		var {$24r, $24r$1, $24r$2, $24r$3, $24r$4, _r, _r$1, _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		nn = 0;
		/* while (true) { */ case 8:
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_r$1 = ignoringEINTRIO(syscall.Write, fd.Sysfd, $subslice(p, nn, max)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			/* */ if (nn === p.$length) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (nn === p.$length) { */ case 11:
				$24r$2 = [nn, err$2];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = [nn, err$2];
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
			/* */ if (n === 0) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (n === 0) { */ case 17:
				$24r$4 = [nn, io.ErrUnexpectedEOF];
				$s = 19; case 19: return $24r$4;
			/* } */ case 18:
		$s = 8; continue;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Write, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, $24r$4, _r, _r$1, _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred};return $f; } }
	};
	FD.prototype.Write = function(p) { return this.$val.Write(p); };
	FD.ptr.prototype.Pwrite = function(p, off) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred, $r, $c} = $restore(this, {p, off});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [0, err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		nn = 0;
		/* while (true) { */ case 4:
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_r = syscall.Pwrite(fd.Sysfd, $subslice(p, nn, max), (x = (new $Int64(0, nn)), new $Int64(off.$high + x.$high, off.$low + x.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if ($interfaceIsEqual(err$1, new syscall.Errno(4))) {
				/* continue; */ $s = 4; continue;
			}
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			/* */ if (nn === p.$length) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (nn === p.$length) { */ case 7:
				$24r$1 = [nn, err$1];
				$s = 9; case 9: return $24r$1;
			/* } */ case 8:
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 10:
				$24r$2 = [nn, err$1];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			/* */ if (n === 0) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (n === 0) { */ case 13:
				$24r$3 = [nn, io.ErrUnexpectedEOF];
				$s = 15; case 15: return $24r$3;
			/* } */ case 14:
		$s = 4; continue;
		case 5:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Pwrite, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred};return $f; } }
	};
	FD.prototype.Pwrite = function(p, off) { return this.$val.Pwrite(p, off); };
	FD.ptr.prototype.WriteToInet4 = function(p, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			err$2 = unix.SendtoInet4(fd.Sysfd, p, 0, sa);
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [p.$length, $ifaceNil];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteToInet4, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteToInet4 = function(p, sa) { return this.$val.WriteToInet4(p, sa); };
	FD.ptr.prototype.WriteToInet6 = function(p, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			err$2 = unix.SendtoInet6(fd.Sysfd, p, 0, sa);
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [p.$length, $ifaceNil];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteToInet6, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteToInet6 = function(p, sa) { return this.$val.WriteToInet6(p, sa); };
	FD.ptr.prototype.WriteTo = function(p, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			err$2 = syscall.Sendto(fd.Sysfd, p, 0, sa);
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [p.$length, $ifaceNil];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteTo, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, err, err$1, err$2, fd, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteTo = function(p, sa) { return this.$val.WriteTo(p, sa); };
	FD.ptr.prototype.WriteMsg = function(p, oob, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, oob, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = syscall.SendmsgN(fd.Sysfd, p, oob, sa, 0);
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [n, 0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [n, oob.$length, err$2];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteMsg, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteMsg = function(p, oob, sa) { return this.$val.WriteMsg(p, oob, sa); };
	FD.ptr.prototype.WriteMsgInet4 = function(p, oob, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, oob, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.SendmsgNInet4(fd.Sysfd, p, oob, sa, 0);
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [n, 0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [n, oob.$length, err$2];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteMsgInet4, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteMsgInet4 = function(p, oob, sa) { return this.$val.WriteMsgInet4(p, oob, sa); };
	FD.ptr.prototype.WriteMsgInet6 = function(p, oob, sa) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r, $c} = $restore(this, {p, oob, sa});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, 0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [0, 0, err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_tuple = unix.SendmsgNInet6(fd.Sysfd, p, oob, sa, 0);
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(4))) {
				/* continue; */ $s = 8; continue;
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(11)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 10:
				$24r$2 = [n, 0, err$2];
				$s = 12; case 12: return $24r$2;
			/* } */ case 11:
			$24r$3 = [n, oob.$length, err$2];
			$s = 13; case 13: return $24r$3;
		case 9:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteMsgInet6, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteMsgInet6 = function(p, oob, sa) { return this.$val.WriteMsgInet6(p, oob, sa); };
	FD.ptr.prototype.Accept = function() {
		var {$24r, $24r$1, $24r$2, $24r$3, _1, _r, _r$1, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [-1, $ifaceNil, "", err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = [-1, $ifaceNil, "", err$1];
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = accept(fd.Sysfd); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			rsa = _tuple[1];
			errcall = _tuple[2];
			err$2 = _tuple[3];
			/* */ if ($interfaceIsEqual(err$2, $ifaceNil)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ($interfaceIsEqual(err$2, $ifaceNil)) { */ case 11:
				$24r$2 = [s, rsa, "", err$2];
				$s = 13; case 13: return $24r$2;
			/* } */ case 12:
			_1 = err$2;
			if ($interfaceIsEqual(_1, new syscall.Errno((4)))) {
				/* continue; */ $s = 8; continue;
			} else if ($interfaceIsEqual(_1, new syscall.Errno((11)))) {
				if (fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 8; continue;
					}
				}
			} else if ($interfaceIsEqual(_1, new syscall.Errno((103)))) {
				/* continue; */ $s = 8; continue;
			}
			$24r$3 = [-1, $ifaceNil, errcall, err$2];
			$s = 14; case 14: return $24r$3;
		case 9:
		$s = -1; return [0, $ifaceNil, "", $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Accept, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _1, _r, _r$1, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred};return $f; } }
	};
	FD.prototype.Accept = function() { return this.$val.Accept(); };
	FD.ptr.prototype.Seek = function(offset, whence) {
		var {$24r, $24r$1, _r, err, fd, offset, whence, $s, $deferred, $r, $c} = $restore(this, {offset, whence});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [new $Int64(0, 0), err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.Seek(fd.Sysfd, offset, whence); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Seek, $c: true, $r, $24r, $24r$1, _r, err, fd, offset, whence, $s, $deferred};return $f; } }
	};
	FD.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	FD.ptr.prototype.ReadDirent = function(buf) {
		var {$24r, $24r$1, _r, _tuple, buf, err, err$1, fd, n, $s, $deferred, $r, $c} = $restore(this, {buf});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [0, err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		/* while (true) { */ case 4:
			_r = ignoringEINTRIO(syscall.ReadDirent, fd.Sysfd, buf); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$1, new syscall.Errno(11)) && fd.pd.pollable()) {
					err$1 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						/* continue; */ $s = 4; continue;
					}
				}
			}
			$24r$1 = [n, err$1];
			$s = 7; case 7: return $24r$1;
		case 5:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.ReadDirent, $c: true, $r, $24r, $24r$1, _r, _tuple, buf, err, err$1, fd, n, $s, $deferred};return $f; } }
	};
	FD.prototype.ReadDirent = function(buf) { return this.$val.ReadDirent(buf); };
	FD.ptr.prototype.Fchmod = function(mode) {
		var {$24r, $24r$1, _r, err, fd, mode, $s, $deferred, $r, $c} = $restore(this, {mode});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		mode = [mode];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, mode) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Fchmod(fd[0].Sysfd, mode[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd, mode)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fchmod, $c: true, $r, $24r, $24r$1, _r, err, fd, mode, $s, $deferred};return $f; } }
	};
	FD.prototype.Fchmod = function(mode) { return this.$val.Fchmod(mode); };
	FD.ptr.prototype.Fchdir = function() {
		var {$24r, $24r$1, _r, err, fd, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = syscall.Fchdir(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fchdir, $c: true, $r, $24r, $24r$1, _r, err, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.Fchdir = function() { return this.$val.Fchdir(); };
	FD.ptr.prototype.Fstat = function(s) {
		var {$24r, $24r$1, _r, err, fd, s, $s, $deferred, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		s = [s];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, s) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Fstat(fd[0].Sysfd, s[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd, s)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fstat, $c: true, $r, $24r, $24r$1, _r, err, fd, s, $s, $deferred};return $f; } }
	};
	FD.prototype.Fstat = function(s) { return this.$val.Fstat(s); };
	DupCloseOnExec = function(fd) {
		var {$24r, _1, _r, _tuple, e1, fd, r0, $s, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (true && (atomic.LoadInt32((tryDupCloexec$24ptr || (tryDupCloexec$24ptr = new ptrType$1(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; })))) === 1)) {
			_tuple = fcntl(fd, 1, 0);
			r0 = _tuple[0];
			e1 = _tuple[1];
			if ($interfaceIsEqual(e1, $ifaceNil)) {
				$s = -1; return [r0, "", $ifaceNil];
			}
			_1 = $assertType(e1, syscall.Errno);
			if ((_1 === (22)) || (_1 === (38))) {
				atomic.StoreInt32((tryDupCloexec$24ptr || (tryDupCloexec$24ptr = new ptrType$1(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; }))), 0);
			} else {
				$s = -1; return [-1, "fcntl", e1];
			}
		}
		_r = dupCloseOnExecOld(fd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: DupCloseOnExec, $c: true, $r, $24r, _1, _r, _tuple, e1, fd, r0, $s};return $f;
	};
	$pkg.DupCloseOnExec = DupCloseOnExec;
	dupCloseOnExecOld = function(fd) {
		var {$24r, $24r$1, _tuple, err, fd, newfd, $s, $deferred, $r, $c} = $restore(this, {fd});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		$r = syscall.ForkLock.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(syscall.ForkLock, "RUnlock"), []]);
		_tuple = syscall.Dup(fd);
		newfd = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [-1, "dup", err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		syscall.CloseOnExec(newfd);
		$24r$1 = [newfd, "", $ifaceNil];
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: dupCloseOnExecOld, $c: true, $r, $24r, $24r$1, _tuple, err, fd, newfd, $s, $deferred};return $f; } }
	};
	FD.ptr.prototype.Dup = function() {
		var {$24r, $24r$1, _r, err, fd, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = [-1, "", err];
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		_r = DupCloseOnExec(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Dup, $c: true, $r, $24r, $24r$1, _r, err, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.Dup = function() { return this.$val.Dup(); };
	FD.ptr.prototype.WaitWrite = function() {
		var fd;
		fd = this;
		return fd.pd.waitWrite(fd.isFile);
	};
	FD.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	FD.ptr.prototype.WriteOnce = function(p) {
		var {$24r, $24r$1, _r, _r$1, err, fd, p, $s, $deferred, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = [0, err];
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		_r$1 = ignoringEINTRIO(syscall.Write, fd.Sysfd, p); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r$1 = _r$1;
		$s = 6; case 6: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.WriteOnce, $c: true, $r, $24r, $24r$1, _r, _r$1, err, fd, p, $s, $deferred};return $f; } }
	};
	FD.prototype.WriteOnce = function(p) { return this.$val.WriteOnce(p); };
	FD.ptr.prototype.RawRead = function(f) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = err;
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = err$1;
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$1) { */ case 10:
				$24r$2 = $ifaceNil;
				$s = 13; case 13: return $24r$2;
			/* } */ case 11:
			err$2 = fd.pd.waitRead(fd.isFile);
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = err$2;
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
		$s = 8; continue;
		case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.RawRead, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.RawRead = function(f) { return this.$val.RawRead(f); };
	FD.ptr.prototype.RawWrite = function(f) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$24r = err;
			$s = 4; case 4: return $24r;
		/* } */ case 3:
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
			$24r$1 = err$1;
			$s = 7; case 7: return $24r$1;
		/* } */ case 6:
		/* while (true) { */ case 8:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$1) { */ case 10:
				$24r$2 = $ifaceNil;
				$s = 13; case 13: return $24r$2;
			/* } */ case 11:
			err$2 = fd.pd.waitWrite(fd.isFile);
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 14:
				$24r$3 = err$2;
				$s = 16; case 16: return $24r$3;
			/* } */ case 15:
		$s = 8; continue;
		case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.RawWrite, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.RawWrite = function(f) { return this.$val.RawWrite(f); };
	ignoringEINTRIO = function(fn, fd, p) {
		var {_r, _tuple, err, fd, fn, n, p, $s, $r, $c} = $restore(this, {fn, fd, p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r = fn(fd, p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return [n, err];
			}
		$s = 1; continue;
		case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } var $f = {$blk: ignoringEINTRIO, $c: true, $r, _r, _tuple, err, fd, fn, n, p, $s};return $f;
	};
	FD.ptr.prototype.eofError = function(n, err) {
		var err, fd, n;
		fd = this;
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && fd.ZeroReadIsEOF) {
			return io.EOF;
		}
		return err;
	};
	FD.prototype.eofError = function(n, err) { return this.$val.eofError(n, err); };
	FD.ptr.prototype.Shutdown = function(how) {
		var {$24r, $24r$1, err, fd, how, $s, $deferred, $r, $c} = $restore(this, {how});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		$24r$1 = syscall.Shutdown(fd.Sysfd, how);
		$s = 4; case 4: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Shutdown, $c: true, $r, $24r, $24r$1, err, fd, how, $s, $deferred};return $f; } }
	};
	FD.prototype.Shutdown = function(how) { return this.$val.Shutdown(how); };
	FD.ptr.prototype.Fchown = function(uid, gid) {
		var {$24r, $24r$1, _r, err, fd, gid, uid, $s, $deferred, $r, $c} = $restore(this, {uid, gid});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		gid = [gid];
		uid = [uid];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, gid, uid) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Fchown(fd[0].Sysfd, uid[0], gid[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd, gid, uid)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fchown, $c: true, $r, $24r, $24r$1, _r, err, fd, gid, uid, $s, $deferred};return $f; } }
	};
	FD.prototype.Fchown = function(uid, gid) { return this.$val.Fchown(uid, gid); };
	FD.ptr.prototype.Ftruncate = function(size) {
		var {$24r, $24r$1, _r, err, fd, size, $s, $deferred, $r, $c} = $restore(this, {size});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		size = [size];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd, size) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Ftruncate(fd[0].Sysfd, size[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd, size)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Ftruncate, $c: true, $r, $24r, $24r$1, _r, err, fd, size, $s, $deferred};return $f; } }
	};
	FD.prototype.Ftruncate = function(size) { return this.$val.Ftruncate(size); };
	FD.ptr.prototype.RawControl = function(f) {
		var {$24r, $24r$1, err, f, fd, $s, $deferred, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd, "decref"), []]);
		$r = f(((fd.Sysfd >>> 0))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$24r$1 = $ifaceNil;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.RawControl, $c: true, $r, $24r, $24r$1, err, f, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.RawControl = function(f) { return this.$val.RawControl(f); };
	ignoringEINTR = function(fn) {
		var {_r, err, fn, $s, $r, $c} = $restore(this, {fn});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r = fn(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return err;
			}
		$s = 1; continue;
		case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: ignoringEINTR, $c: true, $r, _r, err, fn, $s};return $f;
	};
	pollDesc.ptr.prototype.init = function(fd) {
		var fd, pd;
		pd = this;
		pd.fd = fd;
		return $ifaceNil;
	};
	pollDesc.prototype.init = function(fd) { return this.$val.init(fd); };
	pollDesc.ptr.prototype.close = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.close = function() { return this.$val.close(); };
	pollDesc.ptr.prototype.evict = function() {
		var pd;
		pd = this;
		pd.closing = true;
		if (!(pd.fd === ptrType$2.nil)) {
			syscall.StopIO(pd.fd.Sysfd);
		}
	};
	pollDesc.prototype.evict = function() { return this.$val.evict(); };
	pollDesc.ptr.prototype.prepare = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $ifaceNil;
	};
	pollDesc.prototype.prepare = function(mode, isFile) { return this.$val.prepare(mode, isFile); };
	pollDesc.ptr.prototype.prepareRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(114, isFile);
	};
	pollDesc.prototype.prepareRead = function(isFile) { return this.$val.prepareRead(isFile); };
	pollDesc.ptr.prototype.prepareWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(119, isFile);
	};
	pollDesc.prototype.prepareWrite = function(isFile) { return this.$val.prepareWrite(isFile); };
	pollDesc.ptr.prototype.wait = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		if (isFile) {
			return $ifaceNil;
		}
		return $pkg.ErrDeadlineExceeded;
	};
	pollDesc.prototype.wait = function(mode, isFile) { return this.$val.wait(mode, isFile); };
	pollDesc.ptr.prototype.waitRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(114, isFile);
	};
	pollDesc.prototype.waitRead = function(isFile) { return this.$val.waitRead(isFile); };
	pollDesc.ptr.prototype.waitWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(119, isFile);
	};
	pollDesc.prototype.waitWrite = function(isFile) { return this.$val.waitWrite(isFile); };
	pollDesc.ptr.prototype.pollable = function() {
		var pd;
		pd = this;
		return true;
	};
	pollDesc.prototype.pollable = function() { return this.$val.pollable(); };
	FD.ptr.prototype.SetDeadline = function(t) {
		var {$24r, _r, fd, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = setDeadlineImpl(fd, $clone(t, time.Time), 233); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.SetDeadline, $c: true, $r, $24r, _r, fd, t, $s};return $f;
	};
	FD.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	FD.ptr.prototype.SetReadDeadline = function(t) {
		var {$24r, _r, fd, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = setDeadlineImpl(fd, $clone(t, time.Time), 114); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.SetReadDeadline, $c: true, $r, $24r, _r, fd, t, $s};return $f;
	};
	FD.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	FD.ptr.prototype.SetWriteDeadline = function(t) {
		var {$24r, _r, fd, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = setDeadlineImpl(fd, $clone(t, time.Time), 119); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.SetWriteDeadline, $c: true, $r, $24r, _r, fd, t, $s};return $f;
	};
	FD.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	setDeadlineImpl = function(fd, t, mode) {
		var {_1, _r, d, err, fd, mode, t, $s, $r, $c} = $restore(this, {fd, t, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		d = $clone(t, time.Time).UnixNano();
		if ($clone(t, time.Time).IsZero()) {
			d = new $Int64(0, 0);
		}
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_1 = mode;
		if (_1 === (114)) {
			syscall.SetReadDeadline(fd.Sysfd, d);
		} else if (_1 === (119)) {
			syscall.SetWriteDeadline(fd.Sysfd, d);
		} else if (_1 === (233)) {
			syscall.SetReadDeadline(fd.Sysfd, d);
			syscall.SetWriteDeadline(fd.Sysfd, d);
		}
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: setDeadlineImpl, $c: true, $r, _1, _r, d, err, fd, mode, t, $s};return $f;
	};
	fdMutex.ptr.prototype.incref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.incref = function() { return this.$val.incref(); };
	fdMutex.ptr.prototype.increfAndClose = function() {
		var {mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		mu = this;
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high & ~x$3.$high, (new$1.$low & ~x$3.$low) >>> 0));
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* while (true) { */ case 5:
					/* if (!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { break; } */ if(!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { $s = 6; continue; }
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					$r = runtime_Semrelease((mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
				case 6:
				/* while (true) { */ case 8:
					/* if (!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { break; } */ if(!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { $s = 9; continue; }
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					$r = runtime_Semrelease((mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
				case 9:
				$s = -1; return true;
			/* } */ case 4:
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: fdMutex.ptr.prototype.increfAndClose, $c: true, $r, mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s};return $f;
	};
	fdMutex.prototype.increfAndClose = function() { return this.$val.increfAndClose(); };
	fdMutex.ptr.prototype.decref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.decref = function() { return this.$val.decref(); };
	fdMutex.ptr.prototype.rwlock = function(read) {
		var {_tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {read});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("too many concurrent operations on a single file or socket (max 1048575)"));
				}
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					$s = -1; return true;
				}
				$r = runtime_Semacquire(mutexSema); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: fdMutex.ptr.prototype.rwlock, $c: true, $r, _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	fdMutex.prototype.rwlock = function(read) { return this.$val.rwlock(read); };
	fdMutex.ptr.prototype.rwunlock = function(read) {
		var {_tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r, $c} = $restore(this, {read});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high & ~mutexBit.$high, (old.$low & ~mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* */ if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { */ case 5:
					$r = runtime_Semrelease(mutexSema); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				$s = -1; return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			/* } */ case 4:
		$s = 1; continue;
		case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: fdMutex.ptr.prototype.rwunlock, $c: true, $r, _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6, $s};return $f;
	};
	fdMutex.prototype.rwunlock = function(read) { return this.$val.rwunlock(read); };
	FD.ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.incref()) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.incref = function() { return this.$val.incref(); };
	FD.ptr.prototype.decref = function() {
		var {$24r, _r, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.decref()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.decref()) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.decref, $c: true, $r, $24r, _r, fd, $s};return $f;
	};
	FD.prototype.decref = function() { return this.$val.decref(); };
	FD.ptr.prototype.readLock = function() {
		var {_r, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.readLock, $c: true, $r, _r, fd, $s};return $f;
	};
	FD.prototype.readLock = function() { return this.$val.readLock(); };
	FD.ptr.prototype.readUnlock = function() {
		var {_r, _r$1, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.readUnlock, $c: true, $r, _r, _r$1, fd, $s};return $f;
	};
	FD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	FD.ptr.prototype.writeLock = function() {
		var {_r, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.writeLock, $c: true, $r, _r, fd, $s};return $f;
	};
	FD.prototype.writeLock = function() { return this.$val.writeLock(); };
	FD.ptr.prototype.writeUnlock = function() {
		var {_r, _r$1, fd, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: FD.ptr.prototype.writeUnlock, $c: true, $r, _r, _r$1, fd, $s};return $f;
	};
	FD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	FD.ptr.prototype.Fsync = function() {
		var {$24r, $24r$1, _r, err, fd, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		fd = [fd];
		fd[0] = this;
		err = fd[0].incref();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$24r = err;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		$deferred.push([$methodVal(fd[0], "decref"), []]);
		_r = ignoringEINTR((function(fd) { return function $b() {
			var {$24r$1, _r, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = syscall.Fsync(fd[0].Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r$1 = _r;
			$s = 2; case 2: return $24r$1;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r$1, _r, $s};return $f;
		}; })(fd)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r$1 = _r;
		$s = 5; case 5: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: FD.ptr.prototype.Fsync, $c: true, $r, $24r, $24r$1, _r, err, fd, $s, $deferred};return $f; } }
	};
	FD.prototype.Fsync = function() { return this.$val.Fsync(); };
	errNetClosing.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "use of closed network connection";
	};
	errNetClosing.prototype.Error = function() { return this.$val.Error(); };
	errNetClosing.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return false;
	};
	errNetClosing.prototype.Timeout = function() { return this.$val.Timeout(); };
	errNetClosing.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return false;
	};
	errNetClosing.prototype.Temporary = function() { return this.$val.Temporary(); };
	errClosing = function(isFile) {
		var isFile;
		if (isFile) {
			return $pkg.ErrFileClosing;
		}
		return new $pkg.ErrNetClosing.constructor.elem($pkg.ErrNetClosing);
	};
	DeadlineExceededError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	DeadlineExceededError.prototype.Error = function() { return this.$val.Error(); };
	DeadlineExceededError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	DeadlineExceededError.prototype.Timeout = function() { return this.$val.Timeout(); };
	DeadlineExceededError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	DeadlineExceededError.prototype.Temporary = function() { return this.$val.Temporary(); };
	fcntl = function(fd, cmd, arg) {
		var arg, cmd, fd;
		return [0, new syscall.Errno(38)];
	};
	ptrType$2.methods = [{prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, $Bool], [$error], false)}, {prop: "destroy", name: "destroy", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "SetBlocking", name: "SetBlocking", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Pread", name: "Pread", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([sliceType], [$Int, syscall.Sockaddr, $error], false)}, {prop: "ReadFromInet4", name: "ReadFromInet4", pkg: "", typ: $funcType([sliceType, ptrType$5], [$Int, $error], false)}, {prop: "ReadFromInet6", name: "ReadFromInet6", pkg: "", typ: $funcType([sliceType, ptrType$6], [$Int, $error], false)}, {prop: "ReadMsg", name: "ReadMsg", pkg: "", typ: $funcType([sliceType, sliceType, $Int], [$Int, $Int, $Int, syscall.Sockaddr, $error], false)}, {prop: "ReadMsgInet4", name: "ReadMsgInet4", pkg: "", typ: $funcType([sliceType, sliceType, $Int, ptrType$5], [$Int, $Int, $Int, $error], false)}, {prop: "ReadMsgInet6", name: "ReadMsgInet6", pkg: "", typ: $funcType([sliceType, sliceType, $Int, ptrType$6], [$Int, $Int, $Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Pwrite", name: "Pwrite", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "WriteToInet4", name: "WriteToInet4", pkg: "", typ: $funcType([sliceType, ptrType$5], [$Int, $error], false)}, {prop: "WriteToInet6", name: "WriteToInet6", pkg: "", typ: $funcType([sliceType, ptrType$6], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([sliceType, syscall.Sockaddr], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([sliceType, sliceType, syscall.Sockaddr], [$Int, $Int, $error], false)}, {prop: "WriteMsgInet4", name: "WriteMsgInet4", pkg: "", typ: $funcType([sliceType, sliceType, ptrType$5], [$Int, $Int, $error], false)}, {prop: "WriteMsgInet6", name: "WriteMsgInet6", pkg: "", typ: $funcType([sliceType, sliceType, ptrType$6], [$Int, $Int, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [$Int, syscall.Sockaddr, $String, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "ReadDirent", name: "ReadDirent", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Fchmod", name: "Fchmod", pkg: "", typ: $funcType([$Uint32], [$error], false)}, {prop: "Fchdir", name: "Fchdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fstat", name: "Fstat", pkg: "", typ: $funcType([ptrType$7], [$error], false)}, {prop: "Dup", name: "Dup", pkg: "", typ: $funcType([], [$Int, $String, $error], false)}, {prop: "WaitWrite", name: "WaitWrite", pkg: "", typ: $funcType([], [$error], false)}, {prop: "WriteOnce", name: "WriteOnce", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "RawRead", name: "RawRead", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "RawWrite", name: "RawWrite", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "eofError", name: "eofError", pkg: "internal/poll", typ: $funcType([$Int, $error], [$error], false)}, {prop: "Shutdown", name: "Shutdown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "Fchown", name: "Fchown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Ftruncate", name: "Ftruncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "RawControl", name: "RawControl", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readLock", name: "readLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readUnlock", name: "readUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "writeLock", name: "writeLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "writeUnlock", name: "writeUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "Fsync", name: "Fsync", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$8.methods = [{prop: "init", name: "init", pkg: "internal/poll", typ: $funcType([ptrType$2], [$error], false)}, {prop: "close", name: "close", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "evict", name: "evict", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "prepare", name: "prepare", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "prepareRead", name: "prepareRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "prepareWrite", name: "prepareWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "wait", name: "wait", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "waitRead", name: "waitRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitWrite", name: "waitWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitCanceled", name: "waitCanceled", pkg: "internal/poll", typ: $funcType([$Int], [], false)}, {prop: "pollable", name: "pollable", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "increfAndClose", name: "increfAndClose", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "rwlock", name: "rwlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}, {prop: "rwunlock", name: "rwunlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}];
	errNetClosing.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$10.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	FD.init("internal/poll", [{prop: "fdmu", name: "fdmu", embedded: false, exported: false, typ: fdMutex, tag: ""}, {prop: "Sysfd", name: "Sysfd", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "pd", name: "pd", embedded: false, exported: false, typ: pollDesc, tag: ""}, {prop: "iovecs", name: "iovecs", embedded: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "csema", name: "csema", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "isBlocking", name: "isBlocking", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "IsStream", name: "IsStream", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroReadIsEOF", name: "ZeroReadIsEOF", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "isFile", name: "isFile", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	pollDesc.init("internal/poll", [{prop: "fd", name: "fd", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "closing", name: "closing", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	fdMutex.init("internal/poll", [{prop: "state", name: "state", embedded: false, exported: false, typ: $Uint64, tag: ""}, {prop: "rsema", name: "rsema", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "wsema", name: "wsema", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	errNetClosing.init("", []);
	DeadlineExceededError.init("", []);
	$pkg.$initLinknames = function() {
		runtime_Semacquire = $linknames["sync.runtime_Semacquire"];
		runtime_Semrelease = $linknames["sync.runtime_Semrelease"];
};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unix.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.CloseFunc = syscall.Close;
		$pkg.AcceptFunc = syscall.Accept;
		tryDupCloexec = 1;
		$pkg.ErrNetClosing = new errNetClosing.ptr();
		$pkg.ErrFileClosing = errors.New("use of closed file");
		$pkg.ErrNoDeadline = errors.New("file type does not support deadline");
		$pkg.ErrDeadlineExceeded = new DeadlineExceededError.ptr();
		$pkg.ErrNotPollable = errors.New("not pollable");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/syscall/execenv"] = (function() {
	var $pkg = {}, $init, syscall;
	syscall = $packages["syscall"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = syscall.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/testlog"] = (function() {
	var $pkg = {}, $init, sync, atomic, Interface, ptrType, logger, Logger, Stat;
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	Interface = $pkg.Interface = $newType(8, $kindInterface, "testlog.Interface", true, "internal/testlog", true, null);
	ptrType = $ptrType(Interface);
	Logger = function() {
		var impl;
		impl = logger.Load();
		if ($interfaceIsEqual(impl, $ifaceNil)) {
			return $ifaceNil;
		}
		return $assertType(impl, ptrType).$get();
	};
	$pkg.Logger = Logger;
	Stat = function(name) {
		var {log, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Stat, $c: true, $r, log, name, $s};return $f;
	};
	$pkg.Stat = Stat;
	Interface.init([{prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Getenv", name: "Getenv", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Open", name: "Open", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([$String], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		logger = new atomic.Value.ptr($ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path"] = (function() {
	var $pkg = {}, $init, errors, bytealg, utf8;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/fs"] = (function() {
	var $pkg = {}, $init, errors, oserror, io, path, sort, time, utf8, DirEntry, FileInfo, FileMode, PathError, ptrType, sliceType$2, arrayType, interfaceType, errInvalid, errPermission, errExist, errNotExist, errClosed;
	errors = $packages["errors"];
	oserror = $packages["internal/oserror"];
	io = $packages["io"];
	path = $packages["path"];
	sort = $packages["sort"];
	time = $packages["time"];
	utf8 = $packages["unicode/utf8"];
	DirEntry = $pkg.DirEntry = $newType(8, $kindInterface, "fs.DirEntry", true, "io/fs", true, null);
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "fs.FileInfo", true, "io/fs", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "fs.FileMode", true, "io/fs", true, null);
	PathError = $pkg.PathError = $newType(0, $kindStruct, "fs.PathError", true, "io/fs", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	ptrType = $ptrType(PathError);
	sliceType$2 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 32);
	interfaceType = $interfaceType([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	errInvalid = function() {
		return oserror.ErrInvalid;
	};
	errPermission = function() {
		return oserror.ErrPermission;
	};
	errExist = function() {
		return oserror.ErrExist;
	};
	errNotExist = function() {
		return oserror.ErrNotExist;
	};
	errClosed = function() {
		return oserror.ErrClosed;
	};
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType.zero();
		w = 0;
		_ref = "dalTLDpSugct?";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType$2(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2401763328) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	FileMode.prototype.Type = function() {
		var m;
		m = this.$val;
		return (m & 2401763328) >>> 0;
	};
	$ptrType(FileMode).prototype.Type = function() { return new FileMode(this.$get()).Type(); };
	PathError.ptr.prototype.Error = function() {
		var {$24r, _r, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = e.Op + " " + e.Path + ": " + _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: PathError.ptr.prototype.Error, $c: true, $r, $24r, _r, e, $s};return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	PathError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	PathError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	PathError.ptr.prototype.Timeout = function() {
		var {$24r, _r, _tuple, _v, e, ok, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, interfaceType, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: PathError.ptr.prototype.Timeout, $c: true, $r, $24r, _r, _tuple, _v, e, ok, t, $s};return $f;
	};
	PathError.prototype.Timeout = function() { return this.$val.Timeout(); };
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	DirEntry.init([{prop: "Info", name: "Info", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [FileMode], false)}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	PathError.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = path.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.SkipDir = errors.New("skip this directory");
		$pkg.ErrInvalid = errInvalid();
		$pkg.ErrPermission = errPermission();
		$pkg.ErrExist = errExist();
		$pkg.ErrNotExist = errNotExist();
		$pkg.ErrClosed = errClosed();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, itoa, oserror, poll, execenv, unix, testlog, io, fs, runtime, sort, sync, atomic, syscall, time, fileStat, File, rawConn, file, unixDirent, LinkError, onlyWriter, timeout, SyscallError, dirInfo, readdirMode, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$5, ptrType$6, sliceType$4, ptrType$7, ptrType$8, ptrType$9, funcType, ptrType$17, ptrType$18, sliceType$7, sliceType$8, funcType$2, funcType$3, ptrType$19, ptrType$20, errPatternHasSeparator, errWriteAtInAppendMode, lstat, dirBufPool, testingForceReadDirLstat, _r, _r$1, _r$2, lstatNolog, fillFileStatFromSys, Lstat, newRawConn, init, basename, runtime_args, init$1, NewFile, newFile, epipecheck, newUnixDirent, sigpipe, syscallMode, ignoringEINTR, genericReadFrom, errNoDeadline, errDeadlineExceeded, IsNotExist, underlyingErrorIs, underlyingError, direntIno, direntReclen, direntNamlen, direntType, readInt, readIntBE, readIntLE;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	itoa = $packages["internal/itoa"];
	oserror = $packages["internal/oserror"];
	poll = $packages["internal/poll"];
	execenv = $packages["internal/syscall/execenv"];
	unix = $packages["internal/syscall/unix"];
	testlog = $packages["internal/testlog"];
	io = $packages["io"];
	fs = $packages["io/fs"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$3.nil);
			this.sys = new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0));
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$9.nil;
			return;
		}
		this.file = file_;
	});
	rawConn = $pkg.rawConn = $newType(0, $kindStruct, "os.rawConn", true, "os", false, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$2.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_, stdoutOrErr_, appendMode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pfd = new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new poll.pollDesc.ptr(ptrType$6.nil, false), ptrType$7.nil, 0, 0, false, false, false);
			this.name = "";
			this.dirinfo = ptrType$8.nil;
			this.nonblock = false;
			this.stdoutOrErr = false;
			this.appendMode = false;
			return;
		}
		this.pfd = pfd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nonblock = nonblock_;
		this.stdoutOrErr = stdoutOrErr_;
		this.appendMode = appendMode_;
	});
	unixDirent = $pkg.unixDirent = $newType(0, $kindStruct, "os.unixDirent", true, "os", false, function(parent_, name_, typ_, info_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parent = "";
			this.name = "";
			this.typ = 0;
			this.info = $ifaceNil;
			return;
		}
		this.parent = parent_;
		this.name = name_;
		this.typ = typ_;
		this.info = info_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	onlyWriter = $pkg.onlyWriter = $newType(0, $kindStruct, "os.onlyWriter", true, "os", false, function(Writer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Writer = $ifaceNil;
			return;
		}
		this.Writer = Writer_;
	});
	timeout = $pkg.timeout = $newType(8, $kindInterface, "os.timeout", true, "os", false, null);
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	readdirMode = $pkg.readdirMode = $newType(4, $kindInt, "os.readdirMode", true, "os", false, null);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$2);
	ptrType$1 = $ptrType(fileStat);
	ptrType$2 = $ptrType(File);
	ptrType$3 = $ptrType(time.Location);
	ptrType$5 = $ptrType(fs.PathError);
	ptrType$6 = $ptrType(poll.FD);
	sliceType$4 = $sliceType(syscall.Iovec);
	ptrType$7 = $ptrType(sliceType$4);
	ptrType$8 = $ptrType(dirInfo);
	ptrType$9 = $ptrType(file);
	funcType = $funcType([ptrType$9], [$error], false);
	ptrType$17 = $ptrType(LinkError);
	ptrType$18 = $ptrType(SyscallError);
	sliceType$7 = $sliceType(fs.DirEntry);
	sliceType$8 = $sliceType(fs.FileInfo);
	funcType$2 = $funcType([$Uintptr], [], false);
	funcType$3 = $funcType([$Uintptr], [$Bool], false);
	ptrType$19 = $ptrType(rawConn);
	ptrType$20 = $ptrType(unixDirent);
	fileStat.ptr.prototype.Size = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	fileStat.ptr.prototype.Name = function() {
		var fs$1;
		fs$1 = this;
		return fs$1.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs$1;
		fs$1 = this;
		return new fs.FileMode(fs$1.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	File.ptr.prototype.Stat = function() {
		var {_r$3, err, f, fs$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fs$1 = [fs$1];
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs$1[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$3.nil), new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0)));
		_r$3 = f.file.pfd.Fstat(fs$1[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new fs.PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs$1[0], f.file.name);
		$s = -1; return [fs$1[0], $ifaceNil];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Stat, $c: true, $r, _r$3, err, f, fs$1, $s};return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	lstatNolog = function(name) {
		var {_r$3, err, fs$1, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fs$1 = [fs$1];
		name = [name];
		fs$1[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$3.nil), new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0)));
		_r$3 = ignoringEINTR((function(fs$1, name) { return function $b() {
			var {$24r, _r$3, $s, $r, $c} = $restore(this, {});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$3 = syscall.Lstat(name[0], fs$1[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$24r = _r$3;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$3, $s};return $f;
		}; })(fs$1, name)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new fs.PathError.ptr("lstat", name[0], err)];
		}
		fillFileStatFromSys(fs$1[0], name[0]);
		$s = -1; return [fs$1[0], $ifaceNil];
		/* */ } return; } var $f = {$blk: lstatNolog, $c: true, $r, _r$3, err, fs$1, name, $s};return $f;
	};
	fillFileStatFromSys = function(fs$1, name) {
		var _1, fs$1, name;
		fs$1.name = basename(name);
		fs$1.size = fs$1.sys.Size;
		time.Time.copy(fs$1.modTime, time.Unix(fs$1.sys.Mtime, fs$1.sys.MtimeNsec));
		fs$1.mode = ((((fs$1.sys.Mode & 511) >>> 0) >>> 0));
		_1 = (fs$1.sys.Mode & 126976) >>> 0;
		if (_1 === (24576)) {
			fs$1.mode = (fs$1.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs$1.mode = (fs$1.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs$1.mode = (fs$1.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs$1.mode = (fs$1.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs$1.mode = (fs$1.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs$1.mode = (fs$1.mode | (16777216)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 1024) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (4194304)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 2048) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (8388608)) >>> 0;
		}
		if (!((((fs$1.sys.Mode & 512) >>> 0) === 0))) {
			fs$1.mode = (fs$1.mode | (1048576)) >>> 0;
		}
	};
	Lstat = function(name) {
		var {$24r, _r$3, name, $s, $r, $c} = $restore(this, {name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = lstatNolog(name); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Lstat, $c: true, $r, $24r, _r$3, name, $s};return $f;
	};
	$pkg.Lstat = Lstat;
	File.ptr.prototype.readFrom = function(r) {
		var _tmp, _tmp$1, _tmp$2, err, f, handled, n, r;
		n = new $Int64(0, 0);
		handled = false;
		err = $ifaceNil;
		f = this;
		_tmp = new $Int64(0, 0);
		_tmp$1 = false;
		_tmp$2 = $ifaceNil;
		n = _tmp;
		handled = _tmp$1;
		err = _tmp$2;
		return [n, handled, err];
	};
	File.prototype.readFrom = function(r) { return this.$val.readFrom(r); };
	rawConn.ptr.prototype.Control = function(f) {
		var {_r$3, c, err, err$1, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Control");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawControl(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } var $f = {$blk: rawConn.ptr.prototype.Control, $c: true, $r, _r$3, c, err, err$1, f, $s};return $f;
	};
	rawConn.prototype.Control = function(f) { return this.$val.Control(f); };
	rawConn.ptr.prototype.Read = function(f) {
		var {_r$3, c, err, err$1, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Read");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawRead(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } var $f = {$blk: rawConn.ptr.prototype.Read, $c: true, $r, _r$3, c, err, err$1, f, $s};return $f;
	};
	rawConn.prototype.Read = function(f) { return this.$val.Read(f); };
	rawConn.ptr.prototype.Write = function(f) {
		var {_r$3, c, err, err$1, f, $s, $r, $c} = $restore(this, {f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		err = c.file.checkValid("SyscallConn.Write");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = c.file.file.pfd.RawWrite(f); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err$1 = _r$3;
		runtime.KeepAlive(c.file);
		$s = -1; return err$1;
		/* */ } return; } var $f = {$blk: rawConn.ptr.prototype.Write, $c: true, $r, _r$3, c, err, err$1, f, $s};return $f;
	};
	rawConn.prototype.Write = function(f) { return this.$val.Write(f); };
	newRawConn = function(file$1) {
		var file$1;
		return [new rawConn.ptr(file$1), $ifaceNil];
	};
	init = function() {
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	runtime_args = function() {
		return $pkg.Args;
	};
	init$1 = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			if (!(argv === undefined) && $parseInt(argv.length) >= 1) {
				$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
					((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
					i = i + (1) >> 0;
				}
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.WriteString = function(s) {
		var {$24r, _r$3, _tuple, err, f, n, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.Write((new sliceType$2($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		$24r = [n, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.WriteString, $c: true, $r, $24r, _r$3, _tuple, err, f, n, s, $s};return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Fd = function() {
		var {_r$3, f, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return 4294967295;
		}
		/* */ if (f.file.nonblock) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.file.nonblock) { */ case 1:
			_r$3 = f.file.pfd.SetBlocking(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 2:
		$s = -1; return ((f.file.pfd.Sysfd >>> 0));
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Fd, $c: true, $r, _r$3, f, $s};return $f;
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var {$24r, _r$3, _tuple, err, fd, kind, name, nb, $s, $r, $c} = $restore(this, {fd, name});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		kind = 0;
		_tuple = unix.IsNonblock(((fd >> 0)));
		nb = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil) && nb) {
			kind = 3;
		}
		_r$3 = newFile(fd, name, kind); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: NewFile, $c: true, $r, $24r, _r$3, _tuple, err, fd, kind, name, nb, $s};return $f;
	};
	$pkg.NewFile = NewFile;
	newFile = function(fd, name, kind) {
		var {_1, _r$3, err, err$1, err$2, f, fd, fdi, kind, name, pollable, st, typ, $s, $r, $c} = $restore(this, {fd, name, kind});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		fdi = [fdi];
		st = [st];
		fdi[0] = ((fd >> 0));
		if (fdi[0] < 0) {
			$s = -1; return ptrType$2.nil;
		}
		f = new File.ptr(new file.ptr($clone(new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), fdi[0], new poll.pollDesc.ptr(ptrType$6.nil, false), ptrType$7.nil, 0, 0, true, true, false), poll.FD), name, ptrType$8.nil, false, (fdi[0] === 1) || (fdi[0] === 2), false));
		pollable = (kind === 1) || (kind === 2) || (kind === 3);
		/* */ if (kind === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (kind === 1) { */ case 1:
				_1 = "js";
				/* */ if (_1 === ("darwin") || _1 === ("ios") || _1 === ("dragonfly") || _1 === ("freebsd") || _1 === ("netbsd") || _1 === ("openbsd")) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (_1 === ("darwin") || _1 === ("ios") || _1 === ("dragonfly") || _1 === ("freebsd") || _1 === ("netbsd") || _1 === ("openbsd")) { */ case 4:
					st[0] = new syscall.Stat_t.ptr(new $Int64(0, 0), new $Uint64(0, 0), 0, 0, 0, 0, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0), new $Int64(0, 0));
					_r$3 = ignoringEINTR((function(fdi, st) { return function $b() {
						var {$24r, _r$3, $s, $r, $c} = $restore(this, {});
						/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
						_r$3 = syscall.Fstat(fdi[0], st[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						$24r = _r$3;
						$s = 2; case 2: return $24r;
						/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$3, $s};return $f;
					}; })(fdi, st)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					err = _r$3;
					typ = (st[0].Mode & 126976) >>> 0;
					if ($interfaceIsEqual(err, $ifaceNil) && ((typ === 32768) || (typ === 16384))) {
						pollable = false;
					}
					if (false && (typ === 4096)) {
						pollable = false;
					}
				/* } */ case 5:
			case 3:
		/* } */ case 2:
		err$1 = f.file.pfd.Init("file", pollable);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
		} else if (pollable) {
			err$2 = syscall.SetNonblock(fdi[0], true);
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				f.file.nonblock = true;
			}
		}
		runtime.SetFinalizer(f.file, new funcType($methodExpr(ptrType$9, "close")));
		$s = -1; return f;
		/* */ } return; } var $f = {$blk: newFile, $c: true, $r, _1, _r$3, err, err$1, err$2, f, fd, fdi, kind, name, pollable, st, typ, $s};return $f;
	};
	epipecheck = function(file$1, e) {
		var {e, file$1, $s, $r, $c} = $restore(this, {file$1, e});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if ($interfaceIsEqual(e, new syscall.Errno(32)) && file$1.file.stdoutOrErr) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(e, new syscall.Errno(32)) && file$1.file.stdoutOrErr) { */ case 1:
			$r = sigpipe(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: epipecheck, $c: true, $r, e, file$1, $s};return $f;
	};
	file.ptr.prototype.close = function() {
		var {_r$3, e, err, file$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		file$1 = this;
		if (file$1 === ptrType$9.nil) {
			$s = -1; return new syscall.Errno(22);
		}
		if (!(file$1.dirinfo === ptrType$8.nil)) {
			file$1.dirinfo.close();
			file$1.dirinfo = ptrType$8.nil;
		}
		err = $ifaceNil;
		_r$3 = file$1.pfd.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, poll.ErrFileClosing)) {
				e = $pkg.ErrClosed;
			}
			err = new fs.PathError.ptr("close", file$1.name, e);
		}
		runtime.SetFinalizer(file$1, $ifaceNil);
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: file.ptr.prototype.close, $c: true, $r, _r$3, e, err, file$1, $s};return $f;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.seek = function(offset, whence) {
		var {_r$3, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s, $r, $c} = $restore(this, {offset, whence});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (!(f.file.dirinfo === ptrType$8.nil)) {
			f.file.dirinfo.close();
			f.file.dirinfo = ptrType$8.nil;
		}
		_r$3 = f.file.pfd.Seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ret = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = ret;
		_tmp$1 = err;
		ret = _tmp;
		err = _tmp$1;
		$s = -1; return [ret, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.seek, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s};return $f;
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	unixDirent.ptr.prototype.Name = function() {
		var d;
		d = this;
		return d.name;
	};
	unixDirent.prototype.Name = function() { return this.$val.Name(); };
	unixDirent.ptr.prototype.IsDir = function() {
		var d;
		d = this;
		return new fs.FileMode(d.typ).IsDir();
	};
	unixDirent.prototype.IsDir = function() { return this.$val.IsDir(); };
	unixDirent.ptr.prototype.Type = function() {
		var d;
		d = this;
		return d.typ;
	};
	unixDirent.prototype.Type = function() { return this.$val.Type(); };
	unixDirent.ptr.prototype.Info = function() {
		var {$24r, _r$3, d, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		d = this;
		if (!($interfaceIsEqual(d.info, $ifaceNil))) {
			$s = -1; return [d.info, $ifaceNil];
		}
		_r$3 = lstat(d.parent + "/" + d.name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: unixDirent.ptr.prototype.Info, $c: true, $r, $24r, _r$3, d, $s};return $f;
	};
	unixDirent.prototype.Info = function() { return this.$val.Info(); };
	newUnixDirent = function(parent, name, typ) {
		var {_r$3, _r$4, _r$5, _tuple, err, info, name, parent, typ, ude, $s, $r, $c} = $restore(this, {parent, name, typ});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ude = new unixDirent.ptr(parent, name, typ, $ifaceNil);
		if (!((typ === 4294967295)) && !testingForceReadDirLstat) {
			$s = -1; return [ude, $ifaceNil];
		}
		_r$3 = lstat(parent + "/" + name); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		info = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		_r$4 = info.Mode(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = new fs.FileMode(_r$4).Type(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		ude.typ = _r$5;
		ude.info = info;
		$s = -1; return [ude, $ifaceNil];
		/* */ } return; } var $f = {$blk: newUnixDirent, $c: true, $r, _r$3, _r$4, _r$5, _tuple, err, info, name, parent, typ, ude, $s};return $f;
	};
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	File.ptr.prototype.Close = function() {
		var {$24r, _r$3, f, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return $pkg.ErrInvalid;
		}
		_r$3 = f.file.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Close, $c: true, $r, $24r, _r$3, f, $s};return $f;
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	File.ptr.prototype.read = function(b) {
		var {_r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.read, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s};return $f;
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var {_r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r, $c} = $restore(this, {b, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Pread(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.pread, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s};return $f;
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var {_r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.write, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, $s};return $f;
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var {_r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r, $c} = $restore(this, {b, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r$3 = f.file.pfd.Pwrite(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.pwrite, $c: true, $r, _r$3, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s};return $f;
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	syscallMode = function(i) {
		var i, o;
		o = 0;
		o = (o | (((new fs.FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.chmod = function(mode) {
		var {_r$3, e, err, f, mode, $s, $r, $c} = $restore(this, {mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchmod(syscallMode(mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chmod", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.chmod, $c: true, $r, _r$3, e, err, f, mode, $s};return $f;
	};
	File.prototype.chmod = function(mode) { return this.$val.chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var {_r$3, e, err, f, gid, uid, $s, $r, $c} = $restore(this, {uid, gid});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchown(uid, gid); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chown", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Chown, $c: true, $r, _r$3, e, err, f, gid, uid, $s};return $f;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var {_r$3, e, err, f, size, $s, $r, $c} = $restore(this, {size});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Ftruncate(size); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("truncate", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Truncate, $c: true, $r, _r$3, e, err, f, size, $s};return $f;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var {_r$3, e, err, f, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fsync(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("sync", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Sync, $c: true, $r, _r$3, e, err, f, $s};return $f;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Chdir = function() {
		var {_r$3, e, err, f, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.Fchdir(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		e = _r$3;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chdir", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Chdir, $c: true, $r, _r$3, e, err, f, $s};return $f;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	File.ptr.prototype.setDeadline = function(t) {
		var {$24r, _r$3, err, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("SetDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.SetDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.setDeadline, $c: true, $r, $24r, _r$3, err, f, t, $s};return $f;
	};
	File.prototype.setDeadline = function(t) { return this.$val.setDeadline(t); };
	File.ptr.prototype.setReadDeadline = function(t) {
		var {$24r, _r$3, err, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("SetReadDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.SetReadDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.setReadDeadline, $c: true, $r, $24r, _r$3, err, f, t, $s};return $f;
	};
	File.prototype.setReadDeadline = function(t) { return this.$val.setReadDeadline(t); };
	File.ptr.prototype.setWriteDeadline = function(t) {
		var {$24r, _r$3, err, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("SetWriteDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$3 = f.file.pfd.SetWriteDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.setWriteDeadline, $c: true, $r, $24r, _r$3, err, f, t, $s};return $f;
	};
	File.prototype.setWriteDeadline = function(t) { return this.$val.setWriteDeadline(t); };
	File.ptr.prototype.checkValid = function(op) {
		var f, op;
		f = this;
		if (f === ptrType$2.nil) {
			return $pkg.ErrInvalid;
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	ignoringEINTR = function(fn) {
		var {_r$3, err, fn, $s, $r, $c} = $restore(this, {fn});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_r$3 = fn(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
			if (!($interfaceIsEqual(err, new syscall.Errno(4)))) {
				$s = -1; return err;
			}
		$s = 1; continue;
		case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: ignoringEINTR, $c: true, $r, _r$3, err, fn, $s};return $f;
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var {$24r, _r$3, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r$3 = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = e.Op + " " + e.Old + " " + e.New + ": " + _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: LinkError.ptr.prototype.Error, $c: true, $r, $24r, _r$3, e, $s};return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	LinkError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	LinkError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	File.ptr.prototype.Read = function(b) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r$3 = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		e = _tuple[1];
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("read", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Read, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s};return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r, $c} = $restore(this, {b, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new fs.PathError.ptr("readat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r$3 = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("read", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		$s = 1; continue;
		case 2:
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.ReadAt, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s};return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.ReadFrom = function(r) {
		var {$24r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, e, err, err$1, f, handled, n, r, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_tuple = f.readFrom(r);
		n = _tuple[0];
		handled = _tuple[1];
		e = _tuple[2];
		/* */ if (!handled) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!handled) { */ case 1:
			_r$3 = genericReadFrom(f, r); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$24r = [n, err];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("write", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.ReadFrom, $c: true, $r, $24r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, e, err, err$1, f, handled, n, r, $s};return $f;
	};
	File.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	genericReadFrom = function(f, r) {
		var {$24r, _r$3, f, r, x, $s, $r, $c} = $restore(this, {f, r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$3 = io.Copy((x = new onlyWriter.ptr(f), new x.constructor.elem(x)), r); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: genericReadFrom, $c: true, $r, $24r, _r$3, f, r, x, $s};return $f;
	};
	File.ptr.prototype.Write = function(b) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r$3 = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		$r = epipecheck(f, e); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = f.wrapErr("write", e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Write, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s};return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r, $c} = $restore(this, {b, off});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if (f.file.appendMode) {
			_tmp$2 = 0;
			_tmp$3 = errWriteAtInAppendMode;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$4 = 0;
			_tmp$5 = new fs.PathError.ptr("writeat", f.file.name, errors.New("negative offset"));
			n = _tmp$4;
			err = _tmp$5;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r$3 = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("write", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		$s = 1; continue;
		case 2:
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.WriteAt, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, err$1, f, m, n, off, x, $s};return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r, $c} = $restore(this, {offset, whence});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r$3 = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$8.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = f.wrapErr("seek", e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Seek, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s};return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.wrapErr = function(op, err) {
		var err, f, op;
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil) || $interfaceIsEqual(err, io.EOF)) {
			return err;
		}
		if ($interfaceIsEqual(err, poll.ErrFileClosing)) {
			err = $pkg.ErrClosed;
		}
		return new fs.PathError.ptr(op, f.file.name, err);
	};
	File.prototype.wrapErr = function(op, err) { return this.$val.wrapErr(op, err); };
	File.ptr.prototype.Chmod = function(mode) {
		var {$24r, _r$3, f, mode, $s, $r, $c} = $restore(this, {mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.chmod(mode); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Chmod, $c: true, $r, $24r, _r$3, f, mode, $s};return $f;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.SetDeadline = function(t) {
		var {$24r, _r$3, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.setDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.SetDeadline, $c: true, $r, $24r, _r$3, f, t, $s};return $f;
	};
	File.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	File.ptr.prototype.SetReadDeadline = function(t) {
		var {$24r, _r$3, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.setReadDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.SetReadDeadline, $c: true, $r, $24r, _r$3, f, t, $s};return $f;
	};
	File.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	File.ptr.prototype.SetWriteDeadline = function(t) {
		var {$24r, _r$3, f, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.setWriteDeadline($clone(t, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: File.ptr.prototype.SetWriteDeadline, $c: true, $r, $24r, _r$3, f, t, $s};return $f;
	};
	File.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	File.ptr.prototype.SyscallConn = function() {
		var _returncast, err, f;
		f = this;
		err = f.checkValid("SyscallConn");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, err];
		}
		_returncast = newRawConn(f);
		return [_returncast[0], _returncast[1]];
	};
	File.prototype.SyscallConn = function() { return this.$val.SyscallConn(); };
	errNoDeadline = function() {
		return poll.ErrNoDeadline;
	};
	errDeadlineExceeded = function() {
		return poll.ErrDeadlineExceeded;
	};
	SyscallError.ptr.prototype.Error = function() {
		var {$24r, _r$3, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r$3 = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$24r = e.Syscall + ": " + _r$3;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: SyscallError.ptr.prototype.Error, $c: true, $r, $24r, _r$3, e, $s};return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.Err;
	};
	SyscallError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	SyscallError.ptr.prototype.Timeout = function() {
		var {$24r, _r$3, _tuple, _v, e, ok, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r$3 = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3; case 1:
		$24r = _v;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: SyscallError.ptr.prototype.Timeout, $c: true, $r, $24r, _r$3, _tuple, _v, e, ok, t, $s};return $f;
	};
	SyscallError.prototype.Timeout = function() { return this.$val.Timeout(); };
	IsNotExist = function(err) {
		var err;
		return underlyingErrorIs(err, $pkg.ErrNotExist);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingErrorIs = function(err, target) {
		var _tuple, e, err, ok, target;
		err = underlyingError(err);
		if ($interfaceIsEqual(err, target)) {
			return true;
		}
		_tuple = $assertType(err, syscall.Errno, true);
		e = _tuple[0];
		ok = _tuple[1];
		return ok && new syscall.Errno(e).Is(target);
	};
	underlyingError = function(err) {
		var _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType$5, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$17, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	direntIno = function(buf) {
		var buf;
		return [new $Uint64(0, 1), true];
	};
	direntReclen = function(buf) {
		var buf;
		return readInt(buf, 0, 2);
	};
	direntNamlen = function(buf) {
		var _tuple, buf, ok, reclen;
		_tuple = direntReclen(buf);
		reclen = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return [new $Uint64(0, 0), false];
		}
		return [new $Uint64(reclen.$high - 0, reclen.$low - 2), true];
	};
	direntType = function(buf) {
		var buf;
		return 4294967295;
	};
	dirInfo.ptr.prototype.close = function() {
		var d;
		d = this;
		if (!(d.buf === ptrType.nil)) {
			dirBufPool.Put(d.buf);
			d.buf = ptrType.nil;
		}
	};
	dirInfo.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.readdir = function(n, mode) {
		var {_i, _r$3, _r$4, _r$5, _r$6, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, c, d, de, dirents, err, err$1, err$2, errno, f, i, info, infos, ino, mode, n, name, names, namlen, ok, rec, reclen, x, x$1, x$2, $s, $r, $c} = $restore(this, {n, mode});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		dirents = sliceType$7.nil;
		infos = sliceType$8.nil;
		err = $ifaceNil;
		f = this;
		/* */ if (f.file.dirinfo === ptrType$8.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.file.dirinfo === ptrType$8.nil) { */ case 1:
			f.file.dirinfo = new dirInfo.ptr(ptrType.nil, 0, 0);
			_r$3 = dirBufPool.Get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			f.file.dirinfo.buf = $assertType(_r$3, ptrType);
		/* } */ case 2:
		d = f.file.dirinfo;
		if (n === 0) {
			n = -1;
		}
		/* while (true) { */ case 4:
			/* if (!(!((n === 0)))) { break; } */ if(!(!((n === 0)))) { $s = 5; continue; }
			/* */ if (d.bufp >= d.nbuf) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (d.bufp >= d.nbuf) { */ case 6:
				d.bufp = 0;
				errno = $ifaceNil;
				_r$4 = f.file.pfd.ReadDirent(d.buf.$get()); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple = _r$4;
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				runtime.KeepAlive(f);
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = dirents;
					_tmp$2 = infos;
					_tmp$3 = new fs.PathError.ptr("readdirent", f.file.name, errno);
					names = _tmp;
					dirents = _tmp$1;
					infos = _tmp$2;
					err = _tmp$3;
					$s = -1; return [names, dirents, infos, err];
				}
				if (d.nbuf <= 0) {
					/* break; */ $s = 5; continue;
				}
			/* } */ case 7:
			buf = $subslice((d.buf.$get()), d.bufp, d.nbuf);
			_tuple$1 = direntReclen(buf);
			reclen = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok || (x = (new $Uint64(0, buf.$length)), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				/* break; */ $s = 5; continue;
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			d.bufp = d.bufp + (((reclen.$low >> 0))) >> 0;
			_tuple$2 = direntIno(rec);
			ino = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok) {
				/* break; */ $s = 5; continue;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				/* continue; */ $s = 4; continue;
			}
			_tuple$3 = direntNamlen(rec);
			namlen = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 2 + namlen.$low), x$2 = (new $Uint64(0, rec.$length)), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				/* break; */ $s = 5; continue;
			}
			name = $subslice(rec, 2, $flatten64(new $Uint64(0 + namlen.$high, 2 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if (($bytesToString(name)) === "." || ($bytesToString(name)) === "..") {
				/* continue; */ $s = 4; continue;
			}
			if (n > 0) {
				n = n - (1) >> 0;
			}
			/* */ if (mode === 0) { $s = 9; continue; }
			/* */ if (mode === 1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (mode === 0) { */ case 9:
				names = $append(names, ($bytesToString(name)));
				$s = 12; continue;
			/* } else if (mode === 1) { */ case 10:
				_r$5 = newUnixDirent(f.file.name, ($bytesToString(name)), direntType(rec)); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$4 = _r$5;
				de = _tuple$4[0];
				err$1 = _tuple$4[1];
				if (IsNotExist(err$1)) {
					/* continue; */ $s = 4; continue;
				}
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$4 = sliceType.nil;
					_tmp$5 = dirents;
					_tmp$6 = sliceType$8.nil;
					_tmp$7 = err$1;
					names = _tmp$4;
					dirents = _tmp$5;
					infos = _tmp$6;
					err = _tmp$7;
					$s = -1; return [names, dirents, infos, err];
				}
				dirents = $append(dirents, de);
				$s = 12; continue;
			/* } else { */ case 11:
				_r$6 = lstat(f.file.name + "/" + ($bytesToString(name))); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$5 = _r$6;
				info = _tuple$5[0];
				err$2 = _tuple$5[1];
				if (IsNotExist(err$2)) {
					/* continue; */ $s = 4; continue;
				}
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$8 = sliceType.nil;
					_tmp$9 = sliceType$7.nil;
					_tmp$10 = infos;
					_tmp$11 = err$2;
					names = _tmp$8;
					dirents = _tmp$9;
					infos = _tmp$10;
					err = _tmp$11;
					$s = -1; return [names, dirents, infos, err];
				}
				infos = $append(infos, info);
			/* } */ case 12:
		$s = 4; continue;
		case 5:
		if (n > 0 && (((names.$length + dirents.$length >> 0) + infos.$length >> 0) === 0)) {
			_tmp$12 = sliceType.nil;
			_tmp$13 = sliceType$7.nil;
			_tmp$14 = sliceType$8.nil;
			_tmp$15 = io.EOF;
			names = _tmp$12;
			dirents = _tmp$13;
			infos = _tmp$14;
			err = _tmp$15;
			$s = -1; return [names, dirents, infos, err];
		}
		_tmp$16 = names;
		_tmp$17 = dirents;
		_tmp$18 = infos;
		_tmp$19 = $ifaceNil;
		names = _tmp$16;
		dirents = _tmp$17;
		infos = _tmp$18;
		err = _tmp$19;
		$s = -1; return [names, dirents, infos, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.readdir, $c: true, $r, _i, _r$3, _r$4, _r$5, _r$6, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, c, d, de, dirents, err, err$1, err$2, errno, f, i, info, infos, ino, mode, n, name, names, namlen, ok, rec, reclen, x, x$1, x$2, $s};return $f;
	};
	File.prototype.readdir = function(n, mode) { return this.$val.readdir(n, mode); };
	readInt = function(b, off, size) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < (((off + size >>> 0) >> 0))) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), x$1 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), x$5 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$15 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$1 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$5 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$15 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	File.ptr.prototype.Readdir = function(n) {
		var {_r$3, _tuple, err, f, infos, n, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return [sliceType$8.nil, $pkg.ErrInvalid];
		}
		_r$3 = f.readdir(n, 2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		infos = _tuple[2];
		err = _tuple[3];
		if (infos === sliceType$8.nil) {
			infos = new sliceType$8([]);
		}
		$s = -1; return [infos, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Readdir, $c: true, $r, _r$3, _tuple, err, f, infos, n, $s};return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var {_r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, f, n, names, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r$3 = f.readdir(n, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		names = _tuple[0];
		err = _tuple[3];
		if (names === sliceType.nil) {
			names = new sliceType([]);
		}
		_tmp$2 = names;
		_tmp$3 = err;
		names = _tmp$2;
		err = _tmp$3;
		$s = -1; return [names, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.Readdirnames, $c: true, $r, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, f, n, names, $s};return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.ReadDir = function(n) {
		var {_r$3, _tuple, dirents, err, f, n, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType$2.nil) {
			$s = -1; return [sliceType$7.nil, $pkg.ErrInvalid];
		}
		_r$3 = f.readdir(n, 1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		dirents = _tuple[1];
		err = _tuple[3];
		if (dirents === sliceType$7.nil) {
			dirents = new sliceType$7([]);
		}
		$s = -1; return [dirents, err];
		/* */ } return; } var $f = {$blk: File.ptr.prototype.ReadDir, $c: true, $r, _r$3, _tuple, dirents, err, f, n, $s};return $f;
	};
	File.prototype.ReadDir = function(n) { return this.$val.ReadDir(n); };
	ptrType$1.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [fs.FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [fs.FileInfo, $error], false)}, {prop: "readFrom", name: "readFrom", pkg: "os", typ: $funcType([io.Reader], [$Int64, $Bool, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "chmod", name: "chmod", pkg: "os", typ: $funcType([fs.FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "setDeadline", name: "setDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setReadDeadline", name: "setReadDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setWriteDeadline", name: "setWriteDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "wrapErr", name: "wrapErr", pkg: "os", typ: $funcType([$String, $error], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([fs.FileMode], [$error], false)}, {prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SyscallConn", name: "SyscallConn", pkg: "", typ: $funcType([], [syscall.RawConn, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int, readdirMode], [sliceType, sliceType$7, sliceType$8, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$8, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "ReadDir", name: "ReadDir", pkg: "", typ: $funcType([$Int], [sliceType$7, $error], false)}];
	ptrType$19.methods = [{prop: "Control", name: "Control", pkg: "", typ: $funcType([funcType$2], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([funcType$3], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([funcType$3], [$error], false)}];
	ptrType$9.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType$20.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [fs.FileMode], false)}, {prop: "Info", name: "Info", pkg: "", typ: $funcType([], [fs.FileInfo, $error], false)}];
	ptrType$17.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$8.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [], false)}];
	fileStat.init("os", [{prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", embedded: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", embedded: false, exported: false, typ: fs.FileMode, tag: ""}, {prop: "modTime", name: "modTime", embedded: false, exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", embedded: false, exported: false, typ: syscall.Stat_t, tag: ""}]);
	File.init("os", [{prop: "file", name: "file", embedded: true, exported: false, typ: ptrType$9, tag: ""}]);
	rawConn.init("os", [{prop: "file", name: "file", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	file.init("os", [{prop: "pfd", name: "pfd", embedded: false, exported: false, typ: poll.FD, tag: ""}, {prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", embedded: false, exported: false, typ: ptrType$8, tag: ""}, {prop: "nonblock", name: "nonblock", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "stdoutOrErr", name: "stdoutOrErr", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "appendMode", name: "appendMode", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	unixDirent.init("os", [{prop: "parent", name: "parent", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "name", name: "name", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "typ", name: "typ", embedded: false, exported: false, typ: fs.FileMode, tag: ""}, {prop: "info", name: "info", embedded: false, exported: false, typ: fs.FileInfo, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	onlyWriter.init("", [{prop: "Writer", name: "Writer", embedded: true, exported: true, typ: io.Writer, tag: ""}]);
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", embedded: false, exported: true, typ: $error, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "nbuf", name: "nbuf", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", embedded: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = itoa.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oserror.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = execenv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unix.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = testlog.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fs.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		testingForceReadDirLstat = false;
		errPatternHasSeparator = errors.New("pattern contains path separator");
		errWriteAtInAppendMode = errors.New("os: invalid use of WriteAt on file opened with O_APPEND");
		lstat = Lstat;
		$pkg.ErrProcessDone = errors.New("os: process already finished");
		$pkg.ErrInvalid = fs.ErrInvalid;
		$pkg.ErrNotExist = fs.ErrNotExist;
		$pkg.ErrClosed = fs.ErrClosed;
		$pkg.ErrNoDeadline = errNoDeadline();
		$pkg.ErrDeadlineExceeded = errDeadlineExceeded();
		dirBufPool = new sync.Pool.ptr(sliceType$1.nil, (function() {
			var buf, buf$24ptr;
			buf = $makeSlice(sliceType$2, 8192);
			return (buf$24ptr || (buf$24ptr = new ptrType(function() { return buf; }, function($v) { buf = $v; })));
		}));
		_r = NewFile(0, "/dev/stdin"); /* */ $s = 17; case 17: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$pkg.Stdin = _r;
		_r$1 = NewFile(1, "/dev/stdout"); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$pkg.Stdout = _r$1;
		_r$2 = NewFile(2, "/dev/stderr"); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$pkg.Stderr = _r$2;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, fmtsort, io, math, os, reflect, strconv, sync, utf8, scanError, ss, ssave, State, Formatter, Stringer, GoStringer, buffer, pp, fmtFlags, fmt, wrapError, arrayType, sliceType, sliceType$1, ptrType, ptrType$1, arrayType$1, sliceType$2, ptrType$4, ptrType$24, arrayType$3, funcType, ptrType$26, ptrType$27, space, ssFree, complexError, boolError, ppFree, isSpace, notSpace, indexRune, newPrinter, Fprintf, Printf, Sprintf, Fprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, Errorf;
	errors = $packages["errors"];
	fmtsort = $packages["internal/fmtsort"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_, wrapErrs_, wrappedErr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType$1.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			this.wrapErrs = false;
			this.wrappedErr = $ifaceNil;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
		this.wrapErrs = wrapErrs_;
		this.wrappedErr = wrappedErr_;
	});
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType$1.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	wrapError = $pkg.wrapError = $newType(0, $kindStruct, "fmt.wrapError", true, "fmt", false, function(msg_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			this.err = $ifaceNil;
			return;
		}
		this.msg = msg_;
		this.err = err_;
	});
	arrayType = $arrayType($Uint16, 2);
	sliceType = $sliceType(arrayType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType$1 = $arrayType($Uint8, 68);
	sliceType$2 = $sliceType($Uint8);
	ptrType$4 = $ptrType(ss);
	ptrType$24 = $ptrType(pp);
	arrayType$3 = $arrayType($Uint8, 6);
	funcType = $funcType([$Int32], [$Bool], false);
	ptrType$26 = $ptrType(fmt);
	ptrType$27 = $ptrType(wrapError);
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var {_r, _tuple, err, r, s, size, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.ReadRune, $c: true, $r, _r, _tuple, err, r, s, size, $s};return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var {_r, _tuple, err, r, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.getRune, $c: true, $r, _r, _tuple, err, r, s, $s};return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var {_r, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.UnreadRune, $c: true, $r, _r, s, $s};return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var {$24r, _r, err, f, s, skipSpace, tok, $s, $deferred, $r, $c} = $restore(this, {skipSpace, f});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$24r = [tok, err[0]];
		$s = 2; case 2: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { var $f = {$blk: ss.ptr.prototype.Token, $c: true, $r, $24r, _r, err, f, s, skipSpace, tok, $s, $deferred};return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.SkipSpace = function() {
		var {_r, _r$1, _r$2, _v, r, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			if (r === 10) {
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			}
			/* */ if (!isSpace(r)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!isSpace(r)) { */ case 8:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 9:
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.SkipSpace, $c: true, $r, _r, _r$1, _r$2, _v, r, s, $s};return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var {_r, _r$1, _r$2, f, r, s, skipSpace, $s, $r, $c} = $restore(this, {skipSpace, f});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.SkipSpace(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).writeRune(r);
		$s = 4; continue;
		case 5:
		$s = -1; return $convertSliceType(s.buf, sliceType$2);
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.token, $c: true, $r, _r, _r$1, _r$2, f, r, s, skipSpace, $s};return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var {_r, _r$1, ok, r, s, $s, $r, $c} = $restore(this, {ok});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } var $f = {$blk: ss.ptr.prototype.peek, $c: true, $r, _r, _r$1, ok, r, s, $s};return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	$ptrType(buffer).prototype.write = function(p) {
		var b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.writeString = function(s) {
		var b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.writeByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.writeRune = function(r) {
		var b, bp, n, r, w;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune($convertSliceType($subslice(b, n, (n + 4 >> 0)), sliceType$2), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var {_r, p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$24);
		p.panicking = false;
		p.erroring = false;
		p.wrapErrs = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } var $f = {$blk: newPrinter, $c: true, $r, _r, p, $s};return $f;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.$capacity > 65536) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		p.wrappedErr = $ifaceNil;
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	pp.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, err, p, ret, s;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(s);
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Fprintf = function(w, format, a) {
		var {_r, _r$1, _tuple, a, err, format, n, p, w, $s, $r, $c} = $restore(this, {w, format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write($convertSliceType(p.buf, sliceType$2)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Fprintf, $c: true, $r, _r, _r$1, _tuple, a, err, format, n, p, w, $s};return $f;
	};
	$pkg.Fprintf = Fprintf;
	Printf = function(format, a) {
		var {$24r, _r, _tuple, a, err, format, n, $s, $r, $c} = $restore(this, {format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$24r = [n, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Printf, $c: true, $r, $24r, _r, _tuple, a, err, format, n, $s};return $f;
	};
	$pkg.Printf = Printf;
	Sprintf = function(format, a) {
		var {_r, a, format, p, s, $s, $r, $c} = $restore(this, {format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } var $f = {$blk: Sprintf, $c: true, $r, _r, a, format, p, s, $s};return $f;
	};
	$pkg.Sprintf = Sprintf;
	Fprintln = function(w, a) {
		var {_r, _r$1, _tuple, a, err, n, p, w, $s, $r, $c} = $restore(this, {w, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write($convertSliceType(p.buf, sliceType$2)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Fprintln, $c: true, $r, _r, _r$1, _tuple, a, err, n, p, w, $s};return $f;
	};
	$pkg.Fprintln = Fprintln;
	getField = function(v, i) {
		var {_r, _r$1, i, v, val, $s, $r, $c} = $restore(this, {v, i});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } var $f = {$blk: getField, $c: true, $r, _r, _r$1, i, v, val, $s};return $f;
	};
	tooLarge = function(x) {
		var x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var {_r, p, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(63);
		_r = $clone(v, reflect.Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(63);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.unknownType, $c: true, $r, _r, p, v, $s};return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var {_r, _r$1, p, verb, $s, $r, $c} = $restore(this, {verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.badVerb, $c: true, $r, _r, _r$1, p, verb, $s};return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var {_1, p, v, verb, $s, $r, $c} = $restore(this, {v, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmtBoolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtBool, $c: true, $r, _1, p, v, verb, $s};return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmtInteger(v, 16, false, 118, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var {_1, isSigned, p, v, verb, $s, $r, $c} = $restore(this, {v, isSigned, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if ((_1 === (111)) || (_1 === (79))) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmtInteger(v, 10, isSigned, verb, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmtInteger(v, 10, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmtInteger(v, 2, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if ((_1 === (111)) || (_1 === (79))) { */ case 5:
				p.fmt.fmtInteger(v, 8, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmtInteger(v, 16, isSigned, verb, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmtInteger(v, 16, isSigned, verb, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmtC(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				p.fmt.fmtQc(v);
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmtUnicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtInteger, $c: true, $r, _1, isSigned, p, v, verb, $s};return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var {_1, p, size, v, verb, $s, $r, $c} = $restore(this, {v, size, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmtFloat(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88))) { */ case 3:
				p.fmt.fmtFloat(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmtFloat(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmtFloat(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtFloat, $c: true, $r, _1, p, size, v, verb, $s};return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var {_1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r, $c} = $restore(this, {v, size, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120)) || (_1 === (88)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtComplex, $c: true, $r, _1, _q, _q$1, oldPlus, p, size, v, verb, $s};return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var {_1, p, v, verb, $s, $r, $c} = $restore(this, {v, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmtQ(v);
				} else {
					p.fmt.fmtS(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmtS(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmtSx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmtSx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmtQ(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtString, $c: true, $r, _1, p, v, verb, $s};return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var {_1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r, $c} = $restore(this, {v, verb, typeString});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
						p.fmt.fmtInteger((new $Uint64(0, c$1)), 10, false, verb, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmtBs(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmtBx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmtBx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmtQ(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtBytes, $c: true, $r, _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s};return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var {_1, _2, _r, p, u, value, verb, $s, $r, $c} = $restore(this, {value, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(40);
					_r = $clone(value, reflect.Value).Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.fmtPointer, $c: true, $r, _1, _2, _r, p, u, value, verb, $s};return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb, method) {
		var {_r, arg, err, method, oldFlags, p, v, verb, $s, $r, $c} = $restore(this, {arg, verb, method});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(PANIC=");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(method);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(" method: ");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.catchPanic, $c: true, $r, _r, arg, err, method, oldFlags, p, v, verb, $s};return $f;
	};
	pp.prototype.catchPanic = function(arg, verb, method) { return this.$val.catchPanic(arg, verb, method); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var {$24r, $24r$1, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, err, formatter, handled, ok, ok$1, ok$2, p, stringer, v, v$1, verb, $s, $deferred, $r, $c} = $restore(this, {verb});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		/* */ if (p.erroring) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.erroring) { */ case 1:
			$24r = handled;
			$s = 3; case 3: return $24r;
		/* } */ case 2:
		/* */ if (verb === 119) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (verb === 119) { */ case 4:
			_tuple = $assertType(p.arg, $error, true);
			err = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok || !p.wrapErrs || !($interfaceIsEqual(p.wrappedErr, $ifaceNil))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!ok || !p.wrapErrs || !($interfaceIsEqual(p.wrappedErr, $ifaceNil))) { */ case 6:
				p.wrappedErr = $ifaceNil;
				p.wrapErrs = false;
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				handled = true;
				$24r$1 = handled;
				$s = 9; case 9: return $24r$1;
			/* } */ case 7:
			p.wrappedErr = err;
			verb = 118;
		/* } */ case 5:
		_tuple$1 = $assertType(p.arg, Formatter, true);
		formatter = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (ok$1) { */ case 10:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "Format"]]);
			$r = formatter.Format(p, verb); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$24r$2 = handled;
			$s = 13; case 13: return $24r$2;
		/* } */ case 11:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 14:
			_tuple$2 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$2[0];
			ok$2 = _tuple$2[1];
			/* */ if (ok$2) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (ok$2) { */ case 17:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "GoString"]]);
				_r = stringer.GoString(); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmtS(_r); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$24r$3 = handled;
				$s = 21; case 21: return $24r$3;
			/* } */ case 18:
			$s = 16; continue;
		/* } else { */ case 15:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 23:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 25; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 25:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "Error"]]);
						_r$1 = v.Error(); /* */ $s = 28; case 28: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$24r$4 = handled;
						$s = 30; case 30: return $24r$4;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 26:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb, "String"]]);
						_r$2 = v$1.String(); /* */ $s = 31; case 31: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$24r$5 = handled;
						$s = 33; case 33: return $24r$5;
					/* } */ case 27:
				/* } */ case 24:
			case 22:
		/* } */ case 16:
		handled = false;
		$24r$6 = handled;
		$s = 34; case 34: return $24r$6;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { var $f = {$blk: pp.ptr.prototype.handleMethods, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, err, formatter, handled, ok, ok$1, ok$2, p, stringer, v, v$1, verb, $s, $deferred};return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var {_1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r, $c} = $restore(this, {arg, verb});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmtS(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.printArg, $c: true, $r, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s};return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var {_1, _2, _3, _4, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, name, p, sorted, t, value, value$1, verb, x, x$1, $s, $r, $c} = $restore(this, {value, verb, depth});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("map[");
				/* } */ case 44:
				_r$4 = fmtsort.Sort($clone(f, reflect.Value)); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				sorted = _r$4;
				_ref = sorted.Key;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(58);
					$r = p.printValue($clone((x$1 = sorted.Value, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), reflect.Value), verb, depth + 1 >> 0); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				$s = 48; continue;
				case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 52; continue; }
				/* */ $s = 53; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 52:
					_r$5 = $clone(f, reflect.Value).Type().String(); /* */ $s = 54; case 54: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$5); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 53:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
				i$1 = 0;
				/* while (true) { */ case 56:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 57; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 58; continue; }
					/* */ $s = 59; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 58:
						_r$6 = $clone(f, reflect.Value).Type().Field(i$1); /* */ $s = 60; case 60: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						name = _r$6.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(58);
						}
					/* } */ case 59:
					_r$7 = getField($clone(f, reflect.Value), i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$7, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				$s = 56; continue;
				case 57:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$8 = $clone(f, reflect.Value).Elem(); /* */ $s = 63; case 63: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				value$1 = _r$8;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 64; continue; }
				/* */ $s = 65; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 64:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 67; continue; }
					/* */ $s = 68; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 67:
						_r$9 = $clone(f, reflect.Value).Type().String(); /* */ $s = 70; case 70: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$9); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = 69; continue;
					/* } else { */ case 68:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
					/* } */ case 69:
					$s = 66; continue;
				/* } else { */ case 65:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 66:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 74; continue; }
					/* */ $s = 75; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 74:
						t = $clone(f, reflect.Value).Type();
						_r$10 = t.Elem(); /* */ $s = 78; case 78: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$11 = _r$10.Kind(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						/* */ if (_r$11 === 8) { $s = 76; continue; }
						/* */ $s = 77; continue;
						/* if (_r$11 === 8) { */ case 76:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 80; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 81; continue; }
							/* */ $s = 82; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 80:
								_r$12 = $clone(f, reflect.Value).Bytes(); /* */ $s = 84; case 84: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
								bytes = _r$12;
								$s = 83; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 81:
								_r$13 = $clone(f, reflect.Value).Len(); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								_arg = _r$13;
								_r$14 = $clone(f, reflect.Value).Slice(0, _arg); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								_r$15 = $clone(_r$14, reflect.Value).Bytes(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
								bytes = _r$15;
								$s = 83; continue;
							/* } else { */ case 82:
								_r$16 = $clone(f, reflect.Value).Len(); /* */ $s = 88; case 88: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
								bytes = $makeSlice(sliceType$2, _r$16);
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 89:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 90; continue; }
									i$2 = _i$1;
									_r$17 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
									_r$18 = $clone(_r$17, reflect.Value).Uint(); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$18.$low << 24 >>> 24)));
									_i$1++;
								$s = 89; continue;
								case 90:
							/* } */ case 83:
							_arg$1 = bytes;
							_arg$2 = verb;
							_r$19 = t.String(); /* */ $s = 93; case 93: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							_arg$3 = _r$19;
							$r = p.fmtBytes(_arg$1, _arg$2, _arg$3); /* */ $s = 94; case 94: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 77:
					/* } */ case 75:
				case 73:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 95; continue; }
				/* */ $s = 96; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 95:
					_r$20 = $clone(f, reflect.Value).Type().String(); /* */ $s = 98; case 98: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$20); /* */ $s = 99; case 99: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(123);
					i$3 = 0;
					/* while (true) { */ case 100:
						_r$21 = $clone(f, reflect.Value).Len(); /* */ $s = 102; case 102: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						/* if (!(i$3 < _r$21)) { break; } */ if(!(i$3 < _r$21)) { $s = 101; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
						}
						_r$22 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 103; case 103: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$22, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					$s = 100; continue;
					case 101:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(125);
					$s = 97; continue;
				/* } else { */ case 96:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(91);
					i$4 = 0;
					/* while (true) { */ case 105:
						_r$23 = $clone(f, reflect.Value).Len(); /* */ $s = 107; case 107: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						/* if (!(i$4 < _r$23)) { break; } */ if(!(i$4 < _r$23)) { $s = 106; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
						}
						_r$24 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 108; case 108: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$24, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					$s = 105; continue;
					case 106:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(93);
				/* } */ case 97:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 110; continue; }
				/* */ $s = 111; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 110:
						_r$25 = $clone(f, reflect.Value).Elem(); /* */ $s = 113; case 113: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
						a = _r$25;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 114; continue; }
						/* */ $s = 115; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 114:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 115:
					case 112:
				/* } */ case 111:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 117; case 117: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 118; case 118: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.printValue, $c: true, $r, _1, _2, _3, _4, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, name, p, sorted, t, value, value$1, verb, x, x$1, $s};return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var {_1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r, $c} = $restore(this, {a, argNum});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } var $f = {$blk: intFromArg, $c: true, $r, _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s};return $f;
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var {_1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, size, verb, $s, $r, $c} = $restore(this, {format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			$s = 3; continue;
			case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tmp = ((format.charCodeAt(i) >> 0));
			_tmp$1 = 1;
			verb = _tmp;
			size = _tmp$1;
			if (verb >= 128) {
				_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
				verb = _tuple$7[0];
				size = _tuple$7[1];
			}
			i = i + (size) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		$s = 1; continue;
		case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			$s = 37; continue;
			case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.doPrintf, $c: true, $r, _1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, size, verb, $s};return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var {_i, _ref, a, arg, argNum, p, $s, $r, $c} = $restore(this, {a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		$s = 1; continue;
		case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).writeByte(10);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: pp.ptr.prototype.doPrintln, $c: true, $r, _i, _ref, a, arg, argNum, p, $s};return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.write(b);
		} else {
			f.buf.write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.writeString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.writeString(s);
		} else {
			f.buf.writeString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmtBoolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmtBoolean = function(v) { return this.$val.fmtBoolean(v); };
	fmt.ptr.prototype.fmtUnicode = function(u) {
		var buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmtUnicode = function(u) { return this.$val.fmtUnicode(u); };
	fmt.ptr.prototype.fmtInteger = function(u, base, isSigned, verb, digits) {
		var _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, verb, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (2)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 98);
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			} else if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (verb === 79) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 111);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmtInteger = function(u, base, isSigned, verb, digits) { return this.$val.fmtInteger(u, base, isSigned, verb, digits); };
	fmt.ptr.prototype.truncateString = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncateString = function(s) { return this.$val.truncateString(s); };
	fmt.ptr.prototype.truncate = function(b) {
		var _tuple, b, f, i, n, wid;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			i = 0;
			while (true) {
				if (!(i < b.$length)) { break; }
				n = n - (1) >> 0;
				if (n < 0) {
					return $subslice(b, 0, i);
				}
				wid = 1;
				if (((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) >= 128) {
					_tuple = utf8.DecodeRune($subslice(b, i));
					wid = _tuple[1];
				}
				i = i + (wid) >> 0;
			}
		}
		return b;
	};
	fmt.prototype.truncate = function(b) { return this.$val.truncate(b); };
	fmt.ptr.prototype.fmtS = function(s) {
		var f, s;
		f = this;
		s = f.truncateString(s);
		f.padString(s);
	};
	fmt.prototype.fmtS = function(s) { return this.$val.fmtS(s); };
	fmt.ptr.prototype.fmtBs = function(b) {
		var b, f;
		f = this;
		b = f.truncate(b);
		f.pad(b);
	};
	fmt.prototype.fmtBs = function(b) { return this.$val.fmtBs(b); };
	fmt.ptr.prototype.fmtSbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmtSbx = function(s, b, digits) { return this.$val.fmtSbx(s, b, digits); };
	fmt.ptr.prototype.fmtSx = function(s, digits) {
		var digits, f, s;
		f = this;
		f.fmtSbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmtSx = function(s, digits) { return this.$val.fmtSx(s, digits); };
	fmt.ptr.prototype.fmtBx = function(b, digits) {
		var b, digits, f;
		f = this;
		f.fmtSbx("", b, digits);
	};
	fmt.prototype.fmtBx = function(b, digits) { return this.$val.fmtBx(b, digits); };
	fmt.ptr.prototype.fmtQ = function(s) {
		var buf, f, s;
		f = this;
		s = f.truncateString(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmtQ = function(s) { return this.$val.fmtQ(s); };
	fmt.ptr.prototype.fmtC = function(c) {
		var buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	fmt.ptr.prototype.fmtQc = function(c) {
		var buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmtQc = function(c) { return this.$val.fmtQc(c); };
	fmt.ptr.prototype.fmtFloat = function(v, size, verb, prec) {
		var _1, _2, digits, f, hasDecimalPoint, i, num, oldZero, prec, sawNonzeroDigit, size, tail, tailBuf, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.sharp && !((verb === 98))) {
			digits = 0;
			_1 = verb;
			if ((_1 === (118)) || (_1 === (103)) || (_1 === (71)) || (_1 === (120))) {
				digits = prec;
				if (digits === -1) {
					digits = 6;
				}
			}
			tailBuf = arrayType$3.zero();
			tail = $subslice(new sliceType$2(tailBuf), 0, 0);
			hasDecimalPoint = false;
			sawNonzeroDigit = false;
			i = 1;
			while (true) {
				if (!(i < num.$length)) { break; }
				switch (0) { default:
					_2 = ((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]);
					if (_2 === (46)) {
						hasDecimalPoint = true;
					} else if ((_2 === (112)) || (_2 === (80))) {
						tail = $appendSlice(tail, $subslice(num, i));
						num = $subslice(num, 0, i);
					} else if ((_2 === (101)) || (_2 === (69))) {
						if (!((verb === 120)) && !((verb === 88))) {
							tail = $appendSlice(tail, $subslice(num, i));
							num = $subslice(num, 0, i);
							break;
						}
						if (!((((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]) === 48))) {
							sawNonzeroDigit = true;
						}
						if (sawNonzeroDigit) {
							digits = digits - (1) >> 0;
						}
					} else {
						if (!((((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]) === 48))) {
							sawNonzeroDigit = true;
						}
						if (sawNonzeroDigit) {
							digits = digits - (1) >> 0;
						}
					}
				}
				i = i + (1) >> 0;
			}
			if (!hasDecimalPoint) {
				if ((num.$length === 2) && ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 48)) {
					digits = digits - (1) >> 0;
				}
				num = $append(num, 46);
			}
			while (true) {
				if (!(digits > 0)) { break; }
				num = $append(num, 48);
				digits = digits - (1) >> 0;
			}
			num = $appendSlice(num, tail);
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.writeByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmtFloat = function(v, size, verb, prec) { return this.$val.fmtFloat(v, size, verb, prec); };
	Errorf = function(format, a) {
		var {_r, a, err, format, p, s, $s, $r, $c} = $restore(this, {format, a});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		p.wrapErrs = true;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		err = $ifaceNil;
		if ($interfaceIsEqual(p.wrappedErr, $ifaceNil)) {
			err = errors.New(s);
		} else {
			err = new wrapError.ptr(s, p.wrappedErr);
		}
		p.free();
		$s = -1; return err;
		/* */ } return; } var $f = {$blk: Errorf, $c: true, $r, _r, a, err, format, p, s, $s};return $f;
	};
	$pkg.Errorf = Errorf;
	wrapError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.msg;
	};
	wrapError.prototype.Error = function() { return this.$val.Error(); };
	wrapError.ptr.prototype.Unwrap = function() {
		var e;
		e = this;
		return e.err;
	};
	wrapError.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	ptrType$4.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanPercent", name: "scanPercent", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [$Int, $error], false)}];
	ptrType$1.methods = [{prop: "write", name: "write", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "writeString", name: "writeString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "writeByte", name: "writeByte", pkg: "fmt", typ: $funcType([$Uint8], [], false)}, {prop: "writeRune", name: "writeRune", pkg: "fmt", typ: $funcType([$Int32], [], false)}];
	ptrType$24.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $String], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType$1], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType$1], [], false)}];
	ptrType$26.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtBoolean", name: "fmtBoolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $Int32, $String], [], false)}, {prop: "truncateString", name: "truncateString", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([sliceType$2], [sliceType$2], false)}, {prop: "fmtS", name: "fmtS", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtBs", name: "fmtBs", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "fmtSbx", name: "fmtSbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmtSx", name: "fmtSx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmtBx", name: "fmtBx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmtQ", name: "fmtQ", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtQc", name: "fmtQc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$27.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [$error], false)}];
	scanError.init("fmt", [{prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", embedded: false, exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "ssave", embedded: true, exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", embedded: false, exported: false, typ: $Int, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", embedded: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", embedded: false, exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", embedded: false, exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "wrapErrs", name: "wrapErrs", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "wrappedErr", name: "wrappedErr", embedded: false, exported: false, typ: $error, tag: ""}]);
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "fmtFlags", embedded: true, exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", embedded: false, exported: false, typ: arrayType$1, tag: ""}]);
	wrapError.init("fmt", [{prop: "msg", name: "msg", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "err", name: "err", embedded: false, exported: false, typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmtsort.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		space = new sliceType([$clone($toNativeArray($kindUint16, [9, 13]), arrayType), $clone($toNativeArray($kindUint16, [32, 32]), arrayType), $clone($toNativeArray($kindUint16, [133, 133]), arrayType), $clone($toNativeArray($kindUint16, [160, 160]), arrayType), $clone($toNativeArray($kindUint16, [5760, 5760]), arrayType), $clone($toNativeArray($kindUint16, [8192, 8202]), arrayType), $clone($toNativeArray($kindUint16, [8232, 8233]), arrayType), $clone($toNativeArray($kindUint16, [8239, 8239]), arrayType), $clone($toNativeArray($kindUint16, [8287, 8287]), arrayType), $clone($toNativeArray($kindUint16, [12288, 12288]), arrayType)]);
		ssFree = new sync.Pool.ptr(sliceType$1.nil, (function() {
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		ppFree = new sync.Pool.ptr(sliceType$1.nil, (function() {
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType$1.zero()), false, false, false, false, false, $ifaceNil);
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, bytealg, io, unicode, utf8, Buffer, readOp, sliceType, ptrType$1, errNegativeRead, errUnreadByte, IndexByte, Equal, HasPrefix, Index, growSlice, NewBufferString;
	errors = $packages["errors"];
	bytealg = $packages["internal/bytealg"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(1, $kindInt8, "bytes.readOp", true, "bytes", false, null);
	sliceType = $sliceType($Uint8);
	ptrType$1 = $ptrType(Buffer);
	IndexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	$pkg.HasPrefix = HasPrefix;
	Index = function(s, sep) {
		var c0, c0$1, c1, c1$1, fails, fails$1, i, i$1, j, n, o, o$1, r, s, sep, t, t$1, x, x$1;
		n = sep.$length;
		if ((n === 0)) {
			return 0;
		} else if ((n === 1)) {
			return IndexByte(s, (0 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 0]));
		} else if ((n === s.$length)) {
			if (Equal(sep, s)) {
				return 0;
			}
			return -1;
		} else if (n > s.$length) {
			return -1;
		} else if (n <= bytealg.MaxLen) {
			if (s.$length <= 0) {
				return bytealg.Index(s, sep);
			}
			c0 = (0 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 0]);
			c1 = (1 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 1]);
			i = 0;
			t = (s.$length - n >> 0) + 1 >> 0;
			fails = 0;
			while (true) {
				if (!(i < t)) { break; }
				if (!((((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) === c0))) {
					o = IndexByte($subslice(s, (i + 1 >> 0), t), c0);
					if (o < 0) {
						return -1;
					}
					i = i + ((o + 1 >> 0)) >> 0;
				}
				if (((x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) === c1) && Equal($subslice(s, i, (i + n >> 0)), sep)) {
					return i;
				}
				fails = fails + (1) >> 0;
				i = i + (1) >> 0;
				if (fails > bytealg.Cutover(i)) {
					r = bytealg.Index($subslice(s, i), sep);
					if (r >= 0) {
						return r + i >> 0;
					}
					return -1;
				}
			}
			return -1;
		}
		c0$1 = (0 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 0]);
		c1$1 = (1 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 1]);
		i$1 = 0;
		fails$1 = 0;
		t$1 = (s.$length - n >> 0) + 1 >> 0;
		while (true) {
			if (!(i$1 < t$1)) { break; }
			if (!((((i$1 < 0 || i$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i$1]) === c0$1))) {
				o$1 = IndexByte($subslice(s, (i$1 + 1 >> 0), t$1), c0$1);
				if (o$1 < 0) {
					break;
				}
				i$1 = i$1 + ((o$1 + 1 >> 0)) >> 0;
			}
			if (((x$1 = i$1 + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$1])) === c1$1) && Equal($subslice(s, i$1, (i$1 + n >> 0)), sep)) {
				return i$1;
			}
			i$1 = i$1 + (1) >> 0;
			fails$1 = fails$1 + (1) >> 0;
			if (fails$1 >= (4 + (i$1 >> 4 >> 0) >> 0) && i$1 < t$1) {
				j = bytealg.IndexRabinKarpBytes($subslice(s, i$1), sep);
				if (j < 0) {
					return -1;
				}
				return i$1 + j >> 0;
			}
		}
		return -1;
	};
	$pkg.Index = Index;
	Buffer.ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ptrType$1.nil) {
			return "<nil>";
		}
		return ($bytesToString($subslice(b.buf, b.off)));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.empty = function() {
		var b;
		b = this;
		return b.buf.$length <= b.off;
	};
	Buffer.prototype.empty = function() { return this.$val.empty(); };
	Buffer.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var b, n;
		b = this;
		if (n === 0) {
			b.Reset();
			return;
		}
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.buf = $subslice(b.buf, 0, 0);
		b.off = 0;
		b.lastRead = 0;
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.tryGrowByReslice = function(n) {
		var b, l, n;
		b = this;
		l = b.buf.$length;
		if (n <= (b.buf.$capacity - l >> 0)) {
			b.buf = $subslice(b.buf, 0, (l + n >> 0));
			return [l, true];
		}
		return [0, false];
	};
	Buffer.prototype.tryGrowByReslice = function(n) { return this.$val.tryGrowByReslice(n); };
	Buffer.ptr.prototype.grow = function(n) {
		var {_q, _r, _tuple, b, c, i, m, n, ok, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Reset();
		}
		_tuple = b.tryGrowByReslice(n);
		i = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$s = -1; return i;
		}
		if (b.buf === sliceType.nil && n <= 64) {
			b.buf = $makeSlice(sliceType, n, 64);
			$s = -1; return 0;
		}
		c = b.buf.$capacity;
		/* */ if (n <= ((_q = c / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - m >> 0)) { $s = 1; continue; }
		/* */ if (c > ((2147483647 - c >> 0) - n >> 0)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (n <= ((_q = c / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - m >> 0)) { */ case 1:
			$copySlice(b.buf, $subslice(b.buf, b.off));
			$s = 4; continue;
		/* } else if (c > ((2147483647 - c >> 0) - n >> 0)) { */ case 2:
			$panic($pkg.ErrTooLarge);
			$s = 4; continue;
		/* } else { */ case 3:
			_r = growSlice($subslice(b.buf, b.off), b.off + n >> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			b.buf = _r;
		/* } */ case 4:
		b.off = 0;
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.grow, $c: true, $r, _q, _r, _tuple, b, c, i, m, n, ok, $s};return $f;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var {_r, b, m, n, $s, $r, $c} = $restore(this, {n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		_r = b.grow(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m = _r;
		b.buf = $subslice(b.buf, 0, m);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.Grow, $c: true, $r, _r, b, m, n, $s};return $f;
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var {_r, _tmp, _tmp$1, _tuple, b, err, m, n, ok, p, $s, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(p.$length);
		m = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = b.grow(p.$length); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			m = _r;
		/* } */ case 2:
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.Write, $c: true, $r, _r, _tmp, _tmp$1, _tuple, b, err, m, n, ok, p, $s};return $f;
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var {_r, _tmp, _tmp$1, _tuple, b, err, m, n, ok, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(s.length);
		m = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = b.grow(s.length); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			m = _r;
		/* } */ case 2:
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.WriteString, $c: true, $r, _r, _tmp, _tmp$1, _tuple, b, err, m, n, ok, s, $s};return $f;
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var {_r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, i, m, n, r, x, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* while (true) { */ case 1:
			_r = b.grow(512); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i = _r;
			b.buf = $subslice(b.buf, 0, i);
			_r$1 = r.Read($subslice(b.buf, i, b.buf.$capacity)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			m = _tuple[0];
			e = _tuple[1];
			if (m < 0) {
				$panic(errNegativeRead);
			}
			b.buf = $subslice(b.buf, 0, (i + m >> 0));
			n = (x = (new $Int64(0, m)), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				_tmp = n;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = e;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		$s = 1; continue;
		case 2:
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.ReadFrom, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, i, m, n, r, x, $s};return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	growSlice = function(b, n) {
		var {$24r, b, b2, c, n, $s, $deferred, $r, $c} = $restore(this, {b, n});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		c = b.$length + n >> 0;
		if (c < ($imul(2, b.$capacity))) {
			c = $imul(2, b.$capacity);
		}
		b2 = $appendSlice((sliceType.nil), $makeSlice(sliceType, c));
		$copySlice(b2, b);
		$24r = $subslice(b2, 0, b.$length);
		$s = 1; case 1: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return sliceType.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: growSlice, $c: true, $r, $24r, b, b2, c, n, $s, $deferred};return $f; } }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var {_r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, m, n, nBytes, w, $s, $r, $c} = $restore(this, {w});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		nBytes = b.Len();
		/* */ if (nBytes > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (nBytes > 0) { */ case 1:
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = (new $Int64(0, m));
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		b.Reset();
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.WriteTo, $c: true, $r, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, m, n, nBytes, w, $s};return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var {_r, _tuple, b, c, m, ok, x, $s, $r, $c} = $restore(this, {c});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(1);
		m = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = b.grow(1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			m = _r;
		/* } */ case 2:
		(x = b.buf, ((m < 0 || m >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + m] = c));
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.WriteByte, $c: true, $r, _r, _tuple, b, c, m, ok, x, $s};return $f;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var {_r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, m, n, ok, r, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		/* */ if (((r >>> 0)) < 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((r >>> 0)) < 128) { */ case 1:
			_r = b.WriteByte(((r << 24 >>> 24))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		/* } */ case 2:
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(4);
		m = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!ok) { */ case 4:
			_r$1 = b.grow(4); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			m = _r$1;
		/* } */ case 5:
		n = utf8.EncodeRune($subslice(b.buf, m, (m + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } var $f = {$blk: Buffer.ptr.prototype.WriteRune, $c: true, $r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, m, n, ok, r, $s};return $f;
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.empty()) {
			b.Reset();
			if (p.$length === 0) {
				_tmp = 0;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var b, c, x, x$1;
		b = this;
		if (b.empty()) {
			b.Reset();
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = -1;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		if (b.empty()) {
			b.Reset();
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			b.lastRead = 1;
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		b.lastRead = ((n << 24 >> 24));
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRead <= 0) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune");
		}
		if (b.off >= ((b.lastRead >> 0))) {
			b.off = b.off - (((b.lastRead >> 0))) >> 0;
		}
		b.lastRead = 0;
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (b.lastRead === 0) {
			return errUnreadByte;
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = -1;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = ($bytesToString(slice));
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBufferString = function(s) {
		var s;
		return new Buffer.ptr((new sliceType($stringToBytes(s))), 0, 0);
	};
	$pkg.NewBufferString = NewBufferString;
	ptrType$1.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "empty", name: "empty", pkg: "bytes", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "tryGrowByReslice", name: "tryGrowByReslice", pkg: "bytes", typ: $funcType([$Int], [$Int, $Bool], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init("bytes", [{prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "lastRead", name: "lastRead", embedded: false, exported: false, typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytealg.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		errNegativeRead = errors.New("bytes.Buffer: reader returned negative count from Read");
		errUnreadByte = errors.New("bytes.Buffer: UnreadByte: previous operation was not a successful read");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, sync, ByteOrder, littleEndian, encoder, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, ptrType$12, overflow, structSize, Write, dataSize, sizeof, intDataSize;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	sync = $packages["sync"];
	ByteOrder = $pkg.ByteOrder = $newType(8, $kindInterface, "binary.ByteOrder", true, "encoding/binary", true, null);
	littleEndian = $pkg.littleEndian = $newType(0, $kindStruct, "binary.littleEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	encoder = $pkg.encoder = $newType(0, $kindStruct, "binary.encoder", true, "encoding/binary", false, function(order_, buf_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.order = $ifaceNil;
			this.buf = sliceType.nil;
			this.offset = 0;
			return;
		}
		this.order = order_;
		this.buf = buf_;
		this.offset = offset_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType($Bool);
	ptrType$1 = $ptrType($Int8);
	ptrType$2 = $ptrType($Uint8);
	ptrType$3 = $ptrType($Int16);
	ptrType$4 = $ptrType($Uint16);
	ptrType$5 = $ptrType($Int32);
	ptrType$6 = $ptrType($Uint32);
	ptrType$7 = $ptrType($Int64);
	ptrType$8 = $ptrType($Uint64);
	ptrType$9 = $ptrType($Float32);
	ptrType$10 = $ptrType($Float64);
	sliceType$1 = $sliceType($Bool);
	sliceType$2 = $sliceType($Int8);
	sliceType$3 = $sliceType($Int16);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Int32);
	sliceType$6 = $sliceType($Uint32);
	sliceType$7 = $sliceType($Int64);
	sliceType$8 = $sliceType($Uint64);
	sliceType$9 = $sliceType($Float32);
	sliceType$10 = $sliceType($Float64);
	ptrType$12 = $ptrType(encoder);
	littleEndian.ptr.prototype.Uint16 = function(b) {
		var b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	littleEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	littleEndian.ptr.prototype.PutUint16 = function(b, v) {
		var b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	littleEndian.ptr.prototype.AppendUint16 = function(b, v) {
		var b, v;
		return $append(b, ((v << 24 >>> 24)), (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
	};
	littleEndian.prototype.AppendUint16 = function(b, v) { return this.$val.AppendUint16(b, v); };
	littleEndian.ptr.prototype.Uint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	littleEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	littleEndian.ptr.prototype.PutUint32 = function(b, v) {
		var b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (((v >>> 24 >>> 0) << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	littleEndian.ptr.prototype.AppendUint32 = function(b, v) {
		var b, v;
		return $append(b, ((v << 24 >>> 24)), (((v >>> 8 >>> 0) << 24 >>> 24)), (((v >>> 16 >>> 0) << 24 >>> 24)), (((v >>> 24 >>> 0) << 24 >>> 24)));
	};
	littleEndian.prototype.AppendUint32 = function(b, v) { return this.$val.AppendUint32(b, v); };
	littleEndian.ptr.prototype.Uint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$7 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	littleEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	littleEndian.ptr.prototype.PutUint64 = function(b, v) {
		var b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v.$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	littleEndian.ptr.prototype.AppendUint64 = function(b, v) {
		var b, v;
		return $append(b, ((v.$low << 24 >>> 24)), (($shiftRightUint64(v, 8).$low << 24 >>> 24)), (($shiftRightUint64(v, 16).$low << 24 >>> 24)), (($shiftRightUint64(v, 24).$low << 24 >>> 24)), (($shiftRightUint64(v, 32).$low << 24 >>> 24)), (($shiftRightUint64(v, 40).$low << 24 >>> 24)), (($shiftRightUint64(v, 48).$low << 24 >>> 24)), (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
	};
	littleEndian.prototype.AppendUint64 = function(b, v) { return this.$val.AppendUint64(b, v); };
	littleEndian.ptr.prototype.String = function() {
		return "LittleEndian";
	};
	littleEndian.prototype.String = function() { return this.$val.String(); };
	littleEndian.ptr.prototype.GoString = function() {
		return "binary.LittleEndian";
	};
	littleEndian.prototype.GoString = function() { return this.$val.GoString(); };
	Write = function(w, order, data) {
		var {$24r, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _i$8, _i$9, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$10, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tuple, _tuple$1, bs, buf, data, e, err, err$1, i, i$1, i$2, i$3, i$4, i$5, i$6, i$7, i$8, i$9, n, order, size, v, v$1, v$10, v$11, v$12, v$13, v$14, v$15, v$16, v$17, v$18, v$19, v$2, v$20, v$21, v$22, v$23, v$24, v$25, v$26, v$27, v$28, v$29, v$3, v$30, v$31, v$32, v$33, v$4, v$5, v$6, v$7, v$8, v$9, w, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {w, order, data});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = intDataSize(data);
		/* */ if (!((n === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((n === 0))) { */ case 1:
			bs = $makeSlice(sliceType, n);
			_ref = data;
			/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, sliceType$1, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 10; continue; }
			/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 11; continue; }
			/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 12; continue; }
			/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 13; continue; }
			/* */ if ($assertType(_ref, sliceType$3, true)[1]) { $s = 14; continue; }
			/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 15; continue; }
			/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 16; continue; }
			/* */ if ($assertType(_ref, sliceType$4, true)[1]) { $s = 17; continue; }
			/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 18; continue; }
			/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 19; continue; }
			/* */ if ($assertType(_ref, sliceType$5, true)[1]) { $s = 20; continue; }
			/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 21; continue; }
			/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 22; continue; }
			/* */ if ($assertType(_ref, sliceType$6, true)[1]) { $s = 23; continue; }
			/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 24; continue; }
			/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
			/* */ if ($assertType(_ref, sliceType$7, true)[1]) { $s = 26; continue; }
			/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 27; continue; }
			/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 28; continue; }
			/* */ if ($assertType(_ref, sliceType$8, true)[1]) { $s = 29; continue; }
			/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 30; continue; }
			/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 31; continue; }
			/* */ if ($assertType(_ref, sliceType$9, true)[1]) { $s = 32; continue; }
			/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 33; continue; }
			/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 34; continue; }
			/* */ if ($assertType(_ref, sliceType$10, true)[1]) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if ($assertType(_ref, ptrType, true)[1]) { */ case 3:
				v = _ref.$val;
				if (v.$get()) {
					(0 >= bs.$length ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + 0] = 1);
				} else {
					(0 >= bs.$length ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + 0] = 0);
				}
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Bool, true)[1]) { */ case 4:
				v$1 = _ref.$val;
				if (v$1) {
					(0 >= bs.$length ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + 0] = 1);
				} else {
					(0 >= bs.$length ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + 0] = 0);
				}
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$1, true)[1]) { */ case 5:
				v$2 = _ref.$val;
				_ref$1 = v$2;
				_i = 0;
				while (true) {
					if (!(_i < _ref$1.$length)) { break; }
					i = _i;
					x = ((_i < 0 || _i >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i]);
					if (x) {
						((i < 0 || i >= bs.$length) ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + i] = 1);
					} else {
						((i < 0 || i >= bs.$length) ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + i] = 0);
					}
					_i++;
				}
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$1, true)[1]) { */ case 6:
				v$3 = _ref.$val;
				(0 >= bs.$length ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + 0] = ((v$3.$get() << 24 >>> 24)));
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 7:
				v$4 = _ref.$val;
				(0 >= bs.$length ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + 0] = ((v$4 << 24 >>> 24)));
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 8:
				v$5 = _ref.$val;
				_ref$2 = v$5;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$2.$length)) { break; }
					i$1 = _i$1;
					x$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$1]);
					((i$1 < 0 || i$1 >= bs.$length) ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + i$1] = ((x$1 << 24 >>> 24)));
					_i$1++;
				}
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 9:
				v$6 = _ref.$val;
				(0 >= bs.$length ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + 0] = v$6.$get());
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 10:
				v$7 = _ref.$val;
				(0 >= bs.$length ? ($throwRuntimeError("index out of range"), undefined) : bs.$array[bs.$offset + 0] = v$7);
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 11:
				v$8 = _ref.$val;
				bs = v$8;
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 12:
				v$9 = _ref.$val;
				$r = order.PutUint16(bs, ((v$9.$get() << 16 >>> 16))); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 13:
				v$10 = _ref.$val;
				$r = order.PutUint16(bs, ((v$10 << 16 >>> 16))); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$3, true)[1]) { */ case 14:
				v$11 = _ref.$val;
				_ref$3 = v$11;
				_i$2 = 0;
				/* while (true) { */ case 39:
					/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 40; continue; }
					i$2 = _i$2;
					x$2 = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$2]);
					$r = order.PutUint16($subslice(bs, ($imul(2, i$2))), ((x$2 << 16 >>> 16))); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
				$s = 39; continue;
				case 40:
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 15:
				v$12 = _ref.$val;
				$r = order.PutUint16(bs, v$12.$get()); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 16:
				v$13 = _ref.$val;
				$r = order.PutUint16(bs, v$13); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$4, true)[1]) { */ case 17:
				v$14 = _ref.$val;
				_ref$4 = v$14;
				_i$3 = 0;
				/* while (true) { */ case 44:
					/* if (!(_i$3 < _ref$4.$length)) { break; } */ if(!(_i$3 < _ref$4.$length)) { $s = 45; continue; }
					i$3 = _i$3;
					x$3 = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$3]);
					$r = order.PutUint16($subslice(bs, ($imul(2, i$3))), x$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$3++;
				$s = 44; continue;
				case 45:
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 18:
				v$15 = _ref.$val;
				$r = order.PutUint32(bs, ((v$15.$get() >>> 0))); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 19:
				v$16 = _ref.$val;
				$r = order.PutUint32(bs, ((v$16 >>> 0))); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$5, true)[1]) { */ case 20:
				v$17 = _ref.$val;
				_ref$5 = v$17;
				_i$4 = 0;
				/* while (true) { */ case 49:
					/* if (!(_i$4 < _ref$5.$length)) { break; } */ if(!(_i$4 < _ref$5.$length)) { $s = 50; continue; }
					i$4 = _i$4;
					x$4 = ((_i$4 < 0 || _i$4 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$4]);
					$r = order.PutUint32($subslice(bs, ($imul(4, i$4))), ((x$4 >>> 0))); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$4++;
				$s = 49; continue;
				case 50:
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 21:
				v$18 = _ref.$val;
				$r = order.PutUint32(bs, v$18.$get()); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 22:
				v$19 = _ref.$val;
				$r = order.PutUint32(bs, v$19); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$6, true)[1]) { */ case 23:
				v$20 = _ref.$val;
				_ref$6 = v$20;
				_i$5 = 0;
				/* while (true) { */ case 54:
					/* if (!(_i$5 < _ref$6.$length)) { break; } */ if(!(_i$5 < _ref$6.$length)) { $s = 55; continue; }
					i$5 = _i$5;
					x$5 = ((_i$5 < 0 || _i$5 >= _ref$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$6.$array[_ref$6.$offset + _i$5]);
					$r = order.PutUint32($subslice(bs, ($imul(4, i$5))), x$5); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$5++;
				$s = 54; continue;
				case 55:
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 24:
				v$21 = _ref.$val;
				$r = order.PutUint64(bs, ((x$6 = v$21.$get(), new $Uint64(x$6.$high, x$6.$low)))); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
				v$22 = _ref.$val;
				$r = order.PutUint64(bs, (new $Uint64(v$22.$high, v$22.$low))); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$7, true)[1]) { */ case 26:
				v$23 = _ref.$val;
				_ref$7 = v$23;
				_i$6 = 0;
				/* while (true) { */ case 59:
					/* if (!(_i$6 < _ref$7.$length)) { break; } */ if(!(_i$6 < _ref$7.$length)) { $s = 60; continue; }
					i$6 = _i$6;
					x$7 = ((_i$6 < 0 || _i$6 >= _ref$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$7.$array[_ref$7.$offset + _i$6]);
					$r = order.PutUint64($subslice(bs, ($imul(8, i$6))), (new $Uint64(x$7.$high, x$7.$low))); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$6++;
				$s = 59; continue;
				case 60:
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 27:
				v$24 = _ref.$val;
				$r = order.PutUint64(bs, v$24.$get()); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 28:
				v$25 = _ref.$val;
				$r = order.PutUint64(bs, v$25); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$8, true)[1]) { */ case 29:
				v$26 = _ref.$val;
				_ref$8 = v$26;
				_i$7 = 0;
				/* while (true) { */ case 64:
					/* if (!(_i$7 < _ref$8.$length)) { break; } */ if(!(_i$7 < _ref$8.$length)) { $s = 65; continue; }
					i$7 = _i$7;
					x$8 = ((_i$7 < 0 || _i$7 >= _ref$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$8.$array[_ref$8.$offset + _i$7]);
					$r = order.PutUint64($subslice(bs, ($imul(8, i$7))), x$8); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$7++;
				$s = 64; continue;
				case 65:
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 30:
				v$27 = _ref.$val;
				$r = order.PutUint32(bs, math.Float32bits(v$27.$get())); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 31:
				v$28 = _ref.$val;
				$r = order.PutUint32(bs, math.Float32bits(v$28)); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$9, true)[1]) { */ case 32:
				v$29 = _ref.$val;
				_ref$9 = v$29;
				_i$8 = 0;
				/* while (true) { */ case 69:
					/* if (!(_i$8 < _ref$9.$length)) { break; } */ if(!(_i$8 < _ref$9.$length)) { $s = 70; continue; }
					i$8 = _i$8;
					x$9 = ((_i$8 < 0 || _i$8 >= _ref$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$9.$array[_ref$9.$offset + _i$8]);
					$r = order.PutUint32($subslice(bs, ($imul(4, i$8))), math.Float32bits(x$9)); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$8++;
				$s = 69; continue;
				case 70:
				$s = 36; continue;
			/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 33:
				v$30 = _ref.$val;
				$r = order.PutUint64(bs, math.Float64bits(v$30.$get())); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 34:
				v$31 = _ref.$val;
				$r = order.PutUint64(bs, math.Float64bits(v$31)); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 36; continue;
			/* } else if ($assertType(_ref, sliceType$10, true)[1]) { */ case 35:
				v$32 = _ref.$val;
				_ref$10 = v$32;
				_i$9 = 0;
				/* while (true) { */ case 74:
					/* if (!(_i$9 < _ref$10.$length)) { break; } */ if(!(_i$9 < _ref$10.$length)) { $s = 75; continue; }
					i$9 = _i$9;
					x$10 = ((_i$9 < 0 || _i$9 >= _ref$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$10.$array[_ref$10.$offset + _i$9]);
					$r = order.PutUint64($subslice(bs, ($imul(8, i$9))), math.Float64bits(x$10)); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$9++;
				$s = 74; continue;
				case 75:
			/* } */ case 36:
			_r = w.Write(bs); /* */ $s = 77; case 77: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			$s = -1; return err;
		/* } */ case 2:
		_r$1 = reflect.ValueOf(data); /* */ $s = 78; case 78: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = reflect.Indirect($clone(_r$1, reflect.Value)); /* */ $s = 79; case 79: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v$33 = _r$2;
		_r$3 = dataSize($clone(v$33, reflect.Value)); /* */ $s = 80; case 80: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		size = _r$3;
		/* */ if (size < 0) { $s = 81; continue; }
		/* */ $s = 82; continue;
		/* if (size < 0) { */ case 81:
			_r$4 = reflect.TypeOf(data).String(); /* */ $s = 83; case 83: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = errors.New("binary.Write: invalid type " + _r$4); /* */ $s = 84; case 84: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$24r = _r$5;
			$s = 85; case 85: return $24r;
		/* } */ case 82:
		buf = $makeSlice(sliceType, size);
		e = new encoder.ptr(order, buf, 0);
		$r = e.value($clone(v$33, reflect.Value)); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$6 = w.Write(buf); /* */ $s = 87; case 87: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6;
		err$1 = _tuple$1[1];
		$s = -1; return err$1;
		/* */ } return; } var $f = {$blk: Write, $c: true, $r, $24r, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _i$7, _i$8, _i$9, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$10, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _ref$7, _ref$8, _ref$9, _tuple, _tuple$1, bs, buf, data, e, err, err$1, i, i$1, i$2, i$3, i$4, i$5, i$6, i$7, i$8, i$9, n, order, size, v, v$1, v$10, v$11, v$12, v$13, v$14, v$15, v$16, v$17, v$18, v$19, v$2, v$20, v$21, v$22, v$23, v$24, v$25, v$26, v$27, v$28, v$29, v$3, v$30, v$31, v$32, v$33, v$4, v$5, v$6, v$7, v$8, v$9, w, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	$pkg.Write = Write;
	dataSize = function(v) {
		var {$24r, $24r$1, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, ok, s, size, size$1, t, v, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_1 = $clone(v, reflect.Value).Kind();
			/* */ if (_1 === (23)) { $s = 2; continue; }
			/* */ if (_1 === (25)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (23)) { */ case 2:
				_r = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = sizeof(_r); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				s = _r$1;
				/* */ if (s >= 0) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (s >= 0) { */ case 8:
					_r$2 = $clone(v, reflect.Value).Len(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$24r = $imul(s, _r$2);
					$s = 11; case 11: return $24r;
				/* } */ case 9:
				$s = -1; return -1;
			/* } else if (_1 === (25)) { */ case 3:
				t = $clone(v, reflect.Value).Type();
				_r$3 = structSize.Load(t); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				size = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					$s = -1; return $assertType(size, $Int);
				}
				_r$4 = sizeof(t); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				size$1 = _r$4;
				$r = structSize.Store(t, new $Int(size$1)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return size$1;
			/* } else { */ case 4:
				_r$5 = sizeof($clone(v, reflect.Value).Type()); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$24r$1 = _r$5;
				$s = 16; case 16: return $24r$1;
			/* } */ case 5:
		case 1:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: dataSize, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, ok, s, size, size$1, t, v, $s};return $f;
	};
	sizeof = function(t) {
		var {$24r, $24r$1, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, i, n, s, s$1, sum, t, $s, $r, $c} = $restore(this, {t});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r = t.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ if ((_1 === (1)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (13)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (17)) { */ case 3:
				_r$1 = t.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = sizeof(_r$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				s = _r$2;
				/* */ if (s >= 0) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (s >= 0) { */ case 9:
					_r$3 = t.Len(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$24r = $imul(s, _r$3);
					$s = 12; case 12: return $24r;
				/* } */ case 10:
				$s = 6; continue;
			/* } else if (_1 === (25)) { */ case 4:
				sum = 0;
				_tmp = 0;
				_r$4 = t.NumField(); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tmp$1 = _r$4;
				i = _tmp;
				n = _tmp$1;
				/* while (true) { */ case 14:
					/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 15; continue; }
					_r$5 = t.Field(i); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = sizeof(_r$5.Type); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					s$1 = _r$6;
					if (s$1 < 0) {
						$s = -1; return -1;
					}
					sum = sum + (s$1) >> 0;
					i = i + (1) >> 0;
				$s = 14; continue;
				case 15:
				$s = -1; return sum;
			/* } else if ((_1 === (1)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (13)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16))) { */ case 5:
				_r$7 = t.Size(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$24r$1 = ((_r$7 >> 0));
				$s = 19; case 19: return $24r$1;
			/* } */ case 6:
		case 1:
		$s = -1; return -1;
		/* */ } return; } var $f = {$blk: sizeof, $c: true, $r, $24r, $24r$1, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, i, n, s, s$1, sum, t, $s};return $f;
	};
	encoder.ptr.prototype.bool = function(x) {
		var e, x, x$1, x$2, x$3, x$4;
		e = this;
		if (x) {
			(x$1 = e.buf, x$2 = e.offset, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = 1));
		} else {
			(x$3 = e.buf, x$4 = e.offset, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = 0));
		}
		e.offset = e.offset + (1) >> 0;
	};
	encoder.prototype.bool = function(x) { return this.$val.bool(x); };
	encoder.ptr.prototype.uint8 = function(x) {
		var e, x, x$1, x$2;
		e = this;
		(x$1 = e.buf, x$2 = e.offset, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = x));
		e.offset = e.offset + (1) >> 0;
	};
	encoder.prototype.uint8 = function(x) { return this.$val.uint8(x); };
	encoder.ptr.prototype.uint16 = function(x) {
		var {e, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.order.PutUint16($subslice(e.buf, e.offset, (e.offset + 2 >> 0)), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		e.offset = e.offset + (2) >> 0;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.uint16, $c: true, $r, e, x, $s};return $f;
	};
	encoder.prototype.uint16 = function(x) { return this.$val.uint16(x); };
	encoder.ptr.prototype.uint32 = function(x) {
		var {e, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.order.PutUint32($subslice(e.buf, e.offset, (e.offset + 4 >> 0)), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		e.offset = e.offset + (4) >> 0;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.uint32, $c: true, $r, e, x, $s};return $f;
	};
	encoder.prototype.uint32 = function(x) { return this.$val.uint32(x); };
	encoder.ptr.prototype.uint64 = function(x) {
		var {e, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.order.PutUint64($subslice(e.buf, e.offset, (e.offset + 8 >> 0)), x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		e.offset = e.offset + (8) >> 0;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.uint64, $c: true, $r, e, x, $s};return $f;
	};
	encoder.prototype.uint64 = function(x) { return this.$val.uint64(x); };
	encoder.ptr.prototype.int8 = function(x) {
		var e, x;
		e = this;
		e.uint8(((x << 24 >>> 24)));
	};
	encoder.prototype.int8 = function(x) { return this.$val.int8(x); };
	encoder.ptr.prototype.int16 = function(x) {
		var {e, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.uint16(((x << 16 >>> 16))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.int16, $c: true, $r, e, x, $s};return $f;
	};
	encoder.prototype.int16 = function(x) { return this.$val.int16(x); };
	encoder.ptr.prototype.int32 = function(x) {
		var {e, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.uint32(((x >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.int32, $c: true, $r, e, x, $s};return $f;
	};
	encoder.prototype.int32 = function(x) { return this.$val.int32(x); };
	encoder.ptr.prototype.int64 = function(x) {
		var {e, x, $s, $r, $c} = $restore(this, {x});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		$r = e.uint64((new $Uint64(x.$high, x.$low))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.int64, $c: true, $r, e, x, $s};return $f;
	};
	encoder.prototype.int64 = function(x) { return this.$val.int64(x); };
	encoder.ptr.prototype.value = function(v) {
		var {_1, _2, _3, _4, _5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, e, i, i$1, i$2, l, l$1, l$2, t, v, v$1, x, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
			_1 = $clone(v, reflect.Value).Kind();
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (25)) { $s = 3; continue; }
			/* */ if (_1 === (23)) { $s = 4; continue; }
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 6; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 7; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 8; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (17)) { */ case 2:
				_r = $clone(v, reflect.Value).Len(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				l = _r;
				i = 0;
				/* while (true) { */ case 12:
					/* if (!(i < l)) { break; } */ if(!(i < l)) { $s = 13; continue; }
					_r$1 = $clone(v, reflect.Value).Index(i); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = e.value($clone(_r$1, reflect.Value)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				$s = 12; continue;
				case 13:
				$s = 10; continue;
			/* } else if (_1 === (25)) { */ case 3:
				t = $clone(v, reflect.Value).Type();
				l$1 = $clone(v, reflect.Value).NumField();
				i$1 = 0;
				/* while (true) { */ case 16:
					/* if (!(i$1 < l$1)) { break; } */ if(!(i$1 < l$1)) { $s = 17; continue; }
					_r$2 = $clone(v, reflect.Value).Field(i$1); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v$1 = _r$2;
					if ($clone(v$1, reflect.Value).CanSet()) { _v = true; $s = 22; continue s; }
					_r$3 = t.Field(i$1); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_v = !(_r$3.Name === "_"); case 22:
					/* */ if (_v) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (_v) { */ case 19:
						$r = e.value($clone(v$1, reflect.Value)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 21; continue;
					/* } else { */ case 20:
						$r = e.skip($clone(v$1, reflect.Value)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 21:
					i$1 = i$1 + (1) >> 0;
				$s = 16; continue;
				case 17:
				$s = 10; continue;
			/* } else if (_1 === (23)) { */ case 4:
				_r$4 = $clone(v, reflect.Value).Len(); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				l$2 = _r$4;
				i$2 = 0;
				/* while (true) { */ case 27:
					/* if (!(i$2 < l$2)) { break; } */ if(!(i$2 < l$2)) { $s = 28; continue; }
					_r$5 = $clone(v, reflect.Value).Index(i$2); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = e.value($clone(_r$5, reflect.Value)); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$2 = i$2 + (1) >> 0;
				$s = 27; continue;
				case 28:
				$s = 10; continue;
			/* } else if (_1 === (1)) { */ case 5:
				e.bool($clone(v, reflect.Value).Bool());
				$s = 10; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 6:
					_r$6 = $clone(v, reflect.Value).Type().Kind(); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_2 = _r$6;
					/* */ if (_2 === (3)) { $s = 33; continue; }
					/* */ if (_2 === (4)) { $s = 34; continue; }
					/* */ if (_2 === (5)) { $s = 35; continue; }
					/* */ if (_2 === (6)) { $s = 36; continue; }
					/* */ $s = 37; continue;
					/* if (_2 === (3)) { */ case 33:
						e.int8((((x = $clone(v, reflect.Value).Int(), x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
						$s = 37; continue;
					/* } else if (_2 === (4)) { */ case 34:
						$r = e.int16((((x$1 = $clone(v, reflect.Value).Int(), x$1.$low + ((x$1.$high >> 31) * 4294967296)) << 16 >> 16))); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 37; continue;
					/* } else if (_2 === (5)) { */ case 35:
						$r = e.int32((((x$2 = $clone(v, reflect.Value).Int(), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0))); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 37; continue;
					/* } else if (_2 === (6)) { */ case 36:
						$r = e.int64($clone(v, reflect.Value).Int()); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 37:
				case 31:
				$s = 10; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 7:
					_r$7 = $clone(v, reflect.Value).Type().Kind(); /* */ $s = 42; case 42: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_3 = _r$7;
					/* */ if (_3 === (8)) { $s = 43; continue; }
					/* */ if (_3 === (9)) { $s = 44; continue; }
					/* */ if (_3 === (10)) { $s = 45; continue; }
					/* */ if (_3 === (11)) { $s = 46; continue; }
					/* */ $s = 47; continue;
					/* if (_3 === (8)) { */ case 43:
						e.uint8((($clone(v, reflect.Value).Uint().$low << 24 >>> 24)));
						$s = 47; continue;
					/* } else if (_3 === (9)) { */ case 44:
						$r = e.uint16((($clone(v, reflect.Value).Uint().$low << 16 >>> 16))); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 47; continue;
					/* } else if (_3 === (10)) { */ case 45:
						$r = e.uint32((($clone(v, reflect.Value).Uint().$low >>> 0))); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 47; continue;
					/* } else if (_3 === (11)) { */ case 46:
						$r = e.uint64($clone(v, reflect.Value).Uint()); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 47:
				case 41:
				$s = 10; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 8:
					_r$8 = $clone(v, reflect.Value).Type().Kind(); /* */ $s = 52; case 52: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_4 = _r$8;
					/* */ if (_4 === (13)) { $s = 53; continue; }
					/* */ if (_4 === (14)) { $s = 54; continue; }
					/* */ $s = 55; continue;
					/* if (_4 === (13)) { */ case 53:
						$r = e.uint32(math.Float32bits(($fround($clone(v, reflect.Value).Float())))); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 55; continue;
					/* } else if (_4 === (14)) { */ case 54:
						$r = e.uint64(math.Float64bits($clone(v, reflect.Value).Float())); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 55:
				case 51:
				$s = 10; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 9:
					_r$9 = $clone(v, reflect.Value).Type().Kind(); /* */ $s = 59; case 59: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_5 = _r$9;
					/* */ if (_5 === (15)) { $s = 60; continue; }
					/* */ if (_5 === (16)) { $s = 61; continue; }
					/* */ $s = 62; continue;
					/* if (_5 === (15)) { */ case 60:
						x$3 = $clone(v, reflect.Value).Complex();
						$r = e.uint32(math.Float32bits(($fround(x$3.$real)))); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = e.uint32(math.Float32bits(($fround(x$3.$imag)))); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 62; continue;
					/* } else if (_5 === (16)) { */ case 61:
						x$4 = $clone(v, reflect.Value).Complex();
						$r = e.uint64(math.Float64bits(x$4.$real)); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = e.uint64(math.Float64bits(x$4.$imag)); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 62:
				case 58:
			/* } */ case 10:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.value, $c: true, $r, _1, _2, _3, _4, _5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, e, i, i$1, i$2, l, l$1, l$2, t, v, v$1, x, x$1, x$2, x$3, x$4, $s};return $f;
	};
	encoder.prototype.value = function(v) { return this.$val.value(v); };
	encoder.ptr.prototype.skip = function(v) {
		var {_i, _r, _ref, e, i, n, v, zero, $s, $r, $c} = $restore(this, {v});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		_r = dataSize($clone(v, reflect.Value)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		zero = $subslice(e.buf, e.offset, (e.offset + n >> 0));
		_ref = zero;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= zero.$length) ? ($throwRuntimeError("index out of range"), undefined) : zero.$array[zero.$offset + i] = 0);
			_i++;
		}
		e.offset = e.offset + (n) >> 0;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: encoder.ptr.prototype.skip, $c: true, $r, _i, _r, _ref, e, i, n, v, zero, $s};return $f;
	};
	encoder.prototype.skip = function(v) { return this.$val.skip(v); };
	intDataSize = function(data) {
		var _ref, data, data$1, data$10, data$11, data$12, data$13, data$14, data$15, data$16, data$17, data$2, data$3, data$4, data$5, data$6, data$7, data$8, data$9;
		_ref = data;
		if ($assertType(_ref, $Bool, true)[1] || $assertType(_ref, $Int8, true)[1] || $assertType(_ref, $Uint8, true)[1] || $assertType(_ref, ptrType, true)[1] || $assertType(_ref, ptrType$1, true)[1] || $assertType(_ref, ptrType$2, true)[1]) {
			data$1 = _ref;
			return 1;
		} else if ($assertType(_ref, sliceType$1, true)[1]) {
			data$2 = _ref.$val;
			return data$2.$length;
		} else if ($assertType(_ref, sliceType$2, true)[1]) {
			data$3 = _ref.$val;
			return data$3.$length;
		} else if ($assertType(_ref, sliceType, true)[1]) {
			data$4 = _ref.$val;
			return data$4.$length;
		} else if ($assertType(_ref, $Int16, true)[1] || $assertType(_ref, $Uint16, true)[1] || $assertType(_ref, ptrType$3, true)[1] || $assertType(_ref, ptrType$4, true)[1]) {
			data$5 = _ref;
			return 2;
		} else if ($assertType(_ref, sliceType$3, true)[1]) {
			data$6 = _ref.$val;
			return $imul(2, data$6.$length);
		} else if ($assertType(_ref, sliceType$4, true)[1]) {
			data$7 = _ref.$val;
			return $imul(2, data$7.$length);
		} else if ($assertType(_ref, $Int32, true)[1] || $assertType(_ref, $Uint32, true)[1] || $assertType(_ref, ptrType$5, true)[1] || $assertType(_ref, ptrType$6, true)[1]) {
			data$8 = _ref;
			return 4;
		} else if ($assertType(_ref, sliceType$5, true)[1]) {
			data$9 = _ref.$val;
			return $imul(4, data$9.$length);
		} else if ($assertType(_ref, sliceType$6, true)[1]) {
			data$10 = _ref.$val;
			return $imul(4, data$10.$length);
		} else if ($assertType(_ref, $Int64, true)[1] || $assertType(_ref, $Uint64, true)[1] || $assertType(_ref, ptrType$7, true)[1] || $assertType(_ref, ptrType$8, true)[1]) {
			data$11 = _ref;
			return 8;
		} else if ($assertType(_ref, sliceType$7, true)[1]) {
			data$12 = _ref.$val;
			return $imul(8, data$12.$length);
		} else if ($assertType(_ref, sliceType$8, true)[1]) {
			data$13 = _ref.$val;
			return $imul(8, data$13.$length);
		} else if ($assertType(_ref, $Float32, true)[1] || $assertType(_ref, ptrType$9, true)[1]) {
			data$14 = _ref;
			return 4;
		} else if ($assertType(_ref, $Float64, true)[1] || $assertType(_ref, ptrType$10, true)[1]) {
			data$15 = _ref;
			return 8;
		} else if ($assertType(_ref, sliceType$9, true)[1]) {
			data$16 = _ref.$val;
			return $imul(4, data$16.$length);
		} else if ($assertType(_ref, sliceType$10, true)[1]) {
			data$17 = _ref.$val;
			return $imul(8, data$17.$length);
		}
		return 0;
	};
	littleEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "AppendUint16", name: "AppendUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [sliceType], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "AppendUint32", name: "AppendUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [sliceType], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "AppendUint64", name: "AppendUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$12.methods = [{prop: "bool", name: "bool", pkg: "encoding/binary", typ: $funcType([$Bool], [], false)}, {prop: "uint8", name: "uint8", pkg: "encoding/binary", typ: $funcType([$Uint8], [], false)}, {prop: "uint16", name: "uint16", pkg: "encoding/binary", typ: $funcType([$Uint16], [], false)}, {prop: "uint32", name: "uint32", pkg: "encoding/binary", typ: $funcType([$Uint32], [], false)}, {prop: "uint64", name: "uint64", pkg: "encoding/binary", typ: $funcType([$Uint64], [], false)}, {prop: "int8", name: "int8", pkg: "encoding/binary", typ: $funcType([$Int8], [], false)}, {prop: "int16", name: "int16", pkg: "encoding/binary", typ: $funcType([$Int16], [], false)}, {prop: "int32", name: "int32", pkg: "encoding/binary", typ: $funcType([$Int32], [], false)}, {prop: "int64", name: "int64", pkg: "encoding/binary", typ: $funcType([$Int64], [], false)}, {prop: "value", name: "value", pkg: "encoding/binary", typ: $funcType([reflect.Value], [], false)}, {prop: "skip", name: "skip", pkg: "encoding/binary", typ: $funcType([reflect.Value], [], false)}];
	ByteOrder.init([{prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}]);
	littleEndian.init("", []);
	encoder.init("encoding/binary", [{prop: "order", name: "order", embedded: false, exported: false, typ: ByteOrder, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "offset", name: "offset", embedded: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.LittleEndian = new littleEndian.ptr();
		structSize = new sync.Map.ptr(new sync.Mutex.ptr(0, 0), new $packages["sync/atomic"].Value.ptr($ifaceNil), false, 0);
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, sync, unicode, utf8, asciiSet, Builder, sliceType, ptrType, ptrType$1, sliceType$2, arrayType, explode, Contains, ContainsRune, IndexRune, genSplit, Split, Join, HasPrefix, HasSuffix, Map, Repeat, ToUpper, ToLower, makeASCIISet, Trim, trimLeftByte, trimLeftASCII, trimLeftUnicode, trimRightByte, trimRightASCII, trimRightUnicode, TrimSuffix, Replace, ReplaceAll, Cut, IndexByte, Index, Count;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	asciiSet = $pkg.asciiSet = $newType(32, $kindArray, "strings.asciiSet", true, "strings", false, null);
	Builder = $pkg.Builder = $newType(0, $kindStruct, "strings.Builder", true, "strings", true, function(addr_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.addr = ptrType$1.nil;
			this.buf = sliceType$2.nil;
			return;
		}
		this.addr = addr_;
		this.buf = buf_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(asciiSet);
	ptrType$1 = $ptrType(Builder);
	sliceType$2 = $sliceType($Uint8);
	arrayType = $arrayType($Uint32, 8);
	explode = function(s, n) {
		var _tuple, a, ch, i, l, n, s, size, x;
		l = utf8.RuneCountInString(s);
		if (n < 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType, n);
		i = 0;
		while (true) {
			if (!(i < (n - 1 >> 0))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			ch = _tuple[0];
			size = _tuple[1];
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, size));
			s = $substring(s, size);
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			}
			i = i + (1) >> 0;
		}
		if (n > 0) {
			(x = n - 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x] = s));
		}
		return a;
	};
	Contains = function(s, substr) {
		var s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	ContainsRune = function(s, r) {
		var r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var _i, _ref, _rune, i, r, r$1, s;
		if (0 <= r && r < 128) {
			return IndexByte(s, ((r << 24 >>> 24)));
		} else if ((r === 65533)) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r$1 = _rune[0];
				if (r$1 === 65533) {
					return i;
				}
				_i += _rune[1];
			}
			return -1;
		} else if (!utf8.ValidRune(r)) {
			return -1;
		} else {
			return Index(s, ($encodeRune(r)));
		}
	};
	$pkg.IndexRune = IndexRune;
	genSplit = function(s, sep, sepSave, n) {
		var a, i, m, n, s, sep, sepSave;
		if (n === 0) {
			return sliceType.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		if (n > (s.length + 1 >> 0)) {
			n = s.length + 1 >> 0;
		}
		a = $makeSlice(sliceType, n);
		n = n - (1) >> 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			m = Index(s, sep);
			if (m < 0) {
				break;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, (m + sepSave >> 0)));
			s = $substring(s, (m + sep.length >> 0));
			i = i + (1) >> 0;
		}
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = s);
		return $subslice(a, 0, (i + 1 >> 0));
	};
	Split = function(s, sep) {
		var s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(elems, sep) {
		var _1, _i, _ref, b, elems, i, n, s, sep;
		_1 = elems.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= elems.$length ? ($throwRuntimeError("index out of range"), undefined) : elems.$array[elems.$offset + 0]);
		}
		n = $imul(sep.length, ((elems.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < elems.$length)) { break; }
			n = n + (((i < 0 || i >= elems.$length) ? ($throwRuntimeError("index out of range"), undefined) : elems.$array[elems.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
		b.Grow(n);
		b.WriteString((0 >= elems.$length ? ($throwRuntimeError("index out of range"), undefined) : elems.$array[elems.$offset + 0]));
		_ref = $subslice(elems, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			b.WriteString(sep);
			b.WriteString(s);
			_i++;
		}
		return b.String();
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	HasSuffix = function(s, suffix) {
		var s, suffix;
		return s.length >= suffix.length && $substring(s, (s.length - suffix.length >> 0)) === suffix;
	};
	$pkg.HasSuffix = HasSuffix;
	Map = function(mapping, s) {
		var {_i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, _tuple, b, c, c$1, i, mapping, r, r$1, s, width, $s, $r, $c} = $restore(this, {mapping, s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if ((r === c) && !((c === 65533))) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			width = 0;
			if (c === 65533) {
				_tuple = utf8.DecodeRuneInString($substring(s, i));
				c = _tuple[0];
				width = _tuple[1];
				if (!((width === 1)) && (r === c)) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
			} else {
				width = utf8.RuneLen(c);
			}
			b.Grow(s.length + 4 >> 0);
			b.WriteString($substring(s, 0, i));
			if (r >= 0) {
				b.WriteRune(r);
			}
			s = $substring(s, (i + width >> 0));
			/* break; */ $s = 2; continue;
		case 2:
		if (b.Cap() === 0) {
			$s = -1; return s;
		}
		_ref$1 = s;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.length)) { break; } */ if(!(_i$1 < _ref$1.length)) { $s = 5; continue; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			c$1 = _rune$1[0];
			_r$1 = mapping(c$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r$1 = _r$1;
			if (r$1 >= 0) {
				if (r$1 < 128) {
					b.WriteByte(((r$1 << 24 >>> 24)));
				} else {
					b.WriteRune(r$1);
				}
			}
			_i$1 += _rune$1[1];
		$s = 4; continue;
		case 5:
		$s = -1; return b.String();
		/* */ } return; } var $f = {$blk: Map, $c: true, $r, _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, _tuple, b, c, c$1, i, mapping, r, r$1, s, width, $s};return $f;
	};
	$pkg.Map = Map;
	Repeat = function(s, count) {
		var _q, _q$1, b, count, n, s;
		if (count === 0) {
			return "";
		}
		if (count < 0) {
			$panic(new $String("strings: negative Repeat count"));
		} else if (!(((_q = ($imul(s.length, count)) / count, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === s.length))) {
			$panic(new $String("strings: Repeat count causes overflow"));
		}
		n = $imul(s.length, count);
		b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
		b.Grow(n);
		b.WriteString(s);
		while (true) {
			if (!(b.Len() < n)) { break; }
			if (b.Len() <= (_q$1 = n / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) {
				b.WriteString(b.String());
			} else {
				b.WriteString($substring(b.String(), 0, (n - b.Len() >> 0)));
				break;
			}
		}
		return b.String();
	};
	$pkg.Repeat = Repeat;
	ToUpper = function(s) {
		var {$24r, _r, _tmp, _tmp$1, b, c, c$1, hasLower, i, i$1, isASCII, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = true;
		_tmp$1 = false;
		isASCII = _tmp;
		hasLower = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c >= 128) {
				isASCII = false;
				break;
			}
			hasLower = hasLower || (97 <= c && c <= 122);
			i = i + (1) >> 0;
		}
		if (isASCII) {
			if (!hasLower) {
				$s = -1; return s;
			}
			b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
			b.Grow(s.length);
			i$1 = 0;
			while (true) {
				if (!(i$1 < s.length)) { break; }
				c$1 = s.charCodeAt(i$1);
				if (97 <= c$1 && c$1 <= 122) {
					c$1 = c$1 - (32) << 24 >>> 24;
				}
				b.WriteByte(c$1);
				i$1 = i$1 + (1) >> 0;
			}
			$s = -1; return b.String();
		}
		_r = Map(unicode.ToUpper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: ToUpper, $c: true, $r, $24r, _r, _tmp, _tmp$1, b, c, c$1, hasLower, i, i$1, isASCII, s, $s};return $f;
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(s) {
		var {$24r, _r, _tmp, _tmp$1, b, c, c$1, hasUpper, i, i$1, isASCII, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_tmp = true;
		_tmp$1 = false;
		isASCII = _tmp;
		hasUpper = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c >= 128) {
				isASCII = false;
				break;
			}
			hasUpper = hasUpper || (65 <= c && c <= 90);
			i = i + (1) >> 0;
		}
		if (isASCII) {
			if (!hasUpper) {
				$s = -1; return s;
			}
			b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
			b.Grow(s.length);
			i$1 = 0;
			while (true) {
				if (!(i$1 < s.length)) { break; }
				c$1 = s.charCodeAt(i$1);
				if (65 <= c$1 && c$1 <= 90) {
					c$1 = c$1 + (32) << 24 >>> 24;
				}
				b.WriteByte(c$1);
				i$1 = i$1 + (1) >> 0;
			}
			$s = -1; return b.String();
		}
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: ToLower, $c: true, $r, $24r, _r, _tmp, _tmp$1, b, c, c$1, hasUpper, i, i$1, isASCII, s, $s};return $f;
	};
	$pkg.ToLower = ToLower;
	makeASCIISet = function(chars) {
		var _index, _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, as, c, chars, i, ok, y;
		as = arrayType.zero();
		ok = false;
		i = 0;
		while (true) {
			if (!(i < chars.length)) { break; }
			c = chars.charCodeAt(i);
			if (c >= 128) {
				_tmp = $clone(as, asciiSet);
				_tmp$1 = false;
				asciiSet.copy(as, _tmp);
				ok = _tmp$1;
				return [as, ok];
			}
			_index = (_q = c / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index] = ((((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index]) | (((y = ((_r = c % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0));
			i = i + (1) >> 0;
		}
		_tmp$2 = $clone(as, asciiSet);
		_tmp$3 = true;
		asciiSet.copy(as, _tmp$2);
		ok = _tmp$3;
		return [as, ok];
	};
	asciiSet.prototype.contains = function(c) {
		var _q, _r, as, c, x, x$1, y;
		as = this.$val;
		return !((((((x = as, x$1 = (_q = c / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) & (((y = ((_r = c % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0)) === 0));
	};
	$ptrType(asciiSet).prototype.contains = function(c) { return (new asciiSet(this.$get())).contains(c); };
	Trim = function(s, cutset) {
		var _tuple, as, cutset, ok, s;
		if (s === "" || cutset === "") {
			return s;
		}
		if ((cutset.length === 1) && cutset.charCodeAt(0) < 128) {
			return trimLeftByte(trimRightByte(s, cutset.charCodeAt(0)), cutset.charCodeAt(0));
		}
		_tuple = makeASCIISet(cutset);
		as = $clone(_tuple[0], asciiSet);
		ok = _tuple[1];
		if (ok) {
			return trimLeftASCII(trimRightASCII(s, as), as);
		}
		return trimLeftUnicode(trimRightUnicode(s, cutset), cutset);
	};
	$pkg.Trim = Trim;
	trimLeftByte = function(s, c) {
		var c, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === c))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	trimLeftASCII = function(s, as) {
		var as, s;
		while (true) {
			if (!(s.length > 0)) { break; }
			if (!new ptrType(as).contains(s.charCodeAt(0))) {
				break;
			}
			s = $substring(s, 1);
		}
		return s;
	};
	trimLeftUnicode = function(s, cutset) {
		var _tmp, _tmp$1, _tuple, cutset, n, r, s;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tmp = ((s.charCodeAt(0) >> 0));
			_tmp$1 = 1;
			r = _tmp;
			n = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				n = _tuple[1];
			}
			if (!ContainsRune(cutset, r)) {
				break;
			}
			s = $substring(s, n);
		}
		return s;
	};
	trimRightByte = function(s, c) {
		var c, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt((s.length - 1 >> 0)) === c))) { break; }
			s = $substring(s, 0, (s.length - 1 >> 0));
		}
		return s;
	};
	trimRightASCII = function(s, as) {
		var as, s;
		while (true) {
			if (!(s.length > 0)) { break; }
			if (!new ptrType(as).contains(s.charCodeAt((s.length - 1 >> 0)))) {
				break;
			}
			s = $substring(s, 0, (s.length - 1 >> 0));
		}
		return s;
	};
	trimRightUnicode = function(s, cutset) {
		var _tmp, _tmp$1, _tuple, cutset, n, r, s;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tmp = ((s.charCodeAt((s.length - 1 >> 0)) >> 0));
			_tmp$1 = 1;
			r = _tmp;
			n = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRuneInString(s);
				r = _tuple[0];
				n = _tuple[1];
			}
			if (!ContainsRune(cutset, r)) {
				break;
			}
			s = $substring(s, 0, (s.length - n >> 0));
		}
		return s;
	};
	TrimSuffix = function(s, suffix) {
		var s, suffix;
		if (HasSuffix(s, suffix)) {
			return $substring(s, 0, (s.length - suffix.length >> 0));
		}
		return s;
	};
	$pkg.TrimSuffix = TrimSuffix;
	Replace = function(s, old, new$1, n) {
		var _tuple, b, i, j, m, n, new$1, old, s, start, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		b = new Builder.ptr(ptrType$1.nil, sliceType$2.nil);
		b.Grow(s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0);
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			b.WriteString($substring(s, start, j));
			b.WriteString(new$1);
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		b.WriteString($substring(s, start));
		return b.String();
	};
	$pkg.Replace = Replace;
	ReplaceAll = function(s, old, new$1) {
		var new$1, old, s;
		return Replace(s, old, new$1, -1);
	};
	$pkg.ReplaceAll = ReplaceAll;
	Cut = function(s, sep) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, after, before, found, i, s, sep;
		before = "";
		after = "";
		found = false;
		i = Index(s, sep);
		if (i >= 0) {
			_tmp = $substring(s, 0, i);
			_tmp$1 = $substring(s, (i + sep.length >> 0));
			_tmp$2 = true;
			before = _tmp;
			after = _tmp$1;
			found = _tmp$2;
			return [before, after, found];
		}
		_tmp$3 = s;
		_tmp$4 = "";
		_tmp$5 = false;
		before = _tmp$3;
		after = _tmp$4;
		found = _tmp$5;
		return [before, after, found];
	};
	$pkg.Cut = Cut;
	IndexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	Count = function(s, sep) {
		var n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Builder.ptr.prototype.String = function() {
		var b;
		b = this;
		return ($bytesToString(b.buf));
	};
	Builder.prototype.String = function() { return this.$val.String(); };
	Builder.ptr.prototype.copyCheck = function() {
		var b;
		b = this;
		if (b.addr === ptrType$1.nil) {
			b.addr = b;
		} else if (!(b.addr === b)) {
			$panic(new $String("strings: illegal use of non-zero Builder copied by value"));
		}
	};
	Builder.prototype.copyCheck = function() { return this.$val.copyCheck(); };
	Builder.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length;
	};
	Builder.prototype.Len = function() { return this.$val.Len(); };
	Builder.ptr.prototype.Cap = function() {
		var b;
		b = this;
		return b.buf.$capacity;
	};
	Builder.prototype.Cap = function() { return this.$val.Cap(); };
	Builder.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.addr = ptrType$1.nil;
		b.buf = sliceType$2.nil;
	};
	Builder.prototype.Reset = function() { return this.$val.Reset(); };
	Builder.ptr.prototype.grow = function(n) {
		var b, buf, n;
		b = this;
		buf = $makeSlice(sliceType$2, b.buf.$length, (($imul(2, b.buf.$capacity)) + n >> 0));
		$copySlice(buf, b.buf);
		b.buf = buf;
	};
	Builder.prototype.grow = function(n) { return this.$val.grow(n); };
	Builder.ptr.prototype.Grow = function(n) {
		var b, n;
		b = this;
		b.copyCheck();
		if (n < 0) {
			$panic(new $String("strings.Builder.Grow: negative count"));
		}
		if ((b.buf.$capacity - b.buf.$length >> 0) < n) {
			b.grow(n);
		}
	};
	Builder.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Builder.ptr.prototype.Write = function(p) {
		var b, p;
		b = this;
		b.copyCheck();
		b.buf = $appendSlice(b.buf, p);
		return [p.$length, $ifaceNil];
	};
	Builder.prototype.Write = function(p) { return this.$val.Write(p); };
	Builder.ptr.prototype.WriteByte = function(c) {
		var b, c;
		b = this;
		b.copyCheck();
		b.buf = $append(b.buf, c);
		return $ifaceNil;
	};
	Builder.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Builder.ptr.prototype.WriteRune = function(r) {
		var b, l, n, r;
		b = this;
		b.copyCheck();
		if (((r >>> 0)) < 128) {
			b.buf = $append(b.buf, ((r << 24 >>> 24)));
			return [1, $ifaceNil];
		}
		l = b.buf.$length;
		if ((b.buf.$capacity - l >> 0) < 4) {
			b.grow(4);
		}
		n = utf8.EncodeRune($subslice(b.buf, l, (l + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (l + n >> 0));
		return [n, $ifaceNil];
	};
	Builder.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Builder.ptr.prototype.WriteString = function(s) {
		var b, s;
		b = this;
		b.copyCheck();
		b.buf = $appendSlice(b.buf, s);
		return [s.length, $ifaceNil];
	};
	Builder.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	ptrType.methods = [{prop: "contains", name: "contains", pkg: "strings", typ: $funcType([$Uint8], [$Bool], false)}];
	ptrType$1.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "copyCheck", name: "copyCheck", pkg: "strings", typ: $funcType([], [], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "strings", typ: $funcType([$Int], [], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	asciiSet.init($Uint32, 8);
	Builder.init("strings", [{prop: "addr", name: "addr", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "buf", name: "buf", embedded: false, exported: false, typ: sliceType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/dlclark/regexp2/syntax"] = (function() {
	var $pkg = {}, $init, bytes, binary, errors, fmt, math, os, sort, strconv, strings, unicode, utf8, writer, RegexTree, regexNode, nodeType, ReplacerData, Prefix, regexFcd, regexFc, BmPrefix, AnchorLoc, RegexOptions, Error, ErrorCode, parser, InstOp, Code, CharSet, category, singleRange, singleRangeSorter, lcMap, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, ptrType, sliceType$6, ptrType$1, ptrType$2, ptrType$3, ptrType$4, sliceType$7, sliceType$8, sliceType$9, sliceType$10, ptrType$5, sliceType$11, ptrType$6, sliceType$12, ptrType$7, sliceType$13, ptrType$8, ptrType$9, sliceType$14, ptrType$10, mapType, mapType$1, ptrType$11, ptrType$12, ptrType$13, ptrType$14, typeStr, padSpace, _category, codeStr, ecmaSpace, ecmaWord, ecmaDigit, re2Space, unicodeCategories, lcTable, Write, newRegexNode, newRegexNodeCh, newRegexNodeStr, newRegexNodeSet, newRegexNodeM, newRegexNodeMN, NewReplacerData, getFirstCharsPrefix, newRegexFc, getPrefix, repeat, newBmPrefix, getAnchors, anchorFromType, optionFromCode, Parse, isOnlyTopOption, hexDigit, isSpace, isSpecial, isStopperX, isQuantifier, Escape, escape, opcodeBacktracks, opcodeSize, operatorDescription, getCharSetFromCategoryString, getCharSetFromOldString, CharDescription, IsWordChar, IsECMAWordChar, isValidUnicodeCat;
	bytes = $packages["bytes"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	math = $packages["math"];
	os = $packages["os"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	writer = $pkg.writer = $newType(0, $kindStruct, "syntax.writer", true, "github.com/dlclark/regexp2/syntax", false, function(emitted_, intStack_, curpos_, stringhash_, stringtable_, sethash_, settable_, counting_, count_, trackcount_, caps_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.emitted = sliceType$4.nil;
			this.intStack = sliceType$4.nil;
			this.curpos = 0;
			this.stringhash = false;
			this.stringtable = sliceType$5.nil;
			this.sethash = false;
			this.settable = sliceType$6.nil;
			this.counting = false;
			this.count = 0;
			this.trackcount = 0;
			this.caps = false;
			return;
		}
		this.emitted = emitted_;
		this.intStack = intStack_;
		this.curpos = curpos_;
		this.stringhash = stringhash_;
		this.stringtable = stringtable_;
		this.sethash = sethash_;
		this.settable = settable_;
		this.counting = counting_;
		this.count = count_;
		this.trackcount = trackcount_;
		this.caps = caps_;
	});
	RegexTree = $pkg.RegexTree = $newType(0, $kindStruct, "syntax.RegexTree", true, "github.com/dlclark/regexp2/syntax", true, function(root_, caps_, capnumlist_, captop_, Capnames_, Caplist_, options_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = ptrType$2.nil;
			this.caps = false;
			this.capnumlist = sliceType$4.nil;
			this.captop = 0;
			this.Capnames = false;
			this.Caplist = sliceType.nil;
			this.options = 0;
			return;
		}
		this.root = root_;
		this.caps = caps_;
		this.capnumlist = capnumlist_;
		this.captop = captop_;
		this.Capnames = Capnames_;
		this.Caplist = Caplist_;
		this.options = options_;
	});
	regexNode = $pkg.regexNode = $newType(0, $kindStruct, "syntax.regexNode", true, "github.com/dlclark/regexp2/syntax", false, function(t_, children_, str_, set_, ch_, m_, n_, options_, next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = 0;
			this.children = sliceType$8.nil;
			this.str = sliceType$2.nil;
			this.set = ptrType.nil;
			this.ch = 0;
			this.m = 0;
			this.n = 0;
			this.options = 0;
			this.next = ptrType$2.nil;
			return;
		}
		this.t = t_;
		this.children = children_;
		this.str = str_;
		this.set = set_;
		this.ch = ch_;
		this.m = m_;
		this.n = n_;
		this.options = options_;
		this.next = next_;
	});
	nodeType = $pkg.nodeType = $newType(4, $kindInt32, "syntax.nodeType", true, "github.com/dlclark/regexp2/syntax", false, null);
	ReplacerData = $pkg.ReplacerData = $newType(0, $kindStruct, "syntax.ReplacerData", true, "github.com/dlclark/regexp2/syntax", true, function(Rep_, Strings_, Rules_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Rep = "";
			this.Strings = sliceType.nil;
			this.Rules = sliceType$4.nil;
			return;
		}
		this.Rep = Rep_;
		this.Strings = Strings_;
		this.Rules = Rules_;
	});
	Prefix = $pkg.Prefix = $newType(0, $kindStruct, "syntax.Prefix", true, "github.com/dlclark/regexp2/syntax", true, function(PrefixStr_, PrefixSet_, CaseInsensitive_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.PrefixStr = sliceType$2.nil;
			this.PrefixSet = new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false);
			this.CaseInsensitive = false;
			return;
		}
		this.PrefixStr = PrefixStr_;
		this.PrefixSet = PrefixSet_;
		this.CaseInsensitive = CaseInsensitive_;
	});
	regexFcd = $pkg.regexFcd = $newType(0, $kindStruct, "syntax.regexFcd", true, "github.com/dlclark/regexp2/syntax", false, function(intStack_, intDepth_, fcStack_, fcDepth_, skipAllChildren_, skipchild_, failed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.intStack = sliceType$4.nil;
			this.intDepth = 0;
			this.fcStack = sliceType$12.nil;
			this.fcDepth = 0;
			this.skipAllChildren = false;
			this.skipchild = false;
			this.failed = false;
			return;
		}
		this.intStack = intStack_;
		this.intDepth = intDepth_;
		this.fcStack = fcStack_;
		this.fcDepth = fcDepth_;
		this.skipAllChildren = skipAllChildren_;
		this.skipchild = skipchild_;
		this.failed = failed_;
	});
	regexFc = $pkg.regexFc = $newType(0, $kindStruct, "syntax.regexFc", true, "github.com/dlclark/regexp2/syntax", false, function(cc_, nullable_, caseInsensitive_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cc = new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false);
			this.nullable = false;
			this.caseInsensitive = false;
			return;
		}
		this.cc = cc_;
		this.nullable = nullable_;
		this.caseInsensitive = caseInsensitive_;
	});
	BmPrefix = $pkg.BmPrefix = $newType(0, $kindStruct, "syntax.BmPrefix", true, "github.com/dlclark/regexp2/syntax", true, function(positive_, negativeASCII_, negativeUnicode_, pattern_, lowASCII_, highASCII_, rightToLeft_, caseInsensitive_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.positive = sliceType$4.nil;
			this.negativeASCII = sliceType$4.nil;
			this.negativeUnicode = sliceType$13.nil;
			this.pattern = sliceType$2.nil;
			this.lowASCII = 0;
			this.highASCII = 0;
			this.rightToLeft = false;
			this.caseInsensitive = false;
			return;
		}
		this.positive = positive_;
		this.negativeASCII = negativeASCII_;
		this.negativeUnicode = negativeUnicode_;
		this.pattern = pattern_;
		this.lowASCII = lowASCII_;
		this.highASCII = highASCII_;
		this.rightToLeft = rightToLeft_;
		this.caseInsensitive = caseInsensitive_;
	});
	AnchorLoc = $pkg.AnchorLoc = $newType(2, $kindInt16, "syntax.AnchorLoc", true, "github.com/dlclark/regexp2/syntax", true, null);
	RegexOptions = $pkg.RegexOptions = $newType(4, $kindInt32, "syntax.RegexOptions", true, "github.com/dlclark/regexp2/syntax", true, null);
	Error = $pkg.Error = $newType(0, $kindStruct, "syntax.Error", true, "github.com/dlclark/regexp2/syntax", true, function(Code_, Expr_, Args_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = "";
			this.Expr = "";
			this.Args = sliceType$7.nil;
			return;
		}
		this.Code = Code_;
		this.Expr = Expr_;
		this.Args = Args_;
	});
	ErrorCode = $pkg.ErrorCode = $newType(8, $kindString, "syntax.ErrorCode", true, "github.com/dlclark/regexp2/syntax", true, null);
	parser = $pkg.parser = $newType(0, $kindStruct, "syntax.parser", true, "github.com/dlclark/regexp2/syntax", false, function(stack_, group_, alternation_, concatenation_, unit_, patternRaw_, pattern_, currentPos_, specialCase_, autocap_, capcount_, captop_, capsize_, caps_, capnames_, capnumlist_, capnamelist_, options_, optionsStack_, ignoreNextParen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.stack = ptrType$2.nil;
			this.group = ptrType$2.nil;
			this.alternation = ptrType$2.nil;
			this.concatenation = ptrType$2.nil;
			this.unit = ptrType$2.nil;
			this.patternRaw = "";
			this.pattern = sliceType$2.nil;
			this.currentPos = 0;
			this.specialCase = ptrType$5.nil;
			this.autocap = 0;
			this.capcount = 0;
			this.captop = 0;
			this.capsize = 0;
			this.caps = false;
			this.capnames = false;
			this.capnumlist = sliceType$4.nil;
			this.capnamelist = sliceType.nil;
			this.options = 0;
			this.optionsStack = sliceType$11.nil;
			this.ignoreNextParen = false;
			return;
		}
		this.stack = stack_;
		this.group = group_;
		this.alternation = alternation_;
		this.concatenation = concatenation_;
		this.unit = unit_;
		this.patternRaw = patternRaw_;
		this.pattern = pattern_;
		this.currentPos = currentPos_;
		this.specialCase = specialCase_;
		this.autocap = autocap_;
		this.capcount = capcount_;
		this.captop = captop_;
		this.capsize = capsize_;
		this.caps = caps_;
		this.capnames = capnames_;
		this.capnumlist = capnumlist_;
		this.capnamelist = capnamelist_;
		this.options = options_;
		this.optionsStack = optionsStack_;
		this.ignoreNextParen = ignoreNextParen_;
	});
	InstOp = $pkg.InstOp = $newType(4, $kindInt, "syntax.InstOp", true, "github.com/dlclark/regexp2/syntax", true, null);
	Code = $pkg.Code = $newType(0, $kindStruct, "syntax.Code", true, "github.com/dlclark/regexp2/syntax", true, function(Codes_, Strings_, Sets_, TrackCount_, Caps_, Capsize_, FcPrefix_, BmPrefix_, Anchors_, RightToLeft_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Codes = sliceType$4.nil;
			this.Strings = sliceType$5.nil;
			this.Sets = sliceType$6.nil;
			this.TrackCount = 0;
			this.Caps = false;
			this.Capsize = 0;
			this.FcPrefix = ptrType$4.nil;
			this.BmPrefix = ptrType$3.nil;
			this.Anchors = 0;
			this.RightToLeft = false;
			return;
		}
		this.Codes = Codes_;
		this.Strings = Strings_;
		this.Sets = Sets_;
		this.TrackCount = TrackCount_;
		this.Caps = Caps_;
		this.Capsize = Capsize_;
		this.FcPrefix = FcPrefix_;
		this.BmPrefix = BmPrefix_;
		this.Anchors = Anchors_;
		this.RightToLeft = RightToLeft_;
	});
	CharSet = $pkg.CharSet = $newType(0, $kindStruct, "syntax.CharSet", true, "github.com/dlclark/regexp2/syntax", true, function(ranges_, categories_, sub_, negate_, anything_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ranges = sliceType$9.nil;
			this.categories = sliceType$10.nil;
			this.sub = ptrType.nil;
			this.negate = false;
			this.anything = false;
			return;
		}
		this.ranges = ranges_;
		this.categories = categories_;
		this.sub = sub_;
		this.negate = negate_;
		this.anything = anything_;
	});
	category = $pkg.category = $newType(0, $kindStruct, "syntax.category", true, "github.com/dlclark/regexp2/syntax", false, function(negate_, cat_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.negate = false;
			this.cat = "";
			return;
		}
		this.negate = negate_;
		this.cat = cat_;
	});
	singleRange = $pkg.singleRange = $newType(0, $kindStruct, "syntax.singleRange", true, "github.com/dlclark/regexp2/syntax", false, function(first_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.first = 0;
			this.last = 0;
			return;
		}
		this.first = first_;
		this.last = last_;
	});
	singleRangeSorter = $pkg.singleRangeSorter = $newType(12, $kindSlice, "syntax.singleRangeSorter", true, "github.com/dlclark/regexp2/syntax", false, null);
	lcMap = $pkg.lcMap = $newType(0, $kindStruct, "syntax.lcMap", true, "github.com/dlclark/regexp2/syntax", false, function(chMin_, chMax_, op_, data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.chMin = 0;
			this.chMax = 0;
			this.op = 0;
			this.data = 0;
			return;
		}
		this.chMin = chMin_;
		this.chMax = chMax_;
		this.op = op_;
		this.data = data_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($Int32);
	sliceType$3 = $sliceType(lcMap);
	sliceType$4 = $sliceType($Int);
	sliceType$5 = $sliceType(sliceType$2);
	ptrType = $ptrType(CharSet);
	sliceType$6 = $sliceType(ptrType);
	ptrType$1 = $ptrType(Code);
	ptrType$2 = $ptrType(regexNode);
	ptrType$3 = $ptrType(BmPrefix);
	ptrType$4 = $ptrType(Prefix);
	sliceType$7 = $sliceType($emptyInterface);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(singleRange);
	sliceType$10 = $sliceType(category);
	ptrType$5 = $ptrType(unicode.SpecialCase);
	sliceType$11 = $sliceType(RegexOptions);
	ptrType$6 = $ptrType(ReplacerData);
	sliceType$12 = $sliceType(regexFc);
	ptrType$7 = $ptrType(regexFc);
	sliceType$13 = $sliceType(sliceType$4);
	ptrType$8 = $ptrType(RegexTree);
	ptrType$9 = $ptrType(unicode.RangeTable);
	sliceType$14 = $sliceType(ptrType$9);
	ptrType$10 = $ptrType(writer);
	mapType = $mapType($String, $Int);
	mapType$1 = $mapType($Int, $Int);
	ptrType$11 = $ptrType(bytes.Buffer);
	ptrType$12 = $ptrType(regexFcd);
	ptrType$13 = $ptrType(Error);
	ptrType$14 = $ptrType(parser);
	Write = function(tree) {
		var {_r, _r$1, _r$2, _r$3, _tuple, code, err, tree, w, $s, $r, $c} = $restore(this, {tree});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = new writer.ptr($makeSlice(sliceType$4, 2), $makeSlice(sliceType$4, 0, 32), 0, new $global.Map(), sliceType$5.nil, new $global.Map(), sliceType$6.nil, false, 0, 0, false);
		_r = w.codeFromTree(tree); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		code = _tuple[0];
		err = _tuple[1];
		/* */ if ((tree.options & 128) > 0 && !(code === ptrType$1.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((tree.options & 128) > 0 && !(code === ptrType$1.nil)) { */ case 2:
			_r$1 = code.Dump(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = os.Stdout.WriteString(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_r$3 = os.Stdout.WriteString("\n"); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		$s = -1; return [code, err];
		/* */ } return; } var $f = {$blk: Write, $c: true, $r, _r, _r$1, _r$2, _r$3, _tuple, code, err, tree, w, $s};return $f;
	};
	$pkg.Write = Write;
	writer.ptr.prototype.codeFromTree = function(tree) {
		var {_key, _r, _r$1, _r$2, _r$3, bmPrefix, capsize, curChild, curNode, fcPrefix, i, prefix, rtl, tree, w, x, x$1, $s, $r, $c} = $restore(this, {tree});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = this;
		curNode = ptrType$2.nil;
		curChild = 0;
		capsize = 0;
		if (tree.capnumlist === sliceType$4.nil || (tree.captop === tree.capnumlist.$length)) {
			capsize = tree.captop;
			w.caps = false;
		} else {
			capsize = tree.capnumlist.$length;
			w.caps = tree.caps;
			i = 0;
			while (true) {
				if (!(i < tree.capnumlist.$length)) { break; }
				_key = (x = tree.capnumlist, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])); (w.caps || $throwRuntimeError("assignment to entry in nil map")).set($Int.keyFor(_key), { k: _key, v: i });
				i = i + (1) >> 0;
			}
		}
		w.counting = true;
		/* while (true) { */ case 1:
			if (!w.counting) {
				w.emitted = $makeSlice(sliceType$4, w.count);
			}
			curNode = tree.root;
			curChild = 0;
			w.emit1(23, 0);
			/* while (true) { */ case 3:
				/* */ if (curNode.children.$length === 0) { $s = 5; continue; }
				/* */ if (curChild < curNode.children.$length) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (curNode.children.$length === 0) { */ case 5:
					_r = w.emitFragment(curNode.t, curNode, 0); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					$s = 7; continue;
				/* } else if (curChild < curNode.children.$length) { */ case 6:
					_r$1 = w.emitFragment(curNode.t | 64, curNode, curChild); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					curNode = (x$1 = curNode.children, ((curChild < 0 || curChild >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + curChild]));
					w.pushInt(curChild);
					curChild = 0;
					/* continue; */ $s = 3; continue;
				/* } */ case 7:
				if (w.emptyStack()) {
					/* break; */ $s = 4; continue;
				}
				curChild = w.popInt();
				curNode = curNode.next;
				_r$2 = w.emitFragment(curNode.t | 128, curNode, curChild); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				curChild = curChild + (1) >> 0;
			$s = 3; continue;
			case 4:
			w.patchJump(0, w.curPos());
			w.emit(40);
			if (!w.counting) {
				/* break; */ $s = 2; continue;
			}
			w.counting = false;
		$s = 1; continue;
		case 2:
		_r$3 = getFirstCharsPrefix(tree); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		fcPrefix = _r$3;
		prefix = getPrefix(tree);
		rtl = !((((tree.options & 64)) === 0));
		bmPrefix = ptrType$3.nil;
		if (!(prefix === ptrType$4.nil) && prefix.PrefixStr.$length > 0 && true) {
			if (prefix.PrefixStr.$length > 50) {
				prefix.PrefixStr = $subslice(prefix.PrefixStr, 0, 50);
			}
			bmPrefix = newBmPrefix(prefix.PrefixStr, prefix.CaseInsensitive, rtl);
		} else {
			bmPrefix = ptrType$3.nil;
		}
		$s = -1; return [new Code.ptr(w.emitted, w.stringtable, w.settable, w.trackcount, w.caps, capsize, fcPrefix, bmPrefix, getAnchors(tree), rtl), $ifaceNil];
		/* */ } return; } var $f = {$blk: writer.ptr.prototype.codeFromTree, $c: true, $r, _key, _r, _r$1, _r$2, _r$3, bmPrefix, capsize, curChild, curNode, fcPrefix, i, prefix, rtl, tree, w, x, x$1, $s};return $f;
	};
	writer.prototype.codeFromTree = function(tree) { return this.$val.codeFromTree(tree); };
	writer.ptr.prototype.emitFragment = function(nodetype, node, curIndex) {
		var {$24r, Branchpos, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$2, _r$3, _r$4, bits, branchpos, curIndex, i, lazy, lbPos, node, nodetype, ntBits, startJumpPos, w, $s, $r, $c} = $restore(this, {nodetype, node, curIndex});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = this;
		bits = 0;
		if (nodetype <= 13) {
			if (!((((node.options & 64)) === 0))) {
				bits = bits | (64);
			}
			if (!((((node.options & 1)) === 0))) {
				bits = bits | (512);
			}
		}
		ntBits = ((bits >> 0));
			_1 = nodetype;
			/* */ if ((_1 === (89)) || (_1 === (153)) || (_1 === (23))) { $s = 2; continue; }
			/* */ if (_1 === (88)) { $s = 3; continue; }
			/* */ if (_1 === (152)) { $s = 4; continue; }
			/* */ if (_1 === (97)) { $s = 5; continue; }
			/* */ if (_1 === (161)) { $s = 6; continue; }
			/* */ if (_1 === (98)) { $s = 7; continue; }
			/* */ if (_1 === (162)) { $s = 8; continue; }
			/* */ if ((_1 === (90)) || (_1 === (91))) { $s = 9; continue; }
			/* */ if ((_1 === (154)) || (_1 === (155))) { $s = 10; continue; }
			/* */ if ((_1 === (93)) || (_1 === (157))) { $s = 11; continue; }
			/* */ if (_1 === (92)) { $s = 12; continue; }
			/* */ if (_1 === (156)) { $s = 13; continue; }
			/* */ if (_1 === (94)) { $s = 14; continue; }
			/* */ if (_1 === (158)) { $s = 15; continue; }
			/* */ if (_1 === (95)) { $s = 16; continue; }
			/* */ if (_1 === (159)) { $s = 17; continue; }
			/* */ if (_1 === (96)) { $s = 18; continue; }
			/* */ if (_1 === (160)) { $s = 19; continue; }
			/* */ if ((_1 === (9)) || (_1 === (10))) { $s = 20; continue; }
			/* */ if ((_1 === (4)) || (_1 === (7)) || (_1 === (3)) || (_1 === (6))) { $s = 21; continue; }
			/* */ if ((_1 === (5)) || (_1 === (8))) { $s = 22; continue; }
			/* */ if (_1 === (12)) { $s = 23; continue; }
			/* */ if (_1 === (11)) { $s = 24; continue; }
			/* */ if (_1 === (13)) { $s = 25; continue; }
			/* */ if ((_1 === (22)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17)) || (_1 === (41)) || (_1 === (42)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21))) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if ((_1 === (89)) || (_1 === (153)) || (_1 === (23))) { */ case 2:
				/* break; */ $s = 1; continue;
				$s = 28; continue;
			/* } else if (_1 === (88)) { */ case 3:
				if (curIndex < (node.children.$length - 1 >> 0)) {
					w.pushInt(w.curPos());
					w.emit1(23, 0);
				}
				$s = 28; continue;
			/* } else if (_1 === (152)) { */ case 4:
				if (curIndex < (node.children.$length - 1 >> 0)) {
					lbPos = w.popInt();
					w.pushInt(w.curPos());
					w.emit1(38, 0);
					w.patchJump(lbPos, w.curPos());
				} else {
					i = 0;
					while (true) {
						if (!(i < curIndex)) { break; }
						w.patchJump(w.popInt(), w.curPos());
						i = i + (1) >> 0;
					}
				}
				/* break; */ $s = 1; continue;
				$s = 28; continue;
			/* } else if (_1 === (97)) { */ case 5:
				if (curIndex === 0) {
					w.emit(34);
					w.pushInt(w.curPos());
					w.emit1(23, 0);
					w.emit1(37, w.mapCapnum(node.m));
					w.emit(36);
				}
				$s = 28; continue;
			/* } else if (_1 === (161)) { */ case 6:
				if (curIndex === 0) {
					branchpos = w.popInt();
					w.pushInt(w.curPos());
					w.emit1(38, 0);
					w.patchJump(branchpos, w.curPos());
					w.emit(36);
					if (node.children.$length <= 1) {
						w.patchJump(w.popInt(), w.curPos());
					}
				} else if (curIndex === 1) {
					w.patchJump(w.popInt(), w.curPos());
				}
				$s = 28; continue;
			/* } else if (_1 === (98)) { */ case 7:
				if (curIndex === 0) {
					w.emit(34);
					w.emit(31);
					w.pushInt(w.curPos());
					w.emit1(23, 0);
				}
				$s = 28; continue;
			/* } else if (_1 === (162)) { */ case 8:
				if (curIndex === 0) {
					w.emit(33);
					w.emit(36);
				} else if (curIndex === 1) {
					Branchpos = w.popInt();
					w.pushInt(w.curPos());
					w.emit1(38, 0);
					w.patchJump(Branchpos, w.curPos());
					w.emit(33);
					w.emit(36);
					if (node.children.$length <= 2) {
						w.patchJump(w.popInt(), w.curPos());
					}
				} else if (curIndex === 2) {
					w.patchJump(w.popInt(), w.curPos());
				}
				$s = 28; continue;
			/* } else if ((_1 === (90)) || (_1 === (91))) { */ case 9:
				if (node.n < 2147483647 || node.m > 1) {
					if (node.m === 0) {
						w.emit1(26, 0);
					} else {
						w.emit1(27, 1 - node.m >> 0);
					}
				} else if (node.m === 0) {
					w.emit(30);
				} else {
					w.emit(31);
				}
				if (node.m === 0) {
					w.pushInt(w.curPos());
					w.emit1(38, 0);
				}
				w.pushInt(w.curPos());
				$s = 28; continue;
			/* } else if ((_1 === (154)) || (_1 === (155))) { */ case 10:
				startJumpPos = w.curPos();
				lazy = (nodetype - 154 >> 0);
				if (node.n < 2147483647 || node.m > 1) {
					if (node.n === 2147483647) {
						w.emit2((((28 + lazy >> 0) >> 0)), w.popInt(), 2147483647);
					} else {
						w.emit2((((28 + lazy >> 0) >> 0)), w.popInt(), node.n - node.m >> 0);
					}
				} else {
					w.emit1((((24 + lazy >> 0) >> 0)), w.popInt());
				}
				if (node.m === 0) {
					w.patchJump(w.popInt(), startJumpPos);
				}
				$s = 28; continue;
			/* } else if ((_1 === (93)) || (_1 === (157))) { */ case 11:
				$s = 28; continue;
			/* } else if (_1 === (92)) { */ case 12:
				w.emit(31);
				$s = 28; continue;
			/* } else if (_1 === (156)) { */ case 13:
				w.emit2(32, w.mapCapnum(node.m), w.mapCapnum(node.n));
				$s = 28; continue;
			/* } else if (_1 === (94)) { */ case 14:
				w.emit(34);
				w.emit(31);
				$s = 28; continue;
			/* } else if (_1 === (158)) { */ case 15:
				w.emit(33);
				w.emit(36);
				$s = 28; continue;
			/* } else if (_1 === (95)) { */ case 16:
				w.emit(34);
				w.pushInt(w.curPos());
				w.emit1(23, 0);
				$s = 28; continue;
			/* } else if (_1 === (159)) { */ case 17:
				w.emit(35);
				w.patchJump(w.popInt(), w.curPos());
				w.emit(36);
				$s = 28; continue;
			/* } else if (_1 === (96)) { */ case 18:
				w.emit(34);
				$s = 28; continue;
			/* } else if (_1 === (160)) { */ case 19:
				w.emit(36);
				$s = 28; continue;
			/* } else if ((_1 === (9)) || (_1 === (10))) { */ case 20:
				w.emit1((((node.t | ntBits) >> 0)), ((node.ch >> 0)));
				$s = 28; continue;
			/* } else if ((_1 === (4)) || (_1 === (7)) || (_1 === (3)) || (_1 === (6))) { */ case 21:
				if (node.m > 0) {
					if ((node.t === 3) || (node.t === 6)) {
						w.emit2(0 | bits, ((node.ch >> 0)), node.m);
					} else {
						w.emit2(1 | bits, ((node.ch >> 0)), node.m);
					}
				}
				if (node.n > node.m) {
					if (node.n === 2147483647) {
						w.emit2((((node.t | ntBits) >> 0)), ((node.ch >> 0)), 2147483647);
					} else {
						w.emit2((((node.t | ntBits) >> 0)), ((node.ch >> 0)), node.n - node.m >> 0);
					}
				}
				$s = 28; continue;
			/* } else if ((_1 === (5)) || (_1 === (8))) { */ case 22:
				/* */ if (node.m > 0) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (node.m > 0) { */ case 29:
					_arg = 2 | bits;
					_r = w.setCode(node.set); /* */ $s = 31; case 31: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_arg$1 = _r;
					_arg$2 = node.m;
					$r = w.emit2(_arg, _arg$1, _arg$2); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 30:
				/* */ if (node.n > node.m) { $s = 33; continue; }
				/* */ $s = 34; continue;
				/* if (node.n > node.m) { */ case 33:
					/* */ if (node.n === 2147483647) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (node.n === 2147483647) { */ case 35:
						_arg$3 = (((node.t | ntBits) >> 0));
						_r$1 = w.setCode(node.set); /* */ $s = 38; case 38: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_arg$4 = _r$1;
						$r = w.emit2(_arg$3, _arg$4, 2147483647); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 37; continue;
					/* } else { */ case 36:
						_arg$5 = (((node.t | ntBits) >> 0));
						_r$2 = w.setCode(node.set); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_arg$6 = _r$2;
						_arg$7 = node.n - node.m >> 0;
						$r = w.emit2(_arg$5, _arg$6, _arg$7); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 37:
				/* } */ case 34:
				$s = 28; continue;
			/* } else if (_1 === (12)) { */ case 23:
				w.emit1((((node.t | ntBits) >> 0)), w.stringCode(node.str));
				$s = 28; continue;
			/* } else if (_1 === (11)) { */ case 24:
				_arg$8 = (((node.t | ntBits) >> 0));
				_r$3 = w.setCode(node.set); /* */ $s = 42; case 42: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$9 = _r$3;
				$r = w.emit1(_arg$8, _arg$9); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else if (_1 === (13)) { */ case 25:
				w.emit1((((node.t | ntBits) >> 0)), w.mapCapnum(node.m));
				$s = 28; continue;
			/* } else if ((_1 === (22)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17)) || (_1 === (41)) || (_1 === (42)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21))) { */ case 26:
				w.emit(((node.t >> 0)));
				$s = 28; continue;
			/* } else { */ case 27:
				_r$4 = fmt.Errorf("unexpected opcode in regular expression generation: %v", new sliceType$7([new nodeType(nodetype)])); /* */ $s = 44; case 44: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$24r = _r$4;
				$s = 45; case 45: return $24r;
			/* } */ case 28:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: writer.ptr.prototype.emitFragment, $c: true, $r, $24r, Branchpos, _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$2, _r$3, _r$4, bits, branchpos, curIndex, i, lazy, lbPos, node, nodetype, ntBits, startJumpPos, w, $s};return $f;
	};
	writer.prototype.emitFragment = function(nodetype, node, curIndex) { return this.$val.emitFragment(nodetype, node, curIndex); };
	writer.ptr.prototype.pushInt = function(i) {
		var i, w;
		w = this;
		w.intStack = $append(w.intStack, i);
	};
	writer.prototype.pushInt = function(i) { return this.$val.pushInt(i); };
	writer.ptr.prototype.emptyStack = function() {
		var w;
		w = this;
		return w.intStack.$length === 0;
	};
	writer.prototype.emptyStack = function() { return this.$val.emptyStack(); };
	writer.ptr.prototype.popInt = function() {
		var i, idx, w, x;
		w = this;
		idx = w.intStack.$length - 1 >> 0;
		i = (x = w.intStack, ((idx < 0 || idx >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + idx]));
		w.intStack = $subslice(w.intStack, 0, idx);
		return i;
	};
	writer.prototype.popInt = function() { return this.$val.popInt(); };
	writer.ptr.prototype.curPos = function() {
		var w;
		w = this;
		return w.curpos;
	};
	writer.prototype.curPos = function() { return this.$val.curPos(); };
	writer.ptr.prototype.patchJump = function(offset, jumpDest) {
		var jumpDest, offset, w, x, x$1;
		w = this;
		(x = w.emitted, x$1 = offset + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = jumpDest));
	};
	writer.prototype.patchJump = function(offset, jumpDest) { return this.$val.patchJump(offset, jumpDest); };
	writer.ptr.prototype.setCode = function(set) {
		var {_entry, _key, _tuple, buf, hash, i, ok, set, w, $s, $r, $c} = $restore(this, {set});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		w = this;
		if (w.counting) {
			$s = -1; return 0;
		}
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		$r = $clone(set, CharSet).mapHashFill(buf); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		hash = buf.String();
		_tuple = (_entry = $mapIndex(w.sethash,$String.keyFor(hash)), _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			i = (w.sethash ? w.sethash.size : 0);
			_key = hash; (w.sethash || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: i });
			w.settable = $append(w.settable, set);
		}
		$s = -1; return i;
		/* */ } return; } var $f = {$blk: writer.ptr.prototype.setCode, $c: true, $r, _entry, _key, _tuple, buf, hash, i, ok, set, w, $s};return $f;
	};
	writer.prototype.setCode = function(set) { return this.$val.setCode(set); };
	writer.ptr.prototype.stringCode = function(str) {
		var _entry, _key, _tuple, hash, i, ok, str, w;
		w = this;
		if (w.counting) {
			return 0;
		}
		hash = ($runesToString(str));
		_tuple = (_entry = $mapIndex(w.stringhash,$String.keyFor(hash)), _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			i = (w.stringhash ? w.stringhash.size : 0);
			_key = hash; (w.stringhash || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: i });
			w.stringtable = $append(w.stringtable, str);
		}
		return i;
	};
	writer.prototype.stringCode = function(str) { return this.$val.stringCode(str); };
	writer.ptr.prototype.mapCapnum = function(capnum) {
		var _entry, capnum, w;
		w = this;
		if (capnum === -1) {
			return -1;
		}
		if (!(w.caps === false)) {
			return (_entry = $mapIndex(w.caps,$Int.keyFor(capnum)), _entry !== undefined ? _entry.v : 0);
		}
		return capnum;
	};
	writer.prototype.mapCapnum = function(capnum) { return this.$val.mapCapnum(capnum); };
	writer.ptr.prototype.emit = function(op) {
		var op, w, x, x$1;
		w = this;
		if (w.counting) {
			w.count = w.count + (1) >> 0;
			if (opcodeBacktracks(op)) {
				w.trackcount = w.trackcount + (1) >> 0;
			}
			return;
		}
		(x = w.emitted, x$1 = w.curpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((op >> 0))));
		w.curpos = w.curpos + (1) >> 0;
	};
	writer.prototype.emit = function(op) { return this.$val.emit(op); };
	writer.ptr.prototype.emit1 = function(op, opd1) {
		var op, opd1, w, x, x$1, x$2, x$3;
		w = this;
		if (w.counting) {
			w.count = w.count + (2) >> 0;
			if (opcodeBacktracks(op)) {
				w.trackcount = w.trackcount + (1) >> 0;
			}
			return;
		}
		(x = w.emitted, x$1 = w.curpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((op >> 0))));
		w.curpos = w.curpos + (1) >> 0;
		(x$2 = w.emitted, x$3 = w.curpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = opd1));
		w.curpos = w.curpos + (1) >> 0;
	};
	writer.prototype.emit1 = function(op, opd1) { return this.$val.emit1(op, opd1); };
	writer.ptr.prototype.emit2 = function(op, opd1, opd2) {
		var op, opd1, opd2, w, x, x$1, x$2, x$3, x$4, x$5;
		w = this;
		if (w.counting) {
			w.count = w.count + (3) >> 0;
			if (opcodeBacktracks(op)) {
				w.trackcount = w.trackcount + (1) >> 0;
			}
			return;
		}
		(x = w.emitted, x$1 = w.curpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((op >> 0))));
		w.curpos = w.curpos + (1) >> 0;
		(x$2 = w.emitted, x$3 = w.curpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = opd1));
		w.curpos = w.curpos + (1) >> 0;
		(x$4 = w.emitted, x$5 = w.curpos, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = opd2));
		w.curpos = w.curpos + (1) >> 0;
	};
	writer.prototype.emit2 = function(op, opd1, opd2) { return this.$val.emit2(op, opd1, opd2); };
	newRegexNode = function(t, opt) {
		var opt, t;
		return new regexNode.ptr(t, sliceType$8.nil, sliceType$2.nil, ptrType.nil, 0, 0, 0, opt, ptrType$2.nil);
	};
	newRegexNodeCh = function(t, opt, ch) {
		var ch, opt, t;
		return new regexNode.ptr(t, sliceType$8.nil, sliceType$2.nil, ptrType.nil, ch, 0, 0, opt, ptrType$2.nil);
	};
	newRegexNodeStr = function(t, opt, str) {
		var opt, str, t;
		return new regexNode.ptr(t, sliceType$8.nil, str, ptrType.nil, 0, 0, 0, opt, ptrType$2.nil);
	};
	newRegexNodeSet = function(t, opt, set) {
		var opt, set, t;
		return new regexNode.ptr(t, sliceType$8.nil, sliceType$2.nil, set, 0, 0, 0, opt, ptrType$2.nil);
	};
	newRegexNodeM = function(t, opt, m) {
		var m, opt, t;
		return new regexNode.ptr(t, sliceType$8.nil, sliceType$2.nil, ptrType.nil, 0, m, 0, opt, ptrType$2.nil);
	};
	newRegexNodeMN = function(t, opt, m, n) {
		var m, n, opt, t;
		return new regexNode.ptr(t, sliceType$8.nil, sliceType$2.nil, ptrType.nil, 0, m, n, opt, ptrType$2.nil);
	};
	regexNode.ptr.prototype.writeStrToBuf = function(buf) {
		var {_r, buf, i, n, x, $s, $r, $c} = $restore(this, {buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n.str.$length)) { break; } */ if(!(i < n.str.$length)) { $s = 2; continue; }
			_r = buf.WriteRune((x = n.str, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: regexNode.ptr.prototype.writeStrToBuf, $c: true, $r, _r, buf, i, n, x, $s};return $f;
	};
	regexNode.prototype.writeStrToBuf = function(buf) { return this.$val.writeStrToBuf(buf); };
	regexNode.ptr.prototype.addChild = function(child) {
		var {_r, child, n, reduced, $s, $r, $c} = $restore(this, {child});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		_r = child.reduce(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		reduced = _r;
		n.children = $append(n.children, reduced);
		reduced.next = n;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: regexNode.ptr.prototype.addChild, $c: true, $r, _r, child, n, reduced, $s};return $f;
	};
	regexNode.prototype.addChild = function(child) { return this.$val.addChild(child); };
	regexNode.ptr.prototype.insertChildren = function(afterIndex, nodes) {
		var afterIndex, n, newChildren, nodes;
		n = this;
		newChildren = $makeSlice(sliceType$8, 0, (n.children.$length + nodes.$length >> 0));
		n.children = $appendSlice($appendSlice($appendSlice(newChildren, $subslice(n.children, 0, afterIndex)), nodes), $subslice(n.children, afterIndex));
	};
	regexNode.prototype.insertChildren = function(afterIndex, nodes) { return this.$val.insertChildren(afterIndex, nodes); };
	regexNode.ptr.prototype.removeChildren = function(startIndex, endIndex) {
		var endIndex, n, startIndex;
		n = this;
		n.children = $appendSlice($subslice(n.children, 0, startIndex), $subslice(n.children, endIndex));
	};
	regexNode.prototype.removeChildren = function(startIndex, endIndex) { return this.$val.removeChildren(startIndex, endIndex); };
	regexNode.ptr.prototype.makeRep = function(t, min, max) {
		var max, min, n, t;
		n = this;
		n.t = n.t + (((t - 9 >> 0))) >> 0;
		n.m = min;
		n.n = max;
	};
	regexNode.prototype.makeRep = function(t, min, max) { return this.$val.makeRep(t, min, max); };
	regexNode.ptr.prototype.reduce = function() {
		var {$24r, _1, _r, n, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
			_1 = n.t;
			/* */ if (_1 === (24)) { $s = 2; continue; }
			/* */ if (_1 === (25)) { $s = 3; continue; }
			/* */ if ((_1 === (26)) || (_1 === (27))) { $s = 4; continue; }
			/* */ if (_1 === (29)) { $s = 5; continue; }
			/* */ if ((_1 === (11)) || (_1 === (5))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (24)) { */ case 2:
				_r = n.reduceAlternation(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$24r = _r;
				$s = 10; case 10: return $24r;
			/* } else if (_1 === (25)) { */ case 3:
				$s = -1; return n.reduceConcatenation();
			/* } else if ((_1 === (26)) || (_1 === (27))) { */ case 4:
				$s = -1; return n.reduceRep();
			/* } else if (_1 === (29)) { */ case 5:
				$s = -1; return n.reduceGroup();
			/* } else if ((_1 === (11)) || (_1 === (5))) { */ case 6:
				$s = -1; return n.reduceSet();
			/* } else { */ case 7:
				$s = -1; return n;
			/* } */ case 8:
		case 1:
		$s = -1; return ptrType$2.nil;
		/* */ } return; } var $f = {$blk: regexNode.ptr.prototype.reduce, $c: true, $r, $24r, _1, _r, n, $s};return $f;
	};
	regexNode.prototype.reduce = function() { return this.$val.reduce(); };
	regexNode.ptr.prototype.reduceAlternation = function() {
		var {_tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, at, i, j, k, lastNodeCannotMerge, n, optionsAt, optionsLast, prev, prevCharClass, wasLastSet, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		if (n.children.$length === 0) {
			$s = -1; return newRegexNode(22, n.options);
		}
		wasLastSet = false;
		lastNodeCannotMerge = false;
		optionsLast = 0;
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		j = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		i = _tmp$2;
		j = _tmp$3;
		/* while (true) { */ case 1:
			/* if (!(i < n.children.$length)) { break; } */ if(!(i < n.children.$length)) { $s = 2; continue; }
			at = (x = n.children, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (j < i) {
				(x$1 = n.children, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j] = at));
			}
			/* while (true) { */ case 3:
				/* */ if (at.t === 24) { $s = 5; continue; }
				/* */ if ((at.t === 11) || (at.t === 9)) { $s = 6; continue; }
				/* */ if (at.t === 22) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (at.t === 24) { */ case 5:
					k = 0;
					while (true) {
						if (!(k < at.children.$length)) { break; }
						(x$2 = at.children, ((k < 0 || k >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + k])).next = n;
						k = k + (1) >> 0;
					}
					n.insertChildren(i + 1 >> 0, at.children);
					j = j - (1) >> 0;
					$s = 9; continue;
				/* } else if ((at.t === 11) || (at.t === 9)) { */ case 6:
					optionsAt = at.options & 65;
					if (at.t === 11) {
						if (!wasLastSet || !((optionsLast === optionsAt)) || lastNodeCannotMerge || !$clone(at.set, CharSet).IsMergeable()) {
							wasLastSet = true;
							lastNodeCannotMerge = !$clone(at.set, CharSet).IsMergeable();
							optionsLast = optionsAt;
							/* break; */ $s = 4; continue;
						}
					} else if (!wasLastSet || !((optionsLast === optionsAt)) || lastNodeCannotMerge) {
						wasLastSet = true;
						lastNodeCannotMerge = false;
						optionsLast = optionsAt;
						/* break; */ $s = 4; continue;
					}
					j = j - (1) >> 0;
					prev = (x$3 = n.children, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j]));
					prevCharClass = ptrType.nil;
					/* */ if (prev.t === 9) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (prev.t === 9) { */ case 10:
						prevCharClass = new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false);
						$r = prevCharClass.addChar(prev.ch); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 12; continue;
					/* } else { */ case 11:
						prevCharClass = prev.set;
					/* } */ case 12:
					/* */ if (at.t === 9) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (at.t === 9) { */ case 14:
						$r = prevCharClass.addChar(at.ch); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 16; continue;
					/* } else { */ case 15:
						$r = prevCharClass.addSet($clone(at.set, CharSet)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 16:
					prev.t = 11;
					prev.set = prevCharClass;
					$s = 9; continue;
				/* } else if (at.t === 22) { */ case 7:
					j = j - (1) >> 0;
					$s = 9; continue;
				/* } else { */ case 8:
					wasLastSet = false;
					lastNodeCannotMerge = false;
				/* } */ case 9:
				/* break; */ $s = 4; continue;
			case 4:
			_tmp$4 = i + 1 >> 0;
			_tmp$5 = j + 1 >> 0;
			i = _tmp$4;
			j = _tmp$5;
		$s = 1; continue;
		case 2:
		if (j < i) {
			n.removeChildren(j, i);
		}
		$s = -1; return n.stripEnation(22);
		/* */ } return; } var $f = {$blk: regexNode.ptr.prototype.reduceAlternation, $c: true, $r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, at, i, j, k, lastNodeCannotMerge, n, optionsAt, optionsLast, prev, prevCharClass, wasLastSet, x, x$1, x$2, x$3, $s};return $f;
	};
	regexNode.prototype.reduceAlternation = function() { return this.$val.reduceAlternation(); };
	regexNode.ptr.prototype.reduceConcatenation = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, at, i, j, k, merge, n, optionsAt, optionsLast, prev, wasLastString, x, x$1, x$2, x$3, x$4;
		n = this;
		optionsLast = 0;
		optionsAt = 0;
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		j = _tmp$1;
		if (n.children.$length === 0) {
			return newRegexNode(23, n.options);
		}
		wasLastString = false;
		_tmp$2 = 0;
		_tmp$3 = 0;
		i = _tmp$2;
		j = _tmp$3;
		while (true) {
			if (!(i < n.children.$length)) { break; }
			_tmp$4 = ptrType$2.nil;
			_tmp$5 = ptrType$2.nil;
			at = _tmp$4;
			prev = _tmp$5;
			at = (x = n.children, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (j < i) {
				(x$1 = n.children, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j] = at));
			}
			if ((at.t === 25) && ((((at.options & 64)) === ((n.options & 64))))) {
				k = 0;
				while (true) {
					if (!(k < at.children.$length)) { break; }
					(x$2 = at.children, ((k < 0 || k >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + k])).next = n;
					k = k + (1) >> 0;
				}
				n.insertChildren(i + 1 >> 0, at.children);
				j = j - (1) >> 0;
			} else if ((at.t === 12) || (at.t === 9)) {
				optionsAt = at.options & 65;
				if (!wasLastString || !((optionsLast === optionsAt))) {
					wasLastString = true;
					optionsLast = optionsAt;
					_tmp$6 = i + 1 >> 0;
					_tmp$7 = j + 1 >> 0;
					i = _tmp$6;
					j = _tmp$7;
					continue;
				}
				j = j - (1) >> 0;
				prev = (x$3 = n.children, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j]));
				if (prev.t === 9) {
					prev.t = 12;
					prev.str = new sliceType$2([prev.ch]);
				}
				if (((optionsAt & 64)) === 0) {
					if (at.t === 9) {
						prev.str = $append(prev.str, at.ch);
					} else {
						prev.str = $appendSlice(prev.str, at.str);
					}
				} else {
					if (at.t === 9) {
						prev.str = $append(prev.str, 0);
						$copySlice($subslice(prev.str, 1), prev.str);
						(x$4 = prev.str, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0] = at.ch));
					} else {
						merge = $makeSlice(sliceType$2, (prev.str.$length + at.str.$length >> 0));
						$copySlice(merge, at.str);
						$copySlice($subslice(merge, at.str.$length), prev.str);
						prev.str = merge;
					}
				}
			} else if (at.t === 23) {
				j = j - (1) >> 0;
			} else {
				wasLastString = false;
			}
			_tmp$8 = i + 1 >> 0;
			_tmp$9 = j + 1 >> 0;
			i = _tmp$8;
			j = _tmp$9;
		}
		if (j < i) {
			n.removeChildren(j, i);
		}
		return n.stripEnation(23);
	};
	regexNode.prototype.reduceConcatenation = function() { return this.$val.reduceConcatenation(); };
	regexNode.ptr.prototype.reduceRep = function() {
		var _q, _q$1, child, childType, max, min, n, t, u, x;
		n = this;
		u = n;
		t = n.t;
		min = n.m;
		max = n.n;
		while (true) {
			if (u.children.$length === 0) {
				break;
			}
			child = (x = u.children, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
			if (!((child.t === t))) {
				childType = child.t;
				if (!(childType >= 3 && childType <= 5 && (t === 26) || childType >= 6 && childType <= 8 && (t === 27))) {
					break;
				}
			}
			if ((u.m === 0) && child.m > 1 || child.n < ($imul(child.m, 2))) {
				break;
			}
			u = child;
			if (u.m > 0) {
				if ((_q = 2147483646 / u.m, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) < min) {
					u.m = 2147483647;
				} else {
					u.m = $imul(u.m, min);
				}
			}
			if (u.n > 0) {
				if ((_q$1 = 2147483646 / u.n, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) < max) {
					u.n = 2147483647;
				} else {
					u.n = $imul(u.n, max);
				}
			}
		}
		if (2147483647 === min) {
			return newRegexNode(22, n.options);
		}
		return u;
	};
	regexNode.prototype.reduceRep = function() { return this.$val.reduceRep(); };
	regexNode.ptr.prototype.stripEnation = function(emptyType) {
		var _1, emptyType, n, x;
		n = this;
		_1 = n.children.$length;
		if (_1 === (0)) {
			return newRegexNode(emptyType, n.options);
		} else if (_1 === (1)) {
			return (x = n.children, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		} else {
			return n;
		}
	};
	regexNode.prototype.stripEnation = function(emptyType) { return this.$val.stripEnation(emptyType); };
	regexNode.ptr.prototype.reduceGroup = function() {
		var n, u, x;
		n = this;
		u = n;
		while (true) {
			if (!(u.t === 29)) { break; }
			u = (x = u.children, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		return u;
	};
	regexNode.prototype.reduceGroup = function() { return this.$val.reduceGroup(); };
	regexNode.ptr.prototype.reduceSet = function() {
		var n;
		n = this;
		if (n.set === ptrType.nil) {
			n.t = 22;
		} else if ($clone(n.set, CharSet).IsSingleton()) {
			n.ch = $clone(n.set, CharSet).SingletonChar();
			n.set = ptrType.nil;
			n.t = n.t + (-2) >> 0;
		} else if ($clone(n.set, CharSet).IsSingletonInverse()) {
			n.ch = $clone(n.set, CharSet).SingletonChar();
			n.set = ptrType.nil;
			n.t = n.t + (-1) >> 0;
		}
		return n;
	};
	regexNode.prototype.reduceSet = function() { return this.$val.reduceSet(); };
	regexNode.ptr.prototype.reverseLeft = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, left, n, right, x, x$1, x$2, x$3;
		n = this;
		if (!(((n.options & 64) === 0)) && (n.t === 25) && n.children.$length > 0) {
			_tmp = 0;
			_tmp$1 = n.children.$length - 1 >> 0;
			left = _tmp;
			right = _tmp$1;
			while (true) {
				if (!(left < right)) { break; }
				_tmp$2 = (x = n.children, ((right < 0 || right >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + right]));
				_tmp$3 = (x$1 = n.children, ((left < 0 || left >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + left]));
				(x$2 = n.children, ((left < 0 || left >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + left] = _tmp$2));
				(x$3 = n.children, ((right < 0 || right >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + right] = _tmp$3));
				_tmp$4 = left + 1 >> 0;
				_tmp$5 = right - 1 >> 0;
				left = _tmp$4;
				right = _tmp$5;
			}
		}
		return n;
	};
	regexNode.prototype.reverseLeft = function() { return this.$val.reverseLeft(); };
	regexNode.ptr.prototype.makeQuantifier = function(lazy, min, max) {
		var {_1, lazy, max, min, n, result, t, $s, $r, $c} = $restore(this, {lazy, min, max});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		if ((min === 0) && (max === 0)) {
			$s = -1; return newRegexNode(23, n.options);
		}
		if ((min === 1) && (max === 1)) {
			$s = -1; return n;
		}
			_1 = n.t;
			/* */ if ((_1 === (9)) || (_1 === (10)) || (_1 === (11))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (9)) || (_1 === (10)) || (_1 === (11))) { */ case 2:
				if (lazy) {
					n.makeRep(6, min, max);
				} else {
					n.makeRep(3, min, max);
				}
				$s = -1; return n;
			/* } else { */ case 3:
				t = 0;
				if (lazy) {
					t = 27;
				} else {
					t = 26;
				}
				result = newRegexNodeMN(t, n.options, min, max);
				$r = result.addChild(n); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return result;
			/* } */ case 4:
		case 1:
		$s = -1; return ptrType$2.nil;
		/* */ } return; } var $f = {$blk: regexNode.ptr.prototype.makeQuantifier, $c: true, $r, _1, lazy, max, min, n, result, t, $s};return $f;
	};
	regexNode.prototype.makeQuantifier = function(lazy, min, max) { return this.$val.makeQuantifier(lazy, min, max); };
	regexNode.ptr.prototype.description = function() {
		var {_1, _2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, n, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		_r = buf.WriteString((x = n.t, ((x < 0 || x >= typeStr.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeStr.$array[typeStr.$offset + x]))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (!((((n.options & 4)) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((n.options & 4)) === 0))) { */ case 2:
			_r$1 = buf.WriteString("-C"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		/* */ if (!((((n.options & 1)) === 0))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((((n.options & 1)) === 0))) { */ case 5:
			_r$2 = buf.WriteString("-I"); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 6:
		/* */ if (!((((n.options & 64)) === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!((((n.options & 64)) === 0))) { */ case 8:
			_r$3 = buf.WriteString("-L"); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 9:
		/* */ if (!((((n.options & 2)) === 0))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!((((n.options & 2)) === 0))) { */ case 11:
			_r$4 = buf.WriteString("-M"); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 12:
		/* */ if (!((((n.options & 16)) === 0))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!((((n.options & 16)) === 0))) { */ case 14:
			_r$5 = buf.WriteString("-S"); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 15:
		/* */ if (!((((n.options & 32)) === 0))) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (!((((n.options & 32)) === 0))) { */ case 17:
			_r$6 = buf.WriteString("-X"); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 18:
		/* */ if (!((((n.options & 256)) === 0))) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (!((((n.options & 256)) === 0))) { */ case 20:
			_r$7 = buf.WriteString("-E"); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 21:
			_1 = n.t;
			/* */ if ((_1 === (3)) || (_1 === (4)) || (_1 === (6)) || (_1 === (7)) || (_1 === (9)) || (_1 === (10))) { $s = 24; continue; }
			/* */ if (_1 === (28)) { $s = 25; continue; }
			/* */ if ((_1 === (13)) || (_1 === (33))) { $s = 26; continue; }
			/* */ if (_1 === (12)) { $s = 27; continue; }
			/* */ if ((_1 === (11)) || (_1 === (5)) || (_1 === (8))) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if ((_1 === (3)) || (_1 === (4)) || (_1 === (6)) || (_1 === (7)) || (_1 === (9)) || (_1 === (10))) { */ case 24:
				_r$8 = CharDescription(n.ch); /* */ $s = 30; case 30: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = buf.WriteString("(Ch = " + _r$8 + ")"); /* */ $s = 31; case 31: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
				/* break; */ $s = 23; continue;
				$s = 29; continue;
			/* } else if (_1 === (28)) { */ case 25:
				_r$10 = buf.WriteString("(index = " + strconv.Itoa(n.m) + ", unindex = " + strconv.Itoa(n.n) + ")"); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				/* break; */ $s = 23; continue;
				$s = 29; continue;
			/* } else if ((_1 === (13)) || (_1 === (33))) { */ case 26:
				_r$11 = buf.WriteString("(index = " + strconv.Itoa(n.m) + ")"); /* */ $s = 33; case 33: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
				/* break; */ $s = 23; continue;
				$s = 29; continue;
			/* } else if (_1 === (12)) { */ case 27:
				_r$12 = fmt.Fprintf(buf, "(String = %s)", new sliceType$7([new $String(($runesToString(n.str)))])); /* */ $s = 34; case 34: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
				/* break; */ $s = 23; continue;
				$s = 29; continue;
			/* } else if ((_1 === (11)) || (_1 === (5)) || (_1 === (8))) { */ case 28:
				_r$13 = $clone(n.set, CharSet).String(); /* */ $s = 35; case 35: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = buf.WriteString("(Set = " + _r$13 + ")"); /* */ $s = 36; case 36: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
				/* break; */ $s = 23; continue;
			/* } */ case 29:
		case 23:
			_2 = n.t;
			/* */ if ((_2 === (3)) || (_2 === (4)) || (_2 === (6)) || (_2 === (7)) || (_2 === (5)) || (_2 === (8)) || (_2 === (26)) || (_2 === (27))) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if ((_2 === (3)) || (_2 === (4)) || (_2 === (6)) || (_2 === (7)) || (_2 === (5)) || (_2 === (8)) || (_2 === (26)) || (_2 === (27))) { */ case 38:
				_r$15 = buf.WriteString("(Min = "); /* */ $s = 40; case 40: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
				_r$16 = buf.WriteString(strconv.Itoa(n.m)); /* */ $s = 41; case 41: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_r$16;
				_r$17 = buf.WriteString(", Max = "); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				/* */ if (n.n === 2147483647) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if (n.n === 2147483647) { */ case 43:
					_r$18 = buf.WriteString("inf"); /* */ $s = 46; case 46: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$18;
					$s = 45; continue;
				/* } else { */ case 44:
					_r$19 = buf.WriteString(strconv.Itoa(n.n)); /* */ $s = 47; case 47: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					_r$19;
				/* } */ case 45:
				_r$20 = buf.WriteString(")"); /* */ $s = 48; case 48: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$20;
				/* break; */ $s = 37; continue;
			/* } */ case 39:
		case 37:
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: regexNode.ptr.prototype.description, $c: true, $r, _1, _2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, n, x, $s};return $f;
	};
	regexNode.prototype.description = function() { return this.$val.description(); };
	RegexTree.ptr.prototype.Dump = function() {
		var {$24r, _r, t, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.root.dump(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: RegexTree.ptr.prototype.Dump, $c: true, $r, $24r, _r, t, $s};return $f;
	};
	RegexTree.prototype.Dump = function() { return this.$val.Dump(); };
	regexNode.ptr.prototype.dump = function() {
		var {CurChild, CurNode, Depth, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, buf, n, stack, x, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		n = this;
		stack = sliceType$4.nil;
		CurNode = n;
		CurChild = 0;
		_r = CurNode.description(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = bytes.NewBufferString(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		buf = _r$1;
		_r$2 = buf.WriteRune(10); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		/* while (true) { */ case 4:
			/* */ if (!(CurNode.children === sliceType$8.nil) && CurChild < CurNode.children.$length) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(CurNode.children === sliceType$8.nil) && CurChild < CurNode.children.$length) { */ case 6:
				stack = $append(stack, CurChild + 1 >> 0);
				CurNode = (x = CurNode.children, ((CurChild < 0 || CurChild >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + CurChild]));
				CurChild = 0;
				Depth = stack.$length;
				if (Depth > 32) {
					Depth = 32;
				}
				_r$3 = buf.Write($subslice(padSpace, 0, Depth)); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_r$4 = CurNode.description(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = buf.WriteString(_r$4); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				_r$6 = buf.WriteRune(10); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				$s = 8; continue;
			/* } else { */ case 7:
				if (stack.$length === 0) {
					/* break; */ $s = 5; continue;
				}
				CurChild = (x$1 = stack.$length - 1 >> 0, ((x$1 < 0 || x$1 >= stack.$length) ? ($throwRuntimeError("index out of range"), undefined) : stack.$array[stack.$offset + x$1]));
				stack = $subslice(stack, 0, (stack.$length - 1 >> 0));
				CurNode = CurNode.next;
			/* } */ case 8:
		$s = 4; continue;
		case 5:
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: regexNode.ptr.prototype.dump, $c: true, $r, CurChild, CurNode, Depth, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, buf, n, stack, x, x$1, $s};return $f;
	};
	regexNode.prototype.dump = function() { return this.$val.dump(); };
	NewReplacerData = function(rep, caps, capsize, capnames, op) {
		var {_1, _entry, _i, _r, _r$1, _ref, _tuple, capnames, caps, capsize, child, concat, err, op, p, rep, rules, sb, slot, strings$1, $s, $r, $c} = $restore(this, {rep, caps, capsize, capnames, op});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = new parser.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, "", sliceType$2.nil, 0, ptrType$5.nil, 0, 0, 0, capsize, caps, capnames, sliceType$4.nil, sliceType.nil, op, sliceType$11.nil, false);
		p.setPattern(rep);
		_r = p.scanReplacement(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		concat = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err];
		}
		if (!((concat.t === 25))) {
			$panic($pkg.ErrReplacementError);
		}
		sb = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		strings$1 = sliceType.nil;
		rules = sliceType$4.nil;
		_ref = concat.children;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			child = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_1 = child.t;
				/* */ if (_1 === (12)) { $s = 5; continue; }
				/* */ if (_1 === (9)) { $s = 6; continue; }
				/* */ if (_1 === (13)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (12)) { */ case 5:
					$r = child.writeStrToBuf(sb); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else if (_1 === (9)) { */ case 6:
					_r$1 = sb.WriteRune(child.ch); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					$s = 9; continue;
				/* } else if (_1 === (13)) { */ case 7:
					if (sb.Len() > 0) {
						rules = $append(rules, strings$1.$length);
						strings$1 = $append(strings$1, sb.String());
						sb.Reset();
					}
					slot = child.m;
					if ((caps ? caps.size : 0) > 0 && slot >= 0) {
						slot = (_entry = $mapIndex(caps,$Int.keyFor(slot)), _entry !== undefined ? _entry.v : 0);
					}
					rules = $append(rules, -5 - slot >> 0);
					$s = 9; continue;
				/* } else { */ case 8:
					$panic($pkg.ErrReplacementError);
				/* } */ case 9:
			case 4:
			_i++;
		$s = 2; continue;
		case 3:
		if (sb.Len() > 0) {
			rules = $append(rules, strings$1.$length);
			strings$1 = $append(strings$1, sb.String());
		}
		$s = -1; return [new ReplacerData.ptr(rep, strings$1, rules), $ifaceNil];
		/* */ } return; } var $f = {$blk: NewReplacerData, $c: true, $r, _1, _entry, _i, _r, _r$1, _ref, _tuple, capnames, caps, capsize, child, concat, err, op, p, rep, rules, sb, slot, strings$1, $s};return $f;
	};
	$pkg.NewReplacerData = NewReplacerData;
	getFirstCharsPrefix = function(tree) {
		var {_r, _r$1, fc, fcSet, s, tree, $s, $r, $c} = $restore(this, {tree});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = new regexFcd.ptr($makeSlice(sliceType$4, 32), 0, $makeSlice(sliceType$12, 32), 0, false, false, false);
		_r = s.regexFCFromRegexTree(tree); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		fc = _r;
		if (fc === ptrType$7.nil || fc.nullable || $clone(fc.cc, CharSet).IsEmpty()) {
			$s = -1; return ptrType$4.nil;
		}
		_r$1 = fc.getFirstChars(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		fcSet = $clone(_r$1, CharSet);
		$s = -1; return new Prefix.ptr(sliceType$2.nil, $clone(fcSet, CharSet), fc.caseInsensitive);
		/* */ } return; } var $f = {$blk: getFirstCharsPrefix, $c: true, $r, _r, _r$1, fc, fcSet, s, tree, $s};return $f;
	};
	regexFcd.ptr.prototype.regexFCFromRegexTree = function(tree) {
		var {curChild, curNode, s, tree, x, $s, $r, $c} = $restore(this, {tree});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		curNode = tree.root;
		curChild = 0;
		/* while (true) { */ case 1:
			/* */ if (curNode.children.$length === 0) { $s = 3; continue; }
			/* */ if (curChild < curNode.children.$length && !s.skipAllChildren) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (curNode.children.$length === 0) { */ case 3:
				$r = s.calculateFC(curNode.t, curNode, 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if (curChild < curNode.children.$length && !s.skipAllChildren) { */ case 4:
				$r = s.calculateFC(curNode.t | 64, curNode, curChild); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!s.skipchild) {
					curNode = (x = curNode.children, ((curChild < 0 || curChild >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + curChild]));
					s.pushInt(curChild);
					curChild = 0;
				} else {
					curChild = curChild + (1) >> 0;
					s.skipchild = false;
				}
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			s.skipAllChildren = false;
			if (s.intIsEmpty()) {
				/* break; */ $s = 2; continue;
			}
			curChild = s.popInt();
			curNode = curNode.next;
			$r = s.calculateFC(curNode.t | 128, curNode, curChild); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (s.failed) {
				$s = -1; return ptrType$7.nil;
			}
			curChild = curChild + (1) >> 0;
		$s = 1; continue;
		case 2:
		if (s.fcIsEmpty()) {
			$s = -1; return ptrType$7.nil;
		}
		$s = -1; return s.popFC();
		/* */ } return; } var $f = {$blk: regexFcd.ptr.prototype.regexFCFromRegexTree, $c: true, $r, curChild, curNode, s, tree, x, $s};return $f;
	};
	regexFcd.prototype.regexFCFromRegexTree = function(tree) { return this.$val.regexFCFromRegexTree(tree); };
	regexFcd.ptr.prototype.pushInt = function(I) {
		var I, expanded, s, x, x$1;
		s = this;
		if (s.intDepth >= s.intStack.$length) {
			expanded = $makeSlice(sliceType$4, ($imul(s.intDepth, 2)));
			$copySlice(expanded, s.intStack);
			s.intStack = expanded;
		}
		(x = s.intStack, x$1 = s.intDepth, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = I));
		s.intDepth = s.intDepth + (1) >> 0;
	};
	regexFcd.prototype.pushInt = function(I) { return this.$val.pushInt(I); };
	regexFcd.ptr.prototype.intIsEmpty = function() {
		var s;
		s = this;
		return s.intDepth === 0;
	};
	regexFcd.prototype.intIsEmpty = function() { return this.$val.intIsEmpty(); };
	regexFcd.ptr.prototype.popInt = function() {
		var s, x, x$1;
		s = this;
		s.intDepth = s.intDepth - (1) >> 0;
		return (x = s.intStack, x$1 = s.intDepth, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	regexFcd.prototype.popInt = function() { return this.$val.popInt(); };
	regexFcd.ptr.prototype.pushFC = function(fc) {
		var expanded, fc, s, x, x$1;
		s = this;
		if (s.fcDepth >= s.fcStack.$length) {
			expanded = $makeSlice(sliceType$12, ($imul(s.fcDepth, 2)));
			$copySlice(expanded, s.fcStack);
			s.fcStack = expanded;
		}
		regexFc.copy((x = s.fcStack, x$1 = s.fcDepth, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), fc);
		s.fcDepth = s.fcDepth + (1) >> 0;
	};
	regexFcd.prototype.pushFC = function(fc) { return this.$val.pushFC(fc); };
	regexFcd.ptr.prototype.fcIsEmpty = function() {
		var s;
		s = this;
		return s.fcDepth === 0;
	};
	regexFcd.prototype.fcIsEmpty = function() { return this.$val.fcIsEmpty(); };
	regexFcd.ptr.prototype.popFC = function() {
		var s, x, x$1;
		s = this;
		s.fcDepth = s.fcDepth - (1) >> 0;
		return (x = s.fcStack, x$1 = s.fcDepth, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	regexFcd.prototype.popFC = function() { return this.$val.popFC(); };
	regexFcd.ptr.prototype.topFC = function() {
		var s, x, x$1;
		s = this;
		return (x = s.fcStack, x$1 = s.fcDepth - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	regexFcd.prototype.topFC = function() { return this.$val.topFC(); };
	regexFcd.ptr.prototype.skipChild = function() {
		var s;
		s = this;
		s.skipchild = true;
	};
	regexFcd.prototype.skipChild = function() { return this.$val.skipChild(); };
	regexFcd.ptr.prototype.calculateFC = function(nt, node, CurIndex) {
		var {CurIndex, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, child, child$1, child$2, ci, cumul, cumul$1, cumul$2, fc, fc$1, node, nt, rtl, s, x, x$1, x$2, $s, $r, $c} = $restore(this, {nt, node, CurIndex});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		ci = false;
		rtl = false;
		if (nt <= 13) {
			if (!((((node.options & 1)) === 0))) {
				ci = true;
			}
			if (!((((node.options & 64)) === 0))) {
				rtl = true;
			}
		}
			_1 = nt;
			/* */ if ((_1 === (89)) || (_1 === (88)) || (_1 === (97)) || (_1 === (90)) || (_1 === (91))) { $s = 2; continue; }
			/* */ if (_1 === (98)) { $s = 3; continue; }
			/* */ if (_1 === (23)) { $s = 4; continue; }
			/* */ if (_1 === (153)) { $s = 5; continue; }
			/* */ if (_1 === (162)) { $s = 6; continue; }
			/* */ if ((_1 === (152)) || (_1 === (161))) { $s = 7; continue; }
			/* */ if ((_1 === (154)) || (_1 === (155))) { $s = 8; continue; }
			/* */ if ((_1 === (93)) || (_1 === (157)) || (_1 === (92)) || (_1 === (156)) || (_1 === (96)) || (_1 === (160))) { $s = 9; continue; }
			/* */ if ((_1 === (94)) || (_1 === (95))) { $s = 10; continue; }
			/* */ if ((_1 === (158)) || (_1 === (159))) { $s = 11; continue; }
			/* */ if ((_1 === (9)) || (_1 === (10))) { $s = 12; continue; }
			/* */ if ((_1 === (3)) || (_1 === (6))) { $s = 13; continue; }
			/* */ if ((_1 === (4)) || (_1 === (7))) { $s = 14; continue; }
			/* */ if (_1 === (12)) { $s = 15; continue; }
			/* */ if (_1 === (11)) { $s = 16; continue; }
			/* */ if ((_1 === (5)) || (_1 === (8))) { $s = 17; continue; }
			/* */ if (_1 === (13)) { $s = 18; continue; }
			/* */ if ((_1 === (22)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17)) || (_1 === (41)) || (_1 === (42)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21))) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if ((_1 === (89)) || (_1 === (88)) || (_1 === (97)) || (_1 === (90)) || (_1 === (91))) { */ case 2:
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if (_1 === (98)) { */ case 3:
				if (CurIndex === 0) {
					s.skipChild();
				}
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if (_1 === (23)) { */ case 4:
				s.pushFC($clone(new regexFc.ptr(new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false), true, false), regexFc));
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if (_1 === (153)) { */ case 5:
				/* */ if (!((CurIndex === 0))) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!((CurIndex === 0))) { */ case 22:
					child = s.popFC();
					cumul = s.topFC();
					_r = cumul.addFC($clone(child, regexFc), true); /* */ $s = 24; case 24: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					s.failed = !_r;
				/* } */ case 23:
				fc = s.topFC();
				if (!fc.nullable) {
					s.skipAllChildren = true;
				}
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if (_1 === (162)) { */ case 6:
				/* */ if (CurIndex > 1) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (CurIndex > 1) { */ case 25:
					child$1 = s.popFC();
					cumul$1 = s.topFC();
					_r$1 = cumul$1.addFC($clone(child$1, regexFc), false); /* */ $s = 27; case 27: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					s.failed = !_r$1;
				/* } */ case 26:
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (152)) || (_1 === (161))) { */ case 7:
				/* */ if (!((CurIndex === 0))) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (!((CurIndex === 0))) { */ case 28:
					child$2 = s.popFC();
					cumul$2 = s.topFC();
					_r$2 = cumul$2.addFC($clone(child$2, regexFc), false); /* */ $s = 30; case 30: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					s.failed = !_r$2;
				/* } */ case 29:
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (154)) || (_1 === (155))) { */ case 8:
				if (node.m === 0) {
					fc$1 = s.topFC();
					fc$1.nullable = true;
				}
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (93)) || (_1 === (157)) || (_1 === (92)) || (_1 === (156)) || (_1 === (96)) || (_1 === (160))) { */ case 9:
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (94)) || (_1 === (95))) { */ case 10:
				s.skipChild();
				s.pushFC($clone(new regexFc.ptr(new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false), true, false), regexFc));
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (158)) || (_1 === (159))) { */ case 11:
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (9)) || (_1 === (10))) { */ case 12:
				_r$3 = newRegexFc(node.ch, nt === 10, false, ci); /* */ $s = 31; case 31: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = s.pushFC($clone(_r$3, regexFc)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (3)) || (_1 === (6))) { */ case 13:
				_r$4 = newRegexFc(node.ch, false, node.m === 0, ci); /* */ $s = 33; case 33: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = s.pushFC($clone(_r$4, regexFc)); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (4)) || (_1 === (7))) { */ case 14:
				_r$5 = newRegexFc(node.ch, true, node.m === 0, ci); /* */ $s = 35; case 35: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = s.pushFC($clone(_r$5, regexFc)); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if (_1 === (12)) { */ case 15:
				/* */ if (node.str.$length === 0) { $s = 37; continue; }
				/* */ if (!rtl) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (node.str.$length === 0) { */ case 37:
					s.pushFC($clone(new regexFc.ptr(new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false), true, false), regexFc));
					$s = 40; continue;
				/* } else if (!rtl) { */ case 38:
					_r$6 = newRegexFc((x = node.str, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), false, false, ci); /* */ $s = 41; case 41: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = s.pushFC($clone(_r$6, regexFc)); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 40; continue;
				/* } else { */ case 39:
					_r$7 = newRegexFc((x$1 = node.str, x$2 = node.str.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])), false, false, ci); /* */ $s = 43; case 43: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = s.pushFC($clone(_r$7, regexFc)); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 40:
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if (_1 === (11)) { */ case 16:
				s.pushFC($clone(new regexFc.ptr($clone($clone(node.set, CharSet).Copy(), CharSet), false, ci), regexFc));
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (5)) || (_1 === (8))) { */ case 17:
				s.pushFC($clone(new regexFc.ptr($clone($clone(node.set, CharSet).Copy(), CharSet), node.m === 0, ci), regexFc));
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if (_1 === (13)) { */ case 18:
				_r$8 = $pkg.AnyClass(); /* */ $s = 45; case 45: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = s.pushFC($clone(new regexFc.ptr($clone(_r$8, CharSet), true, false), regexFc)); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else if ((_1 === (22)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17)) || (_1 === (41)) || (_1 === (42)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21))) { */ case 19:
				s.pushFC($clone(new regexFc.ptr(new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false), true, false), regexFc));
				/* break; */ $s = 1; continue;
				$s = 21; continue;
			/* } else { */ case 20:
				_r$9 = fmt.Sprintf("unexpected op code: %v", new sliceType$7([new nodeType(nt)])); /* */ $s = 47; case 47: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$panic(new $String(_r$9));
			/* } */ case 21:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: regexFcd.ptr.prototype.calculateFC, $c: true, $r, CurIndex, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, child, child$1, child$2, ci, cumul, cumul$1, cumul$2, fc, fc$1, node, nt, rtl, s, x, x$1, x$2, $s};return $f;
	};
	regexFcd.prototype.calculateFC = function(nt, node, CurIndex) { return this.$val.calculateFC(nt, node, CurIndex); };
	newRegexFc = function(ch, not, nullable, caseInsensitive) {
		var {caseInsensitive, ch, not, nullable, r, $s, $r, $c} = $restore(this, {ch, not, nullable, caseInsensitive});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = new regexFc.ptr(new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false), nullable, caseInsensitive);
		/* */ if (not) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (not) { */ case 1:
			/* */ if (ch > 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (ch > 0) { */ case 4:
				$r = r.cc.addRange(0, ch - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			/* */ if (ch < 65535) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ch < 65535) { */ case 7:
				$r = r.cc.addRange(ch + 1 >> 0, 1114111); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = r.cc.addRange(ch, ch); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return r;
		/* */ } return; } var $f = {$blk: newRegexFc, $c: true, $r, caseInsensitive, ch, not, nullable, r, $s};return $f;
	};
	regexFc.ptr.prototype.getFirstChars = function() {
		var {r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (r.caseInsensitive) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r.caseInsensitive) { */ case 1:
			$r = r.cc.addLowercase(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return r.cc;
		/* */ } return; } var $f = {$blk: regexFc.ptr.prototype.getFirstChars, $c: true, $r, r, $s};return $f;
	};
	regexFc.prototype.getFirstChars = function() { return this.$val.getFirstChars(); };
	regexFc.ptr.prototype.addFC = function(fc, concatenate) {
		var {concatenate, fc, r, $s, $r, $c} = $restore(this, {fc, concatenate});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		if (!$clone(r.cc, CharSet).IsMergeable() || !$clone(fc.cc, CharSet).IsMergeable()) {
			$s = -1; return false;
		}
		if (concatenate) {
			if (!r.nullable) {
				$s = -1; return true;
			}
			if (!fc.nullable) {
				r.nullable = false;
			}
		} else {
			if (fc.nullable) {
				r.nullable = true;
			}
		}
		r.caseInsensitive = r.caseInsensitive || fc.caseInsensitive;
		$r = r.cc.addSet($clone(fc.cc, CharSet)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: regexFc.ptr.prototype.addFC, $c: true, $r, concatenate, fc, r, $s};return $f;
	};
	regexFc.prototype.addFC = function(fc, concatenate) { return this.$val.addFC(fc, concatenate); };
	getPrefix = function(tree) {
		var _1, concatNode, curNode, nextChild, tree, x, x$1;
		concatNode = ptrType$2.nil;
		nextChild = 0;
		curNode = tree.root;
		while (true) {
			_1 = curNode.t;
			if (_1 === (25)) {
				if (curNode.children.$length > 0) {
					concatNode = curNode;
					nextChild = 0;
				}
			} else if ((_1 === (32)) || (_1 === (28))) {
				curNode = (x = curNode.children, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
				concatNode = ptrType$2.nil;
				continue;
			} else if ((_1 === (3)) || (_1 === (6))) {
				if (curNode.m > 0) {
					return new Prefix.ptr(repeat(curNode.ch, curNode.m), new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false), !((((curNode.options & 1)) === 0)));
				}
				return ptrType$4.nil;
			} else if (_1 === (9)) {
				return new Prefix.ptr(new sliceType$2([curNode.ch]), new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false), !((((curNode.options & 1)) === 0)));
			} else if (_1 === (12)) {
				return new Prefix.ptr(curNode.str, new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false), !((((curNode.options & 1)) === 0)));
			} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (41)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (23)) || (_1 === (30)) || (_1 === (31))) {
			} else {
				return ptrType$4.nil;
			}
			if (concatNode === ptrType$2.nil || nextChild >= concatNode.children.$length) {
				return ptrType$4.nil;
			}
			curNode = (x$1 = concatNode.children, ((nextChild < 0 || nextChild >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + nextChild]));
			nextChild = nextChild + (1) >> 0;
		}
	};
	repeat = function(r, c) {
		var bp, c, r, ret;
		if (c > 50) {
			c = 50;
		}
		ret = $makeSlice(sliceType$2, c);
		(0 >= ret.$length ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + 0] = r);
		bp = 1;
		while (true) {
			if (!(bp < ret.$length)) { break; }
			$copySlice($subslice(ret, bp), $subslice(ret, 0, bp));
			bp = $imul(bp, (2));
		}
		return ret;
	};
	newBmPrefix = function(pattern, caseInsensitive, rightToLeft) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, b, beforefirst, bump, caseInsensitive, ch, examine, i, i$1, i$2, j, k, last, match, newarray, pattern, rightToLeft, scan, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		b = new BmPrefix.ptr(sliceType$4.nil, sliceType$4.nil, sliceType$13.nil, pattern, 0, 0, rightToLeft, caseInsensitive);
		if (caseInsensitive) {
			i = 0;
			while (true) {
				if (!(i < b.pattern.$length)) { break; }
				(x$1 = b.pattern, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i] = unicode.ToLower((x = b.pattern, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])))));
				i = i + (1) >> 0;
			}
		}
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		beforefirst = _tmp;
		last = _tmp$1;
		bump = _tmp$2;
		_tmp$3 = 0;
		_tmp$4 = 0;
		scan = _tmp$3;
		match = _tmp$4;
		if (!rightToLeft) {
			beforefirst = -1;
			last = b.pattern.$length - 1 >> 0;
			bump = 1;
		} else {
			beforefirst = b.pattern.$length;
			last = 0;
			bump = -1;
		}
		b.positive = $makeSlice(sliceType$4, b.pattern.$length);
		examine = last;
		ch = (x$2 = b.pattern, ((examine < 0 || examine >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + examine]));
		(x$3 = b.positive, ((examine < 0 || examine >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + examine] = bump));
		examine = examine - (bump) >> 0;
		Outerloop:
		while (true) {
			while (true) {
				if (examine === beforefirst) {
					break Outerloop;
				}
				if ((x$4 = b.pattern, ((examine < 0 || examine >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + examine])) === ch) {
					break;
				}
				examine = examine - (bump) >> 0;
			}
			match = last;
			scan = examine;
			while (true) {
				if ((scan === beforefirst) || !(((x$5 = b.pattern, ((match < 0 || match >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + match])) === (x$6 = b.pattern, ((scan < 0 || scan >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + scan]))))) {
					if ((x$7 = b.positive, ((match < 0 || match >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + match])) === 0) {
						(x$8 = b.positive, ((match < 0 || match >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + match] = (match - scan >> 0)));
					}
					break;
				}
				scan = scan - (bump) >> 0;
				match = match - (bump) >> 0;
			}
			examine = examine - (bump) >> 0;
		}
		match = last - bump >> 0;
		while (true) {
			if (!(!((match === beforefirst)))) { break; }
			if ((x$9 = b.positive, ((match < 0 || match >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + match])) === 0) {
				(x$10 = b.positive, ((match < 0 || match >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + match] = bump));
			}
			match = match - (bump) >> 0;
		}
		b.negativeASCII = $makeSlice(sliceType$4, 128);
		i$1 = 0;
		while (true) {
			if (!(i$1 < b.negativeASCII.$length)) { break; }
			(x$11 = b.negativeASCII, ((i$1 < 0 || i$1 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + i$1] = (last - beforefirst >> 0)));
			i$1 = i$1 + (1) >> 0;
		}
		b.lowASCII = 127;
		b.highASCII = 0;
		examine = last;
		while (true) {
			if (!(!((examine === beforefirst)))) { break; }
			ch = (x$12 = b.pattern, ((examine < 0 || examine >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + examine]));
			if (ch < 128) {
				if (b.lowASCII > ch) {
					b.lowASCII = ch;
				}
				if (b.highASCII < ch) {
					b.highASCII = ch;
				}
				if ((x$13 = b.negativeASCII, ((ch < 0 || ch >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + ch])) === (last - beforefirst >> 0)) {
					(x$14 = b.negativeASCII, ((ch < 0 || ch >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + ch] = (last - examine >> 0)));
				}
			} else if (ch <= 65535) {
				_tmp$5 = ch >> 8 >> 0;
				_tmp$6 = ch & 255;
				i$2 = _tmp$5;
				j = _tmp$6;
				if (b.negativeUnicode === sliceType$13.nil) {
					b.negativeUnicode = $makeSlice(sliceType$13, 256);
				}
				if ((x$15 = b.negativeUnicode, ((i$2 < 0 || i$2 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + i$2])) === sliceType$4.nil) {
					newarray = $makeSlice(sliceType$4, 256);
					k = 0;
					while (true) {
						if (!(k < newarray.$length)) { break; }
						((k < 0 || k >= newarray.$length) ? ($throwRuntimeError("index out of range"), undefined) : newarray.$array[newarray.$offset + k] = (last - beforefirst >> 0));
						k = k + (1) >> 0;
					}
					if (i$2 === 0) {
						$copySlice(newarray, b.negativeASCII);
						b.negativeASCII = newarray;
					}
					(x$16 = b.negativeUnicode, ((i$2 < 0 || i$2 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + i$2] = newarray));
				}
				if ((x$17 = (x$18 = b.negativeUnicode, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2])), ((j < 0 || j >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + j])) === (last - beforefirst >> 0)) {
					(x$19 = (x$20 = b.negativeUnicode, ((i$2 < 0 || i$2 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + i$2])), ((j < 0 || j >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + j] = (last - examine >> 0)));
				}
			} else {
				return ptrType$3.nil;
			}
			examine = examine - (bump) >> 0;
		}
		return b;
	};
	BmPrefix.ptr.prototype.String = function() {
		var b;
		b = this;
		return ($runesToString(b.pattern));
	};
	BmPrefix.prototype.String = function() { return this.$val.String(); };
	BmPrefix.ptr.prototype.Dump = function(indent) {
		var {_arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, b, buf, i, i$1, indent, x, x$1, x$2, $s, $r, $c} = $restore(this, {indent});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = this;
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		_r = fmt.Fprintf(buf, "%sBM Pattern: %s\n%sPositive: ", new sliceType$7([new $String(indent), new $String(($runesToString(b.pattern))), new $String(indent)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < b.positive.$length)) { break; } */ if(!(i < b.positive.$length)) { $s = 3; continue; }
			_r$1 = buf.WriteString(strconv.Itoa((x = b.positive, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_r$2 = buf.WriteRune(32); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			i = i + (1) >> 0;
		$s = 2; continue;
		case 3:
		_r$3 = buf.WriteRune(10); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		/* */ if (!(b.negativeASCII === sliceType$4.nil)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(b.negativeASCII === sliceType$4.nil)) { */ case 7:
			_r$4 = buf.WriteString(indent); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = buf.WriteString("Negative table\n"); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			i$1 = 0;
			/* while (true) { */ case 11:
				/* if (!(i$1 < b.negativeASCII.$length)) { break; } */ if(!(i$1 < b.negativeASCII.$length)) { $s = 12; continue; }
				/* */ if (!(((x$1 = b.negativeASCII, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])) === b.pattern.$length))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!(((x$1 = b.negativeASCII, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])) === b.pattern.$length))) { */ case 13:
					_arg = buf;
					_arg$1 = new $String(indent);
					_r$6 = Escape(($encodeRune(((i$1 >> 0))))); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$2 = new $String(_r$6);
					_arg$3 = new $String(strconv.Itoa((x$2 = b.negativeASCII, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]))));
					_r$7 = fmt.Fprintf(_arg, "%s  %s %s\n", new sliceType$7([_arg$1, _arg$2, _arg$3])); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
				/* } */ case 14:
				i$1 = i$1 + (1) >> 0;
			$s = 11; continue;
			case 12:
		/* } */ case 8:
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: BmPrefix.ptr.prototype.Dump, $c: true, $r, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, b, buf, i, i$1, indent, x, x$1, x$2, $s};return $f;
	};
	BmPrefix.prototype.Dump = function(indent) { return this.$val.Dump(indent); };
	BmPrefix.ptr.prototype.Scan = function(text, index, beglimit, endlimit) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, advance, b, beglimit, bump, chMatch, chTest, defadv, endlimit, endmatch, index, match, startmatch, test, test2, text, unicodeLookup, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		b = this;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		defadv = _tmp;
		test = _tmp$1;
		test2 = _tmp$2;
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		match = _tmp$3;
		startmatch = _tmp$4;
		endmatch = _tmp$5;
		_tmp$6 = 0;
		_tmp$7 = 0;
		bump = _tmp$6;
		advance = _tmp$7;
		chTest = 0;
		unicodeLookup = sliceType$4.nil;
		if (!b.rightToLeft) {
			defadv = b.pattern.$length;
			startmatch = b.pattern.$length - 1 >> 0;
			endmatch = 0;
			test = (index + defadv >> 0) - 1 >> 0;
			bump = 1;
		} else {
			defadv = -b.pattern.$length;
			startmatch = 0;
			endmatch = -defadv - 1 >> 0;
			test = index + defadv >> 0;
			bump = -1;
		}
		chMatch = (x = b.pattern, ((startmatch < 0 || startmatch >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + startmatch]));
		while (true) {
			if (test >= endlimit || test < beglimit) {
				return -1;
			}
			chTest = ((test < 0 || test >= text.$length) ? ($throwRuntimeError("index out of range"), undefined) : text.$array[text.$offset + test]);
			if (b.caseInsensitive) {
				chTest = unicode.ToLower(chTest);
			}
			if (!((chTest === chMatch))) {
				if (chTest < 128) {
					advance = (x$1 = b.negativeASCII, ((chTest < 0 || chTest >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + chTest]));
				} else if (chTest < 65535 && b.negativeUnicode.$length > 0) {
					unicodeLookup = (x$2 = b.negativeUnicode, x$3 = chTest >> 8 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
					if (unicodeLookup.$length > 0) {
						advance = (x$4 = chTest & 255, ((x$4 < 0 || x$4 >= unicodeLookup.$length) ? ($throwRuntimeError("index out of range"), undefined) : unicodeLookup.$array[unicodeLookup.$offset + x$4]));
					} else {
						advance = defadv;
					}
				} else {
					advance = defadv;
				}
				test = test + (advance) >> 0;
			} else {
				test2 = test;
				match = startmatch;
				while (true) {
					if (match === endmatch) {
						if (b.rightToLeft) {
							return test2 + 1 >> 0;
						} else {
							return test2;
						}
					}
					match = match - (bump) >> 0;
					test2 = test2 - (bump) >> 0;
					chTest = ((test2 < 0 || test2 >= text.$length) ? ($throwRuntimeError("index out of range"), undefined) : text.$array[text.$offset + test2]);
					if (b.caseInsensitive) {
						chTest = unicode.ToLower(chTest);
					}
					if (!((chTest === (x$5 = b.pattern, ((match < 0 || match >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + match]))))) {
						advance = (x$6 = b.positive, ((match < 0 || match >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + match]));
						if (chTest < 128) {
							test2 = ((match - startmatch >> 0)) + (x$7 = b.negativeASCII, ((chTest < 0 || chTest >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + chTest])) >> 0;
						} else if (chTest < 65535 && b.negativeUnicode.$length > 0) {
							unicodeLookup = (x$8 = b.negativeUnicode, x$9 = chTest >> 8 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9]));
							if (unicodeLookup.$length > 0) {
								test2 = ((match - startmatch >> 0)) + (x$10 = chTest & 255, ((x$10 < 0 || x$10 >= unicodeLookup.$length) ? ($throwRuntimeError("index out of range"), undefined) : unicodeLookup.$array[unicodeLookup.$offset + x$10])) >> 0;
							} else {
								test = test + (advance) >> 0;
								break;
							}
						} else {
							test = test + (advance) >> 0;
							break;
						}
						if (b.rightToLeft) {
							if (test2 < advance) {
								advance = test2;
							}
						} else if (test2 > advance) {
							advance = test2;
						}
						test = test + (advance) >> 0;
						break;
					}
				}
			}
		}
	};
	BmPrefix.prototype.Scan = function(text, index, beglimit, endlimit) { return this.$val.Scan(text, index, beglimit, endlimit); };
	BmPrefix.ptr.prototype.IsMatch = function(text, index, beglimit, endlimit) {
		var b, beglimit, endlimit, index, text;
		b = this;
		if (!b.rightToLeft) {
			if (index < beglimit || (endlimit - index >> 0) < b.pattern.$length) {
				return false;
			}
			return b.matchPattern(text, index);
		} else {
			if (index > endlimit || (index - beglimit >> 0) < b.pattern.$length) {
				return false;
			}
			return b.matchPattern(text, index - b.pattern.$length >> 0);
		}
	};
	BmPrefix.prototype.IsMatch = function(text, index, beglimit, endlimit) { return this.$val.IsMatch(text, index, beglimit, endlimit); };
	BmPrefix.ptr.prototype.matchPattern = function(text, index) {
		var b, i, i$1, index, text, x, x$1, x$2, x$3;
		b = this;
		if ((text.$length - index >> 0) < b.pattern.$length) {
			return false;
		}
		if (b.caseInsensitive) {
			i = 0;
			while (true) {
				if (!(i < b.pattern.$length)) { break; }
				if (!((unicode.ToLower((x = index + i >> 0, ((x < 0 || x >= text.$length) ? ($throwRuntimeError("index out of range"), undefined) : text.$array[text.$offset + x]))) === (x$1 = b.pattern, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]))))) {
					return false;
				}
				i = i + (1) >> 0;
			}
			return true;
		} else {
			i$1 = 0;
			while (true) {
				if (!(i$1 < b.pattern.$length)) { break; }
				if (!(((x$2 = index + i$1 >> 0, ((x$2 < 0 || x$2 >= text.$length) ? ($throwRuntimeError("index out of range"), undefined) : text.$array[text.$offset + x$2])) === (x$3 = b.pattern, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1]))))) {
					return false;
				}
				i$1 = i$1 + (1) >> 0;
			}
			return true;
		}
	};
	BmPrefix.prototype.matchPattern = function(text, index) { return this.$val.matchPattern(text, index); };
	getAnchors = function(tree) {
		var _1, _tmp, _tmp$1, concatNode, curNode, nextChild, result, tree, x, x$1;
		concatNode = ptrType$2.nil;
		_tmp = 0;
		_tmp$1 = 0;
		nextChild = _tmp;
		result = _tmp$1;
		curNode = tree.root;
		while (true) {
			_1 = curNode.t;
			if (_1 === (25)) {
				if (curNode.children.$length > 0) {
					concatNode = curNode;
					nextChild = 0;
				}
			} else if ((_1 === (32)) || (_1 === (28))) {
				curNode = (x = curNode.children, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
				concatNode = ptrType$2.nil;
				continue;
			} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (41)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21))) {
				return result | anchorFromType(curNode.t);
			} else if ((_1 === (23)) || (_1 === (30)) || (_1 === (31))) {
			} else {
				return result;
			}
			if (concatNode === ptrType$2.nil || nextChild >= concatNode.children.$length) {
				return result;
			}
			curNode = (x$1 = concatNode.children, ((nextChild < 0 || nextChild >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + nextChild]));
			nextChild = nextChild + (1) >> 0;
		}
	};
	anchorFromType = function(t) {
		var _1, t;
		_1 = t;
		if (_1 === (14)) {
			return 2;
		} else if (_1 === (15)) {
			return 8;
		} else if (_1 === (16)) {
			return 64;
		} else if (_1 === (41)) {
			return 128;
		} else if (_1 === (18)) {
			return 1;
		} else if (_1 === (19)) {
			return 4;
		} else if (_1 === (20)) {
			return 16;
		} else if (_1 === (21)) {
			return 32;
		} else {
			return 0;
		}
	};
	AnchorLoc.prototype.String = function() {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, anchors, buf, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		anchors = this.$val;
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		/* */ if (!((0 === ((anchors & 1))))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((0 === ((anchors & 1))))) { */ case 1:
			_r = buf.WriteString(", Beginning"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		/* */ if (!((0 === ((anchors & 4))))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((0 === ((anchors & 4))))) { */ case 4:
			_r$1 = buf.WriteString(", Start"); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 5:
		/* */ if (!((0 === ((anchors & 2))))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!((0 === ((anchors & 2))))) { */ case 7:
			_r$2 = buf.WriteString(", Bol"); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 8:
		/* */ if (!((0 === ((anchors & 64))))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!((0 === ((anchors & 64))))) { */ case 10:
			_r$3 = buf.WriteString(", Boundary"); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 11:
		/* */ if (!((0 === ((anchors & 128))))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((0 === ((anchors & 128))))) { */ case 13:
			_r$4 = buf.WriteString(", ECMABoundary"); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 14:
		/* */ if (!((0 === ((anchors & 8))))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!((0 === ((anchors & 8))))) { */ case 16:
			_r$5 = buf.WriteString(", Eol"); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 17:
		/* */ if (!((0 === ((anchors & 32))))) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (!((0 === ((anchors & 32))))) { */ case 19:
			_r$6 = buf.WriteString(", End"); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 20:
		/* */ if (!((0 === ((anchors & 16))))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!((0 === ((anchors & 16))))) { */ case 22:
			_r$7 = buf.WriteString(", EndZ"); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 23:
		if (buf.Len() >= 2) {
			$s = -1; return $substring(buf.String(), 2);
		}
		$s = -1; return "None";
		/* */ } return; } var $f = {$blk: AnchorLoc.prototype.String, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, anchors, buf, $s};return $f;
	};
	$ptrType(AnchorLoc).prototype.String = function() { return new AnchorLoc(this.$get()).String(); };
	optionFromCode = function(ch) {
		var _1, ch;
		_1 = ch;
		if ((_1 === (105)) || (_1 === (73))) {
			return 1;
		} else if ((_1 === (114)) || (_1 === (82))) {
			return 64;
		} else if ((_1 === (109)) || (_1 === (77))) {
			return 2;
		} else if ((_1 === (110)) || (_1 === (78))) {
			return 4;
		} else if ((_1 === (115)) || (_1 === (83))) {
			return 16;
		} else if ((_1 === (120)) || (_1 === (88))) {
			return 32;
		} else if ((_1 === (100)) || (_1 === (68))) {
			return 128;
		} else if ((_1 === (101)) || (_1 === (69))) {
			return 256;
		} else if ((_1 === (117)) || (_1 === (85))) {
			return 1024;
		} else {
			return 0;
		}
	};
	Error.ptr.prototype.Error = function() {
		var {$24r, _r, e, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		e = this;
		if (e.Args.$length === 0) {
			$s = -1; return "error parsing regexp: " + new ErrorCode(e.Code).String() + " in `" + e.Expr + "`";
		}
		_r = fmt.Sprintf(new ErrorCode(e.Code).String(), e.Args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = "error parsing regexp: " + _r + " in `" + e.Expr + "`";
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Error.ptr.prototype.Error, $c: true, $r, $24r, _r, e, $s};return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	ErrorCode.prototype.String = function() {
		var e;
		e = this.$val;
		return (e);
	};
	$ptrType(ErrorCode).prototype.String = function() { return new ErrorCode(this.$get()).String(); };
	Parse = function(re, op) {
		var {_r, _r$1, _r$2, _r$3, _tuple, err, err$1, op, p, re, root, tree, $s, $r, $c} = $restore(this, {re, op});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = new parser.ptr(ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, ptrType$2.nil, "", sliceType$2.nil, 0, ptrType$5.nil, 0, 0, 0, 0, new $global.Map(), false, sliceType$4.nil, sliceType.nil, op, sliceType$11.nil, false);
		p.setPattern(re);
		_r = p.countCaptures(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$8.nil, err];
		}
		p.reset(op);
		_r$1 = p.scanRegex(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		root = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$8.nil, err$1];
		}
		tree = new RegexTree.ptr(root, p.caps, p.capnumlist, p.captop, p.capnames, p.capnamelist, op);
		/* */ if ((tree.options & 128) > 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ((tree.options & 128) > 0) { */ case 3:
			_r$2 = tree.Dump(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = os.Stdout.WriteString(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 4:
		$s = -1; return [tree, $ifaceNil];
		/* */ } return; } var $f = {$blk: Parse, $c: true, $r, _r, _r$1, _r$2, _r$3, _tuple, err, err$1, op, p, re, root, tree, $s};return $f;
	};
	$pkg.Parse = Parse;
	parser.ptr.prototype.setPattern = function(pattern) {
		var _i, _ref, _rune, p, pattern, r;
		p = this;
		p.patternRaw = pattern;
		p.pattern = $makeSlice(sliceType$2, 0, pattern.length);
		_ref = pattern;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			p.pattern = $append(p.pattern, r);
			_i += _rune[1];
		}
	};
	parser.prototype.setPattern = function(pattern) { return this.$val.setPattern(pattern); };
	parser.ptr.prototype.getErr = function(code, args) {
		var args, code, p;
		p = this;
		return new Error.ptr(code, p.patternRaw, args);
	};
	parser.prototype.getErr = function(code, args) { return this.$val.getErr(code, args); };
	parser.ptr.prototype.noteCaptureSlot = function(i, pos) {
		var _entry, _key, _tuple, i, ok, p, pos;
		p = this;
		_tuple = (_entry = $mapIndex(p.caps,$Int.keyFor(i)), _entry !== undefined ? [_entry.v, true] : [0, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = i; (p.caps || $throwRuntimeError("assignment to entry in nil map")).set($Int.keyFor(_key), { k: _key, v: pos });
			p.capcount = p.capcount + (1) >> 0;
			if (p.captop <= i) {
				if (i === 2147483647) {
					p.captop = i;
				} else {
					p.captop = i + 1 >> 0;
				}
			}
		}
	};
	parser.prototype.noteCaptureSlot = function(i, pos) { return this.$val.noteCaptureSlot(i, pos); };
	parser.ptr.prototype.noteCaptureName = function(name, pos) {
		var _entry, _key, _tuple, name, ok, p, pos;
		p = this;
		if (p.capnames === false) {
			p.capnames = new $global.Map();
		}
		_tuple = (_entry = $mapIndex(p.capnames,$String.keyFor(name)), _entry !== undefined ? [_entry.v, true] : [0, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = name; (p.capnames || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: pos });
			p.capnamelist = $append(p.capnamelist, name);
		}
	};
	parser.prototype.noteCaptureName = function(name, pos) { return this.$val.noteCaptureName(name, pos); };
	parser.ptr.prototype.assignNameSlots = function() {
		var {_entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _keys, _ref, _ref$1, _size, i, i$1, j, k, k$1, name, next, oldcapnamelist, p, pos, str, x, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(p.capnames === false)) {
			_ref = p.capnamelist;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				name = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				while (true) {
					if (!(p.isCaptureSlot(p.autocap))) { break; }
					p.autocap = p.autocap + (1) >> 0;
				}
				pos = (_entry = $mapIndex(p.capnames,$String.keyFor(name)), _entry !== undefined ? _entry.v : 0);
				_key = name; (p.capnames || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: p.autocap });
				p.noteCaptureSlot(p.autocap, pos);
				p.autocap = p.autocap + (1) >> 0;
				_i++;
			}
		}
		/* */ if (p.capcount < p.captop) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.capcount < p.captop) { */ case 1:
			p.capnumlist = $makeSlice(sliceType$4, p.capcount);
			i = 0;
			_ref$1 = p.caps;
			_i$1 = 0;
			_keys = _ref$1 ? _ref$1.keys() : undefined;
			_size = _ref$1 ? _ref$1.size : 0;
			while (true) {
				if (!(_i$1 < _size)) { break; }
				_key$1 = _keys.next().value;
				_entry$1 = _ref$1.get(_key$1);
				if (_entry$1 === undefined) {
					_i$1++;
					continue;
				}
				k = _entry$1.k;
				(x = p.capnumlist, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = k));
				i = i + (1) >> 0;
				_i$1++;
			}
			$r = sort.Ints(p.capnumlist); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!(p.capnames === false) || !(p.capnumlist === sliceType$4.nil)) {
			oldcapnamelist = sliceType.nil;
			next = 0;
			k$1 = 0;
			if (p.capnames === false) {
				oldcapnamelist = sliceType.nil;
				p.capnames = new $global.Map();
				p.capnamelist = new sliceType([]);
				next = -1;
			} else {
				oldcapnamelist = p.capnamelist;
				p.capnamelist = new sliceType([]);
				next = (_entry$2 = $mapIndex(p.capnames,$String.keyFor((0 >= oldcapnamelist.$length ? ($throwRuntimeError("index out of range"), undefined) : oldcapnamelist.$array[oldcapnamelist.$offset + 0]))), _entry$2 !== undefined ? _entry$2.v : 0);
			}
			i$1 = 0;
			while (true) {
				if (!(i$1 < p.capcount)) { break; }
				j = i$1;
				if (!(p.capnumlist === sliceType$4.nil)) {
					j = (x$1 = p.capnumlist, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1]));
				}
				if (next === j) {
					p.capnamelist = $append(p.capnamelist, ((k$1 < 0 || k$1 >= oldcapnamelist.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldcapnamelist.$array[oldcapnamelist.$offset + k$1]));
					k$1 = k$1 + (1) >> 0;
					if (k$1 === oldcapnamelist.$length) {
						next = -1;
					} else {
						next = (_entry$3 = $mapIndex(p.capnames,$String.keyFor(((k$1 < 0 || k$1 >= oldcapnamelist.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldcapnamelist.$array[oldcapnamelist.$offset + k$1]))), _entry$3 !== undefined ? _entry$3.v : 0);
					}
				} else {
					str = strconv.Itoa(j);
					p.capnamelist = $append(p.capnamelist, str);
					_key$2 = str; (p.capnames || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$2), { k: _key$2, v: j });
				}
				i$1 = i$1 + (1) >> 0;
			}
		}
		$s = -1; return;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.assignNameSlots, $c: true, $r, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _keys, _ref, _ref$1, _size, i, i$1, j, k, k$1, name, next, oldcapnamelist, p, pos, str, x, x$1, $s};return $f;
	};
	parser.prototype.assignNameSlots = function() { return this.$val.assignNameSlots(); };
	parser.ptr.prototype.consumeAutocap = function() {
		var p, r;
		p = this;
		r = p.autocap;
		p.autocap = p.autocap + (1) >> 0;
		return r;
	};
	parser.prototype.consumeAutocap = function() { return this.$val.consumeAutocap(); };
	parser.ptr.prototype.countCaptures = function() {
		var {_1, _r, _r$1, _tuple, ch, dec, err, p, pos, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		ch = 0;
		p.noteCaptureSlot(0, 0);
		p.autocap = 1;
		/* while (true) { */ case 1:
			/* if (!(p.charsRight() > 0)) { break; } */ if(!(p.charsRight() > 0)) { $s = 2; continue; }
			pos = p.textpos();
			ch = p.moveRightGetChar();
				_1 = ch;
				/* */ if (_1 === (92)) { $s = 4; continue; }
				/* */ if (_1 === (35)) { $s = 5; continue; }
				/* */ if (_1 === (91)) { $s = 6; continue; }
				/* */ if (_1 === (41)) { $s = 7; continue; }
				/* */ if (_1 === (40)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_1 === (92)) { */ case 4:
					/* */ if (p.charsRight() > 0) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (p.charsRight() > 0) { */ case 10:
						_r = p.scanBackslash(true); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_r;
					/* } */ case 11:
					$s = 9; continue;
				/* } else if (_1 === (35)) { */ case 5:
					if (p.useOptionX()) {
						p.moveLeft();
						p.scanBlank();
					}
					$s = 9; continue;
				/* } else if (_1 === (91)) { */ case 6:
					_r$1 = p.scanCharSet(false, true); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					$s = 9; continue;
				/* } else if (_1 === (41)) { */ case 7:
					if (!p.emptyOptionsStack()) {
						p.popOptions();
					}
					$s = 9; continue;
				/* } else if (_1 === (40)) { */ case 8:
					if (p.charsRight() >= 2 && (p.rightChar(1) === 35) && (p.rightChar(0) === 63)) {
						p.moveLeft();
						p.scanBlank();
					} else {
						p.pushOptions();
						if (p.charsRight() > 0 && (p.rightChar(0) === 63)) {
							p.moveRight(1);
							if (p.charsRight() > 1 && ((p.rightChar(0) === 60) || (p.rightChar(0) === 39))) {
								p.moveRight(1);
								ch = p.rightChar(0);
								if (!((ch === 48)) && IsWordChar(ch)) {
									if (ch >= 49 && ch <= 57) {
										_tuple = p.scanDecimal();
										dec = _tuple[0];
										err = _tuple[1];
										if (!($interfaceIsEqual(err, $ifaceNil))) {
											$s = -1; return err;
										}
										p.noteCaptureSlot(dec, pos);
									} else {
										p.noteCaptureName(p.scanCapname(), pos);
									}
								}
							} else if (p.useRE2() && p.charsRight() > 2 && ((p.rightChar(0) === 80) && (p.rightChar(1) === 60))) {
								p.moveRight(2);
								ch = p.rightChar(0);
								if (IsWordChar(ch)) {
									p.noteCaptureName(p.scanCapname(), pos);
								}
							} else {
								p.scanOptions();
								if (p.charsRight() > 0) {
									if (p.rightChar(0) === 41) {
										p.moveRight(1);
										p.popKeepOptions();
									} else if (p.rightChar(0) === 40) {
										p.ignoreNextParen = true;
										/* continue; */ $s = 1; continue;
									}
								}
							}
						} else {
							if (!p.useOptionN() && !p.ignoreNextParen) {
								p.noteCaptureSlot(p.consumeAutocap(), pos);
							}
						}
					}
					p.ignoreNextParen = false;
				/* } */ case 9:
			case 3:
		$s = 1; continue;
		case 2:
		$r = p.assignNameSlots(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.countCaptures, $c: true, $r, _1, _r, _r$1, _tuple, ch, dec, err, p, pos, $s};return $f;
	};
	parser.prototype.countCaptures = function() { return this.$val.countCaptures(); };
	parser.ptr.prototype.reset = function(topopts) {
		var p, topopts;
		p = this;
		p.currentPos = 0;
		p.autocap = 1;
		p.ignoreNextParen = false;
		if (p.optionsStack.$length > 0) {
			p.optionsStack = $subslice(p.optionsStack, 0, 0);
		}
		p.options = topopts;
		p.stack = ptrType$2.nil;
	};
	parser.prototype.reset = function(topopts) { return this.$val.reset(topopts); };
	parser.ptr.prototype.scanRegex = function() {
		var {_1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, cc, cchUnquantified, ch, endpos, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, grouper, isQuant, lazy, max, min, n, p, startpos, wasPrevQuantifier, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		ch = 64;
		isQuant = false;
		p.startGroup(newRegexNodeMN(28, p.options, 0, -1));
		/* while (true) { */ case 1:
			/* if (!(p.charsRight() > 0)) { break; } */ if(!(p.charsRight() > 0)) { $s = 2; continue; }
			wasPrevQuantifier = isQuant;
			isQuant = false;
			err = p.scanBlank();
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$2.nil, err];
			}
			startpos = p.textpos();
			if (p.useOptionX()) {
				while (true) {
					if (!(p.charsRight() > 0)) { break; }
					ch = p.rightChar(0);
					if (!(!isStopperX(ch) || ((ch === 123) && !p.isTrueQuantifier()))) {
						break;
					}
					p.moveRight(1);
				}
			} else {
				while (true) {
					if (!(p.charsRight() > 0)) { break; }
					ch = p.rightChar(0);
					if (!(!isSpecial(ch) || (ch === 123) && !p.isTrueQuantifier())) {
						break;
					}
					p.moveRight(1);
				}
			}
			endpos = p.textpos();
			p.scanBlank();
			if (p.charsRight() === 0) {
				ch = 33;
			} else {
				ch = p.rightChar(0);
				if (isSpecial(ch)) {
					isQuant = isQuantifier(ch);
					p.moveRight(1);
				} else {
					ch = 32;
				}
			}
			/* */ if (startpos < endpos) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (startpos < endpos) { */ case 3:
				cchUnquantified = endpos - startpos >> 0;
				if (isQuant) {
					cchUnquantified = cchUnquantified - (1) >> 0;
				}
				wasPrevQuantifier = false;
				/* */ if (cchUnquantified > 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (cchUnquantified > 0) { */ case 5:
					$r = p.addToConcatenate(startpos, cchUnquantified, false); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				if (isQuant) {
					p.addUnitOne(p.charAt(endpos - 1 >> 0));
				}
			/* } */ case 4:
				_1 = ch;
				/* */ if (_1 === (33)) { $s = 9; continue; }
				/* */ if (_1 === (32)) { $s = 10; continue; }
				/* */ if (_1 === (91)) { $s = 11; continue; }
				/* */ if (_1 === (40)) { $s = 12; continue; }
				/* */ if (_1 === (124)) { $s = 13; continue; }
				/* */ if (_1 === (41)) { $s = 14; continue; }
				/* */ if (_1 === (92)) { $s = 15; continue; }
				/* */ if (_1 === (94)) { $s = 16; continue; }
				/* */ if (_1 === (36)) { $s = 17; continue; }
				/* */ if (_1 === (46)) { $s = 18; continue; }
				/* */ if ((_1 === (123)) || (_1 === (42)) || (_1 === (43)) || (_1 === (63))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (_1 === (33)) { */ case 9:
					/* goto BreakOuterScan */ $s = 22; continue;
					$s = 21; continue;
				/* } else if (_1 === (32)) { */ case 10:
					/* goto ContinueOuterScan */ $s = 23; continue;
					$s = 21; continue;
				/* } else if (_1 === (91)) { */ case 11:
					_r = p.scanCharSet(p.useOptionI(), false); /* */ $s = 24; case 24: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tuple = _r;
					cc = _tuple[0];
					err$1 = _tuple[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [ptrType$2.nil, err$1];
					}
					p.addUnitSet(cc);
					$s = 21; continue;
				/* } else if (_1 === (40)) { */ case 12:
					p.pushOptions();
					_tuple$1 = p.scanGroupOpen();
					grouper = _tuple$1[0];
					err$2 = _tuple$1[1];
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						$s = -1; return [ptrType$2.nil, err$2];
					} else if (grouper === ptrType$2.nil) {
						p.popKeepOptions();
					} else {
						p.pushGroup();
						p.startGroup(grouper);
					}
					/* continue; */ $s = 1; continue;
					$s = 21; continue;
				/* } else if (_1 === (124)) { */ case 13:
					$r = p.addAlternate(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* goto ContinueOuterScan */ $s = 23; continue;
					$s = 21; continue;
				/* } else if (_1 === (41)) { */ case 14:
					if (p.emptyStack()) {
						$s = -1; return [ptrType$2.nil, p.getErr("unexpected )", sliceType$7.nil)];
					}
					_r$1 = p.addGroup(); /* */ $s = 26; case 26: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err$3 = _r$1;
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						$s = -1; return [ptrType$2.nil, err$3];
					}
					_r$2 = p.popGroup(); /* */ $s = 27; case 27: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					err$4 = _r$2;
					if (!($interfaceIsEqual(err$4, $ifaceNil))) {
						$s = -1; return [ptrType$2.nil, err$4];
					}
					p.popOptions();
					/* */ if (p.unit === ptrType$2.nil) { $s = 28; continue; }
					/* */ $s = 29; continue;
					/* if (p.unit === ptrType$2.nil) { */ case 28:
						/* goto ContinueOuterScan */ $s = 23; continue;
					/* } */ case 29:
					$s = 21; continue;
				/* } else if (_1 === (92)) { */ case 15:
					_r$3 = p.scanBackslash(false); /* */ $s = 30; case 30: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$2 = _r$3;
					n = _tuple$2[0];
					err$5 = _tuple$2[1];
					if (!($interfaceIsEqual(err$5, $ifaceNil))) {
						$s = -1; return [ptrType$2.nil, err$5];
					}
					p.addUnitNode(n);
					$s = 21; continue;
				/* } else if (_1 === (94)) { */ case 16:
					if (p.useOptionM()) {
						p.addUnitType(14);
					} else {
						p.addUnitType(18);
					}
					$s = 21; continue;
				/* } else if (_1 === (36)) { */ case 17:
					if (p.useOptionM()) {
						p.addUnitType(15);
					} else {
						p.addUnitType(20);
					}
					$s = 21; continue;
				/* } else if (_1 === (46)) { */ case 18:
					/* */ if (p.useOptionS()) { $s = 31; continue; }
					/* */ if (p.useOptionE()) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (p.useOptionS()) { */ case 31:
						_r$4 = $pkg.AnyClass(); /* */ $s = 35; case 35: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						$r = p.addUnitSet(_r$4); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 34; continue;
					/* } else if (p.useOptionE()) { */ case 32:
						_r$5 = $pkg.ECMAAnyClass(); /* */ $s = 37; case 37: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						$r = p.addUnitSet(_r$5); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 34; continue;
					/* } else { */ case 33:
						p.addUnitNotone(10);
					/* } */ case 34:
					$s = 21; continue;
				/* } else if ((_1 === (123)) || (_1 === (42)) || (_1 === (43)) || (_1 === (63))) { */ case 19:
					if (p.unit === ptrType$2.nil) {
						if (wasPrevQuantifier) {
							$s = -1; return [ptrType$2.nil, p.getErr("invalid nested repetition operator", sliceType$7.nil)];
						} else {
							$s = -1; return [ptrType$2.nil, p.getErr("missing argument to repetition operator", sliceType$7.nil)];
						}
					}
					p.moveLeft();
					$s = 21; continue;
				/* } else { */ case 20:
					$s = -1; return [ptrType$2.nil, p.getErr("regexp/syntax: internal error", sliceType$7.nil)];
				/* } */ case 21:
			case 8:
			err$6 = p.scanBlank();
			if (!($interfaceIsEqual(err$6, $ifaceNil))) {
				$s = -1; return [ptrType$2.nil, err$6];
			}
			if (p.charsRight() > 0) {
				isQuant = p.isTrueQuantifier();
			}
			/* */ if ((p.charsRight() === 0) || !isQuant) { $s = 39; continue; }
			/* */ $s = 40; continue;
			/* if ((p.charsRight() === 0) || !isQuant) { */ case 39:
				$r = p.addConcatenate(); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto ContinueOuterScan */ $s = 23; continue;
			/* } */ case 40:
			ch = p.moveRightGetChar();
			/* while (true) { */ case 42:
				/* if (!(!(p.unit === ptrType$2.nil))) { break; } */ if(!(!(p.unit === ptrType$2.nil))) { $s = 43; continue; }
				_tmp = 0;
				_tmp$1 = 0;
				min = _tmp;
				max = _tmp$1;
				lazy = false;
					_2 = ch;
					/* */ if (_2 === (42)) { $s = 45; continue; }
					/* */ if (_2 === (63)) { $s = 46; continue; }
					/* */ if (_2 === (43)) { $s = 47; continue; }
					/* */ if (_2 === (123)) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if (_2 === (42)) { */ case 45:
						min = 0;
						max = 2147483647;
						$s = 50; continue;
					/* } else if (_2 === (63)) { */ case 46:
						min = 0;
						max = 1;
						$s = 50; continue;
					/* } else if (_2 === (43)) { */ case 47:
						min = 1;
						max = 2147483647;
						$s = 50; continue;
					/* } else if (_2 === (123)) { */ case 48:
						err$7 = $ifaceNil;
						startpos = p.textpos();
						_tuple$3 = p.scanDecimal();
						min = _tuple$3[0];
						err$7 = _tuple$3[1];
						if (!($interfaceIsEqual(err$7, $ifaceNil))) {
							$s = -1; return [ptrType$2.nil, err$7];
						}
						max = min;
						if (startpos < p.textpos()) {
							if (p.charsRight() > 0 && (p.rightChar(0) === 44)) {
								p.moveRight(1);
								if ((p.charsRight() === 0) || (p.rightChar(0) === 125)) {
									max = 2147483647;
								} else {
									_tuple$4 = p.scanDecimal();
									max = _tuple$4[0];
									err$7 = _tuple$4[1];
									if (!($interfaceIsEqual(err$7, $ifaceNil))) {
										$s = -1; return [ptrType$2.nil, err$7];
									}
								}
							}
						}
						/* */ if ((startpos === p.textpos()) || (p.charsRight() === 0) || !((p.moveRightGetChar() === 125))) { $s = 51; continue; }
						/* */ $s = 52; continue;
						/* if ((startpos === p.textpos()) || (p.charsRight() === 0) || !((p.moveRightGetChar() === 125))) { */ case 51:
							$r = p.addConcatenate(); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							p.textto(startpos - 1 >> 0);
							/* goto ContinueOuterScan */ $s = 23; continue;
						/* } */ case 52:
						$s = 50; continue;
					/* } else { */ case 49:
						$s = -1; return [ptrType$2.nil, p.getErr("regexp/syntax: internal error", sliceType$7.nil)];
					/* } */ case 50:
				case 44:
				err$8 = p.scanBlank();
				if (!($interfaceIsEqual(err$8, $ifaceNil))) {
					$s = -1; return [ptrType$2.nil, err$8];
				}
				if ((p.charsRight() === 0) || !((p.rightChar(0) === 63))) {
					lazy = false;
				} else {
					p.moveRight(1);
					lazy = true;
				}
				if (min > max) {
					$s = -1; return [ptrType$2.nil, p.getErr("invalid repeat count", sliceType$7.nil)];
				}
				$r = p.addConcatenate3(lazy, min, max); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 42; continue;
			case 43:
			/* ContinueOuterScan: */ case 23:
		$s = 1; continue;
		case 2:
		/* BreakOuterScan: */ case 22:
		if (!p.emptyStack()) {
			$s = -1; return [ptrType$2.nil, p.getErr("missing closing )", sliceType$7.nil)];
		}
		_r$6 = p.addGroup(); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err$9 = _r$6;
		if (!($interfaceIsEqual(err$9, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, err$9];
		}
		$s = -1; return [p.unit, $ifaceNil];
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.scanRegex, $c: true, $r, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, cc, cchUnquantified, ch, endpos, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, grouper, isQuant, lazy, max, min, n, p, startpos, wasPrevQuantifier, $s};return $f;
	};
	parser.prototype.scanRegex = function() { return this.$val.scanRegex(); };
	parser.ptr.prototype.scanReplacement = function() {
		var {_tmp, _tmp$1, _tuple, c, err, n, p, startpos, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		_tmp = 0;
		_tmp$1 = 0;
		c = _tmp;
		startpos = _tmp$1;
		p.concatenation = newRegexNode(25, p.options);
		/* while (true) { */ case 1:
			c = p.charsRight();
			if (c === 0) {
				/* break; */ $s = 2; continue;
			}
			startpos = p.textpos();
			while (true) {
				if (!(c > 0 && !((p.rightChar(0) === 36)))) { break; }
				p.moveRight(1);
				c = c - (1) >> 0;
			}
			$r = p.addToConcatenate(startpos, p.textpos() - startpos >> 0, true); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (c > 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (c > 0) { */ case 4:
				if (p.moveRightGetChar() === 36) {
					_tuple = p.scanDollar();
					n = _tuple[0];
					err = _tuple[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return [ptrType$2.nil, err];
					}
					p.addUnitNode(n);
				}
				$r = p.addConcatenate(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		$s = 1; continue;
		case 2:
		$s = -1; return [p.concatenation, $ifaceNil];
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.scanReplacement, $c: true, $r, _tmp, _tmp$1, _tuple, c, err, n, p, startpos, $s};return $f;
	};
	parser.prototype.scanReplacement = function() { return this.$val.scanReplacement(); };
	parser.ptr.prototype.scanDollar = function() {
		var _1, _tuple, angled, backpos, capname, capnum, capnum$1, capnum$2, ch, digit, err, lastEndPos, newcapnum, p;
		p = this;
		if (p.charsRight() === 0) {
			return [newRegexNodeCh(9, p.options, 36), $ifaceNil];
		}
		ch = p.rightChar(0);
		angled = false;
		backpos = p.textpos();
		lastEndPos = backpos;
		if ((ch === 123) && p.charsRight() > 1) {
			angled = true;
			p.moveRight(1);
			ch = p.rightChar(0);
		}
		if (ch >= 48 && ch <= 57) {
			if (!angled && p.useOptionE()) {
				capnum = -1;
				newcapnum = (((ch - 48 >> 0) >> 0));
				p.moveRight(1);
				if (p.isCaptureSlot(newcapnum)) {
					capnum = newcapnum;
					lastEndPos = p.textpos();
				}
				while (true) {
					if (!(p.charsRight() > 0)) { break; }
					ch = p.rightChar(0);
					if (ch < 48 || ch > 57) {
						break;
					}
					digit = (((ch - 48 >> 0) >> 0));
					if (newcapnum > 214748364 || ((newcapnum === 214748364) && digit > 7)) {
						return [ptrType$2.nil, p.getErr("capture group number out of range", sliceType$7.nil)];
					}
					newcapnum = ($imul(newcapnum, 10)) + digit >> 0;
					p.moveRight(1);
					if (p.isCaptureSlot(newcapnum)) {
						capnum = newcapnum;
						lastEndPos = p.textpos();
					}
				}
				p.textto(lastEndPos);
				if (capnum >= 0) {
					return [newRegexNodeM(13, p.options, capnum), $ifaceNil];
				}
			} else {
				_tuple = p.scanDecimal();
				capnum$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [ptrType$2.nil, err];
				}
				if (!angled || p.charsRight() > 0 && (p.moveRightGetChar() === 125)) {
					if (p.isCaptureSlot(capnum$1)) {
						return [newRegexNodeM(13, p.options, capnum$1), $ifaceNil];
					}
				}
			}
		} else if (angled && IsWordChar(ch)) {
			capname = p.scanCapname();
			if (p.charsRight() > 0 && (p.moveRightGetChar() === 125)) {
				if (p.isCaptureName(capname)) {
					return [newRegexNodeM(13, p.options, p.captureSlotFromName(capname)), $ifaceNil];
				}
			}
		} else if (!angled) {
			capnum$2 = 1;
			_1 = ch;
			if (_1 === (36)) {
				p.moveRight(1);
				return [newRegexNodeCh(9, p.options, 36), $ifaceNil];
			} else if (_1 === (38)) {
				capnum$2 = 0;
			} else if (_1 === (96)) {
				capnum$2 = -1;
			} else if (_1 === (39)) {
				capnum$2 = -2;
			} else if (_1 === (43)) {
				capnum$2 = -3;
			} else if (_1 === (95)) {
				capnum$2 = -4;
			}
			if (!((capnum$2 === 1))) {
				p.moveRight(1);
				return [newRegexNodeM(13, p.options, capnum$2), $ifaceNil];
			}
		}
		p.textto(backpos);
		return [newRegexNodeCh(9, p.options, 36), $ifaceNil];
	};
	parser.prototype.scanDollar = function() { return this.$val.scanDollar(); };
	parser.ptr.prototype.scanGroupOpen = function() {
		var _1, _2, _3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, capname, capname$1, capname$2, capnum, capnum$1, capnum$2, ch, charsRight, close, err, nt, p, parenPos, proceed, rightchar2, start, uncapname, uncapnum, $s;
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		ch = 0;
		nt = 0;
		err = $ifaceNil;
		close = 62;
		start = p.textpos();
		if ((p.charsRight() === 0) || !((p.rightChar(0) === 63)) || ((p.rightChar(0) === 63) && (p.charsRight() > 1 && (p.rightChar(1) === 41)))) {
			if (p.useOptionN() || p.ignoreNextParen) {
				p.ignoreNextParen = false;
				$s = -1; return [newRegexNode(29, p.options), $ifaceNil];
			}
			$s = -1; return [newRegexNodeMN(28, p.options, p.consumeAutocap(), -1), $ifaceNil];
		}
		p.moveRight(1);
		/* while (true) { */ case 1:
			if (p.charsRight() === 0) {
				/* break; */ $s = 2; continue;
			}
				ch = p.moveRightGetChar();
				_1 = ch;
				/* */ if (_1 === (58)) { $s = 4; continue; }
				/* */ if (_1 === (61)) { $s = 5; continue; }
				/* */ if (_1 === (33)) { $s = 6; continue; }
				/* */ if (_1 === (62)) { $s = 7; continue; }
				/* */ if (_1 === (39)) { $s = 8; continue; }
				/* */ if (_1 === (60)) { $s = 9; continue; }
				/* */ if (_1 === (40)) { $s = 10; continue; }
				/* */ if (_1 === (80)) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_1 === (58)) { */ case 4:
					nt = 29;
					$s = 13; continue;
				/* } else if (_1 === (61)) { */ case 5:
					p.options = p.options & (-65);
					nt = 30;
					$s = 13; continue;
				/* } else if (_1 === (33)) { */ case 6:
					p.options = p.options & (-65);
					nt = 31;
					$s = 13; continue;
				/* } else if (_1 === (62)) { */ case 7:
					nt = 32;
					$s = 13; continue;
				/* } else if (_1 === (39)) { */ case 8:
					close = 39;
					/* */ if (p.charsRight() === 0) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (p.charsRight() === 0) { */ case 14:
						/* goto BreakRecognize */ $s = 16; continue;
					/* } */ case 15:
						ch = p.moveRightGetChar();
						_2 = ch;
						/* */ if (_2 === (61)) { $s = 18; continue; }
						/* */ if (_2 === (33)) { $s = 19; continue; }
						/* */ $s = 20; continue;
						/* if (_2 === (61)) { */ case 18:
							/* */ if (close === 39) { $s = 22; continue; }
							/* */ $s = 23; continue;
							/* if (close === 39) { */ case 22:
								/* goto BreakRecognize */ $s = 16; continue;
							/* } */ case 23:
							p.options = p.options | (64);
							nt = 30;
							$s = 21; continue;
						/* } else if (_2 === (33)) { */ case 19:
							/* */ if (close === 39) { $s = 24; continue; }
							/* */ $s = 25; continue;
							/* if (close === 39) { */ case 24:
								/* goto BreakRecognize */ $s = 16; continue;
							/* } */ case 25:
							p.options = p.options | (64);
							nt = 31;
							$s = 21; continue;
						/* } else { */ case 20:
							p.moveLeft();
							capnum = -1;
							uncapnum = -1;
							proceed = false;
							if (ch >= 48 && ch <= 57) {
								_tuple = p.scanDecimal();
								capnum = _tuple[0];
								err = _tuple[1];
								if (!($interfaceIsEqual(err, $ifaceNil))) {
									$s = -1; return [ptrType$2.nil, err];
								}
								if (!p.isCaptureSlot(capnum)) {
									capnum = -1;
								}
								if (p.charsRight() > 0 && !((p.rightChar(0) === close) || (p.rightChar(0) === 45))) {
									$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
								}
								if (capnum === 0) {
									$s = -1; return [ptrType$2.nil, p.getErr("capture number cannot be zero", sliceType$7.nil)];
								}
							} else if (IsWordChar(ch)) {
								capname = p.scanCapname();
								if (p.isCaptureName(capname)) {
									capnum = p.captureSlotFromName(capname);
								}
								if (p.charsRight() > 0 && !((p.rightChar(0) === close) || (p.rightChar(0) === 45))) {
									$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
								}
							} else if (ch === 45) {
								proceed = true;
							} else {
								$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
							}
							if ((!((capnum === -1)) || proceed) && p.charsRight() > 0 && (p.rightChar(0) === 45)) {
								p.moveRight(1);
								if (p.charsRight() === 0) {
									$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
								}
								ch = p.rightChar(0);
								if (ch >= 48 && ch <= 57) {
									_tuple$1 = p.scanDecimal();
									uncapnum = _tuple$1[0];
									err = _tuple$1[1];
									if (!($interfaceIsEqual(err, $ifaceNil))) {
										$s = -1; return [ptrType$2.nil, err];
									}
									if (!p.isCaptureSlot(uncapnum)) {
										$s = -1; return [ptrType$2.nil, p.getErr("reference to undefined group number %v", new sliceType$7([new $Int(uncapnum)]))];
									}
									if (p.charsRight() > 0 && !((p.rightChar(0) === close))) {
										$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
									}
								} else if (IsWordChar(ch)) {
									uncapname = p.scanCapname();
									if (!p.isCaptureName(uncapname)) {
										$s = -1; return [ptrType$2.nil, p.getErr("reference to undefined group name %v", new sliceType$7([new $String(uncapname)]))];
									}
									uncapnum = p.captureSlotFromName(uncapname);
									if (p.charsRight() > 0 && !((p.rightChar(0) === close))) {
										$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
									}
								} else {
									$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
								}
							}
							if ((!((capnum === -1)) || !((uncapnum === -1))) && p.charsRight() > 0 && (p.moveRightGetChar() === close)) {
								$s = -1; return [newRegexNodeMN(28, p.options, capnum, uncapnum), $ifaceNil];
							}
							/* goto BreakRecognize */ $s = 16; continue;
						/* } */ case 21:
					case 17:
					$s = 13; continue;
				/* } else if (_1 === (60)) { */ case 9:
					/* */ if (p.charsRight() === 0) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (p.charsRight() === 0) { */ case 26:
						/* goto BreakRecognize */ $s = 16; continue;
					/* } */ case 27:
						ch = p.moveRightGetChar();
						_3 = ch;
						/* */ if (_3 === (61)) { $s = 29; continue; }
						/* */ if (_3 === (33)) { $s = 30; continue; }
						/* */ $s = 31; continue;
						/* if (_3 === (61)) { */ case 29:
							/* */ if (close === 39) { $s = 33; continue; }
							/* */ $s = 34; continue;
							/* if (close === 39) { */ case 33:
								/* goto BreakRecognize */ $s = 16; continue;
							/* } */ case 34:
							p.options = p.options | (64);
							nt = 30;
							$s = 32; continue;
						/* } else if (_3 === (33)) { */ case 30:
							/* */ if (close === 39) { $s = 35; continue; }
							/* */ $s = 36; continue;
							/* if (close === 39) { */ case 35:
								/* goto BreakRecognize */ $s = 16; continue;
							/* } */ case 36:
							p.options = p.options | (64);
							nt = 31;
							$s = 32; continue;
						/* } else { */ case 31:
							p.moveLeft();
							capnum = -1;
							uncapnum = -1;
							proceed = false;
							if (ch >= 48 && ch <= 57) {
								_tuple$2 = p.scanDecimal();
								capnum = _tuple$2[0];
								err = _tuple$2[1];
								if (!($interfaceIsEqual(err, $ifaceNil))) {
									$s = -1; return [ptrType$2.nil, err];
								}
								if (!p.isCaptureSlot(capnum)) {
									capnum = -1;
								}
								if (p.charsRight() > 0 && !((p.rightChar(0) === close) || (p.rightChar(0) === 45))) {
									$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
								}
								if (capnum === 0) {
									$s = -1; return [ptrType$2.nil, p.getErr("capture number cannot be zero", sliceType$7.nil)];
								}
							} else if (IsWordChar(ch)) {
								capname = p.scanCapname();
								if (p.isCaptureName(capname)) {
									capnum = p.captureSlotFromName(capname);
								}
								if (p.charsRight() > 0 && !((p.rightChar(0) === close) || (p.rightChar(0) === 45))) {
									$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
								}
							} else if (ch === 45) {
								proceed = true;
							} else {
								$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
							}
							if ((!((capnum === -1)) || proceed) && p.charsRight() > 0 && (p.rightChar(0) === 45)) {
								p.moveRight(1);
								if (p.charsRight() === 0) {
									$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
								}
								ch = p.rightChar(0);
								if (ch >= 48 && ch <= 57) {
									_tuple$3 = p.scanDecimal();
									uncapnum = _tuple$3[0];
									err = _tuple$3[1];
									if (!($interfaceIsEqual(err, $ifaceNil))) {
										$s = -1; return [ptrType$2.nil, err];
									}
									if (!p.isCaptureSlot(uncapnum)) {
										$s = -1; return [ptrType$2.nil, p.getErr("reference to undefined group number %v", new sliceType$7([new $Int(uncapnum)]))];
									}
									if (p.charsRight() > 0 && !((p.rightChar(0) === close))) {
										$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
									}
								} else if (IsWordChar(ch)) {
									uncapname = p.scanCapname();
									if (!p.isCaptureName(uncapname)) {
										$s = -1; return [ptrType$2.nil, p.getErr("reference to undefined group name %v", new sliceType$7([new $String(uncapname)]))];
									}
									uncapnum = p.captureSlotFromName(uncapname);
									if (p.charsRight() > 0 && !((p.rightChar(0) === close))) {
										$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
									}
								} else {
									$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
								}
							}
							if ((!((capnum === -1)) || !((uncapnum === -1))) && p.charsRight() > 0 && (p.moveRightGetChar() === close)) {
								$s = -1; return [newRegexNodeMN(28, p.options, capnum, uncapnum), $ifaceNil];
							}
							/* goto BreakRecognize */ $s = 16; continue;
						/* } */ case 32:
					case 28:
					$s = 13; continue;
				/* } else if (_1 === (40)) { */ case 10:
					parenPos = p.textpos();
					if (p.charsRight() > 0) {
						ch = p.rightChar(0);
						if (ch >= 48 && ch <= 57) {
							capnum$1 = 0;
							_tuple$4 = p.scanDecimal();
							capnum$1 = _tuple$4[0];
							err = _tuple$4[1];
							if (!($interfaceIsEqual(err, $ifaceNil))) {
								$s = -1; return [ptrType$2.nil, err];
							}
							if (p.charsRight() > 0 && (p.moveRightGetChar() === 41)) {
								if (p.isCaptureSlot(capnum$1)) {
									$s = -1; return [newRegexNodeM(33, p.options, capnum$1), $ifaceNil];
								}
								$s = -1; return [ptrType$2.nil, p.getErr("(?(%v) ) reference to undefined group", new sliceType$7([new $Int(capnum$1)]))];
							}
							$s = -1; return [ptrType$2.nil, p.getErr("(?(%v) ) malformed", new sliceType$7([new $Int(capnum$1)]))];
						} else if (IsWordChar(ch)) {
							capname$1 = p.scanCapname();
							if (p.isCaptureName(capname$1) && p.charsRight() > 0 && (p.moveRightGetChar() === 41)) {
								$s = -1; return [newRegexNodeM(33, p.options, p.captureSlotFromName(capname$1)), $ifaceNil];
							}
						}
					}
					nt = 34;
					p.textto(parenPos - 1 >> 0);
					p.ignoreNextParen = true;
					charsRight = p.charsRight();
					if (charsRight >= 3 && (p.rightChar(1) === 63)) {
						rightchar2 = p.rightChar(2);
						if (rightchar2 === 35) {
							$s = -1; return [ptrType$2.nil, p.getErr("alternation conditions cannot be comments", sliceType$7.nil)];
						}
						if (rightchar2 === 39) {
							$s = -1; return [ptrType$2.nil, p.getErr("alternation conditions do not capture and cannot be named", sliceType$7.nil)];
						}
						if (charsRight >= 4 && ((rightchar2 === 60) && !((p.rightChar(3) === 33)) && !((p.rightChar(3) === 61)))) {
							$s = -1; return [ptrType$2.nil, p.getErr("alternation conditions do not capture and cannot be named", sliceType$7.nil)];
						}
					}
					$s = 13; continue;
				/* } else if (_1 === (80)) { */ case 11:
					/* */ if (p.useRE2()) { $s = 37; continue; }
					/* */ $s = 38; continue;
					/* if (p.useRE2()) { */ case 37:
						/* */ if (p.charsRight() < 3) { $s = 39; continue; }
						/* */ $s = 40; continue;
						/* if (p.charsRight() < 3) { */ case 39:
							/* goto BreakRecognize */ $s = 16; continue;
						/* } */ case 40:
						ch = p.moveRightGetChar();
						/* */ if (!((ch === 60))) { $s = 41; continue; }
						/* */ $s = 42; continue;
						/* if (!((ch === 60))) { */ case 41:
							/* goto BreakRecognize */ $s = 16; continue;
						/* } */ case 42:
						ch = p.moveRightGetChar();
						p.moveLeft();
						/* */ if (IsWordChar(ch)) { $s = 43; continue; }
						/* */ $s = 44; continue;
						/* if (IsWordChar(ch)) { */ case 43:
							capnum$2 = -1;
							capname$2 = p.scanCapname();
							if (p.isCaptureName(capname$2)) {
								capnum$2 = p.captureSlotFromName(capname$2);
							}
							if (p.charsRight() > 0 && !((p.rightChar(0) === 62))) {
								$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
							}
							if (!((capnum$2 === -1)) && p.charsRight() > 0 && (p.moveRightGetChar() === 62)) {
								$s = -1; return [newRegexNodeMN(28, p.options, capnum$2, -1), $ifaceNil];
							}
							/* goto BreakRecognize */ $s = 16; continue;
							$s = 45; continue;
						/* } else { */ case 44:
							$s = -1; return [ptrType$2.nil, p.getErr("invalid group name: group names must begin with a word character and have a matching terminator", sliceType$7.nil)];
						/* } */ case 45:
					/* } */ case 38:
					p.moveLeft();
					nt = 29;
					if (!((p.group.t === 34))) {
						p.scanOptions();
					}
					/* */ if (p.charsRight() === 0) { $s = 46; continue; }
					/* */ $s = 47; continue;
					/* if (p.charsRight() === 0) { */ case 46:
						/* goto BreakRecognize */ $s = 16; continue;
					/* } */ case 47:
					ch = p.moveRightGetChar();
					if (ch === 41) {
						$s = -1; return [ptrType$2.nil, $ifaceNil];
					}
					/* */ if (!((ch === 58))) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if (!((ch === 58))) { */ case 48:
						/* goto BreakRecognize */ $s = 16; continue;
					/* } */ case 49:
					$s = 13; continue;
				/* } else { */ case 12:
					p.moveLeft();
					nt = 29;
					if (!((p.group.t === 34))) {
						p.scanOptions();
					}
					/* */ if (p.charsRight() === 0) { $s = 50; continue; }
					/* */ $s = 51; continue;
					/* if (p.charsRight() === 0) { */ case 50:
						/* goto BreakRecognize */ $s = 16; continue;
					/* } */ case 51:
					ch = p.moveRightGetChar();
					if (ch === 41) {
						$s = -1; return [ptrType$2.nil, $ifaceNil];
					}
					/* */ if (!((ch === 58))) { $s = 52; continue; }
					/* */ $s = 53; continue;
					/* if (!((ch === 58))) { */ case 52:
						/* goto BreakRecognize */ $s = 16; continue;
					/* } */ case 53:
				/* } */ case 13:
			case 3:
			$s = -1; return [newRegexNode(nt, p.options), $ifaceNil];
		case 2:
		/* BreakRecognize: */ case 16:
		$s = -1; return [ptrType$2.nil, p.getErr("unrecognized grouping construct: (%v", new sliceType$7([new $String(($runesToString($subslice(p.pattern, start, p.textpos()))))]))];
		/* */ } return; }
	};
	parser.prototype.scanGroupOpen = function() { return this.$val.scanGroupOpen(); };
	parser.ptr.prototype.scanBackslash = function(scanOnly) {
		var {$24r, $24r$1, $24r$10, $24r$11, $24r$12, $24r$13, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _1, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$16, _arg$17, _arg$18, _arg$19, _arg$2, _arg$20, _arg$21, _arg$22, _arg$23, _arg$24, _arg$25, _arg$26, _arg$27, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, cc, ch, err, p, prop, scanOnly, $s, $r, $c} = $restore(this, {scanOnly});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.charsRight() === 0) {
			$s = -1; return [ptrType$2.nil, p.getErr("illegal \\ at end of pattern", sliceType$7.nil)];
		}
			ch = p.rightChar(0);
			_1 = ch;
			/* */ if ((_1 === (98)) || (_1 === (66)) || (_1 === (65)) || (_1 === (71)) || (_1 === (90)) || (_1 === (122))) { $s = 2; continue; }
			/* */ if (_1 === (119)) { $s = 3; continue; }
			/* */ if (_1 === (87)) { $s = 4; continue; }
			/* */ if (_1 === (115)) { $s = 5; continue; }
			/* */ if (_1 === (83)) { $s = 6; continue; }
			/* */ if (_1 === (100)) { $s = 7; continue; }
			/* */ if (_1 === (68)) { $s = 8; continue; }
			/* */ if ((_1 === (112)) || (_1 === (80))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ((_1 === (98)) || (_1 === (66)) || (_1 === (65)) || (_1 === (71)) || (_1 === (90)) || (_1 === (122))) { */ case 2:
				p.moveRight(1);
				$s = -1; return [newRegexNode(p.typeFromCode(ch), p.options), $ifaceNil];
			/* } else if (_1 === (119)) { */ case 3:
				p.moveRight(1);
				/* */ if (p.useOptionE() || p.useRE2()) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.useOptionE() || p.useRE2()) { */ case 12:
					_arg = p.options;
					_r = $pkg.ECMAWordClass(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_arg$1 = _r;
					_r$1 = newRegexNodeSet(11, _arg, _arg$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$24r = [_r$1, $ifaceNil];
					$s = 16; case 16: return $24r;
				/* } */ case 13:
				_arg$2 = p.options;
				_r$2 = $pkg.WordClass(); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg$3 = _r$2;
				_r$3 = newRegexNodeSet(11, _arg$2, _arg$3); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$24r$1 = [_r$3, $ifaceNil];
				$s = 19; case 19: return $24r$1;
			/* } else if (_1 === (87)) { */ case 4:
				p.moveRight(1);
				/* */ if (p.useOptionE() || p.useRE2()) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (p.useOptionE() || p.useRE2()) { */ case 20:
					_arg$4 = p.options;
					_r$4 = $pkg.NotECMAWordClass(); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_arg$5 = _r$4;
					_r$5 = newRegexNodeSet(11, _arg$4, _arg$5); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$24r$2 = [_r$5, $ifaceNil];
					$s = 24; case 24: return $24r$2;
				/* } */ case 21:
				_arg$6 = p.options;
				_r$6 = $pkg.NotWordClass(); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$7 = _r$6;
				_r$7 = newRegexNodeSet(11, _arg$6, _arg$7); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$24r$3 = [_r$7, $ifaceNil];
				$s = 27; case 27: return $24r$3;
			/* } else if (_1 === (115)) { */ case 5:
				p.moveRight(1);
				/* */ if (p.useOptionE()) { $s = 28; continue; }
				/* */ if (p.useRE2()) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (p.useOptionE()) { */ case 28:
					_arg$8 = p.options;
					_r$8 = $pkg.ECMASpaceClass(); /* */ $s = 31; case 31: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_arg$9 = _r$8;
					_r$9 = newRegexNodeSet(11, _arg$8, _arg$9); /* */ $s = 32; case 32: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$24r$4 = [_r$9, $ifaceNil];
					$s = 33; case 33: return $24r$4;
				/* } else if (p.useRE2()) { */ case 29:
					_arg$10 = p.options;
					_r$10 = $pkg.RE2SpaceClass(); /* */ $s = 34; case 34: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_arg$11 = _r$10;
					_r$11 = newRegexNodeSet(11, _arg$10, _arg$11); /* */ $s = 35; case 35: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$24r$5 = [_r$11, $ifaceNil];
					$s = 36; case 36: return $24r$5;
				/* } */ case 30:
				_arg$12 = p.options;
				_r$12 = $pkg.SpaceClass(); /* */ $s = 37; case 37: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_arg$13 = _r$12;
				_r$13 = newRegexNodeSet(11, _arg$12, _arg$13); /* */ $s = 38; case 38: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				$24r$6 = [_r$13, $ifaceNil];
				$s = 39; case 39: return $24r$6;
			/* } else if (_1 === (83)) { */ case 6:
				p.moveRight(1);
				/* */ if (p.useOptionE()) { $s = 40; continue; }
				/* */ if (p.useRE2()) { $s = 41; continue; }
				/* */ $s = 42; continue;
				/* if (p.useOptionE()) { */ case 40:
					_arg$14 = p.options;
					_r$14 = $pkg.NotECMASpaceClass(); /* */ $s = 43; case 43: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_arg$15 = _r$14;
					_r$15 = newRegexNodeSet(11, _arg$14, _arg$15); /* */ $s = 44; case 44: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					$24r$7 = [_r$15, $ifaceNil];
					$s = 45; case 45: return $24r$7;
				/* } else if (p.useRE2()) { */ case 41:
					_arg$16 = p.options;
					_r$16 = $pkg.NotRE2SpaceClass(); /* */ $s = 46; case 46: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_arg$17 = _r$16;
					_r$17 = newRegexNodeSet(11, _arg$16, _arg$17); /* */ $s = 47; case 47: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$24r$8 = [_r$17, $ifaceNil];
					$s = 48; case 48: return $24r$8;
				/* } */ case 42:
				_arg$18 = p.options;
				_r$18 = $pkg.NotSpaceClass(); /* */ $s = 49; case 49: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_arg$19 = _r$18;
				_r$19 = newRegexNodeSet(11, _arg$18, _arg$19); /* */ $s = 50; case 50: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				$24r$9 = [_r$19, $ifaceNil];
				$s = 51; case 51: return $24r$9;
			/* } else if (_1 === (100)) { */ case 7:
				p.moveRight(1);
				/* */ if (p.useOptionE() || p.useRE2()) { $s = 52; continue; }
				/* */ $s = 53; continue;
				/* if (p.useOptionE() || p.useRE2()) { */ case 52:
					_arg$20 = p.options;
					_r$20 = $pkg.ECMADigitClass(); /* */ $s = 54; case 54: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					_arg$21 = _r$20;
					_r$21 = newRegexNodeSet(11, _arg$20, _arg$21); /* */ $s = 55; case 55: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					$24r$10 = [_r$21, $ifaceNil];
					$s = 56; case 56: return $24r$10;
				/* } */ case 53:
				_arg$22 = p.options;
				_r$22 = $pkg.DigitClass(); /* */ $s = 57; case 57: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_arg$23 = _r$22;
				_r$23 = newRegexNodeSet(11, _arg$22, _arg$23); /* */ $s = 58; case 58: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				$24r$11 = [_r$23, $ifaceNil];
				$s = 59; case 59: return $24r$11;
			/* } else if (_1 === (68)) { */ case 8:
				p.moveRight(1);
				/* */ if (p.useOptionE() || p.useRE2()) { $s = 60; continue; }
				/* */ $s = 61; continue;
				/* if (p.useOptionE() || p.useRE2()) { */ case 60:
					_arg$24 = p.options;
					_r$24 = $pkg.NotECMADigitClass(); /* */ $s = 62; case 62: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_arg$25 = _r$24;
					_r$25 = newRegexNodeSet(11, _arg$24, _arg$25); /* */ $s = 63; case 63: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					$24r$12 = [_r$25, $ifaceNil];
					$s = 64; case 64: return $24r$12;
				/* } */ case 61:
				_arg$26 = p.options;
				_r$26 = $pkg.NotDigitClass(); /* */ $s = 65; case 65: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_arg$27 = _r$26;
				_r$27 = newRegexNodeSet(11, _arg$26, _arg$27); /* */ $s = 66; case 66: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				$24r$13 = [_r$27, $ifaceNil];
				$s = 67; case 67: return $24r$13;
			/* } else if ((_1 === (112)) || (_1 === (80))) { */ case 9:
				p.moveRight(1);
				_tuple = p.parseProperty();
				prop = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [ptrType$2.nil, err];
				}
				cc = new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false);
				$r = cc.addCategory(prop, !((ch === 112)), p.useOptionI(), p.patternRaw); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (p.useOptionI()) { $s = 69; continue; }
				/* */ $s = 70; continue;
				/* if (p.useOptionI()) { */ case 69:
					$r = cc.addLowercase(); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 70:
				$s = -1; return [newRegexNodeSet(11, p.options, cc), $ifaceNil];
			/* } else { */ case 10:
				$s = -1; return p.scanBasicBackslash(scanOnly);
			/* } */ case 11:
		case 1:
		$s = -1; return [ptrType$2.nil, $ifaceNil];
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.scanBackslash, $c: true, $r, $24r, $24r$1, $24r$10, $24r$11, $24r$12, $24r$13, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _1, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$16, _arg$17, _arg$18, _arg$19, _arg$2, _arg$20, _arg$21, _arg$22, _arg$23, _arg$24, _arg$25, _arg$26, _arg$27, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, cc, ch, err, p, prop, scanOnly, $s};return $f;
	};
	parser.prototype.scanBackslash = function(scanOnly) { return this.$val.scanBackslash(scanOnly); };
	parser.ptr.prototype.scanBasicBackslash = function(scanOnly) {
		var _tuple, _tuple$1, _tuple$2, angled, backpos, capname, capnum, capnum$1, ch, close, err, err$1, err$2, k, p, scanOnly;
		p = this;
		if (p.charsRight() === 0) {
			return [ptrType$2.nil, p.getErr("illegal \\ at end of pattern", sliceType$7.nil)];
		}
		angled = false;
		k = false;
		close = 0;
		backpos = p.textpos();
		ch = p.rightChar(0);
		if ((ch === 107) && (!p.useOptionE() || (p.capnames ? p.capnames.size : 0) > 0)) {
			if (p.charsRight() >= 2) {
				p.moveRight(1);
				ch = p.moveRightGetChar();
				if ((ch === 60) || (!p.useOptionE() && (ch === 39))) {
					angled = true;
					if (ch === 39) {
						close = 39;
					} else {
						close = 62;
					}
				}
			}
			if (!angled || p.charsRight() <= 0) {
				return [ptrType$2.nil, p.getErr("malformed \\k<...> named back reference", sliceType$7.nil)];
			}
			ch = p.rightChar(0);
			k = true;
		} else if (!p.useOptionE() && ((ch === 60) || (ch === 39)) && p.charsRight() > 1) {
			angled = true;
			if (ch === 39) {
				close = 39;
			} else {
				close = 62;
			}
			p.moveRight(1);
			ch = p.rightChar(0);
		}
		if (angled && ch >= 48 && ch <= 57) {
			_tuple = p.scanDecimal();
			capnum = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$2.nil, err];
			}
			if (p.charsRight() > 0 && (p.moveRightGetChar() === close)) {
				if (p.isCaptureSlot(capnum)) {
					return [newRegexNodeM(13, p.options, capnum), $ifaceNil];
				}
				return [ptrType$2.nil, p.getErr("reference to undefined group number %v", new sliceType$7([new $Int(capnum)]))];
			}
		} else if (!angled && ch >= 49 && ch <= 57) {
			_tuple$1 = p.scanDecimal();
			capnum$1 = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$2.nil, err$1];
			}
			if (scanOnly) {
				return [ptrType$2.nil, $ifaceNil];
			}
			if (p.isCaptureSlot(capnum$1)) {
				return [newRegexNodeM(13, p.options, capnum$1), $ifaceNil];
			}
			if (capnum$1 <= 9 && !p.useOptionE()) {
				return [ptrType$2.nil, p.getErr("reference to undefined group number %v", new sliceType$7([new $Int(capnum$1)]))];
			}
		} else if (angled) {
			capname = p.scanCapname();
			if (!(capname === "") && p.charsRight() > 0 && (p.moveRightGetChar() === close)) {
				if (scanOnly) {
					return [ptrType$2.nil, $ifaceNil];
				}
				if (p.isCaptureName(capname)) {
					return [newRegexNodeM(13, p.options, p.captureSlotFromName(capname)), $ifaceNil];
				}
				return [ptrType$2.nil, p.getErr("reference to undefined group name %v", new sliceType$7([new $String(capname)]))];
			} else {
				if (k) {
					return [ptrType$2.nil, p.getErr("malformed \\k<...> named back reference", sliceType$7.nil)];
				}
			}
		}
		p.textto(backpos);
		_tuple$2 = p.scanCharEscape();
		ch = _tuple$2[0];
		err$2 = _tuple$2[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			return [ptrType$2.nil, err$2];
		}
		if (scanOnly) {
			return [ptrType$2.nil, $ifaceNil];
		}
		if (p.useOptionI()) {
			ch = unicode.ToLower(ch);
		}
		return [newRegexNodeCh(9, p.options, ch), $ifaceNil];
	};
	parser.prototype.scanBasicBackslash = function(scanOnly) { return this.$val.scanBasicBackslash(scanOnly); };
	parser.ptr.prototype.parseProperty = function() {
		var capname, ch, ch$1, p, startpos;
		p = this;
		if (p.charsRight() >= 1 && !((p.rightChar(0) === 123))) {
			ch = ($encodeRune(p.moveRightGetChar()));
			if (!isValidUnicodeCat(ch)) {
				return ["", p.getErr("unknown unicode category, script, or property '%v'", new sliceType$7([new $String(ch)]))];
			}
			return [ch, $ifaceNil];
		}
		if (p.charsRight() < 3) {
			return ["", p.getErr("incomplete \\p{X} character escape", sliceType$7.nil)];
		}
		ch$1 = p.moveRightGetChar();
		if (!((ch$1 === 123))) {
			return ["", p.getErr("malformed \\p{X} character escape", sliceType$7.nil)];
		}
		startpos = p.textpos();
		while (true) {
			if (!(p.charsRight() > 0)) { break; }
			ch$1 = p.moveRightGetChar();
			if (!(IsWordChar(ch$1) || (ch$1 === 45))) {
				p.moveLeft();
				break;
			}
		}
		capname = ($runesToString($subslice(p.pattern, startpos, p.textpos())));
		if ((p.charsRight() === 0) || !((p.moveRightGetChar() === 125))) {
			return ["", p.getErr("incomplete \\p{X} character escape", sliceType$7.nil)];
		}
		if (!isValidUnicodeCat(capname)) {
			return ["", p.getErr("unknown unicode category, script, or property '%v'", new sliceType$7([new $String(capname)]))];
		}
		return [capname, $ifaceNil];
	};
	parser.prototype.parseProperty = function() { return this.$val.parseProperty(); };
	parser.ptr.prototype.typeFromCode = function(ch) {
		var _1, ch, p;
		p = this;
		_1 = ch;
		if (_1 === (98)) {
			if (p.useOptionE()) {
				return 41;
			}
			return 16;
		} else if (_1 === (66)) {
			if (p.useOptionE()) {
				return 42;
			}
			return 17;
		} else if (_1 === (65)) {
			return 18;
		} else if (_1 === (71)) {
			return 19;
		} else if (_1 === (90)) {
			return 20;
		} else if (_1 === (122)) {
			return 21;
		} else {
			return 22;
		}
	};
	parser.prototype.typeFromCode = function(ch) { return this.$val.typeFromCode(ch); };
	parser.ptr.prototype.scanBlank = function() {
		var p;
		p = this;
		if (p.useOptionX()) {
			while (true) {
				while (true) {
					if (!(p.charsRight() > 0 && isSpace(p.rightChar(0)))) { break; }
					p.moveRight(1);
				}
				if (p.charsRight() === 0) {
					break;
				}
				if (p.rightChar(0) === 35) {
					while (true) {
						if (!(p.charsRight() > 0 && !((p.rightChar(0) === 10)))) { break; }
						p.moveRight(1);
					}
				} else if (p.charsRight() >= 3 && (p.rightChar(2) === 35) && (p.rightChar(1) === 63) && (p.rightChar(0) === 40)) {
					while (true) {
						if (!(p.charsRight() > 0 && !((p.rightChar(0) === 41)))) { break; }
						p.moveRight(1);
					}
					if (p.charsRight() === 0) {
						return p.getErr("unterminated comment", sliceType$7.nil);
					}
					p.moveRight(1);
				} else {
					break;
				}
			}
		} else {
			while (true) {
				if (p.charsRight() < 3 || !((p.rightChar(2) === 35)) || !((p.rightChar(1) === 63)) || !((p.rightChar(0) === 40))) {
					return $ifaceNil;
				}
				while (true) {
					if (!(p.charsRight() > 0 && !((p.rightChar(0) === 41)))) { break; }
					p.moveRight(1);
				}
				if (p.charsRight() === 0) {
					return p.getErr("unterminated comment", sliceType$7.nil);
				}
				p.moveRight(1);
			}
		}
		return $ifaceNil;
	};
	parser.prototype.scanBlank = function() { return this.$val.scanBlank(); };
	parser.ptr.prototype.scanCapname = function() {
		var p, startpos;
		p = this;
		startpos = p.textpos();
		while (true) {
			if (!(p.charsRight() > 0)) { break; }
			if (!IsWordChar(p.moveRightGetChar())) {
				p.moveLeft();
				break;
			}
		}
		return ($runesToString($subslice(p.pattern, startpos, p.textpos())));
	};
	parser.prototype.scanCapname = function() { return this.$val.scanCapname(); };
	parser.ptr.prototype.scanCharSet = function(caseInsensitive, scanOnly) {
		var {_1, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, caseInsensitive, cc, ch, chPrev, closed, err, err$1, err$2, err$3, fTranslatedChar, firstChar, inRange, negate, nm, ok, p, prop, savePos, scanOnly, sub, sub$1, $s, $r, $c} = $restore(this, {caseInsensitive, scanOnly});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		ch = 0;
		chPrev = 0;
		inRange = false;
		firstChar = true;
		closed = false;
		cc = ptrType.nil;
		if (!scanOnly) {
			cc = new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false);
		}
		if (p.charsRight() > 0 && (p.rightChar(0) === 94)) {
			p.moveRight(1);
			if (!scanOnly) {
				cc.negate = true;
			}
		}
		/* while (true) { */ case 1:
			/* if (!(p.charsRight() > 0)) { break; } */ if(!(p.charsRight() > 0)) { $s = 2; continue; }
			fTranslatedChar = false;
			ch = p.moveRightGetChar();
			/* */ if (ch === 93) { $s = 3; continue; }
			/* */ if ((ch === 92) && p.charsRight() > 0) { $s = 4; continue; }
			/* */ if (ch === 91) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (ch === 93) { */ case 3:
				/* */ if (!firstChar) { $s = 7; continue; }
				/* */ if (p.useOptionE()) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!firstChar) { */ case 7:
					closed = true;
					/* break; */ $s = 2; continue;
					$s = 9; continue;
				/* } else if (p.useOptionE()) { */ case 8:
					/* */ if (!scanOnly) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!scanOnly) { */ case 10:
						_r = $pkg.NoneClass(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						$r = cc.addRanges(_r.ranges); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 11:
					closed = true;
					/* break; */ $s = 2; continue;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if ((ch === 92) && p.charsRight() > 0) { */ case 4:
					ch = p.moveRightGetChar();
					_1 = ch;
					/* */ if ((_1 === (68)) || (_1 === (100))) { $s = 15; continue; }
					/* */ if ((_1 === (83)) || (_1 === (115))) { $s = 16; continue; }
					/* */ if ((_1 === (87)) || (_1 === (119))) { $s = 17; continue; }
					/* */ if ((_1 === (112)) || (_1 === (80))) { $s = 18; continue; }
					/* */ if (_1 === (45)) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if ((_1 === (68)) || (_1 === (100))) { */ case 15:
						/* */ if (!scanOnly) { $s = 22; continue; }
						/* */ $s = 23; continue;
						/* if (!scanOnly) { */ case 22:
							if (inRange) {
								$s = -1; return [ptrType.nil, p.getErr("cannot include class \\%v in character range", new sliceType$7([new $Int32(ch)]))];
							}
							$r = cc.addDigit(p.useOptionE() || p.useRE2(), ch === 68, p.patternRaw); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 23:
						firstChar = false;
						/* continue; */ $s = 1; continue;
						$s = 21; continue;
					/* } else if ((_1 === (83)) || (_1 === (115))) { */ case 16:
						/* */ if (!scanOnly) { $s = 25; continue; }
						/* */ $s = 26; continue;
						/* if (!scanOnly) { */ case 25:
							if (inRange) {
								$s = -1; return [ptrType.nil, p.getErr("cannot include class \\%v in character range", new sliceType$7([new $Int32(ch)]))];
							}
							$r = cc.addSpace(p.useOptionE(), p.useRE2(), ch === 83); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 26:
						firstChar = false;
						/* continue; */ $s = 1; continue;
						$s = 21; continue;
					/* } else if ((_1 === (87)) || (_1 === (119))) { */ case 17:
						/* */ if (!scanOnly) { $s = 28; continue; }
						/* */ $s = 29; continue;
						/* if (!scanOnly) { */ case 28:
							if (inRange) {
								$s = -1; return [ptrType.nil, p.getErr("cannot include class \\%v in character range", new sliceType$7([new $Int32(ch)]))];
							}
							$r = cc.addWord(p.useOptionE() || p.useRE2(), ch === 87); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 29:
						firstChar = false;
						/* continue; */ $s = 1; continue;
						$s = 21; continue;
					/* } else if ((_1 === (112)) || (_1 === (80))) { */ case 18:
						/* */ if (!scanOnly) { $s = 31; continue; }
						/* */ $s = 32; continue;
						/* if (!scanOnly) { */ case 31:
							if (inRange) {
								$s = -1; return [ptrType.nil, p.getErr("cannot include class \\%v in character range", new sliceType$7([new $Int32(ch)]))];
							}
							_tuple = p.parseProperty();
							prop = _tuple[0];
							err = _tuple[1];
							if (!($interfaceIsEqual(err, $ifaceNil))) {
								$s = -1; return [ptrType.nil, err];
							}
							$r = cc.addCategory(prop, !((ch === 112)), caseInsensitive, p.patternRaw); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 33; continue;
						/* } else { */ case 32:
							p.parseProperty();
						/* } */ case 33:
						firstChar = false;
						/* continue; */ $s = 1; continue;
						$s = 21; continue;
					/* } else if (_1 === (45)) { */ case 19:
						/* */ if (!scanOnly) { $s = 35; continue; }
						/* */ $s = 36; continue;
						/* if (!scanOnly) { */ case 35:
							$r = cc.addRange(ch, ch); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 36:
						firstChar = false;
						/* continue; */ $s = 1; continue;
						$s = 21; continue;
					/* } else { */ case 20:
						p.moveLeft();
						err$1 = $ifaceNil;
						_tuple$1 = p.scanCharEscape();
						ch = _tuple$1[0];
						err$1 = _tuple$1[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							$s = -1; return [ptrType.nil, err$1];
						}
						fTranslatedChar = true;
						/* break; */ $s = 14; continue;
					/* } */ case 21:
				case 14:
				$s = 6; continue;
			/* } else if (ch === 91) { */ case 5:
				/* */ if (p.charsRight() > 0 && (p.rightChar(0) === 58) && !inRange) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (p.charsRight() > 0 && (p.rightChar(0) === 58) && !inRange) { */ case 38:
					savePos = p.textpos();
					p.moveRight(1);
					negate = false;
					if (p.charsRight() > 1 && (p.rightChar(0) === 94)) {
						negate = true;
						p.moveRight(1);
					}
					nm = p.scanCapname();
					/* */ if (!scanOnly && p.useRE2()) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (!scanOnly && p.useRE2()) { */ case 40:
						_r$1 = cc.addNamedASCII(nm, negate); /* */ $s = 42; case 42: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						ok = _r$1;
						if (!ok) {
							$s = -1; return [ptrType.nil, p.getErr("invalid character class range", sliceType$7.nil)];
						}
					/* } */ case 41:
					if (p.charsRight() < 2 || !((p.moveRightGetChar() === 58)) || !((p.moveRightGetChar() === 93))) {
						p.textto(savePos);
					} else if (p.useRE2()) {
						firstChar = false;
						/* continue; */ $s = 1; continue;
					}
				/* } */ case 39:
			/* } */ case 6:
			/* */ if (inRange) { $s = 43; continue; }
			/* */ if (p.charsRight() >= 2 && (p.rightChar(0) === 45) && !((p.rightChar(1) === 93))) { $s = 44; continue; }
			/* */ if (p.charsRight() >= 1 && (ch === 45) && !fTranslatedChar && (p.rightChar(0) === 91) && !firstChar) { $s = 45; continue; }
			/* */ $s = 46; continue;
			/* if (inRange) { */ case 43:
				inRange = false;
				/* */ if (!scanOnly) { $s = 48; continue; }
				/* */ $s = 49; continue;
				/* if (!scanOnly) { */ case 48:
					/* */ if ((ch === 91) && !fTranslatedChar && !firstChar) { $s = 50; continue; }
					/* */ $s = 51; continue;
					/* if ((ch === 91) && !fTranslatedChar && !firstChar) { */ case 50:
						$r = cc.addChar(chPrev); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_r$2 = p.scanCharSet(caseInsensitive, false); /* */ $s = 54; case 54: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_tuple$2 = _r$2;
						sub = _tuple$2[0];
						err$2 = _tuple$2[1];
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							$s = -1; return [ptrType.nil, err$2];
						}
						cc.addSubtraction(sub);
						if (p.charsRight() > 0 && !((p.rightChar(0) === 93))) {
							$s = -1; return [ptrType.nil, p.getErr("a subtraction must be the last element in a character class", sliceType$7.nil)];
						}
						$s = 52; continue;
					/* } else { */ case 51:
						if (chPrev > ch) {
							$s = -1; return [ptrType.nil, p.getErr("[%c-%c] range in reverse order", new sliceType$7([new $Int32(chPrev), new $Int32(ch)]))];
						}
						$r = cc.addRange(chPrev, ch); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 52:
				/* } */ case 49:
				$s = 47; continue;
			/* } else if (p.charsRight() >= 2 && (p.rightChar(0) === 45) && !((p.rightChar(1) === 93))) { */ case 44:
				chPrev = ch;
				inRange = true;
				p.moveRight(1);
				$s = 47; continue;
			/* } else if (p.charsRight() >= 1 && (ch === 45) && !fTranslatedChar && (p.rightChar(0) === 91) && !firstChar) { */ case 45:
				/* */ if (!scanOnly) { $s = 56; continue; }
				/* */ $s = 57; continue;
				/* if (!scanOnly) { */ case 56:
					p.moveRight(1);
					_r$3 = p.scanCharSet(caseInsensitive, false); /* */ $s = 59; case 59: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					sub$1 = _tuple$3[0];
					err$3 = _tuple$3[1];
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						$s = -1; return [ptrType.nil, err$3];
					}
					cc.addSubtraction(sub$1);
					if (p.charsRight() > 0 && !((p.rightChar(0) === 93))) {
						$s = -1; return [ptrType.nil, p.getErr("a subtraction must be the last element in a character class", sliceType$7.nil)];
					}
					$s = 58; continue;
				/* } else { */ case 57:
					p.moveRight(1);
					_r$4 = p.scanCharSet(caseInsensitive, true); /* */ $s = 60; case 60: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
				/* } */ case 58:
				$s = 47; continue;
			/* } else { */ case 46:
				/* */ if (!scanOnly) { $s = 61; continue; }
				/* */ $s = 62; continue;
				/* if (!scanOnly) { */ case 61:
					$r = cc.addRange(ch, ch); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 62:
			/* } */ case 47:
			firstChar = false;
		$s = 1; continue;
		case 2:
		if (!closed) {
			$s = -1; return [ptrType.nil, p.getErr("unterminated [] set", sliceType$7.nil)];
		}
		/* */ if (!scanOnly && caseInsensitive) { $s = 64; continue; }
		/* */ $s = 65; continue;
		/* if (!scanOnly && caseInsensitive) { */ case 64:
			$r = cc.addLowercase(); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 65:
		$s = -1; return [cc, $ifaceNil];
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.scanCharSet, $c: true, $r, _1, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, caseInsensitive, cc, ch, chPrev, closed, err, err$1, err$2, err$3, fTranslatedChar, firstChar, inRange, negate, nm, ok, p, prop, savePos, scanOnly, sub, sub$1, $s};return $f;
	};
	parser.prototype.scanCharSet = function(caseInsensitive, scanOnly) { return this.$val.scanCharSet(caseInsensitive, scanOnly); };
	parser.ptr.prototype.scanDecimal = function() {
		var d, i, p;
		p = this;
		i = 0;
		d = 0;
		while (true) {
			if (!(p.charsRight() > 0)) { break; }
			d = (((p.rightChar(0) - 48 >> 0) >> 0));
			if (d < 0 || d > 9) {
				break;
			}
			p.moveRight(1);
			if (i > 214748364 || ((i === 214748364) && d > 7)) {
				return [0, p.getErr("capture group number out of range", sliceType$7.nil)];
			}
			i = $imul(i, (10));
			i = i + (d) >> 0;
		}
		return [(i), $ifaceNil];
	};
	parser.prototype.scanDecimal = function() { return this.$val.scanDecimal(); };
	isOnlyTopOption = function(option) {
		var option;
		return (option === 64) || (option === 256) || (option === 512);
	};
	parser.ptr.prototype.scanOptions = function() {
		var ch, off, option, p;
		p = this;
		off = false;
		while (true) {
			if (!(p.charsRight() > 0)) { break; }
			ch = p.rightChar(0);
			if (ch === 45) {
				off = true;
			} else if (ch === 43) {
				off = false;
			} else {
				option = optionFromCode(ch);
				if ((option === 0) || isOnlyTopOption(option)) {
					return;
				}
				if (off) {
					p.options = p.options & ((~option >> 0));
				} else {
					p.options = p.options | (option);
				}
			}
			p.moveRight(1);
		}
	};
	parser.prototype.scanOptions = function() { return this.$val.scanOptions(); };
	parser.ptr.prototype.scanCharEscape = function() {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, ch, err, p, pos, r;
		r = 0;
		err = $ifaceNil;
		p = this;
		ch = p.moveRightGetChar();
		if (ch >= 48 && ch <= 55) {
			p.moveLeft();
			_tmp = p.scanOctal();
			_tmp$1 = $ifaceNil;
			r = _tmp;
			err = _tmp$1;
			return [r, err];
		}
		pos = p.textpos();
		_1 = ch;
		if (_1 === (120)) {
			if (p.charsRight() > 0 && (p.rightChar(0) === 123)) {
				if (p.useOptionE()) {
					_tmp$2 = ch;
					_tmp$3 = $ifaceNil;
					r = _tmp$2;
					err = _tmp$3;
					return [r, err];
				}
				p.moveRight(1);
				_tuple = p.scanHexUntilBrace();
				r = _tuple[0];
				err = _tuple[1];
				return [r, err];
			} else {
				_tuple$1 = p.scanHex(2);
				r = _tuple$1[0];
				err = _tuple$1[1];
			}
		} else if (_1 === (117)) {
			if (p.useOptionE() && p.useOptionU() && p.charsRight() > 0 && (p.rightChar(0) === 123)) {
				p.moveRight(1);
				_tuple$2 = p.scanHexUntilBrace();
				r = _tuple$2[0];
				err = _tuple$2[1];
				return [r, err];
			} else {
				_tuple$3 = p.scanHex(4);
				r = _tuple$3[0];
				err = _tuple$3[1];
			}
		} else if (_1 === (97)) {
			_tmp$4 = 7;
			_tmp$5 = $ifaceNil;
			r = _tmp$4;
			err = _tmp$5;
			return [r, err];
		} else if (_1 === (98)) {
			_tmp$6 = 8;
			_tmp$7 = $ifaceNil;
			r = _tmp$6;
			err = _tmp$7;
			return [r, err];
		} else if (_1 === (101)) {
			_tmp$8 = 27;
			_tmp$9 = $ifaceNil;
			r = _tmp$8;
			err = _tmp$9;
			return [r, err];
		} else if (_1 === (102)) {
			_tmp$10 = 12;
			_tmp$11 = $ifaceNil;
			r = _tmp$10;
			err = _tmp$11;
			return [r, err];
		} else if (_1 === (110)) {
			_tmp$12 = 10;
			_tmp$13 = $ifaceNil;
			r = _tmp$12;
			err = _tmp$13;
			return [r, err];
		} else if (_1 === (114)) {
			_tmp$14 = 13;
			_tmp$15 = $ifaceNil;
			r = _tmp$14;
			err = _tmp$15;
			return [r, err];
		} else if (_1 === (116)) {
			_tmp$16 = 9;
			_tmp$17 = $ifaceNil;
			r = _tmp$16;
			err = _tmp$17;
			return [r, err];
		} else if (_1 === (118)) {
			_tmp$18 = 11;
			_tmp$19 = $ifaceNil;
			r = _tmp$18;
			err = _tmp$19;
			return [r, err];
		} else if (_1 === (99)) {
			_tuple$4 = p.scanControl();
			r = _tuple$4[0];
			err = _tuple$4[1];
		} else {
			if (!p.useOptionE() && !p.useRE2() && IsWordChar(ch)) {
				_tmp$20 = 0;
				_tmp$21 = p.getErr("unrecognized escape sequence \\%v", new sliceType$7([new $String(($encodeRune(ch)))]));
				r = _tmp$20;
				err = _tmp$21;
				return [r, err];
			}
			_tmp$22 = ch;
			_tmp$23 = $ifaceNil;
			r = _tmp$22;
			err = _tmp$23;
			return [r, err];
		}
		if (!($interfaceIsEqual(err, $ifaceNil)) && p.useOptionE()) {
			p.textto(pos);
			_tmp$24 = ch;
			_tmp$25 = $ifaceNil;
			r = _tmp$24;
			err = _tmp$25;
			return [r, err];
		}
		return [r, err];
	};
	parser.prototype.scanCharEscape = function() { return this.$val.scanCharEscape(); };
	parser.ptr.prototype.scanControl = function() {
		var ch, p;
		p = this;
		if (p.charsRight() <= 0) {
			return [0, p.getErr("missing control character", sliceType$7.nil)];
		}
		ch = p.moveRightGetChar();
		if (ch >= 97 && ch <= 122) {
			ch = (ch - 32 >> 0);
		}
		ch = (ch - 64 >> 0);
		if (ch >= 0 && ch < 32) {
			return [ch, $ifaceNil];
		}
		return [0, p.getErr("unrecognized control character", sliceType$7.nil)];
	};
	parser.prototype.scanControl = function() { return this.$val.scanControl(); };
	parser.ptr.prototype.scanHexUntilBrace = function() {
		var ch, d, hasContent, i, p;
		p = this;
		i = 0;
		hasContent = false;
		while (true) {
			if (!(p.charsRight() > 0)) { break; }
			ch = p.moveRightGetChar();
			if (ch === 125) {
				if (!hasContent) {
					return [0, p.getErr("insufficient hexadecimal digits", sliceType$7.nil)];
				}
				return [((i >> 0)), $ifaceNil];
			}
			hasContent = true;
			d = hexDigit(ch);
			if (d < 0) {
				return [0, p.getErr("missing closing }", sliceType$7.nil)];
			}
			i = $imul(i, (16));
			i = i + (d) >> 0;
			if (i > 1114111) {
				return [0, p.getErr("hex values may not be larger than 0x10FFFF", sliceType$7.nil)];
			}
		}
		return [0, p.getErr("missing closing }", sliceType$7.nil)];
	};
	parser.prototype.scanHexUntilBrace = function() { return this.$val.scanHexUntilBrace(); };
	parser.ptr.prototype.scanHex = function(c) {
		var c, d, i, p;
		p = this;
		i = 0;
		if (p.charsRight() >= c) {
			while (true) {
				if (!(c > 0)) { break; }
				d = hexDigit(p.moveRightGetChar());
				if (d < 0) {
					break;
				}
				i = $imul(i, (16));
				i = i + (d) >> 0;
				c = c - (1) >> 0;
			}
		}
		if (c > 0) {
			return [0, p.getErr("insufficient hexadecimal digits", sliceType$7.nil)];
		}
		return [((i >> 0)), $ifaceNil];
	};
	parser.prototype.scanHex = function(c) { return this.$val.scanHex(c); };
	hexDigit = function(ch) {
		var ch, d, d$1, d$2;
		d = (((ch - 48 >> 0) >>> 0));
		if (d <= 9) {
			return ((d >> 0));
		}
		d$1 = (((ch - 97 >> 0) >>> 0));
		if (d$1 <= 5) {
			return (((d$1 + 10 >>> 0) >> 0));
		}
		d$2 = (((ch - 65 >> 0) >>> 0));
		if (d$2 <= 5) {
			return (((d$2 + 10 >>> 0) >> 0));
		}
		return -1;
	};
	parser.ptr.prototype.scanOctal = function() {
		var c, d, i, p;
		p = this;
		c = 3;
		if (c > p.charsRight()) {
			c = p.charsRight();
		}
		i = 0;
		d = (((p.rightChar(0) - 48 >> 0) >> 0));
		while (true) {
			if (!(c > 0 && d <= 7 && d >= 0)) { break; }
			if (i >= 32 && p.useOptionE()) {
				break;
			}
			i = $imul(i, (8));
			i = i + (d) >> 0;
			c = c - (1) >> 0;
			p.moveRight(1);
			if (!p.rightMost()) {
				d = (((p.rightChar(0) - 48 >> 0) >> 0));
			}
		}
		i = i & (255);
		return ((i >> 0));
	};
	parser.prototype.scanOctal = function() { return this.$val.scanOctal(); };
	parser.ptr.prototype.textpos = function() {
		var p;
		p = this;
		return p.currentPos;
	};
	parser.prototype.textpos = function() { return this.$val.textpos(); };
	parser.ptr.prototype.textto = function(pos) {
		var p, pos;
		p = this;
		p.currentPos = pos;
	};
	parser.prototype.textto = function(pos) { return this.$val.textto(pos); };
	parser.ptr.prototype.moveRightGetChar = function() {
		var ch, p, x, x$1;
		p = this;
		ch = (x = p.pattern, x$1 = p.currentPos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.currentPos = p.currentPos + (1) >> 0;
		return ch;
	};
	parser.prototype.moveRightGetChar = function() { return this.$val.moveRightGetChar(); };
	parser.ptr.prototype.moveRight = function(i) {
		var i, p;
		p = this;
		p.currentPos = p.currentPos + (i) >> 0;
	};
	parser.prototype.moveRight = function(i) { return this.$val.moveRight(i); };
	parser.ptr.prototype.moveLeft = function() {
		var p;
		p = this;
		p.currentPos = p.currentPos - (1) >> 0;
	};
	parser.prototype.moveLeft = function() { return this.$val.moveLeft(); };
	parser.ptr.prototype.charAt = function(i) {
		var i, p, x;
		p = this;
		return (x = p.pattern, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	parser.prototype.charAt = function(i) { return this.$val.charAt(i); };
	parser.ptr.prototype.rightChar = function(i) {
		var i, p, x, x$1;
		p = this;
		return (x = p.pattern, x$1 = p.currentPos + i >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	parser.prototype.rightChar = function(i) { return this.$val.rightChar(i); };
	parser.ptr.prototype.charsRight = function() {
		var p;
		p = this;
		return p.pattern.$length - p.currentPos >> 0;
	};
	parser.prototype.charsRight = function() { return this.$val.charsRight(); };
	parser.ptr.prototype.rightMost = function() {
		var p;
		p = this;
		return p.currentPos === p.pattern.$length;
	};
	parser.prototype.rightMost = function() { return this.$val.rightMost(); };
	parser.ptr.prototype.captureSlotFromName = function(capname) {
		var _entry, capname, p;
		p = this;
		return (_entry = $mapIndex(p.capnames,$String.keyFor(capname)), _entry !== undefined ? _entry.v : 0);
	};
	parser.prototype.captureSlotFromName = function(capname) { return this.$val.captureSlotFromName(capname); };
	parser.ptr.prototype.isCaptureSlot = function(i) {
		var _entry, _tuple, i, ok, p;
		p = this;
		if (!(p.caps === false)) {
			_tuple = (_entry = $mapIndex(p.caps,$Int.keyFor(i)), _entry !== undefined ? [_entry.v, true] : [0, false]);
			ok = _tuple[1];
			return ok;
		}
		return i >= 0 && i < p.capsize;
	};
	parser.prototype.isCaptureSlot = function(i) { return this.$val.isCaptureSlot(i); };
	parser.ptr.prototype.isCaptureName = function(capname) {
		var _entry, _tuple, capname, ok, p;
		p = this;
		if (p.capnames === false) {
			return false;
		}
		_tuple = (_entry = $mapIndex(p.capnames,$String.keyFor(capname)), _entry !== undefined ? [_entry.v, true] : [0, false]);
		ok = _tuple[1];
		return ok;
	};
	parser.prototype.isCaptureName = function(capname) { return this.$val.isCaptureName(capname); };
	parser.ptr.prototype.useOptionN = function() {
		var p;
		p = this;
		return !((((p.options & 4)) === 0));
	};
	parser.prototype.useOptionN = function() { return this.$val.useOptionN(); };
	parser.ptr.prototype.useOptionI = function() {
		var p;
		p = this;
		return !((((p.options & 1)) === 0));
	};
	parser.prototype.useOptionI = function() { return this.$val.useOptionI(); };
	parser.ptr.prototype.useOptionM = function() {
		var p;
		p = this;
		return !((((p.options & 2)) === 0));
	};
	parser.prototype.useOptionM = function() { return this.$val.useOptionM(); };
	parser.ptr.prototype.useOptionS = function() {
		var p;
		p = this;
		return !((((p.options & 16)) === 0));
	};
	parser.prototype.useOptionS = function() { return this.$val.useOptionS(); };
	parser.ptr.prototype.useOptionX = function() {
		var p;
		p = this;
		return !((((p.options & 32)) === 0));
	};
	parser.prototype.useOptionX = function() { return this.$val.useOptionX(); };
	parser.ptr.prototype.useOptionE = function() {
		var p;
		p = this;
		return !((((p.options & 256)) === 0));
	};
	parser.prototype.useOptionE = function() { return this.$val.useOptionE(); };
	parser.ptr.prototype.useRE2 = function() {
		var p;
		p = this;
		return !((((p.options & 512)) === 0));
	};
	parser.prototype.useRE2 = function() { return this.$val.useRE2(); };
	parser.ptr.prototype.useOptionU = function() {
		var p;
		p = this;
		return !((((p.options & 1024)) === 0));
	};
	parser.prototype.useOptionU = function() { return this.$val.useOptionU(); };
	parser.ptr.prototype.emptyOptionsStack = function() {
		var p;
		p = this;
		return p.optionsStack.$length === 0;
	};
	parser.prototype.emptyOptionsStack = function() { return this.$val.emptyOptionsStack(); };
	parser.ptr.prototype.addConcatenate = function() {
		var {p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.concatenation.addChild(p.unit); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.unit = ptrType$2.nil;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.addConcatenate, $c: true, $r, p, $s};return $f;
	};
	parser.prototype.addConcatenate = function() { return this.$val.addConcatenate(); };
	parser.ptr.prototype.addConcatenate3 = function(lazy, min, max) {
		var {_r, lazy, max, min, p, $s, $r, $c} = $restore(this, {lazy, min, max});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.unit.makeQuantifier(lazy, min, max); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = p.concatenation.addChild(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.unit = ptrType$2.nil;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.addConcatenate3, $c: true, $r, _r, lazy, max, min, p, $s};return $f;
	};
	parser.prototype.addConcatenate3 = function(lazy, min, max) { return this.$val.addConcatenate3(lazy, min, max); };
	parser.ptr.prototype.addUnitOne = function(ch) {
		var ch, p;
		p = this;
		if (p.useOptionI()) {
			ch = unicode.ToLower(ch);
		}
		p.unit = newRegexNodeCh(9, p.options, ch);
	};
	parser.prototype.addUnitOne = function(ch) { return this.$val.addUnitOne(ch); };
	parser.ptr.prototype.addUnitNotone = function(ch) {
		var ch, p;
		p = this;
		if (p.useOptionI()) {
			ch = unicode.ToLower(ch);
		}
		p.unit = newRegexNodeCh(10, p.options, ch);
	};
	parser.prototype.addUnitNotone = function(ch) { return this.$val.addUnitNotone(ch); };
	parser.ptr.prototype.addUnitSet = function(set) {
		var p, set;
		p = this;
		p.unit = newRegexNodeSet(11, p.options, set);
	};
	parser.prototype.addUnitSet = function(set) { return this.$val.addUnitSet(set); };
	parser.ptr.prototype.addUnitNode = function(node) {
		var node, p;
		p = this;
		p.unit = node;
	};
	parser.prototype.addUnitNode = function(node) { return this.$val.addUnitNode(node); };
	parser.ptr.prototype.addUnitType = function(t) {
		var p, t;
		p = this;
		p.unit = newRegexNode(t, p.options);
	};
	parser.prototype.addUnitType = function(t) { return this.$val.addUnitType(t); };
	parser.ptr.prototype.addGroup = function() {
		var {p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ((p.group.t === 34) || (p.group.t === 33)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((p.group.t === 34) || (p.group.t === 33)) { */ case 1:
			$r = p.group.addChild(p.concatenation.reverseLeft()); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (((p.group.t === 33) && p.group.children.$length > 2) || p.group.children.$length > 3) {
				$s = -1; return p.getErr("too many | in (?()|)", sliceType$7.nil);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			$r = p.alternation.addChild(p.concatenation.reverseLeft()); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.group.addChild(p.alternation); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		p.unit = p.group;
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.addGroup, $c: true, $r, p, $s};return $f;
	};
	parser.prototype.addGroup = function() { return this.$val.addGroup(); };
	parser.ptr.prototype.popKeepOptions = function() {
		var lastIdx, p;
		p = this;
		lastIdx = p.optionsStack.$length - 1 >> 0;
		p.optionsStack = $subslice(p.optionsStack, 0, lastIdx);
	};
	parser.prototype.popKeepOptions = function() { return this.$val.popKeepOptions(); };
	parser.ptr.prototype.popOptions = function() {
		var lastIdx, p, x;
		p = this;
		lastIdx = p.optionsStack.$length - 1 >> 0;
		p.options = (x = p.optionsStack, ((lastIdx < 0 || lastIdx >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + lastIdx]));
		p.optionsStack = $subslice(p.optionsStack, 0, lastIdx);
	};
	parser.prototype.popOptions = function() { return this.$val.popOptions(); };
	parser.ptr.prototype.pushOptions = function() {
		var p;
		p = this;
		p.optionsStack = $append(p.optionsStack, p.options);
	};
	parser.prototype.pushOptions = function() { return this.$val.pushOptions(); };
	parser.ptr.prototype.addToConcatenate = function(pos, cch, isReplacement) {
		var {cch, ch, i, isReplacement, node, p, pos, str, $s, $r, $c} = $restore(this, {pos, cch, isReplacement});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		node = ptrType$2.nil;
		if (cch === 0) {
			$s = -1; return;
		}
		if (cch > 1) {
			str = $makeSlice(sliceType$2, cch);
			$copySlice(str, $subslice(p.pattern, pos, (pos + cch >> 0)));
			if (p.useOptionI() && !isReplacement) {
				i = 0;
				while (true) {
					if (!(i < str.$length)) { break; }
					((i < 0 || i >= str.$length) ? ($throwRuntimeError("index out of range"), undefined) : str.$array[str.$offset + i] = unicode.ToLower(((i < 0 || i >= str.$length) ? ($throwRuntimeError("index out of range"), undefined) : str.$array[str.$offset + i])));
					i = i + (1) >> 0;
				}
			}
			node = newRegexNodeStr(12, p.options, str);
		} else {
			ch = p.charAt(pos);
			if (p.useOptionI() && !isReplacement) {
				ch = unicode.ToLower(ch);
			}
			node = newRegexNodeCh(9, p.options, ch);
		}
		$r = p.concatenation.addChild(node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.addToConcatenate, $c: true, $r, cch, ch, i, isReplacement, node, p, pos, str, $s};return $f;
	};
	parser.prototype.addToConcatenate = function(pos, cch, isReplacement) { return this.$val.addToConcatenate(pos, cch, isReplacement); };
	parser.ptr.prototype.pushGroup = function() {
		var p;
		p = this;
		p.group.next = p.stack;
		p.alternation.next = p.group;
		p.concatenation.next = p.alternation;
		p.stack = p.concatenation;
	};
	parser.prototype.pushGroup = function() { return this.$val.pushGroup(); };
	parser.ptr.prototype.popGroup = function() {
		var {p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		p.concatenation = p.stack;
		p.alternation = p.concatenation.next;
		p.group = p.alternation.next;
		p.stack = p.group.next;
		/* */ if ((p.group.t === 34) && (p.group.children.$length === 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((p.group.t === 34) && (p.group.children.$length === 0)) { */ case 1:
			if (p.unit === ptrType$2.nil) {
				$s = -1; return p.getErr("illegal conditional (?(...)) expression", sliceType$7.nil);
			}
			$r = p.group.addChild(p.unit); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.unit = ptrType$2.nil;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.popGroup, $c: true, $r, p, $s};return $f;
	};
	parser.prototype.popGroup = function() { return this.$val.popGroup(); };
	parser.ptr.prototype.emptyStack = function() {
		var p;
		p = this;
		return p.stack === ptrType$2.nil;
	};
	parser.prototype.emptyStack = function() { return this.$val.emptyStack(); };
	parser.ptr.prototype.startGroup = function(openGroup) {
		var openGroup, p;
		p = this;
		p.group = openGroup;
		p.alternation = newRegexNode(24, p.options);
		p.concatenation = newRegexNode(25, p.options);
	};
	parser.prototype.startGroup = function(openGroup) { return this.$val.startGroup(openGroup); };
	parser.ptr.prototype.addAlternate = function() {
		var {p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ((p.group.t === 34) || (p.group.t === 33)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((p.group.t === 34) || (p.group.t === 33)) { */ case 1:
			$r = p.group.addChild(p.concatenation.reverseLeft()); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = p.alternation.addChild(p.concatenation.reverseLeft()); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		p.concatenation = newRegexNode(25, p.options);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.addAlternate, $c: true, $r, p, $s};return $f;
	};
	parser.prototype.addAlternate = function() { return this.$val.addAlternate(); };
	isSpace = function(ch) {
		var ch;
		return ch <= 32 && (((ch < 0 || ch >= _category.$length) ? ($throwRuntimeError("index out of range"), undefined) : _category.$array[_category.$offset + ch]) === 2);
	};
	isSpecial = function(ch) {
		var ch;
		return ch <= 124 && ((ch < 0 || ch >= _category.$length) ? ($throwRuntimeError("index out of range"), undefined) : _category.$array[_category.$offset + ch]) >= 4;
	};
	isStopperX = function(ch) {
		var ch;
		return ch <= 124 && ((ch < 0 || ch >= _category.$length) ? ($throwRuntimeError("index out of range"), undefined) : _category.$array[_category.$offset + ch]) >= 2;
	};
	isQuantifier = function(ch) {
		var ch;
		return ch <= 123 && ((ch < 0 || ch >= _category.$length) ? ($throwRuntimeError("index out of range"), undefined) : _category.$array[_category.$offset + ch]) >= 5;
	};
	parser.ptr.prototype.isTrueQuantifier = function() {
		var ch, nChars, p, pos, startpos;
		p = this;
		nChars = p.charsRight();
		if (nChars === 0) {
			return false;
		}
		startpos = p.textpos();
		ch = p.charAt(startpos);
		if (!((ch === 123))) {
			return ch <= 123 && ((ch < 0 || ch >= _category.$length) ? ($throwRuntimeError("index out of range"), undefined) : _category.$array[_category.$offset + ch]) >= 5;
		}
		pos = startpos;
		while (true) {
			nChars = nChars - (1) >> 0;
			if (nChars <= 0) {
				break;
			}
			pos = pos + (1) >> 0;
			ch = p.charAt(pos);
			if (ch < 48 || ch > 57) {
				break;
			}
		}
		if ((nChars === 0) || ((pos - startpos >> 0) === 1)) {
			return false;
		}
		if (ch === 125) {
			return true;
		}
		if (!((ch === 44))) {
			return false;
		}
		while (true) {
			nChars = nChars - (1) >> 0;
			if (nChars <= 0) {
				break;
			}
			pos = pos + (1) >> 0;
			ch = p.charAt(pos);
			if (ch < 48 || ch > 57) {
				break;
			}
		}
		return nChars > 0 && (ch === 125);
	};
	parser.prototype.isTrueQuantifier = function() { return this.$val.isTrueQuantifier(); };
	Escape = function(input) {
		var {_i, _ref, _rune, b, input, r, $s, $r, $c} = $restore(this, {input});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		_ref = input;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			$r = escape(b, r, false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i += _rune[1];
		$s = 1; continue;
		case 2:
		$s = -1; return b.String();
		/* */ } return; } var $f = {$blk: Escape, $c: true, $r, _i, _ref, _rune, b, input, r, $s};return $f;
	};
	$pkg.Escape = Escape;
	escape = function(b, r, force) {
		var {_1, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, b, force, r, s, $s, $r, $c} = $restore(this, {b, r, force});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		/* */ if (unicode.IsPrint(r)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (unicode.IsPrint(r)) { */ case 1:
			/* */ if (strings.IndexRune("\\.+*?()|[]{}^$# ", r) >= 0 || force) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (strings.IndexRune("\\.+*?()|[]{}^$# ", r) >= 0 || force) { */ case 3:
				_r = b.WriteRune(92); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 4:
			_r$1 = b.WriteRune(r); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return;
		/* } */ case 2:
			_1 = r;
			/* */ if (_1 === (7)) { $s = 8; continue; }
			/* */ if (_1 === (12)) { $s = 9; continue; }
			/* */ if (_1 === (10)) { $s = 10; continue; }
			/* */ if (_1 === (13)) { $s = 11; continue; }
			/* */ if (_1 === (9)) { $s = 12; continue; }
			/* */ if (_1 === (11)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_1 === (7)) { */ case 8:
				_r$2 = b.WriteString("\\a"); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				$s = 15; continue;
			/* } else if (_1 === (12)) { */ case 9:
				_r$3 = b.WriteString("\\f"); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$s = 15; continue;
			/* } else if (_1 === (10)) { */ case 10:
				_r$4 = b.WriteString("\\n"); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = 15; continue;
			/* } else if (_1 === (13)) { */ case 11:
				_r$5 = b.WriteString("\\r"); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$s = 15; continue;
			/* } else if (_1 === (9)) { */ case 12:
				_r$6 = b.WriteString("\\t"); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				$s = 15; continue;
			/* } else if (_1 === (11)) { */ case 13:
				_r$7 = b.WriteString("\\v"); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				$s = 15; continue;
			/* } else { */ case 14:
				/* */ if (r < 256) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (r < 256) { */ case 22:
					_r$8 = b.WriteString("\\x"); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					s = strconv.FormatInt((new $Int64(0, r)), 16);
					/* */ if (s.length === 1) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (s.length === 1) { */ case 25:
						_r$9 = b.WriteRune(48); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
					/* } */ case 26:
					_r$10 = b.WriteString(s); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
					/* break; */ $s = 7; continue;
				/* } */ case 23:
				_r$11 = b.WriteString("\\u"); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
				_r$12 = b.WriteString(strconv.FormatInt((new $Int64(0, r)), 16)); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
			/* } */ case 15:
		case 7:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: escape, $c: true, $r, _1, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, b, force, r, s, $s};return $f;
	};
	opcodeBacktracks = function(op) {
		var _1, op;
		op = op & (63);
		_1 = op;
		if ((_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (23)) || (_1 === (24)) || (_1 === (25)) || (_1 === (26)) || (_1 === (27)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31)) || (_1 === (32)) || (_1 === (33)) || (_1 === (34)) || (_1 === (35)) || (_1 === (36)) || (_1 === (38))) {
			return true;
		} else {
			return false;
		}
	};
	opcodeSize = function(op) {
		var {_1, _r, op, $s, $r, $c} = $restore(this, {op});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		op = op & (63);
			_1 = op;
			/* */ if ((_1 === (22)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17)) || (_1 === (41)) || (_1 === (42)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (30)) || (_1 === (31)) || (_1 === (33)) || (_1 === (34)) || (_1 === (35)) || (_1 === (36)) || (_1 === (40))) { $s = 2; continue; }
			/* */ if ((_1 === (9)) || (_1 === (10)) || (_1 === (12)) || (_1 === (13)) || (_1 === (37)) || (_1 === (38)) || (_1 === (26)) || (_1 === (27)) || (_1 === (23)) || (_1 === (24)) || (_1 === (25)) || (_1 === (39)) || (_1 === (11))) { $s = 3; continue; }
			/* */ if ((_1 === (32)) || (_1 === (28)) || (_1 === (29)) || (_1 === (0)) || (_1 === (1)) || (_1 === (3)) || (_1 === (4)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (2)) || (_1 === (5))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (22)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17)) || (_1 === (41)) || (_1 === (42)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (30)) || (_1 === (31)) || (_1 === (33)) || (_1 === (34)) || (_1 === (35)) || (_1 === (36)) || (_1 === (40))) { */ case 2:
				$s = -1; return 1;
			/* } else if ((_1 === (9)) || (_1 === (10)) || (_1 === (12)) || (_1 === (13)) || (_1 === (37)) || (_1 === (38)) || (_1 === (26)) || (_1 === (27)) || (_1 === (23)) || (_1 === (24)) || (_1 === (25)) || (_1 === (39)) || (_1 === (11))) { */ case 3:
				$s = -1; return 2;
			/* } else if ((_1 === (32)) || (_1 === (28)) || (_1 === (29)) || (_1 === (0)) || (_1 === (1)) || (_1 === (3)) || (_1 === (4)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (2)) || (_1 === (5))) { */ case 4:
				$s = -1; return 3;
			/* } else { */ case 5:
				_r = fmt.Errorf("Unexpected op code: %v", new sliceType$7([new InstOp(op)])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$panic(_r);
			/* } */ case 6:
		case 1:
		$s = -1; return 0;
		/* */ } return; } var $f = {$blk: opcodeSize, $c: true, $r, _1, _r, op, $s};return $f;
	};
	operatorDescription = function(op) {
		var desc, op, x;
		desc = (x = op & 63, ((x < 0 || x >= codeStr.$length) ? ($throwRuntimeError("index out of range"), undefined) : codeStr.$array[codeStr.$offset + x]));
		if (!((((op & 512)) === 0))) {
			desc = desc + ("-Ci");
		}
		if (!((((op & 64)) === 0))) {
			desc = desc + ("-Rtl");
		}
		if (!((((op & 128)) === 0))) {
			desc = desc + ("-Back");
		}
		if (!((((op & 256)) === 0))) {
			desc = desc + ("-Back2");
		}
		return desc;
	};
	Code.ptr.prototype.OpcodeDescription = function(offset) {
		var {_1, _2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, c, offset, op, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {offset});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		op = (((x = c.Codes, ((offset < 0 || offset >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + offset])) >> 0));
		_r = fmt.Fprintf(buf, "%06d ", new sliceType$7([new $Int(offset)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (opcodeBacktracks(op & 63)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (opcodeBacktracks(op & 63)) { */ case 2:
			_r$1 = buf.WriteString("*"); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = 4; continue;
		/* } else { */ case 3:
			_r$2 = buf.WriteString(" "); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 4:
		_r$3 = buf.WriteString(operatorDescription(op)); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = buf.WriteString("("); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		op = op & (63);
			_1 = op;
			/* */ if ((_1 === (9)) || (_1 === (10)) || (_1 === (0)) || (_1 === (1)) || (_1 === (3)) || (_1 === (4)) || (_1 === (6)) || (_1 === (7))) { $s = 10; continue; }
			/* */ if ((_1 === (11)) || (_1 === (2)) || (_1 === (5)) || (_1 === (8))) { $s = 11; continue; }
			/* */ if (_1 === (12)) { $s = 12; continue; }
			/* */ if ((_1 === (13)) || (_1 === (37))) { $s = 13; continue; }
			/* */ if (_1 === (32)) { $s = 14; continue; }
			/* */ if ((_1 === (26)) || (_1 === (27))) { $s = 15; continue; }
			/* */ if ((_1 === (38)) || (_1 === (23)) || (_1 === (24)) || (_1 === (25)) || (_1 === (28)) || (_1 === (29))) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if ((_1 === (9)) || (_1 === (10)) || (_1 === (0)) || (_1 === (1)) || (_1 === (3)) || (_1 === (4)) || (_1 === (6)) || (_1 === (7))) { */ case 10:
				_r$5 = buf.WriteString("Ch = "); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				_r$6 = CharDescription((((x$1 = c.Codes, x$2 = offset + 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >> 0))); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = buf.WriteString(_r$6); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				$s = 17; continue;
			/* } else if ((_1 === (11)) || (_1 === (2)) || (_1 === (5)) || (_1 === (8))) { */ case 11:
				_r$8 = buf.WriteString("Set = "); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				_r$9 = $clone((x$3 = c.Sets, x$4 = (x$5 = c.Codes, x$6 = offset + 1 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])), CharSet).String(); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = buf.WriteString(_r$9); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				$s = 17; continue;
			/* } else if (_1 === (12)) { */ case 12:
				_r$11 = fmt.Fprintf(buf, "String = %s", new sliceType$7([new $String(($runesToString((x$7 = c.Strings, x$8 = (x$9 = c.Codes, x$10 = offset + 1 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])))))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
				$s = 17; continue;
			/* } else if ((_1 === (13)) || (_1 === (37))) { */ case 13:
				_r$12 = fmt.Fprintf(buf, "Index = %d", new sliceType$7([new $Int((x$11 = c.Codes, x$12 = offset + 1 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])))])); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
				$s = 17; continue;
			/* } else if (_1 === (32)) { */ case 14:
				_r$13 = fmt.Fprintf(buf, "Index = %d", new sliceType$7([new $Int((x$13 = c.Codes, x$14 = offset + 1 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])))])); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$13;
				/* */ if (!(((x$15 = c.Codes, x$16 = offset + 2 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) === -1))) { $s = 27; continue; }
				/* */ $s = 28; continue;
				/* if (!(((x$15 = c.Codes, x$16 = offset + 2 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) === -1))) { */ case 27:
					_r$14 = fmt.Fprintf(buf, ", Unindex = %d", new sliceType$7([new $Int((x$17 = c.Codes, x$18 = offset + 2 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18])))])); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$14;
				/* } */ case 28:
				$s = 17; continue;
			/* } else if ((_1 === (26)) || (_1 === (27))) { */ case 15:
				_r$15 = fmt.Fprintf(buf, "Value = %d", new sliceType$7([new $Int((x$19 = c.Codes, x$20 = offset + 1 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20])))])); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
				$s = 17; continue;
			/* } else if ((_1 === (38)) || (_1 === (23)) || (_1 === (24)) || (_1 === (25)) || (_1 === (28)) || (_1 === (29))) { */ case 16:
				_r$16 = fmt.Fprintf(buf, "Addr = %d", new sliceType$7([new $Int((x$21 = c.Codes, x$22 = offset + 1 >> 0, ((x$22 < 0 || x$22 >= x$21.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$21.$array[x$21.$offset + x$22])))])); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_r$16;
			/* } */ case 17:
		case 9:
			_2 = op;
			/* */ if ((_2 === (0)) || (_2 === (1)) || (_2 === (3)) || (_2 === (4)) || (_2 === (6)) || (_2 === (7)) || (_2 === (2)) || (_2 === (5)) || (_2 === (8))) { $s = 33; continue; }
			/* */ if ((_2 === (28)) || (_2 === (29))) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if ((_2 === (0)) || (_2 === (1)) || (_2 === (3)) || (_2 === (4)) || (_2 === (6)) || (_2 === (7)) || (_2 === (2)) || (_2 === (5)) || (_2 === (8))) { */ case 33:
				_r$17 = buf.WriteString(", Rep = "); /* */ $s = 36; case 36: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				/* */ if ((x$23 = c.Codes, x$24 = offset + 2 >> 0, ((x$24 < 0 || x$24 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + x$24])) === 2147483647) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if ((x$23 = c.Codes, x$24 = offset + 2 >> 0, ((x$24 < 0 || x$24 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + x$24])) === 2147483647) { */ case 37:
					_r$18 = buf.WriteString("inf"); /* */ $s = 40; case 40: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$18;
					$s = 39; continue;
				/* } else { */ case 38:
					_r$19 = fmt.Fprintf(buf, "%d", new sliceType$7([new $Int((x$25 = c.Codes, x$26 = offset + 2 >> 0, ((x$26 < 0 || x$26 >= x$25.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$25.$array[x$25.$offset + x$26])))])); /* */ $s = 41; case 41: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					_r$19;
				/* } */ case 39:
				$s = 35; continue;
			/* } else if ((_2 === (28)) || (_2 === (29))) { */ case 34:
				_r$20 = buf.WriteString(", Limit = "); /* */ $s = 42; case 42: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$20;
				/* */ if ((x$27 = c.Codes, x$28 = offset + 2 >> 0, ((x$28 < 0 || x$28 >= x$27.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$27.$array[x$27.$offset + x$28])) === 2147483647) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if ((x$27 = c.Codes, x$28 = offset + 2 >> 0, ((x$28 < 0 || x$28 >= x$27.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$27.$array[x$27.$offset + x$28])) === 2147483647) { */ case 43:
					_r$21 = buf.WriteString("inf"); /* */ $s = 46; case 46: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_r$21;
					$s = 45; continue;
				/* } else { */ case 44:
					_r$22 = fmt.Fprintf(buf, "%d", new sliceType$7([new $Int((x$29 = c.Codes, x$30 = offset + 2 >> 0, ((x$30 < 0 || x$30 >= x$29.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$29.$array[x$29.$offset + x$30])))])); /* */ $s = 47; case 47: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_r$22;
				/* } */ case 45:
			/* } */ case 35:
		case 32:
		_r$23 = buf.WriteString(")"); /* */ $s = 48; case 48: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_r$23;
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: Code.ptr.prototype.OpcodeDescription, $c: true, $r, _1, _2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, c, offset, op, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	Code.prototype.OpcodeDescription = function(offset) { return this.$val.OpcodeDescription(offset); };
	Code.ptr.prototype.Dump = function() {
		var {_arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, c, i, x, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		/* */ if (c.RightToLeft) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (c.RightToLeft) { */ case 1:
			_r = fmt.Fprintln(buf, new sliceType$7([new $String("Direction:  right-to-left")])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = fmt.Fprintln(buf, new sliceType$7([new $String("Direction:  left-to-right")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		/* */ if (c.FcPrefix === ptrType$4.nil) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (c.FcPrefix === ptrType$4.nil) { */ case 6:
			_r$2 = fmt.Fprintln(buf, new sliceType$7([new $String("Firstchars: n/a")])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 8; continue;
		/* } else { */ case 7:
			_arg = buf;
			_r$3 = $clone(c.FcPrefix.PrefixSet, CharSet).String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$3);
			_r$4 = fmt.Fprintf(_arg, "Firstchars: %v\n", new sliceType$7([_arg$1])); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 8:
		/* */ if (c.BmPrefix === ptrType$3.nil) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (c.BmPrefix === ptrType$3.nil) { */ case 12:
			_r$5 = fmt.Fprintln(buf, new sliceType$7([new $String("Prefix:     n/a")])); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			$s = 14; continue;
		/* } else { */ case 13:
			_arg$2 = buf;
			_r$6 = Escape(c.BmPrefix.String()); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$3 = new $String(_r$6);
			_r$7 = fmt.Fprintf(_arg$2, "Prefix:     %v\n", new sliceType$7([_arg$3])); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 14:
		_r$8 = fmt.Fprintf(buf, "Anchors:    %v\n", new sliceType$7([new AnchorLoc(c.Anchors)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		_r$9 = fmt.Fprintln(buf, sliceType$7.nil); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9;
		/* */ if (!(c.BmPrefix === ptrType$3.nil)) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (!(c.BmPrefix === ptrType$3.nil)) { */ case 20:
			_r$10 = fmt.Fprintln(buf, new sliceType$7([new $String("BoyerMoore:")])); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			_arg$4 = buf;
			_r$11 = c.BmPrefix.Dump("    "); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$5 = new $String(_r$11);
			_r$12 = fmt.Fprintln(_arg$4, new sliceType$7([_arg$5])); /* */ $s = 24; case 24: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
		/* } */ case 21:
		i = 0;
		/* while (true) { */ case 25:
			/* if (!(i < c.Codes.$length)) { break; } */ if(!(i < c.Codes.$length)) { $s = 26; continue; }
			_arg$6 = buf;
			_r$13 = c.OpcodeDescription(i); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_arg$7 = new $String(_r$13);
			_r$14 = fmt.Fprintln(_arg$6, new sliceType$7([_arg$7])); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
			_r$15 = opcodeSize((((x = c.Codes, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])) >> 0))); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			i = i + (_r$15) >> 0;
		$s = 25; continue;
		case 26:
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: Code.ptr.prototype.Dump, $c: true, $r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, c, i, x, $s};return $f;
	};
	Code.prototype.Dump = function() { return this.$val.Dump(); };
	getCharSetFromCategoryString = function(negateSet, negateCat, cats) {
		var _i, _ref, c, cat, cats, i, negateCat, negateSet, x;
		if (negateCat && negateSet) {
			$panic(new $String("BUG!  You should only negate the set OR the category in a constant setup, but not both"));
		}
		c = new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, negateSet, false);
		c.categories = $makeSlice(sliceType$10, cats.$length);
		_ref = cats;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			cat = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			category.copy((x = c.categories, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), new category.ptr(negateCat, cat));
			_i++;
		}
		return (function() {
			var local;
			local = $clone(c, CharSet);
			return local;
		});
	};
	getCharSetFromOldString = function(setText, negate) {
		var _i, _q, _q$1, _r, _ref, c, fillFirst, first, i, l, negate, r, setText, x, x$1, x$2, x$3;
		c = new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, false, false);
		if (setText.$length > 0) {
			fillFirst = false;
			l = setText.$length;
			if (negate) {
				if ((0 >= setText.$length ? ($throwRuntimeError("index out of range"), undefined) : setText.$array[setText.$offset + 0]) === 0) {
					setText = $subslice(setText, 1);
				} else {
					l = l + (1) >> 0;
					fillFirst = true;
				}
			}
			if ((_r = l % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) {
				c.ranges = $makeSlice(sliceType$9, (_q = l / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			} else {
				c.ranges = $makeSlice(sliceType$9, ((_q$1 = l / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
			}
			first = true;
			if (fillFirst) {
				singleRange.copy((x = c.ranges, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), new singleRange.ptr(0, 0));
				first = false;
			}
			i = 0;
			_ref = setText;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (first) {
					singleRange.copy((x$1 = c.ranges, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), new singleRange.ptr(r, 0));
					first = false;
				} else {
					(x$2 = c.ranges, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).last = r - 1 >> 0;
					i = i + (1) >> 0;
					first = true;
				}
				_i++;
			}
			if (!first) {
				(x$3 = c.ranges, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])).last = 1114111;
			}
		}
		return (function() {
			var local;
			local = $clone(c, CharSet);
			return local;
		});
	};
	CharSet.ptr.prototype.Copy = function() {
		var c, ret, sub;
		c = this;
		ret = new CharSet.ptr(sliceType$9.nil, sliceType$10.nil, ptrType.nil, c.negate, c.anything);
		ret.ranges = $appendSlice(ret.ranges, c.ranges);
		ret.categories = $appendSlice(ret.categories, c.categories);
		if (!(c.sub === ptrType.nil)) {
			sub = $clone($clone(c.sub, CharSet).Copy(), CharSet);
			ret.sub = sub;
		}
		return ret;
	};
	CharSet.prototype.Copy = function() { return this.$val.Copy(); };
	CharSet.ptr.prototype.String = function() {
		var {_i, _i$1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buf, c, c$1, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		_r = buf.WriteRune(91); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if ($clone(c, CharSet).IsNegated()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($clone(c, CharSet).IsNegated()) { */ case 2:
			_r$1 = buf.WriteRune(94); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		_ref = c.ranges;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			r = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), singleRange);
			_r$2 = CharDescription(r.first); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = buf.WriteString(_r$2); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			/* */ if (!((r.first === r.last))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!((r.first === r.last))) { */ case 9:
				/* */ if (!(((r.last - r.first >> 0) === 1))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!(((r.last - r.first >> 0) === 1))) { */ case 11:
					_r$4 = buf.WriteRune(45); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
				/* } */ case 12:
				_r$5 = CharDescription(r.last); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = buf.WriteString(_r$5); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 10:
			_i++;
		$s = 5; continue;
		case 6:
		_ref$1 = c.categories;
		_i$1 = 0;
		/* while (true) { */ case 16:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 17; continue; }
			c$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), category);
			_r$7 = buf.WriteString($clone(c$1, category).String()); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
			_i$1++;
		$s = 16; continue;
		case 17:
		/* */ if (!(c.sub === ptrType.nil)) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (!(c.sub === ptrType.nil)) { */ case 19:
			_r$8 = buf.WriteRune(45); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			_r$9 = $clone(c.sub, CharSet).String(); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = buf.WriteString(_r$9); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
		/* } */ case 20:
		_r$11 = buf.WriteRune(93); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.String, $c: true, $r, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buf, c, c$1, r, $s};return $f;
	};
	CharSet.prototype.String = function() { return this.$val.String(); };
	CharSet.ptr.prototype.mapHashFill = function(buf) {
		var {_i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, buf, c, ct, r, x, x$1, $s, $r, $c} = $restore(this, {buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (c.negate) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (c.negate) { */ case 1:
			_r = buf.WriteByte(0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = buf.WriteByte(1); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		_r$2 = binary.Write(buf, (x = binary.LittleEndian, new x.constructor.elem(x)), new $Int(c.ranges.$length)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = binary.Write(buf, (x$1 = binary.LittleEndian, new x$1.constructor.elem(x$1)), new $Int(c.categories.$length)); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_ref = c.ranges;
		_i = 0;
		/* while (true) { */ case 8:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
			r = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), singleRange);
			_r$4 = buf.WriteRune(r.first); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = buf.WriteRune(r.last); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_i++;
		$s = 8; continue;
		case 9:
		_ref$1 = c.categories;
		_i$1 = 0;
		/* while (true) { */ case 12:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
			ct = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), category);
			_r$6 = buf.WriteString(ct.cat); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			/* */ if (ct.negate) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (ct.negate) { */ case 15:
				_r$7 = buf.WriteByte(1); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				$s = 17; continue;
			/* } else { */ case 16:
				_r$8 = buf.WriteByte(0); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
			/* } */ case 17:
			_i$1++;
		$s = 12; continue;
		case 13:
		/* */ if (!(c.sub === ptrType.nil)) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (!(c.sub === ptrType.nil)) { */ case 20:
			$r = $clone(c.sub, CharSet).mapHashFill(buf); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 21:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.mapHashFill, $c: true, $r, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, buf, c, ct, r, x, x$1, $s};return $f;
	};
	CharSet.prototype.mapHashFill = function(buf) { return this.$val.mapHashFill(buf); };
	CharSet.ptr.prototype.CharIn = function(ch) {
		var _entry, _i, _i$1, _ref, _ref$1, c, ch, ct, r, val;
		c = this;
		val = false;
		_ref = c.ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			r = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), singleRange);
			if (ch < r.first) {
				_i++;
				continue;
			}
			if (ch <= r.last) {
				val = true;
				break;
			}
			_i++;
		}
		if (!val && c.categories.$length > 0) {
			_ref$1 = c.categories;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				ct = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), category);
				if (ct.cat === " ") {
					if (unicode.IsSpace(ch)) {
						val = !ct.negate;
						break;
					} else if (ct.negate) {
						val = true;
						break;
					}
				} else if (ct.cat === "W") {
					if (IsWordChar(ch)) {
						val = !ct.negate;
						break;
					} else if (ct.negate) {
						val = true;
						break;
					}
				} else if (unicode.Is((_entry = $mapIndex(unicodeCategories,$String.keyFor(ct.cat)), _entry !== undefined ? _entry.v : ptrType$9.nil), ch)) {
					val = !ct.negate;
					break;
				} else if (ct.negate) {
					val = true;
					break;
				}
				_i$1++;
			}
		}
		if (c.negate) {
			val = !val;
		}
		if (val && !(c.sub === ptrType.nil)) {
			val = !$clone(c.sub, CharSet).CharIn(ch);
		}
		return val;
	};
	CharSet.prototype.CharIn = function(ch) { return this.$val.CharIn(ch); };
	category.ptr.prototype.String = function() {
		var _1, _entry, _tuple, c, ok;
		c = this;
		_1 = c.cat;
		if (_1 === (" ")) {
			if (c.negate) {
				return "\\S";
			}
			return "\\s";
		} else if (_1 === ("W")) {
			if (c.negate) {
				return "\\W";
			}
			return "\\w";
		}
		_tuple = (_entry = $mapIndex(unicodeCategories,$String.keyFor(c.cat)), _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]);
		ok = _tuple[1];
		if (ok) {
			if (c.negate) {
				return "\\P{" + c.cat + "}";
			}
			return "\\p{" + c.cat + "}";
		}
		return "Unknown category: " + c.cat;
	};
	category.prototype.String = function() { return this.$val.String(); };
	CharDescription = function(ch) {
		var {b, ch, $s, $r, $c} = $restore(this, {ch});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = new bytes.Buffer.ptr(sliceType$1.nil, 0, 0);
		$r = escape(b, ch, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return b.String();
		/* */ } return; } var $f = {$blk: CharDescription, $c: true, $r, b, ch, $s};return $f;
	};
	$pkg.CharDescription = CharDescription;
	IsWordChar = function(r) {
		var _entry, _entry$1, _entry$2, _entry$3, r;
		return unicode.In(r, new sliceType$14([(_entry = $mapIndex(unicode.Categories,$String.keyFor("L")), _entry !== undefined ? _entry.v : ptrType$9.nil), (_entry$1 = $mapIndex(unicode.Categories,$String.keyFor("Mn")), _entry$1 !== undefined ? _entry$1.v : ptrType$9.nil), (_entry$2 = $mapIndex(unicode.Categories,$String.keyFor("Nd")), _entry$2 !== undefined ? _entry$2.v : ptrType$9.nil), (_entry$3 = $mapIndex(unicode.Categories,$String.keyFor("Pc")), _entry$3 !== undefined ? _entry$3.v : ptrType$9.nil)])) || (r === 8205) || (r === 8204);
	};
	$pkg.IsWordChar = IsWordChar;
	IsECMAWordChar = function(r) {
		var _entry, _entry$1, _entry$2, _entry$3, r;
		return unicode.In(r, new sliceType$14([(_entry = $mapIndex(unicode.Categories,$String.keyFor("L")), _entry !== undefined ? _entry.v : ptrType$9.nil), (_entry$1 = $mapIndex(unicode.Categories,$String.keyFor("Mn")), _entry$1 !== undefined ? _entry$1.v : ptrType$9.nil), (_entry$2 = $mapIndex(unicode.Categories,$String.keyFor("Nd")), _entry$2 !== undefined ? _entry$2.v : ptrType$9.nil), (_entry$3 = $mapIndex(unicode.Categories,$String.keyFor("Pc")), _entry$3 !== undefined ? _entry$3.v : ptrType$9.nil)]));
	};
	$pkg.IsECMAWordChar = IsECMAWordChar;
	CharSet.ptr.prototype.SingletonChar = function() {
		var c, x;
		c = this;
		return (x = c.ranges, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).first;
	};
	CharSet.prototype.SingletonChar = function() { return this.$val.SingletonChar(); };
	CharSet.ptr.prototype.IsSingleton = function() {
		var c, x, x$1;
		c = this;
		return !c.negate && (c.categories.$length === 0) && (c.ranges.$length === 1) && c.sub === ptrType.nil && ((x = c.ranges, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).first === (x$1 = c.ranges, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).last);
	};
	CharSet.prototype.IsSingleton = function() { return this.$val.IsSingleton(); };
	CharSet.ptr.prototype.IsSingletonInverse = function() {
		var c, x, x$1;
		c = this;
		return c.negate && (c.categories.$length === 0) && (c.ranges.$length === 1) && c.sub === ptrType.nil && ((x = c.ranges, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).first === (x$1 = c.ranges, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).last);
	};
	CharSet.prototype.IsSingletonInverse = function() { return this.$val.IsSingletonInverse(); };
	CharSet.ptr.prototype.IsMergeable = function() {
		var c;
		c = this;
		return !$clone(c, CharSet).IsNegated() && !$clone(c, CharSet).HasSubtraction();
	};
	CharSet.prototype.IsMergeable = function() { return this.$val.IsMergeable(); };
	CharSet.ptr.prototype.IsNegated = function() {
		var c;
		c = this;
		return c.negate;
	};
	CharSet.prototype.IsNegated = function() { return this.$val.IsNegated(); };
	CharSet.ptr.prototype.HasSubtraction = function() {
		var c;
		c = this;
		return !(c.sub === ptrType.nil);
	};
	CharSet.prototype.HasSubtraction = function() { return this.$val.HasSubtraction(); };
	CharSet.ptr.prototype.IsEmpty = function() {
		var c;
		c = this;
		return (c.ranges.$length === 0) && (c.categories.$length === 0) && c.sub === ptrType.nil;
	};
	CharSet.prototype.IsEmpty = function() { return this.$val.IsEmpty(); };
	CharSet.ptr.prototype.addDigit = function(ecma, negate, pattern) {
		var {_r, _r$1, c, ecma, negate, pattern, $s, $r, $c} = $restore(this, {ecma, negate, pattern});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (ecma) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ecma) { */ case 1:
			/* */ if (negate) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (negate) { */ case 4:
				_r = $pkg.NotECMADigitClass(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = c.addRanges(_r.ranges); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = $pkg.ECMADigitClass(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = c.addRanges(_r$1.ranges); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = c.addCategories(new sliceType$10([$clone(new category.ptr(negate, "Nd"), category)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addDigit, $c: true, $r, _r, _r$1, c, ecma, negate, pattern, $s};return $f;
	};
	CharSet.prototype.addDigit = function(ecma, negate, pattern) { return this.$val.addDigit(ecma, negate, pattern); };
	CharSet.ptr.prototype.addChar = function(ch) {
		var {c, ch, $s, $r, $c} = $restore(this, {ch});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.addRange(ch, ch); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addChar, $c: true, $r, c, ch, $s};return $f;
	};
	CharSet.prototype.addChar = function(ch) { return this.$val.addChar(ch); };
	CharSet.ptr.prototype.addSpace = function(ecma, re2, negate) {
		var {_r, _r$1, _r$2, _r$3, c, ecma, negate, re2, $s, $r, $c} = $restore(this, {ecma, re2, negate});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (ecma) { $s = 1; continue; }
		/* */ if (re2) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ecma) { */ case 1:
			/* */ if (negate) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (negate) { */ case 5:
				_r = $pkg.NotECMASpaceClass(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = c.addRanges(_r.ranges); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else { */ case 6:
				_r$1 = $pkg.ECMASpaceClass(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = c.addRanges(_r$1.ranges); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
			$s = 4; continue;
		/* } else if (re2) { */ case 2:
			/* */ if (negate) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (negate) { */ case 12:
				_r$2 = $pkg.NotRE2SpaceClass(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = c.addRanges(_r$2.ranges); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else { */ case 13:
				_r$3 = $pkg.RE2SpaceClass(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = c.addRanges(_r$3.ranges); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			$s = 4; continue;
		/* } else { */ case 3:
			$r = c.addCategories(new sliceType$10([$clone(new category.ptr(negate, " "), category)])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addSpace, $c: true, $r, _r, _r$1, _r$2, _r$3, c, ecma, negate, re2, $s};return $f;
	};
	CharSet.prototype.addSpace = function(ecma, re2, negate) { return this.$val.addSpace(ecma, re2, negate); };
	CharSet.ptr.prototype.addWord = function(ecma, negate) {
		var {_r, _r$1, c, ecma, negate, $s, $r, $c} = $restore(this, {ecma, negate});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (ecma) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ecma) { */ case 1:
			/* */ if (negate) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (negate) { */ case 4:
				_r = $pkg.NotECMAWordClass(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = c.addRanges(_r.ranges); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = $pkg.ECMAWordClass(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = c.addRanges(_r$1.ranges); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = c.addCategories(new sliceType$10([$clone(new category.ptr(negate, "W"), category)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addWord, $c: true, $r, _r, _r$1, c, ecma, negate, $s};return $f;
	};
	CharSet.prototype.addWord = function(ecma, negate) { return this.$val.addWord(ecma, negate); };
	CharSet.ptr.prototype.addSet = function(set) {
		var {c, set, $s, $r, $c} = $restore(this, {set});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		if (c.anything) {
			$s = -1; return;
		}
		/* */ if (set.anything) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (set.anything) { */ case 1:
			$r = c.makeAnything(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		c.ranges = $appendSlice(c.ranges, set.ranges);
		$r = c.addCategories(set.categories); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.canonicalize(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addSet, $c: true, $r, c, set, $s};return $f;
	};
	CharSet.prototype.addSet = function(set) { return this.$val.addSet(set); };
	CharSet.ptr.prototype.makeAnything = function() {
		var {_r, c, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		c.anything = true;
		c.categories = new sliceType$10([]);
		_r = $pkg.AnyClass(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c.ranges = _r.ranges;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.makeAnything, $c: true, $r, _r, c, $s};return $f;
	};
	CharSet.prototype.makeAnything = function() { return this.$val.makeAnything(); };
	CharSet.ptr.prototype.addCategories = function(cats) {
		var {_i, _i$1, _ref, _ref$1, c, cats, ct, ct2, found, $s, $r, $c} = $restore(this, {cats});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		if (c.anything) {
			$s = -1; return;
		}
		_ref = cats;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			ct = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), category);
			found = false;
			_ref$1 = c.categories;
			_i$1 = 0;
			/* while (true) { */ case 3:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 4; continue; }
				ct2 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), category);
				/* */ if (ct.cat === ct2.cat) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (ct.cat === ct2.cat) { */ case 5:
					/* */ if (!(ct.negate === ct2.negate)) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (!(ct.negate === ct2.negate)) { */ case 7:
						$r = c.makeAnything(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
					/* } */ case 8:
					found = true;
					/* break; */ $s = 4; continue;
				/* } */ case 6:
				_i$1++;
			$s = 3; continue;
			case 4:
			if (!found) {
				c.categories = $append(c.categories, ct);
			}
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addCategories, $c: true, $r, _i, _i$1, _ref, _ref$1, c, cats, ct, ct2, found, $s};return $f;
	};
	CharSet.prototype.addCategories = function(cats) { return this.$val.addCategories(cats); };
	CharSet.ptr.prototype.addRanges = function(ranges) {
		var {c, ranges, $s, $r, $c} = $restore(this, {ranges});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		if (c.anything) {
			$s = -1; return;
		}
		c.ranges = $appendSlice(c.ranges, ranges);
		$r = c.canonicalize(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addRanges, $c: true, $r, c, ranges, $s};return $f;
	};
	CharSet.prototype.addRanges = function(ranges) { return this.$val.addRanges(ranges); };
	CharSet.ptr.prototype.addNegativeRanges = function(ranges) {
		var {_i, _ref, c, hi, r, ranges, $s, $r, $c} = $restore(this, {ranges});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		if (c.anything) {
			$s = -1; return;
		}
		hi = 0;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			r = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), singleRange);
			if (hi < r.first) {
				c.ranges = $append(c.ranges, new singleRange.ptr(hi, r.first - 1 >> 0));
			}
			hi = r.last + 1 >> 0;
			_i++;
		}
		if (hi < 1114111) {
			c.ranges = $append(c.ranges, new singleRange.ptr(hi, 1114111));
		}
		$r = c.canonicalize(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addNegativeRanges, $c: true, $r, _i, _ref, c, hi, r, ranges, $s};return $f;
	};
	CharSet.prototype.addNegativeRanges = function(ranges) { return this.$val.addNegativeRanges(ranges); };
	isValidUnicodeCat = function(catName) {
		var _entry, _tuple, catName, ok;
		_tuple = (_entry = $mapIndex(unicodeCategories,$String.keyFor(catName)), _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]);
		ok = _tuple[1];
		return ok;
	};
	CharSet.ptr.prototype.addCategory = function(categoryName, negate, caseInsensitive, pattern) {
		var {_r, c, caseInsensitive, categoryName, negate, pattern, $s, $r, $c} = $restore(this, {categoryName, negate, caseInsensitive, pattern});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (!isValidUnicodeCat(categoryName)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!isValidUnicodeCat(categoryName)) { */ case 1:
			_r = fmt.Errorf("Unknown unicode category, script, or property '%v'", new sliceType$7([new $String(categoryName)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(_r);
		/* } */ case 2:
		/* */ if (caseInsensitive && (categoryName === "Ll" || categoryName === "Lu" || categoryName === "Lt")) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (caseInsensitive && (categoryName === "Ll" || categoryName === "Lu" || categoryName === "Lt")) { */ case 4:
			$r = c.addCategories(new sliceType$10([$clone(new category.ptr(negate, "Ll"), category), $clone(new category.ptr(negate, "Lu"), category), $clone(new category.ptr(negate, "Lt"), category)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$r = c.addCategories(new sliceType$10([$clone(new category.ptr(negate, categoryName), category)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addCategory, $c: true, $r, _r, c, caseInsensitive, categoryName, negate, pattern, $s};return $f;
	};
	CharSet.prototype.addCategory = function(categoryName, negate, caseInsensitive, pattern) { return this.$val.addCategory(categoryName, negate, caseInsensitive, pattern); };
	CharSet.ptr.prototype.addSubtraction = function(sub) {
		var c, sub;
		c = this;
		c.sub = sub;
	};
	CharSet.prototype.addSubtraction = function(sub) { return this.$val.addSubtraction(sub); };
	CharSet.ptr.prototype.addRange = function(chMin, chMax) {
		var {c, chMax, chMin, $s, $r, $c} = $restore(this, {chMin, chMax});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		c.ranges = $append(c.ranges, new singleRange.ptr(chMin, chMax));
		$r = c.canonicalize(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addRange, $c: true, $r, c, chMax, chMin, $s};return $f;
	};
	CharSet.prototype.addRange = function(chMin, chMax) { return this.$val.addRange(chMin, chMax); };
	CharSet.ptr.prototype.addNamedASCII = function(name, negate) {
		var {_1, c, name, negate, rs, $s, $r, $c} = $restore(this, {name, negate});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		rs = sliceType$9.nil;
			_1 = name;
			/* */ if (_1 === ("alnum")) { $s = 2; continue; }
			/* */ if (_1 === ("alpha")) { $s = 3; continue; }
			/* */ if (_1 === ("ascii")) { $s = 4; continue; }
			/* */ if (_1 === ("blank")) { $s = 5; continue; }
			/* */ if (_1 === ("cntrl")) { $s = 6; continue; }
			/* */ if (_1 === ("digit")) { $s = 7; continue; }
			/* */ if (_1 === ("graph")) { $s = 8; continue; }
			/* */ if (_1 === ("lower")) { $s = 9; continue; }
			/* */ if (_1 === ("print")) { $s = 10; continue; }
			/* */ if (_1 === ("punct")) { $s = 11; continue; }
			/* */ if (_1 === ("space")) { $s = 12; continue; }
			/* */ if (_1 === ("upper")) { $s = 13; continue; }
			/* */ if (_1 === ("word")) { $s = 14; continue; }
			/* */ if (_1 === ("xdigit")) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_1 === ("alnum")) { */ case 2:
				rs = new sliceType$9([$clone(new singleRange.ptr(48, 57), singleRange), $clone(new singleRange.ptr(65, 90), singleRange), $clone(new singleRange.ptr(97, 122), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("alpha")) { */ case 3:
				rs = new sliceType$9([$clone(new singleRange.ptr(65, 90), singleRange), $clone(new singleRange.ptr(97, 122), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("ascii")) { */ case 4:
				rs = new sliceType$9([$clone(new singleRange.ptr(0, 127), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("blank")) { */ case 5:
				rs = new sliceType$9([$clone(new singleRange.ptr(9, 9), singleRange), $clone(new singleRange.ptr(32, 32), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("cntrl")) { */ case 6:
				rs = new sliceType$9([$clone(new singleRange.ptr(0, 31), singleRange), $clone(new singleRange.ptr(127, 127), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("digit")) { */ case 7:
				$r = c.addDigit(false, negate, ""); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_1 === ("graph")) { */ case 8:
				rs = new sliceType$9([$clone(new singleRange.ptr(33, 126), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("lower")) { */ case 9:
				rs = new sliceType$9([$clone(new singleRange.ptr(97, 122), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("print")) { */ case 10:
				rs = new sliceType$9([$clone(new singleRange.ptr(32, 126), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("punct")) { */ case 11:
				rs = new sliceType$9([$clone(new singleRange.ptr(33, 47), singleRange), $clone(new singleRange.ptr(58, 64), singleRange), $clone(new singleRange.ptr(91, 96), singleRange), $clone(new singleRange.ptr(123, 126), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("space")) { */ case 12:
				$r = c.addSpace(true, false, negate); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_1 === ("upper")) { */ case 13:
				rs = new sliceType$9([$clone(new singleRange.ptr(65, 90), singleRange)]);
				$s = 17; continue;
			/* } else if (_1 === ("word")) { */ case 14:
				$r = c.addWord(true, negate); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_1 === ("xdigit")) { */ case 15:
				rs = new sliceType$9([$clone(new singleRange.ptr(48, 57), singleRange), $clone(new singleRange.ptr(65, 70), singleRange), $clone(new singleRange.ptr(97, 102), singleRange)]);
				$s = 17; continue;
			/* } else { */ case 16:
				$s = -1; return false;
			/* } */ case 17:
		case 1:
		/* */ if (rs.$length > 0) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (rs.$length > 0) { */ case 21:
			/* */ if (negate) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (negate) { */ case 23:
				$r = c.addNegativeRanges(rs); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 25; continue;
			/* } else { */ case 24:
				$r = c.addRanges(rs); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 25:
		/* } */ case 22:
		$s = -1; return true;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addNamedASCII, $c: true, $r, _1, c, name, negate, rs, $s};return $f;
	};
	CharSet.prototype.addNamedASCII = function(name, negate) { return this.$val.addNamedASCII(name, negate); };
	singleRangeSorter.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(singleRangeSorter).prototype.Len = function() { return this.$get().Len(); };
	singleRangeSorter.prototype.Less = function(i, j) {
		var i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).first < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]).first;
	};
	$ptrType(singleRangeSorter).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	singleRangeSorter.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = $clone(((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]), singleRange);
		_tmp$1 = $clone(((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]), singleRange);
		singleRange.copy(((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]), _tmp);
		singleRange.copy(((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]), _tmp$1);
	};
	$ptrType(singleRangeSorter).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	CharSet.ptr.prototype.canonicalize = function() {
		var {CurrentRange, _tmp, _tmp$1, _tmp$2, _tmp$3, c, done, i, j, last, x, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		j = _tmp$1;
		last = 0;
		/* */ if (c.ranges.$length > 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (c.ranges.$length > 1) { */ case 1:
			$r = sort.Sort(($convertSliceType(c.ranges, singleRangeSorter))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			done = false;
			_tmp$2 = 1;
			_tmp$3 = 0;
			i = _tmp$2;
			j = _tmp$3;
			while (true) {
				last = (x = c.ranges, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j])).last;
				while (true) {
					if ((i === c.ranges.$length) || (last === 1114111)) {
						done = true;
						break;
					}
					CurrentRange = $clone((x$1 = c.ranges, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), singleRange);
					if (CurrentRange.first > (last + 1 >> 0)) {
						break;
					}
					if (last < CurrentRange.last) {
						last = CurrentRange.last;
					}
					i = i + (1) >> 0;
				}
				singleRange.copy((x$3 = c.ranges, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j])), new singleRange.ptr((x$2 = c.ranges, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j])).first, last));
				j = j + (1) >> 0;
				if (done) {
					break;
				}
				if (j < i) {
					singleRange.copy((x$5 = c.ranges, ((j < 0 || j >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + j])), (x$4 = c.ranges, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])));
				}
				i = i + (1) >> 0;
			}
			c.ranges = $appendSlice($subslice(c.ranges, 0, j), $subslice(c.ranges, c.ranges.$length));
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.canonicalize, $c: true, $r, CurrentRange, _tmp, _tmp$1, _tmp$2, _tmp$3, c, done, i, j, last, x, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	CharSet.prototype.canonicalize = function() { return this.$val.canonicalize(); };
	CharSet.ptr.prototype.addLowercase = function() {
		var {_i, _ref, c, i, lower, r, r$1, toAdd, x, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		if (c.anything) {
			$s = -1; return;
		}
		toAdd = new sliceType$9([]);
		i = 0;
		while (true) {
			if (!(i < c.ranges.$length)) { break; }
			r = $clone((x = c.ranges, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), singleRange);
			if (r.first === r.last) {
				lower = unicode.ToLower(r.first);
				singleRange.copy((x$1 = c.ranges, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), new singleRange.ptr(lower, lower));
			} else {
				toAdd = $append(toAdd, r);
			}
			i = i + (1) >> 0;
		}
		_ref = toAdd;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			r$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), singleRange);
			$r = c.addLowercaseRange(r$1.first, r$1.last); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		$s = 1; continue;
		case 2:
		$r = c.canonicalize(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addLowercase, $c: true, $r, _i, _ref, c, i, lower, r, r$1, toAdd, x, x$1, $s};return $f;
	};
	CharSet.prototype.addLowercase = function() { return this.$val.addLowercase(); };
	CharSet.ptr.prototype.addLowercaseRange = function(chMin, chMax) {
		var {_1, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, c, chMax, chMaxT, chMin, chMinT, i, iMax, iMid, lc, $s, $r, $c} = $restore(this, {chMin, chMax});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		c = this;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		i = _tmp;
		iMax = _tmp$1;
		iMid = _tmp$2;
		_tmp$3 = 0;
		_tmp$4 = 0;
		chMinT = _tmp$3;
		chMaxT = _tmp$4;
		lc = new lcMap.ptr(0, 0, 0, 0);
		_tmp$5 = 0;
		_tmp$6 = lcTable.$length;
		i = _tmp$5;
		iMax = _tmp$6;
		while (true) {
			if (!(i < iMax)) { break; }
			iMid = (_q = ((i + iMax >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (((iMid < 0 || iMid >= lcTable.$length) ? ($throwRuntimeError("index out of range"), undefined) : lcTable.$array[lcTable.$offset + iMid]).chMax < chMin) {
				i = iMid + 1 >> 0;
			} else {
				iMax = iMid;
			}
		}
		/* while (true) { */ case 1:
			/* if (!(i < lcTable.$length)) { break; } */ if(!(i < lcTable.$length)) { $s = 2; continue; }
			lcMap.copy(lc, ((i < 0 || i >= lcTable.$length) ? ($throwRuntimeError("index out of range"), undefined) : lcTable.$array[lcTable.$offset + i]));
			if (lc.chMin > chMax) {
				$s = -1; return;
			}
			chMinT = lc.chMin;
			if (chMinT < chMin) {
				chMinT = chMin;
			}
			chMaxT = lc.chMax;
			if (chMaxT > chMax) {
				chMaxT = chMax;
			}
			switch (0) { default:
				_1 = lc.op;
				if (_1 === (0)) {
					chMinT = (lc.data);
					chMaxT = (lc.data);
					break;
				} else if (_1 === (1)) {
					chMinT = chMinT + (lc.data) >> 0;
					chMaxT = chMaxT + (lc.data) >> 0;
					break;
				} else if (_1 === (2)) {
					chMinT = chMinT | (1);
					chMaxT = chMaxT | (1);
					break;
				} else if (_1 === (3)) {
					chMinT = chMinT + (((chMinT & 1))) >> 0;
					chMaxT = chMaxT + (((chMaxT & 1))) >> 0;
					break;
				}
			}
			/* */ if (chMinT < chMin || chMaxT > chMax) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (chMinT < chMin || chMaxT > chMax) { */ case 3:
				$r = c.addRange(chMinT, chMaxT); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: CharSet.ptr.prototype.addLowercaseRange, $c: true, $r, _1, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, c, chMax, chMaxT, chMin, chMinT, i, iMax, iMid, lc, $s};return $f;
	};
	CharSet.prototype.addLowercaseRange = function(chMin, chMax) { return this.$val.addLowercaseRange(chMin, chMax); };
	ptrType$10.methods = [{prop: "codeFromTree", name: "codeFromTree", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType$8], [ptrType$1, $error], false)}, {prop: "emitFragment", name: "emitFragment", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([nodeType, ptrType$2, $Int], [$error], false)}, {prop: "pushInt", name: "pushInt", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [], false)}, {prop: "emptyStack", name: "emptyStack", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "popInt", name: "popInt", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int], false)}, {prop: "curPos", name: "curPos", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int], false)}, {prop: "patchJump", name: "patchJump", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int, $Int], [], false)}, {prop: "setCode", name: "setCode", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType], [$Int], false)}, {prop: "stringCode", name: "stringCode", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([sliceType$2], [$Int], false)}, {prop: "mapCapnum", name: "mapCapnum", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [$Int], false)}, {prop: "emit", name: "emit", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([InstOp], [], false)}, {prop: "emit1", name: "emit1", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([InstOp, $Int], [], false)}, {prop: "emit2", name: "emit2", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([InstOp, $Int, $Int], [], false)}];
	ptrType$8.methods = [{prop: "Dump", name: "Dump", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "writeStrToBuf", name: "writeStrToBuf", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType$11], [], false)}, {prop: "addChild", name: "addChild", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType$2], [], false)}, {prop: "insertChildren", name: "insertChildren", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int, sliceType$8], [], false)}, {prop: "removeChildren", name: "removeChildren", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int, $Int], [], false)}, {prop: "makeRep", name: "makeRep", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([nodeType, $Int, $Int], [], false)}, {prop: "reduce", name: "reduce", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2], false)}, {prop: "reduceAlternation", name: "reduceAlternation", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2], false)}, {prop: "reduceConcatenation", name: "reduceConcatenation", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2], false)}, {prop: "reduceRep", name: "reduceRep", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2], false)}, {prop: "stripEnation", name: "stripEnation", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([nodeType], [ptrType$2], false)}, {prop: "reduceGroup", name: "reduceGroup", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2], false)}, {prop: "reduceSet", name: "reduceSet", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2], false)}, {prop: "reverseLeft", name: "reverseLeft", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2], false)}, {prop: "makeQuantifier", name: "makeQuantifier", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Bool, $Int, $Int], [ptrType$2], false)}, {prop: "description", name: "description", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$String], false)}, {prop: "dump", name: "dump", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$String], false)}];
	ptrType$12.methods = [{prop: "regexFCFromRegexTree", name: "regexFCFromRegexTree", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType$8], [ptrType$7], false)}, {prop: "pushInt", name: "pushInt", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [], false)}, {prop: "intIsEmpty", name: "intIsEmpty", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "popInt", name: "popInt", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int], false)}, {prop: "pushFC", name: "pushFC", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([regexFc], [], false)}, {prop: "fcIsEmpty", name: "fcIsEmpty", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "popFC", name: "popFC", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$7], false)}, {prop: "topFC", name: "topFC", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$7], false)}, {prop: "skipChild", name: "skipChild", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "calculateFC", name: "calculateFC", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([nodeType, ptrType$2, $Int], [], false)}];
	ptrType$7.methods = [{prop: "getFirstChars", name: "getFirstChars", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [CharSet], false)}, {prop: "addFC", name: "addFC", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([regexFc, $Bool], [$Bool], false)}];
	ptrType$3.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Dump", name: "Dump", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([sliceType$2, $Int, $Int, $Int], [$Int], false)}, {prop: "IsMatch", name: "IsMatch", pkg: "", typ: $funcType([sliceType$2, $Int, $Int, $Int], [$Bool], false)}, {prop: "matchPattern", name: "matchPattern", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([sliceType$2, $Int], [$Bool], false)}];
	AnchorLoc.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ErrorCode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$14.methods = [{prop: "setPattern", name: "setPattern", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$String], [], false)}, {prop: "getErr", name: "getErr", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ErrorCode, sliceType$7], [$error], true)}, {prop: "noteCaptureSlot", name: "noteCaptureSlot", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int, $Int], [], false)}, {prop: "noteCaptureName", name: "noteCaptureName", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$String, $Int], [], false)}, {prop: "assignNameSlots", name: "assignNameSlots", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "consumeAutocap", name: "consumeAutocap", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int], false)}, {prop: "countCaptures", name: "countCaptures", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$error], false)}, {prop: "reset", name: "reset", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([RegexOptions], [], false)}, {prop: "scanRegex", name: "scanRegex", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2, $error], false)}, {prop: "scanReplacement", name: "scanReplacement", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2, $error], false)}, {prop: "scanDollar", name: "scanDollar", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2, $error], false)}, {prop: "scanGroupOpen", name: "scanGroupOpen", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [ptrType$2, $error], false)}, {prop: "scanBackslash", name: "scanBackslash", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Bool], [ptrType$2, $error], false)}, {prop: "scanBasicBackslash", name: "scanBasicBackslash", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Bool], [ptrType$2, $error], false)}, {prop: "parseProperty", name: "parseProperty", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$String, $error], false)}, {prop: "typeFromCode", name: "typeFromCode", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int32], [nodeType], false)}, {prop: "scanBlank", name: "scanBlank", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$error], false)}, {prop: "scanCapname", name: "scanCapname", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$String], false)}, {prop: "scanCharSet", name: "scanCharSet", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Bool, $Bool], [ptrType, $error], false)}, {prop: "scanDecimal", name: "scanDecimal", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int, $error], false)}, {prop: "scanOptions", name: "scanOptions", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "scanCharEscape", name: "scanCharEscape", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int32, $error], false)}, {prop: "scanControl", name: "scanControl", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int32, $error], false)}, {prop: "scanHexUntilBrace", name: "scanHexUntilBrace", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int32, $error], false)}, {prop: "scanHex", name: "scanHex", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [$Int32, $error], false)}, {prop: "scanOctal", name: "scanOctal", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int32], false)}, {prop: "textpos", name: "textpos", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int], false)}, {prop: "textto", name: "textto", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [], false)}, {prop: "moveRightGetChar", name: "moveRightGetChar", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int32], false)}, {prop: "moveRight", name: "moveRight", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [], false)}, {prop: "moveLeft", name: "moveLeft", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "charAt", name: "charAt", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [$Int32], false)}, {prop: "rightChar", name: "rightChar", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [$Int32], false)}, {prop: "charsRight", name: "charsRight", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Int], false)}, {prop: "rightMost", name: "rightMost", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "captureSlotFromName", name: "captureSlotFromName", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$String], [$Int], false)}, {prop: "isCaptureSlot", name: "isCaptureSlot", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int], [$Bool], false)}, {prop: "isCaptureName", name: "isCaptureName", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$String], [$Bool], false)}, {prop: "useOptionN", name: "useOptionN", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "useOptionI", name: "useOptionI", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "useOptionM", name: "useOptionM", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "useOptionS", name: "useOptionS", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "useOptionX", name: "useOptionX", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "useOptionE", name: "useOptionE", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "useRE2", name: "useRE2", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "useOptionU", name: "useOptionU", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "emptyOptionsStack", name: "emptyOptionsStack", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "addConcatenate", name: "addConcatenate", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "addConcatenate3", name: "addConcatenate3", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Bool, $Int, $Int], [], false)}, {prop: "addUnitOne", name: "addUnitOne", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int32], [], false)}, {prop: "addUnitNotone", name: "addUnitNotone", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int32], [], false)}, {prop: "addUnitSet", name: "addUnitSet", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType], [], false)}, {prop: "addUnitNode", name: "addUnitNode", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType$2], [], false)}, {prop: "addUnitType", name: "addUnitType", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([nodeType], [], false)}, {prop: "addGroup", name: "addGroup", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$error], false)}, {prop: "popKeepOptions", name: "popKeepOptions", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "popOptions", name: "popOptions", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "pushOptions", name: "pushOptions", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "addToConcatenate", name: "addToConcatenate", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int, $Int, $Bool], [], false)}, {prop: "pushGroup", name: "pushGroup", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "popGroup", name: "popGroup", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$error], false)}, {prop: "emptyStack", name: "emptyStack", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}, {prop: "startGroup", name: "startGroup", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType$2], [], false)}, {prop: "addAlternate", name: "addAlternate", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "isTrueQuantifier", name: "isTrueQuantifier", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [$Bool], false)}];
	ptrType$1.methods = [{prop: "OpcodeDescription", name: "OpcodeDescription", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "Dump", name: "Dump", pkg: "", typ: $funcType([], [$String], false)}];
	CharSet.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [CharSet], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "mapHashFill", name: "mapHashFill", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType$11], [], false)}, {prop: "CharIn", name: "CharIn", pkg: "", typ: $funcType([$Int32], [$Bool], false)}, {prop: "SingletonChar", name: "SingletonChar", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "IsSingleton", name: "IsSingleton", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsSingletonInverse", name: "IsSingletonInverse", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsMergeable", name: "IsMergeable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNegated", name: "IsNegated", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "HasSubtraction", name: "HasSubtraction", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType.methods = [{prop: "addDigit", name: "addDigit", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Bool, $Bool, $String], [], false)}, {prop: "addChar", name: "addChar", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int32], [], false)}, {prop: "addSpace", name: "addSpace", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Bool, $Bool, $Bool], [], false)}, {prop: "addWord", name: "addWord", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Bool, $Bool], [], false)}, {prop: "addSet", name: "addSet", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([CharSet], [], false)}, {prop: "makeAnything", name: "makeAnything", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "addCategories", name: "addCategories", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([sliceType$10], [], true)}, {prop: "addRanges", name: "addRanges", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([sliceType$9], [], false)}, {prop: "addNegativeRanges", name: "addNegativeRanges", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([sliceType$9], [], false)}, {prop: "addCategory", name: "addCategory", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$String, $Bool, $Bool, $String], [], false)}, {prop: "addSubtraction", name: "addSubtraction", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([ptrType], [], false)}, {prop: "addRange", name: "addRange", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int32, $Int32], [], false)}, {prop: "addNamedASCII", name: "addNamedASCII", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "canonicalize", name: "canonicalize", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "addLowercase", name: "addLowercase", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([], [], false)}, {prop: "addLowercaseRange", name: "addLowercaseRange", pkg: "github.com/dlclark/regexp2/syntax", typ: $funcType([$Int32, $Int32], [], false)}];
	category.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	singleRangeSorter.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	writer.init("github.com/dlclark/regexp2/syntax", [{prop: "emitted", name: "emitted", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "intStack", name: "intStack", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "curpos", name: "curpos", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "stringhash", name: "stringhash", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "stringtable", name: "stringtable", embedded: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "sethash", name: "sethash", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "settable", name: "settable", embedded: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "counting", name: "counting", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "count", name: "count", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "trackcount", name: "trackcount", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "caps", name: "caps", embedded: false, exported: false, typ: mapType$1, tag: ""}]);
	RegexTree.init("github.com/dlclark/regexp2/syntax", [{prop: "root", name: "root", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "caps", name: "caps", embedded: false, exported: false, typ: mapType$1, tag: ""}, {prop: "capnumlist", name: "capnumlist", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "captop", name: "captop", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "Capnames", name: "Capnames", embedded: false, exported: true, typ: mapType, tag: ""}, {prop: "Caplist", name: "Caplist", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "options", name: "options", embedded: false, exported: false, typ: RegexOptions, tag: ""}]);
	regexNode.init("github.com/dlclark/regexp2/syntax", [{prop: "t", name: "t", embedded: false, exported: false, typ: nodeType, tag: ""}, {prop: "children", name: "children", embedded: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "str", name: "str", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "set", name: "set", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "ch", name: "ch", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "m", name: "m", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "n", name: "n", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "options", name: "options", embedded: false, exported: false, typ: RegexOptions, tag: ""}, {prop: "next", name: "next", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	ReplacerData.init("", [{prop: "Rep", name: "Rep", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Strings", name: "Strings", embedded: false, exported: true, typ: sliceType, tag: ""}, {prop: "Rules", name: "Rules", embedded: false, exported: true, typ: sliceType$4, tag: ""}]);
	Prefix.init("", [{prop: "PrefixStr", name: "PrefixStr", embedded: false, exported: true, typ: sliceType$2, tag: ""}, {prop: "PrefixSet", name: "PrefixSet", embedded: false, exported: true, typ: CharSet, tag: ""}, {prop: "CaseInsensitive", name: "CaseInsensitive", embedded: false, exported: true, typ: $Bool, tag: ""}]);
	regexFcd.init("github.com/dlclark/regexp2/syntax", [{prop: "intStack", name: "intStack", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "intDepth", name: "intDepth", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "fcStack", name: "fcStack", embedded: false, exported: false, typ: sliceType$12, tag: ""}, {prop: "fcDepth", name: "fcDepth", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "skipAllChildren", name: "skipAllChildren", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "skipchild", name: "skipchild", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "failed", name: "failed", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	regexFc.init("github.com/dlclark/regexp2/syntax", [{prop: "cc", name: "cc", embedded: false, exported: false, typ: CharSet, tag: ""}, {prop: "nullable", name: "nullable", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "caseInsensitive", name: "caseInsensitive", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	BmPrefix.init("github.com/dlclark/regexp2/syntax", [{prop: "positive", name: "positive", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "negativeASCII", name: "negativeASCII", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "negativeUnicode", name: "negativeUnicode", embedded: false, exported: false, typ: sliceType$13, tag: ""}, {prop: "pattern", name: "pattern", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "lowASCII", name: "lowASCII", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "highASCII", name: "highASCII", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "rightToLeft", name: "rightToLeft", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "caseInsensitive", name: "caseInsensitive", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	Error.init("", [{prop: "Code", name: "Code", embedded: false, exported: true, typ: ErrorCode, tag: ""}, {prop: "Expr", name: "Expr", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Args", name: "Args", embedded: false, exported: true, typ: sliceType$7, tag: ""}]);
	parser.init("github.com/dlclark/regexp2/syntax", [{prop: "stack", name: "stack", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "group", name: "group", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "alternation", name: "alternation", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "concatenation", name: "concatenation", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "unit", name: "unit", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "patternRaw", name: "patternRaw", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "pattern", name: "pattern", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "currentPos", name: "currentPos", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "specialCase", name: "specialCase", embedded: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "autocap", name: "autocap", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "capcount", name: "capcount", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "captop", name: "captop", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "capsize", name: "capsize", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "caps", name: "caps", embedded: false, exported: false, typ: mapType$1, tag: ""}, {prop: "capnames", name: "capnames", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "capnumlist", name: "capnumlist", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "capnamelist", name: "capnamelist", embedded: false, exported: false, typ: sliceType, tag: ""}, {prop: "options", name: "options", embedded: false, exported: false, typ: RegexOptions, tag: ""}, {prop: "optionsStack", name: "optionsStack", embedded: false, exported: false, typ: sliceType$11, tag: ""}, {prop: "ignoreNextParen", name: "ignoreNextParen", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	Code.init("", [{prop: "Codes", name: "Codes", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "Strings", name: "Strings", embedded: false, exported: true, typ: sliceType$5, tag: ""}, {prop: "Sets", name: "Sets", embedded: false, exported: true, typ: sliceType$6, tag: ""}, {prop: "TrackCount", name: "TrackCount", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Caps", name: "Caps", embedded: false, exported: true, typ: mapType$1, tag: ""}, {prop: "Capsize", name: "Capsize", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "FcPrefix", name: "FcPrefix", embedded: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "BmPrefix", name: "BmPrefix", embedded: false, exported: true, typ: ptrType$3, tag: ""}, {prop: "Anchors", name: "Anchors", embedded: false, exported: true, typ: AnchorLoc, tag: ""}, {prop: "RightToLeft", name: "RightToLeft", embedded: false, exported: true, typ: $Bool, tag: ""}]);
	CharSet.init("github.com/dlclark/regexp2/syntax", [{prop: "ranges", name: "ranges", embedded: false, exported: false, typ: sliceType$9, tag: ""}, {prop: "categories", name: "categories", embedded: false, exported: false, typ: sliceType$10, tag: ""}, {prop: "sub", name: "sub", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "negate", name: "negate", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "anything", name: "anything", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	category.init("github.com/dlclark/regexp2/syntax", [{prop: "negate", name: "negate", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "cat", name: "cat", embedded: false, exported: false, typ: $String, tag: ""}]);
	singleRange.init("github.com/dlclark/regexp2/syntax", [{prop: "first", name: "first", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "last", name: "last", embedded: false, exported: false, typ: $Int32, tag: ""}]);
	singleRangeSorter.init(singleRange);
	lcMap.init("github.com/dlclark/regexp2/syntax", [{prop: "chMin", name: "chMin", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "chMax", name: "chMax", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "op", name: "op", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "data", name: "data", embedded: false, exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		typeStr = new sliceType(["Onerep", "Notonerep", "Setrep", "Oneloop", "Notoneloop", "Setloop", "Onelazy", "Notonelazy", "Setlazy", "One", "Notone", "Set", "Multi", "Ref", "Bol", "Eol", "Boundary", "Nonboundary", "Beginning", "Start", "EndZ", "End", "Nothing", "Empty", "Alternate", "Concatenate", "Loop", "Lazyloop", "Capture", "Group", "Require", "Prevent", "Greedy", "Testref", "Testgroup", "Unknown", "Unknown", "Unknown", "Unknown", "Unknown", "Unknown", "ECMABoundary", "NonECMABoundary"]);
		padSpace = (new sliceType$1($stringToBytes("                                ")));
		$pkg.ErrReplacementError = errors.New("Replacement pattern error.");
		_category = new sliceType$1([0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 4, 0, 0, 0, 4, 4, 5, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0]);
		codeStr = new sliceType(["Onerep", "Notonerep", "Setrep", "Oneloop", "Notoneloop", "Setloop", "Onelazy", "Notonelazy", "Setlazy", "One", "Notone", "Set", "Multi", "Ref", "Bol", "Eol", "Boundary", "Nonboundary", "Beginning", "Start", "EndZ", "End", "Nothing", "Lazybranch", "Branchmark", "Lazybranchmark", "Nullcount", "Setcount", "Branchcount", "Lazybranchcount", "Nullmark", "Setmark", "Capturemark", "Getmark", "Setjump", "Backjump", "Forejump", "Testref", "Goto", "Prune", "Stop", "ECMABoundary", "NonECMABoundary"]);
		ecmaSpace = new sliceType$2([9, 14, 32, 33, 160, 161, 5760, 5761, 8192, 8203, 8232, 8234, 8239, 8240, 8287, 8288, 12288, 12289, 65279, 65280]);
		ecmaWord = new sliceType$2([48, 58, 65, 91, 95, 96, 97, 123]);
		ecmaDigit = new sliceType$2([48, 58]);
		re2Space = new sliceType$2([9, 11, 12, 14, 32, 33]);
		$pkg.AnyClass = getCharSetFromOldString(new sliceType$2([0]), false);
		$pkg.ECMAAnyClass = getCharSetFromOldString(new sliceType$2([0, 10, 11, 13, 14]), false);
		$pkg.NoneClass = getCharSetFromOldString(sliceType$2.nil, false);
		$pkg.ECMAWordClass = getCharSetFromOldString(ecmaWord, false);
		$pkg.NotECMAWordClass = getCharSetFromOldString(ecmaWord, true);
		$pkg.ECMASpaceClass = getCharSetFromOldString(ecmaSpace, false);
		$pkg.NotECMASpaceClass = getCharSetFromOldString(ecmaSpace, true);
		$pkg.ECMADigitClass = getCharSetFromOldString(ecmaDigit, false);
		$pkg.NotECMADigitClass = getCharSetFromOldString(ecmaDigit, true);
		$pkg.WordClass = getCharSetFromCategoryString(false, false, new sliceType(["W"]));
		$pkg.NotWordClass = getCharSetFromCategoryString(true, false, new sliceType(["W"]));
		$pkg.SpaceClass = getCharSetFromCategoryString(false, false, new sliceType([" "]));
		$pkg.NotSpaceClass = getCharSetFromCategoryString(true, false, new sliceType([" "]));
		$pkg.DigitClass = getCharSetFromCategoryString(false, false, new sliceType(["Nd"]));
		$pkg.NotDigitClass = getCharSetFromCategoryString(false, true, new sliceType(["Nd"]));
		$pkg.RE2SpaceClass = getCharSetFromOldString(re2Space, false);
		$pkg.NotRE2SpaceClass = getCharSetFromOldString(re2Space, true);
		unicodeCategories = (function() {
			var _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _keys, _keys$1, _keys$2, _ref, _ref$1, _ref$2, _size, _size$1, _size$2, k, k$1, k$2, retVal, v, v$1, v$2;
			retVal = new $global.Map();
			_ref = unicode.Scripts;
			_i = 0;
			_keys = _ref ? _ref.keys() : undefined;
			_size = _ref ? _ref.size : 0;
			while (true) {
				if (!(_i < _size)) { break; }
				_key = _keys.next().value;
				_entry = _ref.get(_key);
				if (_entry === undefined) {
					_i++;
					continue;
				}
				k = _entry.k;
				v = _entry.v;
				_key$1 = k; (retVal || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$1), { k: _key$1, v: v });
				_i++;
			}
			_ref$1 = unicode.Categories;
			_i$1 = 0;
			_keys$1 = _ref$1 ? _ref$1.keys() : undefined;
			_size$1 = _ref$1 ? _ref$1.size : 0;
			while (true) {
				if (!(_i$1 < _size$1)) { break; }
				_key$2 = _keys$1.next().value;
				_entry$1 = _ref$1.get(_key$2);
				if (_entry$1 === undefined) {
					_i$1++;
					continue;
				}
				k$1 = _entry$1.k;
				v$1 = _entry$1.v;
				_key$3 = k$1; (retVal || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$3), { k: _key$3, v: v$1 });
				_i$1++;
			}
			_ref$2 = unicode.Properties;
			_i$2 = 0;
			_keys$2 = _ref$2 ? _ref$2.keys() : undefined;
			_size$2 = _ref$2 ? _ref$2.size : 0;
			while (true) {
				if (!(_i$2 < _size$2)) { break; }
				_key$4 = _keys$2.next().value;
				_entry$2 = _ref$2.get(_key$4);
				if (_entry$2 === undefined) {
					_i$2++;
					continue;
				}
				k$2 = _entry$2.k;
				v$2 = _entry$2.v;
				_key$5 = k$2; (retVal || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$5), { k: _key$5, v: v$2 });
				_i$2++;
			}
			return retVal;
		})();
		lcTable = new sliceType$3([$clone(new lcMap.ptr(65, 90, 1, 32), lcMap), $clone(new lcMap.ptr(192, 222, 1, 32), lcMap), $clone(new lcMap.ptr(256, 302, 2, 0), lcMap), $clone(new lcMap.ptr(304, 304, 0, 105), lcMap), $clone(new lcMap.ptr(306, 310, 2, 0), lcMap), $clone(new lcMap.ptr(313, 327, 3, 0), lcMap), $clone(new lcMap.ptr(330, 374, 2, 0), lcMap), $clone(new lcMap.ptr(376, 376, 0, 255), lcMap), $clone(new lcMap.ptr(377, 381, 3, 0), lcMap), $clone(new lcMap.ptr(385, 385, 0, 595), lcMap), $clone(new lcMap.ptr(386, 388, 2, 0), lcMap), $clone(new lcMap.ptr(390, 390, 0, 596), lcMap), $clone(new lcMap.ptr(391, 391, 0, 392), lcMap), $clone(new lcMap.ptr(393, 394, 1, 205), lcMap), $clone(new lcMap.ptr(395, 395, 0, 396), lcMap), $clone(new lcMap.ptr(398, 398, 0, 477), lcMap), $clone(new lcMap.ptr(399, 399, 0, 601), lcMap), $clone(new lcMap.ptr(400, 400, 0, 603), lcMap), $clone(new lcMap.ptr(401, 401, 0, 402), lcMap), $clone(new lcMap.ptr(403, 403, 0, 608), lcMap), $clone(new lcMap.ptr(404, 404, 0, 611), lcMap), $clone(new lcMap.ptr(406, 406, 0, 617), lcMap), $clone(new lcMap.ptr(407, 407, 0, 616), lcMap), $clone(new lcMap.ptr(408, 408, 0, 409), lcMap), $clone(new lcMap.ptr(412, 412, 0, 623), lcMap), $clone(new lcMap.ptr(413, 413, 0, 626), lcMap), $clone(new lcMap.ptr(415, 415, 0, 629), lcMap), $clone(new lcMap.ptr(416, 420, 2, 0), lcMap), $clone(new lcMap.ptr(423, 423, 0, 424), lcMap), $clone(new lcMap.ptr(425, 425, 0, 643), lcMap), $clone(new lcMap.ptr(428, 428, 0, 429), lcMap), $clone(new lcMap.ptr(430, 430, 0, 648), lcMap), $clone(new lcMap.ptr(431, 431, 0, 432), lcMap), $clone(new lcMap.ptr(433, 434, 1, 217), lcMap), $clone(new lcMap.ptr(435, 437, 3, 0), lcMap), $clone(new lcMap.ptr(439, 439, 0, 658), lcMap), $clone(new lcMap.ptr(440, 440, 0, 441), lcMap), $clone(new lcMap.ptr(444, 444, 0, 445), lcMap), $clone(new lcMap.ptr(452, 453, 0, 454), lcMap), $clone(new lcMap.ptr(455, 456, 0, 457), lcMap), $clone(new lcMap.ptr(458, 459, 0, 460), lcMap), $clone(new lcMap.ptr(461, 475, 3, 0), lcMap), $clone(new lcMap.ptr(478, 494, 2, 0), lcMap), $clone(new lcMap.ptr(497, 498, 0, 499), lcMap), $clone(new lcMap.ptr(500, 500, 0, 501), lcMap), $clone(new lcMap.ptr(506, 534, 2, 0), lcMap), $clone(new lcMap.ptr(902, 902, 0, 940), lcMap), $clone(new lcMap.ptr(904, 906, 1, 37), lcMap), $clone(new lcMap.ptr(908, 908, 0, 972), lcMap), $clone(new lcMap.ptr(910, 911, 1, 63), lcMap), $clone(new lcMap.ptr(913, 939, 1, 32), lcMap), $clone(new lcMap.ptr(994, 1006, 2, 0), lcMap), $clone(new lcMap.ptr(1025, 1039, 1, 80), lcMap), $clone(new lcMap.ptr(1040, 1071, 1, 32), lcMap), $clone(new lcMap.ptr(1120, 1152, 2, 0), lcMap), $clone(new lcMap.ptr(1168, 1214, 2, 0), lcMap), $clone(new lcMap.ptr(1217, 1219, 3, 0), lcMap), $clone(new lcMap.ptr(1223, 1223, 0, 1224), lcMap), $clone(new lcMap.ptr(1227, 1227, 0, 1228), lcMap), $clone(new lcMap.ptr(1232, 1258, 2, 0), lcMap), $clone(new lcMap.ptr(1262, 1268, 2, 0), lcMap), $clone(new lcMap.ptr(1272, 1272, 0, 1273), lcMap), $clone(new lcMap.ptr(1329, 1366, 1, 48), lcMap), $clone(new lcMap.ptr(4256, 4293, 1, 48), lcMap), $clone(new lcMap.ptr(7680, 7928, 2, 0), lcMap), $clone(new lcMap.ptr(7944, 7951, 1, -8), lcMap), $clone(new lcMap.ptr(7960, 7967, 1, -8), lcMap), $clone(new lcMap.ptr(7976, 7983, 1, -8), lcMap), $clone(new lcMap.ptr(7992, 7999, 1, -8), lcMap), $clone(new lcMap.ptr(8008, 8013, 1, -8), lcMap), $clone(new lcMap.ptr(8025, 8025, 0, 8017), lcMap), $clone(new lcMap.ptr(8027, 8027, 0, 8019), lcMap), $clone(new lcMap.ptr(8029, 8029, 0, 8021), lcMap), $clone(new lcMap.ptr(8031, 8031, 0, 8023), lcMap), $clone(new lcMap.ptr(8040, 8047, 1, -8), lcMap), $clone(new lcMap.ptr(8072, 8079, 1, -8), lcMap), $clone(new lcMap.ptr(8088, 8095, 1, -8), lcMap), $clone(new lcMap.ptr(8104, 8111, 1, -8), lcMap), $clone(new lcMap.ptr(8120, 8121, 1, -8), lcMap), $clone(new lcMap.ptr(8122, 8123, 1, -74), lcMap), $clone(new lcMap.ptr(8124, 8124, 0, 8115), lcMap), $clone(new lcMap.ptr(8136, 8139, 1, -86), lcMap), $clone(new lcMap.ptr(8140, 8140, 0, 8131), lcMap), $clone(new lcMap.ptr(8152, 8153, 1, -8), lcMap), $clone(new lcMap.ptr(8154, 8155, 1, -100), lcMap), $clone(new lcMap.ptr(8168, 8169, 1, -8), lcMap), $clone(new lcMap.ptr(8170, 8171, 1, -112), lcMap), $clone(new lcMap.ptr(8172, 8172, 0, 8165), lcMap), $clone(new lcMap.ptr(8184, 8185, 1, -128), lcMap), $clone(new lcMap.ptr(8186, 8187, 1, -126), lcMap), $clone(new lcMap.ptr(8188, 8188, 0, 8179), lcMap), $clone(new lcMap.ptr(8544, 8559, 1, 16), lcMap), $clone(new lcMap.ptr(9398, 9424, 1, 26), lcMap), $clone(new lcMap.ptr(65313, 65338, 1, 32), lcMap)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/dlclark/regexp2"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, syntax, math, strconv, strings, sync, atomic, time, unicode, runner, MatchEvaluator, Regexp, RegexOptions, Match, Group, Capture, fasttime, fastclock, atomicTime, ptrType, ptrType$1, sliceType, sliceType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$2, ptrType$6, ptrType$7, sliceType$3, sliceType$4, ptrType$8, ptrType$9, ptrType$10, sliceType$5, ptrType$11, sliceType$6, sliceType$7, sliceType$8, ptrType$12, ptrType$13, mapType, mapType$1, ptrType$14, ptrType$15, ptrType$16, fast, clockPeriod, doubleIntSlice, replace, replacementImpl, replacementImplRTL, Compile, MustCompile, quote, getRunes, newMatch, newMatchSparse, newGroup, makeDeadline, extendClock, durationToTicks, runClock;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	syntax = $packages["github.com/dlclark/regexp2/syntax"];
	math = $packages["math"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	time = $packages["time"];
	unicode = $packages["unicode"];
	runner = $pkg.runner = $newType(0, $kindStruct, "regexp2.runner", true, "github.com/dlclark/regexp2", false, function(re_, code_, runtextstart_, runtext_, runtextpos_, runtextend_, runtrack_, runtrackpos_, runstack_, runstackpos_, runcrawl_, runcrawlpos_, runtrackcount_, runmatch_, ignoreTimeout_, timeout_, deadline_, operator_, codepos_, rightToLeft_, caseInsensitive_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.re = ptrType$6.nil;
			this.code = ptrType$7.nil;
			this.runtextstart = 0;
			this.runtext = sliceType$3.nil;
			this.runtextpos = 0;
			this.runtextend = 0;
			this.runtrack = sliceType$1.nil;
			this.runtrackpos = 0;
			this.runstack = sliceType$1.nil;
			this.runstackpos = 0;
			this.runcrawl = sliceType$1.nil;
			this.runcrawlpos = 0;
			this.runtrackcount = 0;
			this.runmatch = ptrType$1.nil;
			this.ignoreTimeout = false;
			this.timeout = new time.Duration(0, 0);
			this.deadline = new fasttime(0, 0);
			this.operator = 0;
			this.codepos = 0;
			this.rightToLeft = false;
			this.caseInsensitive = false;
			return;
		}
		this.re = re_;
		this.code = code_;
		this.runtextstart = runtextstart_;
		this.runtext = runtext_;
		this.runtextpos = runtextpos_;
		this.runtextend = runtextend_;
		this.runtrack = runtrack_;
		this.runtrackpos = runtrackpos_;
		this.runstack = runstack_;
		this.runstackpos = runstackpos_;
		this.runcrawl = runcrawl_;
		this.runcrawlpos = runcrawlpos_;
		this.runtrackcount = runtrackcount_;
		this.runmatch = runmatch_;
		this.ignoreTimeout = ignoreTimeout_;
		this.timeout = timeout_;
		this.deadline = deadline_;
		this.operator = operator_;
		this.codepos = codepos_;
		this.rightToLeft = rightToLeft_;
		this.caseInsensitive = caseInsensitive_;
	});
	MatchEvaluator = $pkg.MatchEvaluator = $newType(4, $kindFunc, "regexp2.MatchEvaluator", true, "github.com/dlclark/regexp2", true, null);
	Regexp = $pkg.Regexp = $newType(0, $kindStruct, "regexp2.Regexp", true, "github.com/dlclark/regexp2", true, function(MatchTimeout_, pattern_, options_, caps_, capnames_, capslist_, capsize_, code_, muRun_, runner_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.MatchTimeout = new time.Duration(0, 0);
			this.pattern = "";
			this.options = 0;
			this.caps = false;
			this.capnames = false;
			this.capslist = sliceType$4.nil;
			this.capsize = 0;
			this.code = ptrType$7.nil;
			this.muRun = ptrType$9.nil;
			this.runner = sliceType$5.nil;
			return;
		}
		this.MatchTimeout = MatchTimeout_;
		this.pattern = pattern_;
		this.options = options_;
		this.caps = caps_;
		this.capnames = capnames_;
		this.capslist = capslist_;
		this.capsize = capsize_;
		this.code = code_;
		this.muRun = muRun_;
		this.runner = runner_;
	});
	RegexOptions = $pkg.RegexOptions = $newType(4, $kindInt32, "regexp2.RegexOptions", true, "github.com/dlclark/regexp2", true, null);
	Match = $pkg.Match = $newType(0, $kindStruct, "regexp2.Match", true, "github.com/dlclark/regexp2", true, function(Group_, regex_, otherGroups_, textpos_, textstart_, capcount_, caps_, sparseCaps_, matches_, matchcount_, balancing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Group = new Group.ptr(new Capture.ptr(sliceType$3.nil, 0, 0), "", sliceType$6.nil);
			this.regex = ptrType$6.nil;
			this.otherGroups = sliceType$7.nil;
			this.textpos = 0;
			this.textstart = 0;
			this.capcount = 0;
			this.caps = sliceType$1.nil;
			this.sparseCaps = false;
			this.matches = sliceType$8.nil;
			this.matchcount = sliceType$1.nil;
			this.balancing = false;
			return;
		}
		this.Group = Group_;
		this.regex = regex_;
		this.otherGroups = otherGroups_;
		this.textpos = textpos_;
		this.textstart = textstart_;
		this.capcount = capcount_;
		this.caps = caps_;
		this.sparseCaps = sparseCaps_;
		this.matches = matches_;
		this.matchcount = matchcount_;
		this.balancing = balancing_;
	});
	Group = $pkg.Group = $newType(0, $kindStruct, "regexp2.Group", true, "github.com/dlclark/regexp2", true, function(Capture_, Name_, Captures_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Capture = new Capture.ptr(sliceType$3.nil, 0, 0);
			this.Name = "";
			this.Captures = sliceType$6.nil;
			return;
		}
		this.Capture = Capture_;
		this.Name = Name_;
		this.Captures = Captures_;
	});
	Capture = $pkg.Capture = $newType(0, $kindStruct, "regexp2.Capture", true, "github.com/dlclark/regexp2", true, function(text_, Index_, Length_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.text = sliceType$3.nil;
			this.Index = 0;
			this.Length = 0;
			return;
		}
		this.text = text_;
		this.Index = Index_;
		this.Length = Length_;
	});
	fasttime = $pkg.fasttime = $newType(8, $kindInt64, "regexp2.fasttime", true, "github.com/dlclark/regexp2", false, null);
	fastclock = $pkg.fastclock = $newType(0, $kindStruct, "regexp2.fastclock", true, "github.com/dlclark/regexp2", false, function(current_, clockEnd_, mu_, start_, running_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.current = new atomicTime.ptr(new $Int64(0, 0));
			this.clockEnd = new atomicTime.ptr(new $Int64(0, 0));
			this.mu = new sync.Mutex.ptr(0, 0);
			this.start = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil);
			this.running = false;
			return;
		}
		this.current = current_;
		this.clockEnd = clockEnd_;
		this.mu = mu_;
		this.start = start_;
		this.running = running_;
	});
	atomicTime = $pkg.atomicTime = $newType(0, $kindStruct, "regexp2.atomicTime", true, "github.com/dlclark/regexp2", false, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = new $Int64(0, 0);
			return;
		}
		this.v = v_;
	});
	ptrType = $ptrType(time.Location);
	ptrType$1 = $ptrType(Match);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Int);
	ptrType$2 = $ptrType(sliceType$1);
	ptrType$3 = $ptrType($Int);
	ptrType$4 = $ptrType(syntax.BmPrefix);
	ptrType$5 = $ptrType(syntax.Prefix);
	sliceType$2 = $sliceType($Uint8);
	ptrType$6 = $ptrType(Regexp);
	ptrType$7 = $ptrType(syntax.Code);
	sliceType$3 = $sliceType($Int32);
	sliceType$4 = $sliceType($String);
	ptrType$8 = $ptrType(sliceType$4);
	ptrType$9 = $ptrType(sync.Mutex);
	ptrType$10 = $ptrType(runner);
	sliceType$5 = $sliceType(ptrType$10);
	ptrType$11 = $ptrType(syntax.ReplacerData);
	sliceType$6 = $sliceType(Capture);
	sliceType$7 = $sliceType(Group);
	sliceType$8 = $sliceType(sliceType$1);
	ptrType$12 = $ptrType(Group);
	ptrType$13 = $ptrType($Int64);
	mapType = $mapType($Int, $Int);
	mapType$1 = $mapType($String, $Int);
	ptrType$14 = $ptrType(bytes.Buffer);
	ptrType$15 = $ptrType(Capture);
	ptrType$16 = $ptrType(atomicTime);
	Regexp.ptr.prototype.run = function(quick, textstart, input) {
		var {$24r, _r, _r$1, input, quick, re, runner$1, textstart, $s, $deferred, $r, $c} = $restore(this, {quick, textstart, input});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		re = this;
		_r = re.getRunner(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		runner$1 = _r;
		$deferred.push([$methodVal(re, "putRunner"), [runner$1]]);
		if (textstart < 0) {
			if (re.RightToLeft()) {
				textstart = input.$length;
			} else {
				textstart = 0;
			}
		}
		_r$1 = runner$1.scan(input, textstart, quick, re.MatchTimeout); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$1.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: Regexp.ptr.prototype.run, $c: true, $r, $24r, _r, _r$1, input, quick, re, runner$1, textstart, $s, $deferred};return $f; } }
	};
	Regexp.prototype.run = function(quick, textstart, input) { return this.$val.run(quick, textstart, input); };
	runner.ptr.prototype.scan = function(rt, textstart, quick, timeout) {
		var {_r, _r$1, _r$2, _r$3, _r$4, bump, err, err$1, initted, quick, r, rt, stoppos, textstart, timeout, x, $s, $r, $c} = $restore(this, {rt, textstart, quick, timeout});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		r.timeout = timeout;
		r.ignoreTimeout = (2147483647 === timeout.$high && 4294967295 === timeout.$low);
		r.runtextstart = textstart;
		r.runtext = rt;
		r.runtextend = rt.$length;
		stoppos = r.runtextend;
		bump = 1;
		if (r.re.RightToLeft()) {
			bump = -1;
			stoppos = 0;
		}
		r.runtextpos = textstart;
		initted = false;
		$r = r.startTimeoutWatch(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 2:
			/* */ if (r.re.Debug()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (r.re.Debug()) { */ case 4:
				_r = fmt.Printf("\nSearch range: from 0 to %v\n", new sliceType([new $Int(r.runtextend)])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_r$1 = fmt.Printf("Firstchar search starting at %v stopping at %v\n", new sliceType([new $Int(r.runtextpos), new $Int(stoppos)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
			/* */ if (r.findFirstChar()) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r.findFirstChar()) { */ case 8:
				_r$2 = r.checkTimeout(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [ptrType$1.nil, err];
				}
				if (!initted) {
					r.initMatch();
					initted = true;
				}
				/* */ if (r.re.Debug()) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (r.re.Debug()) { */ case 11:
					_r$3 = fmt.Printf("Executing engine starting at %v\n\n", new sliceType([new $Int(r.runtextpos)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
				/* } */ case 12:
				_r$4 = r.execute(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				err$1 = _r$4;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [ptrType$1.nil, err$1];
				}
				if ((x = r.runmatch.matchcount, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) > 0) {
					$s = -1; return [r.tidyMatch(quick), $ifaceNil];
				}
				r.runtrackpos = r.runtrack.$length;
				r.runstackpos = r.runstack.$length;
				r.runcrawlpos = r.runcrawl.$length;
			/* } */ case 9:
			if (r.runtextpos === stoppos) {
				r.tidyMatch(true);
				$s = -1; return [ptrType$1.nil, $ifaceNil];
			}
			r.runtextpos = r.runtextpos + (bump) >> 0;
		$s = 2; continue;
		case 3:
		$s = -1; return [ptrType$1.nil, $ifaceNil];
		/* */ } return; } var $f = {$blk: runner.ptr.prototype.scan, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, bump, err, err$1, initted, quick, r, rt, stoppos, textstart, timeout, x, $s};return $f;
	};
	runner.prototype.scan = function(rt, textstart, quick, timeout) { return this.$val.scan(rt, textstart, quick, timeout); };
	runner.ptr.prototype.execute = function() {
		var {_1, _r, c, c$1, c$2, c$3, c$4, c$5, c$6, c$7, capnum, ch, ch$1, ch$2, ch$3, count, count$1, err, i, i$1, i$2, i$3, i$4, i$5, i$6, i$7, mark, mark$1, mark$2, matched, matched$1, oldMarkPos, pos, pos$1, pos$2, pos$3, pos$4, pos$5, r, rchars, set, set$1, textpos, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		r.goTo(0);
		/* while (true) { */ case 1:
			/* */ if (r.re.Debug()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r.re.Debug()) { */ case 3:
				$r = r.dumpState(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_r = r.checkTimeout(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
				_1 = r.operator;
				/* */ if (_1 === (40)) { $s = 8; continue; }
				/* */ if (_1 === (22)) { $s = 9; continue; }
				/* */ if (_1 === (38)) { $s = 10; continue; }
				/* */ if (_1 === (37)) { $s = 11; continue; }
				/* */ if (_1 === (23)) { $s = 12; continue; }
				/* */ if (_1 === (151)) { $s = 13; continue; }
				/* */ if (_1 === (31)) { $s = 14; continue; }
				/* */ if (_1 === (30)) { $s = 15; continue; }
				/* */ if ((_1 === (159)) || (_1 === (158))) { $s = 16; continue; }
				/* */ if (_1 === (33)) { $s = 17; continue; }
				/* */ if (_1 === (161)) { $s = 18; continue; }
				/* */ if (_1 === (32)) { $s = 19; continue; }
				/* */ if (_1 === (160)) { $s = 20; continue; }
				/* */ if (_1 === (24)) { $s = 21; continue; }
				/* */ if (_1 === (152)) { $s = 22; continue; }
				/* */ if (_1 === (280)) { $s = 23; continue; }
				/* */ if (_1 === (25)) { $s = 24; continue; }
				/* */ if (_1 === (153)) { $s = 25; continue; }
				/* */ if (_1 === (281)) { $s = 26; continue; }
				/* */ if (_1 === (27)) { $s = 27; continue; }
				/* */ if (_1 === (26)) { $s = 28; continue; }
				/* */ if (_1 === (155)) { $s = 29; continue; }
				/* */ if (_1 === (154)) { $s = 30; continue; }
				/* */ if (_1 === (28)) { $s = 31; continue; }
				/* */ if (_1 === (156)) { $s = 32; continue; }
				/* */ if (_1 === (284)) { $s = 33; continue; }
				/* */ if (_1 === (29)) { $s = 34; continue; }
				/* */ if (_1 === (157)) { $s = 35; continue; }
				/* */ if (_1 === (285)) { $s = 36; continue; }
				/* */ if (_1 === (34)) { $s = 37; continue; }
				/* */ if (_1 === (162)) { $s = 38; continue; }
				/* */ if (_1 === (35)) { $s = 39; continue; }
				/* */ if (_1 === (36)) { $s = 40; continue; }
				/* */ if (_1 === (164)) { $s = 41; continue; }
				/* */ if (_1 === (14)) { $s = 42; continue; }
				/* */ if (_1 === (15)) { $s = 43; continue; }
				/* */ if (_1 === (16)) { $s = 44; continue; }
				/* */ if (_1 === (17)) { $s = 45; continue; }
				/* */ if (_1 === (41)) { $s = 46; continue; }
				/* */ if (_1 === (42)) { $s = 47; continue; }
				/* */ if (_1 === (18)) { $s = 48; continue; }
				/* */ if (_1 === (19)) { $s = 49; continue; }
				/* */ if (_1 === (20)) { $s = 50; continue; }
				/* */ if (_1 === (21)) { $s = 51; continue; }
				/* */ if (_1 === (9)) { $s = 52; continue; }
				/* */ if (_1 === (10)) { $s = 53; continue; }
				/* */ if (_1 === (11)) { $s = 54; continue; }
				/* */ if (_1 === (12)) { $s = 55; continue; }
				/* */ if (_1 === (13)) { $s = 56; continue; }
				/* */ if (_1 === (0)) { $s = 57; continue; }
				/* */ if (_1 === (1)) { $s = 58; continue; }
				/* */ if (_1 === (2)) { $s = 59; continue; }
				/* */ if (_1 === (3)) { $s = 60; continue; }
				/* */ if (_1 === (4)) { $s = 61; continue; }
				/* */ if (_1 === (5)) { $s = 62; continue; }
				/* */ if ((_1 === (131)) || (_1 === (132))) { $s = 63; continue; }
				/* */ if (_1 === (133)) { $s = 64; continue; }
				/* */ if ((_1 === (6)) || (_1 === (7))) { $s = 65; continue; }
				/* */ if (_1 === (8)) { $s = 66; continue; }
				/* */ if (_1 === (134)) { $s = 67; continue; }
				/* */ if (_1 === (135)) { $s = 68; continue; }
				/* */ if (_1 === (136)) { $s = 69; continue; }
				/* */ $s = 70; continue;
				/* if (_1 === (40)) { */ case 8:
					$s = -1; return $ifaceNil;
				/* } else if (_1 === (22)) { */ case 9:
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (38)) { */ case 10:
					r.goTo(r.operand(0));
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (37)) { */ case 11:
					if (!r.runmatch.isMatched(r.operand(0))) {
						/* break; */ $s = 7; continue;
					}
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (23)) { */ case 12:
					r.trackPush1(r.textPos());
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (151)) { */ case 13:
					r.trackPop();
					r.textto(r.trackPeek());
					r.goTo(r.operand(0));
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (31)) { */ case 14:
					r.stackPush(r.textPos());
					r.trackPush();
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (30)) { */ case 15:
					r.stackPush(-1);
					r.trackPush();
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if ((_1 === (159)) || (_1 === (158))) { */ case 16:
					r.stackPop();
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (33)) { */ case 17:
					r.stackPop();
					r.trackPush1(r.stackPeek());
					r.textto(r.stackPeek());
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (161)) { */ case 18:
					r.trackPop();
					r.stackPush(r.trackPeek());
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (32)) { */ case 19:
					if (!((r.operand(1) === -1)) && !r.runmatch.isMatched(r.operand(1))) {
						/* break; */ $s = 7; continue;
					}
					r.stackPop();
					if (!((r.operand(1) === -1))) {
						r.transferCapture(r.operand(0), r.operand(1), r.stackPeek(), r.textPos());
					} else {
						r.capture(r.operand(0), r.stackPeek(), r.textPos());
					}
					r.trackPush1(r.stackPeek());
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (160)) { */ case 20:
					r.trackPop();
					r.stackPush(r.trackPeek());
					r.uncapture();
					if (!((r.operand(0) === -1)) && !((r.operand(1) === -1))) {
						r.uncapture();
					}
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (24)) { */ case 21:
					r.stackPop();
					matched = r.textPos() - r.stackPeek() >> 0;
					if (!((matched === 0))) {
						r.trackPush2(r.stackPeek(), r.textPos());
						r.stackPush(r.textPos());
						r.goTo(r.operand(0));
					} else {
						r.trackPushNeg1(r.stackPeek());
						r.advance(1);
					}
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (152)) { */ case 22:
					r.trackPopN(2);
					r.stackPop();
					r.textto(r.trackPeekN(1));
					r.trackPushNeg1(r.trackPeek());
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (280)) { */ case 23:
					r.trackPop();
					r.stackPush(r.trackPeek());
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (25)) { */ case 24:
					r.stackPop();
					oldMarkPos = r.stackPeek();
					if (!((r.textPos() === oldMarkPos))) {
						if (!((oldMarkPos === -1))) {
							r.trackPush2(oldMarkPos, r.textPos());
						} else {
							r.trackPush2(r.textPos(), r.textPos());
						}
					} else {
						r.stackPush(oldMarkPos);
						r.trackPushNeg1(r.stackPeek());
					}
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (153)) { */ case 25:
					r.trackPopN(2);
					pos = r.trackPeekN(1);
					r.trackPushNeg1(r.trackPeek());
					r.stackPush(pos);
					r.textto(pos);
					r.goTo(r.operand(0));
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (281)) { */ case 26:
					r.stackPop();
					r.trackPop();
					r.stackPush(r.trackPeek());
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (27)) { */ case 27:
					r.stackPush2(r.textPos(), r.operand(0));
					r.trackPush();
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (26)) { */ case 28:
					r.stackPush2(-1, r.operand(0));
					r.trackPush();
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (155)) { */ case 29:
					r.stackPopN(2);
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (154)) { */ case 30:
					r.stackPopN(2);
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (28)) { */ case 31:
					r.stackPopN(2);
					mark = r.stackPeek();
					count = r.stackPeekN(1);
					matched$1 = r.textPos() - mark >> 0;
					if (count >= r.operand(1) || ((matched$1 === 0) && count >= 0)) {
						r.trackPushNeg2(mark, count);
						r.advance(2);
					} else {
						r.trackPush1(mark);
						r.stackPush2(r.textPos(), count + 1 >> 0);
						r.goTo(r.operand(0));
					}
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (156)) { */ case 32:
					r.trackPop();
					r.stackPopN(2);
					if (r.stackPeekN(1) > 0) {
						r.textto(r.stackPeek());
						r.trackPushNeg2(r.trackPeek(), r.stackPeekN(1) - 1 >> 0);
						r.advance(2);
						/* continue; */ $s = 1; continue;
					}
					r.stackPush2(r.trackPeek(), r.stackPeekN(1) - 1 >> 0);
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (284)) { */ case 33:
					r.trackPopN(2);
					r.stackPush2(r.trackPeek(), r.trackPeekN(1));
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (29)) { */ case 34:
					r.stackPopN(2);
					mark$1 = r.stackPeek();
					count$1 = r.stackPeekN(1);
					if (count$1 < 0) {
						r.trackPushNeg1(mark$1);
						r.stackPush2(r.textPos(), count$1 + 1 >> 0);
						r.goTo(r.operand(0));
					} else {
						r.trackPush3(mark$1, count$1, r.textPos());
						r.advance(2);
					}
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (157)) { */ case 35:
					r.trackPopN(3);
					mark$2 = r.trackPeek();
					textpos = r.trackPeekN(2);
					if (r.trackPeekN(1) < r.operand(1) && !((textpos === mark$2))) {
						r.textto(textpos);
						r.stackPush2(textpos, r.trackPeekN(1) + 1 >> 0);
						r.trackPushNeg1(mark$2);
						r.goTo(r.operand(0));
						/* continue; */ $s = 1; continue;
					} else {
						r.stackPush2(r.trackPeek(), r.trackPeekN(1));
						/* break; */ $s = 7; continue;
					}
					$s = 71; continue;
				/* } else if (_1 === (285)) { */ case 36:
					r.trackPop();
					r.stackPopN(2);
					r.stackPush2(r.trackPeek(), r.stackPeekN(1) - 1 >> 0);
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (34)) { */ case 37:
					r.stackPush2(r.trackpos(), r.crawlpos());
					r.trackPush();
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (162)) { */ case 38:
					r.stackPopN(2);
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (35)) { */ case 39:
					r.stackPopN(2);
					r.trackto(r.stackPeek());
					while (true) {
						if (!(!((r.crawlpos() === r.stackPeekN(1))))) { break; }
						r.uncapture();
					}
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (36)) { */ case 40:
					r.stackPopN(2);
					r.trackto(r.stackPeek());
					r.trackPush1(r.stackPeekN(1));
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (164)) { */ case 41:
					r.trackPop();
					while (true) {
						if (!(!((r.crawlpos() === r.trackPeek())))) { break; }
						r.uncapture();
					}
					/* break; */ $s = 7; continue;
					$s = 71; continue;
				/* } else if (_1 === (14)) { */ case 42:
					if (r.leftchars() > 0 && !((r.charAt(r.textPos() - 1 >> 0) === 10))) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (15)) { */ case 43:
					if (r.rightchars() > 0 && !((r.charAt(r.textPos()) === 10))) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (16)) { */ case 44:
					if (!r.isBoundary(r.textPos(), 0, r.runtextend)) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (17)) { */ case 45:
					if (r.isBoundary(r.textPos(), 0, r.runtextend)) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (41)) { */ case 46:
					if (!r.isECMABoundary(r.textPos(), 0, r.runtextend)) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (42)) { */ case 47:
					if (r.isECMABoundary(r.textPos(), 0, r.runtextend)) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (18)) { */ case 48:
					if (r.leftchars() > 0) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (19)) { */ case 49:
					if (!((r.textPos() === r.textstart()))) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (20)) { */ case 50:
					rchars = r.rightchars();
					if (rchars > 1) {
						/* break; */ $s = 7; continue;
					}
					if (!((((r.re.options & 768)) === 0))) {
						if (rchars > 0) {
							/* break; */ $s = 7; continue;
						}
					} else if ((rchars === 1) && !((r.charAt(r.textPos()) === 10))) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (21)) { */ case 51:
					if (r.rightchars() > 0) {
						/* break; */ $s = 7; continue;
					}
					r.advance(0);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (9)) { */ case 52:
					if (r.forwardchars() < 1 || !((r.forwardcharnext() === ((r.operand(0) >> 0))))) {
						/* break; */ $s = 7; continue;
					}
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (10)) { */ case 53:
					if (r.forwardchars() < 1 || (r.forwardcharnext() === ((r.operand(0) >> 0)))) {
						/* break; */ $s = 7; continue;
					}
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (11)) { */ case 54:
					if (r.forwardchars() < 1 || !$clone((x = r.code.Sets, x$1 = r.operand(0), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), syntax.CharSet).CharIn(r.forwardcharnext())) {
						/* break; */ $s = 7; continue;
					}
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (12)) { */ case 55:
					if (!r.runematch((x$2 = r.code.Strings, x$3 = r.operand(0), ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])))) {
						/* break; */ $s = 7; continue;
					}
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (13)) { */ case 56:
					capnum = r.operand(0);
					if (r.runmatch.isMatched(capnum)) {
						if (!r.refmatch(r.runmatch.matchIndex(capnum), r.runmatch.matchLength(capnum))) {
							/* break; */ $s = 7; continue;
						}
					} else {
						if (((r.re.options & 256)) === 0) {
							/* break; */ $s = 7; continue;
						}
					}
					r.advance(1);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (0)) { */ case 57:
					c = r.operand(1);
					if (r.forwardchars() < c) {
						/* break; */ $s = 7; continue;
					}
					ch = ((r.operand(0) >> 0));
					/* while (true) { */ case 72:
						/* if (!(c > 0)) { break; } */ if(!(c > 0)) { $s = 73; continue; }
						/* */ if (!((r.forwardcharnext() === ch))) { $s = 74; continue; }
						/* */ $s = 75; continue;
						/* if (!((r.forwardcharnext() === ch))) { */ case 74:
							/* goto BreakBackward */ $s = 76; continue;
						/* } */ case 75:
						c = c - (1) >> 0;
					$s = 72; continue;
					case 73:
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (1)) { */ case 58:
					c$1 = r.operand(1);
					if (r.forwardchars() < c$1) {
						/* break; */ $s = 7; continue;
					}
					ch$1 = ((r.operand(0) >> 0));
					/* while (true) { */ case 77:
						/* if (!(c$1 > 0)) { break; } */ if(!(c$1 > 0)) { $s = 78; continue; }
						/* */ if (r.forwardcharnext() === ch$1) { $s = 79; continue; }
						/* */ $s = 80; continue;
						/* if (r.forwardcharnext() === ch$1) { */ case 79:
							/* goto BreakBackward */ $s = 76; continue;
						/* } */ case 80:
						c$1 = c$1 - (1) >> 0;
					$s = 77; continue;
					case 78:
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (2)) { */ case 59:
					c$2 = r.operand(1);
					if (r.forwardchars() < c$2) {
						/* break; */ $s = 7; continue;
					}
					set = (x$4 = r.code.Sets, x$5 = r.operand(0), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
					/* while (true) { */ case 81:
						/* if (!(c$2 > 0)) { break; } */ if(!(c$2 > 0)) { $s = 82; continue; }
						/* */ if (!$clone(set, syntax.CharSet).CharIn(r.forwardcharnext())) { $s = 83; continue; }
						/* */ $s = 84; continue;
						/* if (!$clone(set, syntax.CharSet).CharIn(r.forwardcharnext())) { */ case 83:
							/* goto BreakBackward */ $s = 76; continue;
						/* } */ case 84:
						c$2 = c$2 - (1) >> 0;
					$s = 81; continue;
					case 82:
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (3)) { */ case 60:
					c$3 = r.operand(1);
					if (c$3 > r.forwardchars()) {
						c$3 = r.forwardchars();
					}
					ch$2 = ((r.operand(0) >> 0));
					i = c$3;
					while (true) {
						if (!(i > 0)) { break; }
						if (!((r.forwardcharnext() === ch$2))) {
							r.backwardnext();
							break;
						}
						i = i - (1) >> 0;
					}
					if (c$3 > i) {
						r.trackPush2((c$3 - i >> 0) - 1 >> 0, r.textPos() - r.bump() >> 0);
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (4)) { */ case 61:
					c$4 = r.operand(1);
					if (c$4 > r.forwardchars()) {
						c$4 = r.forwardchars();
					}
					ch$3 = ((r.operand(0) >> 0));
					i$1 = c$4;
					while (true) {
						if (!(i$1 > 0)) { break; }
						if (r.forwardcharnext() === ch$3) {
							r.backwardnext();
							break;
						}
						i$1 = i$1 - (1) >> 0;
					}
					if (c$4 > i$1) {
						r.trackPush2((c$4 - i$1 >> 0) - 1 >> 0, r.textPos() - r.bump() >> 0);
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (5)) { */ case 62:
					c$5 = r.operand(1);
					if (c$5 > r.forwardchars()) {
						c$5 = r.forwardchars();
					}
					set$1 = (x$6 = r.code.Sets, x$7 = r.operand(0), ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
					i$2 = c$5;
					while (true) {
						if (!(i$2 > 0)) { break; }
						if (!$clone(set$1, syntax.CharSet).CharIn(r.forwardcharnext())) {
							r.backwardnext();
							break;
						}
						i$2 = i$2 - (1) >> 0;
					}
					if (c$5 > i$2) {
						r.trackPush2((c$5 - i$2 >> 0) - 1 >> 0, r.textPos() - r.bump() >> 0);
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if ((_1 === (131)) || (_1 === (132))) { */ case 63:
					r.trackPopN(2);
					i$3 = r.trackPeek();
					pos$1 = r.trackPeekN(1);
					r.textto(pos$1);
					if (i$3 > 0) {
						r.trackPush2(i$3 - 1 >> 0, pos$1 - r.bump() >> 0);
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (133)) { */ case 64:
					r.trackPopN(2);
					i$4 = r.trackPeek();
					pos$2 = r.trackPeekN(1);
					r.textto(pos$2);
					if (i$4 > 0) {
						r.trackPush2(i$4 - 1 >> 0, pos$2 - r.bump() >> 0);
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if ((_1 === (6)) || (_1 === (7))) { */ case 65:
					c$6 = r.operand(1);
					if (c$6 > r.forwardchars()) {
						c$6 = r.forwardchars();
					}
					if (c$6 > 0) {
						r.trackPush2(c$6 - 1 >> 0, r.textPos());
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (8)) { */ case 66:
					c$7 = r.operand(1);
					if (c$7 > r.forwardchars()) {
						c$7 = r.forwardchars();
					}
					if (c$7 > 0) {
						r.trackPush2(c$7 - 1 >> 0, r.textPos());
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (134)) { */ case 67:
					r.trackPopN(2);
					pos$3 = r.trackPeekN(1);
					r.textto(pos$3);
					if (!((r.forwardcharnext() === ((r.operand(0) >> 0))))) {
						/* break; */ $s = 7; continue;
					}
					i$5 = r.trackPeek();
					if (i$5 > 0) {
						r.trackPush2(i$5 - 1 >> 0, pos$3 + r.bump() >> 0);
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (135)) { */ case 68:
					r.trackPopN(2);
					pos$4 = r.trackPeekN(1);
					r.textto(pos$4);
					if (r.forwardcharnext() === ((r.operand(0) >> 0))) {
						/* break; */ $s = 7; continue;
					}
					i$6 = r.trackPeek();
					if (i$6 > 0) {
						r.trackPush2(i$6 - 1 >> 0, pos$4 + r.bump() >> 0);
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else if (_1 === (136)) { */ case 69:
					r.trackPopN(2);
					pos$5 = r.trackPeekN(1);
					r.textto(pos$5);
					if (!$clone((x$8 = r.code.Sets, x$9 = r.operand(0), ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])), syntax.CharSet).CharIn(r.forwardcharnext())) {
						/* break; */ $s = 7; continue;
					}
					i$7 = r.trackPeek();
					if (i$7 > 0) {
						r.trackPush2(i$7 - 1 >> 0, pos$5 + r.bump() >> 0);
					}
					r.advance(2);
					/* continue; */ $s = 1; continue;
					$s = 71; continue;
				/* } else { */ case 70:
					$s = -1; return errors.New("unknown state in regex runner");
				/* } */ case 71:
			case 7:
			/* BreakBackward: */ case 76:
			$r = r.backtrack(); /* */ $s = 85; case 85: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = 1; continue;
		case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: runner.ptr.prototype.execute, $c: true, $r, _1, _r, c, c$1, c$2, c$3, c$4, c$5, c$6, c$7, capnum, ch, ch$1, ch$2, ch$3, count, count$1, err, i, i$1, i$2, i$3, i$4, i$5, i$6, i$7, mark, mark$1, mark$2, matched, matched$1, oldMarkPos, pos, pos$1, pos$2, pos$3, pos$4, pos$5, r, rchars, set, set$1, textpos, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	runner.prototype.execute = function() { return this.$val.execute(); };
	runner.ptr.prototype.ensureStorage = function() {
		var r;
		r = this;
		if (r.runstackpos < ($imul(r.runtrackcount, 4))) {
			doubleIntSlice((r.$ptr_runstack || (r.$ptr_runstack = new ptrType$2(function() { return this.$target.runstack; }, function($v) { this.$target.runstack = $v; }, r))), (r.$ptr_runstackpos || (r.$ptr_runstackpos = new ptrType$3(function() { return this.$target.runstackpos; }, function($v) { this.$target.runstackpos = $v; }, r))));
		}
		if (r.runtrackpos < ($imul(r.runtrackcount, 4))) {
			doubleIntSlice((r.$ptr_runtrack || (r.$ptr_runtrack = new ptrType$2(function() { return this.$target.runtrack; }, function($v) { this.$target.runtrack = $v; }, r))), (r.$ptr_runtrackpos || (r.$ptr_runtrackpos = new ptrType$3(function() { return this.$target.runtrackpos; }, function($v) { this.$target.runtrackpos = $v; }, r))));
		}
	};
	runner.prototype.ensureStorage = function() { return this.$val.ensureStorage(); };
	doubleIntSlice = function(s, pos) {
		var newS, oldLen, pos, s;
		oldLen = s.$get().$length;
		newS = $makeSlice(sliceType$1, ($imul(oldLen, 2)));
		$copySlice($subslice(newS, oldLen), s.$get());
		pos.$set(pos.$get() + (oldLen) >> 0);
		s.$set(newS);
	};
	runner.ptr.prototype.crawl = function(i) {
		var i, r, x, x$1;
		r = this;
		if (r.runcrawlpos === 0) {
			doubleIntSlice((r.$ptr_runcrawl || (r.$ptr_runcrawl = new ptrType$2(function() { return this.$target.runcrawl; }, function($v) { this.$target.runcrawl = $v; }, r))), (r.$ptr_runcrawlpos || (r.$ptr_runcrawlpos = new ptrType$3(function() { return this.$target.runcrawlpos; }, function($v) { this.$target.runcrawlpos = $v; }, r))));
		}
		r.runcrawlpos = r.runcrawlpos - (1) >> 0;
		(x = r.runcrawl, x$1 = r.runcrawlpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = i));
	};
	runner.prototype.crawl = function(i) { return this.$val.crawl(i); };
	runner.ptr.prototype.popcrawl = function() {
		var r, val, x, x$1;
		r = this;
		val = (x = r.runcrawl, x$1 = r.runcrawlpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		r.runcrawlpos = r.runcrawlpos + (1) >> 0;
		return val;
	};
	runner.prototype.popcrawl = function() { return this.$val.popcrawl(); };
	runner.ptr.prototype.crawlpos = function() {
		var r;
		r = this;
		return r.runcrawl.$length - r.runcrawlpos >> 0;
	};
	runner.prototype.crawlpos = function() { return this.$val.crawlpos(); };
	runner.ptr.prototype.advance = function(i) {
		var i, r, x, x$1;
		r = this;
		r.codepos = r.codepos + (((i + 1 >> 0))) >> 0;
		r.setOperator((x = r.code.Codes, x$1 = r.codepos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
	};
	runner.prototype.advance = function(i) { return this.$val.advance(i); };
	runner.ptr.prototype.goTo = function(newpos) {
		var newpos, r, x;
		r = this;
		if (newpos <= r.codepos) {
			r.ensureStorage();
		}
		r.setOperator((x = r.code.Codes, ((newpos < 0 || newpos >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + newpos])));
		r.codepos = newpos;
	};
	runner.prototype.goTo = function(newpos) { return this.$val.goTo(newpos); };
	runner.ptr.prototype.textto = function(newpos) {
		var newpos, r;
		r = this;
		r.runtextpos = newpos;
	};
	runner.prototype.textto = function(newpos) { return this.$val.textto(newpos); };
	runner.ptr.prototype.trackto = function(newpos) {
		var newpos, r;
		r = this;
		r.runtrackpos = r.runtrack.$length - newpos >> 0;
	};
	runner.prototype.trackto = function(newpos) { return this.$val.trackto(newpos); };
	runner.ptr.prototype.textstart = function() {
		var r;
		r = this;
		return r.runtextstart;
	};
	runner.prototype.textstart = function() { return this.$val.textstart(); };
	runner.ptr.prototype.textPos = function() {
		var r;
		r = this;
		return r.runtextpos;
	};
	runner.prototype.textPos = function() { return this.$val.textPos(); };
	runner.ptr.prototype.trackpos = function() {
		var r;
		r = this;
		return r.runtrack.$length - r.runtrackpos >> 0;
	};
	runner.prototype.trackpos = function() { return this.$val.trackpos(); };
	runner.ptr.prototype.trackPush = function() {
		var r, x, x$1;
		r = this;
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x = r.runtrack, x$1 = r.runtrackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = r.codepos));
	};
	runner.prototype.trackPush = function() { return this.$val.trackPush(); };
	runner.ptr.prototype.trackPush1 = function(I1) {
		var I1, r, x, x$1, x$2, x$3;
		r = this;
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x = r.runtrack, x$1 = r.runtrackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = I1));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$2 = r.runtrack, x$3 = r.runtrackpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = r.codepos));
	};
	runner.prototype.trackPush1 = function(I1) { return this.$val.trackPush1(I1); };
	runner.ptr.prototype.trackPush2 = function(I1, I2) {
		var I1, I2, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x = r.runtrack, x$1 = r.runtrackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = I1));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$2 = r.runtrack, x$3 = r.runtrackpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = I2));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$4 = r.runtrack, x$5 = r.runtrackpos, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = r.codepos));
	};
	runner.prototype.trackPush2 = function(I1, I2) { return this.$val.trackPush2(I1, I2); };
	runner.ptr.prototype.trackPush3 = function(I1, I2, I3) {
		var I1, I2, I3, r, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		r = this;
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x = r.runtrack, x$1 = r.runtrackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = I1));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$2 = r.runtrack, x$3 = r.runtrackpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = I2));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$4 = r.runtrack, x$5 = r.runtrackpos, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = I3));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$6 = r.runtrack, x$7 = r.runtrackpos, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7] = r.codepos));
	};
	runner.prototype.trackPush3 = function(I1, I2, I3) { return this.$val.trackPush3(I1, I2, I3); };
	runner.ptr.prototype.trackPushNeg1 = function(I1) {
		var I1, r, x, x$1, x$2, x$3;
		r = this;
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x = r.runtrack, x$1 = r.runtrackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = I1));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$2 = r.runtrack, x$3 = r.runtrackpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = -r.codepos));
	};
	runner.prototype.trackPushNeg1 = function(I1) { return this.$val.trackPushNeg1(I1); };
	runner.ptr.prototype.trackPushNeg2 = function(I1, I2) {
		var I1, I2, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x = r.runtrack, x$1 = r.runtrackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = I1));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$2 = r.runtrack, x$3 = r.runtrackpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = I2));
		r.runtrackpos = r.runtrackpos - (1) >> 0;
		(x$4 = r.runtrack, x$5 = r.runtrackpos, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = -r.codepos));
	};
	runner.prototype.trackPushNeg2 = function(I1, I2) { return this.$val.trackPushNeg2(I1, I2); };
	runner.ptr.prototype.backtrack = function() {
		var {_r, _r$1, newpos, r, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		newpos = (x = r.runtrack, x$1 = r.runtrackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		r.runtrackpos = r.runtrackpos + (1) >> 0;
		/* */ if (r.re.Debug()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r.re.Debug()) { */ case 1:
			/* */ if (newpos < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (newpos < 0) { */ case 3:
				_r = fmt.Printf("       Backtracking (back2) to code position %v\n", new sliceType([new $Int(-newpos)])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				$s = 5; continue;
			/* } else { */ case 4:
				_r$1 = fmt.Printf("       Backtracking to code position %v\n", new sliceType([new $Int(newpos)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
		/* } */ case 2:
		if (newpos < 0) {
			newpos = -newpos;
			r.setOperator((x$2 = r.code.Codes, ((newpos < 0 || newpos >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + newpos])) | 256);
		} else {
			r.setOperator((x$3 = r.code.Codes, ((newpos < 0 || newpos >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + newpos])) | 128);
		}
		if (newpos < r.codepos) {
			r.ensureStorage();
		}
		r.codepos = newpos;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runner.ptr.prototype.backtrack, $c: true, $r, _r, _r$1, newpos, r, x, x$1, x$2, x$3, $s};return $f;
	};
	runner.prototype.backtrack = function() { return this.$val.backtrack(); };
	runner.ptr.prototype.setOperator = function(op) {
		var op, r;
		r = this;
		r.caseInsensitive = !((0 === ((op & 512))));
		r.rightToLeft = !((0 === ((op & 64))));
		r.operator = (((op & -577) >> 0));
	};
	runner.prototype.setOperator = function(op) { return this.$val.setOperator(op); };
	runner.ptr.prototype.trackPop = function() {
		var r;
		r = this;
		r.runtrackpos = r.runtrackpos + (1) >> 0;
	};
	runner.prototype.trackPop = function() { return this.$val.trackPop(); };
	runner.ptr.prototype.trackPopN = function(framesize) {
		var framesize, r;
		r = this;
		r.runtrackpos = r.runtrackpos + (framesize) >> 0;
	};
	runner.prototype.trackPopN = function(framesize) { return this.$val.trackPopN(framesize); };
	runner.ptr.prototype.trackPeek = function() {
		var r, x, x$1;
		r = this;
		return (x = r.runtrack, x$1 = r.runtrackpos - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	runner.prototype.trackPeek = function() { return this.$val.trackPeek(); };
	runner.ptr.prototype.trackPeekN = function(i) {
		var i, r, x, x$1;
		r = this;
		return (x = r.runtrack, x$1 = (r.runtrackpos - i >> 0) - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	runner.prototype.trackPeekN = function(i) { return this.$val.trackPeekN(i); };
	runner.ptr.prototype.stackPush = function(I1) {
		var I1, r, x, x$1;
		r = this;
		r.runstackpos = r.runstackpos - (1) >> 0;
		(x = r.runstack, x$1 = r.runstackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = I1));
	};
	runner.prototype.stackPush = function(I1) { return this.$val.stackPush(I1); };
	runner.ptr.prototype.stackPush2 = function(I1, I2) {
		var I1, I2, r, x, x$1, x$2, x$3;
		r = this;
		r.runstackpos = r.runstackpos - (1) >> 0;
		(x = r.runstack, x$1 = r.runstackpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = I1));
		r.runstackpos = r.runstackpos - (1) >> 0;
		(x$2 = r.runstack, x$3 = r.runstackpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = I2));
	};
	runner.prototype.stackPush2 = function(I1, I2) { return this.$val.stackPush2(I1, I2); };
	runner.ptr.prototype.stackPop = function() {
		var r;
		r = this;
		r.runstackpos = r.runstackpos + (1) >> 0;
	};
	runner.prototype.stackPop = function() { return this.$val.stackPop(); };
	runner.ptr.prototype.stackPopN = function(framesize) {
		var framesize, r;
		r = this;
		r.runstackpos = r.runstackpos + (framesize) >> 0;
	};
	runner.prototype.stackPopN = function(framesize) { return this.$val.stackPopN(framesize); };
	runner.ptr.prototype.stackPeek = function() {
		var r, x, x$1;
		r = this;
		return (x = r.runstack, x$1 = r.runstackpos - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	runner.prototype.stackPeek = function() { return this.$val.stackPeek(); };
	runner.ptr.prototype.stackPeekN = function(i) {
		var i, r, x, x$1;
		r = this;
		return (x = r.runstack, x$1 = (r.runstackpos - i >> 0) - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	runner.prototype.stackPeekN = function(i) { return this.$val.stackPeekN(i); };
	runner.ptr.prototype.operand = function(i) {
		var i, r, x, x$1;
		r = this;
		return (x = r.code.Codes, x$1 = (r.codepos + i >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	runner.prototype.operand = function(i) { return this.$val.operand(i); };
	runner.ptr.prototype.leftchars = function() {
		var r;
		r = this;
		return r.runtextpos;
	};
	runner.prototype.leftchars = function() { return this.$val.leftchars(); };
	runner.ptr.prototype.rightchars = function() {
		var r;
		r = this;
		return r.runtextend - r.runtextpos >> 0;
	};
	runner.prototype.rightchars = function() { return this.$val.rightchars(); };
	runner.ptr.prototype.bump = function() {
		var r;
		r = this;
		if (r.rightToLeft) {
			return -1;
		}
		return 1;
	};
	runner.prototype.bump = function() { return this.$val.bump(); };
	runner.ptr.prototype.forwardchars = function() {
		var r;
		r = this;
		if (r.rightToLeft) {
			return r.runtextpos;
		}
		return r.runtextend - r.runtextpos >> 0;
	};
	runner.prototype.forwardchars = function() { return this.$val.forwardchars(); };
	runner.ptr.prototype.forwardcharnext = function() {
		var ch, r, x, x$1, x$2, x$3;
		r = this;
		ch = 0;
		if (r.rightToLeft) {
			r.runtextpos = r.runtextpos - (1) >> 0;
			ch = (x = r.runtext, x$1 = r.runtextpos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		} else {
			ch = (x$2 = r.runtext, x$3 = r.runtextpos, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
			r.runtextpos = r.runtextpos + (1) >> 0;
		}
		if (r.caseInsensitive) {
			return unicode.ToLower(ch);
		}
		return ch;
	};
	runner.prototype.forwardcharnext = function() { return this.$val.forwardcharnext(); };
	runner.ptr.prototype.runematch = function(str) {
		var c, pos, r, str, x, x$1;
		r = this;
		pos = 0;
		c = str.$length;
		if (!r.rightToLeft) {
			if ((r.runtextend - r.runtextpos >> 0) < c) {
				return false;
			}
			pos = r.runtextpos + c >> 0;
		} else {
			if ((r.runtextpos - 0 >> 0) < c) {
				return false;
			}
			pos = r.runtextpos;
		}
		if (!r.caseInsensitive) {
			while (true) {
				if (!(!((c === 0)))) { break; }
				c = c - (1) >> 0;
				pos = pos - (1) >> 0;
				if (!((((c < 0 || c >= str.$length) ? ($throwRuntimeError("index out of range"), undefined) : str.$array[str.$offset + c]) === (x = r.runtext, ((pos < 0 || pos >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pos]))))) {
					return false;
				}
			}
		} else {
			while (true) {
				if (!(!((c === 0)))) { break; }
				c = c - (1) >> 0;
				pos = pos - (1) >> 0;
				if (!((((c < 0 || c >= str.$length) ? ($throwRuntimeError("index out of range"), undefined) : str.$array[str.$offset + c]) === unicode.ToLower((x$1 = r.runtext, ((pos < 0 || pos >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pos])))))) {
					return false;
				}
			}
		}
		if (!r.rightToLeft) {
			pos = pos + (str.$length) >> 0;
		}
		r.runtextpos = pos;
		return true;
	};
	runner.prototype.runematch = function(str) { return this.$val.runematch(str); };
	runner.ptr.prototype.refmatch = function(index, len) {
		var _tmp, _tmp$1, _tmp$2, c, cmpos, index, len, pos, r, x, x$1, x$2, x$3;
		r = this;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		c = _tmp;
		pos = _tmp$1;
		cmpos = _tmp$2;
		if (!r.rightToLeft) {
			if ((r.runtextend - r.runtextpos >> 0) < len) {
				return false;
			}
			pos = r.runtextpos + len >> 0;
		} else {
			if ((r.runtextpos - 0 >> 0) < len) {
				return false;
			}
			pos = r.runtextpos;
		}
		cmpos = index + len >> 0;
		c = len;
		if (!r.caseInsensitive) {
			while (true) {
				if (!(!((c === 0)))) { break; }
				c = c - (1) >> 0;
				cmpos = cmpos - (1) >> 0;
				pos = pos - (1) >> 0;
				if (!(((x = r.runtext, ((cmpos < 0 || cmpos >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + cmpos])) === (x$1 = r.runtext, ((pos < 0 || pos >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pos]))))) {
					return false;
				}
			}
		} else {
			while (true) {
				if (!(!((c === 0)))) { break; }
				c = c - (1) >> 0;
				cmpos = cmpos - (1) >> 0;
				pos = pos - (1) >> 0;
				if (!((unicode.ToLower((x$2 = r.runtext, ((cmpos < 0 || cmpos >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + cmpos]))) === unicode.ToLower((x$3 = r.runtext, ((pos < 0 || pos >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pos])))))) {
					return false;
				}
			}
		}
		if (!r.rightToLeft) {
			pos = pos + (len) >> 0;
		}
		r.runtextpos = pos;
		return true;
	};
	runner.prototype.refmatch = function(index, len) { return this.$val.refmatch(index, len); };
	runner.ptr.prototype.backwardnext = function() {
		var r;
		r = this;
		if (r.rightToLeft) {
			r.runtextpos = r.runtextpos + (1) >> 0;
		} else {
			r.runtextpos = r.runtextpos - (1) >> 0;
		}
	};
	runner.prototype.backwardnext = function() { return this.$val.backwardnext(); };
	runner.ptr.prototype.charAt = function(j) {
		var j, r, x;
		r = this;
		return (x = r.runtext, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
	};
	runner.prototype.charAt = function(j) { return this.$val.charAt(j); };
	runner.ptr.prototype.findFirstChar = function() {
		var ch, i, i$1, n, r, set;
		r = this;
		if (!((0 === ((r.code.Anchors & 53))))) {
			if (!r.code.RightToLeft) {
				if ((!((0 === ((r.code.Anchors & 1)))) && r.runtextpos > 0) || (!((0 === ((r.code.Anchors & 4)))) && r.runtextpos > r.runtextstart)) {
					r.runtextpos = r.runtextend;
					return false;
				}
				if (!((0 === ((r.code.Anchors & 16)))) && r.runtextpos < (r.runtextend - 1 >> 0)) {
					r.runtextpos = r.runtextend - 1 >> 0;
				} else if (!((0 === ((r.code.Anchors & 32)))) && r.runtextpos < r.runtextend) {
					r.runtextpos = r.runtextend;
				}
			} else {
				if ((!((0 === ((r.code.Anchors & 32)))) && r.runtextpos < r.runtextend) || (!((0 === ((r.code.Anchors & 16)))) && (r.runtextpos < (r.runtextend - 1 >> 0) || ((r.runtextpos === (r.runtextend - 1 >> 0)) && !((r.charAt(r.runtextpos) === 10))))) || (!((0 === ((r.code.Anchors & 4)))) && r.runtextpos < r.runtextstart)) {
					r.runtextpos = 0;
					return false;
				}
				if (!((0 === ((r.code.Anchors & 1)))) && r.runtextpos > 0) {
					r.runtextpos = 0;
				}
			}
			if (!(r.code.BmPrefix === ptrType$4.nil)) {
				return r.code.BmPrefix.IsMatch(r.runtext, r.runtextpos, 0, r.runtextend);
			}
			return true;
		} else if (!(r.code.BmPrefix === ptrType$4.nil)) {
			r.runtextpos = r.code.BmPrefix.Scan(r.runtext, r.runtextpos, 0, r.runtextend);
			if (r.runtextpos === -1) {
				if (r.code.RightToLeft) {
					r.runtextpos = 0;
				} else {
					r.runtextpos = r.runtextend;
				}
				return false;
			}
			return true;
		} else if (r.code.FcPrefix === ptrType$5.nil) {
			return true;
		}
		r.rightToLeft = r.code.RightToLeft;
		r.caseInsensitive = r.code.FcPrefix.CaseInsensitive;
		set = $clone(r.code.FcPrefix.PrefixSet, syntax.CharSet);
		if ($clone(set, syntax.CharSet).IsSingleton()) {
			ch = $clone(set, syntax.CharSet).SingletonChar();
			i = r.forwardchars();
			while (true) {
				if (!(i > 0)) { break; }
				if (ch === r.forwardcharnext()) {
					r.backwardnext();
					return true;
				}
				i = i - (1) >> 0;
			}
		} else {
			i$1 = r.forwardchars();
			while (true) {
				if (!(i$1 > 0)) { break; }
				n = r.forwardcharnext();
				if ($clone(set, syntax.CharSet).CharIn(n)) {
					r.backwardnext();
					return true;
				}
				i$1 = i$1 - (1) >> 0;
			}
		}
		return false;
	};
	runner.prototype.findFirstChar = function() { return this.$val.findFirstChar(); };
	runner.ptr.prototype.initMatch = function() {
		var r, stacksize, tracksize;
		r = this;
		if (r.runmatch === ptrType$1.nil) {
			if (!(r.re.caps === false)) {
				r.runmatch = newMatchSparse(r.re, r.re.caps, r.re.capsize, r.runtext, r.runtextstart);
			} else {
				r.runmatch = newMatch(r.re, r.re.capsize, r.runtext, r.runtextstart);
			}
		} else {
			r.runmatch.reset(r.runtext, r.runtextstart);
		}
		if (!(r.runcrawl === sliceType$1.nil)) {
			r.runtrackpos = r.runtrack.$length;
			r.runstackpos = r.runstack.$length;
			r.runcrawlpos = r.runcrawl.$length;
			return;
		}
		r.initTrackCount();
		tracksize = $imul(r.runtrackcount, 8);
		stacksize = $imul(r.runtrackcount, 8);
		if (tracksize < 32) {
			tracksize = 32;
		}
		if (stacksize < 16) {
			stacksize = 16;
		}
		r.runtrack = $makeSlice(sliceType$1, tracksize);
		r.runtrackpos = tracksize;
		r.runstack = $makeSlice(sliceType$1, stacksize);
		r.runstackpos = stacksize;
		r.runcrawl = $makeSlice(sliceType$1, 32);
		r.runcrawlpos = 32;
	};
	runner.prototype.initMatch = function() { return this.$val.initMatch(); };
	runner.ptr.prototype.tidyMatch = function(quick) {
		var match, quick, r;
		r = this;
		if (!quick) {
			match = r.runmatch;
			r.runmatch = ptrType$1.nil;
			match.tidy(r.runtextpos);
			return match;
		} else {
			return r.runmatch;
		}
	};
	runner.prototype.tidyMatch = function(quick) { return this.$val.tidyMatch(quick); };
	runner.ptr.prototype.capture = function(capnum, start, end) {
		var T, capnum, end, r, start;
		r = this;
		if (end < start) {
			T = end;
			end = start;
			start = T;
		}
		r.crawl(capnum);
		r.runmatch.addMatch(capnum, start, end - start >> 0);
	};
	runner.prototype.capture = function(capnum, start, end) { return this.$val.capture(capnum, start, end); };
	runner.ptr.prototype.transferCapture = function(capnum, uncapnum, start, end) {
		var T, _tmp, _tmp$1, capnum, end, end2, r, start, start2, uncapnum;
		r = this;
		_tmp = 0;
		_tmp$1 = 0;
		start2 = _tmp;
		end2 = _tmp$1;
		if (end < start) {
			T = end;
			end = start;
			start = T;
		}
		start2 = r.runmatch.matchIndex(uncapnum);
		end2 = start2 + r.runmatch.matchLength(uncapnum) >> 0;
		if (start >= end2) {
			end = start;
			start = end2;
		} else if (end <= start2) {
			start = start2;
		} else {
			if (end > end2) {
				end = end2;
			}
			if (start2 > start) {
				start = start2;
			}
		}
		r.crawl(uncapnum);
		r.runmatch.balanceMatch(uncapnum);
		if (!((capnum === -1))) {
			r.crawl(capnum);
			r.runmatch.addMatch(capnum, start, end - start >> 0);
		}
	};
	runner.prototype.transferCapture = function(capnum, uncapnum, start, end) { return this.$val.transferCapture(capnum, uncapnum, start, end); };
	runner.ptr.prototype.uncapture = function() {
		var capnum, r;
		r = this;
		capnum = r.popcrawl();
		r.runmatch.removeMatch(capnum);
	};
	runner.prototype.uncapture = function() { return this.$val.uncapture(); };
	runner.ptr.prototype.dumpState = function() {
		var {_arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _r$3, _r$4, back, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		back = "";
		if (!(((r.operator & 128) === 0))) {
			back = " Back";
		}
		if (!(((r.operator & 256) === 0))) {
			back = back + (" Back2");
		}
		_r = r.textposDescription(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = new $String(_r);
		_r$1 = r.stackDescription(r.runtrack, r.runtrackpos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$1);
		_r$2 = r.stackDescription(r.runstack, r.runstackpos); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$2 = new $String(_r$2);
		_r$3 = r.code.OpcodeDescription(r.codepos); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$3 = new $String(_r$3);
		_arg$4 = new $String(back);
		_r$4 = fmt.Printf("Text:  %v\nTrack: %v\nStack: %v\n       %s%s\n\n", new sliceType([_arg, _arg$1, _arg$2, _arg$3, _arg$4])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runner.ptr.prototype.dumpState, $c: true, $r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _r$3, _r$4, back, r, $s};return $f;
	};
	runner.prototype.dumpState = function() { return this.$val.dumpState(); };
	runner.ptr.prototype.stackDescription = function(a, index) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, a, buf, i, index, r, $s, $r, $c} = $restore(this, {a, index});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, 0);
		_r = fmt.Fprintf(buf, "%v/%v", new sliceType([new $Int((a.$length - index >> 0)), new $Int(a.$length)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (buf.Len() < 8) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (buf.Len() < 8) { */ case 2:
			_r$1 = buf.WriteString(strings.Repeat(" ", 8 - buf.Len() >> 0)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		_r$2 = buf.WriteRune(40); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		i = index;
		/* while (true) { */ case 6:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 7; continue; }
			/* */ if (i > index) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (i > index) { */ case 8:
				_r$3 = buf.WriteRune(32); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
			/* } */ case 9:
			_r$4 = buf.WriteString(strconv.Itoa(((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]))); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			i = i + (1) >> 0;
		$s = 6; continue;
		case 7:
		_r$5 = buf.WriteRune(41); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: runner.ptr.prototype.stackDescription, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, a, buf, i, index, r, $s};return $f;
	};
	runner.prototype.stackDescription = function(a, index) { return this.$val.stackDescription(a, index); };
	runner.ptr.prototype.textposDescription = function() {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, i, r, x, x$1, x$2, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, 0);
		_r = buf.WriteString(strconv.Itoa(r.runtextpos)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (buf.Len() < 8) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (buf.Len() < 8) { */ case 2:
			_r$1 = buf.WriteString(strings.Repeat(" ", 8 - buf.Len() >> 0)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		/* */ if (r.runtextpos > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (r.runtextpos > 0) { */ case 5:
			_r$2 = syntax.CharDescription((x = r.runtext, x$1 = r.runtextpos - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]))); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = buf.WriteString(_r$2); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = 7; continue;
		/* } else { */ case 6:
			_r$4 = buf.WriteRune(94); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 7:
		_r$5 = buf.WriteRune(62); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		i = r.runtextpos;
		/* while (true) { */ case 12:
			/* if (!(i < r.runtextend)) { break; } */ if(!(i < r.runtextend)) { $s = 13; continue; }
			_r$6 = syntax.CharDescription((x$2 = r.runtext, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i]))); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = buf.WriteString(_r$6); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
			i = i + (1) >> 0;
		$s = 12; continue;
		case 13:
		/* */ if (buf.Len() >= 64) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (buf.Len() >= 64) { */ case 16:
			buf.Truncate(61);
			_r$8 = buf.WriteString("..."); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			$s = 18; continue;
		/* } else { */ case 17:
			_r$9 = buf.WriteRune(36); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
		/* } */ case 18:
		$s = -1; return buf.String();
		/* */ } return; } var $f = {$blk: runner.ptr.prototype.textposDescription, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, buf, i, r, x, x$1, x$2, $s};return $f;
	};
	runner.prototype.textposDescription = function() { return this.$val.textposDescription(); };
	runner.ptr.prototype.isBoundary = function(index, startpos, endpos) {
		var endpos, index, r, startpos, x, x$1, x$2;
		r = this;
		return !((index > startpos && syntax.IsWordChar((x = r.runtext, x$1 = index - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])))) === (index < endpos && syntax.IsWordChar((x$2 = r.runtext, ((index < 0 || index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + index])))));
	};
	runner.prototype.isBoundary = function(index, startpos, endpos) { return this.$val.isBoundary(index, startpos, endpos); };
	runner.ptr.prototype.isECMABoundary = function(index, startpos, endpos) {
		var endpos, index, r, startpos, x, x$1, x$2;
		r = this;
		return !((index > startpos && syntax.IsECMAWordChar((x = r.runtext, x$1 = index - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])))) === (index < endpos && syntax.IsECMAWordChar((x$2 = r.runtext, ((index < 0 || index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + index])))));
	};
	runner.prototype.isECMABoundary = function(index, startpos, endpos) { return this.$val.isECMABoundary(index, startpos, endpos); };
	runner.ptr.prototype.startTimeoutWatch = function() {
		var {_r, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		if (r.ignoreTimeout) {
			$s = -1; return;
		}
		_r = makeDeadline(r.timeout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r.deadline = _r;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: runner.ptr.prototype.startTimeoutWatch, $c: true, $r, _r, r, $s};return $f;
	};
	runner.prototype.startTimeoutWatch = function() { return this.$val.startTimeoutWatch(); };
	runner.ptr.prototype.checkTimeout = function() {
		var {$24r, _r, r, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		r = this;
		if (r.ignoreTimeout || !r.deadline.reached()) {
			$s = -1; return $ifaceNil;
		}
		if (r.re.Debug()) {
		}
		_r = fmt.Errorf("match timeout after %v on input `%v`", new sliceType([r.timeout, new $String(($runesToString(r.runtext)))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: runner.ptr.prototype.checkTimeout, $c: true, $r, $24r, _r, r, $s};return $f;
	};
	runner.prototype.checkTimeout = function() { return this.$val.checkTimeout(); };
	runner.ptr.prototype.initTrackCount = function() {
		var r;
		r = this;
		r.runtrackcount = r.code.TrackCount;
	};
	runner.prototype.initTrackCount = function() { return this.$val.initTrackCount(); };
	Regexp.ptr.prototype.getRunner = function() {
		var {n, re, x, x$1, z, z$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		$r = re.muRun.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		n = re.runner.$length;
		/* */ if (n > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (n > 0) { */ case 2:
			z = (x = re.runner, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			re.runner = $subslice(re.runner, 0, (n - 1 >> 0));
			$r = re.muRun.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return z;
		/* } */ case 3:
		$r = re.muRun.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		z$1 = new runner.ptr(re, re.code, 0, sliceType$3.nil, 0, 0, sliceType$1.nil, 0, sliceType$1.nil, 0, sliceType$1.nil, 0, 0, ptrType$1.nil, false, new time.Duration(0, 0), new fasttime(0, 0), 0, 0, false, false);
		$s = -1; return z$1;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.getRunner, $c: true, $r, n, re, x, x$1, z, z$1, $s};return $f;
	};
	Regexp.prototype.getRunner = function() { return this.$val.getRunner(); };
	Regexp.ptr.prototype.putRunner = function(r) {
		var {r, re, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		$r = re.muRun.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.runtext = sliceType$3.nil;
		if (!(r.runmatch === ptrType$1.nil)) {
			r.runmatch.Group.Capture.text = sliceType$3.nil;
		}
		re.runner = $append(re.runner, r);
		$r = re.muRun.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.putRunner, $c: true, $r, r, re, $s};return $f;
	};
	Regexp.prototype.putRunner = function(r) { return this.$val.putRunner(r); };
	replace = function(regex, data, evaluator, input, startAt, count) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, al, buf, count, data, err, evaluator, i, input, m, prevat, prevat$1, regex, startAt, text, $s, $r, $c} = $restore(this, {regex, data, evaluator, input, startAt, count});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		al = [al];
		if (count < -1) {
			$s = -1; return ["", errors.New("Count too small")];
		}
		if (count === 0) {
			$s = -1; return ["", $ifaceNil];
		}
		_r = regex.FindStringMatchStartingAt(input, startAt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		if (m === ptrType$1.nil) {
			$s = -1; return [input, $ifaceNil];
		}
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, 0);
		text = m.Group.Capture.text;
		/* */ if (!regex.RightToLeft()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!regex.RightToLeft()) { */ case 2:
			prevat = 0;
			/* while (true) { */ case 5:
				/* if (!(!(m === ptrType$1.nil))) { break; } */ if(!(!(m === ptrType$1.nil))) { $s = 6; continue; }
				/* */ if (!((m.Group.Capture.Index === prevat))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((m.Group.Capture.Index === prevat))) { */ case 7:
					_r$1 = buf.WriteString(($runesToString($subslice(text, prevat, m.Group.Capture.Index)))); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
				/* } */ case 8:
				prevat = m.Group.Capture.Index + m.Group.Capture.Length >> 0;
				/* */ if (evaluator === $throwNilPointerError) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (evaluator === $throwNilPointerError) { */ case 10:
					$r = replacementImpl(data, buf, m); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 12; continue;
				/* } else { */ case 11:
					_r$2 = evaluator($clone(m, Match)); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = buf.WriteString(_r$2); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
				/* } */ case 12:
				count = count - (1) >> 0;
				if (count === 0) {
					/* break; */ $s = 6; continue;
				}
				_r$4 = regex.FindNextMatch(m); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				m = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return ["", $ifaceNil];
				}
			$s = 5; continue;
			case 6:
			/* */ if (prevat < text.$length) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (prevat < text.$length) { */ case 17:
				_r$5 = buf.WriteString(($runesToString($subslice(text, prevat)))); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 18:
			$s = 4; continue;
		/* } else { */ case 3:
			prevat$1 = text.$length;
			al[0] = sliceType$4.nil;
			/* while (true) { */ case 20:
				/* if (!(!(m === ptrType$1.nil))) { break; } */ if(!(!(m === ptrType$1.nil))) { $s = 21; continue; }
				if (!(((m.Group.Capture.Index + m.Group.Capture.Length >> 0) === prevat$1))) {
					al[0] = $append(al[0], ($runesToString($subslice(text, (m.Group.Capture.Index + m.Group.Capture.Length >> 0), prevat$1))));
				}
				prevat$1 = m.Group.Capture.Index;
				/* */ if (evaluator === $throwNilPointerError) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (evaluator === $throwNilPointerError) { */ case 22:
					$r = replacementImplRTL(data, (al.$ptr || (al.$ptr = new ptrType$8(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, al))), m); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 24; continue;
				/* } else { */ case 23:
					_r$6 = evaluator($clone(m, Match)); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					al[0] = $append(al[0], _r$6);
				/* } */ case 24:
				count = count - (1) >> 0;
				if (count === 0) {
					/* break; */ $s = 21; continue;
				}
				_r$7 = regex.FindNextMatch(m); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$2 = _r$7;
				m = _tuple$2[0];
				err = _tuple$2[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return ["", $ifaceNil];
				}
			$s = 20; continue;
			case 21:
			/* */ if (prevat$1 > 0) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (prevat$1 > 0) { */ case 28:
				_r$8 = buf.WriteString(($runesToString($subslice(text, 0, prevat$1)))); /* */ $s = 30; case 30: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
			/* } */ case 29:
			i = al[0].$length - 1 >> 0;
			/* while (true) { */ case 31:
				/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 32; continue; }
				_r$9 = buf.WriteString(((i < 0 || i >= al[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : al[0].$array[al[0].$offset + i])); /* */ $s = 33; case 33: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
				i = i - (1) >> 0;
			$s = 31; continue;
			case 32:
		/* } */ case 4:
		$s = -1; return [buf.String(), $ifaceNil];
		/* */ } return; } var $f = {$blk: replace, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, al, buf, count, data, err, evaluator, i, input, m, prevat, prevat$1, regex, startAt, text, $s};return $f;
	};
	replacementImpl = function(data, buf, m) {
		var {_1, _i, _r, _r$1, _r$2, _r$3, _ref, buf, data, i, i$1, i$2, m, r, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {data, buf, m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_ref = data.Rules;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (r >= 0) { $s = 3; continue; }
			/* */ if (r < -4) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (r >= 0) { */ case 3:
				_r = buf.WriteString((x = data.Strings, ((r < 0 || r >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + r]))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				$s = 6; continue;
			/* } else if (r < -4) { */ case 4:
				$r = m.groupValueAppendToBuf(-5 - r >> 0, buf); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
					_1 = -5 - r >> 0;
					/* */ if (_1 === (-1)) { $s = 10; continue; }
					/* */ if (_1 === (-2)) { $s = 11; continue; }
					/* */ if (_1 === (-3)) { $s = 12; continue; }
					/* */ if (_1 === (-4)) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (_1 === (-1)) { */ case 10:
						i = 0;
						/* while (true) { */ case 15:
							/* if (!(i < m.Group.Capture.Index)) { break; } */ if(!(i < m.Group.Capture.Index)) { $s = 16; continue; }
							_r$1 = buf.WriteRune((x$1 = m.Group.Capture.text, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]))); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							_r$1;
							i = i + (1) >> 0;
						$s = 15; continue;
						case 16:
						$s = 14; continue;
					/* } else if (_1 === (-2)) { */ case 11:
						i$1 = m.Group.Capture.Index + m.Group.Capture.Length >> 0;
						/* while (true) { */ case 18:
							/* if (!(i$1 < m.Group.Capture.text.$length)) { break; } */ if(!(i$1 < m.Group.Capture.text.$length)) { $s = 19; continue; }
							_r$2 = buf.WriteRune((x$2 = m.Group.Capture.text, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]))); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$2;
							i$1 = i$1 + (1) >> 0;
						$s = 18; continue;
						case 19:
						$s = 14; continue;
					/* } else if (_1 === (-3)) { */ case 12:
						$r = m.groupValueAppendToBuf(m.GroupCount() - 1 >> 0, buf); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 14; continue;
					/* } else if (_1 === (-4)) { */ case 13:
						i$2 = 0;
						/* while (true) { */ case 22:
							/* if (!(i$2 < m.Group.Capture.text.$length)) { break; } */ if(!(i$2 < m.Group.Capture.text.$length)) { $s = 23; continue; }
							_r$3 = buf.WriteRune((x$3 = m.Group.Capture.text, ((i$2 < 0 || i$2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$2]))); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							_r$3;
							i$2 = i$2 + (1) >> 0;
						$s = 22; continue;
						case 23:
					/* } */ case 14:
				case 9:
			/* } */ case 6:
			_i++;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: replacementImpl, $c: true, $r, _1, _i, _r, _r$1, _r$2, _r$3, _ref, buf, data, i, i$1, i$2, m, r, x, x$1, x$2, x$3, $s};return $f;
	};
	replacementImplRTL = function(data, al, m) {
		var {_1, _i, _r, _r$1, _r$2, _ref, al, buf, data, i, i$1, i$2, l, m, r, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {data, al, m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		l = al.$get();
		buf = new bytes.Buffer.ptr(sliceType$2.nil, 0, 0);
		_ref = data.Rules;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			buf.Reset();
			/* */ if (r >= 0) { $s = 3; continue; }
			/* */ if (r < -4) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (r >= 0) { */ case 3:
				l = $append(l, (x = data.Strings, ((r < 0 || r >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + r])));
				$s = 6; continue;
			/* } else if (r < -4) { */ case 4:
				$r = m.groupValueAppendToBuf(-5 - r >> 0, buf); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				l = $append(l, buf.String());
				$s = 6; continue;
			/* } else { */ case 5:
					_1 = -5 - r >> 0;
					/* */ if (_1 === (-1)) { $s = 9; continue; }
					/* */ if (_1 === (-2)) { $s = 10; continue; }
					/* */ if (_1 === (-3)) { $s = 11; continue; }
					/* */ if (_1 === (-4)) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (_1 === (-1)) { */ case 9:
						i = 0;
						/* while (true) { */ case 14:
							/* if (!(i < m.Group.Capture.Index)) { break; } */ if(!(i < m.Group.Capture.Index)) { $s = 15; continue; }
							_r = buf.WriteRune((x$1 = m.Group.Capture.text, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]))); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							_r;
							i = i + (1) >> 0;
						$s = 14; continue;
						case 15:
						$s = 13; continue;
					/* } else if (_1 === (-2)) { */ case 10:
						i$1 = m.Group.Capture.Index + m.Group.Capture.Length >> 0;
						/* while (true) { */ case 17:
							/* if (!(i$1 < m.Group.Capture.text.$length)) { break; } */ if(!(i$1 < m.Group.Capture.text.$length)) { $s = 18; continue; }
							_r$1 = buf.WriteRune((x$2 = m.Group.Capture.text, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]))); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							_r$1;
							i$1 = i$1 + (1) >> 0;
						$s = 17; continue;
						case 18:
						$s = 13; continue;
					/* } else if (_1 === (-3)) { */ case 11:
						$r = m.groupValueAppendToBuf(m.GroupCount() - 1 >> 0, buf); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 13; continue;
					/* } else if (_1 === (-4)) { */ case 12:
						i$2 = 0;
						/* while (true) { */ case 21:
							/* if (!(i$2 < m.Group.Capture.text.$length)) { break; } */ if(!(i$2 < m.Group.Capture.text.$length)) { $s = 22; continue; }
							_r$2 = buf.WriteRune((x$3 = m.Group.Capture.text, ((i$2 < 0 || i$2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$2]))); /* */ $s = 23; case 23: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$2;
							i$2 = i$2 + (1) >> 0;
						$s = 21; continue;
						case 22:
					/* } */ case 13:
				case 8:
				l = $append(l, buf.String());
			/* } */ case 6:
			_i++;
		$s = 1; continue;
		case 2:
		al.$set(l);
		$s = -1; return;
		/* */ } return; } var $f = {$blk: replacementImplRTL, $c: true, $r, _1, _i, _r, _r$1, _r$2, _ref, al, buf, data, i, i$1, i$2, l, m, r, x, x$1, x$2, x$3, $s};return $f;
	};
	Compile = function(expr, opt) {
		var {_r, _r$1, _tuple, _tuple$1, code, err, expr, opt, tree, $s, $r, $c} = $restore(this, {expr, opt});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = syntax.Parse(expr, ((opt >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		tree = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err];
		}
		_r$1 = syntax.Write(tree); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		code = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$6.nil, err];
		}
		$s = -1; return [new Regexp.ptr($pkg.DefaultMatchTimeout, expr, opt, code.Caps, tree.Capnames, tree.Caplist, code.Capsize, code, new sync.Mutex.ptr(0, 0), sliceType$5.nil), $ifaceNil];
		/* */ } return; } var $f = {$blk: Compile, $c: true, $r, _r, _r$1, _tuple, _tuple$1, code, err, expr, opt, tree, $s};return $f;
	};
	$pkg.Compile = Compile;
	MustCompile = function(str, opt) {
		var {_r, _r$1, _tuple, error, opt, regexp, str, $s, $r, $c} = $restore(this, {str, opt});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = Compile(str, opt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		regexp = _tuple[0];
		error = _tuple[1];
		/* */ if (!($interfaceIsEqual(error, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(error, $ifaceNil))) { */ case 2:
			_r$1 = error.Error(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String("regexp2: Compile(" + quote(str) + "): " + _r$1));
		/* } */ case 3:
		$s = -1; return regexp;
		/* */ } return; } var $f = {$blk: MustCompile, $c: true, $r, _r, _r$1, _tuple, error, opt, regexp, str, $s};return $f;
	};
	$pkg.MustCompile = MustCompile;
	Regexp.ptr.prototype.String = function() {
		var re;
		re = this;
		return re.pattern;
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	quote = function(s) {
		var s;
		if (strconv.CanBackquote(s)) {
			return "`" + s + "`";
		}
		return strconv.Quote(s);
	};
	Regexp.ptr.prototype.RightToLeft = function() {
		var re;
		re = this;
		return !(((re.options & 64) === 0));
	};
	Regexp.prototype.RightToLeft = function() { return this.$val.RightToLeft(); };
	Regexp.ptr.prototype.Debug = function() {
		var re;
		re = this;
		return !(((re.options & 128) === 0));
	};
	Regexp.prototype.Debug = function() { return this.$val.Debug(); };
	Regexp.ptr.prototype.Replace = function(input, replacement, startAt, count) {
		var {$24r, _r, _r$1, _tuple, count, data, err, input, re, replacement, startAt, $s, $r, $c} = $restore(this, {input, replacement, startAt, count});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = syntax.NewReplacerData(replacement, re.caps, re.capsize, re.capnames, ((re.options >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		data = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_r$1 = replace(re, data, $throwNilPointerError, input, startAt, count); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.Replace, $c: true, $r, $24r, _r, _r$1, _tuple, count, data, err, input, re, replacement, startAt, $s};return $f;
	};
	Regexp.prototype.Replace = function(input, replacement, startAt, count) { return this.$val.Replace(input, replacement, startAt, count); };
	Regexp.ptr.prototype.ReplaceFunc = function(input, evaluator, startAt, count) {
		var {$24r, _r, count, evaluator, input, re, startAt, $s, $r, $c} = $restore(this, {input, evaluator, startAt, count});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = replace(re, ptrType$11.nil, evaluator, input, startAt, count); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.ReplaceFunc, $c: true, $r, $24r, _r, count, evaluator, input, re, startAt, $s};return $f;
	};
	Regexp.prototype.ReplaceFunc = function(input, evaluator, startAt, count) { return this.$val.ReplaceFunc(input, evaluator, startAt, count); };
	Regexp.ptr.prototype.FindStringMatch = function(s) {
		var {$24r, _r, re, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.run(false, -1, getRunes(s)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindStringMatch, $c: true, $r, $24r, _r, re, s, $s};return $f;
	};
	Regexp.prototype.FindStringMatch = function(s) { return this.$val.FindStringMatch(s); };
	Regexp.ptr.prototype.FindRunesMatch = function(r) {
		var {$24r, _r, r, re, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.run(false, -1, r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindRunesMatch, $c: true, $r, $24r, _r, r, re, $s};return $f;
	};
	Regexp.prototype.FindRunesMatch = function(r) { return this.$val.FindRunesMatch(r); };
	Regexp.ptr.prototype.FindStringMatchStartingAt = function(s, startAt) {
		var {$24r, _r, _tuple, r, re, s, startAt, $s, $r, $c} = $restore(this, {s, startAt});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		if (startAt > s.length) {
			$s = -1; return [ptrType$1.nil, errors.New("startAt must be less than the length of the input string")];
		}
		_tuple = re.getRunesAndStart(s, startAt);
		r = _tuple[0];
		startAt = _tuple[1];
		if (startAt === -1) {
			$s = -1; return [ptrType$1.nil, errors.New("startAt must align to the start of a valid rune in the input string")];
		}
		_r = re.run(false, startAt, r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindStringMatchStartingAt, $c: true, $r, $24r, _r, _tuple, r, re, s, startAt, $s};return $f;
	};
	Regexp.prototype.FindStringMatchStartingAt = function(s, startAt) { return this.$val.FindStringMatchStartingAt(s, startAt); };
	Regexp.ptr.prototype.FindRunesMatchStartingAt = function(r, startAt) {
		var {$24r, _r, r, re, startAt, $s, $r, $c} = $restore(this, {r, startAt});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.run(false, startAt, r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindRunesMatchStartingAt, $c: true, $r, $24r, _r, r, re, startAt, $s};return $f;
	};
	Regexp.prototype.FindRunesMatchStartingAt = function(r, startAt) { return this.$val.FindRunesMatchStartingAt(r, startAt); };
	Regexp.ptr.prototype.FindNextMatch = function(m) {
		var {$24r, _r, m, re, startAt, $s, $r, $c} = $restore(this, {m});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		if (m === ptrType$1.nil) {
			$s = -1; return [ptrType$1.nil, $ifaceNil];
		}
		startAt = m.textpos;
		if (m.Group.Capture.Length === 0) {
			if (m.textpos === m.Group.Capture.text.$length) {
				$s = -1; return [ptrType$1.nil, $ifaceNil];
			}
			if (re.RightToLeft()) {
				startAt = startAt - (1) >> 0;
			} else {
				startAt = startAt + (1) >> 0;
			}
		}
		_r = re.run(false, startAt, m.Group.Capture.text); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindNextMatch, $c: true, $r, $24r, _r, m, re, startAt, $s};return $f;
	};
	Regexp.prototype.FindNextMatch = function(m) { return this.$val.FindNextMatch(m); };
	Regexp.ptr.prototype.MatchString = function(s) {
		var {_r, _tuple, err, m, re, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.run(true, -1, getRunes(s)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
		}
		$s = -1; return [!(m === ptrType$1.nil), $ifaceNil];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.MatchString, $c: true, $r, _r, _tuple, err, m, re, s, $s};return $f;
	};
	Regexp.prototype.MatchString = function(s) { return this.$val.MatchString(s); };
	Regexp.ptr.prototype.getRunesAndStart = function(s, startAt) {
		var _i, _ref, _rune, i, r, r$1, re, ret, runeIdx, s, startAt, strIdx;
		re = this;
		if (startAt < 0) {
			if (re.RightToLeft()) {
				r = getRunes(s);
				return [r, r.$length];
			}
			return [getRunes(s), 0];
		}
		ret = $makeSlice(sliceType$3, s.length);
		i = 0;
		runeIdx = -1;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			strIdx = _i;
			r$1 = _rune[0];
			if (strIdx === startAt) {
				runeIdx = i;
			}
			((i < 0 || i >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i] = r$1);
			i = i + (1) >> 0;
			_i += _rune[1];
		}
		if (startAt === s.length) {
			runeIdx = i;
		}
		return [$subslice(ret, 0, i), runeIdx];
	};
	Regexp.prototype.getRunesAndStart = function(s, startAt) { return this.$val.getRunesAndStart(s, startAt); };
	getRunes = function(s) {
		var s;
		return (new sliceType$3($stringToRunes(s)));
	};
	Regexp.ptr.prototype.MatchRunes = function(r) {
		var {_r, _tuple, err, m, r, re, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.run(true, -1, r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [false, err];
		}
		$s = -1; return [!(m === ptrType$1.nil), $ifaceNil];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.MatchRunes, $c: true, $r, _r, _tuple, err, m, r, re, $s};return $f;
	};
	Regexp.prototype.MatchRunes = function(r) { return this.$val.MatchRunes(r); };
	Regexp.ptr.prototype.GetGroupNames = function() {
		var i, re, result;
		re = this;
		result = sliceType$4.nil;
		if (re.capslist === sliceType$4.nil) {
			result = $makeSlice(sliceType$4, re.capsize);
			i = 0;
			while (true) {
				if (!(i < result.$length)) { break; }
				((i < 0 || i >= result.$length) ? ($throwRuntimeError("index out of range"), undefined) : result.$array[result.$offset + i] = strconv.Itoa(i));
				i = i + (1) >> 0;
			}
		} else {
			result = $makeSlice(sliceType$4, re.capslist.$length);
			$copySlice(result, re.capslist);
		}
		return result;
	};
	Regexp.prototype.GetGroupNames = function() { return this.$val.GetGroupNames(); };
	Regexp.ptr.prototype.GetGroupNumbers = function() {
		var _entry, _i, _key, _keys, _ref, _size, i, k, re, result, v;
		re = this;
		result = sliceType$1.nil;
		if (re.caps === false) {
			result = $makeSlice(sliceType$1, re.capsize);
			i = 0;
			while (true) {
				if (!(i < result.$length)) { break; }
				((i < 0 || i >= result.$length) ? ($throwRuntimeError("index out of range"), undefined) : result.$array[result.$offset + i] = i);
				i = i + (1) >> 0;
			}
		} else {
			result = $makeSlice(sliceType$1, (re.caps ? re.caps.size : 0));
			_ref = re.caps;
			_i = 0;
			_keys = _ref ? _ref.keys() : undefined;
			_size = _ref ? _ref.size : 0;
			while (true) {
				if (!(_i < _size)) { break; }
				_key = _keys.next().value;
				_entry = _ref.get(_key);
				if (_entry === undefined) {
					_i++;
					continue;
				}
				k = _entry.k;
				v = _entry.v;
				((v < 0 || v >= result.$length) ? ($throwRuntimeError("index out of range"), undefined) : result.$array[result.$offset + v] = k);
				_i++;
			}
		}
		return result;
	};
	Regexp.prototype.GetGroupNumbers = function() { return this.$val.GetGroupNumbers(); };
	Regexp.ptr.prototype.GroupNameFromNumber = function(i) {
		var _entry, _tuple, i, ok, re, x;
		re = this;
		if (re.capslist === sliceType$4.nil) {
			if (i >= 0 && i < re.capsize) {
				return strconv.Itoa(i);
			}
			return "";
		}
		if (!(re.caps === false)) {
			ok = false;
			_tuple = (_entry = $mapIndex(re.caps,$Int.keyFor(i)), _entry !== undefined ? [_entry.v, true] : [0, false]);
			i = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				return "";
			}
		}
		if (i >= 0 && i < re.capslist.$length) {
			return (x = re.capslist, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return "";
	};
	Regexp.prototype.GroupNameFromNumber = function(i) { return this.$val.GroupNameFromNumber(i); };
	Regexp.ptr.prototype.GroupNumberFromName = function(name) {
		var _entry, _tuple, ch, i, k, name, ok, re, result;
		re = this;
		if (!(re.capnames === false)) {
			_tuple = (_entry = $mapIndex(re.capnames,$String.keyFor(name)), _entry !== undefined ? [_entry.v, true] : [0, false]);
			k = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				return k;
			}
			return -1;
		}
		result = 0;
		i = 0;
		while (true) {
			if (!(i < name.length)) { break; }
			ch = name.charCodeAt(i);
			if (ch > 57 || ch < 48) {
				return -1;
			}
			result = $imul(result, (10));
			result = result + ((((ch - 48 << 24 >>> 24) >> 0))) >> 0;
			i = i + (1) >> 0;
		}
		if (result >= 0 && result < re.capsize) {
			return result;
		}
		return -1;
	};
	Regexp.prototype.GroupNumberFromName = function(name) { return this.$val.GroupNumberFromName(name); };
	Regexp.ptr.prototype.MarshalText = function() {
		var re;
		re = this;
		return [(new sliceType$2($stringToBytes(re.String()))), $ifaceNil];
	};
	Regexp.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Regexp.ptr.prototype.UnmarshalText = function(text) {
		var {_r, _tuple, err, newRE, re, text, $s, $r, $c} = $restore(this, {text});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = Compile(($bytesToString(text)), $pkg.DefaultUnmarshalOptions); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		newRE = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		Regexp.copy(re, newRE);
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.UnmarshalText, $c: true, $r, _r, _tuple, err, newRE, re, text, $s};return $f;
	};
	Regexp.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	Capture.ptr.prototype.String = function() {
		var c;
		c = this;
		return ($runesToString($subslice(c.text, c.Index, (c.Index + c.Length >> 0))));
	};
	Capture.prototype.String = function() { return this.$val.String(); };
	Capture.ptr.prototype.Runes = function() {
		var c;
		c = this;
		return $subslice(c.text, c.Index, (c.Index + c.Length >> 0));
	};
	Capture.prototype.Runes = function() { return this.$val.Runes(); };
	newMatch = function(regex, capcount, text, startpos) {
		var capcount, m, regex, startpos, text, x;
		m = new Match.ptr(new Group.ptr(new Capture.ptr(sliceType$3.nil, 0, 0), "", sliceType$6.nil), regex, sliceType$7.nil, 0, startpos, 0, sliceType$1.nil, false, $makeSlice(sliceType$8, capcount), $makeSlice(sliceType$1, capcount), false);
		m.Group.Name = "0";
		m.Group.Capture.text = text;
		(x = m.matches, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0] = $makeSlice(sliceType$1, 2)));
		return m;
	};
	newMatchSparse = function(regex, caps, capcount, text, startpos) {
		var capcount, caps, m, regex, startpos, text;
		m = newMatch(regex, capcount, text, startpos);
		m.sparseCaps = caps;
		return m;
	};
	Match.ptr.prototype.reset = function(text, textstart) {
		var i, m, text, textstart, x;
		m = this;
		m.Group.Capture.text = text;
		m.textstart = textstart;
		i = 0;
		while (true) {
			if (!(i < m.matchcount.$length)) { break; }
			(x = m.matchcount, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = 0));
			i = i + (1) >> 0;
		}
		m.balancing = false;
	};
	Match.prototype.reset = function(text, textstart) { return this.$val.reset(text, textstart); };
	Match.ptr.prototype.tidy = function(textpos) {
		var _q, _tmp, _tmp$1, cap, i, interval, j, limit, m, matcharray, textpos, x, x$1, x$2, x$3, x$4;
		m = this;
		interval = (x = m.matches, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		m.Group.Capture.Index = (0 >= interval.$length ? ($throwRuntimeError("index out of range"), undefined) : interval.$array[interval.$offset + 0]);
		m.Group.Capture.Length = (1 >= interval.$length ? ($throwRuntimeError("index out of range"), undefined) : interval.$array[interval.$offset + 1]);
		m.textpos = textpos;
		m.capcount = (x$1 = m.matchcount, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
		m.Group.Captures = new sliceType$6([$clone(m.Group.Capture, Capture)]);
		if (m.balancing) {
			cap = 0;
			while (true) {
				if (!(cap < m.matchcount.$length)) { break; }
				limit = $imul((x$2 = m.matchcount, ((cap < 0 || cap >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + cap])), 2);
				matcharray = (x$3 = m.matches, ((cap < 0 || cap >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + cap]));
				_tmp = 0;
				_tmp$1 = 0;
				i = _tmp;
				j = _tmp$1;
				i = 0;
				while (true) {
					if (!(i < limit)) { break; }
					if (((i < 0 || i >= matcharray.$length) ? ($throwRuntimeError("index out of range"), undefined) : matcharray.$array[matcharray.$offset + i]) < 0) {
						break;
					}
					i = i + (1) >> 0;
				}
				j = i;
				while (true) {
					if (!(i < limit)) { break; }
					if (((i < 0 || i >= matcharray.$length) ? ($throwRuntimeError("index out of range"), undefined) : matcharray.$array[matcharray.$offset + i]) < 0) {
						j = j - (1) >> 0;
					} else {
						if (!((i === j))) {
							((j < 0 || j >= matcharray.$length) ? ($throwRuntimeError("index out of range"), undefined) : matcharray.$array[matcharray.$offset + j] = ((i < 0 || i >= matcharray.$length) ? ($throwRuntimeError("index out of range"), undefined) : matcharray.$array[matcharray.$offset + i]));
						}
						j = j + (1) >> 0;
					}
					i = i + (1) >> 0;
				}
				(x$4 = m.matchcount, ((cap < 0 || cap >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + cap] = (_q = j / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
				cap = cap + (1) >> 0;
			}
			m.balancing = false;
		}
	};
	Match.prototype.tidy = function(textpos) { return this.$val.tidy(textpos); };
	Match.ptr.prototype.isMatched = function(cap) {
		var cap, m, x, x$1, x$2, x$3, x$4;
		m = this;
		return cap < m.matchcount.$length && (x = m.matchcount, ((cap < 0 || cap >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + cap])) > 0 && !(((x$1 = (x$2 = m.matches, ((cap < 0 || cap >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + cap])), x$3 = ($imul((x$4 = m.matchcount, ((cap < 0 || cap >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + cap])), 2)) - 1 >> 0, ((x$3 < 0 || x$3 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$3])) === -2));
	};
	Match.prototype.isMatched = function(cap) { return this.$val.isMatched(cap); };
	Match.ptr.prototype.matchIndex = function(cap) {
		var cap, i, m, x, x$1, x$2, x$3, x$4, x$5, x$6;
		m = this;
		i = (x = (x$1 = m.matches, ((cap < 0 || cap >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + cap])), x$2 = ($imul((x$3 = m.matchcount, ((cap < 0 || cap >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + cap])), 2)) - 2 >> 0, ((x$2 < 0 || x$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$2]));
		if (i >= 0) {
			return i;
		}
		return (x$4 = (x$5 = m.matches, ((cap < 0 || cap >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + cap])), x$6 = -3 - i >> 0, ((x$6 < 0 || x$6 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$6]));
	};
	Match.prototype.matchIndex = function(cap) { return this.$val.matchIndex(cap); };
	Match.ptr.prototype.matchLength = function(cap) {
		var cap, i, m, x, x$1, x$2, x$3, x$4, x$5, x$6;
		m = this;
		i = (x = (x$1 = m.matches, ((cap < 0 || cap >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + cap])), x$2 = ($imul((x$3 = m.matchcount, ((cap < 0 || cap >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + cap])), 2)) - 1 >> 0, ((x$2 < 0 || x$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$2]));
		if (i >= 0) {
			return i;
		}
		return (x$4 = (x$5 = m.matches, ((cap < 0 || cap >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + cap])), x$6 = -3 - i >> 0, ((x$6 < 0 || x$6 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$6]));
	};
	Match.prototype.matchLength = function(cap) { return this.$val.matchLength(cap); };
	Match.ptr.prototype.addMatch = function(c, start, l) {
		var c, capcount, l, m, newmatches, oldmatches, start, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		m = this;
		if ((x = m.matches, ((c < 0 || c >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + c])) === sliceType$1.nil) {
			(x$1 = m.matches, ((c < 0 || c >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + c] = $makeSlice(sliceType$1, 2)));
		}
		capcount = (x$2 = m.matchcount, ((c < 0 || c >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + c]));
		if ((($imul(capcount, 2)) + 2 >> 0) > (x$3 = m.matches, ((c < 0 || c >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + c])).$length) {
			oldmatches = (x$4 = m.matches, ((c < 0 || c >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + c]));
			newmatches = $makeSlice(sliceType$1, ($imul(capcount, 8)));
			$copySlice(newmatches, $subslice(oldmatches, 0, ($imul(capcount, 2))));
			(x$5 = m.matches, ((c < 0 || c >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + c] = newmatches));
		}
		(x$6 = (x$7 = m.matches, ((c < 0 || c >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + c])), x$8 = $imul(capcount, 2), ((x$8 < 0 || x$8 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$8] = start));
		(x$9 = (x$10 = m.matches, ((c < 0 || c >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + c])), x$11 = ($imul(capcount, 2)) + 1 >> 0, ((x$11 < 0 || x$11 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$11] = l));
		(x$12 = m.matchcount, ((c < 0 || c >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + c] = (capcount + 1 >> 0)));
	};
	Match.prototype.addMatch = function(c, start, l) { return this.$val.addMatch(c, start, l); };
	Match.ptr.prototype.balanceMatch = function(c) {
		var c, capcount, m, target, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		m = this;
		m.balancing = true;
		capcount = (x = m.matchcount, ((c < 0 || c >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + c]));
		target = ($imul(capcount, 2)) - 2 >> 0;
		if ((x$1 = (x$2 = m.matches, ((c < 0 || c >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + c])), ((target < 0 || target >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + target])) < 0) {
			target = -3 - (x$3 = (x$4 = m.matches, ((c < 0 || c >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + c])), ((target < 0 || target >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + target])) >> 0;
		}
		target = target - (2) >> 0;
		if (target >= 0 && (x$5 = (x$6 = m.matches, ((c < 0 || c >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + c])), ((target < 0 || target >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + target])) < 0) {
			m.addMatch(c, (x$7 = (x$8 = m.matches, ((c < 0 || c >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + c])), ((target < 0 || target >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + target])), (x$9 = (x$10 = m.matches, ((c < 0 || c >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + c])), x$11 = target + 1 >> 0, ((x$11 < 0 || x$11 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$11])));
		} else {
			m.addMatch(c, -3 - target >> 0, -4 - target >> 0);
		}
	};
	Match.prototype.balanceMatch = function(c) { return this.$val.balanceMatch(c); };
	Match.ptr.prototype.removeMatch = function(c) {
		var c, m, x, x$1;
		m = this;
		(x$1 = m.matchcount, ((c < 0 || c >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + c] = ((x = m.matchcount, ((c < 0 || c >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + c])) - (1) >> 0)));
	};
	Match.prototype.removeMatch = function(c) { return this.$val.removeMatch(c); };
	Match.ptr.prototype.GroupCount = function() {
		var m;
		m = this;
		return m.matchcount.$length;
	};
	Match.prototype.GroupCount = function() { return this.$val.GroupCount(); };
	Match.ptr.prototype.GroupByName = function(name) {
		var m, name, num;
		m = this;
		num = m.regex.GroupNumberFromName(name);
		if (num < 0) {
			return ptrType$12.nil;
		}
		return m.GroupByNumber(num);
	};
	Match.prototype.GroupByName = function(name) { return this.$val.GroupByName(name); };
	Match.ptr.prototype.GroupByNumber = function(num) {
		var _entry, _tuple, m, newNum, num, ok, x, x$1;
		m = this;
		if (!(m.sparseCaps === false)) {
			_tuple = (_entry = $mapIndex(m.sparseCaps,$Int.keyFor(num)), _entry !== undefined ? [_entry.v, true] : [0, false]);
			newNum = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				num = newNum;
			}
		}
		if (num >= m.matchcount.$length || num < 0) {
			return ptrType$12.nil;
		}
		if (num === 0) {
			return m.Group;
		}
		m.populateOtherGroups();
		return (x = m.otherGroups, x$1 = num - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	Match.prototype.GroupByNumber = function(num) { return this.$val.GroupByNumber(num); };
	Match.ptr.prototype.Groups = function() {
		var g, m;
		m = this;
		m.populateOtherGroups();
		g = $makeSlice(sliceType$7, (m.otherGroups.$length + 1 >> 0));
		Group.copy((0 >= g.$length ? ($throwRuntimeError("index out of range"), undefined) : g.$array[g.$offset + 0]), m.Group);
		$copySlice($subslice(g, 1), m.otherGroups);
		return g;
	};
	Match.prototype.Groups = function() { return this.$val.Groups(); };
	Match.ptr.prototype.populateOtherGroups = function() {
		var i, m, x, x$1, x$2, x$3, x$4;
		m = this;
		if (m.otherGroups === sliceType$7.nil) {
			m.otherGroups = $makeSlice(sliceType$7, (m.matchcount.$length - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < m.otherGroups.$length)) { break; }
				Group.copy((x$4 = m.otherGroups, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])), newGroup(m.regex.GroupNameFromNumber(i + 1 >> 0), m.Group.Capture.text, (x = m.matches, x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), (x$2 = m.matchcount, x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]))));
				i = i + (1) >> 0;
			}
		}
	};
	Match.prototype.populateOtherGroups = function() { return this.$val.populateOtherGroups(); };
	Match.ptr.prototype.groupValueAppendToBuf = function(groupnum, buf) {
		var {_r, buf, c, groupnum, index, last, m, matches, x, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {groupnum, buf});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		c = (x = m.matchcount, ((groupnum < 0 || groupnum >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + groupnum]));
		if (c === 0) {
			$s = -1; return;
		}
		matches = (x$1 = m.matches, ((groupnum < 0 || groupnum >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + groupnum]));
		index = (x$2 = $imul(((c - 1 >> 0)), 2), ((x$2 < 0 || x$2 >= matches.$length) ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + x$2]));
		last = index + (x$3 = (($imul(c, 2))) - 1 >> 0, ((x$3 < 0 || x$3 >= matches.$length) ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + x$3])) >> 0;
		/* while (true) { */ case 1:
			/* if (!(index < last)) { break; } */ if(!(index < last)) { $s = 2; continue; }
			_r = buf.WriteRune((x$4 = m.Group.Capture.text, ((index < 0 || index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + index]))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			index = index + (1) >> 0;
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Match.ptr.prototype.groupValueAppendToBuf, $c: true, $r, _r, buf, c, groupnum, index, last, m, matches, x, x$1, x$2, x$3, x$4, $s};return $f;
	};
	Match.prototype.groupValueAppendToBuf = function(groupnum, buf) { return this.$val.groupValueAppendToBuf(groupnum, buf); };
	newGroup = function(name, text, caps, capcount) {
		var capcount, caps, g, i, name, text, x, x$1, x$2, x$3, x$4;
		g = new Group.ptr(new Capture.ptr(sliceType$3.nil, 0, 0), "", sliceType$6.nil);
		g.Capture.text = text;
		if (capcount > 0) {
			g.Capture.Index = (x = $imul(((capcount - 1 >> 0)), 2), ((x < 0 || x >= caps.$length) ? ($throwRuntimeError("index out of range"), undefined) : caps.$array[caps.$offset + x]));
			g.Capture.Length = (x$1 = (($imul(capcount, 2))) - 1 >> 0, ((x$1 < 0 || x$1 >= caps.$length) ? ($throwRuntimeError("index out of range"), undefined) : caps.$array[caps.$offset + x$1]));
		}
		g.Name = name;
		g.Captures = $makeSlice(sliceType$6, capcount);
		i = 0;
		while (true) {
			if (!(i < capcount)) { break; }
			Capture.copy((x$4 = g.Captures, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])), new Capture.ptr(text, (x$2 = $imul(i, 2), ((x$2 < 0 || x$2 >= caps.$length) ? ($throwRuntimeError("index out of range"), undefined) : caps.$array[caps.$offset + x$2])), (x$3 = ($imul(i, 2)) + 1 >> 0, ((x$3 < 0 || x$3 >= caps.$length) ? ($throwRuntimeError("index out of range"), undefined) : caps.$array[caps.$offset + x$3]))));
			i = i + (1) >> 0;
		}
		return g;
	};
	fasttime.prototype.reached = function() {
		var t, x;
		t = this;
		return (x = fast.current.read(), (x.$high > t.$high || (x.$high === t.$high && x.$low >= t.$low)));
	};
	$ptrType(fasttime).prototype.reached = function() { return this.$get().reached(); };
	makeDeadline = function(d) {
		var {_r, _r$1, d, end, x, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {d});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		end = (x = fast.current.read(), x$1 = durationToTicks(new time.Duration(d.$high + clockPeriod.$high, d.$low + clockPeriod.$low)), new fasttime(x.$high + x$1.$high, x.$low + x$1.$low));
		/* */ if ((x$2 = fast.clockEnd.read(), (end.$high > x$2.$high || (end.$high === x$2.$high && end.$low > x$2.$low)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x$2 = fast.clockEnd.read(), (end.$high > x$2.$high || (end.$high === x$2.$high && end.$low > x$2.$low)))) { */ case 1:
			$r = fast.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!fast.running && !$clone(fast.start, time.Time).IsZero()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!fast.running && !$clone(fast.start, time.Time).IsZero()) { */ case 4:
				_r = time.Since($clone(fast.start, time.Time)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = durationToTicks(_r); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = fast.current.write(_r$1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				end = (x$3 = fast.current.read(), x$4 = durationToTicks(new time.Duration(d.$high + clockPeriod.$high, d.$low + clockPeriod.$low)), new fasttime(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
			/* } */ case 5:
			$r = fast.mu.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = extendClock(end); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return end;
		/* */ } return; } var $f = {$blk: makeDeadline, $c: true, $r, _r, _r$1, d, end, x, x$1, x$2, x$3, x$4, $s};return $f;
	};
	extendClock = function(end) {
		var {_r, end, shutdown, x, x$1, $s, $deferred, $r, $c} = $restore(this, {end});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		$r = fast.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(fast.mu, "Unlock"), []]);
		/* */ if ($clone(fast.start, time.Time).IsZero()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($clone(fast.start, time.Time).IsZero()) { */ case 2:
			_r = time.Now(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			time.Time.copy(fast.start, _r);
		/* } */ case 3:
		shutdown = (x = durationToTicks(new time.Duration(0, 1000000000)), new fasttime(end.$high + x.$high, end.$low + x.$low));
		if ((x$1 = fast.clockEnd.read(), (shutdown.$high > x$1.$high || (shutdown.$high === x$1.$high && shutdown.$low > x$1.$low)))) {
			fast.clockEnd.write(shutdown);
		}
		if (!fast.running) {
			fast.running = true;
			$go(runClock, []);
		}
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: extendClock, $c: true, $r, _r, end, shutdown, x, x$1, $s, $deferred};return $f; } }
	};
	durationToTicks = function(d) {
		var d;
		return $shiftRightInt64((new fasttime(d.$high, d.$low)), 20);
	};
	runClock = function() {
		var {_r, _r$1, newTime, x, x$1, $s, $deferred, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		$r = fast.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(fast.mu, "Unlock"), []]);
		/* while (true) { */ case 2:
			/* if (!((x = fast.current.read(), x$1 = fast.clockEnd.read(), (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low <= x$1.$low))))) { break; } */ if(!((x = fast.current.read(), x$1 = fast.clockEnd.read(), (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low <= x$1.$low))))) { $s = 3; continue; }
			$r = fast.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = time.Sleep(clockPeriod); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = fast.mu.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = time.Since($clone(fast.start, time.Time)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = durationToTicks(_r); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			newTime = _r$1;
			fast.current.write(newTime);
		$s = 2; continue;
		case 3:
		fast.running = false;
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: runClock, $c: true, $r, _r, _r$1, newTime, x, x$1, $s, $deferred};return $f; } }
	};
	atomicTime.ptr.prototype.read = function() {
		var t, x;
		t = this;
		return ((x = atomic.LoadInt64((t.$ptr_v || (t.$ptr_v = new ptrType$13(function() { return this.$target.v; }, function($v) { this.$target.v = $v; }, t)))), new fasttime(x.$high, x.$low)));
	};
	atomicTime.prototype.read = function() { return this.$val.read(); };
	atomicTime.ptr.prototype.write = function(v) {
		var t, v;
		t = this;
		atomic.StoreInt64((t.$ptr_v || (t.$ptr_v = new ptrType$13(function() { return this.$target.v; }, function($v) { this.$target.v = $v; }, t))), (new $Int64(v.$high, v.$low)));
	};
	atomicTime.prototype.write = function(v) { return this.$val.write(v); };
	ptrType$10.methods = [{prop: "scan", name: "scan", pkg: "github.com/dlclark/regexp2", typ: $funcType([sliceType$3, $Int, $Bool, time.Duration], [ptrType$1, $error], false)}, {prop: "execute", name: "execute", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$error], false)}, {prop: "ensureStorage", name: "ensureStorage", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "crawl", name: "crawl", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "popcrawl", name: "popcrawl", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "crawlpos", name: "crawlpos", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "advance", name: "advance", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "goTo", name: "goTo", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "textto", name: "textto", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "trackto", name: "trackto", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "textstart", name: "textstart", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "textPos", name: "textPos", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "trackpos", name: "trackpos", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "trackPush", name: "trackPush", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "trackPush1", name: "trackPush1", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "trackPush2", name: "trackPush2", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int], [], false)}, {prop: "trackPush3", name: "trackPush3", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int, $Int], [], false)}, {prop: "trackPushNeg1", name: "trackPushNeg1", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "trackPushNeg2", name: "trackPushNeg2", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int], [], false)}, {prop: "backtrack", name: "backtrack", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "setOperator", name: "setOperator", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "trackPop", name: "trackPop", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "trackPopN", name: "trackPopN", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "trackPeek", name: "trackPeek", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "trackPeekN", name: "trackPeekN", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [$Int], false)}, {prop: "stackPush", name: "stackPush", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "stackPush2", name: "stackPush2", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int], [], false)}, {prop: "stackPop", name: "stackPop", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "stackPopN", name: "stackPopN", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "stackPeek", name: "stackPeek", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "stackPeekN", name: "stackPeekN", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [$Int], false)}, {prop: "operand", name: "operand", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [$Int], false)}, {prop: "leftchars", name: "leftchars", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "rightchars", name: "rightchars", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "bump", name: "bump", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "forwardchars", name: "forwardchars", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int], false)}, {prop: "forwardcharnext", name: "forwardcharnext", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Int32], false)}, {prop: "runematch", name: "runematch", pkg: "github.com/dlclark/regexp2", typ: $funcType([sliceType$3], [$Bool], false)}, {prop: "refmatch", name: "refmatch", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "backwardnext", name: "backwardnext", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "charAt", name: "charAt", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [$Int32], false)}, {prop: "findFirstChar", name: "findFirstChar", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Bool], false)}, {prop: "initMatch", name: "initMatch", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "tidyMatch", name: "tidyMatch", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Bool], [ptrType$1], false)}, {prop: "capture", name: "capture", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int, $Int], [], false)}, {prop: "transferCapture", name: "transferCapture", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int, $Int, $Int], [], false)}, {prop: "uncapture", name: "uncapture", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "dumpState", name: "dumpState", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "stackDescription", name: "stackDescription", pkg: "github.com/dlclark/regexp2", typ: $funcType([sliceType$1, $Int], [$String], false)}, {prop: "textposDescription", name: "textposDescription", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$String], false)}, {prop: "isBoundary", name: "isBoundary", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "isECMABoundary", name: "isECMABoundary", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "startTimeoutWatch", name: "startTimeoutWatch", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "checkTimeout", name: "checkTimeout", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$error], false)}, {prop: "initTrackCount", name: "initTrackCount", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}];
	ptrType$6.methods = [{prop: "run", name: "run", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Bool, $Int, sliceType$3], [ptrType$1, $error], false)}, {prop: "getRunner", name: "getRunner", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [ptrType$10], false)}, {prop: "putRunner", name: "putRunner", pkg: "github.com/dlclark/regexp2", typ: $funcType([ptrType$10], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RightToLeft", name: "RightToLeft", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Debug", name: "Debug", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String, $String, $Int, $Int], [$String, $error], false)}, {prop: "ReplaceFunc", name: "ReplaceFunc", pkg: "", typ: $funcType([$String, MatchEvaluator, $Int, $Int], [$String, $error], false)}, {prop: "FindStringMatch", name: "FindStringMatch", pkg: "", typ: $funcType([$String], [ptrType$1, $error], false)}, {prop: "FindRunesMatch", name: "FindRunesMatch", pkg: "", typ: $funcType([sliceType$3], [ptrType$1, $error], false)}, {prop: "FindStringMatchStartingAt", name: "FindStringMatchStartingAt", pkg: "", typ: $funcType([$String, $Int], [ptrType$1, $error], false)}, {prop: "FindRunesMatchStartingAt", name: "FindRunesMatchStartingAt", pkg: "", typ: $funcType([sliceType$3, $Int], [ptrType$1, $error], false)}, {prop: "FindNextMatch", name: "FindNextMatch", pkg: "", typ: $funcType([ptrType$1], [ptrType$1, $error], false)}, {prop: "MatchString", name: "MatchString", pkg: "", typ: $funcType([$String], [$Bool, $error], false)}, {prop: "getRunesAndStart", name: "getRunesAndStart", pkg: "github.com/dlclark/regexp2", typ: $funcType([$String, $Int], [sliceType$3, $Int], false)}, {prop: "MatchRunes", name: "MatchRunes", pkg: "", typ: $funcType([sliceType$3], [$Bool, $error], false)}, {prop: "GetGroupNames", name: "GetGroupNames", pkg: "", typ: $funcType([], [sliceType$4], false)}, {prop: "GetGroupNumbers", name: "GetGroupNumbers", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "GroupNameFromNumber", name: "GroupNameFromNumber", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "GroupNumberFromName", name: "GroupNumberFromName", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$2, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$2], [$error], false)}];
	ptrType$1.methods = [{prop: "reset", name: "reset", pkg: "github.com/dlclark/regexp2", typ: $funcType([sliceType$3, $Int], [], false)}, {prop: "tidy", name: "tidy", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "isMatched", name: "isMatched", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [$Bool], false)}, {prop: "matchIndex", name: "matchIndex", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [$Int], false)}, {prop: "matchLength", name: "matchLength", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [$Int], false)}, {prop: "addMatch", name: "addMatch", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, $Int, $Int], [], false)}, {prop: "balanceMatch", name: "balanceMatch", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "removeMatch", name: "removeMatch", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int], [], false)}, {prop: "GroupCount", name: "GroupCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GroupByName", name: "GroupByName", pkg: "", typ: $funcType([$String], [ptrType$12], false)}, {prop: "GroupByNumber", name: "GroupByNumber", pkg: "", typ: $funcType([$Int], [ptrType$12], false)}, {prop: "Groups", name: "Groups", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "populateOtherGroups", name: "populateOtherGroups", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [], false)}, {prop: "groupValueAppendToBuf", name: "groupValueAppendToBuf", pkg: "github.com/dlclark/regexp2", typ: $funcType([$Int, ptrType$14], [], false)}, {prop: "dump", name: "dump", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$String], false)}];
	ptrType$15.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Runes", name: "Runes", pkg: "", typ: $funcType([], [sliceType$3], false)}];
	fasttime.methods = [{prop: "reached", name: "reached", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [$Bool], false)}];
	ptrType$16.methods = [{prop: "read", name: "read", pkg: "github.com/dlclark/regexp2", typ: $funcType([], [fasttime], false)}, {prop: "write", name: "write", pkg: "github.com/dlclark/regexp2", typ: $funcType([fasttime], [], false)}];
	runner.init("github.com/dlclark/regexp2", [{prop: "re", name: "re", embedded: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "code", name: "code", embedded: false, exported: false, typ: ptrType$7, tag: ""}, {prop: "runtextstart", name: "runtextstart", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "runtext", name: "runtext", embedded: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "runtextpos", name: "runtextpos", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "runtextend", name: "runtextend", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "runtrack", name: "runtrack", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "runtrackpos", name: "runtrackpos", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "runstack", name: "runstack", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "runstackpos", name: "runstackpos", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "runcrawl", name: "runcrawl", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "runcrawlpos", name: "runcrawlpos", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "runtrackcount", name: "runtrackcount", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "runmatch", name: "runmatch", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ignoreTimeout", name: "ignoreTimeout", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "timeout", name: "timeout", embedded: false, exported: false, typ: time.Duration, tag: ""}, {prop: "deadline", name: "deadline", embedded: false, exported: false, typ: fasttime, tag: ""}, {prop: "operator", name: "operator", embedded: false, exported: false, typ: syntax.InstOp, tag: ""}, {prop: "codepos", name: "codepos", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "rightToLeft", name: "rightToLeft", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "caseInsensitive", name: "caseInsensitive", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	MatchEvaluator.init([Match], [$String], false);
	Regexp.init("github.com/dlclark/regexp2", [{prop: "MatchTimeout", name: "MatchTimeout", embedded: false, exported: true, typ: time.Duration, tag: ""}, {prop: "pattern", name: "pattern", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "options", name: "options", embedded: false, exported: false, typ: RegexOptions, tag: ""}, {prop: "caps", name: "caps", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "capnames", name: "capnames", embedded: false, exported: false, typ: mapType$1, tag: ""}, {prop: "capslist", name: "capslist", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "capsize", name: "capsize", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "code", name: "code", embedded: false, exported: false, typ: ptrType$7, tag: ""}, {prop: "muRun", name: "muRun", embedded: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "runner", name: "runner", embedded: false, exported: false, typ: sliceType$5, tag: ""}]);
	Match.init("github.com/dlclark/regexp2", [{prop: "Group", name: "Group", embedded: true, exported: true, typ: Group, tag: ""}, {prop: "regex", name: "regex", embedded: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "otherGroups", name: "otherGroups", embedded: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "textpos", name: "textpos", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "textstart", name: "textstart", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "capcount", name: "capcount", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "caps", name: "caps", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "sparseCaps", name: "sparseCaps", embedded: false, exported: false, typ: mapType, tag: ""}, {prop: "matches", name: "matches", embedded: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "matchcount", name: "matchcount", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "balancing", name: "balancing", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	Group.init("", [{prop: "Capture", name: "Capture", embedded: true, exported: true, typ: Capture, tag: ""}, {prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Captures", name: "Captures", embedded: false, exported: true, typ: sliceType$6, tag: ""}]);
	Capture.init("github.com/dlclark/regexp2", [{prop: "text", name: "text", embedded: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "Index", name: "Index", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Length", name: "Length", embedded: false, exported: true, typ: $Int, tag: ""}]);
	fastclock.init("github.com/dlclark/regexp2", [{prop: "current", name: "current", embedded: false, exported: false, typ: atomicTime, tag: ""}, {prop: "clockEnd", name: "clockEnd", embedded: false, exported: false, typ: atomicTime, tag: ""}, {prop: "mu", name: "mu", embedded: false, exported: false, typ: sync.Mutex, tag: ""}, {prop: "start", name: "start", embedded: false, exported: false, typ: time.Time, tag: ""}, {prop: "running", name: "running", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	atomicTime.init("github.com/dlclark/regexp2", [{prop: "v", name: "v", embedded: false, exported: false, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syntax.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fast = new fastclock.ptr(new atomicTime.ptr(new $Int64(0, 0)), new atomicTime.ptr(new $Int64(0, 0)), new sync.Mutex.ptr(0, 0), new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil), false);
		$pkg.DefaultMatchTimeout = new time.Duration(2147483647, 4294967295);
		$pkg.DefaultUnmarshalOptions = 0;
		clockPeriod = new time.Duration(0, 100000000);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["regexp/syntax"] = (function() {
	var $pkg = {}, $init, sort, strconv, strings, unicode, utf8, Regexp, Op, Prog, InstOp, EmptyOp, Inst, Error, ErrorCode, Flags, parser, charGroup, ranges, patchList, frag, compiler, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType, sliceType$4, arrayType, arrayType$1, ptrType$1, sliceType$5, ptrType$2, ptrType$3, ptrType$4, sliceType$6, ptrType$5, ptrType$6, ptrType$7, mapType, ptrType$8, instOpNames, code1, code2, code3, perlGroup, code4, code5, code6, code7, code8, code9, code10, code11, code12, code13, code14, code15, code16, code17, posixGroup, anyTable, _Op_index_0, anyRuneNotNL, anyRune, simplify1, writeRegexp, escape, IsWordChar, bw, dumpProg, u32, dumpInst, minFoldRune, repeatIsValid, cleanAlt, literalRegexp, Parse, parse, isValidCaptureName, isCharClass, matchRune, mergeCharClass, unicodeTable, cleanClass, appendLiteral, appendRange, appendFoldedRange, appendClass, appendFoldedClass, appendNegatedClass, appendTable, appendNegatedTable, negateClass, checkUTF8, nextRune, isalnum, unhex, makePatchList, Compile;
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Regexp = $pkg.Regexp = $newType(0, $kindStruct, "syntax.Regexp", true, "regexp/syntax", true, function(Op_, Flags_, Sub_, Sub0_, Rune_, Rune0_, Min_, Max_, Cap_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = 0;
			this.Flags = 0;
			this.Sub = sliceType$4.nil;
			this.Sub0 = arrayType.zero();
			this.Rune = sliceType$1.nil;
			this.Rune0 = arrayType$1.zero();
			this.Min = 0;
			this.Max = 0;
			this.Cap = 0;
			this.Name = "";
			return;
		}
		this.Op = Op_;
		this.Flags = Flags_;
		this.Sub = Sub_;
		this.Sub0 = Sub0_;
		this.Rune = Rune_;
		this.Rune0 = Rune0_;
		this.Min = Min_;
		this.Max = Max_;
		this.Cap = Cap_;
		this.Name = Name_;
	});
	Op = $pkg.Op = $newType(1, $kindUint8, "syntax.Op", true, "regexp/syntax", true, null);
	Prog = $pkg.Prog = $newType(0, $kindStruct, "syntax.Prog", true, "regexp/syntax", true, function(Inst_, Start_, NumCap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = sliceType$6.nil;
			this.Start = 0;
			this.NumCap = 0;
			return;
		}
		this.Inst = Inst_;
		this.Start = Start_;
		this.NumCap = NumCap_;
	});
	InstOp = $pkg.InstOp = $newType(1, $kindUint8, "syntax.InstOp", true, "regexp/syntax", true, null);
	EmptyOp = $pkg.EmptyOp = $newType(1, $kindUint8, "syntax.EmptyOp", true, "regexp/syntax", true, null);
	Inst = $pkg.Inst = $newType(0, $kindStruct, "syntax.Inst", true, "regexp/syntax", true, function(Op_, Out_, Arg_, Rune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = 0;
			this.Out = 0;
			this.Arg = 0;
			this.Rune = sliceType$1.nil;
			return;
		}
		this.Op = Op_;
		this.Out = Out_;
		this.Arg = Arg_;
		this.Rune = Rune_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "syntax.Error", true, "regexp/syntax", true, function(Code_, Expr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = "";
			this.Expr = "";
			return;
		}
		this.Code = Code_;
		this.Expr = Expr_;
	});
	ErrorCode = $pkg.ErrorCode = $newType(8, $kindString, "syntax.ErrorCode", true, "regexp/syntax", true, null);
	Flags = $pkg.Flags = $newType(2, $kindUint16, "syntax.Flags", true, "regexp/syntax", true, null);
	parser = $pkg.parser = $newType(0, $kindStruct, "syntax.parser", true, "regexp/syntax", false, function(flags_, stack_, free_, numCap_, wholeRegexp_, tmpClass_, numRegexp_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.flags = 0;
			this.stack = sliceType$4.nil;
			this.free = ptrType.nil;
			this.numCap = 0;
			this.wholeRegexp = "";
			this.tmpClass = sliceType$1.nil;
			this.numRegexp = 0;
			this.height = false;
			return;
		}
		this.flags = flags_;
		this.stack = stack_;
		this.free = free_;
		this.numCap = numCap_;
		this.wholeRegexp = wholeRegexp_;
		this.tmpClass = tmpClass_;
		this.numRegexp = numRegexp_;
		this.height = height_;
	});
	charGroup = $pkg.charGroup = $newType(0, $kindStruct, "syntax.charGroup", true, "regexp/syntax", false, function(sign_, class$1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sign = 0;
			this.class$1 = sliceType$1.nil;
			return;
		}
		this.sign = sign_;
		this.class$1 = class$1_;
	});
	ranges = $pkg.ranges = $newType(0, $kindStruct, "syntax.ranges", true, "regexp/syntax", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = ptrType$2.nil;
			return;
		}
		this.p = p_;
	});
	patchList = $pkg.patchList = $newType(0, $kindStruct, "syntax.patchList", true, "regexp/syntax", false, function(head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.head = head_;
		this.tail = tail_;
	});
	frag = $pkg.frag = $newType(0, $kindStruct, "syntax.frag", true, "regexp/syntax", false, function(i_, out_, nullable_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.i = 0;
			this.out = new patchList.ptr(0, 0);
			this.nullable = false;
			return;
		}
		this.i = i_;
		this.out = out_;
		this.nullable = nullable_;
	});
	compiler = $pkg.compiler = $newType(0, $kindStruct, "syntax.compiler", true, "regexp/syntax", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = ptrType$4.nil;
			return;
		}
		this.p = p_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($Int32);
	sliceType$2 = $sliceType(unicode.Range16);
	sliceType$3 = $sliceType(unicode.Range32);
	ptrType = $ptrType(Regexp);
	sliceType$4 = $sliceType(ptrType);
	arrayType = $arrayType(ptrType, 1);
	arrayType$1 = $arrayType($Int32, 2);
	ptrType$1 = $ptrType(strings.Builder);
	sliceType$5 = $sliceType($Uint8);
	ptrType$2 = $ptrType(sliceType$1);
	ptrType$3 = $ptrType(unicode.RangeTable);
	ptrType$4 = $ptrType(Prog);
	sliceType$6 = $sliceType(Inst);
	ptrType$5 = $ptrType(Inst);
	ptrType$6 = $ptrType(Error);
	ptrType$7 = $ptrType(parser);
	mapType = $mapType(ptrType, $Int);
	ptrType$8 = $ptrType(compiler);
	Regexp.ptr.prototype.Simplify = function() {
		var _1, _i, _ref, i, i$1, i$2, i$3, nre, nre$1, nre2, nsub, prefix, re, sub, sub$1, sub$2, suffix, x, x$1;
		re = this;
		if (re === ptrType.nil) {
			return ptrType.nil;
		}
		_1 = re.Op;
		if ((_1 === (13)) || (_1 === (18)) || (_1 === (19))) {
			nre = re;
			_ref = re.Sub;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				nsub = sub.Simplify();
				if (nre === re && !(nsub === sub)) {
					nre = new Regexp.ptr(0, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
					Regexp.copy(nre, re);
					nre.Rune = sliceType$1.nil;
					nre.Sub = $appendSlice($subslice(new sliceType$4(nre.Sub0), 0, 0), $subslice(re.Sub, 0, i));
				}
				if (!(nre === re)) {
					nre.Sub = $append(nre.Sub, nsub);
				}
				_i++;
			}
			return nre;
		} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16))) {
			sub$1 = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Simplify();
			return simplify1(re.Op, re.Flags, sub$1, re);
		} else if (_1 === (17)) {
			if ((re.Min === 0) && (re.Max === 0)) {
				return new Regexp.ptr(2, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
			}
			sub$2 = (x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).Simplify();
			if (re.Max === -1) {
				if (re.Min === 0) {
					return simplify1(14, re.Flags, sub$2, ptrType.nil);
				}
				if (re.Min === 1) {
					return simplify1(15, re.Flags, sub$2, ptrType.nil);
				}
				nre$1 = new Regexp.ptr(18, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
				nre$1.Sub = $subslice(new sliceType$4(nre$1.Sub0), 0, 0);
				i$1 = 0;
				while (true) {
					if (!(i$1 < (re.Min - 1 >> 0))) { break; }
					nre$1.Sub = $append(nre$1.Sub, sub$2);
					i$1 = i$1 + (1) >> 0;
				}
				nre$1.Sub = $append(nre$1.Sub, simplify1(15, re.Flags, sub$2, ptrType.nil));
				return nre$1;
			}
			if ((re.Min === 1) && (re.Max === 1)) {
				return sub$2;
			}
			prefix = ptrType.nil;
			if (re.Min > 0) {
				prefix = new Regexp.ptr(18, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
				prefix.Sub = $subslice(new sliceType$4(prefix.Sub0), 0, 0);
				i$2 = 0;
				while (true) {
					if (!(i$2 < re.Min)) { break; }
					prefix.Sub = $append(prefix.Sub, sub$2);
					i$2 = i$2 + (1) >> 0;
				}
			}
			if (re.Max > re.Min) {
				suffix = simplify1(16, re.Flags, sub$2, ptrType.nil);
				i$3 = re.Min + 1 >> 0;
				while (true) {
					if (!(i$3 < re.Max)) { break; }
					nre2 = new Regexp.ptr(18, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
					nre2.Sub = $append($subslice(new sliceType$4(nre2.Sub0), 0, 0), sub$2, suffix);
					suffix = simplify1(16, re.Flags, nre2, ptrType.nil);
					i$3 = i$3 + (1) >> 0;
				}
				if (prefix === ptrType.nil) {
					return suffix;
				}
				prefix.Sub = $append(prefix.Sub, suffix);
			}
			if (!(prefix === ptrType.nil)) {
				return prefix;
			}
			return new Regexp.ptr(1, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
		}
		return re;
	};
	Regexp.prototype.Simplify = function() { return this.$val.Simplify(); };
	simplify1 = function(op, flags, sub, re) {
		var flags, op, re, sub, x;
		if (sub.Op === 2) {
			return sub;
		}
		if ((op === sub.Op) && (((flags & 32) >>> 0) === ((sub.Flags & 32) >>> 0))) {
			return sub;
		}
		if (!(re === ptrType.nil) && (re.Op === op) && (((re.Flags & 32) >>> 0) === ((flags & 32) >>> 0)) && sub === (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]))) {
			return re;
		}
		re = new Regexp.ptr(op, flags, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
		re.Sub = $append($subslice(new sliceType$4(re.Sub0), 0, 0), sub);
		return re;
	};
	Regexp.ptr.prototype.Equal = function(y) {
		var _1, _i, _i$1, _ref, _ref$1, i, i$1, r, sub, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y;
		x = this;
		if (x === ptrType.nil || y === ptrType.nil) {
			return x === y;
		}
		if (!((x.Op === y.Op))) {
			return false;
		}
		_1 = x.Op;
		if (_1 === (10)) {
			if (!((((x.Flags & 256) >>> 0) === ((y.Flags & 256) >>> 0)))) {
				return false;
			}
		} else if ((_1 === (3)) || (_1 === (4))) {
			if (!((x.Rune.$length === y.Rune.$length))) {
				return false;
			}
			_ref = x.Rune;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (!((r === (x$1 = y.Rune, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]))))) {
					return false;
				}
				_i++;
			}
		} else if ((_1 === (19)) || (_1 === (18))) {
			if (!((x.Sub.$length === y.Sub.$length))) {
				return false;
			}
			_ref$1 = x.Sub;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				sub = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!sub.Equal((x$2 = y.Sub, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
		} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16))) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !(x$3 = x.Sub, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).Equal((x$4 = y.Sub, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])))) {
				return false;
			}
		} else if (_1 === (17)) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !((x.Min === y.Min)) || !((x.Max === y.Max)) || !(x$5 = x.Sub, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0])).Equal((x$6 = y.Sub, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])))) {
				return false;
			}
		} else if (_1 === (13)) {
			if (!((x.Cap === y.Cap)) || !(x.Name === y.Name) || !(x$7 = x.Sub, (0 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 0])).Equal((x$8 = y.Sub, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0])))) {
				return false;
			}
		}
		return true;
	};
	Regexp.prototype.Equal = function(y) { return this.$val.Equal(y); };
	writeRegexp = function(b, re) {
		var _1, _2, _i, _i$1, _i$2, _r, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, b, hi, hi$1, i, i$1, i$2, lo, lo$1, r, re, sub, sub$1, sub$2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		switch (0) { default:
			_1 = re.Op;
			if (_1 === (1)) {
				b.WriteString("[^\\x00-\\x{10FFFF}]");
			} else if (_1 === (2)) {
				b.WriteString("(?:)");
			} else if (_1 === (3)) {
				if (!((((re.Flags & 1) >>> 0) === 0))) {
					b.WriteString("(?i:");
				}
				_ref = re.Rune;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					escape(b, r, false);
					_i++;
				}
				if (!((((re.Flags & 1) >>> 0) === 0))) {
					b.WriteString(")");
				}
			} else if (_1 === (4)) {
				if (!(((_r = re.Rune.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
					b.WriteString("[invalid char class]");
					break;
				}
				b.WriteRune(91);
				if (re.Rune.$length === 0) {
					b.WriteString("^\\x00-\\x{10FFFF}");
				} else if (((x = re.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === 0) && ((x$1 = re.Rune, x$2 = re.Rune.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === 1114111) && re.Rune.$length > 2) {
					b.WriteRune(94);
					i = 1;
					while (true) {
						if (!(i < (re.Rune.$length - 1 >> 0))) { break; }
						_tmp = (x$3 = re.Rune, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])) + 1 >> 0;
						_tmp$1 = (x$4 = re.Rune, x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) - 1 >> 0;
						lo = _tmp;
						hi = _tmp$1;
						escape(b, lo, lo === 45);
						if (!((lo === hi))) {
							b.WriteRune(45);
							escape(b, hi, hi === 45);
						}
						i = i + (2) >> 0;
					}
				} else {
					i$1 = 0;
					while (true) {
						if (!(i$1 < re.Rune.$length)) { break; }
						_tmp$2 = (x$6 = re.Rune, ((i$1 < 0 || i$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$1]));
						_tmp$3 = (x$7 = re.Rune, x$8 = i$1 + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
						lo$1 = _tmp$2;
						hi$1 = _tmp$3;
						escape(b, lo$1, lo$1 === 45);
						if (!((lo$1 === hi$1))) {
							b.WriteRune(45);
							escape(b, hi$1, hi$1 === 45);
						}
						i$1 = i$1 + (2) >> 0;
					}
				}
				b.WriteRune(93);
			} else if (_1 === (5)) {
				b.WriteString("(?-s:.)");
			} else if (_1 === (6)) {
				b.WriteString("(?s:.)");
			} else if (_1 === (7)) {
				b.WriteString("(?m:^)");
			} else if (_1 === (8)) {
				b.WriteString("(?m:$)");
			} else if (_1 === (9)) {
				b.WriteString("\\A");
			} else if (_1 === (10)) {
				if (!((((re.Flags & 256) >>> 0) === 0))) {
					b.WriteString("(?-m:$)");
				} else {
					b.WriteString("\\z");
				}
			} else if (_1 === (11)) {
				b.WriteString("\\b");
			} else if (_1 === (12)) {
				b.WriteString("\\B");
			} else if (_1 === (13)) {
				if (!(re.Name === "")) {
					b.WriteString("(?P<");
					b.WriteString(re.Name);
					b.WriteRune(62);
				} else {
					b.WriteRune(40);
				}
				if (!(((x$9 = re.Sub, (0 >= x$9.$length ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + 0])).Op === 2))) {
					writeRegexp(b, (x$10 = re.Sub, (0 >= x$10.$length ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + 0])));
				}
				b.WriteRune(41);
			} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17))) {
				sub = (x$11 = re.Sub, (0 >= x$11.$length ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + 0]));
				if (sub.Op > 13 || (sub.Op === 3) && sub.Rune.$length > 1) {
					b.WriteString("(?:");
					writeRegexp(b, sub);
					b.WriteString(")");
				} else {
					writeRegexp(b, sub);
				}
				_2 = re.Op;
				if (_2 === (14)) {
					b.WriteRune(42);
				} else if (_2 === (15)) {
					b.WriteRune(43);
				} else if (_2 === (16)) {
					b.WriteRune(63);
				} else if (_2 === (17)) {
					b.WriteRune(123);
					b.WriteString(strconv.Itoa(re.Min));
					if (!((re.Max === re.Min))) {
						b.WriteRune(44);
						if (re.Max >= 0) {
							b.WriteString(strconv.Itoa(re.Max));
						}
					}
					b.WriteRune(125);
				}
				if (!((((re.Flags & 32) >>> 0) === 0))) {
					b.WriteRune(63);
				}
			} else if (_1 === (18)) {
				_ref$1 = re.Sub;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					sub$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (sub$1.Op === 19) {
						b.WriteString("(?:");
						writeRegexp(b, sub$1);
						b.WriteString(")");
					} else {
						writeRegexp(b, sub$1);
					}
					_i$1++;
				}
			} else if (_1 === (19)) {
				_ref$2 = re.Sub;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					sub$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
					if (i$2 > 0) {
						b.WriteRune(124);
					}
					writeRegexp(b, sub$2);
					_i$2++;
				}
			} else {
				b.WriteString("<invalid op" + strconv.Itoa(((re.Op >> 0))) + ">");
			}
		}
	};
	Regexp.ptr.prototype.String = function() {
		var b, re;
		re = this;
		b = new strings.Builder.ptr(ptrType$1.nil, sliceType$5.nil);
		writeRegexp(b, re);
		return b.String();
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	escape = function(b, r, force) {
		var _1, b, force, r, s;
		if (unicode.IsPrint(r)) {
			if (strings.ContainsRune("\\.+*?()|[]{}^$", r) || force) {
				b.WriteRune(92);
			}
			b.WriteRune(r);
			return;
		}
		switch (0) { default:
			_1 = r;
			if (_1 === (7)) {
				b.WriteString("\\a");
			} else if (_1 === (12)) {
				b.WriteString("\\f");
			} else if (_1 === (10)) {
				b.WriteString("\\n");
			} else if (_1 === (13)) {
				b.WriteString("\\r");
			} else if (_1 === (9)) {
				b.WriteString("\\t");
			} else if (_1 === (11)) {
				b.WriteString("\\v");
			} else {
				if (r < 256) {
					b.WriteString("\\x");
					s = strconv.FormatInt((new $Int64(0, r)), 16);
					if (s.length === 1) {
						b.WriteRune(48);
					}
					b.WriteString(s);
					break;
				}
				b.WriteString("\\x{");
				b.WriteString(strconv.FormatInt((new $Int64(0, r)), 16));
				b.WriteString("}");
			}
		}
	};
	Regexp.ptr.prototype.MaxCap = function() {
		var _i, _ref, m, n, re, sub;
		re = this;
		m = 0;
		if (re.Op === 13) {
			m = re.Cap;
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			n = sub.MaxCap();
			if (m < n) {
				m = n;
			}
			_i++;
		}
		return m;
	};
	Regexp.prototype.MaxCap = function() { return this.$val.MaxCap(); };
	Regexp.ptr.prototype.CapNames = function() {
		var names, re;
		re = this;
		names = $makeSlice(sliceType, (re.MaxCap() + 1 >> 0));
		re.capNames(names);
		return names;
	};
	Regexp.prototype.CapNames = function() { return this.$val.CapNames(); };
	Regexp.ptr.prototype.capNames = function(names) {
		var _i, _ref, names, re, sub, x;
		re = this;
		if (re.Op === 13) {
			(x = re.Cap, ((x < 0 || x >= names.$length) ? ($throwRuntimeError("index out of range"), undefined) : names.$array[names.$offset + x] = re.Name));
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			sub.capNames(names);
			_i++;
		}
	};
	Regexp.prototype.capNames = function(names) { return this.$val.capNames(names); };
	InstOp.prototype.String = function() {
		var i;
		i = this.$val;
		if (((i >>> 0)) >= ((instOpNames.$length >>> 0))) {
			return "";
		}
		return ((i < 0 || i >= instOpNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : instOpNames.$array[instOpNames.$offset + i]);
	};
	$ptrType(InstOp).prototype.String = function() { return new InstOp(this.$get()).String(); };
	IsWordChar = function(r) {
		var r;
		return 65 <= r && r <= 90 || 97 <= r && r <= 122 || 48 <= r && r <= 57 || (r === 95);
	};
	$pkg.IsWordChar = IsWordChar;
	Prog.ptr.prototype.String = function() {
		var b, p;
		p = this;
		b = new strings.Builder.ptr(ptrType$1.nil, sliceType$5.nil);
		dumpProg(b, p);
		return b.String();
	};
	Prog.prototype.String = function() { return this.$val.String(); };
	Prog.ptr.prototype.skipNop = function(pc) {
		var i, p, pc, x, x$1, x$2;
		p = this;
		i = (x = p.Inst, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc]));
		while (true) {
			if (!((i.Op === 6) || (i.Op === 2))) { break; }
			i = (x$1 = p.Inst, x$2 = i.Out, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2]));
		}
		return i;
	};
	Prog.prototype.skipNop = function(pc) { return this.$val.skipNop(pc); };
	Inst.ptr.prototype.op = function() {
		var _1, i, op;
		i = this;
		op = i.Op;
		_1 = op;
		if ((_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			op = 7;
		}
		return op;
	};
	Inst.prototype.op = function() { return this.$val.op(); };
	Prog.ptr.prototype.Prefix = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, buf, complete, i, p, prefix, x, x$1;
		prefix = "";
		complete = false;
		p = this;
		i = p.skipNop(((p.Start >>> 0)));
		if (!((i.op() === 7)) || !((i.Rune.$length === 1))) {
			_tmp = "";
			_tmp$1 = i.Op === 4;
			prefix = _tmp;
			complete = _tmp$1;
			return [prefix, complete];
		}
		buf = new strings.Builder.ptr(ptrType$1.nil, sliceType$5.nil);
		while (true) {
			if (!((i.op() === 7) && (i.Rune.$length === 1) && (((((i.Arg << 16 >>> 16)) & 1) >>> 0) === 0) && !(((x = i.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === 65533)))) { break; }
			buf.WriteRune((x$1 = i.Rune, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])));
			i = p.skipNop(i.Out);
		}
		_tmp$2 = buf.String();
		_tmp$3 = i.Op === 4;
		prefix = _tmp$2;
		complete = _tmp$3;
		return [prefix, complete];
	};
	Prog.prototype.Prefix = function() { return this.$val.Prefix(); };
	Prog.ptr.prototype.StartCond = function() {
		var _1, flag, i, p, pc, x, x$1;
		p = this;
		flag = 0;
		pc = ((p.Start >>> 0));
		i = (x = p.Inst, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc]));
		Loop:
		while (true) {
			_1 = i.Op;
			if (_1 === (3)) {
				flag = (flag | (((i.Arg << 24 >>> 24)))) >>> 0;
			} else if (_1 === (5)) {
				return 255;
			} else if ((_1 === (2)) || (_1 === (6))) {
			} else {
				break Loop;
			}
			pc = i.Out;
			i = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pc]));
		}
		return flag;
	};
	Prog.prototype.StartCond = function() { return this.$val.StartCond(); };
	Inst.ptr.prototype.MatchRune = function(r) {
		var i, r;
		i = this;
		return !((i.MatchRunePos(r) === -1));
	};
	Inst.prototype.MatchRune = function(r) { return this.$val.MatchRune(r); };
	Inst.ptr.prototype.MatchRunePos = function(r) {
		var _1, _q, _q$1, _q$2, c, hi, i, j, lo, m, r, r0, r1, rune, x, x$1, x$2;
		i = this;
		rune = i.Rune;
		_1 = rune.$length;
		if (_1 === (0)) {
			return -1;
		} else if (_1 === (1)) {
			r0 = (0 >= rune.$length ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + 0]);
			if (r === r0) {
				return 0;
			}
			if (!((((((i.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
				r1 = unicode.SimpleFold(r0);
				while (true) {
					if (!(!((r1 === r0)))) { break; }
					if (r === r1) {
						return 0;
					}
					r1 = unicode.SimpleFold(r1);
				}
			}
			return -1;
		} else if (_1 === (2)) {
			if (r >= (0 >= rune.$length ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + 0]) && r <= (1 >= rune.$length ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + 1])) {
				return 0;
			}
			return -1;
		} else if ((_1 === (4)) || (_1 === (6)) || (_1 === (8))) {
			j = 0;
			while (true) {
				if (!(j < rune.$length)) { break; }
				if (r < ((j < 0 || j >= rune.$length) ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + j])) {
					return -1;
				}
				if (r <= (x = j + 1 >> 0, ((x < 0 || x >= rune.$length) ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + x]))) {
					return (_q = j / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				}
				j = j + (2) >> 0;
			}
			return -1;
		}
		lo = 0;
		hi = (_q$1 = rune.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q$2 = ((hi - lo >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			c = (x$1 = $imul(2, m), ((x$1 < 0 || x$1 >= rune.$length) ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + x$1]));
			if (c <= r) {
				if (r <= (x$2 = ($imul(2, m)) + 1 >> 0, ((x$2 < 0 || x$2 >= rune.$length) ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + x$2]))) {
					return m;
				}
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		return -1;
	};
	Inst.prototype.MatchRunePos = function(r) { return this.$val.MatchRunePos(r); };
	Inst.ptr.prototype.MatchEmptyWidth = function(before, after) {
		var _1, after, before, i;
		i = this;
		_1 = ((i.Arg << 24 >>> 24));
		if (_1 === (1)) {
			return (before === 10) || (before === -1);
		} else if (_1 === (2)) {
			return (after === 10) || (after === -1);
		} else if (_1 === (4)) {
			return before === -1;
		} else if (_1 === (8)) {
			return after === -1;
		} else if (_1 === (16)) {
			return !(IsWordChar(before) === IsWordChar(after));
		} else if (_1 === (32)) {
			return IsWordChar(before) === IsWordChar(after);
		}
		$panic(new $String("unknown empty width arg"));
	};
	Inst.prototype.MatchEmptyWidth = function(before, after) { return this.$val.MatchEmptyWidth(before, after); };
	Inst.ptr.prototype.String = function() {
		var b, i;
		i = this;
		b = new strings.Builder.ptr(ptrType$1.nil, sliceType$5.nil);
		dumpInst(b, i);
		return b.String();
	};
	Inst.prototype.String = function() { return this.$val.String(); };
	bw = function(b, args) {
		var _i, _ref, args, b, s;
		_ref = args;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			b.WriteString(s);
			_i++;
		}
	};
	dumpProg = function(b, p) {
		var _i, _ref, b, i, j, p, pc, x;
		_ref = p.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			j = _i;
			i = (x = p.Inst, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			pc = strconv.Itoa(j);
			if (pc.length < 3) {
				b.WriteString($substring("   ", pc.length));
			}
			if (j === p.Start) {
				pc = pc + ("*");
			}
			bw(b, new sliceType([pc, "\t"]));
			dumpInst(b, i);
			bw(b, new sliceType(["\n"]));
			_i++;
		}
	};
	u32 = function(i) {
		var i;
		return strconv.FormatUint((new $Uint64(0, i)), 10);
	};
	dumpInst = function(b, i) {
		var _1, b, i;
		_1 = i.Op;
		if (_1 === (0)) {
			bw(b, new sliceType(["alt -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_1 === (1)) {
			bw(b, new sliceType(["altmatch -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_1 === (2)) {
			bw(b, new sliceType(["cap ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_1 === (3)) {
			bw(b, new sliceType(["empty ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_1 === (4)) {
			bw(b, new sliceType(["match"]));
		} else if (_1 === (5)) {
			bw(b, new sliceType(["fail"]));
		} else if (_1 === (6)) {
			bw(b, new sliceType(["nop -> ", u32(i.Out)]));
		} else if (_1 === (7)) {
			if (i.Rune === sliceType$1.nil) {
				bw(b, new sliceType(["rune <nil>"]));
			}
			bw(b, new sliceType(["rune ", strconv.QuoteToASCII(($runesToString(i.Rune)))]));
			if (!((((((i.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
				bw(b, new sliceType(["/i"]));
			}
			bw(b, new sliceType([" -> ", u32(i.Out)]));
		} else if (_1 === (8)) {
			bw(b, new sliceType(["rune1 ", strconv.QuoteToASCII(($runesToString(i.Rune))), " -> ", u32(i.Out)]));
		} else if (_1 === (9)) {
			bw(b, new sliceType(["any -> ", u32(i.Out)]));
		} else if (_1 === (10)) {
			bw(b, new sliceType(["anynotnl -> ", u32(i.Out)]));
		}
	};
	Error.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "error parsing regexp: " + new ErrorCode(e.Code).String() + ": `" + e.Expr + "`";
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	ErrorCode.prototype.String = function() {
		var e;
		e = this.$val;
		return (e);
	};
	$ptrType(ErrorCode).prototype.String = function() { return new ErrorCode(this.$get()).String(); };
	parser.ptr.prototype.newRegexp = function(op) {
		var op, p, re;
		p = this;
		re = p.free;
		if (!(re === ptrType.nil)) {
			p.free = re.Sub0[0];
			Regexp.copy(re, new Regexp.ptr(0, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, ""));
		} else {
			re = new Regexp.ptr(0, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
			p.numRegexp = p.numRegexp + (1) >> 0;
		}
		re.Op = op;
		return re;
	};
	parser.prototype.newRegexp = function(op) { return this.$val.newRegexp(op); };
	parser.ptr.prototype.reuse = function(re) {
		var p, re;
		p = this;
		if (!(p.height === false)) {
			$mapDelete(p.height, ptrType.keyFor(re));
		}
		re.Sub0[0] = p.free;
		p.free = re;
	};
	parser.prototype.reuse = function(re) { return this.$val.reuse(re); };
	parser.ptr.prototype.checkHeight = function(re) {
		var _i, _ref, p, re, re$1;
		p = this;
		if (p.numRegexp < 1000) {
			return;
		}
		if (p.height === false) {
			p.height = new $global.Map();
			_ref = p.stack;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				re$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				p.checkHeight(re$1);
				_i++;
			}
		}
		if (p.calcHeight(re, true) > 1000) {
			$panic(new ErrorCode("expression nests too deeply"));
		}
	};
	parser.prototype.checkHeight = function(re) { return this.$val.checkHeight(re); };
	parser.ptr.prototype.calcHeight = function(re, force) {
		var _entry, _i, _key, _ref, _tuple, force, h, h$1, hsub, ok, p, re, sub;
		p = this;
		if (!force) {
			_tuple = (_entry = $mapIndex(p.height,ptrType.keyFor(re)), _entry !== undefined ? [_entry.v, true] : [0, false]);
			h = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				return h;
			}
		}
		h$1 = 1;
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			hsub = p.calcHeight(sub, false);
			if (h$1 < (1 + hsub >> 0)) {
				h$1 = 1 + hsub >> 0;
			}
			_i++;
		}
		_key = re; (p.height || $throwRuntimeError("assignment to entry in nil map")).set(ptrType.keyFor(_key), { k: _key, v: h$1 });
		return h$1;
	};
	parser.prototype.calcHeight = function(re, force) { return this.$val.calcHeight(re, force); };
	parser.ptr.prototype.push = function(re) {
		var p, re, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		p = this;
		if ((re.Op === 4) && (re.Rune.$length === 2) && ((x = re.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === (x$1 = re.Rune, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])))) {
			if (p.maybeConcat((x$16 = re.Rune, (0 >= x$16.$length ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + 0])), (p.flags & ~1) << 16 >>> 16)) {
				return ptrType.nil;
			}
			re.Op = 3;
			re.Rune = $subslice(re.Rune, 0, 1);
			re.Flags = (p.flags & ~1) << 16 >>> 16;
		} else if ((re.Op === 4) && (re.Rune.$length === 4) && ((x$2 = re.Rune, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) === (x$3 = re.Rune, (1 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 1]))) && ((x$4 = re.Rune, (2 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 2])) === (x$5 = re.Rune, (3 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 3]))) && (unicode.SimpleFold((x$6 = re.Rune, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0]))) === (x$7 = re.Rune, (2 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 2]))) && (unicode.SimpleFold((x$8 = re.Rune, (2 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 2]))) === (x$9 = re.Rune, (0 >= x$9.$length ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + 0]))) || (re.Op === 4) && (re.Rune.$length === 2) && (((x$10 = re.Rune, (0 >= x$10.$length ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + 0])) + 1 >> 0) === (x$11 = re.Rune, (1 >= x$11.$length ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + 1]))) && (unicode.SimpleFold((x$12 = re.Rune, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0]))) === (x$13 = re.Rune, (1 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 1]))) && (unicode.SimpleFold((x$14 = re.Rune, (1 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 1]))) === (x$15 = re.Rune, (0 >= x$15.$length ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + 0])))) {
			if (p.maybeConcat((x$17 = re.Rune, (0 >= x$17.$length ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + 0])), (p.flags | 1) >>> 0)) {
				return ptrType.nil;
			}
			re.Op = 3;
			re.Rune = $subslice(re.Rune, 0, 1);
			re.Flags = (p.flags | 1) >>> 0;
		} else {
			p.maybeConcat(-1, 0);
		}
		p.stack = $append(p.stack, re);
		p.checkHeight(re);
		return re;
	};
	parser.prototype.push = function(re) { return this.$val.push(re); };
	parser.ptr.prototype.maybeConcat = function(r, flags) {
		var flags, n, p, r, re1, re2, x, x$1, x$2, x$3, x$4;
		p = this;
		n = p.stack.$length;
		if (n < 2) {
			return false;
		}
		re1 = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		re2 = (x$2 = p.stack, x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		if (!((re1.Op === 3)) || !((re2.Op === 3)) || !((((re1.Flags & 1) >>> 0) === ((re2.Flags & 1) >>> 0)))) {
			return false;
		}
		re2.Rune = $appendSlice(re2.Rune, re1.Rune);
		if (r >= 0) {
			re1.Rune = $subslice(new sliceType$1(re1.Rune0), 0, 1);
			(x$4 = re1.Rune, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0] = r));
			re1.Flags = flags;
			return true;
		}
		p.stack = $subslice(p.stack, 0, (n - 1 >> 0));
		p.reuse(re1);
		return false;
	};
	parser.prototype.maybeConcat = function(r, flags) { return this.$val.maybeConcat(r, flags); };
	parser.ptr.prototype.literal = function(r) {
		var p, r, re;
		p = this;
		re = p.newRegexp(3);
		re.Flags = p.flags;
		if (!((((p.flags & 1) >>> 0) === 0))) {
			r = minFoldRune(r);
		}
		re.Rune0[0] = r;
		re.Rune = $subslice(new sliceType$1(re.Rune0), 0, 1);
		p.push(re);
	};
	parser.prototype.literal = function(r) { return this.$val.literal(r); };
	minFoldRune = function(r) {
		var min, r, r0;
		if (r < 65 || r > 125251) {
			return r;
		}
		min = r;
		r0 = r;
		r = unicode.SimpleFold(r);
		while (true) {
			if (!(!((r === r0)))) { break; }
			if (min > r) {
				min = r;
			}
			r = unicode.SimpleFold(r);
		}
		return min;
	};
	parser.ptr.prototype.op = function(op) {
		var op, p, re;
		p = this;
		re = p.newRegexp(op);
		re.Flags = p.flags;
		return p.push(re);
	};
	parser.prototype.op = function(op) { return this.$val.op(op); };
	parser.ptr.prototype.repeat = function(op, min, max, before, after, lastRepeat) {
		var after, before, flags, lastRepeat, max, min, n, op, p, re, sub, x, x$1, x$2, x$3, x$4;
		p = this;
		flags = p.flags;
		if (!((((p.flags & 64) >>> 0) === 0))) {
			if (after.length > 0 && (after.charCodeAt(0) === 63)) {
				after = $substring(after, 1);
				flags = (flags ^ (32)) << 16 >>> 16;
			}
			if (!(lastRepeat === "")) {
				return ["", new Error.ptr("invalid nested repetition operator", $substring(lastRepeat, 0, (lastRepeat.length - after.length >> 0)))];
			}
		}
		n = p.stack.$length;
		if (n === 0) {
			return ["", new Error.ptr("missing argument to repetition operator", $substring(before, 0, (before.length - after.length >> 0)))];
		}
		sub = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (sub.Op >= 128) {
			return ["", new Error.ptr("missing argument to repetition operator", $substring(before, 0, (before.length - after.length >> 0)))];
		}
		re = p.newRegexp(op);
		re.Min = min;
		re.Max = max;
		re.Flags = flags;
		re.Sub = $subslice(new sliceType$4(re.Sub0), 0, 1);
		(x$2 = re.Sub, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = sub));
		(x$3 = p.stack, x$4 = n - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = re));
		p.checkHeight(re);
		if ((op === 17) && (min >= 2 || max >= 2) && !repeatIsValid(re, 1000)) {
			return ["", new Error.ptr("invalid repeat count", $substring(before, 0, (before.length - after.length >> 0)))];
		}
		return [after, $ifaceNil];
	};
	parser.prototype.repeat = function(op, min, max, before, after, lastRepeat) { return this.$val.repeat(op, min, max, before, after, lastRepeat); };
	repeatIsValid = function(re, n) {
		var _i, _q, _ref, m, n, re, sub;
		if (re.Op === 17) {
			m = re.Max;
			if (m === 0) {
				return true;
			}
			if (m < 0) {
				m = re.Min;
			}
			if (m > n) {
				return false;
			}
			if (m > 0) {
				n = (_q = n / (m), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			}
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!repeatIsValid(sub, n)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	parser.ptr.prototype.concat = function() {
		var {$24r, _r, _r$1, i, p, subs, x, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		p.maybeConcat(-1, 0);
		i = p.stack.$length;
		while (true) {
			if (!(i > 0 && (x = p.stack, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Op < 128)) { break; }
			i = i - (1) >> 0;
		}
		subs = $subslice(p.stack, i);
		p.stack = $subslice(p.stack, 0, i);
		if (subs.$length === 0) {
			$s = -1; return p.push(p.newRegexp(2));
		}
		_r = p.collapse(subs, 18); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.push(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.concat, $c: true, $r, $24r, _r, _r$1, i, p, subs, x, x$1, $s};return $f;
	};
	parser.prototype.concat = function() { return this.$val.concat(); };
	parser.ptr.prototype.alternate = function() {
		var {$24r, _r, _r$1, i, p, subs, x, x$1, x$2, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		i = p.stack.$length;
		while (true) {
			if (!(i > 0 && (x = p.stack, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Op < 128)) { break; }
			i = i - (1) >> 0;
		}
		subs = $subslice(p.stack, i);
		p.stack = $subslice(p.stack, 0, i);
		/* */ if (subs.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (subs.$length > 0) { */ case 1:
			$r = cleanAlt((x$2 = subs.$length - 1 >> 0, ((x$2 < 0 || x$2 >= subs.$length) ? ($throwRuntimeError("index out of range"), undefined) : subs.$array[subs.$offset + x$2]))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (subs.$length === 0) {
			$s = -1; return p.push(p.newRegexp(1));
		}
		_r = p.collapse(subs, 19); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.push(_r); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 6; case 6: return $24r;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.alternate, $c: true, $r, $24r, _r, _r$1, i, p, subs, x, x$1, x$2, $s};return $f;
	};
	parser.prototype.alternate = function() { return this.$val.alternate(); };
	cleanAlt = function(re) {
		var {_1, _r, re, x, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {re});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_1 = re.Op;
			/* */ if (_1 === (4)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_1 === (4)) { */ case 2:
				_r = cleanClass((re.$ptr_Rune || (re.$ptr_Rune = new ptrType$2(function() { return this.$target.Rune; }, function($v) { this.$target.Rune = $v; }, re)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				re.Rune = _r;
				if ((re.Rune.$length === 2) && ((x = re.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === 0) && ((x$1 = re.Rune, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])) === 1114111)) {
					re.Rune = sliceType$1.nil;
					re.Op = 6;
					$s = -1; return;
				}
				if ((re.Rune.$length === 4) && ((x$2 = re.Rune, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) === 0) && ((x$3 = re.Rune, (1 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 1])) === 9) && ((x$4 = re.Rune, (2 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 2])) === 11) && ((x$5 = re.Rune, (3 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 3])) === 1114111)) {
					re.Rune = sliceType$1.nil;
					re.Op = 5;
					$s = -1; return;
				}
				if ((re.Rune.$capacity - re.Rune.$length >> 0) > 100) {
					re.Rune = $appendSlice($subslice(new sliceType$1(re.Rune0), 0, 0), re.Rune);
				}
			/* } */ case 3:
		case 1:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: cleanAlt, $c: true, $r, _1, _r, re, x, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	parser.ptr.prototype.collapse = function(subs, op) {
		var {_i, _r, _ref, old, op, p, re, sub, subs, x, $s, $r, $c} = $restore(this, {subs, op});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (subs.$length === 1) {
			$s = -1; return (0 >= subs.$length ? ($throwRuntimeError("index out of range"), undefined) : subs.$array[subs.$offset + 0]);
		}
		re = p.newRegexp(op);
		re.Sub = $subslice(new sliceType$4(re.Sub0), 0, 0);
		_ref = subs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (sub.Op === op) {
				re.Sub = $appendSlice(re.Sub, sub.Sub);
				p.reuse(sub);
			} else {
				re.Sub = $append(re.Sub, sub);
			}
			_i++;
		}
		/* */ if (op === 19) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (op === 19) { */ case 1:
			_r = p.factor(re.Sub); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			re.Sub = _r;
			if (re.Sub.$length === 1) {
				old = re;
				re = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
				p.reuse(old);
			}
		/* } */ case 2:
		$s = -1; return re;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.collapse, $c: true, $r, _i, _r, _ref, old, op, p, re, sub, subs, x, $s};return $f;
	};
	parser.prototype.collapse = function(subs, op) { return this.$val.collapse(subs, op); };
	parser.ptr.prototype.factor = function(sub) {
		var {_i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, first, i, i$1, i$2, i$3, ifirst, iflags, istr, j, j$1, j$2, j$3, max, out, p, prefix, prefix$1, re, re$1, reuse, same, start, str, strflags, sub, suffix, suffix$1, x, x$1, $s, $r, $c} = $restore(this, {sub});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		if (sub.$length < 2) {
			$s = -1; return sub;
		}
		str = sliceType$1.nil;
		strflags = 0;
		start = 0;
		out = $subslice(sub, 0, 0);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i <= sub.$length)) { break; } */ if(!(i <= sub.$length)) { $s = 2; continue; }
			istr = sliceType$1.nil;
			iflags = 0;
			if (i < sub.$length) {
				_tuple = p.leadingString(((i < 0 || i >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i]));
				istr = _tuple[0];
				iflags = _tuple[1];
				if (iflags === strflags) {
					same = 0;
					while (true) {
						if (!(same < str.$length && same < istr.$length && (((same < 0 || same >= str.$length) ? ($throwRuntimeError("index out of range"), undefined) : str.$array[str.$offset + same]) === ((same < 0 || same >= istr.$length) ? ($throwRuntimeError("index out of range"), undefined) : istr.$array[istr.$offset + same])))) { break; }
						same = same + (1) >> 0;
					}
					if (same > 0) {
						str = $subslice(str, 0, same);
						i = i + (1) >> 0;
						/* continue; */ $s = 1; continue;
					}
				}
			}
			/* */ if (i === start) { $s = 3; continue; }
			/* */ if (i === (start + 1 >> 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === start) { */ case 3:
				$s = 6; continue;
			/* } else if (i === (start + 1 >> 0)) { */ case 4:
				out = $append(out, ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]));
				$s = 6; continue;
			/* } else { */ case 5:
				prefix = p.newRegexp(3);
				prefix.Flags = strflags;
				prefix.Rune = $appendSlice($subslice(prefix.Rune, 0, 0), str);
				j = start;
				while (true) {
					if (!(j < i)) { break; }
					((j < 0 || j >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j] = p.removeLeadingString(((j < 0 || j >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j]), str.$length));
					j = j + (1) >> 0;
				}
				_r = p.collapse($subslice(sub, start, i), 19); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				suffix = _r;
				re = p.newRegexp(18);
				re.Sub = $append($subslice(re.Sub, 0, 0), prefix, suffix);
				out = $append(out, re);
			/* } */ case 6:
			start = i;
			str = istr;
			strflags = iflags;
			i = i + (1) >> 0;
		$s = 1; continue;
		case 2:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		first = ptrType.nil;
		i$1 = 0;
		/* while (true) { */ case 8:
			/* if (!(i$1 <= sub.$length)) { break; } */ if(!(i$1 <= sub.$length)) { $s = 9; continue; }
			ifirst = ptrType.nil;
			if (i$1 < sub.$length) {
				ifirst = p.leadingRegexp(((i$1 < 0 || i$1 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$1]));
				if (!(first === ptrType.nil) && first.Equal(ifirst) && (isCharClass(first) || ((first.Op === 17) && (first.Min === first.Max) && isCharClass((x = first.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])))))) {
					i$1 = i$1 + (1) >> 0;
					/* continue; */ $s = 8; continue;
				}
			}
			/* */ if (i$1 === start) { $s = 10; continue; }
			/* */ if (i$1 === (start + 1 >> 0)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (i$1 === start) { */ case 10:
				$s = 13; continue;
			/* } else if (i$1 === (start + 1 >> 0)) { */ case 11:
				out = $append(out, ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]));
				$s = 13; continue;
			/* } else { */ case 12:
				prefix$1 = first;
				j$1 = start;
				while (true) {
					if (!(j$1 < i$1)) { break; }
					reuse = !((j$1 === start));
					((j$1 < 0 || j$1 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$1] = p.removeLeadingRegexp(((j$1 < 0 || j$1 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$1]), reuse));
					j$1 = j$1 + (1) >> 0;
				}
				_r$1 = p.collapse($subslice(sub, start, i$1), 19); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				suffix$1 = _r$1;
				re$1 = p.newRegexp(18);
				re$1.Sub = $append($subslice(re$1.Sub, 0, 0), prefix$1, suffix$1);
				out = $append(out, re$1);
			/* } */ case 13:
			start = i$1;
			first = ifirst;
			i$1 = i$1 + (1) >> 0;
		$s = 8; continue;
		case 9:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		i$2 = 0;
		/* while (true) { */ case 15:
			/* if (!(i$2 <= sub.$length)) { break; } */ if(!(i$2 <= sub.$length)) { $s = 16; continue; }
			if (i$2 < sub.$length && isCharClass(((i$2 < 0 || i$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$2]))) {
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 15; continue;
			}
			/* */ if (i$2 === start) { $s = 17; continue; }
			/* */ if (i$2 === (start + 1 >> 0)) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (i$2 === start) { */ case 17:
				$s = 20; continue;
			/* } else if (i$2 === (start + 1 >> 0)) { */ case 18:
				out = $append(out, ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]));
				$s = 20; continue;
			/* } else { */ case 19:
				max = start;
				j$2 = start + 1 >> 0;
				while (true) {
					if (!(j$2 < i$2)) { break; }
					if (((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max]).Op < ((j$2 < 0 || j$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$2]).Op || (((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max]).Op === ((j$2 < 0 || j$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$2]).Op) && ((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max]).Rune.$length < ((j$2 < 0 || j$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$2]).Rune.$length) {
						max = j$2;
					}
					j$2 = j$2 + (1) >> 0;
				}
				_tmp = ((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max]);
				_tmp$1 = ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]);
				((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start] = _tmp);
				((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max] = _tmp$1);
				j$3 = start + 1 >> 0;
				while (true) {
					if (!(j$3 < i$2)) { break; }
					mergeCharClass(((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]), ((j$3 < 0 || j$3 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$3]));
					p.reuse(((j$3 < 0 || j$3 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$3]));
					j$3 = j$3 + (1) >> 0;
				}
				$r = cleanAlt(((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				out = $append(out, ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]));
			/* } */ case 20:
			if (i$2 < sub.$length) {
				out = $append(out, ((i$2 < 0 || i$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$2]));
			}
			start = i$2 + 1 >> 0;
			i$2 = i$2 + (1) >> 0;
		$s = 15; continue;
		case 16:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		_ref = sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$3 = _i;
			if ((i$3 + 1 >> 0) < sub.$length && (((i$3 < 0 || i$3 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$3]).Op === 2) && ((x$1 = i$3 + 1 >> 0, ((x$1 < 0 || x$1 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + x$1])).Op === 2)) {
				_i++;
				continue;
			}
			out = $append(out, ((i$3 < 0 || i$3 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$3]));
			_i++;
		}
		sub = out;
		$s = -1; return sub;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.factor, $c: true, $r, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, first, i, i$1, i$2, i$3, ifirst, iflags, istr, j, j$1, j$2, j$3, max, out, p, prefix, prefix$1, re, re$1, reuse, same, start, str, strflags, sub, suffix, suffix$1, x, x$1, $s};return $f;
	};
	parser.prototype.factor = function(sub) { return this.$val.factor(sub); };
	parser.ptr.prototype.leadingString = function(re) {
		var p, re, x;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			re = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		if (!((re.Op === 3))) {
			return [sliceType$1.nil, 0];
		}
		return [re.Rune, (re.Flags & 1) >>> 0];
	};
	parser.prototype.leadingString = function(re) { return this.$val.leadingString(re); };
	parser.ptr.prototype.removeLeadingString = function(re, n) {
		var _1, n, old, p, re, sub, x, x$1, x$2;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			sub = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
			sub = p.removeLeadingString(sub, n);
			(x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0] = sub));
			if (sub.Op === 2) {
				p.reuse(sub);
				_1 = re.Sub.$length;
				if ((_1 === (0)) || (_1 === (1))) {
					re.Op = 2;
					re.Sub = sliceType$4.nil;
				} else if (_1 === (2)) {
					old = re;
					re = (x$2 = re.Sub, (1 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 1]));
					p.reuse(old);
				} else {
					$copySlice(re.Sub, $subslice(re.Sub, 1));
					re.Sub = $subslice(re.Sub, 0, (re.Sub.$length - 1 >> 0));
				}
			}
			return re;
		}
		if (re.Op === 3) {
			re.Rune = $subslice(re.Rune, 0, $copySlice(re.Rune, $subslice(re.Rune, n)));
			if (re.Rune.$length === 0) {
				re.Op = 2;
			}
		}
		return re;
	};
	parser.prototype.removeLeadingString = function(re, n) { return this.$val.removeLeadingString(re, n); };
	parser.ptr.prototype.leadingRegexp = function(re) {
		var p, re, sub, x;
		p = this;
		if (re.Op === 2) {
			return ptrType.nil;
		}
		if ((re.Op === 18) && re.Sub.$length > 0) {
			sub = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
			if (sub.Op === 2) {
				return ptrType.nil;
			}
			return sub;
		}
		return re;
	};
	parser.prototype.leadingRegexp = function(re) { return this.$val.leadingRegexp(re); };
	parser.ptr.prototype.removeLeadingRegexp = function(re, reuse) {
		var _1, old, p, re, reuse, x, x$1;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			if (reuse) {
				p.reuse((x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])));
			}
			re.Sub = $subslice(re.Sub, 0, $copySlice(re.Sub, $subslice(re.Sub, 1)));
			_1 = re.Sub.$length;
			if (_1 === (0)) {
				re.Op = 2;
				re.Sub = sliceType$4.nil;
			} else if (_1 === (1)) {
				old = re;
				re = (x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
				p.reuse(old);
			}
			return re;
		}
		if (reuse) {
			p.reuse(re);
		}
		return p.newRegexp(2);
	};
	parser.prototype.removeLeadingRegexp = function(re, reuse) { return this.$val.removeLeadingRegexp(re, reuse); };
	literalRegexp = function(s, flags) {
		var _i, _ref, _rune, c, flags, re, s;
		re = new Regexp.ptr(3, 0, sliceType$4.nil, arrayType.zero(), sliceType$1.nil, arrayType$1.zero(), 0, 0, 0, "");
		re.Flags = flags;
		re.Rune = $subslice(new sliceType$1(re.Rune0), 0, 0);
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (re.Rune.$length >= re.Rune.$capacity) {
				re.Rune = (new sliceType$1($stringToRunes(s)));
				break;
			}
			re.Rune = $append(re.Rune, c);
			_i += _rune[1];
		}
		return re;
	};
	Parse = function(s, flags) {
		var {$24r, _r, flags, s, $s, $r, $c} = $restore(this, {s, flags});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = parse(s, flags); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Parse, $c: true, $r, $24r, _r, flags, s, $s};return $f;
	};
	$pkg.Parse = Parse;
	parse = function(s, flags) {
		var {$24r, $24r$1, $24r$10, $24r$11, $24r$12, $24r$13, $24r$14, $24r$15, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _struct, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, after, after$1, before, before$1, c, c$1, err, err$1, err$2, err$3, flags, lastRepeat, lit, max, min, n, ok, op, p, r, r$1, re, repeat, rest, rest$1, rest$2, s, t, x, $s, $deferred, $r, $c} = $restore(this, {s, flags});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		err = [err];
		s = [s];
		_ = ptrType.nil;
		err[0] = $ifaceNil;
		$deferred.push([(function(err, s) { return function() {
			var _1, r;
			r = $recover();
			_1 = r;
			if ($interfaceIsEqual(_1, $ifaceNil)) {
			} else if ($interfaceIsEqual(_1, new ErrorCode(("expression nests too deeply")))) {
				err[0] = new Error.ptr("expression nests too deeply", s[0]);
			} else {
				$panic(r);
			}
		}; })(err, s), []]);
		/* */ if (!((((flags & 2) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((flags & 2) >>> 0) === 0))) { */ case 1:
			err$1 = checkUTF8(s[0]);
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 3:
				_tmp = ptrType.nil;
				_tmp$1 = err$1;
				_ = _tmp;
				err[0] = _tmp$1;
				$24r = [_, err[0]];
				$s = 5; case 5: return $24r;
			/* } */ case 4:
			_tmp$2 = literalRegexp(s[0], flags);
			_tmp$3 = $ifaceNil;
			_ = _tmp$2;
			err[0] = _tmp$3;
			$24r$1 = [_, err[0]];
			$s = 6; case 6: return $24r$1;
		/* } */ case 2:
		p = new parser.ptr(0, sliceType$4.nil, ptrType.nil, 0, "", sliceType$1.nil, 0, false);
		c = 0;
		op = 0;
		lastRepeat = "";
		p.flags = flags;
		p.wholeRegexp = s[0];
		t = s[0];
		/* while (true) { */ case 7:
			/* if (!(!(t === ""))) { break; } */ if(!(!(t === ""))) { $s = 8; continue; }
			repeat = "";
				_2 = t.charCodeAt(0);
				/* */ if (_2 === (40)) { $s = 10; continue; }
				/* */ if (_2 === (124)) { $s = 11; continue; }
				/* */ if (_2 === (41)) { $s = 12; continue; }
				/* */ if (_2 === (94)) { $s = 13; continue; }
				/* */ if (_2 === (36)) { $s = 14; continue; }
				/* */ if (_2 === (46)) { $s = 15; continue; }
				/* */ if (_2 === (91)) { $s = 16; continue; }
				/* */ if ((_2 === (42)) || (_2 === (43)) || (_2 === (63))) { $s = 17; continue; }
				/* */ if (_2 === (123)) { $s = 18; continue; }
				/* */ if (_2 === (92)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (_2 === (40)) { */ case 10:
					/* */ if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2 && (t.charCodeAt(1) === 63)) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2 && (t.charCodeAt(1) === 63)) { */ case 22:
						_tuple = p.parsePerlFlags(t);
						t = _tuple[0];
						err[0] = _tuple[1];
						/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 24; continue; }
						/* */ $s = 25; continue;
						/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 24:
							_tmp$4 = ptrType.nil;
							_tmp$5 = err[0];
							_ = _tmp$4;
							err[0] = _tmp$5;
							$24r$2 = [_, err[0]];
							$s = 26; case 26: return $24r$2;
						/* } */ case 25:
						/* break; */ $s = 9; continue;
					/* } */ case 23:
					p.numCap = p.numCap + (1) >> 0;
					p.op(128).Cap = p.numCap;
					t = $substring(t, 1);
					$s = 21; continue;
				/* } else if (_2 === (124)) { */ case 11:
					_r = p.parseVerticalBar(); /* */ $s = 27; case 27: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					err[0] = _r;
					/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 28; continue; }
					/* */ $s = 29; continue;
					/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 28:
						_tmp$6 = ptrType.nil;
						_tmp$7 = err[0];
						_ = _tmp$6;
						err[0] = _tmp$7;
						$24r$3 = [_, err[0]];
						$s = 30; case 30: return $24r$3;
					/* } */ case 29:
					t = $substring(t, 1);
					$s = 21; continue;
				/* } else if (_2 === (41)) { */ case 12:
					_r$1 = p.parseRightParen(); /* */ $s = 31; case 31: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err[0] = _r$1;
					/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 32:
						_tmp$8 = ptrType.nil;
						_tmp$9 = err[0];
						_ = _tmp$8;
						err[0] = _tmp$9;
						$24r$4 = [_, err[0]];
						$s = 34; case 34: return $24r$4;
					/* } */ case 33:
					t = $substring(t, 1);
					$s = 21; continue;
				/* } else if (_2 === (94)) { */ case 13:
					if (!((((p.flags & 16) >>> 0) === 0))) {
						p.op(9);
					} else {
						p.op(7);
					}
					t = $substring(t, 1);
					$s = 21; continue;
				/* } else if (_2 === (36)) { */ case 14:
					if (!((((p.flags & 16) >>> 0) === 0))) {
						_struct = p.op(10);
						_struct.Flags = (_struct.Flags | (256)) >>> 0;
					} else {
						p.op(8);
					}
					t = $substring(t, 1);
					$s = 21; continue;
				/* } else if (_2 === (46)) { */ case 15:
					if (!((((p.flags & 8) >>> 0) === 0))) {
						p.op(6);
					} else {
						p.op(5);
					}
					t = $substring(t, 1);
					$s = 21; continue;
				/* } else if (_2 === (91)) { */ case 16:
					_r$2 = p.parseClass(t); /* */ $s = 35; case 35: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$1 = _r$2;
					t = _tuple$1[0];
					err[0] = _tuple$1[1];
					/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 36; continue; }
					/* */ $s = 37; continue;
					/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 36:
						_tmp$10 = ptrType.nil;
						_tmp$11 = err[0];
						_ = _tmp$10;
						err[0] = _tmp$11;
						$24r$5 = [_, err[0]];
						$s = 38; case 38: return $24r$5;
					/* } */ case 37:
					$s = 21; continue;
				/* } else if ((_2 === (42)) || (_2 === (43)) || (_2 === (63))) { */ case 17:
					before = t;
					_3 = t.charCodeAt(0);
					if (_3 === (42)) {
						op = 14;
					} else if (_3 === (43)) {
						op = 15;
					} else if (_3 === (63)) {
						op = 16;
					}
					after = $substring(t, 1);
					_tuple$2 = p.repeat(op, 0, 0, before, after, lastRepeat);
					after = _tuple$2[0];
					err[0] = _tuple$2[1];
					/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 39; continue; }
					/* */ $s = 40; continue;
					/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 39:
						_tmp$12 = ptrType.nil;
						_tmp$13 = err[0];
						_ = _tmp$12;
						err[0] = _tmp$13;
						$24r$6 = [_, err[0]];
						$s = 41; case 41: return $24r$6;
					/* } */ case 40:
					repeat = before;
					t = after;
					$s = 21; continue;
				/* } else if (_2 === (123)) { */ case 18:
					op = 17;
					before$1 = t;
					_tuple$3 = p.parseRepeat(t);
					min = _tuple$3[0];
					max = _tuple$3[1];
					after$1 = _tuple$3[2];
					ok = _tuple$3[3];
					if (!ok) {
						p.literal(123);
						t = $substring(t, 1);
						/* break; */ $s = 9; continue;
					}
					/* */ if (min < 0 || min > 1000 || max > 1000 || max >= 0 && min > max) { $s = 42; continue; }
					/* */ $s = 43; continue;
					/* if (min < 0 || min > 1000 || max > 1000 || max >= 0 && min > max) { */ case 42:
						_tmp$14 = ptrType.nil;
						_tmp$15 = new Error.ptr("invalid repeat count", $substring(before$1, 0, (before$1.length - after$1.length >> 0)));
						_ = _tmp$14;
						err[0] = _tmp$15;
						$24r$7 = [_, err[0]];
						$s = 44; case 44: return $24r$7;
					/* } */ case 43:
					_tuple$4 = p.repeat(op, min, max, before$1, after$1, lastRepeat);
					after$1 = _tuple$4[0];
					err[0] = _tuple$4[1];
					/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 45; continue; }
					/* */ $s = 46; continue;
					/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 45:
						_tmp$16 = ptrType.nil;
						_tmp$17 = err[0];
						_ = _tmp$16;
						err[0] = _tmp$17;
						$24r$8 = [_, err[0]];
						$s = 47; case 47: return $24r$8;
					/* } */ case 46:
					repeat = before$1;
					t = after$1;
					$s = 21; continue;
				/* } else if (_2 === (92)) { */ case 19:
					/* */ if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2) { */ case 48:
							_4 = t.charCodeAt(1);
							/* */ if (_4 === (65)) { $s = 51; continue; }
							/* */ if (_4 === (98)) { $s = 52; continue; }
							/* */ if (_4 === (66)) { $s = 53; continue; }
							/* */ if (_4 === (67)) { $s = 54; continue; }
							/* */ if (_4 === (81)) { $s = 55; continue; }
							/* */ if (_4 === (122)) { $s = 56; continue; }
							/* */ $s = 57; continue;
							/* if (_4 === (65)) { */ case 51:
								p.op(9);
								t = $substring(t, 2);
								/* break BigSwitch; */ $s = 9; continue s;
								$s = 57; continue;
							/* } else if (_4 === (98)) { */ case 52:
								p.op(11);
								t = $substring(t, 2);
								/* break BigSwitch; */ $s = 9; continue s;
								$s = 57; continue;
							/* } else if (_4 === (66)) { */ case 53:
								p.op(12);
								t = $substring(t, 2);
								/* break BigSwitch; */ $s = 9; continue s;
								$s = 57; continue;
							/* } else if (_4 === (67)) { */ case 54:
								_tmp$18 = ptrType.nil;
								_tmp$19 = new Error.ptr("invalid escape sequence", $substring(t, 0, 2));
								_ = _tmp$18;
								err[0] = _tmp$19;
								$24r$9 = [_, err[0]];
								$s = 58; case 58: return $24r$9;
							/* } else if (_4 === (81)) { */ case 55:
								lit = "";
								_tuple$5 = strings.Cut($substring(t, 2), "\\E");
								lit = _tuple$5[0];
								t = _tuple$5[1];
								/* while (true) { */ case 59:
									/* if (!(!(lit === ""))) { break; } */ if(!(!(lit === ""))) { $s = 60; continue; }
									_tuple$6 = nextRune(lit);
									c$1 = _tuple$6[0];
									rest = _tuple$6[1];
									err$2 = _tuple$6[2];
									/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 61; continue; }
									/* */ $s = 62; continue;
									/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 61:
										_tmp$20 = ptrType.nil;
										_tmp$21 = err$2;
										_ = _tmp$20;
										err[0] = _tmp$21;
										$24r$10 = [_, err[0]];
										$s = 63; case 63: return $24r$10;
									/* } */ case 62:
									p.literal(c$1);
									lit = rest;
								$s = 59; continue;
								case 60:
								/* break BigSwitch; */ $s = 9; continue s;
								$s = 57; continue;
							/* } else if (_4 === (122)) { */ case 56:
								p.op(10);
								t = $substring(t, 2);
								/* break BigSwitch; */ $s = 9; continue s;
							/* } */ case 57:
						case 50:
					/* } */ case 49:
					re = p.newRegexp(4);
					re.Flags = p.flags;
					/* */ if (t.length >= 2 && ((t.charCodeAt(1) === 112) || (t.charCodeAt(1) === 80))) { $s = 64; continue; }
					/* */ $s = 65; continue;
					/* if (t.length >= 2 && ((t.charCodeAt(1) === 112) || (t.charCodeAt(1) === 80))) { */ case 64:
						_r$3 = p.parseUnicodeClass(t, $subslice(new sliceType$1(re.Rune0), 0, 0)); /* */ $s = 66; case 66: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_tuple$7 = _r$3;
						r = _tuple$7[0];
						rest$1 = _tuple$7[1];
						err$3 = _tuple$7[2];
						/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 67; continue; }
						/* */ $s = 68; continue;
						/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 67:
							_tmp$22 = ptrType.nil;
							_tmp$23 = err$3;
							_ = _tmp$22;
							err[0] = _tmp$23;
							$24r$11 = [_, err[0]];
							$s = 69; case 69: return $24r$11;
						/* } */ case 68:
						if (!(r === sliceType$1.nil)) {
							re.Rune = r;
							t = rest$1;
							p.push(re);
							/* break BigSwitch; */ $s = 9; continue s;
						}
					/* } */ case 65:
					_r$4 = p.parsePerlClassEscape(t, $subslice(new sliceType$1(re.Rune0), 0, 0)); /* */ $s = 70; case 70: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$8 = _r$4;
					r$1 = _tuple$8[0];
					rest$2 = _tuple$8[1];
					if (!(r$1 === sliceType$1.nil)) {
						re.Rune = r$1;
						t = rest$2;
						p.push(re);
						/* break BigSwitch; */ $s = 9; continue s;
					}
					p.reuse(re);
					_tuple$9 = p.parseEscape(t);
					c = _tuple$9[0];
					t = _tuple$9[1];
					err[0] = _tuple$9[2];
					/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 71; continue; }
					/* */ $s = 72; continue;
					/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 71:
						_tmp$24 = ptrType.nil;
						_tmp$25 = err[0];
						_ = _tmp$24;
						err[0] = _tmp$25;
						$24r$12 = [_, err[0]];
						$s = 73; case 73: return $24r$12;
					/* } */ case 72:
					p.literal(c);
					$s = 21; continue;
				/* } else { */ case 20:
					_tuple$10 = nextRune(t);
					c = _tuple$10[0];
					t = _tuple$10[1];
					err[0] = _tuple$10[2];
					/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 74; continue; }
					/* */ $s = 75; continue;
					/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 74:
						_tmp$26 = ptrType.nil;
						_tmp$27 = err[0];
						_ = _tmp$26;
						err[0] = _tmp$27;
						$24r$13 = [_, err[0]];
						$s = 76; case 76: return $24r$13;
					/* } */ case 75:
					p.literal(c);
				/* } */ case 21:
			case 9:
			lastRepeat = repeat;
		$s = 7; continue;
		case 8:
		_r$5 = p.concat(); /* */ $s = 77; case 77: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = p.swapVerticalBar(); /* */ $s = 80; case 80: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (_r$6) { $s = 78; continue; }
		/* */ $s = 79; continue;
		/* if (_r$6) { */ case 78:
			p.stack = $subslice(p.stack, 0, (p.stack.$length - 1 >> 0));
		/* } */ case 79:
		_r$7 = p.alternate(); /* */ $s = 81; case 81: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		n = p.stack.$length;
		/* */ if (!((n === 1))) { $s = 82; continue; }
		/* */ $s = 83; continue;
		/* if (!((n === 1))) { */ case 82:
			_tmp$28 = ptrType.nil;
			_tmp$29 = new Error.ptr("missing closing )", s[0]);
			_ = _tmp$28;
			err[0] = _tmp$29;
			$24r$14 = [_, err[0]];
			$s = 84; case 84: return $24r$14;
		/* } */ case 83:
		_tmp$30 = (x = p.stack, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		_tmp$31 = $ifaceNil;
		_ = _tmp$30;
		err[0] = _tmp$31;
		$24r$15 = [_, err[0]];
		$s = 85; case 85: return $24r$15;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [_, err[0]]; } if($curGoroutine.asleep) { var $f = {$blk: parse, $c: true, $r, $24r, $24r$1, $24r$10, $24r$11, $24r$12, $24r$13, $24r$14, $24r$15, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _struct, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, after, after$1, before, before$1, c, c$1, err, err$1, err$2, err$3, flags, lastRepeat, lit, max, min, n, ok, op, p, r, r$1, re, repeat, rest, rest$1, rest$2, s, t, x, $s, $deferred};return $f; } }
	};
	parser.ptr.prototype.parseRepeat = function(s) {
		var _tuple, _tuple$1, max, min, ok, ok1, p, rest, s;
		min = 0;
		max = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || !((s.charCodeAt(0) === 123))) {
			return [min, max, rest, ok];
		}
		s = $substring(s, 1);
		ok1 = false;
		_tuple = p.parseInt(s);
		min = _tuple[0];
		s = _tuple[1];
		ok1 = _tuple[2];
		if (!ok1) {
			return [min, max, rest, ok];
		}
		if (s === "") {
			return [min, max, rest, ok];
		}
		if (!((s.charCodeAt(0) === 44))) {
			max = min;
		} else {
			s = $substring(s, 1);
			if (s === "") {
				return [min, max, rest, ok];
			}
			if (s.charCodeAt(0) === 125) {
				max = -1;
			} else {
				_tuple$1 = p.parseInt(s);
				max = _tuple$1[0];
				s = _tuple$1[1];
				ok1 = _tuple$1[2];
				if (!ok1) {
					return [min, max, rest, ok];
				} else if (max < 0) {
					min = -1;
				}
			}
		}
		if (s === "" || !((s.charCodeAt(0) === 125))) {
			return [min, max, rest, ok];
		}
		rest = $substring(s, 1);
		ok = true;
		return [min, max, rest, ok];
	};
	parser.prototype.parseRepeat = function(s) { return this.$val.parseRepeat(s); };
	parser.ptr.prototype.parsePerlFlags = function(s) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, c, capture, end, err, flags, name, p, re, rest, s, sawFlag, sign, t;
		rest = "";
		err = $ifaceNil;
		p = this;
		t = s;
		if (t.length > 4 && (t.charCodeAt(2) === 80) && (t.charCodeAt(3) === 60)) {
			end = strings.IndexRune(t, 62);
			if (end < 0) {
				err = checkUTF8(t);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp = "";
					_tmp$1 = err;
					rest = _tmp;
					err = _tmp$1;
					return [rest, err];
				}
				_tmp$2 = "";
				_tmp$3 = new Error.ptr("invalid named capture", s);
				rest = _tmp$2;
				err = _tmp$3;
				return [rest, err];
			}
			capture = $substring(t, 0, (end + 1 >> 0));
			name = $substring(t, 4, end);
			err = checkUTF8(name);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = "";
				_tmp$5 = err;
				rest = _tmp$4;
				err = _tmp$5;
				return [rest, err];
			}
			if (!isValidCaptureName(name)) {
				_tmp$6 = "";
				_tmp$7 = new Error.ptr("invalid named capture", capture);
				rest = _tmp$6;
				err = _tmp$7;
				return [rest, err];
			}
			p.numCap = p.numCap + (1) >> 0;
			re = p.op(128);
			re.Cap = p.numCap;
			re.Name = name;
			_tmp$8 = $substring(t, (end + 1 >> 0));
			_tmp$9 = $ifaceNil;
			rest = _tmp$8;
			err = _tmp$9;
			return [rest, err];
		}
		c = 0;
		t = $substring(t, 2);
		flags = p.flags;
		sign = 1;
		sawFlag = false;
		Loop:
		while (true) {
			if (!(!(t === ""))) { break; }
			_tuple = nextRune(t);
			c = _tuple[0];
			t = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$10 = "";
				_tmp$11 = err;
				rest = _tmp$10;
				err = _tmp$11;
				return [rest, err];
			}
			_1 = c;
			if (_1 === (105)) {
				flags = (flags | (1)) >>> 0;
				sawFlag = true;
			} else if (_1 === (109)) {
				flags = (flags & ~(16)) << 16 >>> 16;
				sawFlag = true;
			} else if (_1 === (115)) {
				flags = (flags | (8)) >>> 0;
				sawFlag = true;
			} else if (_1 === (85)) {
				flags = (flags | (32)) >>> 0;
				sawFlag = true;
			} else if (_1 === (45)) {
				if (sign < 0) {
					break Loop;
				}
				sign = -1;
				flags = ~flags << 16 >>> 16;
				sawFlag = false;
			} else if ((_1 === (58)) || (_1 === (41))) {
				if (sign < 0) {
					if (!sawFlag) {
						break Loop;
					}
					flags = ~flags << 16 >>> 16;
				}
				if (c === 58) {
					p.op(128);
				}
				p.flags = flags;
				_tmp$12 = t;
				_tmp$13 = $ifaceNil;
				rest = _tmp$12;
				err = _tmp$13;
				return [rest, err];
			} else {
				break Loop;
			}
		}
		_tmp$14 = "";
		_tmp$15 = new Error.ptr("invalid or unsupported Perl syntax", $substring(s, 0, (s.length - t.length >> 0)));
		rest = _tmp$14;
		err = _tmp$15;
		return [rest, err];
	};
	parser.prototype.parsePerlFlags = function(s) { return this.$val.parsePerlFlags(s); };
	isValidCaptureName = function(name) {
		var _i, _ref, _rune, c, name;
		if (name === "") {
			return false;
		}
		_ref = name;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (!((c === 95)) && !isalnum(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	parser.ptr.prototype.parseInt = function(s) {
		var i, n, ok, p, rest, s, t;
		n = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || s.charCodeAt(0) < 48 || 57 < s.charCodeAt(0)) {
			return [n, rest, ok];
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 48) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			return [n, rest, ok];
		}
		t = s;
		while (true) {
			if (!(!(s === "") && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
			s = $substring(s, 1);
		}
		rest = s;
		ok = true;
		t = $substring(t, 0, (t.length - s.length >> 0));
		i = 0;
		while (true) {
			if (!(i < t.length)) { break; }
			if (n >= 100000000) {
				n = -1;
				break;
			}
			n = (($imul(n, 10)) + ((t.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
			i = i + (1) >> 0;
		}
		return [n, rest, ok];
	};
	parser.prototype.parseInt = function(s) { return this.$val.parseInt(s); };
	isCharClass = function(re) {
		var re;
		return (re.Op === 3) && (re.Rune.$length === 1) || (re.Op === 4) || (re.Op === 5) || (re.Op === 6);
	};
	matchRune = function(re, r) {
		var _1, i, r, re, x, x$1, x$2, x$3;
		_1 = re.Op;
		if (_1 === (3)) {
			return (re.Rune.$length === 1) && ((x = re.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === r);
		} else if (_1 === (4)) {
			i = 0;
			while (true) {
				if (!(i < re.Rune.$length)) { break; }
				if ((x$1 = re.Rune, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])) <= r && r <= (x$2 = re.Rune, x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]))) {
					return true;
				}
				i = i + (2) >> 0;
			}
			return false;
		} else if (_1 === (5)) {
			return !((r === 10));
		} else if (_1 === (6)) {
			return true;
		}
		return false;
	};
	parser.ptr.prototype.parseVerticalBar = function() {
		var {_r, _r$1, p, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.concat(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = p.swapVerticalBar(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!_r$1) { */ case 2:
			p.op(129);
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.parseVerticalBar, $c: true, $r, _r, _r$1, p, $s};return $f;
	};
	parser.prototype.parseVerticalBar = function() { return this.$val.parseVerticalBar(); };
	mergeCharClass = function(dst, src) {
		var _1, dst, src, x, x$1, x$2, x$3, x$4;
		switch (0) { default:
			_1 = dst.Op;
			if (_1 === (6)) {
			} else if (_1 === (5)) {
				if (matchRune(src, 10)) {
					dst.Op = 6;
				}
			} else if (_1 === (4)) {
				if (src.Op === 3) {
					dst.Rune = appendLiteral(dst.Rune, (x = src.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), src.Flags);
				} else {
					dst.Rune = appendClass(dst.Rune, src.Rune);
				}
			} else if (_1 === (3)) {
				if (((x$1 = src.Rune, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) === (x$2 = dst.Rune, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]))) && (src.Flags === dst.Flags)) {
					break;
				}
				dst.Op = 4;
				dst.Rune = appendLiteral($subslice(dst.Rune, 0, 0), (x$3 = dst.Rune, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])), dst.Flags);
				dst.Rune = appendLiteral(dst.Rune, (x$4 = src.Rune, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])), src.Flags);
			}
		}
	};
	parser.ptr.prototype.swapVerticalBar = function() {
		var {_tmp, _tmp$1, n, p, re1, re1$1, re2, re3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		n = p.stack.$length;
		if (n >= 3 && ((x = p.stack, x$1 = n - 2 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Op === 129) && isCharClass((x$2 = p.stack, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]))) && isCharClass((x$4 = p.stack, x$5 = n - 3 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])))) {
			re1 = (x$6 = p.stack, x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
			re3 = (x$8 = p.stack, x$9 = n - 3 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9]));
			if (re1.Op > re3.Op) {
				_tmp = re3;
				_tmp$1 = re1;
				re1 = _tmp;
				re3 = _tmp$1;
				(x$10 = p.stack, x$11 = n - 3 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11] = re3));
			}
			mergeCharClass(re3, re1);
			p.reuse(re1);
			p.stack = $subslice(p.stack, 0, (n - 1 >> 0));
			$s = -1; return true;
		}
		/* */ if (n >= 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n >= 2) { */ case 1:
			re1$1 = (x$12 = p.stack, x$13 = n - 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + x$13]));
			re2 = (x$14 = p.stack, x$15 = n - 2 >> 0, ((x$15 < 0 || x$15 >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + x$15]));
			/* */ if (re2.Op === 129) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (re2.Op === 129) { */ case 3:
				/* */ if (n >= 3) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (n >= 3) { */ case 5:
					$r = cleanAlt((x$16 = p.stack, x$17 = n - 3 >> 0, ((x$17 < 0 || x$17 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + x$17]))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				(x$18 = p.stack, x$19 = n - 2 >> 0, ((x$19 < 0 || x$19 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + x$19] = re1$1));
				(x$20 = p.stack, x$21 = n - 1 >> 0, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = re2));
				$s = -1; return true;
			/* } */ case 4:
		/* } */ case 2:
		$s = -1; return false;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.swapVerticalBar, $c: true, $r, _tmp, _tmp$1, n, p, re1, re1$1, re2, re3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	parser.prototype.swapVerticalBar = function() { return this.$val.swapVerticalBar(); };
	parser.ptr.prototype.parseRightParen = function() {
		var {_r, _r$1, _r$2, n, p, re1, re2, x, x$1, x$2, x$3, x$4, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.concat(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = p.swapVerticalBar(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$1) { */ case 2:
			p.stack = $subslice(p.stack, 0, (p.stack.$length - 1 >> 0));
		/* } */ case 3:
		_r$2 = p.alternate(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		n = p.stack.$length;
		if (n < 2) {
			$s = -1; return new Error.ptr("unexpected )", p.wholeRegexp);
		}
		re1 = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		re2 = (x$2 = p.stack, x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		p.stack = $subslice(p.stack, 0, (n - 2 >> 0));
		if (!((re2.Op === 128))) {
			$s = -1; return new Error.ptr("unexpected )", p.wholeRegexp);
		}
		p.flags = re2.Flags;
		if (re2.Cap === 0) {
			p.push(re1);
		} else {
			re2.Op = 13;
			re2.Sub = $subslice(new sliceType$4(re2.Sub0), 0, 1);
			(x$4 = re2.Sub, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0] = re1));
			p.push(re2);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.parseRightParen, $c: true, $r, _r, _r$1, _r$2, n, p, re1, re2, x, x$1, x$2, x$3, x$4, $s};return $f;
	};
	parser.prototype.parseRightParen = function() { return this.$val.parseRightParen(); };
	parser.ptr.prototype.parseEscape = function(s) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, c, err, i, nhex, p, r, rest, s, t, v, x, y;
		r = 0;
		rest = "";
		err = $ifaceNil;
		p = this;
		t = $substring(s, 1);
		if (t === "") {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("trailing backslash at end of expression", "");
			r = _tmp;
			rest = _tmp$1;
			err = _tmp$2;
			return [r, rest, err];
		}
		_tuple = nextRune(t);
		c = _tuple[0];
		t = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$3 = 0;
			_tmp$4 = "";
			_tmp$5 = err;
			r = _tmp$3;
			rest = _tmp$4;
			err = _tmp$5;
			return [r, rest, err];
		}
		Switch:
		switch (0) { default:
			_1 = c;
			if ((_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
					break;
				}
				r = c - 48 >> 0;
				i = 1;
				while (true) {
					if (!(i < 3)) { break; }
					if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
						break;
					}
					r = (($imul(r, 8)) + ((t.charCodeAt(0) >> 0)) >> 0) - 48 >> 0;
					t = $substring(t, 1);
					i = i + (1) >> 0;
				}
				_tmp$6 = r;
				_tmp$7 = t;
				_tmp$8 = $ifaceNil;
				r = _tmp$6;
				rest = _tmp$7;
				err = _tmp$8;
				return [r, rest, err];
			} else if (_1 === (48)) {
				r = c - 48 >> 0;
				i = 1;
				while (true) {
					if (!(i < 3)) { break; }
					if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
						break;
					}
					r = (($imul(r, 8)) + ((t.charCodeAt(0) >> 0)) >> 0) - 48 >> 0;
					t = $substring(t, 1);
					i = i + (1) >> 0;
				}
				_tmp$9 = r;
				_tmp$10 = t;
				_tmp$11 = $ifaceNil;
				r = _tmp$9;
				rest = _tmp$10;
				err = _tmp$11;
				return [r, rest, err];
			} else if (_1 === (120)) {
				if (t === "") {
					break;
				}
				_tuple$1 = nextRune(t);
				c = _tuple$1[0];
				t = _tuple$1[1];
				err = _tuple$1[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$12 = 0;
					_tmp$13 = "";
					_tmp$14 = err;
					r = _tmp$12;
					rest = _tmp$13;
					err = _tmp$14;
					return [r, rest, err];
				}
				if (c === 123) {
					nhex = 0;
					r = 0;
					while (true) {
						if (t === "") {
							break Switch;
						}
						_tuple$2 = nextRune(t);
						c = _tuple$2[0];
						t = _tuple$2[1];
						err = _tuple$2[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							_tmp$15 = 0;
							_tmp$16 = "";
							_tmp$17 = err;
							r = _tmp$15;
							rest = _tmp$16;
							err = _tmp$17;
							return [r, rest, err];
						}
						if (c === 125) {
							break;
						}
						v = unhex(c);
						if (v < 0) {
							break Switch;
						}
						r = ($imul(r, 16)) + v >> 0;
						if (r > 1114111) {
							break Switch;
						}
						nhex = nhex + (1) >> 0;
					}
					if (nhex === 0) {
						break Switch;
					}
					_tmp$18 = r;
					_tmp$19 = t;
					_tmp$20 = $ifaceNil;
					r = _tmp$18;
					rest = _tmp$19;
					err = _tmp$20;
					return [r, rest, err];
				}
				x = unhex(c);
				_tuple$3 = nextRune(t);
				c = _tuple$3[0];
				t = _tuple$3[1];
				err = _tuple$3[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$21 = 0;
					_tmp$22 = "";
					_tmp$23 = err;
					r = _tmp$21;
					rest = _tmp$22;
					err = _tmp$23;
					return [r, rest, err];
				}
				y = unhex(c);
				if (x < 0 || y < 0) {
					break;
				}
				_tmp$24 = ($imul(x, 16)) + y >> 0;
				_tmp$25 = t;
				_tmp$26 = $ifaceNil;
				r = _tmp$24;
				rest = _tmp$25;
				err = _tmp$26;
				return [r, rest, err];
			} else if (_1 === (97)) {
				_tmp$27 = 7;
				_tmp$28 = t;
				_tmp$29 = err;
				r = _tmp$27;
				rest = _tmp$28;
				err = _tmp$29;
				return [r, rest, err];
			} else if (_1 === (102)) {
				_tmp$30 = 12;
				_tmp$31 = t;
				_tmp$32 = err;
				r = _tmp$30;
				rest = _tmp$31;
				err = _tmp$32;
				return [r, rest, err];
			} else if (_1 === (110)) {
				_tmp$33 = 10;
				_tmp$34 = t;
				_tmp$35 = err;
				r = _tmp$33;
				rest = _tmp$34;
				err = _tmp$35;
				return [r, rest, err];
			} else if (_1 === (114)) {
				_tmp$36 = 13;
				_tmp$37 = t;
				_tmp$38 = err;
				r = _tmp$36;
				rest = _tmp$37;
				err = _tmp$38;
				return [r, rest, err];
			} else if (_1 === (116)) {
				_tmp$39 = 9;
				_tmp$40 = t;
				_tmp$41 = err;
				r = _tmp$39;
				rest = _tmp$40;
				err = _tmp$41;
				return [r, rest, err];
			} else if (_1 === (118)) {
				_tmp$42 = 11;
				_tmp$43 = t;
				_tmp$44 = err;
				r = _tmp$42;
				rest = _tmp$43;
				err = _tmp$44;
				return [r, rest, err];
			} else if (c < 128 && !isalnum(c)) {
				_tmp$45 = c;
				_tmp$46 = t;
				_tmp$47 = $ifaceNil;
				r = _tmp$45;
				rest = _tmp$46;
				err = _tmp$47;
				return [r, rest, err];
			}
		}
		_tmp$48 = 0;
		_tmp$49 = "";
		_tmp$50 = new Error.ptr("invalid escape sequence", $substring(s, 0, (s.length - t.length >> 0)));
		r = _tmp$48;
		rest = _tmp$49;
		err = _tmp$50;
		return [r, rest, err];
	};
	parser.prototype.parseEscape = function(s) { return this.$val.parseEscape(s); };
	parser.ptr.prototype.parseClassChar = function(s, wholeClass) {
		var _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, err, p, r, rest, s, wholeClass;
		r = 0;
		rest = "";
		err = $ifaceNil;
		p = this;
		if (s === "") {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("missing closing ]", wholeClass);
			r = _tmp;
			rest = _tmp$1;
			err = _tmp$2;
			return [r, rest, err];
		}
		if (s.charCodeAt(0) === 92) {
			_tuple = p.parseEscape(s);
			r = _tuple[0];
			rest = _tuple[1];
			err = _tuple[2];
			return [r, rest, err];
		}
		_tuple$1 = nextRune(s);
		r = _tuple$1[0];
		rest = _tuple$1[1];
		err = _tuple$1[2];
		return [r, rest, err];
	};
	parser.prototype.parseClassChar = function(s, wholeClass) { return this.$val.parseClassChar(s, wholeClass); };
	parser.ptr.prototype.parsePerlClassEscape = function(s, r) {
		var {$24r, _entry, _r, _tmp, _tmp$1, g, out, p, r, rest, s, $s, $r, $c} = $restore(this, {s, r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		out = sliceType$1.nil;
		rest = "";
		p = this;
		if ((((p.flags & 64) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92))) {
			$s = -1; return [out, rest];
		}
		g = $clone((_entry = $mapIndex(perlGroup,$String.keyFor($substring(s, 0, 2))), _entry !== undefined ? _entry.v : new charGroup.ptr(0, sliceType$1.nil)), charGroup);
		if (g.sign === 0) {
			$s = -1; return [out, rest];
		}
		_r = p.appendGroup(r, $clone(g, charGroup)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp = _r;
		_tmp$1 = $substring(s, 2);
		out = _tmp;
		rest = _tmp$1;
		$24r = [out, rest];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.parsePerlClassEscape, $c: true, $r, $24r, _entry, _r, _tmp, _tmp$1, g, out, p, r, rest, s, $s};return $f;
	};
	parser.prototype.parsePerlClassEscape = function(s, r) { return this.$val.parsePerlClassEscape(s, r); };
	parser.ptr.prototype.parseNamedClass = function(s, r) {
		var {$24r, _entry, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, err, g, i, name, out, p, r, rest, s, $s, $r, $c} = $restore(this, {s, r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		out = sliceType$1.nil;
		rest = "";
		err = $ifaceNil;
		p = this;
		if (s.length < 2 || !((s.charCodeAt(0) === 91)) || !((s.charCodeAt(1) === 58))) {
			$s = -1; return [out, rest, err];
		}
		i = strings.Index($substring(s, 2), ":]");
		if (i < 0) {
			$s = -1; return [out, rest, err];
		}
		i = i + (2) >> 0;
		_tmp = $substring(s, 0, (i + 2 >> 0));
		_tmp$1 = $substring(s, (i + 2 >> 0));
		name = _tmp;
		s = _tmp$1;
		g = $clone((_entry = $mapIndex(posixGroup,$String.keyFor(name)), _entry !== undefined ? _entry.v : new charGroup.ptr(0, sliceType$1.nil)), charGroup);
		if (g.sign === 0) {
			_tmp$2 = sliceType$1.nil;
			_tmp$3 = "";
			_tmp$4 = new Error.ptr("invalid character class range", name);
			out = _tmp$2;
			rest = _tmp$3;
			err = _tmp$4;
			$s = -1; return [out, rest, err];
		}
		_r = p.appendGroup(r, $clone(g, charGroup)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp$5 = _r;
		_tmp$6 = s;
		_tmp$7 = $ifaceNil;
		out = _tmp$5;
		rest = _tmp$6;
		err = _tmp$7;
		$24r = [out, rest, err];
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.parseNamedClass, $c: true, $r, $24r, _entry, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, err, g, i, name, out, p, r, rest, s, $s};return $f;
	};
	parser.prototype.parseNamedClass = function(s, r) { return this.$val.parseNamedClass(s, r); };
	parser.ptr.prototype.appendGroup = function(r, g) {
		var {_r, g, p, r, tmp, $s, $r, $c} = $restore(this, {r, g});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (((p.flags & 1) >>> 0) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((p.flags & 1) >>> 0) === 0) { */ case 1:
			if (g.sign < 0) {
				r = appendNegatedClass(r, g.class$1);
			} else {
				r = appendClass(r, g.class$1);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			tmp = $subslice(p.tmpClass, 0, 0);
			tmp = appendFoldedClass(tmp, g.class$1);
			p.tmpClass = tmp;
			_r = cleanClass((p.$ptr_tmpClass || (p.$ptr_tmpClass = new ptrType$2(function() { return this.$target.tmpClass; }, function($v) { this.$target.tmpClass = $v; }, p)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			tmp = _r;
			if (g.sign < 0) {
				r = appendNegatedClass(r, tmp);
			} else {
				r = appendClass(r, tmp);
			}
		/* } */ case 3:
		$s = -1; return r;
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.appendGroup, $c: true, $r, _r, g, p, r, tmp, $s};return $f;
	};
	parser.prototype.appendGroup = function(r, g) { return this.$val.appendGroup(r, g); };
	unicodeTable = function(name) {
		var _entry, _entry$1, _entry$2, _entry$3, name, t, t$1;
		if (name === "Any") {
			return [anyTable, anyTable];
		}
		t = (_entry = $mapIndex(unicode.Categories,$String.keyFor(name)), _entry !== undefined ? _entry.v : ptrType$3.nil);
		if (!(t === ptrType$3.nil)) {
			return [t, (_entry$1 = $mapIndex(unicode.FoldCategory,$String.keyFor(name)), _entry$1 !== undefined ? _entry$1.v : ptrType$3.nil)];
		}
		t$1 = (_entry$2 = $mapIndex(unicode.Scripts,$String.keyFor(name)), _entry$2 !== undefined ? _entry$2.v : ptrType$3.nil);
		if (!(t$1 === ptrType$3.nil)) {
			return [t$1, (_entry$3 = $mapIndex(unicode.FoldScript,$String.keyFor(name)), _entry$3 !== undefined ? _entry$3.v : ptrType$3.nil)];
		}
		return [ptrType$3.nil, ptrType$3.nil];
	};
	parser.ptr.prototype.parseUnicodeClass = function(s, r) {
		var {_r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, c, end, err, fold, name, out, p, r, rest, s, seq, sign, t, tab, tmp, $s, $r, $c} = $restore(this, {s, r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		out = sliceType$1.nil;
		rest = "";
		err = $ifaceNil;
		p = this;
		if ((((p.flags & 128) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92)) || !((s.charCodeAt(1) === 112)) && !((s.charCodeAt(1) === 80))) {
			$s = -1; return [out, rest, err];
		}
		sign = 1;
		if (s.charCodeAt(1) === 80) {
			sign = -1;
		}
		t = $substring(s, 2);
		_tuple = nextRune(t);
		c = _tuple[0];
		t = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [out, rest, err];
		}
		_tmp = "";
		_tmp$1 = "";
		seq = _tmp;
		name = _tmp$1;
		if (!((c === 123))) {
			seq = $substring(s, 0, (s.length - t.length >> 0));
			name = $substring(seq, 2);
		} else {
			end = strings.IndexRune(s, 125);
			if (end < 0) {
				err = checkUTF8(s);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [out, rest, err];
				}
				_tmp$2 = sliceType$1.nil;
				_tmp$3 = "";
				_tmp$4 = new Error.ptr("invalid character class range", s);
				out = _tmp$2;
				rest = _tmp$3;
				err = _tmp$4;
				$s = -1; return [out, rest, err];
			}
			_tmp$5 = $substring(s, 0, (end + 1 >> 0));
			_tmp$6 = $substring(s, (end + 1 >> 0));
			seq = _tmp$5;
			t = _tmp$6;
			name = $substring(s, 3, end);
			err = checkUTF8(name);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [out, rest, err];
			}
		}
		if (!(name === "") && (name.charCodeAt(0) === 94)) {
			sign = -sign;
			name = $substring(name, 1);
		}
		_tuple$1 = unicodeTable(name);
		tab = _tuple$1[0];
		fold = _tuple$1[1];
		if (tab === ptrType$3.nil) {
			_tmp$7 = sliceType$1.nil;
			_tmp$8 = "";
			_tmp$9 = new Error.ptr("invalid character class range", seq);
			out = _tmp$7;
			rest = _tmp$8;
			err = _tmp$9;
			$s = -1; return [out, rest, err];
		}
		/* */ if ((((p.flags & 1) >>> 0) === 0) || fold === ptrType$3.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((p.flags & 1) >>> 0) === 0) || fold === ptrType$3.nil) { */ case 1:
			if (sign > 0) {
				r = appendTable(r, tab);
			} else {
				r = appendNegatedTable(r, tab);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			tmp = $subslice(p.tmpClass, 0, 0);
			tmp = appendTable(tmp, tab);
			tmp = appendTable(tmp, fold);
			p.tmpClass = tmp;
			_r = cleanClass((p.$ptr_tmpClass || (p.$ptr_tmpClass = new ptrType$2(function() { return this.$target.tmpClass; }, function($v) { this.$target.tmpClass = $v; }, p)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			tmp = _r;
			if (sign > 0) {
				r = appendClass(r, tmp);
			} else {
				r = appendNegatedClass(r, tmp);
			}
		/* } */ case 3:
		_tmp$10 = r;
		_tmp$11 = t;
		_tmp$12 = $ifaceNil;
		out = _tmp$10;
		rest = _tmp$11;
		err = _tmp$12;
		$s = -1; return [out, rest, err];
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.parseUnicodeClass, $c: true, $r, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, c, end, err, fold, name, out, p, r, rest, s, seq, sign, t, tab, tmp, $s};return $f;
	};
	parser.prototype.parseUnicodeClass = function(s, r) { return this.$val.parseUnicodeClass(s, r); };
	parser.ptr.prototype.parseClass = function(s) {
		var {_r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, class$1, err, err$1, err$2, first, hi, lo, nclass, nclass$1, nclass$2, nt, nt$1, nt$2, p, re, rest, rng, s, sign, size, t, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		rest = "";
		err = $ifaceNil;
		p = this;
		t = $substring(s, 1);
		re = p.newRegexp(4);
		re.Flags = p.flags;
		re.Rune = $subslice(new sliceType$1(re.Rune0), 0, 0);
		sign = 1;
		if (!(t === "") && (t.charCodeAt(0) === 94)) {
			sign = -1;
			t = $substring(t, 1);
			if (((p.flags & 4) >>> 0) === 0) {
				re.Rune = $append(re.Rune, 10, 10);
			}
		}
		class$1 = re.Rune;
		first = true;
		/* while (true) { */ case 1:
			/* if (!(t === "" || !((t.charCodeAt(0) === 93)) || first)) { break; } */ if(!(t === "" || !((t.charCodeAt(0) === 93)) || first)) { $s = 2; continue; }
			if (!(t === "") && (t.charCodeAt(0) === 45) && (((p.flags & 64) >>> 0) === 0) && !first && ((t.length === 1) || !((t.charCodeAt(1) === 93)))) {
				_tuple = utf8.DecodeRuneInString($substring(t, 1));
				size = _tuple[1];
				_tmp = "";
				_tmp$1 = new Error.ptr("invalid character class range", $substring(t, 0, (1 + size >> 0)));
				rest = _tmp;
				err = _tmp$1;
				$s = -1; return [rest, err];
			}
			first = false;
			/* */ if (t.length > 2 && (t.charCodeAt(0) === 91) && (t.charCodeAt(1) === 58)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (t.length > 2 && (t.charCodeAt(0) === 91) && (t.charCodeAt(1) === 58)) { */ case 3:
				_r = p.parseNamedClass(t, class$1); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				nclass = _tuple$1[0];
				nt = _tuple$1[1];
				err$1 = _tuple$1[2];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$2 = "";
					_tmp$3 = err$1;
					rest = _tmp$2;
					err = _tmp$3;
					$s = -1; return [rest, err];
				}
				if (!(nclass === sliceType$1.nil)) {
					_tmp$4 = nclass;
					_tmp$5 = nt;
					class$1 = _tmp$4;
					t = _tmp$5;
					/* continue; */ $s = 1; continue;
				}
			/* } */ case 4:
			_r$1 = p.parseUnicodeClass(t, class$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			nclass$1 = _tuple$2[0];
			nt$1 = _tuple$2[1];
			err$2 = _tuple$2[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$6 = "";
				_tmp$7 = err$2;
				rest = _tmp$6;
				err = _tmp$7;
				$s = -1; return [rest, err];
			}
			if (!(nclass$1 === sliceType$1.nil)) {
				_tmp$8 = nclass$1;
				_tmp$9 = nt$1;
				class$1 = _tmp$8;
				t = _tmp$9;
				/* continue; */ $s = 1; continue;
			}
			_r$2 = p.parsePerlClassEscape(t, class$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$3 = _r$2;
			nclass$2 = _tuple$3[0];
			nt$2 = _tuple$3[1];
			if (!(nclass$2 === sliceType$1.nil)) {
				_tmp$10 = nclass$2;
				_tmp$11 = nt$2;
				class$1 = _tmp$10;
				t = _tmp$11;
				/* continue; */ $s = 1; continue;
			}
			rng = t;
			_tmp$12 = 0;
			_tmp$13 = 0;
			lo = _tmp$12;
			hi = _tmp$13;
			_tuple$4 = p.parseClassChar(t, s);
			lo = _tuple$4[0];
			t = _tuple$4[1];
			err$2 = _tuple$4[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$14 = "";
				_tmp$15 = err$2;
				rest = _tmp$14;
				err = _tmp$15;
				$s = -1; return [rest, err];
			}
			hi = lo;
			if (t.length >= 2 && (t.charCodeAt(0) === 45) && !((t.charCodeAt(1) === 93))) {
				t = $substring(t, 1);
				_tuple$5 = p.parseClassChar(t, s);
				hi = _tuple$5[0];
				t = _tuple$5[1];
				err$2 = _tuple$5[2];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$16 = "";
					_tmp$17 = err$2;
					rest = _tmp$16;
					err = _tmp$17;
					$s = -1; return [rest, err];
				}
				if (hi < lo) {
					rng = $substring(rng, 0, (rng.length - t.length >> 0));
					_tmp$18 = "";
					_tmp$19 = new Error.ptr("invalid character class range", rng);
					rest = _tmp$18;
					err = _tmp$19;
					$s = -1; return [rest, err];
				}
			}
			if (((p.flags & 1) >>> 0) === 0) {
				class$1 = appendRange(class$1, lo, hi);
			} else {
				class$1 = appendFoldedRange(class$1, lo, hi);
			}
		$s = 1; continue;
		case 2:
		t = $substring(t, 1);
		re.Rune = class$1;
		_r$3 = cleanClass((re.$ptr_Rune || (re.$ptr_Rune = new ptrType$2(function() { return this.$target.Rune; }, function($v) { this.$target.Rune = $v; }, re)))); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		class$1 = _r$3;
		if (sign < 0) {
			class$1 = negateClass(class$1);
		}
		re.Rune = class$1;
		p.push(re);
		_tmp$20 = t;
		_tmp$21 = $ifaceNil;
		rest = _tmp$20;
		err = _tmp$21;
		$s = -1; return [rest, err];
		/* */ } return; } var $f = {$blk: parser.ptr.prototype.parseClass, $c: true, $r, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, class$1, err, err$1, err$2, first, hi, lo, nclass, nclass$1, nclass$2, nt, nt$1, nt$2, p, re, rest, rng, s, sign, size, t, $s};return $f;
	};
	parser.prototype.parseClass = function(s) { return this.$val.parseClass(s); };
	cleanClass = function(rp) {
		var {_tmp, _tmp$1, hi, i, lo, r, rp, w, x, x$1, x$2, x$3, x$4, x$5, $s, $r, $c} = $restore(this, {rp});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		$r = sort.Sort((x = new ranges.ptr(rp), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = rp.$get();
		if (r.$length < 2) {
			$s = -1; return r;
		}
		w = 2;
		i = 2;
		while (true) {
			if (!(i < r.$length)) { break; }
			_tmp = ((i < 0 || i >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + i]);
			_tmp$1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$1]));
			lo = _tmp;
			hi = _tmp$1;
			if (lo <= ((x$2 = w - 1 >> 0, ((x$2 < 0 || x$2 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$2])) + 1 >> 0)) {
				if (hi > (x$3 = w - 1 >> 0, ((x$3 < 0 || x$3 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$3]))) {
					(x$4 = w - 1 >> 0, ((x$4 < 0 || x$4 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$4] = hi));
				}
				i = i + (2) >> 0;
				continue;
			}
			((w < 0 || w >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + w] = lo);
			(x$5 = w + 1 >> 0, ((x$5 < 0 || x$5 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$5] = hi));
			w = w + (2) >> 0;
			i = i + (2) >> 0;
		}
		$s = -1; return $subslice(r, 0, w);
		/* */ } return; } var $f = {$blk: cleanClass, $c: true, $r, _tmp, _tmp$1, hi, i, lo, r, rp, w, x, x$1, x$2, x$3, x$4, x$5, $s};return $f;
	};
	appendLiteral = function(r, x, flags) {
		var flags, r, x;
		if (!((((flags & 1) >>> 0) === 0))) {
			return appendFoldedRange(r, x, x);
		}
		return appendRange(r, x, x);
	};
	appendRange = function(r, lo, hi) {
		var _tmp, _tmp$1, hi, i, lo, n, r, rhi, rlo, x, x$1, x$2, x$3;
		n = r.$length;
		i = 2;
		while (true) {
			if (!(i <= 4)) { break; }
			if (n >= i) {
				_tmp = (x = n - i >> 0, ((x < 0 || x >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x]));
				_tmp$1 = (x$1 = (n - i >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$1]));
				rlo = _tmp;
				rhi = _tmp$1;
				if (lo <= (rhi + 1 >> 0) && rlo <= (hi + 1 >> 0)) {
					if (lo < rlo) {
						(x$2 = n - i >> 0, ((x$2 < 0 || x$2 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$2] = lo));
					}
					if (hi > rhi) {
						(x$3 = (n - i >> 0) + 1 >> 0, ((x$3 < 0 || x$3 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$3] = hi));
					}
					return r;
				}
			}
			i = i + (2) >> 0;
		}
		return $append(r, lo, hi);
	};
	appendFoldedRange = function(r, lo, hi) {
		var c, f, hi, lo, r;
		if (lo <= 65 && hi >= 125251) {
			return appendRange(r, lo, hi);
		}
		if (hi < 65 || lo > 125251) {
			return appendRange(r, lo, hi);
		}
		if (lo < 65) {
			r = appendRange(r, lo, 64);
			lo = 65;
		}
		if (hi > 125251) {
			r = appendRange(r, 125252, hi);
			hi = 125251;
		}
		c = lo;
		while (true) {
			if (!(c <= hi)) { break; }
			r = appendRange(r, c, c);
			f = unicode.SimpleFold(c);
			while (true) {
				if (!(!((f === c)))) { break; }
				r = appendRange(r, f, f);
				f = unicode.SimpleFold(f);
			}
			c = c + (1) >> 0;
		}
		return r;
	};
	appendClass = function(r, x) {
		var i, r, x, x$1;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			r = appendRange(r, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
			i = i + (2) >> 0;
		}
		return r;
	};
	appendFoldedClass = function(r, x) {
		var i, r, x, x$1;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			r = appendFoldedRange(r, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
			i = i + (2) >> 0;
		}
		return r;
	};
	appendNegatedClass = function(r, x) {
		var _tmp, _tmp$1, hi, i, lo, nextLo, r, x, x$1;
		nextLo = 0;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			_tmp = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]);
			_tmp$1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			lo = _tmp;
			hi = _tmp$1;
			if (nextLo <= (lo - 1 >> 0)) {
				r = appendRange(r, nextLo, lo - 1 >> 0);
			}
			nextLo = hi + 1 >> 0;
			i = i + (2) >> 0;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	appendTable = function(r, x) {
		var _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, c$1, hi, hi$1, lo, lo$1, r, stride, stride$1, x, xr, xr$1;
		_ref = x.R16;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			xr = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), unicode.Range16);
			_tmp = ((xr.Lo >> 0));
			_tmp$1 = ((xr.Hi >> 0));
			_tmp$2 = ((xr.Stride >> 0));
			lo = _tmp;
			hi = _tmp$1;
			stride = _tmp$2;
			if (stride === 1) {
				r = appendRange(r, lo, hi);
				_i++;
				continue;
			}
			c = lo;
			while (true) {
				if (!(c <= hi)) { break; }
				r = appendRange(r, c, c);
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			xr$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), unicode.Range32);
			_tmp$3 = ((xr$1.Lo >> 0));
			_tmp$4 = ((xr$1.Hi >> 0));
			_tmp$5 = ((xr$1.Stride >> 0));
			lo$1 = _tmp$3;
			hi$1 = _tmp$4;
			stride$1 = _tmp$5;
			if (stride$1 === 1) {
				r = appendRange(r, lo$1, hi$1);
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (true) {
				if (!(c$1 <= hi$1)) { break; }
				r = appendRange(r, c$1, c$1);
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		return r;
	};
	appendNegatedTable = function(r, x) {
		var _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, c$1, hi, hi$1, lo, lo$1, nextLo, r, stride, stride$1, x, xr, xr$1;
		nextLo = 0;
		_ref = x.R16;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			xr = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), unicode.Range16);
			_tmp = ((xr.Lo >> 0));
			_tmp$1 = ((xr.Hi >> 0));
			_tmp$2 = ((xr.Stride >> 0));
			lo = _tmp;
			hi = _tmp$1;
			stride = _tmp$2;
			if (stride === 1) {
				if (nextLo <= (lo - 1 >> 0)) {
					r = appendRange(r, nextLo, lo - 1 >> 0);
				}
				nextLo = hi + 1 >> 0;
				_i++;
				continue;
			}
			c = lo;
			while (true) {
				if (!(c <= hi)) { break; }
				if (nextLo <= (c - 1 >> 0)) {
					r = appendRange(r, nextLo, c - 1 >> 0);
				}
				nextLo = c + 1 >> 0;
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			xr$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), unicode.Range32);
			_tmp$3 = ((xr$1.Lo >> 0));
			_tmp$4 = ((xr$1.Hi >> 0));
			_tmp$5 = ((xr$1.Stride >> 0));
			lo$1 = _tmp$3;
			hi$1 = _tmp$4;
			stride$1 = _tmp$5;
			if (stride$1 === 1) {
				if (nextLo <= (lo$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, lo$1 - 1 >> 0);
				}
				nextLo = hi$1 + 1 >> 0;
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (true) {
				if (!(c$1 <= hi$1)) { break; }
				if (nextLo <= (c$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, c$1 - 1 >> 0);
				}
				nextLo = c$1 + 1 >> 0;
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	negateClass = function(r) {
		var _tmp, _tmp$1, hi, i, lo, nextLo, r, w, x, x$1;
		nextLo = 0;
		w = 0;
		i = 0;
		while (true) {
			if (!(i < r.$length)) { break; }
			_tmp = ((i < 0 || i >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + i]);
			_tmp$1 = (x = i + 1 >> 0, ((x < 0 || x >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x]));
			lo = _tmp;
			hi = _tmp$1;
			if (nextLo <= (lo - 1 >> 0)) {
				((w < 0 || w >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + w] = nextLo);
				(x$1 = w + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$1] = (lo - 1 >> 0)));
				w = w + (2) >> 0;
			}
			nextLo = hi + 1 >> 0;
			i = i + (2) >> 0;
		}
		r = $subslice(r, 0, w);
		if (nextLo <= 1114111) {
			r = $append(r, nextLo, 1114111);
		}
		return r;
	};
	ranges.ptr.prototype.Less = function(i, j) {
		var i, j, p, ra, x, x$1;
		ra = this;
		p = ra.p.$get();
		i = $imul(i, (2));
		j = $imul(j, (2));
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]) || (((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) === ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j])) && (x = i + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) > (x$1 = j + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1]));
	};
	ranges.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	ranges.ptr.prototype.Len = function() {
		var _q, ra;
		ra = this;
		return (_q = ra.p.$get().$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	ranges.prototype.Len = function() { return this.$val.Len(); };
	ranges.ptr.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, i, j, p, ra, x, x$1, x$2, x$3;
		ra = this;
		p = ra.p.$get();
		i = $imul(i, (2));
		j = $imul(j, (2));
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = (x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x]));
		_tmp$2 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		_tmp$3 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1]));
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		(x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2] = _tmp$1));
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$2);
		(x$3 = j + 1 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3] = _tmp$3));
	};
	ranges.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	checkUTF8 = function(s) {
		var _tuple, rune, s, size;
		while (true) {
			if (!(!(s === ""))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			rune = _tuple[0];
			size = _tuple[1];
			if ((rune === 65533) && (size === 1)) {
				return new Error.ptr("invalid UTF-8", s);
			}
			s = $substring(s, size);
		}
		return $ifaceNil;
	};
	nextRune = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, err, s, size, t;
		c = 0;
		t = "";
		err = $ifaceNil;
		_tuple = utf8.DecodeRuneInString(s);
		c = _tuple[0];
		size = _tuple[1];
		if ((c === 65533) && (size === 1)) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("invalid UTF-8", s);
			c = _tmp;
			t = _tmp$1;
			err = _tmp$2;
			return [c, t, err];
		}
		_tmp$3 = c;
		_tmp$4 = $substring(s, size);
		_tmp$5 = $ifaceNil;
		c = _tmp$3;
		t = _tmp$4;
		err = _tmp$5;
		return [c, t, err];
	};
	isalnum = function(c) {
		var c;
		return 48 <= c && c <= 57 || 65 <= c && c <= 90 || 97 <= c && c <= 122;
	};
	unhex = function(c) {
		var c;
		if (48 <= c && c <= 57) {
			return c - 48 >> 0;
		}
		if (97 <= c && c <= 102) {
			return (c - 97 >> 0) + 10 >> 0;
		}
		if (65 <= c && c <= 70) {
			return (c - 65 >> 0) + 10 >> 0;
		}
		return -1;
	};
	Op.prototype.String = function() {
		var i, x;
		i = this.$val;
		if (1 <= i && i <= 19) {
			i = i - (1) << 24 >>> 24;
			return $substring("NoMatchEmptyMatchLiteralCharClassAnyCharNotNLAnyCharBeginLineEndLineBeginTextEndTextWordBoundaryNoWordBoundaryCaptureStarPlusQuestRepeatConcatAlternate", ((i < 0 || i >= _Op_index_0.length) ? ($throwRuntimeError("index out of range"), undefined) : _Op_index_0[i]), (x = i + 1 << 24 >>> 24, ((x < 0 || x >= _Op_index_0.length) ? ($throwRuntimeError("index out of range"), undefined) : _Op_index_0[x])));
		} else if ((i === 128)) {
			return "opPseudo";
		} else {
			return "Op(" + strconv.FormatInt((new $Int64(0, i)), 10) + ")";
		}
	};
	$ptrType(Op).prototype.String = function() { return new Op(this.$get()).String(); };
	makePatchList = function(n) {
		var n;
		return new patchList.ptr(n, n);
	};
	patchList.ptr.prototype.patch = function(p, val) {
		var head, i, l, p, val, x, x$1;
		l = this;
		head = l.head;
		while (true) {
			if (!(!((head === 0)))) { break; }
			i = (x = p.Inst, x$1 = head >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			if (((head & 1) >>> 0) === 0) {
				head = i.Out;
				i.Out = val;
			} else {
				head = i.Arg;
				i.Arg = val;
			}
		}
	};
	patchList.prototype.patch = function(p, val) { return this.$val.patch(p, val); };
	patchList.ptr.prototype.append = function(p, l2) {
		var i, l1, l2, p, x, x$1;
		l1 = this;
		if (l1.head === 0) {
			return l2;
		}
		if (l2.head === 0) {
			return l1;
		}
		i = (x = p.Inst, x$1 = l1.tail >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (((l1.tail & 1) >>> 0) === 0) {
			i.Out = l2.head;
		} else {
			i.Arg = l2.head;
		}
		return new patchList.ptr(l1.head, l2.tail);
	};
	patchList.prototype.append = function(p, l2) { return this.$val.append(p, l2); };
	Compile = function(re) {
		var c, f, re;
		c = new compiler.ptr(ptrType$4.nil);
		c.init();
		f = $clone(c.compile(re), frag);
		$clone(f.out, patchList).patch(c.p, c.inst(4).i);
		c.p.Start = ((f.i >> 0));
		return [c.p, $ifaceNil];
	};
	$pkg.Compile = Compile;
	compiler.ptr.prototype.init = function() {
		var c;
		c = this;
		c.p = new Prog.ptr(sliceType$6.nil, 0, 0);
		c.p.NumCap = 2;
		c.inst(5);
	};
	compiler.prototype.init = function() { return this.$val.init(); };
	compiler.ptr.prototype.compile = function(re) {
		var _1, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, bra, c, f, f$1, f$2, f1, i, j, ket, re, sub, sub$1, sub$2, x, x$1, x$2, x$3;
		c = this;
		_1 = re.Op;
		if (_1 === (1)) {
			return c.fail();
		} else if (_1 === (2)) {
			return c.nop();
		} else if (_1 === (3)) {
			if (re.Rune.$length === 0) {
				return c.nop();
			}
			f = new frag.ptr(0, new patchList.ptr(0, 0), false);
			_ref = re.Rune;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				f1 = $clone(c.rune($subslice(re.Rune, j, (j + 1 >> 0)), re.Flags), frag);
				if (j === 0) {
					frag.copy(f, f1);
				} else {
					frag.copy(f, c.cat($clone(f, frag), $clone(f1, frag)));
				}
				_i++;
			}
			return f;
		} else if (_1 === (4)) {
			return c.rune(re.Rune, re.Flags);
		} else if (_1 === (5)) {
			return c.rune(anyRuneNotNL, 0);
		} else if (_1 === (6)) {
			return c.rune(anyRune, 0);
		} else if (_1 === (7)) {
			return c.empty(1);
		} else if (_1 === (8)) {
			return c.empty(2);
		} else if (_1 === (9)) {
			return c.empty(4);
		} else if (_1 === (10)) {
			return c.empty(8);
		} else if (_1 === (11)) {
			return c.empty(16);
		} else if (_1 === (12)) {
			return c.empty(32);
		} else if (_1 === (13)) {
			bra = $clone(c.cap((((re.Cap << 1 >> 0) >>> 0))), frag);
			sub = $clone(c.compile((x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]))), frag);
			ket = $clone(c.cap(((((re.Cap << 1 >> 0) | 1) >>> 0))), frag);
			return c.cat($clone(c.cat($clone(bra, frag), $clone(sub, frag)), frag), $clone(ket, frag));
		} else if (_1 === (14)) {
			return c.star($clone(c.compile((x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_1 === (15)) {
			return c.plus($clone(c.compile((x$2 = re.Sub, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_1 === (16)) {
			return c.quest($clone(c.compile((x$3 = re.Sub, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_1 === (18)) {
			if (re.Sub.$length === 0) {
				return c.nop();
			}
			f$1 = new frag.ptr(0, new patchList.ptr(0, 0), false);
			_ref$1 = re.Sub;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i = _i$1;
				sub$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (i === 0) {
					frag.copy(f$1, c.compile(sub$1));
				} else {
					frag.copy(f$1, c.cat($clone(f$1, frag), $clone(c.compile(sub$1), frag)));
				}
				_i$1++;
			}
			return f$1;
		} else if (_1 === (19)) {
			f$2 = new frag.ptr(0, new patchList.ptr(0, 0), false);
			_ref$2 = re.Sub;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				sub$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				frag.copy(f$2, c.alt($clone(f$2, frag), $clone(c.compile(sub$2), frag)));
				_i$2++;
			}
			return f$2;
		}
		$panic(new $String("regexp: unhandled case in compile"));
	};
	compiler.prototype.compile = function(re) { return this.$val.compile(re); };
	compiler.ptr.prototype.inst = function(op) {
		var c, f, op;
		c = this;
		f = new frag.ptr(((c.p.Inst.$length >>> 0)), new patchList.ptr(0, 0), true);
		c.p.Inst = $append(c.p.Inst, new Inst.ptr(op, 0, 0, sliceType$1.nil));
		return f;
	};
	compiler.prototype.inst = function(op) { return this.$val.inst(op); };
	compiler.ptr.prototype.nop = function() {
		var c, f;
		c = this;
		f = $clone(c.inst(6), frag);
		patchList.copy(f.out, makePatchList(f.i << 1 >>> 0));
		return f;
	};
	compiler.prototype.nop = function() { return this.$val.nop(); };
	compiler.ptr.prototype.fail = function() {
		var c;
		c = this;
		return new frag.ptr(0, new patchList.ptr(0, 0), false);
	};
	compiler.prototype.fail = function() { return this.$val.fail(); };
	compiler.ptr.prototype.cap = function(arg) {
		var arg, c, f, x, x$1;
		c = this;
		f = $clone(c.inst(2), frag);
		patchList.copy(f.out, makePatchList(f.i << 1 >>> 0));
		(x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Arg = arg;
		if (c.p.NumCap < (((arg >> 0)) + 1 >> 0)) {
			c.p.NumCap = ((arg >> 0)) + 1 >> 0;
		}
		return f;
	};
	compiler.prototype.cap = function(arg) { return this.$val.cap(arg); };
	compiler.ptr.prototype.cat = function(f1, f2) {
		var c, f1, f2;
		c = this;
		if ((f1.i === 0) || (f2.i === 0)) {
			return new frag.ptr(0, new patchList.ptr(0, 0), false);
		}
		$clone(f1.out, patchList).patch(c.p, f2.i);
		return new frag.ptr(f1.i, $clone(f2.out, patchList), f1.nullable && f2.nullable);
	};
	compiler.prototype.cat = function(f1, f2) { return this.$val.cat(f1, f2); };
	compiler.ptr.prototype.alt = function(f1, f2) {
		var c, f, f1, f2, i, x, x$1;
		c = this;
		if (f1.i === 0) {
			return f2;
		}
		if (f2.i === 0) {
			return f1;
		}
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		i.Out = f1.i;
		i.Arg = f2.i;
		patchList.copy(f.out, $clone(f1.out, patchList).append(c.p, $clone(f2.out, patchList)));
		f.nullable = f1.nullable || f2.nullable;
		return f;
	};
	compiler.prototype.alt = function(f1, f2) { return this.$val.alt(f1, f2); };
	compiler.ptr.prototype.quest = function(f1, nongreedy) {
		var c, f, f1, i, nongreedy, x, x$1;
		c = this;
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (nongreedy) {
			i.Arg = f1.i;
			patchList.copy(f.out, makePatchList(f.i << 1 >>> 0));
		} else {
			i.Out = f1.i;
			patchList.copy(f.out, makePatchList(((f.i << 1 >>> 0) | 1) >>> 0));
		}
		patchList.copy(f.out, $clone(f.out, patchList).append(c.p, $clone(f1.out, patchList)));
		return f;
	};
	compiler.prototype.quest = function(f1, nongreedy) { return this.$val.quest(f1, nongreedy); };
	compiler.ptr.prototype.loop = function(f1, nongreedy) {
		var c, f, f1, i, nongreedy, x, x$1;
		c = this;
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (nongreedy) {
			i.Arg = f1.i;
			patchList.copy(f.out, makePatchList(f.i << 1 >>> 0));
		} else {
			i.Out = f1.i;
			patchList.copy(f.out, makePatchList(((f.i << 1 >>> 0) | 1) >>> 0));
		}
		$clone(f1.out, patchList).patch(c.p, f.i);
		return f;
	};
	compiler.prototype.loop = function(f1, nongreedy) { return this.$val.loop(f1, nongreedy); };
	compiler.ptr.prototype.star = function(f1, nongreedy) {
		var c, f1, nongreedy;
		c = this;
		if (f1.nullable) {
			return c.quest($clone(c.plus($clone(f1, frag), nongreedy), frag), nongreedy);
		}
		return c.loop($clone(f1, frag), nongreedy);
	};
	compiler.prototype.star = function(f1, nongreedy) { return this.$val.star(f1, nongreedy); };
	compiler.ptr.prototype.plus = function(f1, nongreedy) {
		var c, f1, nongreedy;
		c = this;
		return new frag.ptr(f1.i, $clone(c.loop($clone(f1, frag), nongreedy).out, patchList), f1.nullable);
	};
	compiler.prototype.plus = function(f1, nongreedy) { return this.$val.plus(f1, nongreedy); };
	compiler.ptr.prototype.empty = function(op) {
		var c, f, op, x, x$1;
		c = this;
		f = $clone(c.inst(3), frag);
		(x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Arg = ((op >>> 0));
		patchList.copy(f.out, makePatchList(f.i << 1 >>> 0));
		return f;
	};
	compiler.prototype.empty = function(op) { return this.$val.empty(op); };
	compiler.ptr.prototype.rune = function(r, flags) {
		var c, f, flags, i, r, x, x$1;
		c = this;
		f = $clone(c.inst(7), frag);
		f.nullable = false;
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		i.Rune = r;
		flags = (flags & (1)) >>> 0;
		if (!((r.$length === 1)) || (unicode.SimpleFold((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0])) === (0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]))) {
			flags = (flags & ~(1)) << 16 >>> 16;
		}
		i.Arg = ((flags >>> 0));
		patchList.copy(f.out, makePatchList(f.i << 1 >>> 0));
		if ((((flags & 1) >>> 0) === 0) && ((r.$length === 1) || (r.$length === 2) && ((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]) === (1 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 1])))) {
			i.Op = 8;
		} else if ((r.$length === 2) && ((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]) === 0) && ((1 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 1]) === 1114111)) {
			i.Op = 9;
		} else if ((r.$length === 4) && ((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]) === 0) && ((1 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 1]) === 9) && ((2 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 2]) === 11) && ((3 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 3]) === 1114111)) {
			i.Op = 10;
		}
		return f;
	};
	compiler.prototype.rune = function(r, flags) { return this.$val.rune(r, flags); };
	ptrType.methods = [{prop: "Simplify", name: "Simplify", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MaxCap", name: "MaxCap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "CapNames", name: "CapNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "capNames", name: "capNames", pkg: "regexp/syntax", typ: $funcType([sliceType], [], false)}];
	Op.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "skipNop", name: "skipNop", pkg: "regexp/syntax", typ: $funcType([$Uint32], [ptrType$5], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "StartCond", name: "StartCond", pkg: "", typ: $funcType([], [EmptyOp], false)}];
	InstOp.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "op", name: "op", pkg: "regexp/syntax", typ: $funcType([], [InstOp], false)}, {prop: "MatchRune", name: "MatchRune", pkg: "", typ: $funcType([$Int32], [$Bool], false)}, {prop: "MatchRunePos", name: "MatchRunePos", pkg: "", typ: $funcType([$Int32], [$Int], false)}, {prop: "MatchEmptyWidth", name: "MatchEmptyWidth", pkg: "", typ: $funcType([$Int32, $Int32], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ErrorCode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "newRegexp", name: "newRegexp", pkg: "regexp/syntax", typ: $funcType([Op], [ptrType], false)}, {prop: "reuse", name: "reuse", pkg: "regexp/syntax", typ: $funcType([ptrType], [], false)}, {prop: "checkHeight", name: "checkHeight", pkg: "regexp/syntax", typ: $funcType([ptrType], [], false)}, {prop: "calcHeight", name: "calcHeight", pkg: "regexp/syntax", typ: $funcType([ptrType, $Bool], [$Int], false)}, {prop: "push", name: "push", pkg: "regexp/syntax", typ: $funcType([ptrType], [ptrType], false)}, {prop: "maybeConcat", name: "maybeConcat", pkg: "regexp/syntax", typ: $funcType([$Int32, Flags], [$Bool], false)}, {prop: "literal", name: "literal", pkg: "regexp/syntax", typ: $funcType([$Int32], [], false)}, {prop: "op", name: "op", pkg: "regexp/syntax", typ: $funcType([Op], [ptrType], false)}, {prop: "repeat", name: "repeat", pkg: "regexp/syntax", typ: $funcType([Op, $Int, $Int, $String, $String, $String], [$String, $error], false)}, {prop: "concat", name: "concat", pkg: "regexp/syntax", typ: $funcType([], [ptrType], false)}, {prop: "alternate", name: "alternate", pkg: "regexp/syntax", typ: $funcType([], [ptrType], false)}, {prop: "collapse", name: "collapse", pkg: "regexp/syntax", typ: $funcType([sliceType$4, Op], [ptrType], false)}, {prop: "factor", name: "factor", pkg: "regexp/syntax", typ: $funcType([sliceType$4], [sliceType$4], false)}, {prop: "leadingString", name: "leadingString", pkg: "regexp/syntax", typ: $funcType([ptrType], [sliceType$1, Flags], false)}, {prop: "removeLeadingString", name: "removeLeadingString", pkg: "regexp/syntax", typ: $funcType([ptrType, $Int], [ptrType], false)}, {prop: "leadingRegexp", name: "leadingRegexp", pkg: "regexp/syntax", typ: $funcType([ptrType], [ptrType], false)}, {prop: "removeLeadingRegexp", name: "removeLeadingRegexp", pkg: "regexp/syntax", typ: $funcType([ptrType, $Bool], [ptrType], false)}, {prop: "parseRepeat", name: "parseRepeat", pkg: "regexp/syntax", typ: $funcType([$String], [$Int, $Int, $String, $Bool], false)}, {prop: "parsePerlFlags", name: "parsePerlFlags", pkg: "regexp/syntax", typ: $funcType([$String], [$String, $error], false)}, {prop: "parseInt", name: "parseInt", pkg: "regexp/syntax", typ: $funcType([$String], [$Int, $String, $Bool], false)}, {prop: "parseVerticalBar", name: "parseVerticalBar", pkg: "regexp/syntax", typ: $funcType([], [$error], false)}, {prop: "swapVerticalBar", name: "swapVerticalBar", pkg: "regexp/syntax", typ: $funcType([], [$Bool], false)}, {prop: "parseRightParen", name: "parseRightParen", pkg: "regexp/syntax", typ: $funcType([], [$error], false)}, {prop: "parseEscape", name: "parseEscape", pkg: "regexp/syntax", typ: $funcType([$String], [$Int32, $String, $error], false)}, {prop: "parseClassChar", name: "parseClassChar", pkg: "regexp/syntax", typ: $funcType([$String, $String], [$Int32, $String, $error], false)}, {prop: "parsePerlClassEscape", name: "parsePerlClassEscape", pkg: "regexp/syntax", typ: $funcType([$String, sliceType$1], [sliceType$1, $String], false)}, {prop: "parseNamedClass", name: "parseNamedClass", pkg: "regexp/syntax", typ: $funcType([$String, sliceType$1], [sliceType$1, $String, $error], false)}, {prop: "appendGroup", name: "appendGroup", pkg: "regexp/syntax", typ: $funcType([sliceType$1, charGroup], [sliceType$1], false)}, {prop: "parseUnicodeClass", name: "parseUnicodeClass", pkg: "regexp/syntax", typ: $funcType([$String, sliceType$1], [sliceType$1, $String, $error], false)}, {prop: "parseClass", name: "parseClass", pkg: "regexp/syntax", typ: $funcType([$String], [$String, $error], false)}];
	ranges.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	patchList.methods = [{prop: "patch", name: "patch", pkg: "regexp/syntax", typ: $funcType([ptrType$4, $Uint32], [], false)}, {prop: "append", name: "append", pkg: "regexp/syntax", typ: $funcType([ptrType$4, patchList], [patchList], false)}];
	ptrType$8.methods = [{prop: "init", name: "init", pkg: "regexp/syntax", typ: $funcType([], [], false)}, {prop: "compile", name: "compile", pkg: "regexp/syntax", typ: $funcType([ptrType], [frag], false)}, {prop: "inst", name: "inst", pkg: "regexp/syntax", typ: $funcType([InstOp], [frag], false)}, {prop: "nop", name: "nop", pkg: "regexp/syntax", typ: $funcType([], [frag], false)}, {prop: "fail", name: "fail", pkg: "regexp/syntax", typ: $funcType([], [frag], false)}, {prop: "cap", name: "cap", pkg: "regexp/syntax", typ: $funcType([$Uint32], [frag], false)}, {prop: "cat", name: "cat", pkg: "regexp/syntax", typ: $funcType([frag, frag], [frag], false)}, {prop: "alt", name: "alt", pkg: "regexp/syntax", typ: $funcType([frag, frag], [frag], false)}, {prop: "quest", name: "quest", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "loop", name: "loop", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "star", name: "star", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "plus", name: "plus", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "empty", name: "empty", pkg: "regexp/syntax", typ: $funcType([EmptyOp], [frag], false)}, {prop: "rune", name: "rune", pkg: "regexp/syntax", typ: $funcType([sliceType$1, Flags], [frag], false)}];
	Regexp.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: Op, tag: ""}, {prop: "Flags", name: "Flags", embedded: false, exported: true, typ: Flags, tag: ""}, {prop: "Sub", name: "Sub", embedded: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "Sub0", name: "Sub0", embedded: false, exported: true, typ: arrayType, tag: ""}, {prop: "Rune", name: "Rune", embedded: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Rune0", name: "Rune0", embedded: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Min", name: "Min", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Max", name: "Max", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Cap", name: "Cap", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Name", name: "Name", embedded: false, exported: true, typ: $String, tag: ""}]);
	Prog.init("", [{prop: "Inst", name: "Inst", embedded: false, exported: true, typ: sliceType$6, tag: ""}, {prop: "Start", name: "Start", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "NumCap", name: "NumCap", embedded: false, exported: true, typ: $Int, tag: ""}]);
	Inst.init("", [{prop: "Op", name: "Op", embedded: false, exported: true, typ: InstOp, tag: ""}, {prop: "Out", name: "Out", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Arg", name: "Arg", embedded: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Rune", name: "Rune", embedded: false, exported: true, typ: sliceType$1, tag: ""}]);
	Error.init("", [{prop: "Code", name: "Code", embedded: false, exported: true, typ: ErrorCode, tag: ""}, {prop: "Expr", name: "Expr", embedded: false, exported: true, typ: $String, tag: ""}]);
	parser.init("regexp/syntax", [{prop: "flags", name: "flags", embedded: false, exported: false, typ: Flags, tag: ""}, {prop: "stack", name: "stack", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "free", name: "free", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "numCap", name: "numCap", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "wholeRegexp", name: "wholeRegexp", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "tmpClass", name: "tmpClass", embedded: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "numRegexp", name: "numRegexp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", embedded: false, exported: false, typ: mapType, tag: ""}]);
	charGroup.init("regexp/syntax", [{prop: "sign", name: "sign", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "class$1", name: "class", embedded: false, exported: false, typ: sliceType$1, tag: ""}]);
	ranges.init("regexp/syntax", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$2, tag: ""}]);
	patchList.init("regexp/syntax", [{prop: "head", name: "head", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tail", name: "tail", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	frag.init("regexp/syntax", [{prop: "i", name: "i", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "out", name: "out", embedded: false, exported: false, typ: patchList, tag: ""}, {prop: "nullable", name: "nullable", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	compiler.init("regexp/syntax", [{prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$4, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sort.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		instOpNames = new sliceType(["InstAlt", "InstAltMatch", "InstCapture", "InstEmptyWidth", "InstMatch", "InstFail", "InstNop", "InstRune", "InstRune1", "InstRuneAny", "InstRuneAnyNotNL"]);
		code1 = new sliceType$1([48, 57]);
		code2 = new sliceType$1([9, 10, 12, 13, 32, 32]);
		code3 = new sliceType$1([48, 57, 65, 90, 95, 95, 97, 122]);
		perlGroup = $makeMap($String.keyFor, [{ k: "\\d", v: $clone(new charGroup.ptr(1, code1), charGroup) }, { k: "\\D", v: $clone(new charGroup.ptr(-1, code1), charGroup) }, { k: "\\s", v: $clone(new charGroup.ptr(1, code2), charGroup) }, { k: "\\S", v: $clone(new charGroup.ptr(-1, code2), charGroup) }, { k: "\\w", v: $clone(new charGroup.ptr(1, code3), charGroup) }, { k: "\\W", v: $clone(new charGroup.ptr(-1, code3), charGroup) }]);
		code4 = new sliceType$1([48, 57, 65, 90, 97, 122]);
		code5 = new sliceType$1([65, 90, 97, 122]);
		code6 = new sliceType$1([0, 127]);
		code7 = new sliceType$1([9, 9, 32, 32]);
		code8 = new sliceType$1([0, 31, 127, 127]);
		code9 = new sliceType$1([48, 57]);
		code10 = new sliceType$1([33, 126]);
		code11 = new sliceType$1([97, 122]);
		code12 = new sliceType$1([32, 126]);
		code13 = new sliceType$1([33, 47, 58, 64, 91, 96, 123, 126]);
		code14 = new sliceType$1([9, 13, 32, 32]);
		code15 = new sliceType$1([65, 90]);
		code16 = new sliceType$1([48, 57, 65, 90, 95, 95, 97, 122]);
		code17 = new sliceType$1([48, 57, 65, 70, 97, 102]);
		posixGroup = $makeMap($String.keyFor, [{ k: "[:alnum:]", v: $clone(new charGroup.ptr(1, code4), charGroup) }, { k: "[:^alnum:]", v: $clone(new charGroup.ptr(-1, code4), charGroup) }, { k: "[:alpha:]", v: $clone(new charGroup.ptr(1, code5), charGroup) }, { k: "[:^alpha:]", v: $clone(new charGroup.ptr(-1, code5), charGroup) }, { k: "[:ascii:]", v: $clone(new charGroup.ptr(1, code6), charGroup) }, { k: "[:^ascii:]", v: $clone(new charGroup.ptr(-1, code6), charGroup) }, { k: "[:blank:]", v: $clone(new charGroup.ptr(1, code7), charGroup) }, { k: "[:^blank:]", v: $clone(new charGroup.ptr(-1, code7), charGroup) }, { k: "[:cntrl:]", v: $clone(new charGroup.ptr(1, code8), charGroup) }, { k: "[:^cntrl:]", v: $clone(new charGroup.ptr(-1, code8), charGroup) }, { k: "[:digit:]", v: $clone(new charGroup.ptr(1, code9), charGroup) }, { k: "[:^digit:]", v: $clone(new charGroup.ptr(-1, code9), charGroup) }, { k: "[:graph:]", v: $clone(new charGroup.ptr(1, code10), charGroup) }, { k: "[:^graph:]", v: $clone(new charGroup.ptr(-1, code10), charGroup) }, { k: "[:lower:]", v: $clone(new charGroup.ptr(1, code11), charGroup) }, { k: "[:^lower:]", v: $clone(new charGroup.ptr(-1, code11), charGroup) }, { k: "[:print:]", v: $clone(new charGroup.ptr(1, code12), charGroup) }, { k: "[:^print:]", v: $clone(new charGroup.ptr(-1, code12), charGroup) }, { k: "[:punct:]", v: $clone(new charGroup.ptr(1, code13), charGroup) }, { k: "[:^punct:]", v: $clone(new charGroup.ptr(-1, code13), charGroup) }, { k: "[:space:]", v: $clone(new charGroup.ptr(1, code14), charGroup) }, { k: "[:^space:]", v: $clone(new charGroup.ptr(-1, code14), charGroup) }, { k: "[:upper:]", v: $clone(new charGroup.ptr(1, code15), charGroup) }, { k: "[:^upper:]", v: $clone(new charGroup.ptr(-1, code15), charGroup) }, { k: "[:word:]", v: $clone(new charGroup.ptr(1, code16), charGroup) }, { k: "[:^word:]", v: $clone(new charGroup.ptr(-1, code16), charGroup) }, { k: "[:xdigit:]", v: $clone(new charGroup.ptr(1, code17), charGroup) }, { k: "[:^xdigit:]", v: $clone(new charGroup.ptr(-1, code17), charGroup) }]);
		anyTable = new unicode.RangeTable.ptr(new sliceType$2([$clone(new unicode.Range16.ptr(0, 65535, 1), unicode.Range16)]), new sliceType$3([$clone(new unicode.Range32.ptr(65536, 1114111, 1), unicode.Range32)]), 0);
		_Op_index_0 = $toNativeArray($kindUint8, [0, 7, 17, 24, 33, 45, 52, 61, 68, 77, 84, 96, 110, 117, 121, 125, 130, 136, 142, 151]);
		anyRuneNotNL = new sliceType$1([0, 9, 11, 1114111]);
		anyRune = new sliceType$1([0, 1114111]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["regexp"] = (function() {
	var $pkg = {}, $init, bytes, nosync, io, syntax, sort, strconv, strings, unicode, utf8, Regexp, input, inputString, inputBytes, inputReader, onePassProg, onePassInst, queueOnePass, runeSlice, queue, entry, thread, machine, inputs, lazyFlag, onePassMachine, job, bitState, sliceType, arrayType, arrayType$1, arrayType$2, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, sliceType$3, sliceType$4, ptrType$3, sliceType$5, ptrType$4, sliceType$6, sliceType$7, arrayType$3, arrayType$4, sliceType$8, sliceType$9, sliceType$10, sliceType$11, ptrType$5, ptrType$6, ptrType$7, sliceType$12, ptrType$8, sliceType$13, ptrType$9, sliceType$14, ptrType$10, ptrType$11, ptrType$12, ptrType$13, sliceType$15, funcType, funcType$1, funcType$2, funcType$3, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, matchSize, matchPool, specialBytes, noRune, noNext, anyRuneNotNL, anyRune, onePassPool, arrayNoInts, bitStatePool, Compile, compile, minInputLen, MustCompile, quote, MatchString, special, init, QuoteMeta, extract, onePassPrefix, onePassNext, iop, newQueue, mergeRuneSets, cleanupOnePass, onePassCopy, makeOnePass, compileOnePass, newLazyFlag, newOnePassMachine, freeOnePassMachine, newBitState, freeBitState, maxBitStateLen, shouldBacktrack;
	bytes = $packages["bytes"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	syntax = $packages["regexp/syntax"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Regexp = $pkg.Regexp = $newType(0, $kindStruct, "regexp.Regexp", true, "regexp", true, function(expr_, prog_, onepass_, numSubexp_, maxBitStateLen_, subexpNames_, prefix_, prefixBytes_, prefixRune_, prefixEnd_, mpool_, matchcap_, prefixComplete_, cond_, minInputLen_, longest_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.expr = "";
			this.prog = ptrType$1.nil;
			this.onepass = ptrType$2.nil;
			this.numSubexp = 0;
			this.maxBitStateLen = 0;
			this.subexpNames = sliceType$3.nil;
			this.prefix = "";
			this.prefixBytes = sliceType$4.nil;
			this.prefixRune = 0;
			this.prefixEnd = 0;
			this.mpool = 0;
			this.matchcap = 0;
			this.prefixComplete = false;
			this.cond = 0;
			this.minInputLen = 0;
			this.longest = false;
			return;
		}
		this.expr = expr_;
		this.prog = prog_;
		this.onepass = onepass_;
		this.numSubexp = numSubexp_;
		this.maxBitStateLen = maxBitStateLen_;
		this.subexpNames = subexpNames_;
		this.prefix = prefix_;
		this.prefixBytes = prefixBytes_;
		this.prefixRune = prefixRune_;
		this.prefixEnd = prefixEnd_;
		this.mpool = mpool_;
		this.matchcap = matchcap_;
		this.prefixComplete = prefixComplete_;
		this.cond = cond_;
		this.minInputLen = minInputLen_;
		this.longest = longest_;
	});
	input = $pkg.input = $newType(8, $kindInterface, "regexp.input", true, "regexp", false, null);
	inputString = $pkg.inputString = $newType(0, $kindStruct, "regexp.inputString", true, "regexp", false, function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = "";
			return;
		}
		this.str = str_;
	});
	inputBytes = $pkg.inputBytes = $newType(0, $kindStruct, "regexp.inputBytes", true, "regexp", false, function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = sliceType$4.nil;
			return;
		}
		this.str = str_;
	});
	inputReader = $pkg.inputReader = $newType(0, $kindStruct, "regexp.inputReader", true, "regexp", false, function(r_, atEOT_, pos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.atEOT = false;
			this.pos = 0;
			return;
		}
		this.r = r_;
		this.atEOT = atEOT_;
		this.pos = pos_;
	});
	onePassProg = $pkg.onePassProg = $newType(0, $kindStruct, "regexp.onePassProg", true, "regexp", false, function(Inst_, Start_, NumCap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = sliceType$12.nil;
			this.Start = 0;
			this.NumCap = 0;
			return;
		}
		this.Inst = Inst_;
		this.Start = Start_;
		this.NumCap = NumCap_;
	});
	onePassInst = $pkg.onePassInst = $newType(0, $kindStruct, "regexp.onePassInst", true, "regexp", false, function(Inst_, Next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = new syntax.Inst.ptr(0, 0, 0, sliceType$1.nil);
			this.Next = sliceType$2.nil;
			return;
		}
		this.Inst = Inst_;
		this.Next = Next_;
	});
	queueOnePass = $pkg.queueOnePass = $newType(0, $kindStruct, "regexp.queueOnePass", true, "regexp", false, function(sparse_, dense_, size_, nextIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sparse = sliceType$2.nil;
			this.dense = sliceType$2.nil;
			this.size = 0;
			this.nextIndex = 0;
			return;
		}
		this.sparse = sparse_;
		this.dense = dense_;
		this.size = size_;
		this.nextIndex = nextIndex_;
	});
	runeSlice = $pkg.runeSlice = $newType(12, $kindSlice, "regexp.runeSlice", true, "regexp", false, null);
	queue = $pkg.queue = $newType(0, $kindStruct, "regexp.queue", true, "regexp", false, function(sparse_, dense_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sparse = sliceType$2.nil;
			this.dense = sliceType$5.nil;
			return;
		}
		this.sparse = sparse_;
		this.dense = dense_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "regexp.entry", true, "regexp", false, function(pc_, t_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pc = 0;
			this.t = ptrType$4.nil;
			return;
		}
		this.pc = pc_;
		this.t = t_;
	});
	thread = $pkg.thread = $newType(0, $kindStruct, "regexp.thread", true, "regexp", false, function(inst_, cap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.inst = ptrType$10.nil;
			this.cap = sliceType$7.nil;
			return;
		}
		this.inst = inst_;
		this.cap = cap_;
	});
	machine = $pkg.machine = $newType(0, $kindStruct, "regexp.machine", true, "regexp", false, function(re_, p_, q0_, q1_, pool_, matched_, matchcap_, inputs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.re = ptrType.nil;
			this.p = ptrType$1.nil;
			this.q0 = new queue.ptr(sliceType$2.nil, sliceType$5.nil);
			this.q1 = new queue.ptr(sliceType$2.nil, sliceType$5.nil);
			this.pool = sliceType$6.nil;
			this.matched = false;
			this.matchcap = sliceType$7.nil;
			this.inputs = new inputs.ptr(new inputBytes.ptr(sliceType$4.nil), new inputString.ptr(""), new inputReader.ptr($ifaceNil, false, 0));
			return;
		}
		this.re = re_;
		this.p = p_;
		this.q0 = q0_;
		this.q1 = q1_;
		this.pool = pool_;
		this.matched = matched_;
		this.matchcap = matchcap_;
		this.inputs = inputs_;
	});
	inputs = $pkg.inputs = $newType(0, $kindStruct, "regexp.inputs", true, "regexp", false, function(bytes_, string_, reader_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = new inputBytes.ptr(sliceType$4.nil);
			this.string = new inputString.ptr("");
			this.reader = new inputReader.ptr($ifaceNil, false, 0);
			return;
		}
		this.bytes = bytes_;
		this.string = string_;
		this.reader = reader_;
	});
	lazyFlag = $pkg.lazyFlag = $newType(8, $kindUint64, "regexp.lazyFlag", true, "regexp", false, null);
	onePassMachine = $pkg.onePassMachine = $newType(0, $kindStruct, "regexp.onePassMachine", true, "regexp", false, function(inputs_, matchcap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.inputs = new inputs.ptr(new inputBytes.ptr(sliceType$4.nil), new inputString.ptr(""), new inputReader.ptr($ifaceNil, false, 0));
			this.matchcap = sliceType$7.nil;
			return;
		}
		this.inputs = inputs_;
		this.matchcap = matchcap_;
	});
	job = $pkg.job = $newType(0, $kindStruct, "regexp.job", true, "regexp", false, function(pc_, arg_, pos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pc = 0;
			this.arg = false;
			this.pos = 0;
			return;
		}
		this.pc = pc_;
		this.arg = arg_;
		this.pos = pos_;
	});
	bitState = $pkg.bitState = $newType(0, $kindStruct, "regexp.bitState", true, "regexp", false, function(end_, cap_, matchcap_, jobs_, visited_, inputs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.end = 0;
			this.cap = sliceType$7.nil;
			this.matchcap = sliceType$7.nil;
			this.jobs = sliceType$15.nil;
			this.visited = sliceType$2.nil;
			this.inputs = new inputs.ptr(new inputBytes.ptr(sliceType$4.nil), new inputString.ptr(""), new inputReader.ptr($ifaceNil, false, 0));
			return;
		}
		this.end = end_;
		this.cap = cap_;
		this.matchcap = matchcap_;
		this.jobs = jobs_;
		this.visited = visited_;
		this.inputs = inputs_;
	});
	sliceType = $sliceType($emptyInterface);
	arrayType = $arrayType(nosync.Pool, 5);
	arrayType$1 = $arrayType($Uint8, 16);
	arrayType$2 = $arrayType($Int, 0);
	sliceType$1 = $sliceType($Int32);
	sliceType$2 = $sliceType($Uint32);
	ptrType = $ptrType(Regexp);
	ptrType$1 = $ptrType(syntax.Prog);
	ptrType$2 = $ptrType(onePassProg);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType($Uint8);
	ptrType$3 = $ptrType(machine);
	sliceType$5 = $sliceType(entry);
	ptrType$4 = $ptrType(thread);
	sliceType$6 = $sliceType(ptrType$4);
	sliceType$7 = $sliceType($Int);
	arrayType$3 = $arrayType($Int, 2);
	arrayType$4 = $arrayType($Int, 4);
	sliceType$8 = $sliceType(sliceType$4);
	sliceType$9 = $sliceType(sliceType$7);
	sliceType$10 = $sliceType(sliceType$8);
	sliceType$11 = $sliceType(sliceType$3);
	ptrType$5 = $ptrType(strings.Builder);
	ptrType$6 = $ptrType(queueOnePass);
	ptrType$7 = $ptrType($Int);
	sliceType$12 = $sliceType(onePassInst);
	ptrType$8 = $ptrType($Uint32);
	sliceType$13 = $sliceType(sliceType$1);
	ptrType$9 = $ptrType(sliceType$1);
	sliceType$14 = $sliceType($Bool);
	ptrType$10 = $ptrType(syntax.Inst);
	ptrType$11 = $ptrType(lazyFlag);
	ptrType$12 = $ptrType(onePassMachine);
	ptrType$13 = $ptrType(bitState);
	sliceType$15 = $sliceType(job);
	funcType = $funcType([$String], [$String], false);
	funcType$1 = $funcType([sliceType$4, sliceType$7], [sliceType$4], false);
	funcType$2 = $funcType([sliceType$4], [sliceType$4], false);
	funcType$3 = $funcType([sliceType$7], [], false);
	ptrType$14 = $ptrType(inputString);
	ptrType$15 = $ptrType(inputBytes);
	ptrType$16 = $ptrType(inputReader);
	ptrType$17 = $ptrType(queue);
	ptrType$18 = $ptrType(inputs);
	Regexp.ptr.prototype.String = function() {
		var re;
		re = this;
		return re.expr;
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	Regexp.ptr.prototype.Copy = function() {
		var re, re2;
		re = this;
		re2 = $clone(re, Regexp);
		return re2;
	};
	Regexp.prototype.Copy = function() { return this.$val.Copy(); };
	Compile = function(expr) {
		var {$24r, _r, expr, $s, $r, $c} = $restore(this, {expr});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = compile(expr, 212, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Compile, $c: true, $r, $24r, _r, expr, $s};return $f;
	};
	$pkg.Compile = Compile;
	Regexp.ptr.prototype.Longest = function() {
		var re;
		re = this;
		re.longest = true;
	};
	Regexp.prototype.Longest = function() { return this.$val.Longest(); };
	compile = function(expr, mode, longest) {
		var {_r, _r$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, capNames, err, expr, i, longest, matchcap, maxCap, mode, n, prog, re, regexp, $s, $r, $c} = $restore(this, {expr, mode, longest});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = syntax.Parse(expr, mode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		re = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType.nil, err];
		}
		maxCap = re.MaxCap();
		capNames = re.CapNames();
		re = re.Simplify();
		_tuple$1 = syntax.Compile(re);
		prog = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType.nil, err];
		}
		matchcap = prog.NumCap;
		if (matchcap < 2) {
			matchcap = 2;
		}
		_r$1 = compileOnePass(prog); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		regexp = new Regexp.ptr(expr, prog, _r$1, maxCap, 0, capNames, "", sliceType$4.nil, 0, 0, 0, matchcap, false, prog.StartCond(), minInputLen(re), longest);
		if (regexp.onepass === ptrType$2.nil) {
			_tuple$2 = prog.Prefix();
			regexp.prefix = _tuple$2[0];
			regexp.prefixComplete = _tuple$2[1];
			regexp.maxBitStateLen = maxBitStateLen(prog);
		} else {
			_tuple$3 = onePassPrefix(prog);
			regexp.prefix = _tuple$3[0];
			regexp.prefixComplete = _tuple$3[1];
			regexp.prefixEnd = _tuple$3[2];
		}
		if (!(regexp.prefix === "")) {
			regexp.prefixBytes = (new sliceType$4($stringToBytes(regexp.prefix)));
			_tuple$4 = utf8.DecodeRuneInString(regexp.prefix);
			regexp.prefixRune = _tuple$4[0];
		}
		n = prog.Inst.$length;
		i = 0;
		while (true) {
			if (!(!((((i < 0 || i >= matchSize.length) ? ($throwRuntimeError("index out of range"), undefined) : matchSize[i]) === 0)) && ((i < 0 || i >= matchSize.length) ? ($throwRuntimeError("index out of range"), undefined) : matchSize[i]) < n)) { break; }
			i = i + (1) >> 0;
		}
		regexp.mpool = i;
		$s = -1; return [regexp, $ifaceNil];
		/* */ } return; } var $f = {$blk: compile, $c: true, $r, _r, _r$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, capNames, err, expr, i, longest, matchcap, maxCap, mode, n, prog, re, regexp, $s};return $f;
	};
	Regexp.ptr.prototype.get = function() {
		var {_i, _r, _ref, _tuple, m, n, ok, re, t, x, x$1, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = (x = re.mpool, ((x < 0 || x >= matchPool.length) ? ($throwRuntimeError("index out of range"), undefined) : matchPool[x])).Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$3, true);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = new machine.ptr(ptrType.nil, ptrType$1.nil, new queue.ptr(sliceType$2.nil, sliceType$5.nil), new queue.ptr(sliceType$2.nil, sliceType$5.nil), sliceType$6.nil, false, sliceType$7.nil, new inputs.ptr(new inputBytes.ptr(sliceType$4.nil), new inputString.ptr(""), new inputReader.ptr($ifaceNil, false, 0)));
		}
		m.re = re;
		m.p = re.prog;
		if (m.matchcap.$capacity < re.matchcap) {
			m.matchcap = $makeSlice(sliceType$7, re.matchcap);
			_ref = m.pool;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				t.cap = $makeSlice(sliceType$7, re.matchcap);
				_i++;
			}
		}
		n = (x$1 = re.mpool, ((x$1 < 0 || x$1 >= matchSize.length) ? ($throwRuntimeError("index out of range"), undefined) : matchSize[x$1]));
		if (n === 0) {
			n = re.prog.Inst.$length;
		}
		if (m.q0.sparse.$length < n) {
			queue.copy(m.q0, new queue.ptr($makeSlice(sliceType$2, n), $makeSlice(sliceType$5, 0, n)));
			queue.copy(m.q1, new queue.ptr($makeSlice(sliceType$2, n), $makeSlice(sliceType$5, 0, n)));
		}
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.get, $c: true, $r, _i, _r, _ref, _tuple, m, n, ok, re, t, x, x$1, $s};return $f;
	};
	Regexp.prototype.get = function() { return this.$val.get(); };
	Regexp.ptr.prototype.put = function(m) {
		var m, re, x;
		re = this;
		m.re = ptrType.nil;
		m.p = ptrType$1.nil;
		m.inputs.clear();
		(x = re.mpool, ((x < 0 || x >= matchPool.length) ? ($throwRuntimeError("index out of range"), undefined) : matchPool[x])).Put(m);
	};
	Regexp.prototype.put = function(m) { return this.$val.put(m); };
	minInputLen = function(re) {
		var _1, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, l, l$1, l$2, lnext, r, re, sub, sub$1, x, x$1, x$2;
		_1 = re.Op;
		if ((_1 === (6)) || (_1 === (5)) || (_1 === (4))) {
			return 1;
		} else if (_1 === (3)) {
			l = 0;
			_ref = re.Rune;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (r === 65533) {
					l = l + (1) >> 0;
				} else {
					l = l + (utf8.RuneLen(r)) >> 0;
				}
				_i++;
			}
			return l;
		} else if ((_1 === (13)) || (_1 === (15))) {
			return minInputLen((x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])));
		} else if (_1 === (17)) {
			return $imul(re.Min, minInputLen((x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]))));
		} else if (_1 === (18)) {
			l$1 = 0;
			_ref$1 = re.Sub;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				sub = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				l$1 = l$1 + (minInputLen(sub)) >> 0;
				_i$1++;
			}
			return l$1;
		} else if (_1 === (19)) {
			l$2 = minInputLen((x$2 = re.Sub, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])));
			lnext = 0;
			_ref$2 = $subslice(re.Sub, 1);
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				sub$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				lnext = minInputLen(sub$1);
				if (lnext < l$2) {
					l$2 = lnext;
				}
				_i$2++;
			}
			return l$2;
		} else {
			return 0;
		}
	};
	MustCompile = function(str) {
		var {_r, _r$1, _tuple, err, regexp, str, $s, $r, $c} = $restore(this, {str});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = Compile(str); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		regexp = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = err.Error(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String("regexp: Compile(" + quote(str) + "): " + _r$1));
		/* } */ case 3:
		$s = -1; return regexp;
		/* */ } return; } var $f = {$blk: MustCompile, $c: true, $r, _r, _r$1, _tuple, err, regexp, str, $s};return $f;
	};
	$pkg.MustCompile = MustCompile;
	quote = function(s) {
		var s;
		if (strconv.CanBackquote(s)) {
			return "`" + s + "`";
		}
		return strconv.Quote(s);
	};
	Regexp.ptr.prototype.NumSubexp = function() {
		var re;
		re = this;
		return re.numSubexp;
	};
	Regexp.prototype.NumSubexp = function() { return this.$val.NumSubexp(); };
	Regexp.ptr.prototype.SubexpNames = function() {
		var re;
		re = this;
		return re.subexpNames;
	};
	Regexp.prototype.SubexpNames = function() { return this.$val.SubexpNames(); };
	Regexp.ptr.prototype.SubexpIndex = function(name) {
		var _i, _ref, i, name, re, s;
		re = this;
		if (!(name === "")) {
			_ref = re.subexpNames;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (name === s) {
					return i;
				}
				_i++;
			}
		}
		return -1;
	};
	Regexp.prototype.SubexpIndex = function(name) { return this.$val.SubexpIndex(name); };
	inputString.ptr.prototype.step = function(pos) {
		var c, i, pos;
		i = this;
		if (pos < i.str.length) {
			c = i.str.charCodeAt(pos);
			if (c < 128) {
				return [((c >> 0)), 1];
			}
			return utf8.DecodeRuneInString($substring(i.str, pos));
		}
		return [-1, 0];
	};
	inputString.prototype.step = function(pos) { return this.$val.step(pos); };
	inputString.ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return true;
	};
	inputString.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputString.ptr.prototype.hasPrefix = function(re) {
		var i, re;
		i = this;
		return strings.HasPrefix(i.str, re.prefix);
	};
	inputString.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputString.ptr.prototype.index = function(re, pos) {
		var i, pos, re;
		i = this;
		return strings.Index($substring(i.str, pos), re.prefix);
	};
	inputString.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputString.ptr.prototype.context = function(pos) {
		var _tmp, _tmp$1, _tuple, _tuple$1, i, pos, r1, r2;
		i = this;
		_tmp = -1;
		_tmp$1 = -1;
		r1 = _tmp;
		r2 = _tmp$1;
		if ((((pos - 1 >> 0) >>> 0)) < ((i.str.length >>> 0))) {
			r1 = ((i.str.charCodeAt((pos - 1 >> 0)) >> 0));
			if (r1 >= 128) {
				_tuple = utf8.DecodeLastRuneInString($substring(i.str, 0, pos));
				r1 = _tuple[0];
			}
		}
		if (((pos >>> 0)) < ((i.str.length >>> 0))) {
			r2 = ((i.str.charCodeAt(pos) >> 0));
			if (r2 >= 128) {
				_tuple$1 = utf8.DecodeRuneInString($substring(i.str, pos));
				r2 = _tuple$1[0];
			}
		}
		return newLazyFlag(r1, r2);
	};
	inputString.prototype.context = function(pos) { return this.$val.context(pos); };
	inputBytes.ptr.prototype.step = function(pos) {
		var c, i, pos, x;
		i = this;
		if (pos < i.str.$length) {
			c = (x = i.str, ((pos < 0 || pos >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pos]));
			if (c < 128) {
				return [((c >> 0)), 1];
			}
			return utf8.DecodeRune($subslice(i.str, pos));
		}
		return [-1, 0];
	};
	inputBytes.prototype.step = function(pos) { return this.$val.step(pos); };
	inputBytes.ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return true;
	};
	inputBytes.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputBytes.ptr.prototype.hasPrefix = function(re) {
		var i, re;
		i = this;
		return bytes.HasPrefix(i.str, re.prefixBytes);
	};
	inputBytes.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputBytes.ptr.prototype.index = function(re, pos) {
		var i, pos, re;
		i = this;
		return bytes.Index($subslice(i.str, pos), re.prefixBytes);
	};
	inputBytes.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputBytes.ptr.prototype.context = function(pos) {
		var _tmp, _tmp$1, _tuple, _tuple$1, i, pos, r1, r2, x, x$1, x$2;
		i = this;
		_tmp = -1;
		_tmp$1 = -1;
		r1 = _tmp;
		r2 = _tmp$1;
		if ((((pos - 1 >> 0) >>> 0)) < ((i.str.$length >>> 0))) {
			r1 = (((x = i.str, x$1 = pos - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0));
			if (r1 >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(i.str, 0, pos));
				r1 = _tuple[0];
			}
		}
		if (((pos >>> 0)) < ((i.str.$length >>> 0))) {
			r2 = (((x$2 = i.str, ((pos < 0 || pos >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + pos])) >> 0));
			if (r2 >= 128) {
				_tuple$1 = utf8.DecodeRune($subslice(i.str, pos));
				r2 = _tuple$1[0];
			}
		}
		return newLazyFlag(r1, r2);
	};
	inputBytes.prototype.context = function(pos) { return this.$val.context(pos); };
	inputReader.ptr.prototype.step = function(pos) {
		var {_r, _tuple, err, i, pos, r, w, $s, $r, $c} = $restore(this, {pos});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		i = this;
		if (!i.atEOT && !((pos === i.pos))) {
			$s = -1; return [-1, 0];
		}
		_r = i.r.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		w = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			i.atEOT = true;
			$s = -1; return [-1, 0];
		}
		i.pos = i.pos + (w) >> 0;
		$s = -1; return [r, w];
		/* */ } return; } var $f = {$blk: inputReader.ptr.prototype.step, $c: true, $r, _r, _tuple, err, i, pos, r, w, $s};return $f;
	};
	inputReader.prototype.step = function(pos) { return this.$val.step(pos); };
	inputReader.ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return false;
	};
	inputReader.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputReader.ptr.prototype.hasPrefix = function(re) {
		var i, re;
		i = this;
		return false;
	};
	inputReader.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputReader.ptr.prototype.index = function(re, pos) {
		var i, pos, re;
		i = this;
		return -1;
	};
	inputReader.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputReader.ptr.prototype.context = function(pos) {
		var i, pos;
		i = this;
		return new lazyFlag(0, 0);
	};
	inputReader.prototype.context = function(pos) { return this.$val.context(pos); };
	Regexp.ptr.prototype.LiteralPrefix = function() {
		var _tmp, _tmp$1, complete, prefix, re;
		prefix = "";
		complete = false;
		re = this;
		_tmp = re.prefix;
		_tmp$1 = re.prefixComplete;
		prefix = _tmp;
		complete = _tmp$1;
		return [prefix, complete];
	};
	Regexp.prototype.LiteralPrefix = function() { return this.$val.LiteralPrefix(); };
	Regexp.ptr.prototype.MatchReader = function(r) {
		var {$24r, _r, r, re, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doMatch(r, sliceType$4.nil, ""); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.MatchReader, $c: true, $r, $24r, _r, r, re, $s};return $f;
	};
	Regexp.prototype.MatchReader = function(r) { return this.$val.MatchReader(r); };
	Regexp.ptr.prototype.MatchString = function(s) {
		var {$24r, _r, re, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doMatch($ifaceNil, sliceType$4.nil, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.MatchString, $c: true, $r, $24r, _r, re, s, $s};return $f;
	};
	Regexp.prototype.MatchString = function(s) { return this.$val.MatchString(s); };
	Regexp.ptr.prototype.Match = function(b) {
		var {$24r, _r, b, re, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doMatch($ifaceNil, b, ""); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.Match, $c: true, $r, $24r, _r, b, re, $s};return $f;
	};
	Regexp.prototype.Match = function(b) { return this.$val.Match(b); };
	MatchString = function(pattern, s) {
		var {$24r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, matched, pattern, re, s, $s, $r, $c} = $restore(this, {pattern, s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		matched = false;
		err = $ifaceNil;
		_r = Compile(pattern); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		re = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = false;
			_tmp$1 = err;
			matched = _tmp;
			err = _tmp$1;
			$s = -1; return [matched, err];
		}
		_r$1 = re.MatchString(s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tmp$2 = _r$1;
		_tmp$3 = $ifaceNil;
		matched = _tmp$2;
		err = _tmp$3;
		$24r = [matched, err];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: MatchString, $c: true, $r, $24r, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, matched, pattern, re, s, $s};return $f;
	};
	$pkg.MatchString = MatchString;
	Regexp.ptr.prototype.ReplaceAllString = function(src, repl) {
		var {_r, b, n, re, repl, src, $s, $r, $c} = $restore(this, {src, repl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = [re];
		repl = [repl];
		src = [src];
		re[0] = this;
		n = 2;
		if (strings.Contains(repl[0], "$")) {
			n = $imul(2, ((re[0].numSubexp + 1 >> 0)));
		}
		_r = re[0].replaceAll(sliceType$4.nil, src[0], n, (function(re, repl, src) { return function(dst, match) {
			var dst, match;
			return re[0].expand(dst, repl[0], sliceType$4.nil, src[0], match);
		}; })(re, repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.ReplaceAllString, $c: true, $r, _r, b, n, re, repl, src, $s};return $f;
	};
	Regexp.prototype.ReplaceAllString = function(src, repl) { return this.$val.ReplaceAllString(src, repl); };
	Regexp.ptr.prototype.ReplaceAllLiteralString = function(src, repl) {
		var {$24r, _r, re, repl, src, $s, $r, $c} = $restore(this, {src, repl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		repl = [repl];
		re = this;
		_r = re.replaceAll(sliceType$4.nil, src, 2, (function(repl) { return function(dst, match) {
			var dst, match;
			return $appendSlice(dst, repl[0]);
		}; })(repl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = ($bytesToString(_r));
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.ReplaceAllLiteralString, $c: true, $r, $24r, _r, re, repl, src, $s};return $f;
	};
	Regexp.prototype.ReplaceAllLiteralString = function(src, repl) { return this.$val.ReplaceAllLiteralString(src, repl); };
	Regexp.ptr.prototype.ReplaceAllStringFunc = function(src, repl) {
		var {_r, b, re, repl, src, $s, $r, $c} = $restore(this, {src, repl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		repl = [repl];
		src = [src];
		re = this;
		_r = re.replaceAll(sliceType$4.nil, src[0], 2, (function(repl, src) { return function $b(dst, match) {
			var {$24r, _arg, _arg$1, _r, dst, match, $s, $r, $c} = $restore(this, {dst, match});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_arg = dst;
			_r = repl[0]($substring(src[0], (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			$24r = $appendSlice(_arg, _arg$1);
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _arg, _arg$1, _r, dst, match, $s};return $f;
		}; })(repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.ReplaceAllStringFunc, $c: true, $r, _r, b, re, repl, src, $s};return $f;
	};
	Regexp.prototype.ReplaceAllStringFunc = function(src, repl) { return this.$val.ReplaceAllStringFunc(src, repl); };
	Regexp.ptr.prototype.replaceAll = function(bsrc, src, nmatch, repl) {
		var {_r, _r$1, _tuple, _tuple$1, a, bsrc, buf, dstCap, endPos, lastMatchEnd, nmatch, re, repl, searchPos, src, width, $s, $r, $c} = $restore(this, {bsrc, src, nmatch, repl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		lastMatchEnd = 0;
		searchPos = 0;
		buf = sliceType$4.nil;
		endPos = 0;
		if (!(bsrc === sliceType$4.nil)) {
			endPos = bsrc.$length;
		} else {
			endPos = src.length;
		}
		if (nmatch > re.prog.NumCap) {
			nmatch = re.prog.NumCap;
		}
		dstCap = arrayType$3.zero();
		/* while (true) { */ case 1:
			/* if (!(searchPos <= endPos)) { break; } */ if(!(searchPos <= endPos)) { $s = 2; continue; }
			_r = re.doExecute($ifaceNil, bsrc, src, searchPos, nmatch, $subslice(new sliceType$7(dstCap), 0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			a = _r;
			if (a.$length === 0) {
				/* break; */ $s = 2; continue;
			}
			if (!(bsrc === sliceType$4.nil)) {
				buf = $appendSlice(buf, $subslice(bsrc, lastMatchEnd, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0])));
			} else {
				buf = $appendSlice(buf, $substring(src, lastMatchEnd, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0])));
			}
			/* */ if ((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) > lastMatchEnd || ((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) > lastMatchEnd || ((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) === 0)) { */ case 4:
				_r$1 = repl(buf, a); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				buf = _r$1;
			/* } */ case 5:
			lastMatchEnd = (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
			width = 0;
			if (!(bsrc === sliceType$4.nil)) {
				_tuple = utf8.DecodeRune($subslice(bsrc, searchPos));
				width = _tuple[1];
			} else {
				_tuple$1 = utf8.DecodeRuneInString($substring(src, searchPos));
				width = _tuple$1[1];
			}
			if ((searchPos + width >> 0) > (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1])) {
				searchPos = searchPos + (width) >> 0;
			} else if ((searchPos + 1 >> 0) > (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1])) {
				searchPos = searchPos + (1) >> 0;
			} else {
				searchPos = (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
			}
		$s = 1; continue;
		case 2:
		if (!(bsrc === sliceType$4.nil)) {
			buf = $appendSlice(buf, $subslice(bsrc, lastMatchEnd));
		} else {
			buf = $appendSlice(buf, $substring(src, lastMatchEnd));
		}
		$s = -1; return buf;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.replaceAll, $c: true, $r, _r, _r$1, _tuple, _tuple$1, a, bsrc, buf, dstCap, endPos, lastMatchEnd, nmatch, re, repl, searchPos, src, width, $s};return $f;
	};
	Regexp.prototype.replaceAll = function(bsrc, src, nmatch, repl) { return this.$val.replaceAll(bsrc, src, nmatch, repl); };
	Regexp.ptr.prototype.ReplaceAll = function(src, repl) {
		var {_r, b, n, re, repl, src, srepl, $s, $r, $c} = $restore(this, {src, repl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = [re];
		repl = [repl];
		src = [src];
		srepl = [srepl];
		re[0] = this;
		n = 2;
		if (bytes.IndexByte(repl[0], 36) >= 0) {
			n = $imul(2, ((re[0].numSubexp + 1 >> 0)));
		}
		srepl[0] = "";
		_r = re[0].replaceAll(src[0], "", n, (function(re, repl, src, srepl) { return function(dst, match) {
			var dst, match;
			if (!((srepl[0].length === repl[0].$length))) {
				srepl[0] = ($bytesToString(repl[0]));
			}
			return re[0].expand(dst, srepl[0], src[0], "", match);
		}; })(re, repl, src, srepl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.ReplaceAll, $c: true, $r, _r, b, n, re, repl, src, srepl, $s};return $f;
	};
	Regexp.prototype.ReplaceAll = function(src, repl) { return this.$val.ReplaceAll(src, repl); };
	Regexp.ptr.prototype.ReplaceAllLiteral = function(src, repl) {
		var {$24r, _r, re, repl, src, $s, $r, $c} = $restore(this, {src, repl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		repl = [repl];
		re = this;
		_r = re.replaceAll(src, "", 2, (function(repl) { return function(dst, match) {
			var dst, match;
			return $appendSlice(dst, repl[0]);
		}; })(repl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.ReplaceAllLiteral, $c: true, $r, $24r, _r, re, repl, src, $s};return $f;
	};
	Regexp.prototype.ReplaceAllLiteral = function(src, repl) { return this.$val.ReplaceAllLiteral(src, repl); };
	Regexp.ptr.prototype.ReplaceAllFunc = function(src, repl) {
		var {$24r, _r, re, repl, src, $s, $r, $c} = $restore(this, {src, repl});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		repl = [repl];
		src = [src];
		re = this;
		_r = re.replaceAll(src[0], "", 2, (function(repl, src) { return function $b(dst, match) {
			var {$24r, _arg, _arg$1, _r, dst, match, $s, $r, $c} = $restore(this, {dst, match});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_arg = dst;
			_r = repl[0]($subslice(src[0], (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			$24r = $appendSlice(_arg, _arg$1);
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _arg, _arg$1, _r, dst, match, $s};return $f;
		}; })(repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = _r;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.ReplaceAllFunc, $c: true, $r, $24r, _r, re, repl, src, $s};return $f;
	};
	Regexp.prototype.ReplaceAllFunc = function(src, repl) { return this.$val.ReplaceAllFunc(src, repl); };
	special = function(b) {
		var _q, _r, b, x, y;
		return b < 128 && !(((((x = (_r = b % 16, _r === _r ? _r : $throwRuntimeError("integer divide by zero")), ((x < 0 || x >= specialBytes.length) ? ($throwRuntimeError("index out of range"), undefined) : specialBytes[x])) & (((y = ((_q = b / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) << 24 >>> 24))) >>> 0) === 0));
	};
	init = function() {
		var _i, _index, _q, _r, _ref, b, y;
		_ref = (new sliceType$4($stringToBytes("\\.+*?()|[]{}^$")));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_index = (_r = b % 16, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			((_index < 0 || _index >= specialBytes.length) ? ($throwRuntimeError("index out of range"), undefined) : specialBytes[_index] = ((((_index < 0 || _index >= specialBytes.length) ? ($throwRuntimeError("index out of range"), undefined) : specialBytes[_index]) | (((y = ((_q = b / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) << 24 >>> 24))) >>> 0));
			_i++;
		}
	};
	QuoteMeta = function(s) {
		var b, i, j, s;
		i = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (special(s.charCodeAt(i))) {
				break;
			}
			i = i + (1) >> 0;
		}
		if (i >= s.length) {
			return s;
		}
		b = $makeSlice(sliceType$4, (($imul(2, s.length)) - i >> 0));
		$copyString(b, $substring(s, 0, i));
		j = i;
		while (true) {
			if (!(i < s.length)) { break; }
			if (special(s.charCodeAt(i))) {
				((j < 0 || j >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + j] = 92);
				j = j + (1) >> 0;
			}
			((j < 0 || j >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + j] = s.charCodeAt(i));
			j = j + (1) >> 0;
			i = i + (1) >> 0;
		}
		return ($bytesToString($subslice(b, 0, j)));
	};
	$pkg.QuoteMeta = QuoteMeta;
	Regexp.ptr.prototype.pad = function(a) {
		var a, n, re;
		re = this;
		if (a === sliceType$7.nil) {
			return sliceType$7.nil;
		}
		n = $imul(((1 + re.numSubexp >> 0)), 2);
		while (true) {
			if (!(a.$length < n)) { break; }
			a = $append(a, -1);
		}
		return a;
	};
	Regexp.prototype.pad = function(a) { return this.$val.pad(a); };
	Regexp.ptr.prototype.allMatches = function(s, b, n, deliver) {
		var {_r, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, accept, b, deliver, end, i, ib, is, matches, n, pos, prevMatchEnd, re, s, width, $s, $r, $c} = $restore(this, {s, b, n, deliver});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		end = 0;
		if (b === sliceType$4.nil) {
			end = s.length;
		} else {
			end = b.$length;
		}
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = -1;
		pos = _tmp;
		i = _tmp$1;
		prevMatchEnd = _tmp$2;
		/* while (true) { */ case 1:
			/* if (!(i < n && pos <= end)) { break; } */ if(!(i < n && pos <= end)) { $s = 2; continue; }
			_r = re.doExecute($ifaceNil, b, s, pos, re.prog.NumCap, sliceType$7.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			matches = _r;
			if (matches.$length === 0) {
				/* break; */ $s = 2; continue;
			}
			accept = true;
			if ((1 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 1]) === pos) {
				if ((0 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 0]) === prevMatchEnd) {
					accept = false;
				}
				width = 0;
				if (b === sliceType$4.nil) {
					is = new inputString.ptr(s);
					_tuple = is.step(pos);
					width = _tuple[1];
				} else {
					ib = new inputBytes.ptr(b);
					_tuple$1 = ib.step(pos);
					width = _tuple$1[1];
				}
				if (width > 0) {
					pos = pos + (width) >> 0;
				} else {
					pos = end + 1 >> 0;
				}
			} else {
				pos = (1 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 1]);
			}
			prevMatchEnd = (1 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 1]);
			/* */ if (accept) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (accept) { */ case 4:
				$r = deliver(re.pad(matches)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
			/* } */ case 5:
		$s = 1; continue;
		case 2:
		$s = -1; return;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.allMatches, $c: true, $r, _r, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, accept, b, deliver, end, i, ib, is, matches, n, pos, prevMatchEnd, re, s, width, $s};return $f;
	};
	Regexp.prototype.allMatches = function(s, b, n, deliver) { return this.$val.allMatches(s, b, n, deliver); };
	Regexp.ptr.prototype.Find = function(b) {
		var {_r, a, b, dstCap, re, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		dstCap = arrayType$3.zero();
		_r = re.doExecute($ifaceNil, b, "", 0, 2, $subslice(new sliceType$7(dstCap), 0, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$7.nil) {
			$s = -1; return sliceType$4.nil;
		}
		$s = -1; return $subslice(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.Find, $c: true, $r, _r, a, b, dstCap, re, $s};return $f;
	};
	Regexp.prototype.Find = function(b) { return this.$val.Find(b); };
	Regexp.ptr.prototype.FindIndex = function(b) {
		var {_r, a, b, loc, re, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		loc = sliceType$7.nil;
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, 2, sliceType$7.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$7.nil) {
			loc = sliceType$7.nil;
			$s = -1; return loc;
		}
		loc = $subslice(a, 0, 2);
		$s = -1; return loc;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindIndex, $c: true, $r, _r, a, b, loc, re, $s};return $f;
	};
	Regexp.prototype.FindIndex = function(b) { return this.$val.FindIndex(b); };
	Regexp.ptr.prototype.FindString = function(s) {
		var {_r, a, dstCap, re, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		dstCap = arrayType$3.zero();
		_r = re.doExecute($ifaceNil, sliceType$4.nil, s, 0, 2, $subslice(new sliceType$7(dstCap), 0, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$7.nil) {
			$s = -1; return "";
		}
		$s = -1; return $substring(s, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindString, $c: true, $r, _r, a, dstCap, re, s, $s};return $f;
	};
	Regexp.prototype.FindString = function(s) { return this.$val.FindString(s); };
	Regexp.ptr.prototype.FindStringIndex = function(s) {
		var {_r, a, loc, re, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		loc = sliceType$7.nil;
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$4.nil, s, 0, 2, sliceType$7.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$7.nil) {
			loc = sliceType$7.nil;
			$s = -1; return loc;
		}
		loc = $subslice(a, 0, 2);
		$s = -1; return loc;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindStringIndex, $c: true, $r, _r, a, loc, re, s, $s};return $f;
	};
	Regexp.prototype.FindStringIndex = function(s) { return this.$val.FindStringIndex(s); };
	Regexp.ptr.prototype.FindReaderIndex = function(r) {
		var {_r, a, loc, r, re, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		loc = sliceType$7.nil;
		re = this;
		_r = re.doExecute(r, sliceType$4.nil, "", 0, 2, sliceType$7.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$7.nil) {
			loc = sliceType$7.nil;
			$s = -1; return loc;
		}
		loc = $subslice(a, 0, 2);
		$s = -1; return loc;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindReaderIndex, $c: true, $r, _r, a, loc, r, re, $s};return $f;
	};
	Regexp.prototype.FindReaderIndex = function(r) { return this.$val.FindReaderIndex(r); };
	Regexp.ptr.prototype.FindSubmatch = function(b) {
		var {_i, _r, _ref, a, b, dstCap, i, re, ret, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		dstCap = arrayType$4.zero();
		_r = re.doExecute($ifaceNil, b, "", 0, re.prog.NumCap, $subslice(new sliceType$7(dstCap), 0, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$7.nil) {
			$s = -1; return sliceType$8.nil;
		}
		ret = $makeSlice(sliceType$8, (1 + re.numSubexp >> 0));
		_ref = ret;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (($imul(2, i)) < a.$length && (x = $imul(2, i), ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x])) >= 0) {
				((i < 0 || i >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i] = $subslice(b, (x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$1])), (x$2 = ($imul(2, i)) + 1 >> 0, ((x$2 < 0 || x$2 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$2])), (x$3 = ($imul(2, i)) + 1 >> 0, ((x$3 < 0 || x$3 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$3]))));
			}
			_i++;
		}
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindSubmatch, $c: true, $r, _i, _r, _ref, a, b, dstCap, i, re, ret, x, x$1, x$2, x$3, $s};return $f;
	};
	Regexp.prototype.FindSubmatch = function(b) { return this.$val.FindSubmatch(b); };
	Regexp.ptr.prototype.Expand = function(dst, template, src, match) {
		var dst, match, re, src, template;
		re = this;
		return re.expand(dst, ($bytesToString(template)), src, "", match);
	};
	Regexp.prototype.Expand = function(dst, template, src, match) { return this.$val.Expand(dst, template, src, match); };
	Regexp.ptr.prototype.ExpandString = function(dst, template, src, match) {
		var dst, match, re, src, template;
		re = this;
		return re.expand(dst, template, sliceType$4.nil, src, match);
	};
	Regexp.prototype.ExpandString = function(dst, template, src, match) { return this.$val.ExpandString(dst, template, src, match); };
	Regexp.ptr.prototype.expand = function(dst, template, bsrc, src, match) {
		var _i, _ref, _tuple, _tuple$1, after, before, bsrc, dst, i, match, name, namei, num, ok, re, rest, src, template, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		re = this;
		while (true) {
			if (!(template.length > 0)) { break; }
			_tuple = strings.Cut(template, "$");
			before = _tuple[0];
			after = _tuple[1];
			ok = _tuple[2];
			if (!ok) {
				break;
			}
			dst = $appendSlice(dst, before);
			template = after;
			if (!(template === "") && (template.charCodeAt(0) === 36)) {
				dst = $append(dst, 36);
				template = $substring(template, 1);
				continue;
			}
			_tuple$1 = extract(template);
			name = _tuple$1[0];
			num = _tuple$1[1];
			rest = _tuple$1[2];
			ok = _tuple$1[3];
			if (!ok) {
				dst = $append(dst, 36);
				continue;
			}
			template = rest;
			if (num >= 0) {
				if ((($imul(2, num)) + 1 >> 0) < match.$length && (x = $imul(2, num), ((x < 0 || x >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x])) >= 0) {
					if (!(bsrc === sliceType$4.nil)) {
						dst = $appendSlice(dst, $subslice(bsrc, (x$1 = $imul(2, num), ((x$1 < 0 || x$1 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, num)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$2]))));
					} else {
						dst = $appendSlice(dst, $substring(src, (x$3 = $imul(2, num), ((x$3 < 0 || x$3 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$3])), (x$4 = ($imul(2, num)) + 1 >> 0, ((x$4 < 0 || x$4 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$4]))));
					}
				}
			} else {
				_ref = re.subexpNames;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					namei = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (name === namei && (($imul(2, i)) + 1 >> 0) < match.$length && (x$5 = $imul(2, i), ((x$5 < 0 || x$5 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$5])) >= 0) {
						if (!(bsrc === sliceType$4.nil)) {
							dst = $appendSlice(dst, $subslice(bsrc, (x$6 = $imul(2, i), ((x$6 < 0 || x$6 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$6])), (x$7 = ($imul(2, i)) + 1 >> 0, ((x$7 < 0 || x$7 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$7]))));
						} else {
							dst = $appendSlice(dst, $substring(src, (x$8 = $imul(2, i), ((x$8 < 0 || x$8 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$8])), (x$9 = ($imul(2, i)) + 1 >> 0, ((x$9 < 0 || x$9 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$9]))));
						}
						break;
					}
					_i++;
				}
			}
		}
		dst = $appendSlice(dst, template);
		return dst;
	};
	Regexp.prototype.expand = function(dst, template, bsrc, src, match) { return this.$val.expand(dst, template, bsrc, src, match); };
	extract = function(str) {
		var _tuple, brace, i, i$1, name, num, ok, rest, rune, size, str;
		name = "";
		num = 0;
		rest = "";
		ok = false;
		if (str === "") {
			return [name, num, rest, ok];
		}
		brace = false;
		if (str.charCodeAt(0) === 123) {
			brace = true;
			str = $substring(str, 1);
		}
		i = 0;
		while (true) {
			if (!(i < str.length)) { break; }
			_tuple = utf8.DecodeRuneInString($substring(str, i));
			rune = _tuple[0];
			size = _tuple[1];
			if (!unicode.IsLetter(rune) && !unicode.IsDigit(rune) && !((rune === 95))) {
				break;
			}
			i = i + (size) >> 0;
		}
		if (i === 0) {
			return [name, num, rest, ok];
		}
		name = $substring(str, 0, i);
		if (brace) {
			if (i >= str.length || !((str.charCodeAt(i) === 125))) {
				return [name, num, rest, ok];
			}
			i = i + (1) >> 0;
		}
		num = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < name.length)) { break; }
			if (name.charCodeAt(i$1) < 48 || 57 < name.charCodeAt(i$1) || num >= 100000000) {
				num = -1;
				break;
			}
			num = (($imul(num, 10)) + ((name.charCodeAt(i$1) >> 0)) >> 0) - 48 >> 0;
			i$1 = i$1 + (1) >> 0;
		}
		if ((name.charCodeAt(0) === 48) && name.length > 1) {
			num = -1;
		}
		rest = $substring(str, i);
		ok = true;
		return [name, num, rest, ok];
	};
	Regexp.ptr.prototype.FindSubmatchIndex = function(b) {
		var {$24r, _r, _r$1, b, re, $s, $r, $c} = $restore(this, {b});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, re.prog.NumCap, sliceType$7.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindSubmatchIndex, $c: true, $r, $24r, _r, _r$1, b, re, $s};return $f;
	};
	Regexp.prototype.FindSubmatchIndex = function(b) { return this.$val.FindSubmatchIndex(b); };
	Regexp.ptr.prototype.FindStringSubmatch = function(s) {
		var {_i, _r, _ref, a, dstCap, i, re, ret, s, x, x$1, x$2, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		dstCap = arrayType$4.zero();
		_r = re.doExecute($ifaceNil, sliceType$4.nil, s, 0, re.prog.NumCap, $subslice(new sliceType$7(dstCap), 0, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$7.nil) {
			$s = -1; return sliceType$3.nil;
		}
		ret = $makeSlice(sliceType$3, (1 + re.numSubexp >> 0));
		_ref = ret;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (($imul(2, i)) < a.$length && (x = $imul(2, i), ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x])) >= 0) {
				((i < 0 || i >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i] = $substring(s, (x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$1])), (x$2 = ($imul(2, i)) + 1 >> 0, ((x$2 < 0 || x$2 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$2]))));
			}
			_i++;
		}
		$s = -1; return ret;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindStringSubmatch, $c: true, $r, _i, _r, _ref, a, dstCap, i, re, ret, s, x, x$1, x$2, $s};return $f;
	};
	Regexp.prototype.FindStringSubmatch = function(s) { return this.$val.FindStringSubmatch(s); };
	Regexp.ptr.prototype.FindStringSubmatchIndex = function(s) {
		var {$24r, _r, _r$1, re, s, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$4.nil, s, 0, re.prog.NumCap, sliceType$7.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindStringSubmatchIndex, $c: true, $r, $24r, _r, _r$1, re, s, $s};return $f;
	};
	Regexp.prototype.FindStringSubmatchIndex = function(s) { return this.$val.FindStringSubmatchIndex(s); };
	Regexp.ptr.prototype.FindReaderSubmatchIndex = function(r) {
		var {$24r, _r, _r$1, r, re, $s, $r, $c} = $restore(this, {r});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute(r, sliceType$4.nil, "", 0, re.prog.NumCap, sliceType$7.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$24r = _r$1;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindReaderSubmatchIndex, $c: true, $r, $24r, _r, _r$1, r, re, $s};return $f;
	};
	Regexp.prototype.FindReaderSubmatchIndex = function(r) { return this.$val.FindReaderSubmatchIndex(r); };
	Regexp.ptr.prototype.FindAll = function(b, n) {
		var {b, n, re, result, $s, $r, $c} = $restore(this, {b, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = [b];
		result = [result];
		re = this;
		if (n < 0) {
			n = b[0].$length + 1 >> 0;
		}
		result[0] = sliceType$8.nil;
		$r = re.allMatches("", b[0], n, (function(b, result) { return function(match) {
			var match;
			if (result[0] === sliceType$8.nil) {
				result[0] = $makeSlice(sliceType$8, 0, 10);
			}
			result[0] = $append(result[0], $subslice(b[0], (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1])));
		}; })(b, result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return result[0];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindAll, $c: true, $r, b, n, re, result, $s};return $f;
	};
	Regexp.prototype.FindAll = function(b, n) { return this.$val.FindAll(b, n); };
	Regexp.ptr.prototype.FindAllIndex = function(b, n) {
		var {b, n, re, result, $s, $r, $c} = $restore(this, {b, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = b.$length + 1 >> 0;
		}
		result[0] = sliceType$9.nil;
		$r = re.allMatches("", b, n, (function(result) { return function(match) {
			var match;
			if (result[0] === sliceType$9.nil) {
				result[0] = $makeSlice(sliceType$9, 0, 10);
			}
			result[0] = $append(result[0], $subslice(match, 0, 2));
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return result[0];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindAllIndex, $c: true, $r, b, n, re, result, $s};return $f;
	};
	Regexp.prototype.FindAllIndex = function(b, n) { return this.$val.FindAllIndex(b, n); };
	Regexp.ptr.prototype.FindAllString = function(s, n) {
		var {n, re, result, s, $s, $r, $c} = $restore(this, {s, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = [result];
		s = [s];
		re = this;
		if (n < 0) {
			n = s[0].length + 1 >> 0;
		}
		result[0] = sliceType$3.nil;
		$r = re.allMatches(s[0], sliceType$4.nil, n, (function(result, s) { return function(match) {
			var match;
			if (result[0] === sliceType$3.nil) {
				result[0] = $makeSlice(sliceType$3, 0, 10);
			}
			result[0] = $append(result[0], $substring(s[0], (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1])));
		}; })(result, s)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return result[0];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindAllString, $c: true, $r, n, re, result, s, $s};return $f;
	};
	Regexp.prototype.FindAllString = function(s, n) { return this.$val.FindAllString(s, n); };
	Regexp.ptr.prototype.FindAllStringIndex = function(s, n) {
		var {n, re, result, s, $s, $r, $c} = $restore(this, {s, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result[0] = sliceType$9.nil;
		$r = re.allMatches(s, sliceType$4.nil, n, (function(result) { return function(match) {
			var match;
			if (result[0] === sliceType$9.nil) {
				result[0] = $makeSlice(sliceType$9, 0, 10);
			}
			result[0] = $append(result[0], $subslice(match, 0, 2));
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return result[0];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindAllStringIndex, $c: true, $r, n, re, result, s, $s};return $f;
	};
	Regexp.prototype.FindAllStringIndex = function(s, n) { return this.$val.FindAllStringIndex(s, n); };
	Regexp.ptr.prototype.FindAllSubmatch = function(b, n) {
		var {b, n, re, result, $s, $r, $c} = $restore(this, {b, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		b = [b];
		result = [result];
		re = this;
		if (n < 0) {
			n = b[0].$length + 1 >> 0;
		}
		result[0] = sliceType$10.nil;
		$r = re.allMatches("", b[0], n, (function(b, result) { return function(match) {
			var _i, _q, _ref, j, match, slice, x, x$1, x$2, x$3;
			if (result[0] === sliceType$10.nil) {
				result[0] = $makeSlice(sliceType$10, 0, 10);
			}
			slice = $makeSlice(sliceType$8, (_q = match.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = slice;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				if ((x = $imul(2, j), ((x < 0 || x >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x])) >= 0) {
					((j < 0 || j >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + j] = $subslice(b[0], (x$1 = $imul(2, j), ((x$1 < 0 || x$1 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, j)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$2])), (x$3 = ($imul(2, j)) + 1 >> 0, ((x$3 < 0 || x$3 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$3]))));
				}
				_i++;
			}
			result[0] = $append(result[0], slice);
		}; })(b, result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return result[0];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindAllSubmatch, $c: true, $r, b, n, re, result, $s};return $f;
	};
	Regexp.prototype.FindAllSubmatch = function(b, n) { return this.$val.FindAllSubmatch(b, n); };
	Regexp.ptr.prototype.FindAllSubmatchIndex = function(b, n) {
		var {b, n, re, result, $s, $r, $c} = $restore(this, {b, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = b.$length + 1 >> 0;
		}
		result[0] = sliceType$9.nil;
		$r = re.allMatches("", b, n, (function(result) { return function(match) {
			var match;
			if (result[0] === sliceType$9.nil) {
				result[0] = $makeSlice(sliceType$9, 0, 10);
			}
			result[0] = $append(result[0], match);
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return result[0];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindAllSubmatchIndex, $c: true, $r, b, n, re, result, $s};return $f;
	};
	Regexp.prototype.FindAllSubmatchIndex = function(b, n) { return this.$val.FindAllSubmatchIndex(b, n); };
	Regexp.ptr.prototype.FindAllStringSubmatch = function(s, n) {
		var {n, re, result, s, $s, $r, $c} = $restore(this, {s, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = [result];
		s = [s];
		re = this;
		if (n < 0) {
			n = s[0].length + 1 >> 0;
		}
		result[0] = sliceType$11.nil;
		$r = re.allMatches(s[0], sliceType$4.nil, n, (function(result, s) { return function(match) {
			var _i, _q, _ref, j, match, slice, x, x$1, x$2;
			if (result[0] === sliceType$11.nil) {
				result[0] = $makeSlice(sliceType$11, 0, 10);
			}
			slice = $makeSlice(sliceType$3, (_q = match.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = slice;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				if ((x = $imul(2, j), ((x < 0 || x >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x])) >= 0) {
					((j < 0 || j >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + j] = $substring(s[0], (x$1 = $imul(2, j), ((x$1 < 0 || x$1 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, j)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$2]))));
				}
				_i++;
			}
			result[0] = $append(result[0], slice);
		}; })(result, s)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return result[0];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindAllStringSubmatch, $c: true, $r, n, re, result, s, $s};return $f;
	};
	Regexp.prototype.FindAllStringSubmatch = function(s, n) { return this.$val.FindAllStringSubmatch(s, n); };
	Regexp.ptr.prototype.FindAllStringSubmatchIndex = function(s, n) {
		var {n, re, result, s, $s, $r, $c} = $restore(this, {s, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result[0] = sliceType$9.nil;
		$r = re.allMatches(s, sliceType$4.nil, n, (function(result) { return function(match) {
			var match;
			if (result[0] === sliceType$9.nil) {
				result[0] = $makeSlice(sliceType$9, 0, 10);
			}
			result[0] = $append(result[0], match);
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return result[0];
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.FindAllStringSubmatchIndex, $c: true, $r, n, re, result, s, $s};return $f;
	};
	Regexp.prototype.FindAllStringSubmatchIndex = function(s, n) { return this.$val.FindAllStringSubmatchIndex(s, n); };
	Regexp.ptr.prototype.Split = function(s, n) {
		var {_i, _r, _ref, beg, end, match, matches, n, re, s, strings$1, $s, $r, $c} = $restore(this, {s, n});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		if (n === 0) {
			$s = -1; return sliceType$3.nil;
		}
		if (re.expr.length > 0 && (s.length === 0)) {
			$s = -1; return new sliceType$3([""]);
		}
		_r = re.FindAllStringIndex(s, n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		matches = _r;
		strings$1 = $makeSlice(sliceType$3, 0, matches.$length);
		beg = 0;
		end = 0;
		_ref = matches;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			match = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (n > 0 && strings$1.$length >= (n - 1 >> 0)) {
				break;
			}
			end = (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]);
			if (!(((1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]) === 0))) {
				strings$1 = $append(strings$1, $substring(s, beg, end));
			}
			beg = (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]);
			_i++;
		}
		if (!((end === s.length))) {
			strings$1 = $append(strings$1, $substring(s, beg));
		}
		$s = -1; return strings$1;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.Split, $c: true, $r, _i, _r, _ref, beg, end, match, matches, n, re, s, strings$1, $s};return $f;
	};
	Regexp.prototype.Split = function(s, n) { return this.$val.Split(s, n); };
	onePassPrefix = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, buf, complete, i, p, pc, prefix, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		prefix = "";
		complete = false;
		pc = 0;
		i = (x = p.Inst, x$1 = p.Start, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (!((i.Op === 3)) || ((((((i.Arg << 24 >>> 24))) & 4) >>> 0) === 0)) {
			_tmp = "";
			_tmp$1 = i.Op === 4;
			_tmp$2 = ((p.Start >>> 0));
			prefix = _tmp;
			complete = _tmp$1;
			pc = _tmp$2;
			return [prefix, complete, pc];
		}
		pc = i.Out;
		i = (x$2 = p.Inst, ((pc < 0 || pc >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + pc]));
		while (true) {
			if (!(i.Op === 6)) { break; }
			pc = i.Out;
			i = (x$3 = p.Inst, ((pc < 0 || pc >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pc]));
		}
		if (!((iop(i) === 7)) || !((i.Rune.$length === 1))) {
			_tmp$3 = "";
			_tmp$4 = i.Op === 4;
			_tmp$5 = ((p.Start >>> 0));
			prefix = _tmp$3;
			complete = _tmp$4;
			pc = _tmp$5;
			return [prefix, complete, pc];
		}
		buf = new strings.Builder.ptr(ptrType$5.nil, sliceType$4.nil);
		while (true) {
			if (!((iop(i) === 7) && (i.Rune.$length === 1) && (((((i.Arg << 16 >>> 16)) & 1) >>> 0) === 0) && !(((x$4 = i.Rune, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])) === 65533)))) { break; }
			buf.WriteRune((x$5 = i.Rune, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0])));
			_tmp$6 = i.Out;
			_tmp$7 = (x$6 = p.Inst, x$7 = i.Out, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
			pc = _tmp$6;
			i = _tmp$7;
		}
		if ((i.Op === 3) && !((((((i.Arg << 24 >>> 24)) & 8) >>> 0) === 0)) && ((x$8 = p.Inst, x$9 = i.Out, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])).Op === 4)) {
			complete = true;
		}
		_tmp$8 = buf.String();
		_tmp$9 = complete;
		_tmp$10 = pc;
		prefix = _tmp$8;
		complete = _tmp$9;
		pc = _tmp$10;
		return [prefix, complete, pc];
	};
	onePassNext = function(i, r) {
		var i, next, r, x;
		next = i.Inst.MatchRunePos(r);
		if (next >= 0) {
			return (x = i.Next, ((next < 0 || next >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + next]));
		}
		if (i.Inst.Op === 1) {
			return i.Inst.Out;
		}
		return 0;
	};
	iop = function(i) {
		var _1, i, op;
		op = i.Op;
		_1 = op;
		if ((_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			op = 7;
		}
		return op;
	};
	queueOnePass.ptr.prototype.empty = function() {
		var q;
		q = this;
		return q.nextIndex >= q.size;
	};
	queueOnePass.prototype.empty = function() { return this.$val.empty(); };
	queueOnePass.ptr.prototype.next = function() {
		var n, q, x, x$1;
		n = 0;
		q = this;
		n = (x = q.dense, x$1 = q.nextIndex, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		q.nextIndex = q.nextIndex + (1) >>> 0;
		return n;
	};
	queueOnePass.prototype.next = function() { return this.$val.next(); };
	queueOnePass.ptr.prototype.clear = function() {
		var q;
		q = this;
		q.size = 0;
		q.nextIndex = 0;
	};
	queueOnePass.prototype.clear = function() { return this.$val.clear(); };
	queueOnePass.ptr.prototype.contains = function(u) {
		var q, u, x, x$1, x$2, x$3;
		q = this;
		if (u >= ((q.sparse.$length >>> 0))) {
			return false;
		}
		return (x = q.sparse, ((u < 0 || u >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + u])) < q.size && ((x$1 = q.dense, x$2 = (x$3 = q.sparse, ((u < 0 || u >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + u])), ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === u);
	};
	queueOnePass.prototype.contains = function(u) { return this.$val.contains(u); };
	queueOnePass.ptr.prototype.insert = function(u) {
		var q, u;
		q = this;
		if (!q.contains(u)) {
			q.insertNew(u);
		}
	};
	queueOnePass.prototype.insert = function(u) { return this.$val.insert(u); };
	queueOnePass.ptr.prototype.insertNew = function(u) {
		var q, u, x, x$1, x$2;
		q = this;
		if (u >= ((q.sparse.$length >>> 0))) {
			return;
		}
		(x = q.sparse, ((u < 0 || u >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + u] = q.size));
		(x$1 = q.dense, x$2 = q.size, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = u));
		q.size = q.size + (1) >>> 0;
	};
	queueOnePass.prototype.insertNew = function(u) { return this.$val.insertNew(u); };
	newQueue = function(size) {
		var q, size;
		q = ptrType$6.nil;
		q = new queueOnePass.ptr($makeSlice(sliceType$2, size), $makeSlice(sliceType$2, size), 0, 0);
		return q;
	};
	mergeRuneSets = function(leftRunes, rightRunes, leftPC, rightPC) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, extend, ix, leftLen, leftPC, leftRunes, lx, merged, next, ok, rightLen, rightPC, rightRunes, rx, x, x$1, $s, $deferred, $r, $c} = $restore(this, {leftRunes, rightRunes, leftPC, rightPC});
		/* */ $s = $s || 0; var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $curGoroutine.deferStack.push($deferred);
		ix = [ix];
		lx = [lx];
		merged = [merged];
		next = [next];
		ok = [ok];
		rx = [rx];
		leftLen = leftRunes.$get().$length;
		rightLen = rightRunes.$get().$length;
		if (!(((leftLen & 1) === 0)) || !(((rightLen & 1) === 0))) {
			$panic(new $String("mergeRuneSets odd length []rune"));
		}
		_tmp = 0;
		_tmp$1 = 0;
		lx[0] = _tmp;
		rx[0] = _tmp$1;
		merged[0] = $makeSlice(sliceType$1, 0);
		next[0] = $makeSlice(sliceType$2, 0);
		ok[0] = true;
		$deferred.push([(function(ix, lx, merged, next, ok, rx) { return function() {
			if (!ok[0]) {
				merged[0] = sliceType$1.nil;
				next[0] = sliceType$2.nil;
			}
		}; })(ix, lx, merged, next, ok, rx), []]);
		ix[0] = -1;
		extend = (function(ix, lx, merged, next, ok, rx) { return function(newLow, newArray, pc) {
			var newArray, newLow, pc, x, x$1, x$2, x$3, x$4, x$5;
			if (ix[0] > 0 && (x = newArray.$get(), x$1 = newLow.$get(), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) <= ((ix[0] < 0 || ix[0] >= merged[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : merged[0].$array[merged[0].$offset + ix[0]])) {
				return false;
			}
			merged[0] = $append(merged[0], (x$2 = newArray.$get(), x$3 = newLow.$get(), ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])), (x$4 = newArray.$get(), x$5 = newLow.$get() + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])));
			newLow.$set(newLow.$get() + (2) >> 0);
			ix[0] = ix[0] + (2) >> 0;
			next[0] = $append(next[0], pc);
			return true;
		}; })(ix, lx, merged, next, ok, rx);
		/* while (true) { */ case 1:
			/* if (!(lx[0] < leftLen || rx[0] < rightLen)) { break; } */ if(!(lx[0] < leftLen || rx[0] < rightLen)) { $s = 2; continue; }
				/* */ if (rx[0] >= rightLen) { $s = 4; continue; }
				/* */ if (lx[0] >= leftLen) { $s = 5; continue; }
				/* */ if ((x = rightRunes.$get(), ((rx[0] < 0 || rx[0] >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + rx[0]])) < (x$1 = leftRunes.$get(), ((lx[0] < 0 || lx[0] >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + lx[0]]))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (rx[0] >= rightLen) { */ case 4:
					_r = extend((lx.$ptr || (lx.$ptr = new ptrType$7(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, lx))), leftRunes, leftPC); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					ok[0] = _r;
					$s = 8; continue;
				/* } else if (lx[0] >= leftLen) { */ case 5:
					_r$1 = extend((rx.$ptr || (rx.$ptr = new ptrType$7(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, rx))), rightRunes, rightPC); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					ok[0] = _r$1;
					$s = 8; continue;
				/* } else if ((x = rightRunes.$get(), ((rx[0] < 0 || rx[0] >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + rx[0]])) < (x$1 = leftRunes.$get(), ((lx[0] < 0 || lx[0] >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + lx[0]]))) { */ case 6:
					_r$2 = extend((rx.$ptr || (rx.$ptr = new ptrType$7(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, rx))), rightRunes, rightPC); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					ok[0] = _r$2;
					$s = 8; continue;
				/* } else { */ case 7:
					_r$3 = extend((lx.$ptr || (lx.$ptr = new ptrType$7(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, lx))), leftRunes, leftPC); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ok[0] = _r$3;
				/* } */ case 8:
			case 3:
			/* */ if (!ok[0]) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!ok[0]) { */ case 13:
				$24r = [noRune, noNext];
				$s = 15; case 15: return $24r;
			/* } */ case 14:
		$s = 1; continue;
		case 2:
		$24r$1 = [merged[0], next[0]];
		$s = 16; case 16: return $24r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType$1.nil, sliceType$2.nil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { var $f = {$blk: mergeRuneSets, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, extend, ix, leftLen, leftPC, leftRunes, lx, merged, next, ok, rightLen, rightPC, rightRunes, rx, x, x$1, $s, $deferred};return $f; } }
	};
	cleanupOnePass = function(prog, original) {
		var _1, _i, _ref, instOriginal, ix, original, prog, x, x$1, x$2;
		_ref = original.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ix = _i;
			instOriginal = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			_1 = instOriginal.Op;
			if ((_1 === (0)) || (_1 === (1)) || (_1 === (7))) {
			} else if ((_1 === (2)) || (_1 === (3)) || (_1 === (6)) || (_1 === (4)) || (_1 === (5))) {
				(x = prog.Inst, ((ix < 0 || ix >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ix])).Next = sliceType$2.nil;
			} else if ((_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
				(x$1 = prog.Inst, ((ix < 0 || ix >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + ix])).Next = sliceType$2.nil;
				onePassInst.copy((x$2 = prog.Inst, ((ix < 0 || ix >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ix])), new onePassInst.ptr($clone(instOriginal, syntax.Inst), sliceType$2.nil));
			}
			_i++;
		}
	};
	onePassCopy = function(prog) {
		var _1, _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, i, inst, instAlt, instOther, p, p_A_Alt, p_A_Other, p_B_Alt, p_B_Other, patch, pc, prog, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		p = new onePassProg.ptr($makeSlice(sliceType$12, prog.Inst.$length), prog.Start, prog.NumCap);
		_ref = prog.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			inst = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			onePassInst.copy((x = p.Inst, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), new onePassInst.ptr($clone(inst, syntax.Inst), sliceType$2.nil));
			_i++;
		}
		_ref$1 = p.Inst;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			pc = _i$1;
			_1 = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pc])).Inst.Op;
			if ((_1 === (0)) || (_1 === (1))) {
				p_A_Other = (x$2 = (x$3 = p.Inst, ((pc < 0 || pc >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pc])), (x$2.$ptr_Out || (x$2.$ptr_Out = new ptrType$8(function() { return this.$target.Inst.Out; }, function($v) { this.$target.Inst.Out = $v; }, x$2))));
				p_A_Alt = (x$4 = (x$5 = p.Inst, ((pc < 0 || pc >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + pc])), (x$4.$ptr_Arg || (x$4.$ptr_Arg = new ptrType$8(function() { return this.$target.Inst.Arg; }, function($v) { this.$target.Inst.Arg = $v; }, x$4))));
				instAlt = $clone((x$6 = p.Inst, x$7 = p_A_Alt.$get(), ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])), onePassInst);
				if (!((instAlt.Inst.Op === 0) || (instAlt.Inst.Op === 1))) {
					_tmp = p_A_Other;
					_tmp$1 = p_A_Alt;
					p_A_Alt = _tmp;
					p_A_Other = _tmp$1;
					onePassInst.copy(instAlt, (x$8 = p.Inst, x$9 = p_A_Alt.$get(), ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])));
					if (!((instAlt.Inst.Op === 0) || (instAlt.Inst.Op === 1))) {
						_i$1++;
						continue;
					}
				}
				instOther = $clone((x$10 = p.Inst, x$11 = p_A_Other.$get(), ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11])), onePassInst);
				if ((instOther.Inst.Op === 0) || (instOther.Inst.Op === 1)) {
					_i$1++;
					continue;
				}
				p_B_Alt = (x$12 = (x$13 = p.Inst, x$14 = p_A_Alt.$get(), ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])), (x$12.$ptr_Out || (x$12.$ptr_Out = new ptrType$8(function() { return this.$target.Inst.Out; }, function($v) { this.$target.Inst.Out = $v; }, x$12))));
				p_B_Other = (x$15 = (x$16 = p.Inst, x$17 = p_A_Alt.$get(), ((x$17 < 0 || x$17 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + x$17])), (x$15.$ptr_Arg || (x$15.$ptr_Arg = new ptrType$8(function() { return this.$target.Inst.Arg; }, function($v) { this.$target.Inst.Arg = $v; }, x$15))));
				patch = false;
				if (instAlt.Inst.Out === ((pc >>> 0))) {
					patch = true;
				} else if (instAlt.Inst.Arg === ((pc >>> 0))) {
					patch = true;
					_tmp$2 = p_B_Other;
					_tmp$3 = p_B_Alt;
					p_B_Alt = _tmp$2;
					p_B_Other = _tmp$3;
				}
				if (patch) {
					p_B_Alt.$set(p_A_Other.$get());
				}
				if (p_A_Other.$get() === p_B_Alt.$get()) {
					p_A_Alt.$set(p_B_Other.$get());
				}
			} else {
				_i$1++;
				continue;
			}
			_i$1++;
		}
		return p;
	};
	runeSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(runeSlice).prototype.Len = function() { return this.$get().Len(); };
	runeSlice.prototype.Less = function(i, j) {
		var i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
	};
	$ptrType(runeSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	runeSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(runeSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	makeOnePass = function(p) {
		var {_i, _r, _ref, check, i, instQueue, m, onePassRunes, p, pc, visitQueue, x, $s, $r, $c} = $restore(this, {p});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		check = [check];
		instQueue = [instQueue];
		onePassRunes = [onePassRunes];
		p = [p];
		visitQueue = [visitQueue];
		if (p[0].Inst.$length >= 1000) {
			$s = -1; return ptrType$2.nil;
		}
		instQueue[0] = newQueue(p[0].Inst.$length);
		visitQueue[0] = newQueue(p[0].Inst.$length);
		check[0] = $throwNilPointerError;
		onePassRunes[0] = $makeSlice(sliceType$13, p[0].Inst.$length);
		check[0] = (function(check, instQueue, onePassRunes, p, visitQueue) { return function $b(pc, m) {
			var {_1, _i, _i$1, _i$2, _i$3, _i$4, _q, _q$1, _q$2, _q$3, _q$4, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _v, i, i$1, i$2, i$3, i$4, inst, m, matchArg, matchOut, ok, pc, r0, r0$1, r1, r1$1, runes, runes$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {pc, m});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			ok = false;
			ok = true;
			inst = (x = p[0].Inst, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc]));
			if (visitQueue[0].contains(pc)) {
				$s = -1; return ok;
			}
			visitQueue[0].insert(pc);
				_1 = inst.Inst.Op;
				/* */ if ((_1 === (0)) || (_1 === (1))) { $s = 2; continue; }
				/* */ if ((_1 === (2)) || (_1 === (6))) { $s = 3; continue; }
				/* */ if (_1 === (3)) { $s = 4; continue; }
				/* */ if ((_1 === (4)) || (_1 === (5))) { $s = 5; continue; }
				/* */ if (_1 === (7)) { $s = 6; continue; }
				/* */ if (_1 === (8)) { $s = 7; continue; }
				/* */ if (_1 === (9)) { $s = 8; continue; }
				/* */ if (_1 === (10)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((_1 === (0)) || (_1 === (1))) { */ case 2:
					_r = check[0](inst.Inst.Out, m); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					if (!(_r)) { _v = false; $s = 11; continue s; }
					_r$1 = check[0](inst.Inst.Arg, m); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_v = _r$1; case 11:
					ok = _v;
					matchOut = (x$1 = inst.Inst.Out, ((x$1 < 0 || x$1 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$1]));
					matchArg = (x$2 = inst.Inst.Arg, ((x$2 < 0 || x$2 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$2]));
					if (matchOut && matchArg) {
						ok = false;
						/* break; */ $s = 1; continue;
					}
					if (matchArg) {
						_tmp = inst.Inst.Arg;
						_tmp$1 = inst.Inst.Out;
						inst.Inst.Out = _tmp;
						inst.Inst.Arg = _tmp$1;
						_tmp$2 = matchArg;
						_tmp$3 = matchOut;
						matchOut = _tmp$2;
						matchArg = _tmp$3;
					}
					if (matchOut) {
						((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = true);
						inst.Inst.Op = 1;
					}
					_r$2 = mergeRuneSets($indexPtr(onePassRunes[0].$array, onePassRunes[0].$offset + inst.Inst.Out, ptrType$9), $indexPtr(onePassRunes[0].$array, onePassRunes[0].$offset + inst.Inst.Arg, ptrType$9), inst.Inst.Out, inst.Inst.Arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple = _r$2;
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = _tuple[0]);
					inst.Next = _tuple[1];
					if (inst.Next.$length > 0 && ((x$3 = inst.Next, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) === 4294967295)) {
						ok = false;
						/* break; */ $s = 1; continue;
					}
					$s = 10; continue;
				/* } else if ((_1 === (2)) || (_1 === (6))) { */ case 3:
					_r$3 = check[0](inst.Inst.Out, m); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ok = _r$3;
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = (x$4 = inst.Inst.Out, ((x$4 < 0 || x$4 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$4])));
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType$1([]), (x$5 = inst.Inst.Out, ((x$5 < 0 || x$5 >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + x$5]))));
					inst.Next = $makeSlice(sliceType$2, ((_q = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref = inst.Next;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						(x$6 = inst.Next, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i] = inst.Inst.Out));
						_i++;
					}
					$s = 10; continue;
				/* } else if (_1 === (3)) { */ case 4:
					_r$4 = check[0](inst.Inst.Out, m); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					ok = _r$4;
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = (x$7 = inst.Inst.Out, ((x$7 < 0 || x$7 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$7])));
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType$1([]), (x$8 = inst.Inst.Out, ((x$8 < 0 || x$8 >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + x$8]))));
					inst.Next = $makeSlice(sliceType$2, ((_q$1 = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref$1 = inst.Next;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						(x$9 = inst.Next, ((i$1 < 0 || i$1 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i$1] = inst.Inst.Out));
						_i$1++;
					}
					$s = 10; continue;
				/* } else if ((_1 === (4)) || (_1 === (5))) { */ case 5:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = (inst.Inst.Op === 4));
					$s = 10; continue;
				/* } else if (_1 === (7)) { */ case 6:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = false);
					if (inst.Next.$length > 0) {
						/* break; */ $s = 1; continue;
					}
					instQueue[0].insert(inst.Inst.Out);
					if (inst.Inst.Rune.$length === 0) {
						((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = new sliceType$1([]));
						inst.Next = new sliceType$2([inst.Inst.Out]);
						/* break; */ $s = 1; continue;
					}
					runes = $makeSlice(sliceType$1, 0);
					/* */ if ((inst.Inst.Rune.$length === 1) && !((((((inst.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if ((inst.Inst.Rune.$length === 1) && !((((((inst.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { */ case 17:
						r0 = (x$10 = inst.Inst.Rune, (0 >= x$10.$length ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + 0]));
						runes = $append(runes, r0, r0);
						r1 = unicode.SimpleFold(r0);
						while (true) {
							if (!(!((r1 === r0)))) { break; }
							runes = $append(runes, r1, r1);
							r1 = unicode.SimpleFold(r1);
						}
						$r = sort.Sort(($convertSliceType(runes, runeSlice))); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 19; continue;
					/* } else { */ case 18:
						runes = $appendSlice(runes, inst.Inst.Rune);
					/* } */ case 19:
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = runes);
					inst.Next = $makeSlice(sliceType$2, ((_q$2 = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref$2 = inst.Next;
					_i$2 = 0;
					while (true) {
						if (!(_i$2 < _ref$2.$length)) { break; }
						i$2 = _i$2;
						(x$11 = inst.Next, ((i$2 < 0 || i$2 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + i$2] = inst.Inst.Out));
						_i$2++;
					}
					inst.Inst.Op = 7;
					$s = 10; continue;
				/* } else if (_1 === (8)) { */ case 7:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = false);
					if (inst.Next.$length > 0) {
						/* break; */ $s = 1; continue;
					}
					instQueue[0].insert(inst.Inst.Out);
					runes$1 = new sliceType$1([]);
					/* */ if (!((((((inst.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!((((((inst.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { */ case 21:
						r0$1 = (x$12 = inst.Inst.Rune, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0]));
						runes$1 = $append(runes$1, r0$1, r0$1);
						r1$1 = unicode.SimpleFold(r0$1);
						while (true) {
							if (!(!((r1$1 === r0$1)))) { break; }
							runes$1 = $append(runes$1, r1$1, r1$1);
							r1$1 = unicode.SimpleFold(r1$1);
						}
						$r = sort.Sort(($convertSliceType(runes$1, runeSlice))); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 23; continue;
					/* } else { */ case 22:
						runes$1 = $append(runes$1, (x$13 = inst.Inst.Rune, (0 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 0])), (x$14 = inst.Inst.Rune, (0 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 0])));
					/* } */ case 23:
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = runes$1);
					inst.Next = $makeSlice(sliceType$2, ((_q$3 = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref$3 = inst.Next;
					_i$3 = 0;
					while (true) {
						if (!(_i$3 < _ref$3.$length)) { break; }
						i$3 = _i$3;
						(x$15 = inst.Next, ((i$3 < 0 || i$3 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + i$3] = inst.Inst.Out));
						_i$3++;
					}
					inst.Inst.Op = 7;
					$s = 10; continue;
				/* } else if (_1 === (9)) { */ case 8:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = false);
					if (inst.Next.$length > 0) {
						/* break; */ $s = 1; continue;
					}
					instQueue[0].insert(inst.Inst.Out);
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType$1([]), anyRune));
					inst.Next = new sliceType$2([inst.Inst.Out]);
					$s = 10; continue;
				/* } else if (_1 === (10)) { */ case 9:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = false);
					if (inst.Next.$length > 0) {
						/* break; */ $s = 1; continue;
					}
					instQueue[0].insert(inst.Inst.Out);
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType$1([]), anyRuneNotNL));
					inst.Next = $makeSlice(sliceType$2, ((_q$4 = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref$4 = inst.Next;
					_i$4 = 0;
					while (true) {
						if (!(_i$4 < _ref$4.$length)) { break; }
						i$4 = _i$4;
						(x$16 = inst.Next, ((i$4 < 0 || i$4 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + i$4] = inst.Inst.Out));
						_i$4++;
					}
				/* } */ case 10:
			case 1:
			$s = -1; return ok;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, _1, _i, _i$1, _i$2, _i$3, _i$4, _q, _q$1, _q$2, _q$3, _q$4, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _v, i, i$1, i$2, i$3, i$4, inst, m, matchArg, matchOut, ok, pc, r0, r0$1, r1, r1$1, runes, runes$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
		}; })(check, instQueue, onePassRunes, p, visitQueue);
		instQueue[0].clear();
		instQueue[0].insert(((p[0].Start >>> 0)));
		m = $makeSlice(sliceType$14, p[0].Inst.$length);
		/* while (true) { */ case 1:
			/* if (!(!instQueue[0].empty())) { break; } */ if(!(!instQueue[0].empty())) { $s = 2; continue; }
			visitQueue[0].clear();
			pc = instQueue[0].next();
			_r = check[0](pc, m); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				p[0] = ptrType$2.nil;
				/* break; */ $s = 2; continue;
			/* } */ case 4:
		$s = 1; continue;
		case 2:
		if (!(p[0] === ptrType$2.nil)) {
			_ref = p[0].Inst;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				(x = p[0].Inst, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).Inst.Rune = ((i < 0 || i >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + i]);
				_i++;
			}
		}
		$s = -1; return p[0];
		/* */ } return; } var $f = {$blk: makeOnePass, $c: true, $r, _i, _r, _ref, check, i, instQueue, m, onePassRunes, p, pc, visitQueue, x, $s};return $f;
	};
	compileOnePass = function(prog) {
		var {_1, _i, _r, _ref, inst, opOut, p, prog, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r, $c} = $restore(this, {prog});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		p = ptrType$2.nil;
		if (prog.Start === 0) {
			p = ptrType$2.nil;
			$s = -1; return p;
		}
		if (!(((x = prog.Inst, x$1 = prog.Start, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Op === 3)) || !(((((((x$2 = prog.Inst, x$3 = prog.Start, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).Arg << 24 >>> 24)) & 4) >>> 0) === 4))) {
			p = ptrType$2.nil;
			$s = -1; return p;
		}
		_ref = prog.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inst = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			opOut = (x$4 = prog.Inst, x$5 = inst.Out, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])).Op;
			_1 = inst.Op;
			if ((_1 === (0)) || (_1 === (1))) {
				if ((opOut === 4) || ((x$6 = prog.Inst, x$7 = inst.Arg, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])).Op === 4)) {
					p = ptrType$2.nil;
					$s = -1; return p;
				}
			} else if (_1 === (3)) {
				if (opOut === 4) {
					if (((((inst.Arg << 24 >>> 24)) & 8) >>> 0) === 8) {
						_i++;
						continue;
					}
					p = ptrType$2.nil;
					$s = -1; return p;
				}
			} else if (opOut === 4) {
				p = ptrType$2.nil;
				$s = -1; return p;
			}
			_i++;
		}
		p = onePassCopy(prog);
		_r = makeOnePass(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		if (!(p === ptrType$2.nil)) {
			cleanupOnePass(p, prog);
		}
		p = p;
		$s = -1; return p;
		/* */ } return; } var $f = {$blk: compileOnePass, $c: true, $r, _1, _i, _r, _ref, inst, opOut, p, prog, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s};return $f;
	};
	inputs.ptr.prototype.newBytes = function(b) {
		var b, i;
		i = this;
		i.bytes.str = b;
		return i.bytes;
	};
	inputs.prototype.newBytes = function(b) { return this.$val.newBytes(b); };
	inputs.ptr.prototype.newString = function(s) {
		var i, s;
		i = this;
		i.string.str = s;
		return i.string;
	};
	inputs.prototype.newString = function(s) { return this.$val.newString(s); };
	inputs.ptr.prototype.newReader = function(r) {
		var i, r;
		i = this;
		i.reader.r = r;
		i.reader.atEOT = false;
		i.reader.pos = 0;
		return i.reader;
	};
	inputs.prototype.newReader = function(r) { return this.$val.newReader(r); };
	inputs.ptr.prototype.clear = function() {
		var i;
		i = this;
		if (!(i.bytes.str === sliceType$4.nil)) {
			i.bytes.str = sliceType$4.nil;
		} else if (!($interfaceIsEqual(i.reader.r, $ifaceNil))) {
			i.reader.r = $ifaceNil;
		} else {
			i.string.str = "";
		}
	};
	inputs.prototype.clear = function() { return this.$val.clear(); };
	inputs.ptr.prototype.init = function(r, b, s) {
		var b, i, r, s;
		i = this;
		if (!($interfaceIsEqual(r, $ifaceNil))) {
			return [i.newReader(r), 0];
		}
		if (!(b === sliceType$4.nil)) {
			return [i.newBytes(b), b.$length];
		}
		return [i.newString(s), s.length];
	};
	inputs.prototype.init = function(r, b, s) { return this.$val.init(r, b, s); };
	machine.ptr.prototype.init = function(ncap) {
		var _i, _ref, m, ncap, t;
		m = this;
		_ref = m.pool;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			t.cap = $subslice(t.cap, 0, ncap);
			_i++;
		}
		m.matchcap = $subslice(m.matchcap, 0, ncap);
	};
	machine.prototype.init = function(ncap) { return this.$val.init(ncap); };
	machine.ptr.prototype.alloc = function(i) {
		var i, m, n, t, x, x$1;
		m = this;
		t = ptrType$4.nil;
		n = m.pool.$length;
		if (n > 0) {
			t = (x = m.pool, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			m.pool = $subslice(m.pool, 0, (n - 1 >> 0));
		} else {
			t = new thread.ptr(ptrType$10.nil, sliceType$7.nil);
			t.cap = $makeSlice(sliceType$7, m.matchcap.$length, m.matchcap.$capacity);
		}
		t.inst = i;
		return t;
	};
	machine.prototype.alloc = function(i) { return this.$val.alloc(i); };
	newLazyFlag = function(r1, r2) {
		var r1, r2, x, x$1, x$2;
		return ((x = (x$1 = $shiftLeft64((new $Uint64(0, r1)), 32), x$2 = (new $Uint64(0, ((r2 >>> 0)))), new $Uint64(x$1.$high | x$2.$high, (x$1.$low | x$2.$low) >>> 0)), new lazyFlag(x.$high, x.$low)));
	};
	lazyFlag.prototype.match = function(op) {
		var f, op, r1, r2;
		f = this;
		if (op === 0) {
			return true;
		}
		r1 = (($shiftRightUint64(f, 32).$low >> 0));
		if (!((((op & 1) >>> 0) === 0))) {
			if (!((r1 === 10)) && r1 >= 0) {
				return false;
			}
			op = (op & ~(1)) << 24 >>> 24;
		}
		if (!((((op & 4) >>> 0) === 0))) {
			if (r1 >= 0) {
				return false;
			}
			op = (op & ~(4)) << 24 >>> 24;
		}
		if (op === 0) {
			return true;
		}
		r2 = ((f.$low >> 0));
		if (!((((op & 2) >>> 0) === 0))) {
			if (!((r2 === 10)) && r2 >= 0) {
				return false;
			}
			op = (op & ~(2)) << 24 >>> 24;
		}
		if (!((((op & 8) >>> 0) === 0))) {
			if (r2 >= 0) {
				return false;
			}
			op = (op & ~(8)) << 24 >>> 24;
		}
		if (op === 0) {
			return true;
		}
		if (!(syntax.IsWordChar(r1) === syntax.IsWordChar(r2))) {
			op = (op & ~(16)) << 24 >>> 24;
		} else {
			op = (op & ~(32)) << 24 >>> 24;
		}
		return op === 0;
	};
	$ptrType(lazyFlag).prototype.match = function(op) { return this.$get().match(op); };
	machine.ptr.prototype.match = function(i, pos) {
		var {_i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _v, advance, flag, i, i$1, m, nextq, pos, r, r1, runq, startCond, width, width1, x, x$1, $s, $r, $c} = $restore(this, {i, pos});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		flag = [flag];
		m = this;
		startCond = m.re.cond;
		if (startCond === 255) {
			$s = -1; return false;
		}
		m.matched = false;
		_ref = m.matchcap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			(x = m.matchcap, ((i$1 < 0 || i$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$1] = -1));
			_i++;
		}
		_tmp = m.q0;
		_tmp$1 = m.q1;
		runq = _tmp;
		nextq = _tmp$1;
		_tmp$2 = -1;
		_tmp$3 = -1;
		r = _tmp$2;
		r1 = _tmp$3;
		_tmp$4 = 0;
		_tmp$5 = 0;
		width = _tmp$4;
		width1 = _tmp$5;
		_r = i.step(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		width = _tuple[1];
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = i.step(pos + width >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			r1 = _tuple$1[0];
			width1 = _tuple$1[1];
		/* } */ case 3:
		flag[0] = new lazyFlag(0, 0);
		/* */ if (pos === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (pos === 0) { */ case 5:
			flag[0] = newLazyFlag(-1, r);
			$s = 7; continue;
		/* } else { */ case 6:
			_r$2 = i.context(pos); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			flag[0] = _r$2;
		/* } */ case 7:
		/* while (true) { */ case 9:
			/* */ if (runq.dense.$length === 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (runq.dense.$length === 0) { */ case 11:
				if (!((((startCond & 4) >>> 0) === 0)) && !((pos === 0))) {
					/* break; */ $s = 10; continue;
				}
				if (m.matched) {
					/* break; */ $s = 10; continue;
				}
				if (!(m.re.prefix.length > 0 && !((r1 === m.re.prefixRune)))) { _v = false; $s = 15; continue s; }
				_r$3 = i.canCheckPrefix(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v = _r$3; case 15:
				/* */ if (_v) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_v) { */ case 13:
					_r$4 = i.index(m.re, pos); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					advance = _r$4;
					if (advance < 0) {
						/* break; */ $s = 10; continue;
					}
					pos = pos + (advance) >> 0;
					_r$5 = i.step(pos); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					r = _tuple$2[0];
					width = _tuple$2[1];
					_r$6 = i.step(pos + width >> 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$3 = _r$6;
					r1 = _tuple$3[0];
					width1 = _tuple$3[1];
				/* } */ case 14:
			/* } */ case 12:
			if (!m.matched) {
				if (m.matchcap.$length > 0) {
					(x$1 = m.matchcap, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0] = pos));
				}
				m.add(runq, ((m.p.Start >>> 0)), pos, m.matchcap, (flag.$ptr || (flag.$ptr = new ptrType$11(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, flag))), ptrType$4.nil);
			}
			flag[0] = newLazyFlag(r, r1);
			m.step(runq, nextq, pos, pos + width >> 0, r, (flag.$ptr || (flag.$ptr = new ptrType$11(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, flag))));
			if (width === 0) {
				/* break; */ $s = 10; continue;
			}
			if ((m.matchcap.$length === 0) && m.matched) {
				/* break; */ $s = 10; continue;
			}
			pos = pos + (width) >> 0;
			_tmp$6 = r1;
			_tmp$7 = width1;
			r = _tmp$6;
			width = _tmp$7;
			/* */ if (!((r === -1))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!((r === -1))) { */ case 20:
				_r$7 = i.step(pos + width >> 0); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$4 = _r$7;
				r1 = _tuple$4[0];
				width1 = _tuple$4[1];
			/* } */ case 21:
			_tmp$8 = nextq;
			_tmp$9 = runq;
			runq = _tmp$8;
			nextq = _tmp$9;
		$s = 9; continue;
		case 10:
		m.clear(nextq);
		$s = -1; return m.matched;
		/* */ } return; } var $f = {$blk: machine.ptr.prototype.match, $c: true, $r, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _v, advance, flag, i, i$1, m, nextq, pos, r, r1, runq, startCond, width, width1, x, x$1, $s};return $f;
	};
	machine.prototype.match = function(i, pos) { return this.$val.match(i, pos); };
	machine.ptr.prototype.clear = function(q) {
		var _i, _ref, d, m, q;
		m = this;
		_ref = q.dense;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			if (!(d.t === ptrType$4.nil)) {
				m.pool = $append(m.pool, d.t);
			}
			_i++;
		}
		q.dense = $subslice(q.dense, 0, 0);
	};
	machine.prototype.clear = function(q) { return this.$val.clear(q); };
	machine.ptr.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) {
		var _1, _i, _ref, add, c, d, d$1, i, j, longest, m, nextCond, nextPos, nextq, pos, runq, t, x, x$1, x$2, x$3, x$4, x$5;
		m = this;
		longest = m.re.longest;
		j = 0;
		while (true) {
			if (!(j < runq.dense.$length)) { break; }
			d = (x = runq.dense, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			t = d.t;
			if (t === ptrType$4.nil) {
				j = j + (1) >> 0;
				continue;
			}
			if (longest && m.matched && t.cap.$length > 0 && (x$1 = m.matchcap, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) < (x$2 = t.cap, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]))) {
				m.pool = $append(m.pool, t);
				j = j + (1) >> 0;
				continue;
			}
			i = t.inst;
			add = false;
			_1 = i.Op;
			if (_1 === (4)) {
				if (t.cap.$length > 0 && (!longest || !m.matched || (x$3 = m.matchcap, (1 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 1])) < pos)) {
					(x$4 = t.cap, (1 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 1] = pos));
					$copySlice(m.matchcap, t.cap);
				}
				if (!longest) {
					_ref = $subslice(runq.dense, (j + 1 >> 0));
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						d$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
						if (!(d$1.t === ptrType$4.nil)) {
							m.pool = $append(m.pool, d$1.t);
						}
						_i++;
					}
					runq.dense = $subslice(runq.dense, 0, 0);
				}
				m.matched = true;
			} else if (_1 === (7)) {
				add = i.MatchRune(c);
			} else if (_1 === (8)) {
				add = c === (x$5 = i.Rune, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]));
			} else if (_1 === (9)) {
				add = true;
			} else if (_1 === (10)) {
				add = !((c === 10));
			} else {
				$panic(new $String("bad inst"));
			}
			if (add) {
				t = m.add(nextq, i.Out, nextPos, t.cap, nextCond, t);
			}
			if (!(t === ptrType$4.nil)) {
				m.pool = $append(m.pool, t);
			}
			j = j + (1) >> 0;
		}
		runq.dense = $subslice(runq.dense, 0, 0);
	};
	machine.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) { return this.$val.step(runq, nextq, pos, nextPos, c, nextCond); };
	machine.ptr.prototype.add = function(q, pc, pos, cap, cond, t) {
		var _1, cap, cond, d, i, j, j$1, m, opos, pc, pos, q, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, $s;
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		m = this;
		/* Again: */ case 1:
		if (pc === 0) {
			$s = -1; return t;
		}
		j = (x = q.sparse, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc]));
		if (j < ((q.dense.$length >>> 0)) && ((x$1 = q.dense, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j])).pc === pc)) {
			$s = -1; return t;
		}
		j$1 = q.dense.$length;
		q.dense = $subslice(q.dense, 0, (j$1 + 1 >> 0));
		d = (x$2 = q.dense, ((j$1 < 0 || j$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j$1]));
		d.t = ptrType$4.nil;
		d.pc = pc;
		(x$3 = q.sparse, ((pc < 0 || pc >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pc] = ((j$1 >>> 0))));
		i = (x$4 = m.p.Inst, ((pc < 0 || pc >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + pc]));
			_1 = i.Op;
			/* */ if (_1 === (5)) { $s = 3; continue; }
			/* */ if ((_1 === (0)) || (_1 === (1))) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ if ((_1 === (4)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (5)) { */ case 3:
				$s = 10; continue;
			/* } else if ((_1 === (0)) || (_1 === (1))) { */ case 4:
				t = m.add(q, i.Out, pos, cap, cond, t);
				pc = i.Arg;
				/* goto Again */ $s = 1; continue;
				$s = 10; continue;
			/* } else if (_1 === (3)) { */ case 5:
				/* */ if (cond.match(((i.Arg << 24 >>> 24)))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (cond.match(((i.Arg << 24 >>> 24)))) { */ case 11:
					pc = i.Out;
					/* goto Again */ $s = 1; continue;
				/* } */ case 12:
				$s = 10; continue;
			/* } else if (_1 === (6)) { */ case 6:
				pc = i.Out;
				/* goto Again */ $s = 1; continue;
				$s = 10; continue;
			/* } else if (_1 === (2)) { */ case 7:
				/* */ if (((i.Arg >> 0)) < cap.$length) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (((i.Arg >> 0)) < cap.$length) { */ case 13:
					opos = (x$5 = i.Arg, ((x$5 < 0 || x$5 >= cap.$length) ? ($throwRuntimeError("index out of range"), undefined) : cap.$array[cap.$offset + x$5]));
					(x$6 = i.Arg, ((x$6 < 0 || x$6 >= cap.$length) ? ($throwRuntimeError("index out of range"), undefined) : cap.$array[cap.$offset + x$6] = pos));
					m.add(q, i.Out, pos, cap, cond, ptrType$4.nil);
					(x$7 = i.Arg, ((x$7 < 0 || x$7 >= cap.$length) ? ($throwRuntimeError("index out of range"), undefined) : cap.$array[cap.$offset + x$7] = opos));
					$s = 15; continue;
				/* } else { */ case 14:
					pc = i.Out;
					/* goto Again */ $s = 1; continue;
				/* } */ case 15:
				$s = 10; continue;
			/* } else if ((_1 === (4)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) { */ case 8:
				if (t === ptrType$4.nil) {
					t = m.alloc(i);
				} else {
					t.inst = i;
				}
				if (cap.$length > 0 && !((x$8 = t.cap, $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$7)) === $indexPtr(cap.$array, cap.$offset + 0, ptrType$7))) {
					$copySlice(t.cap, cap);
				}
				d.t = t;
				t = ptrType$4.nil;
				$s = 10; continue;
			/* } else { */ case 9:
				$panic(new $String("unhandled"));
			/* } */ case 10:
		case 2:
		$s = -1; return t;
		/* */ } return; }
	};
	machine.prototype.add = function(q, pc, pos, cap, cond, t) { return this.$val.add(q, pc, pos, cap, cond, t); };
	newOnePassMachine = function() {
		var {_r, _tuple, m, ok, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = onePassPool.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$12, true);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = new onePassMachine.ptr(new inputs.ptr(new inputBytes.ptr(sliceType$4.nil), new inputString.ptr(""), new inputReader.ptr($ifaceNil, false, 0)), sliceType$7.nil);
		}
		$s = -1; return m;
		/* */ } return; } var $f = {$blk: newOnePassMachine, $c: true, $r, _r, _tuple, m, ok, $s};return $f;
	};
	freeOnePassMachine = function(m) {
		var m;
		m.inputs.clear();
		onePassPool.Put(m);
	};
	Regexp.ptr.prototype.doOnePass = function(ir, ib, is, pos, ncap, dstCap) {
		var {_1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, dstCap, flag, i, i$1, ib, inst, ir, is, m, matched, ncap, pc, pos, r, r1, re, startCond, width, width1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r, $c} = $restore(this, {ir, ib, is, pos, ncap, dstCap});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		startCond = re.cond;
		if (startCond === 255) {
			$s = -1; return sliceType$7.nil;
		}
		_r = newOnePassMachine(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m = _r;
		if (m.matchcap.$capacity < ncap) {
			m.matchcap = $makeSlice(sliceType$7, ncap);
		} else {
			m.matchcap = $subslice(m.matchcap, 0, ncap);
		}
		matched = false;
		_ref = m.matchcap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = m.matchcap, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = -1));
			_i++;
		}
		_tuple = m.inputs.init(ir, ib, is);
		i$1 = _tuple[0];
		_tmp = -1;
		_tmp$1 = -1;
		r = _tmp;
		r1 = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		width = _tmp$2;
		width1 = _tmp$3;
		_r$1 = i$1.step(pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		r = _tuple$1[0];
		width = _tuple$1[1];
		/* */ if (!((r === -1))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((r === -1))) { */ case 3:
			_r$2 = i$1.step(pos + width >> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			r1 = _tuple$2[0];
			width1 = _tuple$2[1];
		/* } */ case 4:
		flag = new lazyFlag(0, 0);
		/* */ if (pos === 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (pos === 0) { */ case 6:
			flag = newLazyFlag(-1, r);
			$s = 8; continue;
		/* } else { */ case 7:
			_r$3 = i$1.context(pos); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			flag = _r$3;
		/* } */ case 8:
		pc = re.onepass.Start;
		inst = (x$1 = re.onepass.Inst, ((pc < 0 || pc >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pc]));
		if (!((pos === 0) && flag.match(((inst.Inst.Arg << 24 >>> 24))) && re.prefix.length > 0)) { _v = false; $s = 12; continue s; }
		_r$4 = i$1.canCheckPrefix(); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v = _r$4; case 12:
		/* */ if (_v) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_v) { */ case 10:
			_r$5 = i$1.hasPrefix(re); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!_r$5) { */ case 14:
				/* goto Return */ $s = 17; continue;
			/* } */ case 15:
			pos = pos + (re.prefix.length) >> 0;
			_r$6 = i$1.step(pos); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$3 = _r$6;
			r = _tuple$3[0];
			width = _tuple$3[1];
			_r$7 = i$1.step(pos + width >> 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$4 = _r$7;
			r1 = _tuple$4[0];
			width1 = _tuple$4[1];
			_r$8 = i$1.context(pos); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			flag = _r$8;
			pc = ((re.prefixEnd >> 0));
		/* } */ case 11:
		/* while (true) { */ case 21:
			inst = (x$2 = re.onepass.Inst, ((pc < 0 || pc >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + pc]));
			pc = ((inst.Inst.Out >> 0));
				_1 = inst.Inst.Op;
				/* */ if (_1 === (4)) { $s = 24; continue; }
				/* */ if (_1 === (7)) { $s = 25; continue; }
				/* */ if (_1 === (8)) { $s = 26; continue; }
				/* */ if (_1 === (9)) { $s = 27; continue; }
				/* */ if (_1 === (10)) { $s = 28; continue; }
				/* */ if ((_1 === (0)) || (_1 === (1))) { $s = 29; continue; }
				/* */ if (_1 === (5)) { $s = 30; continue; }
				/* */ if (_1 === (6)) { $s = 31; continue; }
				/* */ if (_1 === (3)) { $s = 32; continue; }
				/* */ if (_1 === (2)) { $s = 33; continue; }
				/* */ $s = 34; continue;
				/* if (_1 === (4)) { */ case 24:
					matched = true;
					if (m.matchcap.$length > 0) {
						(x$3 = m.matchcap, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0] = 0));
						(x$4 = m.matchcap, (1 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 1] = pos));
					}
					/* goto Return */ $s = 17; continue;
					$s = 35; continue;
				/* } else if (_1 === (7)) { */ case 25:
					/* */ if (!inst.Inst.MatchRune(r)) { $s = 36; continue; }
					/* */ $s = 37; continue;
					/* if (!inst.Inst.MatchRune(r)) { */ case 36:
						/* goto Return */ $s = 17; continue;
					/* } */ case 37:
					$s = 35; continue;
				/* } else if (_1 === (8)) { */ case 26:
					/* */ if (!((r === (x$5 = inst.Inst.Rune, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]))))) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (!((r === (x$5 = inst.Inst.Rune, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]))))) { */ case 38:
						/* goto Return */ $s = 17; continue;
					/* } */ case 39:
					$s = 35; continue;
				/* } else if (_1 === (9)) { */ case 27:
					$s = 35; continue;
				/* } else if (_1 === (10)) { */ case 28:
					/* */ if (r === 10) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (r === 10) { */ case 40:
						/* goto Return */ $s = 17; continue;
					/* } */ case 41:
					$s = 35; continue;
				/* } else if ((_1 === (0)) || (_1 === (1))) { */ case 29:
					pc = ((onePassNext(inst, r) >> 0));
					/* continue; */ $s = 21; continue;
					$s = 35; continue;
				/* } else if (_1 === (5)) { */ case 30:
					/* goto Return */ $s = 17; continue;
					$s = 35; continue;
				/* } else if (_1 === (6)) { */ case 31:
					/* continue; */ $s = 21; continue;
					$s = 35; continue;
				/* } else if (_1 === (3)) { */ case 32:
					/* */ if (!flag.match(((inst.Inst.Arg << 24 >>> 24)))) { $s = 42; continue; }
					/* */ $s = 43; continue;
					/* if (!flag.match(((inst.Inst.Arg << 24 >>> 24)))) { */ case 42:
						/* goto Return */ $s = 17; continue;
					/* } */ case 43:
					/* continue; */ $s = 21; continue;
					$s = 35; continue;
				/* } else if (_1 === (2)) { */ case 33:
					if (((inst.Inst.Arg >> 0)) < m.matchcap.$length) {
						(x$6 = m.matchcap, x$7 = inst.Inst.Arg, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7] = pos));
					}
					/* continue; */ $s = 21; continue;
					$s = 35; continue;
				/* } else { */ case 34:
					$panic(new $String("bad inst"));
				/* } */ case 35:
			case 23:
			if (width === 0) {
				/* break; */ $s = 22; continue;
			}
			flag = newLazyFlag(r, r1);
			pos = pos + (width) >> 0;
			_tmp$4 = r1;
			_tmp$5 = width1;
			r = _tmp$4;
			width = _tmp$5;
			/* */ if (!((r === -1))) { $s = 44; continue; }
			/* */ $s = 45; continue;
			/* if (!((r === -1))) { */ case 44:
				_r$9 = i$1.step(pos + width >> 0); /* */ $s = 46; case 46: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$5 = _r$9;
				r1 = _tuple$5[0];
				width1 = _tuple$5[1];
			/* } */ case 45:
		$s = 21; continue;
		case 22:
		/* Return: */ case 17:
		if (!matched) {
			freeOnePassMachine(m);
			$s = -1; return sliceType$7.nil;
		}
		dstCap = $appendSlice(dstCap, m.matchcap);
		freeOnePassMachine(m);
		$s = -1; return dstCap;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.doOnePass, $c: true, $r, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, dstCap, flag, i, i$1, ib, inst, ir, is, m, matched, ncap, pc, pos, r, r1, re, startCond, width, width1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s};return $f;
	};
	Regexp.prototype.doOnePass = function(ir, ib, is, pos, ncap, dstCap) { return this.$val.doOnePass(ir, ib, is, pos, ncap, dstCap); };
	Regexp.ptr.prototype.doMatch = function(r, b, s) {
		var {$24r, _r, b, r, re, s, $s, $r, $c} = $restore(this, {r, b, s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute(r, b, s, 0, 0, sliceType$7.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$24r = !(_r === sliceType$7.nil);
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.doMatch, $c: true, $r, $24r, _r, b, r, re, s, $s};return $f;
	};
	Regexp.prototype.doMatch = function(r, b, s) { return this.$val.doMatch(r, b, s); };
	Regexp.ptr.prototype.doExecute = function(r, b, s, pos, ncap, dstCap) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _tuple, b, dstCap, i, m, ncap, pos, r, re, s, $s, $r, $c} = $restore(this, {r, b, s, pos, ncap, dstCap});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		if (dstCap === sliceType$7.nil) {
			dstCap = $subslice(new sliceType$7(arrayNoInts), 0, 0, 0);
		}
		if ($interfaceIsEqual(r, $ifaceNil) && (b.$length + s.length >> 0) < re.minInputLen) {
			$s = -1; return sliceType$7.nil;
		}
		/* */ if (!(re.onepass === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(re.onepass === ptrType$2.nil)) { */ case 1:
			_r = re.doOnePass(r, b, s, pos, ncap, dstCap); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$24r = _r;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		/* */ if ($interfaceIsEqual(r, $ifaceNil) && (b.$length + s.length >> 0) < re.maxBitStateLen) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($interfaceIsEqual(r, $ifaceNil) && (b.$length + s.length >> 0) < re.maxBitStateLen) { */ case 5:
			_r$1 = re.backtrack(b, s, pos, ncap, dstCap); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r$1 = _r$1;
			$s = 8; case 8: return $24r$1;
		/* } */ case 6:
		_r$2 = re.get(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		m = _r$2;
		_tuple = m.inputs.init(r, b, s);
		i = _tuple[0];
		m.init(ncap);
		_r$3 = m.match(i, pos); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!_r$3) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!_r$3) { */ case 10:
			re.put(m);
			$s = -1; return sliceType$7.nil;
		/* } */ case 11:
		dstCap = $appendSlice(dstCap, m.matchcap);
		re.put(m);
		$s = -1; return dstCap;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.doExecute, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _tuple, b, dstCap, i, m, ncap, pos, r, re, s, $s};return $f;
	};
	Regexp.prototype.doExecute = function(r, b, s, pos, ncap, dstCap) { return this.$val.doExecute(r, b, s, pos, ncap, dstCap); };
	newBitState = function() {
		var {_r, _tuple, b, ok, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r = bitStatePool.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = $assertType(_r, ptrType$13, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			b = new bitState.ptr(0, sliceType$7.nil, sliceType$7.nil, sliceType$15.nil, sliceType$2.nil, new inputs.ptr(new inputBytes.ptr(sliceType$4.nil), new inputString.ptr(""), new inputReader.ptr($ifaceNil, false, 0)));
		}
		$s = -1; return b;
		/* */ } return; } var $f = {$blk: newBitState, $c: true, $r, _r, _tuple, b, ok, $s};return $f;
	};
	freeBitState = function(b) {
		var b;
		b.inputs.clear();
		bitStatePool.Put(b);
	};
	maxBitStateLen = function(prog) {
		var _q, prog;
		if (!shouldBacktrack(prog)) {
			return 0;
		}
		return (_q = 262144 / prog.Inst.$length, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	shouldBacktrack = function(prog) {
		var prog;
		return prog.Inst.$length <= 500;
	};
	bitState.ptr.prototype.reset = function(prog, end, ncap) {
		var _i, _i$1, _i$2, _q, _ref, _ref$1, _ref$2, b, end, i, i$1, i$2, ncap, prog, visitedSize, x, x$1, x$2;
		b = this;
		b.end = end;
		if (b.jobs.$capacity === 0) {
			b.jobs = $makeSlice(sliceType$15, 0, 256);
		} else {
			b.jobs = $subslice(b.jobs, 0, 0);
		}
		visitedSize = (_q = (((($imul(prog.Inst.$length, ((end + 1 >> 0)))) + 32 >> 0) - 1 >> 0)) / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (b.visited.$capacity < visitedSize) {
			b.visited = $makeSlice(sliceType$2, visitedSize, 8192);
		} else {
			b.visited = $subslice(b.visited, 0, visitedSize);
			_ref = b.visited;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				(x = b.visited, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = 0));
				_i++;
			}
		}
		if (b.cap.$capacity < ncap) {
			b.cap = $makeSlice(sliceType$7, ncap);
		} else {
			b.cap = $subslice(b.cap, 0, ncap);
		}
		_ref$1 = b.cap;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			(x$1 = b.cap, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1] = -1));
			_i$1++;
		}
		if (b.matchcap.$capacity < ncap) {
			b.matchcap = $makeSlice(sliceType$7, ncap);
		} else {
			b.matchcap = $subslice(b.matchcap, 0, ncap);
		}
		_ref$2 = b.matchcap;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			i$2 = _i$2;
			(x$2 = b.matchcap, ((i$2 < 0 || i$2 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$2] = -1));
			_i$2++;
		}
	};
	bitState.prototype.reset = function(prog, end, ncap) { return this.$val.reset(prog, end, ncap); };
	bitState.ptr.prototype.shouldVisit = function(pc, pos) {
		var _index, _q, _q$1, b, n, pc, pos, x, x$1, x$2, x$3, y, y$1;
		b = this;
		n = (((($imul(((pc >> 0)), ((b.end + 1 >> 0)))) + pos >> 0) >>> 0));
		if (!(((((x = b.visited, x$1 = (_q = n / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) & (((y = (((n & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
			return false;
		}
		_index = (_q$1 = n / 32, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		(x$3 = b.visited, ((_index < 0 || _index >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + _index] = (((x$2 = b.visited, ((_index < 0 || _index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + _index])) | (((y$1 = (((n & 31) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0)));
		return true;
	};
	bitState.prototype.shouldVisit = function(pc, pos) { return this.$val.shouldVisit(pc, pos); };
	bitState.ptr.prototype.push = function(re, pc, pos, arg) {
		var arg, b, pc, pos, re, x;
		b = this;
		if (!(((x = re.prog.Inst, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc])).Op === 5)) && (arg || b.shouldVisit(pc, pos))) {
			b.jobs = $append(b.jobs, new job.ptr(pc, arg, pos));
		}
	};
	bitState.prototype.push = function(re, pc, pos, arg) { return this.$val.push(re, pc, pos, arg); };
	Regexp.ptr.prototype.tryBacktrack = function(b, i, pc, pos) {
		var {_1, _2, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, arg, b, flag, i, inst, l, longest, old, pc, pc$1, pos, pos$1, r, r$1, r$2, r$3, re, width, width$1, width$2, width$3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r, $c} = $restore(this, {b, i, pc, pos});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		longest = re.longest;
		b.push(re, pc, pos, false);
		/* while (true) { */ case 1:
			/* if (!(b.jobs.$length > 0)) { break; } */ if(!(b.jobs.$length > 0)) { $s = 2; continue; }
			l = b.jobs.$length - 1 >> 0;
			pc$1 = (x = b.jobs, ((l < 0 || l >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + l])).pc;
			pos$1 = (x$1 = b.jobs, ((l < 0 || l >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + l])).pos;
			arg = (x$2 = b.jobs, ((l < 0 || l >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + l])).arg;
			b.jobs = $subslice(b.jobs, 0, l);
			/* goto Skip */ $s = 3; continue;
			/* CheckAndLoop: */ case 4:
			if (!b.shouldVisit(pc$1, pos$1)) {
				/* continue; */ $s = 1; continue;
			}
			/* Skip: */ case 3:
			inst = (x$3 = re.prog.Inst, ((pc$1 < 0 || pc$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pc$1]));
				_1 = inst.Op;
				/* */ if (_1 === (5)) { $s = 6; continue; }
				/* */ if (_1 === (0)) { $s = 7; continue; }
				/* */ if (_1 === (1)) { $s = 8; continue; }
				/* */ if (_1 === (7)) { $s = 9; continue; }
				/* */ if (_1 === (8)) { $s = 10; continue; }
				/* */ if (_1 === (10)) { $s = 11; continue; }
				/* */ if (_1 === (9)) { $s = 12; continue; }
				/* */ if (_1 === (2)) { $s = 13; continue; }
				/* */ if (_1 === (3)) { $s = 14; continue; }
				/* */ if (_1 === (6)) { $s = 15; continue; }
				/* */ if (_1 === (4)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_1 === (5)) { */ case 6:
					$panic(new $String("unexpected InstFail"));
					$s = 18; continue;
				/* } else if (_1 === (0)) { */ case 7:
					/* */ if (arg) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (arg) { */ case 19:
						arg = false;
						pc$1 = inst.Arg;
						/* goto CheckAndLoop */ $s = 4; continue;
						$s = 21; continue;
					/* } else { */ case 20:
						b.push(re, pc$1, pos$1, true);
						pc$1 = inst.Out;
						/* goto CheckAndLoop */ $s = 4; continue;
					/* } */ case 21:
					$s = 18; continue;
				/* } else if (_1 === (1)) { */ case 8:
						_2 = (x$4 = re.prog.Inst, x$5 = inst.Out, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])).Op;
						/* */ if ((_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10))) { $s = 23; continue; }
						/* */ $s = 24; continue;
						/* if ((_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10))) { */ case 23:
							b.push(re, inst.Arg, pos$1, false);
							pc$1 = inst.Arg;
							pos$1 = b.end;
							/* goto CheckAndLoop */ $s = 4; continue;
						/* } */ case 24:
					case 22:
					b.push(re, inst.Out, b.end, false);
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (7)) { */ case 9:
					_r = i.step(pos$1); /* */ $s = 25; case 25: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tuple = _r;
					r = _tuple[0];
					width = _tuple[1];
					if (!inst.MatchRune(r)) {
						/* continue; */ $s = 1; continue;
					}
					pos$1 = pos$1 + (width) >> 0;
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (8)) { */ case 10:
					_r$1 = i.step(pos$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$1 = _r$1;
					r$1 = _tuple$1[0];
					width$1 = _tuple$1[1];
					if (!((r$1 === (x$6 = inst.Rune, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0]))))) {
						/* continue; */ $s = 1; continue;
					}
					pos$1 = pos$1 + (width$1) >> 0;
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (10)) { */ case 11:
					_r$2 = i.step(pos$1); /* */ $s = 27; case 27: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$2 = _r$2;
					r$2 = _tuple$2[0];
					width$2 = _tuple$2[1];
					if ((r$2 === 10) || (r$2 === -1)) {
						/* continue; */ $s = 1; continue;
					}
					pos$1 = pos$1 + (width$2) >> 0;
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (9)) { */ case 12:
					_r$3 = i.step(pos$1); /* */ $s = 28; case 28: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					r$3 = _tuple$3[0];
					width$3 = _tuple$3[1];
					if (r$3 === -1) {
						/* continue; */ $s = 1; continue;
					}
					pos$1 = pos$1 + (width$3) >> 0;
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (2)) { */ case 13:
					/* */ if (arg) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (arg) { */ case 29:
						(x$7 = b.cap, x$8 = inst.Arg, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = pos$1));
						/* continue; */ $s = 1; continue;
						$s = 31; continue;
					/* } else { */ case 30:
						if (inst.Arg < ((b.cap.$length >>> 0))) {
							b.push(re, pc$1, (x$9 = b.cap, x$10 = inst.Arg, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), true);
							(x$11 = b.cap, x$12 = inst.Arg, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = pos$1));
						}
						pc$1 = inst.Out;
						/* goto CheckAndLoop */ $s = 4; continue;
					/* } */ case 31:
					$s = 18; continue;
				/* } else if (_1 === (3)) { */ case 14:
					_r$4 = i.context(pos$1); /* */ $s = 32; case 32: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					flag = _r$4;
					if (!flag.match(((inst.Arg << 24 >>> 24)))) {
						/* continue; */ $s = 1; continue;
					}
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (6)) { */ case 15:
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (4)) { */ case 16:
					if (b.cap.$length === 0) {
						$s = -1; return true;
					}
					if (b.cap.$length > 1) {
						(x$13 = b.cap, (1 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 1] = pos$1));
					}
					old = (x$14 = b.matchcap, (1 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 1]));
					if ((old === -1) || (longest && pos$1 > 0 && pos$1 > old)) {
						$copySlice(b.matchcap, b.cap);
					}
					if (!longest) {
						$s = -1; return true;
					}
					if (pos$1 === b.end) {
						$s = -1; return true;
					}
					/* continue; */ $s = 1; continue;
					$s = 18; continue;
				/* } else { */ case 17:
					$panic(new $String("bad inst"));
				/* } */ case 18:
			case 5:
		$s = 1; continue;
		case 2:
		$s = -1; return longest && b.matchcap.$length > 1 && (x$15 = b.matchcap, (1 >= x$15.$length ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + 1])) >= 0;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.tryBacktrack, $c: true, $r, _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, arg, b, flag, i, inst, l, longest, old, pc, pc$1, pos, pos$1, r, r$1, r$2, r$3, re, width, width$1, width$2, width$3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s};return $f;
	};
	Regexp.prototype.tryBacktrack = function(b, i, pc, pos) { return this.$val.tryBacktrack(b, i, pc, pos); };
	Regexp.ptr.prototype.backtrack = function(ib, is, pos, ncap, dstCap) {
		var {_r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, advance, b, dstCap, end, i, ib, is, ncap, pos, re, startCond, width, x, x$1, $s, $r, $c} = $restore(this, {ib, is, pos, ncap, dstCap});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		re = this;
		startCond = re.cond;
		if (startCond === 255) {
			$s = -1; return sliceType$7.nil;
		}
		if (!((((startCond & 4) >>> 0) === 0)) && !((pos === 0))) {
			$s = -1; return sliceType$7.nil;
		}
		_r = newBitState(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		_tuple = b.inputs.init($ifaceNil, ib, is);
		i = _tuple[0];
		end = _tuple[1];
		b.reset(re.prog, end, ncap);
		/* */ if (!((((startCond & 4) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((startCond & 4) >>> 0) === 0))) { */ case 2:
			if (b.cap.$length > 0) {
				(x = b.cap, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0] = pos));
			}
			_r$1 = re.tryBacktrack(b, i, ((re.prog.Start >>> 0)), pos); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!_r$1) { */ case 5:
				freeBitState(b);
				$s = -1; return sliceType$7.nil;
			/* } */ case 6:
			$s = 4; continue;
		/* } else { */ case 3:
			width = -1;
			/* while (true) { */ case 8:
				/* if (!(pos <= end && !((width === 0)))) { break; } */ if(!(pos <= end && !((width === 0)))) { $s = 9; continue; }
				/* */ if (re.prefix.length > 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (re.prefix.length > 0) { */ case 10:
					_r$2 = i.index(re, pos); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					advance = _r$2;
					if (advance < 0) {
						freeBitState(b);
						$s = -1; return sliceType$7.nil;
					}
					pos = pos + (advance) >> 0;
				/* } */ case 11:
				if (b.cap.$length > 0) {
					(x$1 = b.cap, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0] = pos));
				}
				_r$3 = re.tryBacktrack(b, i, ((re.prog.Start >>> 0)), pos); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_r$3) { */ case 13:
					/* goto Match */ $s = 16; continue;
				/* } */ case 14:
				_r$4 = i.step(pos); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				width = _tuple$1[1];
				pos = pos + (width) >> 0;
			$s = 8; continue;
			case 9:
			freeBitState(b);
			$s = -1; return sliceType$7.nil;
		/* } */ case 4:
		/* Match: */ case 16:
		dstCap = $appendSlice(dstCap, b.matchcap);
		freeBitState(b);
		$s = -1; return dstCap;
		/* */ } return; } var $f = {$blk: Regexp.ptr.prototype.backtrack, $c: true, $r, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, advance, b, dstCap, end, i, ib, is, ncap, pos, re, startCond, width, x, x$1, $s};return $f;
	};
	Regexp.prototype.backtrack = function(ib, is, pos, ncap, dstCap) { return this.$val.backtrack(ib, is, pos, ncap, dstCap); };
	ptrType.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Longest", name: "Longest", pkg: "", typ: $funcType([], [], false)}, {prop: "get", name: "get", pkg: "regexp", typ: $funcType([], [ptrType$3], false)}, {prop: "put", name: "put", pkg: "regexp", typ: $funcType([ptrType$3], [], false)}, {prop: "NumSubexp", name: "NumSubexp", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SubexpNames", name: "SubexpNames", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "SubexpIndex", name: "SubexpIndex", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "LiteralPrefix", name: "LiteralPrefix", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "MatchReader", name: "MatchReader", pkg: "", typ: $funcType([io.RuneReader], [$Bool], false)}, {prop: "MatchString", name: "MatchString", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Match", name: "Match", pkg: "", typ: $funcType([sliceType$4], [$Bool], false)}, {prop: "ReplaceAllString", name: "ReplaceAllString", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "ReplaceAllLiteralString", name: "ReplaceAllLiteralString", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "ReplaceAllStringFunc", name: "ReplaceAllStringFunc", pkg: "", typ: $funcType([$String, funcType], [$String], false)}, {prop: "replaceAll", name: "replaceAll", pkg: "regexp", typ: $funcType([sliceType$4, $String, $Int, funcType$1], [sliceType$4], false)}, {prop: "ReplaceAll", name: "ReplaceAll", pkg: "", typ: $funcType([sliceType$4, sliceType$4], [sliceType$4], false)}, {prop: "ReplaceAllLiteral", name: "ReplaceAllLiteral", pkg: "", typ: $funcType([sliceType$4, sliceType$4], [sliceType$4], false)}, {prop: "ReplaceAllFunc", name: "ReplaceAllFunc", pkg: "", typ: $funcType([sliceType$4, funcType$2], [sliceType$4], false)}, {prop: "pad", name: "pad", pkg: "regexp", typ: $funcType([sliceType$7], [sliceType$7], false)}, {prop: "allMatches", name: "allMatches", pkg: "regexp", typ: $funcType([$String, sliceType$4, $Int, funcType$3], [], false)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([sliceType$4], [sliceType$4], false)}, {prop: "FindIndex", name: "FindIndex", pkg: "", typ: $funcType([sliceType$4], [sliceType$7], false)}, {prop: "FindString", name: "FindString", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "FindStringIndex", name: "FindStringIndex", pkg: "", typ: $funcType([$String], [sliceType$7], false)}, {prop: "FindReaderIndex", name: "FindReaderIndex", pkg: "", typ: $funcType([io.RuneReader], [sliceType$7], false)}, {prop: "FindSubmatch", name: "FindSubmatch", pkg: "", typ: $funcType([sliceType$4], [sliceType$8], false)}, {prop: "Expand", name: "Expand", pkg: "", typ: $funcType([sliceType$4, sliceType$4, sliceType$4, sliceType$7], [sliceType$4], false)}, {prop: "ExpandString", name: "ExpandString", pkg: "", typ: $funcType([sliceType$4, $String, $String, sliceType$7], [sliceType$4], false)}, {prop: "expand", name: "expand", pkg: "regexp", typ: $funcType([sliceType$4, $String, sliceType$4, $String, sliceType$7], [sliceType$4], false)}, {prop: "FindSubmatchIndex", name: "FindSubmatchIndex", pkg: "", typ: $funcType([sliceType$4], [sliceType$7], false)}, {prop: "FindStringSubmatch", name: "FindStringSubmatch", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "FindStringSubmatchIndex", name: "FindStringSubmatchIndex", pkg: "", typ: $funcType([$String], [sliceType$7], false)}, {prop: "FindReaderSubmatchIndex", name: "FindReaderSubmatchIndex", pkg: "", typ: $funcType([io.RuneReader], [sliceType$7], false)}, {prop: "FindAll", name: "FindAll", pkg: "", typ: $funcType([sliceType$4, $Int], [sliceType$8], false)}, {prop: "FindAllIndex", name: "FindAllIndex", pkg: "", typ: $funcType([sliceType$4, $Int], [sliceType$9], false)}, {prop: "FindAllString", name: "FindAllString", pkg: "", typ: $funcType([$String, $Int], [sliceType$3], false)}, {prop: "FindAllStringIndex", name: "FindAllStringIndex", pkg: "", typ: $funcType([$String, $Int], [sliceType$9], false)}, {prop: "FindAllSubmatch", name: "FindAllSubmatch", pkg: "", typ: $funcType([sliceType$4, $Int], [sliceType$10], false)}, {prop: "FindAllSubmatchIndex", name: "FindAllSubmatchIndex", pkg: "", typ: $funcType([sliceType$4, $Int], [sliceType$9], false)}, {prop: "FindAllStringSubmatch", name: "FindAllStringSubmatch", pkg: "", typ: $funcType([$String, $Int], [sliceType$11], false)}, {prop: "FindAllStringSubmatchIndex", name: "FindAllStringSubmatchIndex", pkg: "", typ: $funcType([$String, $Int], [sliceType$9], false)}, {prop: "Split", name: "Split", pkg: "", typ: $funcType([$String, $Int], [sliceType$3], false)}, {prop: "doOnePass", name: "doOnePass", pkg: "regexp", typ: $funcType([io.RuneReader, sliceType$4, $String, $Int, $Int, sliceType$7], [sliceType$7], false)}, {prop: "doMatch", name: "doMatch", pkg: "regexp", typ: $funcType([io.RuneReader, sliceType$4, $String], [$Bool], false)}, {prop: "doExecute", name: "doExecute", pkg: "regexp", typ: $funcType([io.RuneReader, sliceType$4, $String, $Int, $Int, sliceType$7], [sliceType$7], false)}, {prop: "tryBacktrack", name: "tryBacktrack", pkg: "regexp", typ: $funcType([ptrType$13, input, $Uint32, $Int], [$Bool], false)}, {prop: "backtrack", name: "backtrack", pkg: "regexp", typ: $funcType([sliceType$4, $String, $Int, $Int, sliceType$7], [sliceType$7], false)}];
	ptrType$14.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [lazyFlag], false)}];
	ptrType$15.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [lazyFlag], false)}];
	ptrType$16.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [lazyFlag], false)}];
	ptrType$6.methods = [{prop: "empty", name: "empty", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "next", name: "next", pkg: "regexp", typ: $funcType([], [$Uint32], false)}, {prop: "clear", name: "clear", pkg: "regexp", typ: $funcType([], [], false)}, {prop: "contains", name: "contains", pkg: "regexp", typ: $funcType([$Uint32], [$Bool], false)}, {prop: "insert", name: "insert", pkg: "regexp", typ: $funcType([$Uint32], [], false)}, {prop: "insertNew", name: "insertNew", pkg: "regexp", typ: $funcType([$Uint32], [], false)}];
	runeSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$3.methods = [{prop: "init", name: "init", pkg: "regexp", typ: $funcType([$Int], [], false)}, {prop: "alloc", name: "alloc", pkg: "regexp", typ: $funcType([ptrType$10], [ptrType$4], false)}, {prop: "match", name: "match", pkg: "regexp", typ: $funcType([input, $Int], [$Bool], false)}, {prop: "clear", name: "clear", pkg: "regexp", typ: $funcType([ptrType$17], [], false)}, {prop: "step", name: "step", pkg: "regexp", typ: $funcType([ptrType$17, ptrType$17, $Int, $Int, $Int32, ptrType$11], [], false)}, {prop: "add", name: "add", pkg: "regexp", typ: $funcType([ptrType$17, $Uint32, $Int, sliceType$7, ptrType$11, ptrType$4], [ptrType$4], false)}];
	ptrType$18.methods = [{prop: "newBytes", name: "newBytes", pkg: "regexp", typ: $funcType([sliceType$4], [input], false)}, {prop: "newString", name: "newString", pkg: "regexp", typ: $funcType([$String], [input], false)}, {prop: "newReader", name: "newReader", pkg: "regexp", typ: $funcType([io.RuneReader], [input], false)}, {prop: "clear", name: "clear", pkg: "regexp", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "regexp", typ: $funcType([io.RuneReader, sliceType$4, $String], [input, $Int], false)}];
	lazyFlag.methods = [{prop: "match", name: "match", pkg: "regexp", typ: $funcType([syntax.EmptyOp], [$Bool], false)}];
	ptrType$13.methods = [{prop: "reset", name: "reset", pkg: "regexp", typ: $funcType([ptrType$1, $Int, $Int], [], false)}, {prop: "shouldVisit", name: "shouldVisit", pkg: "regexp", typ: $funcType([$Uint32, $Int], [$Bool], false)}, {prop: "push", name: "push", pkg: "regexp", typ: $funcType([ptrType, $Uint32, $Int, $Bool], [], false)}];
	Regexp.init("regexp", [{prop: "expr", name: "expr", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "prog", name: "prog", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "onepass", name: "onepass", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "numSubexp", name: "numSubexp", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "maxBitStateLen", name: "maxBitStateLen", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "subexpNames", name: "subexpNames", embedded: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "prefix", name: "prefix", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "prefixBytes", name: "prefixBytes", embedded: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "prefixRune", name: "prefixRune", embedded: false, exported: false, typ: $Int32, tag: ""}, {prop: "prefixEnd", name: "prefixEnd", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "mpool", name: "mpool", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "matchcap", name: "matchcap", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "prefixComplete", name: "prefixComplete", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "cond", name: "cond", embedded: false, exported: false, typ: syntax.EmptyOp, tag: ""}, {prop: "minInputLen", name: "minInputLen", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "longest", name: "longest", embedded: false, exported: false, typ: $Bool, tag: ""}]);
	input.init([{prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [lazyFlag], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType, $Int], [$Int], false)}, {prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}]);
	inputString.init("regexp", [{prop: "str", name: "str", embedded: false, exported: false, typ: $String, tag: ""}]);
	inputBytes.init("regexp", [{prop: "str", name: "str", embedded: false, exported: false, typ: sliceType$4, tag: ""}]);
	inputReader.init("regexp", [{prop: "r", name: "r", embedded: false, exported: false, typ: io.RuneReader, tag: ""}, {prop: "atEOT", name: "atEOT", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "pos", name: "pos", embedded: false, exported: false, typ: $Int, tag: ""}]);
	onePassProg.init("", [{prop: "Inst", name: "Inst", embedded: false, exported: true, typ: sliceType$12, tag: ""}, {prop: "Start", name: "Start", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "NumCap", name: "NumCap", embedded: false, exported: true, typ: $Int, tag: ""}]);
	onePassInst.init("", [{prop: "Inst", name: "Inst", embedded: true, exported: true, typ: syntax.Inst, tag: ""}, {prop: "Next", name: "Next", embedded: false, exported: true, typ: sliceType$2, tag: ""}]);
	queueOnePass.init("regexp", [{prop: "sparse", name: "sparse", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "dense", name: "dense", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "size", name: "size", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "nextIndex", name: "nextIndex", embedded: false, exported: false, typ: $Uint32, tag: ""}]);
	runeSlice.init($Int32);
	queue.init("regexp", [{prop: "sparse", name: "sparse", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "dense", name: "dense", embedded: false, exported: false, typ: sliceType$5, tag: ""}]);
	entry.init("regexp", [{prop: "pc", name: "pc", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "t", name: "t", embedded: false, exported: false, typ: ptrType$4, tag: ""}]);
	thread.init("regexp", [{prop: "inst", name: "inst", embedded: false, exported: false, typ: ptrType$10, tag: ""}, {prop: "cap", name: "cap", embedded: false, exported: false, typ: sliceType$7, tag: ""}]);
	machine.init("regexp", [{prop: "re", name: "re", embedded: false, exported: false, typ: ptrType, tag: ""}, {prop: "p", name: "p", embedded: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "q0", name: "q0", embedded: false, exported: false, typ: queue, tag: ""}, {prop: "q1", name: "q1", embedded: false, exported: false, typ: queue, tag: ""}, {prop: "pool", name: "pool", embedded: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "matched", name: "matched", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "matchcap", name: "matchcap", embedded: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "inputs", name: "inputs", embedded: false, exported: false, typ: inputs, tag: ""}]);
	inputs.init("regexp", [{prop: "bytes", name: "bytes", embedded: false, exported: false, typ: inputBytes, tag: ""}, {prop: "string", name: "string", embedded: false, exported: false, typ: inputString, tag: ""}, {prop: "reader", name: "reader", embedded: false, exported: false, typ: inputReader, tag: ""}]);
	onePassMachine.init("regexp", [{prop: "inputs", name: "inputs", embedded: false, exported: false, typ: inputs, tag: ""}, {prop: "matchcap", name: "matchcap", embedded: false, exported: false, typ: sliceType$7, tag: ""}]);
	job.init("regexp", [{prop: "pc", name: "pc", embedded: false, exported: false, typ: $Uint32, tag: ""}, {prop: "arg", name: "arg", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "pos", name: "pos", embedded: false, exported: false, typ: $Int, tag: ""}]);
	bitState.init("regexp", [{prop: "end", name: "end", embedded: false, exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", embedded: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "matchcap", name: "matchcap", embedded: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "jobs", name: "jobs", embedded: false, exported: false, typ: sliceType$15, tag: ""}, {prop: "visited", name: "visited", embedded: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "inputs", name: "inputs", embedded: false, exported: false, typ: inputs, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syntax.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		matchPool = arrayType.zero();
		specialBytes = arrayType$1.zero();
		onePassPool = new nosync.Pool.ptr(sliceType.nil, $throwNilPointerError);
		arrayNoInts = arrayType$2.zero();
		bitStatePool = new nosync.Pool.ptr(sliceType.nil, $throwNilPointerError);
		matchSize = $toNativeArray($kindInt, [128, 512, 2048, 16384, 0]);
		noRune = new sliceType$1([]);
		noNext = new sliceType$2([4294967295]);
		anyRuneNotNL = new sliceType$1([0, 9, 11, 1114111]);
		anyRune = new sliceType$1([0, 1114111]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/altinity/clickhouse-grafana/pkg/eval"] = (function() {
	var $pkg = {}, $init, fmt, regexp2, math, regexp, strconv, strings, time, unicode, EvalQuery, betweenBracesResult, EvalAST, EvalQueryScanner, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, sliceType$3, ptrType$2, ptrType$3, sliceType$4, ptrType$4, ptrType$5, funcType, ptrType$6, mapType, ptrType$7, timeSeriesMacroRegexp, timeSeriesMsMacroRegexp, naturalTimeSeriesMacroRegexp, timeFilterMacroRegexp, timeFilterMsMacroRegexp, tableMacroRegexp, fromMacroRegexp, toMacroRegexp, dateColMacroRegexp, dateTimeColMacroRegexp, intervalMacroRegexp, timeFilterByColumnMacroRegexp, timeFilter64ByColumnMacroRegexp, fromMsMacroRegexp, toMsMacroRegexp, intervalMsMacroRegexp, unitsInMilliseconds, wsOnlyRe, commentOnlyRe, idOnlyRe, closureOnlyRe, macroFuncOnlyRe, statementOnlyRe, joinsOnlyRe, onJoinTokenOnlyRe, tableNameOnlyRe, tableFuncOnlyRe, macroOnlyRe, inOnlyRe, condOnlyRe, skipSpaceOnlyRe, tokenRe, tokenReComplied, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, parseInterval, findKeywordOutsideBrackets, newEvalAST, NewScanner, isSkipSpace, isCond, isIn, isJoin, isTable, isWS, isMacroFunc, isMacro, isComment, isID, isStatement, isTableFunc, isClosureChars, printItems, toAST, isClosured, betweenBraces, betweenSquareBraces, PrintAST;
	fmt = $packages["fmt"];
	regexp2 = $packages["github.com/dlclark/regexp2"];
	math = $packages["math"];
	regexp = $packages["regexp"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	time = $packages["time"];
	unicode = $packages["unicode"];
	EvalQuery = $pkg.EvalQuery = $newType(0, $kindStruct, "eval.EvalQuery", true, "github.com/altinity/clickhouse-grafana/pkg/eval", true, function(RefId_, RuleUid_, RawQuery_, Query_, DateTimeCol_, DateCol_, DateTimeType_, Extrapolate_, SkipComments_, AddMetadata_, UseWindowFuncForMacros_, Format_, Round_, IntervalFactor_, Interval_, IntervalSec_, IntervalMs_, Database_, Table_, MaxDataPoints_, FrontendDatasource_, From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.RefId = "";
			this.RuleUid = "";
			this.RawQuery = false;
			this.Query = "";
			this.DateTimeCol = "";
			this.DateCol = "";
			this.DateTimeType = "";
			this.Extrapolate = false;
			this.SkipComments = false;
			this.AddMetadata = false;
			this.UseWindowFuncForMacros = false;
			this.Format = "";
			this.Round = "";
			this.IntervalFactor = 0;
			this.Interval = "";
			this.IntervalSec = 0;
			this.IntervalMs = 0;
			this.Database = "";
			this.Table = "";
			this.MaxDataPoints = new $Int64(0, 0);
			this.FrontendDatasource = false;
			this.From = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$4.nil);
			this.To = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$4.nil);
			return;
		}
		this.RefId = RefId_;
		this.RuleUid = RuleUid_;
		this.RawQuery = RawQuery_;
		this.Query = Query_;
		this.DateTimeCol = DateTimeCol_;
		this.DateCol = DateCol_;
		this.DateTimeType = DateTimeType_;
		this.Extrapolate = Extrapolate_;
		this.SkipComments = SkipComments_;
		this.AddMetadata = AddMetadata_;
		this.UseWindowFuncForMacros = UseWindowFuncForMacros_;
		this.Format = Format_;
		this.Round = Round_;
		this.IntervalFactor = IntervalFactor_;
		this.Interval = Interval_;
		this.IntervalSec = IntervalSec_;
		this.IntervalMs = IntervalMs_;
		this.Database = Database_;
		this.Table = Table_;
		this.MaxDataPoints = MaxDataPoints_;
		this.FrontendDatasource = FrontendDatasource_;
		this.From = From_;
		this.To = To_;
	});
	betweenBracesResult = $pkg.betweenBracesResult = $newType(0, $kindStruct, "eval.betweenBracesResult", true, "github.com/altinity/clickhouse-grafana/pkg/eval", false, function(result_, error_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.result = "";
			this.error = "";
			return;
		}
		this.result = result_;
		this.error = error_;
	});
	EvalAST = $pkg.EvalAST = $newType(0, $kindStruct, "eval.EvalAST", true, "github.com/altinity/clickhouse-grafana/pkg/eval", true, function(Obj_, Arr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Obj = false;
			this.Arr = sliceType$1.nil;
			return;
		}
		this.Obj = Obj_;
		this.Arr = Arr_;
	});
	EvalQueryScanner = $pkg.EvalQueryScanner = $newType(0, $kindStruct, "eval.EvalQueryScanner", true, "github.com/altinity/clickhouse-grafana/pkg/eval", true, function(Tree_, RootToken_, Token_, SkipSpace_, re_, expectedNext_, _sOriginal_, _s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Tree = ptrType.nil;
			this.RootToken = "";
			this.Token = "";
			this.SkipSpace = false;
			this.re = ptrType$2.nil;
			this.expectedNext = false;
			this._sOriginal = "";
			this._s = "";
			return;
		}
		this.Tree = Tree_;
		this.RootToken = RootToken_;
		this.Token = Token_;
		this.SkipSpace = SkipSpace_;
		this.re = re_;
		this.expectedNext = expectedNext_;
		this._sOriginal = _sOriginal_;
		this._s = _s_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($Uint8);
	ptrType = $ptrType(EvalAST);
	ptrType$1 = $ptrType(strings.Builder);
	sliceType$3 = $sliceType($Int);
	ptrType$2 = $ptrType(regexp2.Regexp);
	ptrType$3 = $ptrType(regexp2.Match);
	sliceType$4 = $sliceType($Int32);
	ptrType$4 = $ptrType(time.Location);
	ptrType$5 = $ptrType(regexp.Regexp);
	funcType = $funcType([sliceType], [$String], false);
	ptrType$6 = $ptrType(EvalQuery);
	mapType = $mapType($String, $emptyInterface);
	ptrType$7 = $ptrType(EvalQueryScanner);
	parseInterval = function(interval, intervalFactor) {
		var {$24r, $24r$1, $24r$2, $24r$3, _entry, _i, _r$31, _r$32, _r$33, _r$34, _ref, _tuple, _tuple$1, err, exists, i, interval, intervalFactor, millis, multiplier, n, num, numStr, scaledMilliseconds, scaledSeconds, startNum, suffix, suffixLen, totalMilliseconds, unit, unitSuffixes, x, $s, $r, $c} = $restore(this, {interval, intervalFactor});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (intervalFactor <= 0) {
			$s = -1; return [0, 0, $ifaceNil];
		}
		unitSuffixes = new sliceType(["ms", "y", "M", "w", "d", "h", "m", "s"]);
		totalMilliseconds = new $Int64(0, 0);
		i = 0;
		n = interval.length;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			while (true) {
				if (!(i < n && unicode.IsSpace(((interval.charCodeAt(i) >> 0))))) { break; }
				i = i + (1) >> 0;
			}
			if (i >= n) {
				/* break; */ $s = 2; continue;
			}
			startNum = i;
			while (true) {
				if (!(i < n && (unicode.IsDigit(((interval.charCodeAt(i) >> 0))) || (interval.charCodeAt(i) === 46)))) { break; }
				i = i + (1) >> 0;
			}
			/* */ if (startNum === i) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (startNum === i) { */ case 3:
				_r$31 = fmt.Errorf("expected number at position %d in interval '%s'", new sliceType$1([new $Int(i), new $String(interval)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				$24r = [0, 0, _r$31];
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			numStr = $substring(interval, startNum, i);
			_tuple = strconv.ParseFloat(numStr, 64);
			num = _tuple[0];
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
				_r$32 = fmt.Errorf("invalid number '%s' in interval '%s': %v", new sliceType$1([new $String(numStr), new $String(interval), err])); /* */ $s = 9; case 9: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				$24r$1 = [0, 0, _r$32];
				$s = 10; case 10: return $24r$1;
			/* } */ case 8:
			unit = "";
			_ref = unitSuffixes;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				suffix = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				suffixLen = suffix.length;
				if ((i + suffixLen >> 0) <= n && $substring(interval, i, (i + suffixLen >> 0)) === suffix) {
					unit = suffix;
					i = i + (suffixLen) >> 0;
					break;
				}
				_i++;
			}
			/* */ if (unit === "") { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (unit === "") { */ case 11:
				_r$33 = fmt.Errorf("unknown unit at position %d in interval '%s'", new sliceType$1([new $Int(i), new $String(interval)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				$24r$2 = [0, 0, _r$33];
				$s = 14; case 14: return $24r$2;
			/* } */ case 12:
			_tuple$1 = (_entry = $mapIndex(unitsInMilliseconds,$String.keyFor(unit)), _entry !== undefined ? [_entry.v, true] : [new $Int64(0, 0), false]);
			multiplier = _tuple$1[0];
			exists = _tuple$1[1];
			/* */ if (!exists) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!exists) { */ case 15:
				_r$34 = fmt.Errorf("unsupported unit '%s' in interval '%s'", new sliceType$1([new $String(unit), new $String(interval)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				$24r$3 = [0, 0, _r$34];
				$s = 18; case 18: return $24r$3;
			/* } */ case 16:
			millis = (new $Int64(0, num * ($flatten64(multiplier))));
			totalMilliseconds = (x = millis, new $Int64(totalMilliseconds.$high + x.$high, totalMilliseconds.$low + x.$low));
		$s = 1; continue;
		case 2:
		scaledMilliseconds = $mul64(totalMilliseconds, (new $Int64(0, intervalFactor)));
		scaledSeconds = $div64(scaledMilliseconds, new $Int64(0, 1000), false);
		if ((scaledSeconds.$high === 0 && scaledSeconds.$low === 0)) {
			scaledSeconds = new $Int64(0, 1);
		}
		$s = -1; return [(((scaledSeconds.$low + ((scaledSeconds.$high >> 31) * 4294967296)) >> 0)), (((scaledMilliseconds.$low + ((scaledMilliseconds.$high >> 31) * 4294967296)) >> 0)), $ifaceNil];
		/* */ } return; } var $f = {$blk: parseInterval, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _entry, _i, _r$31, _r$32, _r$33, _r$34, _ref, _tuple, _tuple$1, err, exists, i, interval, intervalFactor, millis, multiplier, n, num, numStr, scaledMilliseconds, scaledSeconds, startNum, suffix, suffixLen, totalMilliseconds, unit, unitSuffixes, x, $s};return $f;
	};
	EvalQuery.ptr.prototype.ApplyMacrosAndTimeRangeToQuery = function() {
		var {_r$31, _tuple, err, q, query, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q.replace(q.Query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		query = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		$s = -1; return [query, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.ApplyMacrosAndTimeRangeToQuery, $c: true, $r, _r$31, _tuple, err, q, query, $s};return $f;
	};
	EvalQuery.prototype.ApplyMacrosAndTimeRangeToQuery = function() { return this.$val.ApplyMacrosAndTimeRangeToQuery(); };
	EvalQuery.ptr.prototype.replace = function(query) {
		var {$24r, $24r$1, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _r$58, _r$59, _r$60, _r$61, _r$62, _r$63, _r$64, _r$65, _r$66, _r$67, _r$68, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, ast, err, err$1, from, i, intervalMs, intervalSeconds, ms, myRound, q, query, scanner, table, timeFilter, timeFilterMs, to, topQueryAST, x, x$1, $s, $r, $c} = $restore(this, {query});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		err = $ifaceNil;
		query = strings.Trim(query, " \xA0\t\r\n");
		if (q.DateTimeType === "") {
			q.DateTimeType = "DATETIME";
		}
		if (q.IntervalFactor === 0) {
			q.IntervalFactor = 1;
		}
		i = new time.Duration(0, 1000000000);
		ms = new time.Duration(0, 1000000);
		/* */ if (!(q.Interval === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(q.Interval === "")) { */ case 1:
			_r$31 = parseInterval(q.Interval, q.IntervalFactor); /* */ $s = 3; case 3: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_tuple = _r$31;
			intervalSeconds = _tuple[0];
			intervalMs = _tuple[1];
			err$1 = _tuple[2];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return ["", err$1];
			}
			q.IntervalSec = intervalSeconds;
			q.IntervalMs = intervalMs;
		/* } */ case 2:
		/* */ if (q.IntervalSec <= 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (q.IntervalSec <= 0) { */ case 4:
			if ((x = q.MaxDataPoints, (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) {
				i = $div64($clone(q.To, time.Time).Sub($clone(q.From, time.Time)), ((x$1 = q.MaxDataPoints, new time.Duration(x$1.$high, x$1.$low))), false);
			} else {
				i = $div64($clone(q.To, time.Time).Sub($clone(q.From, time.Time)), new time.Duration(0, 100), false);
			}
			if ((i.$high > 0 || (i.$high === 0 && i.$low > 1000000)) && q.IntervalMs <= 0) {
				ms = i;
			}
			if ((i.$high < 0 || (i.$high === 0 && i.$low < 1000000000))) {
				i = new time.Duration(0, 1000000000);
			}
			_r$32 = fmt.Sprintf("%fs", new sliceType$1([new $Float64(math.Ceil(i.Seconds()))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			_r$33 = q.convertInterval(_r$32, q.IntervalFactor, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_tuple$1 = _r$33;
			q.IntervalSec = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return ["", err];
			}
		/* } */ case 5:
		/* */ if (q.IntervalMs <= 0) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (q.IntervalMs <= 0) { */ case 8:
			_r$34 = fmt.Sprintf("%dms", new sliceType$1([ms.Milliseconds()])); /* */ $s = 10; case 10: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			_r$35 = q.convertInterval(_r$34, q.IntervalFactor, true); /* */ $s = 11; case 11: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			_tuple$2 = _r$35;
			q.IntervalMs = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return ["", err];
			}
		/* } */ case 9:
		scanner = $clone(NewScanner(query), EvalQueryScanner);
		_r$36 = scanner.ToAST(); /* */ $s = 12; case 12: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		_tuple$3 = _r$36;
		ast = _tuple$3[0];
		err = _tuple$3[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 13:
			_r$37 = fmt.Errorf("parse AST error: %v ", new sliceType$1([err])); /* */ $s = 15; case 15: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			$24r = ["", _r$37];
			$s = 16; case 16: return $24r;
		/* } */ case 14:
		topQueryAST = ast;
		_r$38 = q.applyMacros(query, topQueryAST); /* */ $s = 17; case 17: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
		_tuple$4 = _r$38;
		query = _tuple$4[0];
		err = _tuple$4[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 18:
			_r$39 = fmt.Errorf("applyMacros error: %v", new sliceType$1([err])); /* */ $s = 20; case 20: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			$24r$1 = ["", _r$39];
			$s = 21; case 21: return $24r$1;
		/* } */ case 19:
		/* */ if (q.SkipComments) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (q.SkipComments) { */ case 22:
			_r$40 = scanner.RemoveComments(query); /* */ $s = 24; case 24: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
			_tuple$5 = _r$40;
			query = _tuple$5[0];
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return ["", err];
			}
		/* } */ case 23:
		if (q.AddMetadata) {
			query = scanner.AddMetadata(query, q);
		}
		_r$41 = q.unescape(query); /* */ $s = 25; case 25: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
		_tuple$6 = _r$41;
		query = _tuple$6[0];
		err = _tuple$6[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_r$42 = q.getDateTimeFilter(q.DateTimeType); /* */ $s = 26; case 26: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
		timeFilter = _r$42;
		_r$43 = q.getDateTimeFilterMs(q.DateTimeType); /* */ $s = 27; case 27: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
		timeFilterMs = _r$43;
		if (!(q.DateCol === "")) {
			timeFilter = q.getDateFilter() + " AND " + timeFilter;
			timeFilterMs = q.getDateFilter() + " AND " + timeFilterMs;
		}
		_r$44 = q.escapeTableIdentifier(q.Table); /* */ $s = 28; case 28: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
		table = _r$44;
		/* */ if (!(q.Database === "")) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (!(q.Database === "")) { */ case 29:
			_r$45 = q.escapeTableIdentifier(q.Database); /* */ $s = 31; case 31: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
			table = _r$45 + "." + table;
		/* } */ case 30:
		_tuple$7 = q.convertInterval(q.Round, q.IntervalFactor, false);
		myRound = _tuple$7[0];
		err = _tuple$7[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		if (q.Round === "$step") {
			myRound = q.IntervalSec;
		}
		from = q.convertTimestamp($clone(q.round($clone(q.From, time.Time), myRound), time.Time));
		to = q.convertTimestamp($clone(q.round($clone(q.To, time.Time), myRound), time.Time));
		_r$46 = timeSeriesMacroRegexp.ReplaceAllString(query, strings.Replace(q.getTimeSeries(q.DateTimeType), "$", "$$", -1)); /* */ $s = 32; case 32: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
		query = _r$46;
		_r$47 = timeSeriesMsMacroRegexp.ReplaceAllString(query, strings.Replace(q.getTimeSeriesMs(q.DateTimeType), "$", "$$", -1)); /* */ $s = 33; case 33: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
		query = _r$47;
		_r$48 = naturalTimeSeriesMacroRegexp.ReplaceAllString(query, strings.Replace(q.getNaturalTimeSeries(q.DateTimeType, from, to), "$", "$$", -1)); /* */ $s = 34; case 34: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
		query = _r$48;
		_r$49 = timeFilterMacroRegexp.ReplaceAllString(query, strings.Replace(timeFilter, "$", "$$", -1)); /* */ $s = 35; case 35: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
		query = _r$49;
		_r$50 = timeFilterMsMacroRegexp.ReplaceAllString(query, strings.Replace(timeFilterMs, "$", "$$", -1)); /* */ $s = 36; case 36: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
		query = _r$50;
		_r$51 = tableMacroRegexp.ReplaceAllString(query, table); /* */ $s = 37; case 37: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
		query = _r$51;
		_arg = query;
		_r$52 = fmt.Sprintf("%d", new sliceType$1([from])); /* */ $s = 38; case 38: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
		_arg$1 = _r$52;
		_r$53 = fromMacroRegexp.ReplaceAllString(_arg, _arg$1); /* */ $s = 39; case 39: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
		query = _r$53;
		_arg$2 = query;
		_r$54 = fmt.Sprintf("%d", new sliceType$1([to])); /* */ $s = 40; case 40: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
		_arg$3 = _r$54;
		_r$55 = toMacroRegexp.ReplaceAllString(_arg$2, _arg$3); /* */ $s = 41; case 41: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
		query = _r$55;
		_arg$4 = query;
		_r$56 = fmt.Sprintf("%d", new sliceType$1([$clone(q.From, time.Time).UnixMilli()])); /* */ $s = 42; case 42: if($c) { $c = false; _r$56 = _r$56.$blk(); } if (_r$56 && _r$56.$blk !== undefined) { break s; }
		_arg$5 = _r$56;
		_r$57 = fromMsMacroRegexp.ReplaceAllString(_arg$4, _arg$5); /* */ $s = 43; case 43: if($c) { $c = false; _r$57 = _r$57.$blk(); } if (_r$57 && _r$57.$blk !== undefined) { break s; }
		query = _r$57;
		_arg$6 = query;
		_r$58 = fmt.Sprintf("%d", new sliceType$1([$clone(q.To, time.Time).UnixMilli()])); /* */ $s = 44; case 44: if($c) { $c = false; _r$58 = _r$58.$blk(); } if (_r$58 && _r$58.$blk !== undefined) { break s; }
		_arg$7 = _r$58;
		_r$59 = toMsMacroRegexp.ReplaceAllString(_arg$6, _arg$7); /* */ $s = 45; case 45: if($c) { $c = false; _r$59 = _r$59.$blk(); } if (_r$59 && _r$59.$blk !== undefined) { break s; }
		query = _r$59;
		_arg$8 = query;
		_r$60 = q.escapeIdentifier(q.DateCol); /* */ $s = 46; case 46: if($c) { $c = false; _r$60 = _r$60.$blk(); } if (_r$60 && _r$60.$blk !== undefined) { break s; }
		_arg$9 = _r$60;
		_r$61 = dateColMacroRegexp.ReplaceAllString(_arg$8, _arg$9); /* */ $s = 47; case 47: if($c) { $c = false; _r$61 = _r$61.$blk(); } if (_r$61 && _r$61.$blk !== undefined) { break s; }
		query = _r$61;
		_arg$10 = query;
		_r$62 = q.escapeIdentifier(q.DateTimeCol); /* */ $s = 48; case 48: if($c) { $c = false; _r$62 = _r$62.$blk(); } if (_r$62 && _r$62.$blk !== undefined) { break s; }
		_arg$11 = _r$62;
		_r$63 = dateTimeColMacroRegexp.ReplaceAllString(_arg$10, _arg$11); /* */ $s = 49; case 49: if($c) { $c = false; _r$63 = _r$63.$blk(); } if (_r$63 && _r$63.$blk !== undefined) { break s; }
		query = _r$63;
		_arg$12 = query;
		_r$64 = fmt.Sprintf("%d", new sliceType$1([new $Int(q.IntervalSec)])); /* */ $s = 50; case 50: if($c) { $c = false; _r$64 = _r$64.$blk(); } if (_r$64 && _r$64.$blk !== undefined) { break s; }
		_arg$13 = _r$64;
		_r$65 = intervalMacroRegexp.ReplaceAllString(_arg$12, _arg$13); /* */ $s = 51; case 51: if($c) { $c = false; _r$65 = _r$65.$blk(); } if (_r$65 && _r$65.$blk !== undefined) { break s; }
		query = _r$65;
		_arg$14 = query;
		_r$66 = fmt.Sprintf("%d", new sliceType$1([new $Int(q.IntervalMs)])); /* */ $s = 52; case 52: if($c) { $c = false; _r$66 = _r$66.$blk(); } if (_r$66 && _r$66.$blk !== undefined) { break s; }
		_arg$15 = _r$66;
		_r$67 = intervalMsMacroRegexp.ReplaceAllString(_arg$14, _arg$15); /* */ $s = 53; case 53: if($c) { $c = false; _r$67 = _r$67.$blk(); } if (_r$67 && _r$67.$blk !== undefined) { break s; }
		query = _r$67;
		_r$68 = q.ReplaceTimeFilters(query, myRound); /* */ $s = 54; case 54: if($c) { $c = false; _r$68 = _r$68.$blk(); } if (_r$68 && _r$68.$blk !== undefined) { break s; }
		query = _r$68;
		$s = -1; return [query, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.replace, $c: true, $r, $24r, $24r$1, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _r$58, _r$59, _r$60, _r$61, _r$62, _r$63, _r$64, _r$65, _r$66, _r$67, _r$68, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, ast, err, err$1, from, i, intervalMs, intervalSeconds, ms, myRound, q, query, scanner, table, timeFilter, timeFilterMs, to, topQueryAST, x, x$1, $s};return $f;
	};
	EvalQuery.prototype.replace = function(query) { return this.$val.replace(query); };
	EvalQuery.ptr.prototype.escapeIdentifier = function(identifier) {
		var {_r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _v, _v$1, identifier, q, $s, $r, $c} = $restore(this, {identifier});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_]+$"); /* */ $s = 6; case 6: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$32 = _r$31.MatchString(identifier); /* */ $s = 7; case 7: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		if (_r$32) { _v$1 = true; $s = 5; continue s; }
		_r$33 = regexp.MustCompile("\\(.*\\)"); /* */ $s = 8; case 8: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_r$34 = _r$33.MatchString(identifier); /* */ $s = 9; case 9: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		_v$1 = _r$34; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$35 = regexp.MustCompile("[/*+\\-]"); /* */ $s = 10; case 10: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_r$36 = _r$35.MatchString(identifier); /* */ $s = 11; case 11: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		_v = _r$36; case 4:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return identifier;
		/* } else { */ case 2:
			$s = -1; return "\"" + strings.Replace(identifier, "\"", "\\\"", -1) + "\"";
		/* } */ case 3:
		$s = -1; return "";
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.escapeIdentifier, $c: true, $r, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _v, _v$1, identifier, q, $s};return $f;
	};
	EvalQuery.prototype.escapeIdentifier = function(identifier) { return this.$val.escapeIdentifier(identifier); };
	EvalQuery.ptr.prototype.escapeTableIdentifier = function(identifier) {
		var {_r$31, _r$32, identifier, q, $s, $r, $c} = $restore(this, {identifier});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_]+$"); /* */ $s = 4; case 4: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$32 = _r$31.MatchString(identifier); /* */ $s = 5; case 5: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		/* */ if (_r$32) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$32) { */ case 1:
			$s = -1; return identifier;
		/* } else { */ case 2:
			$s = -1; return "`" + strings.Replace(identifier, "`", "\\`", -1) + "`";
		/* } */ case 3:
		$s = -1; return "";
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.escapeTableIdentifier, $c: true, $r, _r$31, _r$32, identifier, q, $s};return $f;
	};
	EvalQuery.prototype.escapeTableIdentifier = function(identifier) { return this.$val.escapeTableIdentifier(identifier); };
	EvalQuery.ptr.prototype.replaceRegexpWithCallBack = function(re, str, replacer) {
		var {_i, _r$31, _r$32, _ref, groups, i, lastIndex, q, re, replacer, result, str, v, x, $s, $r, $c} = $restore(this, {re, str, replacer});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		result = "";
		lastIndex = 0;
		_r$31 = re.FindAllSubmatchIndex((new sliceType$2($stringToBytes(str))), -1); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_ref = _r$31;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			groups = sliceType.nil;
			i = 0;
			while (true) {
				if (!(i < v.$length)) { break; }
				groups = $append(groups, $substring(str, ((i < 0 || i >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + i]), (x = i + 1 >> 0, ((x < 0 || x >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x]))));
				i = i + (2) >> 0;
			}
			_r$32 = replacer(groups); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			result = result + ($substring(str, lastIndex, (0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0])) + _r$32);
			lastIndex = (1 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 1]);
			_i++;
		$s = 2; continue;
		case 3:
		$s = -1; return result + $substring(str, lastIndex);
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.replaceRegexpWithCallBack, $c: true, $r, _i, _r$31, _r$32, _ref, groups, i, lastIndex, q, re, replacer, result, str, v, x, $s};return $f;
	};
	EvalQuery.prototype.replaceRegexpWithCallBack = function(re, str, replacer) { return this.$val.replaceRegexpWithCallBack(re, str, replacer); };
	EvalQuery.ptr.prototype.ReplaceTimeFilters = function(query, round) {
		var {_arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, from, fromTS, q, query, round, to, toTS, x, $s, $r, $c} = $restore(this, {query, round});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = [q];
		q[0] = this;
		from = $clone(q[0].round($clone(q[0].From, time.Time), round), time.Time);
		to = $clone(q[0].round($clone(q[0].To, time.Time), round), time.Time);
		if (round > 0) {
			time.Time.copy(to, $clone(to, time.Time).Add($mul64((new time.Duration(0, ((($imul(round, 2))) - 1 >> 0))), new time.Duration(0, 1000000000))));
			time.Time.copy(from, $clone(from, time.Time).Add($mul64((x = (new time.Duration(0, ((($imul(round, 2))) - 1 >> 0))), new time.Duration(-x.$high, -x.$low)), new time.Duration(0, 1000000000))));
		}
		fromTS = q[0].convertTimestamp($clone(from, time.Time));
		toTS = q[0].convertTimestamp($clone(to, time.Time));
		_r$31 = q[0].replaceRegexpWithCallBack(timeFilterByColumnMacroRegexp, query, (function(q) { return function $b(groups) {
			var {$24r, _r$31, groups, $s, $r, $c} = $restore(this, {groups});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$31 = q[0].getFilterSqlForDateTime((1 >= groups.$length ? ($throwRuntimeError("index out of range"), undefined) : groups.$array[groups.$offset + 1]), q[0].DateTimeType); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			$24r = _r$31;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$31, groups, $s};return $f;
		}; })(q)); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		query = _r$31;
		_r$32 = q[0].replaceRegexpWithCallBack(timeFilter64ByColumnMacroRegexp, query, (function(q) { return function $b(groups) {
			var {$24r, _r$32, groups, $s, $r, $c} = $restore(this, {groups});
			/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
			_r$32 = q[0].getFilterSqlForDateTimeMs((1 >= groups.$length ? ($throwRuntimeError("index out of range"), undefined) : groups.$array[groups.$offset + 1]), q[0].DateTimeType); /* */ $s = 1; case 1: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = _r$32;
			$s = 2; case 2: return $24r;
			/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$32, groups, $s};return $f;
		}; })(q)); /* */ $s = 2; case 2: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		query = _r$32;
		_arg = query;
		_r$33 = fmt.Sprintf("%d", new sliceType$1([fromTS])); /* */ $s = 3; case 3: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_arg$1 = _r$33;
		_r$34 = fromMacroRegexp.ReplaceAllString(_arg, _arg$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		query = _r$34;
		_arg$2 = query;
		_r$35 = fmt.Sprintf("%d", new sliceType$1([toTS])); /* */ $s = 5; case 5: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_arg$3 = _r$35;
		_r$36 = toMacroRegexp.ReplaceAllString(_arg$2, _arg$3); /* */ $s = 6; case 6: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		query = _r$36;
		_arg$4 = query;
		_r$37 = fmt.Sprintf("%d", new sliceType$1([$clone(from, time.Time).UnixMilli()])); /* */ $s = 7; case 7: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
		_arg$5 = _r$37;
		_r$38 = fromMsMacroRegexp.ReplaceAllString(_arg$4, _arg$5); /* */ $s = 8; case 8: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
		query = _r$38;
		_arg$6 = query;
		_r$39 = fmt.Sprintf("%d", new sliceType$1([$clone(to, time.Time).UnixMilli()])); /* */ $s = 9; case 9: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
		_arg$7 = _r$39;
		_r$40 = toMsMacroRegexp.ReplaceAllString(_arg$6, _arg$7); /* */ $s = 10; case 10: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
		query = _r$40;
		$s = -1; return query;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.ReplaceTimeFilters, $c: true, $r, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, from, fromTS, q, query, round, to, toTS, x, $s};return $f;
	};
	EvalQuery.prototype.ReplaceTimeFilters = function(query, round) { return this.$val.ReplaceTimeFilters(query, round); };
	EvalQuery.ptr.prototype.getFilterSqlForDateTimeMs = function(columnName, dateTimeType) {
		var {$24r, _arg, _arg$1, _arg$2, _arg$3, _r$31, _r$32, _r$33, columnName, convertFn, dateTimeType, from, q, to, $s, $r, $c} = $restore(this, {columnName, dateTimeType});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		dateTimeType = [dateTimeType];
		q = this;
		convertFn = (function(dateTimeType) { return function(t) {
			var t;
			if (dateTimeType[0] === "DATETIME") {
				return "toDateTime(" + t + ")";
			}
			if (dateTimeType[0] === "DATETIME64") {
				return "toDateTime64(" + t + ",3)";
			}
			if (dateTimeType[0] === "FLOAT") {
				return t + "/1000";
			}
			if (dateTimeType[0] === "TIMESTAMP") {
				return t + "/1000";
			}
			if (dateTimeType[0] === "TIMESTAMP64_3") {
				return t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_6") {
				return "1000*" + t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_9") {
				return "1000000*" + t;
			}
			return t;
		}; })(dateTimeType);
		from = "$__from";
		to = "$__to";
		if (dateTimeType[0] === "DATETIME64" || dateTimeType[0] === "DATETIME") {
			from = "$__from/1000";
			to = "$__to/1000";
		}
		_arg = new $String(columnName);
		_r$31 = convertFn(from); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$31);
		_arg$2 = new $String(columnName);
		_r$32 = convertFn(to); /* */ $s = 2; case 2: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		_arg$3 = new $String(_r$32);
		_r$33 = fmt.Sprintf("%s >= %s AND %s <= %s", new sliceType$1([_arg, _arg$1, _arg$2, _arg$3])); /* */ $s = 3; case 3: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		$24r = _r$33;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.getFilterSqlForDateTimeMs, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _arg$3, _r$31, _r$32, _r$33, columnName, convertFn, dateTimeType, from, q, to, $s};return $f;
	};
	EvalQuery.prototype.getFilterSqlForDateTimeMs = function(columnName, dateTimeType) { return this.$val.getFilterSqlForDateTimeMs(columnName, dateTimeType); };
	EvalQuery.ptr.prototype.getFilterSqlForDateTime = function(columnName, dateTimeType) {
		var {$24r, _arg, _arg$1, _arg$2, _arg$3, _r$31, _r$32, _r$33, columnName, convertFn, dateTimeType, from, q, to, $s, $r, $c} = $restore(this, {columnName, dateTimeType});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		dateTimeType = [dateTimeType];
		q = this;
		convertFn = (function(dateTimeType) { return function(t) {
			var t;
			if (dateTimeType[0] === "DATETIME") {
				return "toDateTime(" + t + ")";
			}
			if (dateTimeType[0] === "DATETIME64") {
				return "toDateTime64(" + t + ",3)";
			}
			if (dateTimeType[0] === "TIMESTAMP64_3") {
				return "1000*" + t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_6") {
				return "1000000*" + t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_9") {
				return "1000000000*" + t;
			}
			return t;
		}; })(dateTimeType);
		from = "$from";
		to = "$to";
		if (dateTimeType[0] === "DATETIME64") {
			from = "$__from/1000";
			to = "$__to/1000";
		}
		_arg = new $String(columnName);
		_r$31 = convertFn(from); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$31);
		_arg$2 = new $String(columnName);
		_r$32 = convertFn(to); /* */ $s = 2; case 2: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		_arg$3 = new $String(_r$32);
		_r$33 = fmt.Sprintf("%s >= %s AND %s <= %s", new sliceType$1([_arg, _arg$1, _arg$2, _arg$3])); /* */ $s = 3; case 3: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		$24r = _r$33;
		$s = 4; case 4: return $24r;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.getFilterSqlForDateTime, $c: true, $r, $24r, _arg, _arg$1, _arg$2, _arg$3, _r$31, _r$32, _r$33, columnName, convertFn, dateTimeType, from, q, to, $s};return $f;
	};
	EvalQuery.prototype.getFilterSqlForDateTime = function(columnName, dateTimeType) { return this.$val.getFilterSqlForDateTime(columnName, dateTimeType); };
	EvalQuery.ptr.prototype.applyMacros = function(query, ast) {
		var {$24r, $24r$1, $24r$10, $24r$11, $24r$12, $24r$13, $24r$14, $24r$15, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, ast, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		/* */ if (q.contain(ast, "$columns")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (q.contain(ast, "$columns")) { */ case 1:
			_r$31 = q.columns(query, ast); /* */ $s = 3; case 3: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			$24r = _r$31;
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		/* */ if (q.contain(ast, "$columnsMs")) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (q.contain(ast, "$columnsMs")) { */ case 5:
			_r$32 = q.columnsMs(query, ast); /* */ $s = 7; case 7: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r$1 = _r$32;
			$s = 8; case 8: return $24r$1;
		/* } */ case 6:
		/* */ if (q.contain(ast, "$lttb")) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (q.contain(ast, "$lttb")) { */ case 9:
			_r$33 = q.lttb(query, ast); /* */ $s = 11; case 11: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			$24r$2 = _r$33;
			$s = 12; case 12: return $24r$2;
		/* } */ case 10:
		/* */ if (q.contain(ast, "$lttbMs")) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (q.contain(ast, "$lttbMs")) { */ case 13:
			_r$34 = q.lttbMs(query, ast); /* */ $s = 15; case 15: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			$24r$3 = _r$34;
			$s = 16; case 16: return $24r$3;
		/* } */ case 14:
		/* */ if (q.contain(ast, "$rateColumnsAggregated")) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (q.contain(ast, "$rateColumnsAggregated")) { */ case 17:
			_r$35 = q.rateColumnsAggregated(query, ast); /* */ $s = 19; case 19: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			$24r$4 = _r$35;
			$s = 20; case 20: return $24r$4;
		/* } */ case 18:
		/* */ if (q.contain(ast, "$rateColumns")) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (q.contain(ast, "$rateColumns")) { */ case 21:
			_r$36 = q.rateColumns(query, ast); /* */ $s = 23; case 23: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			$24r$5 = _r$36;
			$s = 24; case 24: return $24r$5;
		/* } */ case 22:
		/* */ if (q.contain(ast, "$rate")) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (q.contain(ast, "$rate")) { */ case 25:
			_r$37 = q.rate(query, ast); /* */ $s = 27; case 27: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			$24r$6 = _r$37;
			$s = 28; case 28: return $24r$6;
		/* } */ case 26:
		/* */ if (q.contain(ast, "$perSecond")) { $s = 29; continue; }
		/* */ $s = 30; continue;
		/* if (q.contain(ast, "$perSecond")) { */ case 29:
			_r$38 = q.perSecond(query, ast); /* */ $s = 31; case 31: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
			$24r$7 = _r$38;
			$s = 32; case 32: return $24r$7;
		/* } */ case 30:
		/* */ if (q.contain(ast, "$perSecondColumns")) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if (q.contain(ast, "$perSecondColumns")) { */ case 33:
			_r$39 = q.perSecondColumns(query, ast); /* */ $s = 35; case 35: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			$24r$8 = _r$39;
			$s = 36; case 36: return $24r$8;
		/* } */ case 34:
		/* */ if (q.contain(ast, "$perSecondColumnsAggregated")) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if (q.contain(ast, "$perSecondColumnsAggregated")) { */ case 37:
			_r$40 = q.perSecondColumnsAggregated(query, ast); /* */ $s = 39; case 39: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
			$24r$9 = _r$40;
			$s = 40; case 40: return $24r$9;
		/* } */ case 38:
		/* */ if (q.contain(ast, "$deltaColumnsAggregated")) { $s = 41; continue; }
		/* */ $s = 42; continue;
		/* if (q.contain(ast, "$deltaColumnsAggregated")) { */ case 41:
			_r$41 = q.deltaColumnsAggregated(query, ast); /* */ $s = 43; case 43: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
			$24r$10 = _r$41;
			$s = 44; case 44: return $24r$10;
		/* } */ case 42:
		/* */ if (q.contain(ast, "$delta")) { $s = 45; continue; }
		/* */ $s = 46; continue;
		/* if (q.contain(ast, "$delta")) { */ case 45:
			_r$42 = q.delta(query, ast); /* */ $s = 47; case 47: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
			$24r$11 = _r$42;
			$s = 48; case 48: return $24r$11;
		/* } */ case 46:
		/* */ if (q.contain(ast, "$deltaColumns")) { $s = 49; continue; }
		/* */ $s = 50; continue;
		/* if (q.contain(ast, "$deltaColumns")) { */ case 49:
			_r$43 = q.deltaColumns(query, ast); /* */ $s = 51; case 51: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
			$24r$12 = _r$43;
			$s = 52; case 52: return $24r$12;
		/* } */ case 50:
		/* */ if (q.contain(ast, "$increase")) { $s = 53; continue; }
		/* */ $s = 54; continue;
		/* if (q.contain(ast, "$increase")) { */ case 53:
			_r$44 = q.increase(query, ast); /* */ $s = 55; case 55: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
			$24r$13 = _r$44;
			$s = 56; case 56: return $24r$13;
		/* } */ case 54:
		/* */ if (q.contain(ast, "$increaseColumns")) { $s = 57; continue; }
		/* */ $s = 58; continue;
		/* if (q.contain(ast, "$increaseColumns")) { */ case 57:
			_r$45 = q.increaseColumns(query, ast); /* */ $s = 59; case 59: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
			$24r$14 = _r$45;
			$s = 60; case 60: return $24r$14;
		/* } */ case 58:
		/* */ if (q.contain(ast, "$increaseColumnsAggregated")) { $s = 61; continue; }
		/* */ $s = 62; continue;
		/* if (q.contain(ast, "$increaseColumnsAggregated")) { */ case 61:
			_r$46 = q.increaseColumnsAggregated(query, ast); /* */ $s = 63; case 63: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
			$24r$15 = _r$46;
			$s = 64; case 64: return $24r$15;
		/* } */ case 62:
		$s = -1; return [query, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.applyMacros, $c: true, $r, $24r, $24r$1, $24r$10, $24r$11, $24r$12, $24r$13, $24r$14, $24r$15, $24r$2, $24r$3, $24r$4, $24r$5, $24r$6, $24r$7, $24r$8, $24r$9, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, ast, q, query, $s};return $f;
	};
	EvalQuery.prototype.applyMacros = function(query, ast) { return this.$val.applyMacros(query, ast); };
	EvalQuery.ptr.prototype.contain = function(ast, field) {
		var _entry, _tuple, ast, field, hasValue, q, value;
		q = this;
		_tuple = (_entry = $mapIndex(ast.Obj,$String.keyFor(field)), _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		value = _tuple[0];
		hasValue = _tuple[1];
		return hasValue && !($interfaceIsEqual(value, $ifaceNil)) && $assertType(value, ptrType).Arr.$length > 0;
	};
	EvalQuery.prototype.contain = function(ast, field) { return this.$val.contain(ast, field); };
	EvalQuery.ptr.prototype._parseMacro = function(macro, query) {
		var {_r$31, _tuple, err, fromIndex, mLen, mPos, macro, q, query, $s, $r, $c} = $restore(this, {macro, query});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		mLen = macro.length;
		mPos = strings.Index(query, macro);
		if ((mPos === -1) || !($substring(query, mPos, ((mPos + mLen >> 0) + 1 >> 0)) === macro + "(")) {
			$s = -1; return [new sliceType([query, ""]), $ifaceNil];
		}
		_r$31 = q._fromIndex(query, macro); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		fromIndex = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		$s = -1; return [new sliceType([$substring(query, 0, mPos), $substring(query, fromIndex)]), $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._parseMacro, $c: true, $r, _r$31, _tuple, err, fromIndex, mLen, mPos, macro, q, query, $s};return $f;
	};
	EvalQuery.prototype._parseMacro = function(macro, query) { return this.$val._parseMacro(macro, query); };
	EvalQuery.ptr.prototype.columns = function(query, ast) {
		var {$24r, $24r$1, _entry, _entry$1, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$columns", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$columns")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args === sliceType$1.nil || !((args.$length === 2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args === sliceType$1.nil || !((args.$length === 2))) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must equal 2 for $columns func. Parsed arguments are: %v", new sliceType$1([(_entry$1 = $mapIndex(ast.Obj,$String.keyFor("$columns")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$33 = q._columns($assertType((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String), $assertType((1 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 1]), $String), beforeMacrosQuery, fromQuery, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		$24r$1 = _r$33;
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.columns, $c: true, $r, $24r, $24r$1, _entry, _entry$1, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s};return $f;
	};
	EvalQuery.prototype.columns = function(query, ast) { return this.$val.columns(query, ast); };
	EvalQuery.ptr.prototype.columnsMs = function(query, ast) {
		var {$24r, $24r$1, _entry, _entry$1, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$columnsMs", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$columnsMs")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args === sliceType$1.nil || !((args.$length === 2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args === sliceType$1.nil || !((args.$length === 2))) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must equal 2 for $columnsMs func. Parsed arguments are: %v", new sliceType$1([(_entry$1 = $mapIndex(ast.Obj,$String.keyFor("$columnsMs")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$33 = q._columns($assertType((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String), $assertType((1 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 1]), $String), beforeMacrosQuery, fromQuery, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		$24r$1 = _r$33;
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.columnsMs, $c: true, $r, $24r, $24r$1, _entry, _entry$1, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s};return $f;
	};
	EvalQuery.prototype.columnsMs = function(query, ast) { return this.$val.columnsMs(query, ast); };
	EvalQuery.ptr.prototype._columns = function(key, value, beforeMacrosQuery, fromQuery, useMs) {
		var {$24r, $24r$1, $24r$2, $24r$3, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _tuple, beforeMacrosQuery, err, fromQuery, groupByIndex, groupByQuery, havingIndex, havingQuery, key, keyAlias, keySplit, matched, orderByIndex, orderByQuery, q, timeSeriesMacro, useMs, value, valueAlias, valueSplit, x, x$1, $s, $r, $c} = $restore(this, {key, value, beforeMacrosQuery, fromQuery, useMs});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		/* */ if ((key.charCodeAt((key.length - 1 >> 0)) === 41) || (value.charCodeAt((value.length - 1 >> 0)) === 41)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((key.charCodeAt((key.length - 1 >> 0)) === 41) || (value.charCodeAt((value.length - 1 >> 0)) === 41)) { */ case 1:
			_r$31 = fmt.Errorf("some of passed arguments are without aliases: %s, %s", new sliceType$1([new $String(key), new $String(value)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			$24r = ["", _r$31];
			$s = 4; case 4: return $24r;
		/* } */ case 2:
		keySplit = strings.Split(strings.Trim(key, " \xA0\t\r\n"), " ");
		keyAlias = (x = keySplit.$length - 1 >> 0, ((x < 0 || x >= keySplit.$length) ? ($throwRuntimeError("index out of range"), undefined) : keySplit.$array[keySplit.$offset + x]));
		valueSplit = strings.Split(strings.Trim(value, " \xA0\t\r\n"), " ");
		valueAlias = (x$1 = valueSplit.$length - 1 >> 0, ((x$1 < 0 || x$1 >= valueSplit.$length) ? ($throwRuntimeError("index out of range"), undefined) : valueSplit.$array[valueSplit.$offset + x$1]));
		groupByQuery = " GROUP BY t, " + keyAlias;
		orderByQuery = " ORDER BY t, " + keyAlias;
		havingQuery = "";
		_r$32 = regexp.MatchString("(?mi)^\\s*FROM\\s*\\(", fromQuery); /* */ $s = 5; case 5: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		_tuple = _r$32;
		matched = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil) && !matched) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil) && !matched) { */ case 6:
			_r$33 = strings.ToLower(fromQuery); /* */ $s = 8; case 8: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_r$34 = findKeywordOutsideBrackets(_r$33, "group by"); /* */ $s = 9; case 9: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			groupByIndex = _r$34;
			_r$35 = strings.ToLower(fromQuery); /* */ $s = 10; case 10: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			_r$36 = findKeywordOutsideBrackets(_r$35, "having"); /* */ $s = 11; case 11: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			havingIndex = _r$36;
			_r$37 = strings.ToLower(fromQuery); /* */ $s = 12; case 12: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			_r$38 = findKeywordOutsideBrackets(_r$37, "order by"); /* */ $s = 13; case 13: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
			orderByIndex = _r$38;
			/* */ if (havingIndex >= 0 && orderByIndex >= 0 && havingIndex >= orderByIndex) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (havingIndex >= 0 && orderByIndex >= 0 && havingIndex >= orderByIndex) { */ case 14:
				_r$39 = fmt.Errorf("ORDER BY clause shall be before HAVING", sliceType$1.nil); /* */ $s = 16; case 16: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
				$24r$1 = ["", _r$39];
				$s = 17; case 17: return $24r$1;
			/* } */ case 15:
			/* */ if (groupByIndex >= 0 && orderByIndex >= 0 && groupByIndex >= orderByIndex) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (groupByIndex >= 0 && orderByIndex >= 0 && groupByIndex >= orderByIndex) { */ case 18:
				_r$40 = fmt.Errorf("GROUP BY clause shall be before ORDER BY", sliceType$1.nil); /* */ $s = 20; case 20: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				$24r$2 = ["", _r$40];
				$s = 21; case 21: return $24r$2;
			/* } */ case 19:
			/* */ if (groupByIndex >= 0 && havingIndex >= 0 && groupByIndex >= havingIndex) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (groupByIndex >= 0 && havingIndex >= 0 && groupByIndex >= havingIndex) { */ case 22:
				_r$41 = fmt.Errorf("GROUP BY clause shall be before HAVING", sliceType$1.nil); /* */ $s = 24; case 24: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
				$24r$3 = ["", _r$41];
				$s = 25; case 25: return $24r$3;
			/* } */ case 23:
			if (!((orderByIndex === -1))) {
				orderByQuery = " " + $substring(fromQuery, orderByIndex);
				fromQuery = $substring(fromQuery, 0, (orderByIndex - 1 >> 0));
			}
			if (!((havingIndex === -1))) {
				havingQuery = " " + $substring(fromQuery, havingIndex);
				fromQuery = $substring(fromQuery, 0, (havingIndex - 1 >> 0));
			}
			if (!((groupByIndex === -1))) {
				groupByQuery = " " + $substring(fromQuery, groupByIndex);
				fromQuery = $substring(fromQuery, 0, (groupByIndex - 1 >> 0));
			}
		/* } */ case 7:
		_r$42 = q._applyTimeFilter(fromQuery, useMs); /* */ $s = 26; case 26: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
		fromQuery = _r$42;
		timeSeriesMacro = "$timeSeries";
		if (useMs) {
			timeSeriesMacro = "$timeSeriesMs";
		}
		$s = -1; return [beforeMacrosQuery + "SELECT" + " t," + " groupArray((" + keyAlias + ", " + valueAlias + ")) AS groupArr" + " FROM (" + " SELECT " + timeSeriesMacro + " AS t" + ", " + key + ", " + value + " " + fromQuery + groupByQuery + havingQuery + orderByQuery + ")" + " GROUP BY t" + " ORDER BY t", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._columns, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _tuple, beforeMacrosQuery, err, fromQuery, groupByIndex, groupByQuery, havingIndex, havingQuery, key, keyAlias, keySplit, matched, orderByIndex, orderByQuery, q, timeSeriesMacro, useMs, value, valueAlias, valueSplit, x, x$1, $s};return $f;
	};
	EvalQuery.prototype._columns = function(key, value, beforeMacrosQuery, fromQuery, useMs) { return this.$val._columns(key, value, beforeMacrosQuery, fromQuery, useMs); };
	EvalQuery.ptr.prototype.lttb = function(query, ast) {
		var {$24r, $24r$1, _entry, _entry$1, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$lttb", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$lttb")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args === sliceType$1.nil || args.$length < 3) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args === sliceType$1.nil || args.$length < 3) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must great or equal 3 for $lttb func. Parsed arguments are: %v", new sliceType$1([(_entry$1 = $mapIndex(ast.Obj,$String.keyFor("$lttb")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$33 = q._lttb(beforeMacrosQuery, fromQuery, args, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		$24r$1 = _r$33;
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.lttb, $c: true, $r, $24r, $24r$1, _entry, _entry$1, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s};return $f;
	};
	EvalQuery.prototype.lttb = function(query, ast) { return this.$val.lttb(query, ast); };
	EvalQuery.ptr.prototype.lttbMs = function(query, ast) {
		var {$24r, $24r$1, _entry, _entry$1, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$lttbMs", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$lttbMs")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args === sliceType$1.nil || args.$length < 3) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args === sliceType$1.nil || args.$length < 3) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must great or equal 3 for $lttbMs func. Parsed arguments are: %v", new sliceType$1([(_entry$1 = $mapIndex(ast.Obj,$String.keyFor("$lttbMs")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$33 = q._lttb(beforeMacrosQuery, fromQuery, args, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		$24r$1 = _r$33;
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.lttbMs, $c: true, $r, $24r, $24r$1, _entry, _entry$1, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s};return $f;
	};
	EvalQuery.prototype.lttbMs = function(query, ast) { return this.$val.lttbMs(query, ast); };
	EvalQuery.ptr.prototype._lttb = function(beforeMacrosQuery, fromQuery, args, useMs) {
		var {$24r, _i, _r$31, _r$32, _r$33, _r$34, _r$35, _ref, arg, args, argsExceptLastTwo, beforeMacrosQuery, bucketNumbers, fromQuery, i, q, useMs, x, x$1, x$2, x$3, xAlias, xField, xSplit, yAlias, yField, ySplit, $s, $r, $c} = $restore(this, {beforeMacrosQuery, fromQuery, args, useMs});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		bucketNumbers = $assertType((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String);
		_r$31 = strings.ToLower(strings.Trim(bucketNumbers, " \xA0\t\r\n")); /* */ $s = 3; case 3: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		/* */ if (_r$31 === "auto") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$31 === "auto") { */ case 1:
			if (useMs) {
				bucketNumbers = "toUInt64( ($__to - $__from) / $__interval_ms )";
			} else {
				bucketNumbers = "toUInt64( ($to - $from) / $interval )";
			}
		/* } */ case 2:
		argsExceptLastTwo = new strings.Builder.ptr(ptrType$1.nil, sliceType$2.nil);
		/* */ if (args.$length > 3) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (args.$length > 3) { */ case 4:
			_ref = $subslice(args, 1, (args.$length - 2 >> 0));
			_i = 0;
			/* while (true) { */ case 6:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
				i = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					argsExceptLastTwo.WriteString(", ");
				}
				_r$32 = fmt.Sprintf("%v", new sliceType$1([arg])); /* */ $s = 8; case 8: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				_r$33 = argsExceptLastTwo.WriteString(_r$32); /* */ $s = 9; case 9: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				_r$33;
				_i++;
			$s = 6; continue;
			case 7:
			argsExceptLastTwo.WriteString(", ");
		/* } */ case 5:
		xField = $assertType((x = args.$length - 2 >> 0, ((x < 0 || x >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + x])), $String);
		yField = $assertType((x$1 = args.$length - 1 >> 0, ((x$1 < 0 || x$1 >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + x$1])), $String);
		/* */ if ((xField.charCodeAt((xField.length - 1 >> 0)) === 41) || (yField.charCodeAt((yField.length - 1 >> 0)) === 41)) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if ((xField.charCodeAt((xField.length - 1 >> 0)) === 41) || (yField.charCodeAt((yField.length - 1 >> 0)) === 41)) { */ case 10:
			_r$34 = fmt.Errorf("some of passed arguments are without aliases: %s, %s", new sliceType$1([new $String(xField), new $String(yField)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			$24r = ["", _r$34];
			$s = 13; case 13: return $24r;
		/* } */ case 11:
		xSplit = strings.Split(strings.Trim(xField, " \xA0\t\r\n"), " ");
		xAlias = (x$2 = xSplit.$length - 1 >> 0, ((x$2 < 0 || x$2 >= xSplit.$length) ? ($throwRuntimeError("index out of range"), undefined) : xSplit.$array[xSplit.$offset + x$2]));
		ySplit = strings.Split(strings.Trim(yField, " \xA0\t\r\n"), " ");
		yAlias = (x$3 = ySplit.$length - 1 >> 0, ((x$3 < 0 || x$3 >= ySplit.$length) ? ($throwRuntimeError("index out of range"), undefined) : ySplit.$array[ySplit.$offset + x$3]));
		_r$35 = q._applyTimeFilter(fromQuery, useMs); /* */ $s = 14; case 14: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		fromQuery = _r$35;
		$s = -1; return [beforeMacrosQuery + "SELECT `lttb_result.1` AS " + xAlias + ", " + argsExceptLastTwo.String() + "`lttb_result.2` AS " + yAlias + " FROM (\n" + "  SELECT " + argsExceptLastTwo.String() + "untuple(arrayJoin(lttb(" + bucketNumbers + ")(" + xField + ", " + yField + "))) AS lttb_result " + fromQuery + "\n" + ") ORDER BY " + xAlias, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._lttb, $c: true, $r, $24r, _i, _r$31, _r$32, _r$33, _r$34, _r$35, _ref, arg, args, argsExceptLastTwo, beforeMacrosQuery, bucketNumbers, fromQuery, i, q, useMs, x, x$1, x$2, x$3, xAlias, xField, xSplit, yAlias, yField, ySplit, $s};return $f;
	};
	EvalQuery.prototype._lttb = function(beforeMacrosQuery, fromQuery, args, useMs) { return this.$val._lttb(beforeMacrosQuery, fromQuery, args, useMs); };
	findKeywordOutsideBrackets = function(query, keyword) {
		var {_1, _r$31, _r$32, _r$33, bracketDepth, i, keyword, keywordRegex, matchIndexes, query, $s, $r, $c} = $restore(this, {query, keyword});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		bracketDepth = 0;
		_r$31 = regexp.MustCompile("(?i)" + regexp.QuoteMeta(keyword)); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		keywordRegex = _r$31;
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < query.length)) { break; } */ if(!(i < query.length)) { $s = 3; continue; }
				_1 = query.charCodeAt(i);
				/* */ if (_1 === (40)) { $s = 5; continue; }
				/* */ if (_1 === (41)) { $s = 6; continue; }
				/* */ if (bracketDepth === 0) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (40)) { */ case 5:
					bracketDepth = bracketDepth + (1) >> 0;
					$s = 8; continue;
				/* } else if (_1 === (41)) { */ case 6:
					if (bracketDepth > 0) {
						bracketDepth = bracketDepth - (1) >> 0;
					}
					$s = 8; continue;
				/* } else if (bracketDepth === 0) { */ case 7:
					_r$32 = keywordRegex.MatchString($substring(query, i)); /* */ $s = 11; case 11: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					/* */ if (_r$32) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (_r$32) { */ case 9:
						_r$33 = keywordRegex.FindStringIndex($substring(query, i)); /* */ $s = 12; case 12: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
						matchIndexes = _r$33;
						if (!(matchIndexes === sliceType$3.nil) && ((0 >= matchIndexes.$length ? ($throwRuntimeError("index out of range"), undefined) : matchIndexes.$array[matchIndexes.$offset + 0]) === 0)) {
							$s = -1; return i;
						}
					/* } */ case 10:
				/* } */ case 8:
			case 4:
			i = i + (1) >> 0;
		$s = 2; continue;
		case 3:
		$s = -1; return -1;
		/* */ } return; } var $f = {$blk: findKeywordOutsideBrackets, $c: true, $r, _1, _r$31, _r$32, _r$33, bracketDepth, i, keyword, keywordRegex, matchIndexes, query, $s};return $f;
	};
	EvalQuery.ptr.prototype.rateColumns = function(query, ast) {
		var {$24r, _entry, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, _tuple$1, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, timeChange, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$rateColumns", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$rateColumns")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args === sliceType$1.nil || !((args.$length === 2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args === sliceType$1.nil || !((args.$length === 2))) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must equal 2 for $rateColumns func. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$33 = q._columns($assertType((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String), $assertType((1 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 1]), $String), "", fromQuery, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_tuple$1 = _r$33;
		query = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		timeChange = "";
		if (q.UseWindowFuncForMacros) {
			timeChange = "(t/1000 - lagInFrame(t/1000,1,0) OVER ())";
		} else {
			timeChange = "runningDifference( t/1000 )";
		}
		$s = -1; return [beforeMacrosQuery + "SELECT t" + ", arrayMap(a -> (a.1, a.2/" + timeChange + "), groupArr)" + " FROM (" + query + ")", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.rateColumns, $c: true, $r, $24r, _entry, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, _tuple$1, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, timeChange, $s};return $f;
	};
	EvalQuery.prototype.rateColumns = function(query, ast) { return this.$val.rateColumns(query, ast); };
	EvalQuery.ptr.prototype._prepareColumnsAggregated = function(macroName, query, ast) {
		var {$24r, $24r$1, _entry, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _tmp, _tmp$1, _tuple, aggFuncs, alias, aliasSplit, aliases, args, ast, beforeMacrosQuery, err, fromQuery, having, havingIndex, i, key, keyAlias, keySplit, macroName, macroQueries, q, query, subKey, subKeyAlias, subKeySplit, value, values, x, x$1, x$2, x$3, $s, $r, $c} = $restore(this, {macroName, query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro(macroName, query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", "", "", "", "", "", "", sliceType.nil, sliceType.nil, sliceType.nil, err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return ["", "", "", "", "", "", "", sliceType.nil, sliceType.nil, sliceType.nil, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor(macroName)), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args === sliceType$1.nil || args.$length < 4) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args === sliceType$1.nil || args.$length < 4) { */ case 2:
			_r$32 = fmt.Errorf("expect 2 or more amount of arguments for $*ColumnsAggregated macro functions. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", "", "", "", "", "", "", sliceType.nil, sliceType.nil, sliceType.nil, _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$33 = strings.ToLower(fromQuery); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_r$34 = strings.Index(_r$33, "having"); /* */ $s = 7; case 7: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		havingIndex = _r$34;
		having = "";
		if (!((havingIndex === -1))) {
			having = " " + $substring(fromQuery, havingIndex);
			fromQuery = $substring(fromQuery, 0, (havingIndex - 1 >> 0));
		}
		_r$35 = q._applyTimeFilter(fromQuery, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		fromQuery = _r$35;
		key = $assertType((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String);
		keySplit = strings.Split(strings.Trim(key, " \xA0\t\r\n"), " ");
		keyAlias = (x = keySplit.$length - 1 >> 0, ((x < 0 || x >= keySplit.$length) ? ($throwRuntimeError("index out of range"), undefined) : keySplit.$array[keySplit.$offset + x]));
		subKey = $assertType((1 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 1]), $String);
		subKeySplit = strings.Split(strings.Trim(subKey, " \xA0\t\r\n"), " ");
		subKeyAlias = (x$1 = subKeySplit.$length - 1 >> 0, ((x$1 < 0 || x$1 >= subKeySplit.$length) ? ($throwRuntimeError("index out of range"), undefined) : subKeySplit.$array[subKeySplit.$offset + x$1]));
		/* */ if (!(((_r$36 = args.$length % 2, _r$36 === _r$36 ? _r$36 : $throwRuntimeError("integer divide by zero")) === 0))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(((_r$36 = args.$length % 2, _r$36 === _r$36 ? _r$36 : $throwRuntimeError("integer divide by zero")) === 0))) { */ case 9:
			_r$37 = fmt.Errorf("wrong arguments count, expect argument pairs aggregate function and value for " + macroName + " function. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 11; case 11: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			$24r$1 = ["", "", "", "", "", "", "", sliceType.nil, sliceType.nil, sliceType.nil, _r$37];
			$s = 12; case 12: return $24r$1;
		/* } */ case 10:
		values = sliceType.nil;
		aliases = sliceType.nil;
		aggFuncs = sliceType.nil;
		i = 2;
		while (true) {
			if (!(i < args.$length)) { break; }
			aggFuncs = $append(aggFuncs, $assertType(((i < 0 || i >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + i]), $String));
			value = $assertType((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + x$2])), $String);
			aliasSplit = strings.Split(strings.Trim(value, " \xA0\t\r\n"), " ");
			alias = (x$3 = aliasSplit.$length - 1 >> 0, ((x$3 < 0 || x$3 >= aliasSplit.$length) ? ($throwRuntimeError("index out of range"), undefined) : aliasSplit.$array[aliasSplit.$offset + x$3]));
			aliases = $append(aliases, alias);
			if (aliasSplit.$length > 1) {
				value = strings.Join($subslice(aliasSplit, 0, (aliasSplit.$length - 1 >> 0)), " ");
				value = strings.TrimSuffix(strings.TrimSuffix(value, " AS"), " as");
			}
			if (!strings.Contains(value, "(")) {
				value = "max(" + value + ")";
			}
			values = $append(values, value + " AS " + alias);
			i = i + (2) >> 0;
		}
		$s = -1; return [beforeMacrosQuery, fromQuery, having, key, keyAlias, subKey, subKeyAlias, values, aliases, aggFuncs, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._prepareColumnsAggregated, $c: true, $r, $24r, $24r$1, _entry, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _tmp, _tmp$1, _tuple, aggFuncs, alias, aliasSplit, aliases, args, ast, beforeMacrosQuery, err, fromQuery, having, havingIndex, i, key, keyAlias, keySplit, macroName, macroQueries, q, query, subKey, subKeyAlias, subKeySplit, value, values, x, x$1, x$2, x$3, $s};return $f;
	};
	EvalQuery.prototype._prepareColumnsAggregated = function(macroName, query, ast) { return this.$val._prepareColumnsAggregated(macroName, query, ast); };
	EvalQuery.ptr.prototype._formatColumnsAggregatedSQL = function(beforeMacrosQuery, fromQuery, key, keyAlias, subKey, subKeyAlias, values, finalValues, finalAggregatedValues, having) {
		var beforeMacrosQuery, finalAggregatedValues, finalValues, fromQuery, having, key, keyAlias, q, subKey, subKeyAlias, values;
		q = this;
		return beforeMacrosQuery + "SELECT t, " + keyAlias + ", " + strings.Join(finalAggregatedValues, ", ") + " FROM (" + "  SELECT t, " + keyAlias + ", " + subKeyAlias + ", " + strings.Join(finalValues, ", ") + "  FROM (" + "   SELECT $timeSeries AS t, " + key + ", " + subKey + ", " + strings.Join(values, ", ") + "   " + fromQuery + "   GROUP BY " + keyAlias + ", " + subKeyAlias + ", t " + having + "   ORDER BY " + keyAlias + ", " + subKeyAlias + ", t" + "  )" + " ) " + "GROUP BY " + keyAlias + ", t ORDER BY " + keyAlias + ", t";
	};
	EvalQuery.prototype._formatColumnsAggregatedSQL = function(beforeMacrosQuery, fromQuery, key, keyAlias, subKey, subKeyAlias, values, finalValues, finalAggregatedValues, having) { return this.$val._formatColumnsAggregatedSQL(beforeMacrosQuery, fromQuery, key, keyAlias, subKey, subKeyAlias, values, finalValues, finalAggregatedValues, having); };
	EvalQuery.ptr.prototype.rateColumnsAggregated = function(query, ast) {
		var {_i, _r$31, _ref, _tuple, a, aggFuncs, aliases, ast, beforeMacrosQuery, err, finalAggregatedValues, finalValues, fromQuery, having, i, key, keyAlias, q, query, subKey, subKeyAlias, values, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._prepareColumnsAggregated("$rateColumnsAggregated", query, ast); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		beforeMacrosQuery = _tuple[0];
		fromQuery = _tuple[1];
		having = _tuple[2];
		key = _tuple[3];
		keyAlias = _tuple[4];
		subKey = _tuple[5];
		subKeyAlias = _tuple[6];
		values = _tuple[7];
		aliases = _tuple[8];
		aggFuncs = _tuple[9];
		err = _tuple[10];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		finalAggregatedValues = sliceType.nil;
		finalValues = sliceType.nil;
		_ref = aliases;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			finalAggregatedValues = $append(finalAggregatedValues, ((i < 0 || i >= aggFuncs.$length) ? ($throwRuntimeError("index out of range"), undefined) : aggFuncs.$array[aggFuncs.$offset + i]) + "(" + a + "Rate) AS " + a + "RateAgg");
			if (q.UseWindowFuncForMacros) {
				finalValues = $append(finalValues, a + " / (t/1000 - lagInFrame(t/1000,1,0) OVER ()) AS " + a + "Rate");
			} else {
				finalValues = $append(finalValues, a + " / runningDifference(t / 1000) AS " + a + "Rate");
			}
			_i++;
		}
		$s = -1; return [q._formatColumnsAggregatedSQL(beforeMacrosQuery, fromQuery, key, keyAlias, subKey, subKeyAlias, values, finalValues, finalAggregatedValues, having), $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.rateColumnsAggregated, $c: true, $r, _i, _r$31, _ref, _tuple, a, aggFuncs, aliases, ast, beforeMacrosQuery, err, finalAggregatedValues, finalValues, fromQuery, having, i, key, keyAlias, q, query, subKey, subKeyAlias, values, $s};return $f;
	};
	EvalQuery.prototype.rateColumnsAggregated = function(query, ast) { return this.$val.rateColumnsAggregated(query, ast); };
	EvalQuery.ptr.prototype.perSecondColumnsAggregated = function(query, ast) {
		var {_i, _r$31, _ref, _tuple, a, aggFuncs, aliases, ast, beforeMacrosQuery, err, finalAggregatedValues, finalValues, fromQuery, having, i, key, keyAlias, q, query, subKey, subKeyAlias, values, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._prepareColumnsAggregated("$perSecondColumnsAggregated", query, ast); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		beforeMacrosQuery = _tuple[0];
		fromQuery = _tuple[1];
		having = _tuple[2];
		key = _tuple[3];
		keyAlias = _tuple[4];
		subKey = _tuple[5];
		subKeyAlias = _tuple[6];
		values = _tuple[7];
		aliases = _tuple[8];
		aggFuncs = _tuple[9];
		err = _tuple[10];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		finalAggregatedValues = sliceType.nil;
		finalValues = sliceType.nil;
		_ref = aliases;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			finalAggregatedValues = $append(finalAggregatedValues, ((i < 0 || i >= aggFuncs.$length) ? ($throwRuntimeError("index out of range"), undefined) : aggFuncs.$array[aggFuncs.$offset + i]) + "(" + a + "PerSecond) AS " + a + "PerSecondAgg");
			if (q.UseWindowFuncForMacros) {
				finalValues = $append(finalValues, "if((" + a + " - lagInFrame(" + a + ",1,0) OVER ()) < 0 OR " + "lagInFrame(" + subKeyAlias + ",1," + subKeyAlias + ") OVER () != " + subKeyAlias + ", nan, " + "(" + a + " - lagInFrame(" + a + ",1,0) OVER ()) / (t/1000 - lagInFrame(t/1000,1,0) OVER ())) AS " + a + "PerSecond");
			} else {
				finalValues = $append(finalValues, "if(runningDifference(" + a + ") < 0 OR neighbor(" + subKeyAlias + ",-1," + subKeyAlias + ") != " + subKeyAlias + ", nan, runningDifference(" + a + ") / runningDifference(t / 1000)) AS " + a + "PerSecond");
			}
			_i++;
		}
		$s = -1; return [q._formatColumnsAggregatedSQL(beforeMacrosQuery, fromQuery, key, keyAlias, subKey, subKeyAlias, values, finalValues, finalAggregatedValues, having), $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.perSecondColumnsAggregated, $c: true, $r, _i, _r$31, _ref, _tuple, a, aggFuncs, aliases, ast, beforeMacrosQuery, err, finalAggregatedValues, finalValues, fromQuery, having, i, key, keyAlias, q, query, subKey, subKeyAlias, values, $s};return $f;
	};
	EvalQuery.prototype.perSecondColumnsAggregated = function(query, ast) { return this.$val.perSecondColumnsAggregated(query, ast); };
	EvalQuery.ptr.prototype.increaseColumnsAggregated = function(query, ast) {
		var {_i, _r$31, _ref, _tuple, a, aggFuncs, aliases, ast, beforeMacrosQuery, err, finalAggregatedValues, finalValues, fromQuery, having, i, key, keyAlias, q, query, subKey, subKeyAlias, values, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._prepareColumnsAggregated("$increaseColumnsAggregated", query, ast); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		beforeMacrosQuery = _tuple[0];
		fromQuery = _tuple[1];
		having = _tuple[2];
		key = _tuple[3];
		keyAlias = _tuple[4];
		subKey = _tuple[5];
		subKeyAlias = _tuple[6];
		values = _tuple[7];
		aliases = _tuple[8];
		aggFuncs = _tuple[9];
		err = _tuple[10];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		finalAggregatedValues = sliceType.nil;
		finalValues = sliceType.nil;
		_ref = aliases;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			finalAggregatedValues = $append(finalAggregatedValues, ((i < 0 || i >= aggFuncs.$length) ? ($throwRuntimeError("index out of range"), undefined) : aggFuncs.$array[aggFuncs.$offset + i]) + "(" + a + "Increase) AS " + a + "IncreaseAgg");
			if (q.UseWindowFuncForMacros) {
				finalValues = $append(finalValues, "if((" + a + " - lagInFrame(" + a + ",1,0) OVER ()) < 0 OR " + "lagInFrame(" + subKeyAlias + ",1," + subKeyAlias + ") OVER () != " + subKeyAlias + ", nan, (" + a + " - lagInFrame(" + a + ",1,0) OVER ()) / 1) AS " + a + "Increase");
			} else {
				finalValues = $append(finalValues, "if(runningDifference(" + a + ") < 0 OR neighbor(" + subKeyAlias + ",-1," + subKeyAlias + ") != " + subKeyAlias + ", nan, runningDifference(" + a + ") / 1) AS " + a + "Increase");
			}
			_i++;
		}
		$s = -1; return [q._formatColumnsAggregatedSQL(beforeMacrosQuery, fromQuery, key, keyAlias, subKey, subKeyAlias, values, finalValues, finalAggregatedValues, having), $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.increaseColumnsAggregated, $c: true, $r, _i, _r$31, _ref, _tuple, a, aggFuncs, aliases, ast, beforeMacrosQuery, err, finalAggregatedValues, finalValues, fromQuery, having, i, key, keyAlias, q, query, subKey, subKeyAlias, values, $s};return $f;
	};
	EvalQuery.prototype.increaseColumnsAggregated = function(query, ast) { return this.$val.increaseColumnsAggregated(query, ast); };
	EvalQuery.ptr.prototype.deltaColumnsAggregated = function(query, ast) {
		var {_i, _r$31, _ref, _tuple, a, aggFuncs, aliases, ast, beforeMacrosQuery, err, finalAggregatedValues, finalValues, fromQuery, having, i, key, keyAlias, q, query, subKey, subKeyAlias, values, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._prepareColumnsAggregated("$deltaColumnsAggregated", query, ast); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		beforeMacrosQuery = _tuple[0];
		fromQuery = _tuple[1];
		having = _tuple[2];
		key = _tuple[3];
		keyAlias = _tuple[4];
		subKey = _tuple[5];
		subKeyAlias = _tuple[6];
		values = _tuple[7];
		aliases = _tuple[8];
		aggFuncs = _tuple[9];
		err = _tuple[10];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		finalAggregatedValues = sliceType.nil;
		finalValues = sliceType.nil;
		_ref = aliases;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			finalAggregatedValues = $append(finalAggregatedValues, ((i < 0 || i >= aggFuncs.$length) ? ($throwRuntimeError("index out of range"), undefined) : aggFuncs.$array[aggFuncs.$offset + i]) + "(" + a + "Delta) AS " + a + "DeltaAgg");
			if (q.UseWindowFuncForMacros) {
				finalValues = $append(finalValues, "if(lagInFrame(" + subKeyAlias + ",1," + subKeyAlias + ") OVER () != " + subKeyAlias + ", 0, " + a + " - lagInFrame(" + a + ",1,0) OVER ()) AS " + a + "Delta");
			} else {
				finalValues = $append(finalValues, "if(neighbor(" + subKeyAlias + ",-1," + subKeyAlias + ") != " + subKeyAlias + ", 0, runningDifference(" + a + ") / 1) AS " + a + "Delta");
			}
			_i++;
		}
		$s = -1; return [q._formatColumnsAggregatedSQL(beforeMacrosQuery, fromQuery, key, keyAlias, subKey, subKeyAlias, values, finalValues, finalAggregatedValues, having), $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.deltaColumnsAggregated, $c: true, $r, _i, _r$31, _ref, _tuple, a, aggFuncs, aliases, ast, beforeMacrosQuery, err, finalAggregatedValues, finalValues, fromQuery, having, i, key, keyAlias, q, query, subKey, subKeyAlias, values, $s};return $f;
	};
	EvalQuery.prototype.deltaColumnsAggregated = function(query, ast) { return this.$val.deltaColumnsAggregated(query, ast); };
	EvalQuery.ptr.prototype._fromIndex = function(query, macro) {
		var {$24r, _r$31, _r$32, _r$33, _r$34, _r$35, fragmentWithFrom, fromRe, fromRelativeIndex, macro, matches, q, query, x, x$1, $s, $r, $c} = $restore(this, {query, macro});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = regexp.MustCompile("(?im)\\" + macro + "\\([\\w\\s\\S]+?\\)(\\s+FROM\\s+)"); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		fromRe = _r$31;
		_r$32 = fromRe.FindStringSubmatchIndex(query); /* */ $s = 2; case 2: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		matches = _r$32;
		/* */ if (matches.$length === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (matches.$length === 0) { */ case 3:
			_r$33 = fmt.Errorf("can't find FROM-statement at: %s", new sliceType$1([new $String(query)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			$24r = [0, _r$33];
			$s = 6; case 6: return $24r;
		/* } */ case 4:
		fragmentWithFrom = $substring(query, (x = matches.$length - 2 >> 0, ((x < 0 || x >= matches.$length) ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + x])), (x$1 = matches.$length - 1 >> 0, ((x$1 < 0 || x$1 >= matches.$length) ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + x$1])));
		_r$34 = strings.ToLower(fragmentWithFrom); /* */ $s = 7; case 7: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		_r$35 = strings.Index(_r$34, "from"); /* */ $s = 8; case 8: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		fromRelativeIndex = _r$35;
		$s = -1; return [((1 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 1]) - fragmentWithFrom.length >> 0) + fromRelativeIndex >> 0, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._fromIndex, $c: true, $r, $24r, _r$31, _r$32, _r$33, _r$34, _r$35, fragmentWithFrom, fromRe, fromRelativeIndex, macro, matches, q, query, x, x$1, $s};return $f;
	};
	EvalQuery.prototype._fromIndex = function(query, macro) { return this.$val._fromIndex(query, macro); };
	EvalQuery.ptr.prototype.rate = function(query, ast) {
		var {$24r, $24r$1, _entry, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$rate", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$rate")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args === sliceType$1.nil || args.$length < 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args === sliceType$1.nil || args.$length < 1) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must be > 0 for $rate func. Parsed arguments are: %v ", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_r$33 = q._rate(args, beforeMacrosQuery, fromQuery); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		$24r$1 = _r$33;
		$s = 7; case 7: return $24r$1;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.rate, $c: true, $r, $24r, $24r$1, _entry, _r$31, _r$32, _r$33, _tmp, _tmp$1, _tuple, args, ast, beforeMacrosQuery, err, fromQuery, macroQueries, q, query, $s};return $f;
	};
	EvalQuery.prototype.rate = function(query, ast) { return this.$val.rate(query, ast); };
	EvalQuery.ptr.prototype._rate = function(args, beforeMacrosQuery, fromQuery) {
		var {$24r, _i, _i$1, _r$31, _r$32, _ref, _ref$1, a, aliases, arg, argSplit, args, argsStr, beforeMacrosQuery, cols, fromQuery, i, q, str, x, $s, $r, $c} = $restore(this, {args, beforeMacrosQuery, fromQuery});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		aliases = $makeSlice(sliceType, args.$length);
		argsStr = $makeSlice(sliceType, args.$length);
		_ref = args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			str = $assertType(arg, $String);
			/* */ if (str.charCodeAt((str.length - 1 >> 0)) === 41) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (str.charCodeAt((str.length - 1 >> 0)) === 41) { */ case 3:
				_r$31 = fmt.Errorf("argument %v cant be used without alias", new sliceType$1([new $String(str)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				$24r = ["", _r$31];
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			argSplit = strings.Split(strings.Trim(str, " \xA0\t\r\n"), " ");
			((i < 0 || i >= aliases.$length) ? ($throwRuntimeError("index out of range"), undefined) : aliases.$array[aliases.$offset + i] = (x = argSplit.$length - 1 >> 0, ((x < 0 || x >= argSplit.$length) ? ($throwRuntimeError("index out of range"), undefined) : argSplit.$array[argSplit.$offset + x])));
			((i < 0 || i >= argsStr.$length) ? ($throwRuntimeError("index out of range"), undefined) : argsStr.$array[argsStr.$offset + i] = $assertType(arg, $String));
			_i++;
		$s = 1; continue;
		case 2:
		cols = sliceType.nil;
		_ref$1 = aliases;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			a = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (q.UseWindowFuncForMacros) {
				cols = $append(cols, a + "/((t - lagInFrame(t,1,0) OVER ())/1000) " + a + "Rate");
			} else {
				cols = $append(cols, a + "/runningDifference(t/1000) " + a + "Rate");
			}
			_i$1++;
		}
		_r$32 = q._applyTimeFilter(fromQuery, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		fromQuery = _r$32;
		$s = -1; return [beforeMacrosQuery + "SELECT " + "t," + " " + strings.Join(cols, ", ") + " FROM (" + " SELECT $timeSeries AS t" + ", " + strings.Join(argsStr, ", ") + " " + fromQuery + "\n GROUP BY t" + "\n ORDER BY t" + ")", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._rate, $c: true, $r, $24r, _i, _i$1, _r$31, _r$32, _ref, _ref$1, a, aliases, arg, argSplit, args, argsStr, beforeMacrosQuery, cols, fromQuery, i, q, str, x, $s};return $f;
	};
	EvalQuery.prototype._rate = function(args, beforeMacrosQuery, fromQuery) { return this.$val._rate(args, beforeMacrosQuery, fromQuery); };
	EvalQuery.ptr.prototype.perSecondColumns = function(query, ast) {
		var {$24r, _entry, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _tmp, _tmp$1, _tuple, alias, aliasIndex, args, ast, beforeMacrosQuery, err, fromQuery, having, havingIndex, key, macroQueries, maxPerSecond, q, query, value, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$perSecondColumns", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$perSecondColumns")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (!((args.$length === 2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((args.$length === 2))) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must equal 2 for $perSecondColumns func. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		key = $assertType((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String);
		value = "max(" + strings.Trim($assertType((1 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 1]), $String), " \xA0\t\r\n") + ") AS max_0";
		_r$33 = strings.ToLower(fromQuery); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_r$34 = strings.Index(_r$33, "having"); /* */ $s = 7; case 7: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		havingIndex = _r$34;
		having = "";
		_r$35 = strings.ToLower(key); /* */ $s = 8; case 8: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_r$36 = strings.Index(_r$35, " as "); /* */ $s = 9; case 9: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		aliasIndex = _r$36;
		alias = "perSecondColumns";
		if (aliasIndex === -1) {
			key = key + " AS " + alias;
		} else {
			alias = $substring(key, (aliasIndex + 4 >> 0));
		}
		if (!((havingIndex === -1))) {
			having = " " + $substring(fromQuery, havingIndex);
			fromQuery = $substring(fromQuery, 0, (havingIndex - 1 >> 0));
		}
		_r$37 = q._applyTimeFilter(fromQuery, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
		fromQuery = _r$37;
		maxPerSecond = "";
		if (q.UseWindowFuncForMacros) {
			maxPerSecond = "if((max_0 - lagInFrame(max_0,1,0) OVER ()) < 0 OR lagInFrame(" + alias + ",1," + alias + ") OVER () != " + alias + ", nan, (max_0 - lagInFrame(max_0,1,0) OVER ()) / (t/1000 - lagInFrame(t/1000,1,0) OVER ()))";
		} else {
			maxPerSecond = "if(runningDifference(max_0) < 0 OR neighbor(" + alias + ",-1," + alias + ") != " + alias + ", nan, runningDifference(max_0) / runningDifference(t/1000))";
		}
		$s = -1; return [beforeMacrosQuery + "SELECT" + " t," + " groupArray((" + alias + ", max_0_PerSecond)) AS groupArr" + " FROM (" + " SELECT t," + " " + alias + ", " + maxPerSecond + " AS max_0_PerSecond" + " FROM (" + " SELECT $timeSeries AS t" + ", " + key + ", " + value + " " + fromQuery + " GROUP BY t, " + alias + having + " ORDER BY " + alias + ", t" + ")" + ")" + " GROUP BY t" + " ORDER BY t", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.perSecondColumns, $c: true, $r, $24r, _entry, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _tmp, _tmp$1, _tuple, alias, aliasIndex, args, ast, beforeMacrosQuery, err, fromQuery, having, havingIndex, key, macroQueries, maxPerSecond, q, query, value, $s};return $f;
	};
	EvalQuery.prototype.perSecondColumns = function(query, ast) { return this.$val.perSecondColumns(query, ast); };
	EvalQuery.ptr.prototype.deltaColumns = function(query, ast) {
		var {$24r, _entry, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _tmp, _tmp$1, _tuple, alias, aliasIndex, args, ast, beforeMacrosQuery, err, fromQuery, having, havingIndex, key, macroQueries, maxDelta, q, query, value, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$deltaColumns", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$deltaColumns")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (!((args.$length === 2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((args.$length === 2))) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must equal 2 for $deltaColumns func. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		key = $assertType((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String);
		value = "max(" + strings.Trim($assertType((1 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 1]), $String), " \xA0\t\r\n") + ") AS max_0";
		_r$33 = strings.ToLower(fromQuery); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_r$34 = strings.Index(_r$33, "having"); /* */ $s = 7; case 7: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		havingIndex = _r$34;
		having = "";
		_r$35 = strings.ToLower(key); /* */ $s = 8; case 8: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_r$36 = strings.Index(_r$35, " as "); /* */ $s = 9; case 9: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		aliasIndex = _r$36;
		alias = "deltaColumns";
		if (aliasIndex === -1) {
			key = key + " AS " + alias;
		} else {
			alias = $substring(key, (aliasIndex + 4 >> 0));
		}
		if (!((havingIndex === -1))) {
			having = " " + $substring(fromQuery, havingIndex);
			fromQuery = $substring(fromQuery, 0, (havingIndex - 1 >> 0));
		}
		_r$37 = q._applyTimeFilter(fromQuery, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
		fromQuery = _r$37;
		maxDelta = "";
		if (q.UseWindowFuncForMacros) {
			maxDelta = "if(lagInFrame(" + alias + ",1," + alias + ") OVER () != " + alias + ", 0, max_0 - lagInFrame(max_0,1,0) OVER ())";
		} else {
			maxDelta = "if(neighbor(" + alias + ",-1," + alias + ") != " + alias + ", 0, runningDifference(max_0))";
		}
		$s = -1; return [beforeMacrosQuery + "SELECT" + " t," + " groupArray((" + alias + ", max_0_Delta)) AS groupArr" + " FROM (" + " SELECT t," + " " + alias + ", " + maxDelta + " AS max_0_Delta" + " FROM (" + " SELECT $timeSeries AS t" + ", " + key + ", " + value + " " + fromQuery + " GROUP BY t, " + alias + having + " ORDER BY " + alias + ", t" + ")" + ")" + " GROUP BY t" + " ORDER BY t", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.deltaColumns, $c: true, $r, $24r, _entry, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _tmp, _tmp$1, _tuple, alias, aliasIndex, args, ast, beforeMacrosQuery, err, fromQuery, having, havingIndex, key, macroQueries, maxDelta, q, query, value, $s};return $f;
	};
	EvalQuery.prototype.deltaColumns = function(query, ast) { return this.$val.deltaColumns(query, ast); };
	EvalQuery.ptr.prototype.increaseColumns = function(query, ast) {
		var {$24r, _entry, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _tmp, _tmp$1, _tuple, alias, aliasIndex, args, ast, beforeMacrosQuery, err, fromQuery, having, havingIndex, key, macroQueries, maxIncrease, q, query, value, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$increaseColumns", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$increaseColumns")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (!((args.$length === 2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((args.$length === 2))) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must equal 2 for $increaseColumns func. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		key = $assertType((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String);
		value = "max(" + strings.Trim($assertType((1 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 1]), $String), " \xA0\t\r\n") + ") AS max_0";
		_r$33 = strings.ToLower(fromQuery); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		_r$34 = strings.Index(_r$33, "having"); /* */ $s = 7; case 7: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		havingIndex = _r$34;
		having = "";
		_r$35 = strings.ToLower(key); /* */ $s = 8; case 8: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_r$36 = strings.Index(_r$35, " as "); /* */ $s = 9; case 9: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		aliasIndex = _r$36;
		alias = "increaseColumns";
		if (aliasIndex === -1) {
			key = key + " AS " + alias;
		} else {
			alias = $substring(key, (aliasIndex + 4 >> 0));
		}
		if (!((havingIndex === -1))) {
			having = " " + $substring(fromQuery, havingIndex);
			fromQuery = $substring(fromQuery, 0, (havingIndex - 1 >> 0));
		}
		_r$37 = q._applyTimeFilter(fromQuery, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
		fromQuery = _r$37;
		maxIncrease = "";
		if (q.UseWindowFuncForMacros) {
			maxIncrease = "if((max_0 - lagInFrame(max_0,1,0) OVER ()) < 0 OR lagInFrame(" + alias + ",1," + alias + ") OVER () != " + alias + ", 0, max_0 - lagInFrame(max_0,1,0) OVER ())";
		} else {
			maxIncrease = "if(runningDifference(max_0) < 0 OR neighbor(" + alias + ",-1," + alias + ") != " + alias + ", 0, runningDifference(max_0))";
		}
		$s = -1; return [beforeMacrosQuery + "SELECT" + " t," + " groupArray((" + alias + ", max_0_Increase)) AS groupArr" + " FROM (" + " SELECT t," + " " + alias + ", " + maxIncrease + " AS max_0_Increase" + " FROM (" + " SELECT $timeSeries AS t" + ", " + key + ", " + value + " " + fromQuery + " GROUP BY t, " + alias + having + " ORDER BY " + alias + ", t" + ")" + ")" + " GROUP BY t" + " ORDER BY t", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.increaseColumns, $c: true, $r, $24r, _entry, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _tmp, _tmp$1, _tuple, alias, aliasIndex, args, ast, beforeMacrosQuery, err, fromQuery, having, havingIndex, key, macroQueries, maxIncrease, q, query, value, $s};return $f;
	};
	EvalQuery.prototype.increaseColumns = function(query, ast) { return this.$val.increaseColumns(query, ast); };
	EvalQuery.ptr.prototype.perSecond = function(query, ast) {
		var {$24r, $24r$1, _entry, _i, _r$31, _r$32, _r$33, _r$34, _ref, _tmp, _tmp$1, _tuple, a, args, ast, beforeMacrosQuery, err, fromQuery, i, macroQueries, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$perSecond", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$perSecond")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args.$length < 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args.$length < 1) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must be > 0 for $perSecond func. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_ref = args;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$33 = fmt.Sprintf("max(" + strings.Trim($assertType(a, $String), " \xA0\t\r\n") + ") AS max_%d", new sliceType$1([new $Int(i)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			((i < 0 || i >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + i] = new $String(_r$33));
			_i++;
		$s = 6; continue;
		case 7:
		_r$34 = q._perSecond(args, beforeMacrosQuery, fromQuery); /* */ $s = 9; case 9: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		$24r$1 = _r$34;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.perSecond, $c: true, $r, $24r, $24r$1, _entry, _i, _r$31, _r$32, _r$33, _r$34, _ref, _tmp, _tmp$1, _tuple, a, args, ast, beforeMacrosQuery, err, fromQuery, i, macroQueries, q, query, $s};return $f;
	};
	EvalQuery.prototype.perSecond = function(query, ast) { return this.$val.perSecond(query, ast); };
	EvalQuery.ptr.prototype._perSecond = function(args, beforeMacrosQuery, fromQuery) {
		var {_i, _r$31, _r$32, _r$33, _ref, args, argsStr, beforeMacrosQuery, cols, fromQuery, i, item, q, $s, $r, $c} = $restore(this, {args, beforeMacrosQuery, fromQuery});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		cols = $makeSlice(sliceType, args.$length);
		argsStr = $makeSlice(sliceType, args.$length);
		_ref = args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			item = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= argsStr.$length) ? ($throwRuntimeError("index out of range"), undefined) : argsStr.$array[argsStr.$offset + i] = $assertType(item, $String));
			/* */ if (q.UseWindowFuncForMacros) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (q.UseWindowFuncForMacros) { */ case 3:
				_r$31 = fmt.Sprintf("if(max_%d - lagInFrame(max_%d,1,0) OVER () < 0, nan, (max_%d - lagInFrame(max_%d,1,0) OVER ()) / ((t - lagInFrame(t,1,0) OVER ())/1000) ) AS max_%d_PerSecond", new sliceType$1([new $Int(i), new $Int(i), new $Int(i), new $Int(i), new $Int(i)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				((i < 0 || i >= cols.$length) ? ($throwRuntimeError("index out of range"), undefined) : cols.$array[cols.$offset + i] = _r$31);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$32 = fmt.Sprintf("if(runningDifference(max_%d) < 0, nan, runningDifference(max_%d) / runningDifference(t/1000)) AS max_%d_PerSecond", new sliceType$1([new $Int(i), new $Int(i), new $Int(i)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				((i < 0 || i >= cols.$length) ? ($throwRuntimeError("index out of range"), undefined) : cols.$array[cols.$offset + i] = _r$32);
			/* } */ case 5:
			_i++;
		$s = 1; continue;
		case 2:
		_r$33 = q._applyTimeFilter(fromQuery, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		fromQuery = _r$33;
		$s = -1; return [beforeMacrosQuery + "SELECT " + "t," + " " + strings.Join(cols, ", ") + " FROM (" + " SELECT $timeSeries AS t," + " " + strings.Join(argsStr, ", ") + " " + fromQuery + " GROUP BY t" + " ORDER BY t" + ")", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._perSecond, $c: true, $r, _i, _r$31, _r$32, _r$33, _ref, args, argsStr, beforeMacrosQuery, cols, fromQuery, i, item, q, $s};return $f;
	};
	EvalQuery.prototype._perSecond = function(args, beforeMacrosQuery, fromQuery) { return this.$val._perSecond(args, beforeMacrosQuery, fromQuery); };
	EvalQuery.ptr.prototype.delta = function(query, ast) {
		var {$24r, $24r$1, _entry, _i, _r$31, _r$32, _r$33, _r$34, _ref, _tmp, _tmp$1, _tuple, a, args, ast, beforeMacrosQuery, err, fromQuery, i, macroQueries, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$delta", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$delta")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args.$length < 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args.$length < 1) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must be > 0 for $delta func. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_ref = args;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$33 = fmt.Sprintf("max(" + strings.Trim($assertType(a, $String), " \xA0\t\r\n") + ") AS max_%d", new sliceType$1([new $Int(i)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			((i < 0 || i >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + i] = new $String(_r$33));
			_i++;
		$s = 6; continue;
		case 7:
		_r$34 = q._delta(args, beforeMacrosQuery, fromQuery); /* */ $s = 9; case 9: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		$24r$1 = _r$34;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.delta, $c: true, $r, $24r, $24r$1, _entry, _i, _r$31, _r$32, _r$33, _r$34, _ref, _tmp, _tmp$1, _tuple, a, args, ast, beforeMacrosQuery, err, fromQuery, i, macroQueries, q, query, $s};return $f;
	};
	EvalQuery.prototype.delta = function(query, ast) { return this.$val.delta(query, ast); };
	EvalQuery.ptr.prototype._delta = function(args, beforeMacrosQuery, fromQuery) {
		var {_i, _r$31, _r$32, _r$33, _ref, args, argsStr, beforeMacrosQuery, cols, fromQuery, i, item, q, $s, $r, $c} = $restore(this, {args, beforeMacrosQuery, fromQuery});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		cols = $makeSlice(sliceType, args.$length);
		argsStr = $makeSlice(sliceType, args.$length);
		_ref = args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			item = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= argsStr.$length) ? ($throwRuntimeError("index out of range"), undefined) : argsStr.$array[argsStr.$offset + i] = $assertType(item, $String));
			/* */ if (q.UseWindowFuncForMacros) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (q.UseWindowFuncForMacros) { */ case 3:
				_r$31 = fmt.Sprintf("max_%d - lagInFrame(max_%d,1,0) OVER () AS max_%d_Delta", new sliceType$1([new $Int(i), new $Int(i), new $Int(i)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				((i < 0 || i >= cols.$length) ? ($throwRuntimeError("index out of range"), undefined) : cols.$array[cols.$offset + i] = _r$31);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$32 = fmt.Sprintf("runningDifference(max_%d) AS max_%d_Delta", new sliceType$1([new $Int(i), new $Int(i)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				((i < 0 || i >= cols.$length) ? ($throwRuntimeError("index out of range"), undefined) : cols.$array[cols.$offset + i] = _r$32);
			/* } */ case 5:
			_i++;
		$s = 1; continue;
		case 2:
		_r$33 = q._applyTimeFilter(fromQuery, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		fromQuery = _r$33;
		$s = -1; return [beforeMacrosQuery + "SELECT " + "t," + " " + strings.Join(cols, ", ") + " FROM (" + " SELECT $timeSeries AS t," + " " + strings.Join(argsStr, ", ") + " " + fromQuery + " GROUP BY t" + " ORDER BY t" + ")", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._delta, $c: true, $r, _i, _r$31, _r$32, _r$33, _ref, args, argsStr, beforeMacrosQuery, cols, fromQuery, i, item, q, $s};return $f;
	};
	EvalQuery.prototype._delta = function(args, beforeMacrosQuery, fromQuery) { return this.$val._delta(args, beforeMacrosQuery, fromQuery); };
	EvalQuery.ptr.prototype.increase = function(query, ast) {
		var {$24r, $24r$1, _entry, _i, _r$31, _r$32, _r$33, _r$34, _ref, _tmp, _tmp$1, _tuple, a, args, ast, beforeMacrosQuery, err, fromQuery, i, macroQueries, q, query, $s, $r, $c} = $restore(this, {query, ast});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		_r$31 = q._parseMacro("$increase", query); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		macroQueries = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_tmp = (0 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 0]);
		_tmp$1 = (1 >= macroQueries.$length ? ($throwRuntimeError("index out of range"), undefined) : macroQueries.$array[macroQueries.$offset + 1]);
		beforeMacrosQuery = _tmp;
		fromQuery = _tmp$1;
		if (fromQuery.length < 1) {
			$s = -1; return [query, $ifaceNil];
		}
		args = $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("$increase")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr;
		/* */ if (args.$length < 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (args.$length < 1) { */ case 2:
			_r$32 = fmt.Errorf("amount of arguments must be > 0 for $increase func. Parsed arguments are: %v", new sliceType$1([args])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		_ref = args;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$33 = fmt.Sprintf("max(" + strings.Trim($assertType(a, $String), " \xA0\t\r\n") + ") AS max_%d", new sliceType$1([new $Int(i)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			((i < 0 || i >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + i] = new $String(_r$33));
			_i++;
		$s = 6; continue;
		case 7:
		_r$34 = q._increase(args, beforeMacrosQuery, fromQuery); /* */ $s = 9; case 9: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		$24r$1 = _r$34;
		$s = 10; case 10: return $24r$1;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.increase, $c: true, $r, $24r, $24r$1, _entry, _i, _r$31, _r$32, _r$33, _r$34, _ref, _tmp, _tmp$1, _tuple, a, args, ast, beforeMacrosQuery, err, fromQuery, i, macroQueries, q, query, $s};return $f;
	};
	EvalQuery.prototype.increase = function(query, ast) { return this.$val.increase(query, ast); };
	EvalQuery.ptr.prototype._increase = function(args, beforeMacrosQuery, fromQuery) {
		var {_i, _r$31, _r$32, _r$33, _ref, args, argsStr, beforeMacrosQuery, cols, fromQuery, i, item, q, $s, $r, $c} = $restore(this, {args, beforeMacrosQuery, fromQuery});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		cols = $makeSlice(sliceType, args.$length);
		argsStr = $makeSlice(sliceType, args.$length);
		_ref = args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			item = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= argsStr.$length) ? ($throwRuntimeError("index out of range"), undefined) : argsStr.$array[argsStr.$offset + i] = $assertType(item, $String));
			/* */ if (q.UseWindowFuncForMacros) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (q.UseWindowFuncForMacros) { */ case 3:
				_r$31 = fmt.Sprintf("if((max_%d - lagInFrame(max_%d,1,0) OVER ()) < 0, 0, max_%d - lagInFrame(max_%d,1,0) OVER ()) AS max_%d_Increase", new sliceType$1([new $Int(i), new $Int(i), new $Int(i), new $Int(i), new $Int(i)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				((i < 0 || i >= cols.$length) ? ($throwRuntimeError("index out of range"), undefined) : cols.$array[cols.$offset + i] = _r$31);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$32 = fmt.Sprintf("if(runningDifference(max_%d) < 0, 0, runningDifference(max_%d)) AS max_%d_Increase", new sliceType$1([new $Int(i), new $Int(i), new $Int(i)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				((i < 0 || i >= cols.$length) ? ($throwRuntimeError("index out of range"), undefined) : cols.$array[cols.$offset + i] = _r$32);
			/* } */ case 5:
			_i++;
		$s = 1; continue;
		case 2:
		_r$33 = q._applyTimeFilter(fromQuery, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		fromQuery = _r$33;
		$s = -1; return [beforeMacrosQuery + "SELECT " + "t," + " " + strings.Join(cols, ", ") + " FROM (" + " SELECT $timeSeries AS t," + " " + strings.Join(argsStr, ", ") + " " + fromQuery + " GROUP BY t" + " ORDER BY t" + ")", $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._increase, $c: true, $r, _i, _r$31, _r$32, _r$33, _ref, args, argsStr, beforeMacrosQuery, cols, fromQuery, i, item, q, $s};return $f;
	};
	EvalQuery.prototype._increase = function(args, beforeMacrosQuery, fromQuery) { return this.$val._increase(args, beforeMacrosQuery, fromQuery); };
	EvalQuery.ptr.prototype._applyTimeFilter = function(query, useMs) {
		var {_r$31, _r$32, _r$33, _r$34, q, query, timeFilterMacro, useMs, whereRe, $s, $r, $c} = $restore(this, {query, useMs});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		timeFilterMacro = "$timeFilter";
		if (useMs) {
			timeFilterMacro = "$timeFilterMs";
		}
		_r$31 = strings.ToLower(query); /* */ $s = 4; case 4: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$32 = strings.Contains(_r$31, "where"); /* */ $s = 5; case 5: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		/* */ if (_r$32) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$32) { */ case 1:
			_r$33 = regexp.MustCompile("(?i)where"); /* */ $s = 6; case 6: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			whereRe = _r$33;
			_r$34 = whereRe.ReplaceAllString(query, "WHERE $" + timeFilterMacro + " AND"); /* */ $s = 7; case 7: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			query = _r$34;
			$s = 3; continue;
		/* } else { */ case 2:
			query = query + (" WHERE " + timeFilterMacro);
		/* } */ case 3:
		$s = -1; return query;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype._applyTimeFilter, $c: true, $r, _r$31, _r$32, _r$33, _r$34, q, query, timeFilterMacro, useMs, whereRe, $s};return $f;
	};
	EvalQuery.prototype._applyTimeFilter = function(query, useMs) { return this.$val._applyTimeFilter(query, useMs); };
	EvalQuery.ptr.prototype.getNaturalTimeSeries = function(dateTimeType, from, to) {
		var dateTimeType, duration, from, q, to;
		q = this;
		if (dateTimeType === "DATETIME" || dateTimeType === "DATETIME64") {
			duration = new $Int64(to.$high - from.$high, to.$low - from.$low);
			if ((duration.$high < 0 || (duration.$high === 0 && duration.$low < 1200))) {
				return "toUInt32($dateTimeCol) * 1000";
			} else if ((duration.$high < 0 || (duration.$high === 0 && duration.$low < 14400))) {
				return "toUInt32(toStartOfMinute($dateTimeCol)) * 1000";
			} else if ((duration.$high < 0 || (duration.$high === 0 && duration.$low < 86400))) {
				return "toUInt32(toStartOfFiveMinute($dateTimeCol)) * 1000";
			} else if ((duration.$high < 0 || (duration.$high === 0 && duration.$low < 259200))) {
				return "toUInt32(toStartOfFifteenMinutes($dateTimeCol)) * 1000";
			} else if ((duration.$high < 0 || (duration.$high === 0 && duration.$low < 1296000))) {
				return "toUInt32(toStartOfHour($dateTimeCol)) * 1000";
			} else if ((duration.$high < 0 || (duration.$high === 0 && duration.$low < 9072000))) {
				return "toUInt32(toStartOfDay($dateTimeCol)) * 1000";
			} else if ((duration.$high < 0 || (duration.$high === 0 && duration.$low < 25920000))) {
				return "toUInt32(toDateTime(toMonday($dateTimeCol))) * 1000";
			} else if ((duration.$high < 0 || (duration.$high === 0 && duration.$low < 189216000))) {
				return "toUInt32(toDateTime(toStartOfMonth($dateTimeCol))) * 1000";
			} else {
				return "toUInt32(toDateTime(toStartOfQuarter($dateTimeCol))) * 1000";
			}
		}
		return "(intDiv($dateTimeCol, $interval) * $interval) * 1000";
	};
	EvalQuery.prototype.getNaturalTimeSeries = function(dateTimeType, from, to) { return this.$val.getNaturalTimeSeries(dateTimeType, from, to); };
	EvalQuery.ptr.prototype.getTimeSeries = function(dateTimeType) {
		var dateTimeType, q;
		q = this;
		if (dateTimeType === "DATETIME") {
			return "(intDiv(toUInt32($dateTimeCol), $interval) * $interval) * 1000";
		}
		if (dateTimeType === "DATETIME64") {
			return "(intDiv(toFloat64($dateTimeCol) * 1000, ($interval * 1000)) * ($interval * 1000))";
		}
		if (dateTimeType === "FLOAT") {
			return "(intDiv($dateTimeCol * 1000, ($interval * 1000)) * ($interval * 1000))";
		}
		if (dateTimeType === "TIMESTAMP64_3") {
			return "(intDiv($dateTimeCol, ($interval * 1000)) * ($interval * 1000))";
		}
		if (dateTimeType === "TIMESTAMP64_6") {
			return "(intDiv($dateTimeCol / 1000, ($interval * 1000)) * ($interval * 1000))";
		}
		if (dateTimeType === "TIMESTAMP64_9") {
			return "(intDiv($dateTimeCol / 1000000, ($interval * 1000)) * ($interval * 1000))";
		}
		return "(intDiv($dateTimeCol, $interval) * $interval) * 1000";
	};
	EvalQuery.prototype.getTimeSeries = function(dateTimeType) { return this.$val.getTimeSeries(dateTimeType); };
	EvalQuery.ptr.prototype.getTimeSeriesMs = function(dateTimeType) {
		var dateTimeType, q;
		q = this;
		if (dateTimeType === "DATETIME") {
			return "(intDiv(toUInt32($dateTimeCol) * 1000, $__interval_ms) * $__interval_ms)";
		}
		if (dateTimeType === "DATETIME64") {
			return "(intDiv(toFloat64($dateTimeCol) * 1000, $__interval_ms) * $__interval_ms)";
		}
		if (dateTimeType === "TIMESTAMP") {
			return "(intDiv($dateTimeCol * 1000, $__interval_ms) * $__interval_ms)";
		}
		if (dateTimeType === "FLOAT") {
			return "(intDiv($dateTimeCol * 1000, $__interval_ms) * $__interval_ms)";
		}
		if (dateTimeType === "TIMESTAMP64_3") {
			return "(intDiv($dateTimeCol, $__interval_ms) * $__interval_ms)";
		}
		if (dateTimeType === "TIMESTAMP64_6") {
			return "(intDiv($dateTimeCol / 1000, $__interval_ms) * $__interval_ms)";
		}
		if (dateTimeType === "TIMESTAMP64_9") {
			return "(intDiv($dateTimeCol / 1000000, $__interval_ms) * $__interval_ms)";
		}
		return "(intDiv($dateTimeCol, $__interval_ms) * $__interval_ms)";
	};
	EvalQuery.prototype.getTimeSeriesMs = function(dateTimeType) { return this.$val.getTimeSeriesMs(dateTimeType); };
	EvalQuery.ptr.prototype.getDateFilter = function() {
		var q;
		q = this;
		return "$dateCol >= toDate($from) AND $dateCol <= toDate($to)";
	};
	EvalQuery.prototype.getDateFilter = function() { return this.$val.getDateFilter(); };
	EvalQuery.ptr.prototype.getDateTimeFilter = function(dateTimeType) {
		var {$24r, _r$31, _r$32, convertFn, dateTimeType, q, $s, $r, $c} = $restore(this, {dateTimeType});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		dateTimeType = [dateTimeType];
		q = this;
		convertFn = (function(dateTimeType) { return function(t) {
			var t;
			if (dateTimeType[0] === "DATETIME") {
				return "toDateTime(" + t + ")";
			}
			if (dateTimeType[0] === "DATETIME64") {
				return "toDateTime64(" + t + ",3)";
			}
			if (dateTimeType[0] === "FLOAT") {
				return t;
			}
			if (dateTimeType[0] === "TIMESTAMP") {
				return t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_3") {
				return "1000*" + t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_6") {
				return "1000000*" + t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_9") {
				return "1000000000*" + t;
			}
			return t;
		}; })(dateTimeType);
		_r$31 = convertFn("$from"); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$32 = convertFn("$to"); /* */ $s = 2; case 2: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		$24r = "$dateTimeCol >= " + _r$31 + " AND $dateTimeCol <= " + _r$32;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.getDateTimeFilter, $c: true, $r, $24r, _r$31, _r$32, convertFn, dateTimeType, q, $s};return $f;
	};
	EvalQuery.prototype.getDateTimeFilter = function(dateTimeType) { return this.$val.getDateTimeFilter(dateTimeType); };
	EvalQuery.ptr.prototype.getDateTimeFilterMs = function(dateTimeType) {
		var {$24r, _r$31, _r$32, convertFn, dateTimeType, q, $s, $r, $c} = $restore(this, {dateTimeType});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		dateTimeType = [dateTimeType];
		q = this;
		convertFn = (function(dateTimeType) { return function(t) {
			var t;
			if (dateTimeType[0] === "DATETIME") {
				return "toDateTime(" + t + "/1000)";
			}
			if (dateTimeType[0] === "DATETIME64") {
				return "toDateTime64(" + t + "/1000,3)";
			}
			if (dateTimeType[0] === "FLOAT") {
				return "toFloat64(" + t + "/1000)";
			}
			if (dateTimeType[0] === "TIMESTAMP") {
				return "" + t + "/1000";
			}
			if (dateTimeType[0] === "TIMESTAMP64_3") {
				return t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_6") {
				return "1000*" + t;
			}
			if (dateTimeType[0] === "TIMESTAMP64_9") {
				return "1000000*" + t;
			}
			return t;
		}; })(dateTimeType);
		_r$31 = convertFn("$__from"); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$32 = convertFn("$__to"); /* */ $s = 2; case 2: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		$24r = "$dateTimeCol >= " + _r$31 + " AND $dateTimeCol <= " + _r$32;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.getDateTimeFilterMs, $c: true, $r, $24r, _r$31, _r$32, convertFn, dateTimeType, q, $s};return $f;
	};
	EvalQuery.prototype.getDateTimeFilterMs = function(dateTimeType) { return this.$val.getDateTimeFilterMs(dateTimeType); };
	EvalQuery.ptr.prototype.convertTimestamp = function(dt) {
		var dt, q;
		q = this;
		return $div64($clone(dt, time.Time).UnixMilli(), new $Int64(0, 1000), false);
	};
	EvalQuery.prototype.convertTimestamp = function(dt) { return this.$val.convertTimestamp(dt); };
	EvalQuery.ptr.prototype.round = function(dt, round) {
		var coefficient, dt, q, round, rounded;
		q = this;
		if (round === 0) {
			return dt;
		}
		coefficient = round;
		rounded = $clone(time.Unix($mul64($div64($clone(dt, time.Time).Unix(), (new $Int64(0, coefficient)), false), (new $Int64(0, coefficient))), new $Int64(0, 0)), time.Time);
		return rounded;
	};
	EvalQuery.prototype.round = function(dt, round) { return this.$val.round(dt, round); };
	EvalQuery.ptr.prototype.convertInterval = function(interval, intervalFactor, ms) {
		var _tuple, d, err, interval, intervalFactor, ms, q;
		q = this;
		if (interval === "") {
			return [0, $ifaceNil];
		}
		_tuple = time.ParseDuration(interval);
		d = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [0, err];
		}
		if (ms) {
			return [((math.Ceil(($flatten64(d.Milliseconds())) * (intervalFactor)) >> 0)), $ifaceNil];
		}
		return [((math.Ceil(d.Seconds() * (intervalFactor)) >> 0)), $ifaceNil];
	};
	EvalQuery.prototype.convertInterval = function(interval, intervalFactor, ms) { return this.$val.convertInterval(interval, intervalFactor, ms); };
	EvalQuery.ptr.prototype.unescape = function(query) {
		var {$24r, _r$31, arg, closeMacros, macros, openMacros, q, query, r, $s, $r, $c} = $restore(this, {query});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		q = this;
		macros = "$unescape(";
		openMacros = strings.Index(query, macros);
		/* while (true) { */ case 1:
			/* if (!(!((openMacros === -1)))) { break; } */ if(!(!((openMacros === -1)))) { $s = 2; continue; }
			r = $clone(q.betweenBraces($substring(query, (openMacros + macros.length >> 0))), betweenBracesResult);
			/* */ if (!(r.error === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(r.error === "")) { */ case 3:
				_r$31 = fmt.Errorf("$unescape macros error: %v", new sliceType$1([new $String(r.error)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				$24r = ["", _r$31];
				$s = 6; case 6: return $24r;
			/* } */ case 4:
			arg = r.result;
			arg = strings.Replace(arg, "'", "", -1);
			closeMacros = ((openMacros + macros.length >> 0) + r.result.length >> 0) + 1 >> 0;
			query = $substring(query, 0, openMacros) + arg + $substring(query, closeMacros);
			openMacros = strings.Index(query, macros);
		$s = 1; continue;
		case 2:
		$s = -1; return [query, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQuery.ptr.prototype.unescape, $c: true, $r, $24r, _r$31, arg, closeMacros, macros, openMacros, q, query, r, $s};return $f;
	};
	EvalQuery.prototype.unescape = function(query) { return this.$val.unescape(query); };
	EvalQuery.ptr.prototype.betweenBraces = function(query) {
		var i, openBraces, q, query, r;
		q = this;
		r = new betweenBracesResult.ptr("", "");
		openBraces = 1;
		i = 0;
		while (true) {
			if (!(i < query.length)) { break; }
			if (query.charCodeAt(i) === 40) {
				openBraces = openBraces + (1) >> 0;
			}
			if (query.charCodeAt(i) === 41) {
				openBraces = openBraces - (1) >> 0;
				if (openBraces === 0) {
					r.result = $substring(query, 0, i);
					break;
				}
			}
			i = i + (1) >> 0;
		}
		if (openBraces > 1) {
			r.error = "missing parentheses";
		}
		return r;
	};
	EvalQuery.prototype.betweenBraces = function(query) { return this.$val.betweenBraces(query); };
	newEvalAST = function(isObj) {
		var arr, isObj, obj;
		obj = false;
		arr = sliceType$1.nil;
		if (isObj) {
			obj = new $global.Map();
		} else {
			arr = $makeSlice(sliceType$1, 0);
		}
		return new EvalAST.ptr(obj, arr);
	};
	EvalAST.ptr.prototype.HasOwnProperty = function(key) {
		var _entry, _tuple, e, hasKey, key, v;
		e = this;
		_tuple = (_entry = $mapIndex(e.Obj,$String.keyFor(key)), _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		v = _tuple[0];
		hasKey = _tuple[1];
		return hasKey && !($interfaceIsEqual(v, $ifaceNil));
	};
	EvalAST.prototype.HasOwnProperty = function(key) { return this.$val.HasOwnProperty(key); };
	EvalAST.ptr.prototype.pushObj = function(objName, value) {
		var _entry, _entry$1, _key, _tuple, e, objExists, objName, value, x;
		e = this;
		_tuple = (_entry = $mapIndex(e.Obj,$String.keyFor(objName)), _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		objExists = _tuple[1];
		if (!objExists) {
			_key = objName; (e.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: (x = new EvalAST.ptr(false, sliceType$1.nil), new x.constructor.elem(x)) });
		}
		$assertType((_entry$1 = $mapIndex(e.Obj,$String.keyFor(objName)), _entry$1 !== undefined ? _entry$1.v : $ifaceNil), ptrType).push(value);
	};
	EvalAST.prototype.pushObj = function(objName, value) { return this.$val.pushObj(objName, value); };
	EvalAST.ptr.prototype.push = function(value) {
		var e, value;
		e = this;
		if (e.Arr === sliceType$1.nil) {
			e.Arr = new sliceType$1([]);
		}
		e.Arr = $append(e.Arr, value);
	};
	EvalAST.prototype.push = function(value) { return this.$val.push(value); };
	NewScanner = function(query) {
		var query;
		return new EvalQueryScanner.ptr(ptrType.nil, "", "", false, ptrType$2.nil, false, query, "");
	};
	$pkg.NewScanner = NewScanner;
	EvalQueryScanner.ptr.prototype.Next = function() {
		var {_r$31, _r$32, _tuple, _v, err, isNext, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = [s];
		s[0] = this;
		/* while (true) { */ case 1:
			_r$31 = (function(s) { return function $b() {
				var {$24r, _r$31, _r$32, _tuple$1, err, r, $s, $r, $c} = $restore(this, {});
				/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
				if (s[0]._s.length === 0) {
					$s = -1; return [false, $ifaceNil];
				}
				_r$31 = s[0].re.FindStringMatch(s[0]._s); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_tuple$1 = _r$31;
				r = _tuple$1[0];
				err = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil)) || r === ptrType$3.nil) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil)) || r === ptrType$3.nil) { */ case 2:
					_r$32 = fmt.Errorf("cannot find next token in [%v]", new sliceType$1([new $String(s[0]._s)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					$24r = [false, _r$32];
					$s = 5; case 5: return $24r;
				/* } */ case 3:
				s[0].Token = r.Group.Capture.String();
				s[0]._s = $substring(s[0]._s, s[0].Token.length);
				$s = -1; return [true, $ifaceNil];
				/* */ } return; } var $f = {$blk: $b, $c: true, $r, $24r, _r$31, _r$32, _tuple$1, err, r, $s};return $f;
			}; })(s)(); /* */ $s = 3; case 3: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_tuple = _r$31;
			isNext = _tuple[0];
			err = _tuple[1];
			if (!isNext) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [false, err];
			}
			if (!(s[0].SkipSpace)) { _v = false; $s = 6; continue s; }
			_r$32 = isWS(s[0].Token); /* */ $s = 7; case 7: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			_v = _r$32; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			$s = -1; return [true, $ifaceNil];
		case 2:
		$s = -1; return [false, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.Next, $c: true, $r, _r$31, _r$32, _tuple, _v, err, isNext, s, $s};return $f;
	};
	EvalQueryScanner.prototype.Next = function() { return this.$val.Next(); };
	EvalQueryScanner.ptr.prototype.expectNext = function() {
		var {$24r, _r$31, _r$32, _tuple, err, isNext, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r$31 = s.Next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		isNext = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$32 = fmt.Errorf("expecting additional token at the end of query [%s], error: %v", new sliceType$1([new $String(s._sOriginal), err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = [false, _r$32];
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		$s = -1; return [isNext, err];
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.expectNext, $c: true, $r, $24r, _r$31, _r$32, _tuple, err, isNext, s, $s};return $f;
	};
	EvalQueryScanner.prototype.expectNext = function() { return this.$val.expectNext(); };
	EvalQueryScanner.ptr.prototype.Format = function() {
		var {$24r, _r$31, _r$32, _tuple, ast, err, s, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r$31 = s.ToAST(); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		ast = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return ["", err];
		}
		_r$32 = PrintAST(ast, ""); /* */ $s = 2; case 2: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		$24r = [_r$32, $ifaceNil];
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.Format, $c: true, $r, $24r, _r$31, _r$32, _tuple, ast, err, s, $s};return $f;
	};
	EvalQueryScanner.prototype.Format = function() { return this.$val.Format(); };
	EvalQueryScanner.ptr.prototype.push = function(argument) {
		var _entry, _entry$1, _key, _key$1, _tuple, aliasesArr, argument, ast, exist, rootAST, s;
		s = this;
		_tuple = (_entry = $mapIndex(s.Tree.Obj,$String.keyFor(s.RootToken)), _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		rootAST = _tuple[0];
		exist = _tuple[1];
		if (exist) {
			ast = $assertType(rootAST, ptrType);
			if (!(ast.Arr === sliceType$1.nil)) {
				ast.Arr = $append(ast.Arr, argument);
			} else {
				aliasesArr = ptrType.nil;
				if (!ast.HasOwnProperty("aliases")) {
					aliasesArr = newEvalAST(false);
					_key = "aliases"; (ast.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: aliasesArr });
				} else {
					aliasesArr = $assertType((_entry$1 = $mapIndex(ast.Obj,$String.keyFor("aliases")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil), ptrType);
				}
				aliasesArr.Arr = $append(aliasesArr.Arr, argument);
			}
			_key$1 = s.RootToken; (s.Tree.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$1), { k: _key$1, v: ast });
		}
		s.expectedNext = false;
	};
	EvalQueryScanner.prototype.push = function(argument) { return this.$val.push(argument); };
	EvalQueryScanner.ptr.prototype.SetRoot = function(token) {
		var {_key, _r$31, s, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r$31 = strings.ToLower(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		s.RootToken = _r$31;
		_key = s.RootToken; (s.Tree.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: newEvalAST(false) });
		s.expectedNext = true;
		$s = -1; return;
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.SetRoot, $c: true, $r, _key, _r$31, s, token, $s};return $f;
	};
	EvalQueryScanner.prototype.SetRoot = function(token) { return this.$val.SetRoot(token); };
	EvalQueryScanner.ptr.prototype.isExpectedNext = function() {
		var s, v;
		s = this;
		v = s.expectedNext;
		s.expectedNext = false;
		return v;
	};
	EvalQueryScanner.prototype.isExpectedNext = function() { return this.$val.isExpectedNext(); };
	EvalQueryScanner.ptr.prototype.appendToken = function(argument) {
		var {_r$31, _v, argument, s, $s, $r, $c} = $restore(this, {argument});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		if (argument === "") { _v = true; $s = 3; continue s; }
		_r$31 = isSkipSpace($substring(argument, (argument.length - 1 >> 0))); /* */ $s = 4; case 4: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_v = _r$31; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return s.Token;
		/* } */ case 2:
		$s = -1; return " " + s.Token;
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.appendToken, $c: true, $r, _r$31, _v, argument, s, $s};return $f;
	};
	EvalQueryScanner.prototype.appendToken = function(argument) { return this.$val.appendToken(argument); };
	EvalQueryScanner.ptr.prototype.ToAST = function() {
		var {$24r, $24r$1, $24r$2, $24r$3, $24r$4, _entry, _entry$1, _entry$2, _i, _key, _key$1, _key$2, _key$3, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _r$58, _r$59, _r$60, _r$61, _r$62, _r$63, _r$64, _r$65, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _v, _v$1, argument, ast, ast$1, err, err$1, err$2, err$3, err$4, funcName, item, next, next$1, next$2, s, statement, subAST, subAST$1, subArr, subQuery, subQuery$1, subQueryPos, $s, $r, $c} = $restore(this, {});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		err = $ifaceNil;
		s._s = s._sOriginal;
		s.Tree = newEvalAST(true);
		$r = s.SetRoot("root"); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s.expectedNext = false;
		s.SkipSpace = true;
		s.re = tokenReComplied;
		subQuery = "";
		argument = "";
		/* while (true) { */ case 2:
			_r$31 = s.Next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_tuple = _r$31;
			next = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [ptrType.nil, err$1];
			} else if (!next) {
				/* break; */ $s = 3; continue;
			}
			if (!(!s.isExpectedNext())) { _v$1 = false; $s = 19; continue s; }
			_r$32 = isStatement(s.Token); /* */ $s = 20; case 20: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			_v$1 = _r$32; case 19:
			if (!(_v$1)) { _v = false; $s = 18; continue s; }
			_r$33 = strings.ToLower(s.Token); /* */ $s = 21; case 21: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_r$34 = s.Tree.HasOwnProperty(_r$33); /* */ $s = 22; case 22: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			_v = !_r$34; case 18:
			/* */ if (_v) { $s = 5; continue; }
			/* */ if (s.Token === "," && isClosured(argument)) { $s = 6; continue; }
			_r$35 = isClosureChars(s.Token); /* */ $s = 23; case 23: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			/* */ if (_r$35 && s.RootToken === "from") { $s = 7; continue; }
			_r$36 = isMacroFunc(s.Token); /* */ $s = 24; case 24: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			/* */ if (_r$36) { $s = 8; continue; }
			_r$37 = isIn(s.Token); /* */ $s = 25; case 25: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			/* */ if (_r$37) { $s = 9; continue; }
			_r$38 = isCond(s.Token); /* */ $s = 26; case 26: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
			/* */ if (_r$38 && (s.RootToken === "where" || s.RootToken === "prewhere")) { $s = 10; continue; }
			_r$39 = isJoin(s.Token); /* */ $s = 27; case 27: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			/* */ if (_r$39) { $s = 11; continue; }
			/* */ if (s.RootToken === "union all") { $s = 12; continue; }
			_r$40 = isComment(s.Token); /* */ $s = 28; case 28: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
			/* */ if (_r$40) { $s = 13; continue; }
			_r$41 = isClosureChars(s.Token); /* */ $s = 29; case 29: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
			/* */ if (_r$41 || s.Token === ".") { $s = 14; continue; }
			/* */ if (s.Token === ",") { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_v) { */ case 5:
				_r$42 = strings.ToUpper(s.Token); /* */ $s = 32; case 32: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
				/* */ if (_r$42 === "WITH" && s.RootToken === "order by") { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (_r$42 === "WITH" && s.RootToken === "order by") { */ case 30:
					_r$43 = s.appendToken(argument); /* */ $s = 33; case 33: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
					argument = argument + (_r$43);
					/* continue; */ $s = 2; continue;
				/* } */ case 31:
				/* */ if (!isClosured(argument)) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (!isClosured(argument)) { */ case 34:
					_r$44 = s.appendToken(argument); /* */ $s = 36; case 36: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
					argument = argument + (_r$44);
					/* continue; */ $s = 2; continue;
				/* } */ case 35:
				if (argument.length > 0) {
					s.push(new $String(argument));
					argument = "";
				}
				$r = s.SetRoot(s.Token); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (s.Token === "," && isClosured(argument)) { */ case 6:
				s.push(new $String(argument));
				argument = "";
				if (s.RootToken === "where") {
					s.push(new $String(s.Token));
				}
				s.expectedNext = true;
				$s = 17; continue;
			/* } else if (_r$35 && s.RootToken === "from") { */ case 7:
				subQuery = betweenBraces(s._s);
				_r$45 = isTableFunc(argument); /* */ $s = 41; case 41: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
				/* */ if (!_r$45) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (!_r$45) { */ case 38:
					_r$46 = toAST(subQuery); /* */ $s = 42; case 42: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
					_tuple$1 = _r$46;
					_key = s.RootToken; (s.Tree.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: _tuple$1[0] });
					err = _tuple$1[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return [ptrType.nil, err];
					}
					$s = 40; continue;
				/* } else { */ case 39:
					s.push(new $String(argument + "(" + subQuery + ")"));
					argument = "";
				/* } */ case 40:
				s._s = $substring(s._s, (subQuery.length + 1 >> 0));
				$s = 17; continue;
			/* } else if (_r$36) { */ case 8:
				funcName = s.Token;
				_r$47 = s.Next(); /* */ $s = 43; case 43: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
				_tuple$2 = _r$47;
				next$1 = _tuple$2[0];
				err$2 = _tuple$2[1];
				/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 44; continue; }
				/* */ if (!next$1) { $s = 45; continue; }
				/* */ $s = 46; continue;
				/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 44:
					_r$48 = fmt.Errorf("wrong macros parsing: %v", new sliceType$1([err$2])); /* */ $s = 47; case 47: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
					$24r = [ptrType.nil, _r$48];
					$s = 48; case 48: return $24r;
				/* } else if (!next$1) { */ case 45:
					_r$49 = fmt.Errorf("wrong macros signature for `%s` at [%s]", new sliceType$1([new $String(funcName), new $String(s._s)])); /* */ $s = 49; case 49: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
					$24r$1 = [ptrType.nil, _r$49];
					$s = 50; case 50: return $24r$1;
				/* } */ case 46:
				subQuery = betweenBraces(s._s);
				subAST = ptrType.nil;
				_r$50 = toAST(subQuery); /* */ $s = 51; case 51: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
				_tuple$3 = _r$50;
				subAST = _tuple$3[0];
				err = _tuple$3[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [ptrType.nil, err];
				}
				if (subAST.HasOwnProperty("root")) {
					_key$1 = funcName; (s.Tree.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$1), { k: _key$1, v: (_entry = $mapIndex(subAST.Obj,$String.keyFor("root")), _entry !== undefined ? _entry.v : $ifaceNil) });
				} else {
					_key$2 = funcName; (s.Tree.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$2), { k: _key$2, v: subAST });
				}
				s._s = $substring(s._s, (subQuery.length + 1 >> 0));
				_key$3 = "select"; (s.Tree.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key$3), { k: _key$3, v: newEvalAST(false) });
				$s = 17; continue;
			/* } else if (_r$37) { */ case 9:
				argument = argument + (" " + s.Token);
				_r$51 = s.Next(); /* */ $s = 52; case 52: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
				_tuple$4 = _r$51;
				next$2 = _tuple$4[0];
				err$3 = _tuple$4[1];
				/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 53; continue; }
				/* */ if (!next$2) { $s = 54; continue; }
				/* */ $s = 55; continue;
				/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 53:
					_r$52 = fmt.Errorf("error `IN` parsing: %v", new sliceType$1([err$3])); /* */ $s = 56; case 56: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
					$24r$2 = [ptrType.nil, _r$52];
					$s = 57; case 57: return $24r$2;
				/* } else if (!next$2) { */ case 54:
					_r$53 = fmt.Errorf("wrong `IN` signature for `%s` at [%s]", new sliceType$1([new $String(argument), new $String(s._s)])); /* */ $s = 58; case 58: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
					$24r$3 = [ptrType.nil, _r$53];
					$s = 59; case 59: return $24r$3;
				/* } */ case 55:
				_r$54 = isClosureChars(s.Token); /* */ $s = 63; case 63: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
				/* */ if (_r$54) { $s = 60; continue; }
				/* */ $s = 61; continue;
				/* if (_r$54) { */ case 60:
					subQuery = betweenBraces(s._s);
					if (subQuery === "") {
						betweenSquareBraces(s._s);
					}
					subAST$1 = ptrType.nil;
					_r$55 = toAST(subQuery); /* */ $s = 64; case 64: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
					_tuple$5 = _r$55;
					subAST$1 = _tuple$5[0];
					err = _tuple$5[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return [ptrType.nil, err];
					}
					/* */ if (subAST$1.HasOwnProperty("root") && $assertType((_entry$1 = $mapIndex(subAST$1.Obj,$String.keyFor("root")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil), ptrType).Arr.$length > 0) { $s = 65; continue; }
					/* */ $s = 66; continue;
					/* if (subAST$1.HasOwnProperty("root") && $assertType((_entry$1 = $mapIndex(subAST$1.Obj,$String.keyFor("root")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil), ptrType).Arr.$length > 0) { */ case 65:
						subArr = $assertType((_entry$2 = $mapIndex(subAST$1.Obj,$String.keyFor("root")), _entry$2 !== undefined ? _entry$2.v : $ifaceNil), ptrType);
						argument = argument + (" (");
						_ref = subArr.Arr;
						_i = 0;
						while (true) {
							if (!(_i < _ref.$length)) { break; }
							item = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
							argument = argument + ($assertType(item, $String));
							_i++;
						}
						argument = argument + ")";
						$s = 67; continue;
					/* } else { */ case 66:
						_r$56 = PrintAST(subAST$1, "    "); /* */ $s = 68; case 68: if($c) { $c = false; _r$56 = _r$56.$blk(); } if (_r$56 && _r$56.$blk !== undefined) { break s; }
						argument = argument + (" (\n" + _r$56 + ")");
						if (!(s.RootToken === "select")) {
							s.push(new $String(argument));
							argument = "";
						}
					/* } */ case 67:
					s._s = $substring(s._s, (subQuery.length + 1 >> 0));
					$s = 62; continue;
				/* } else { */ case 61:
					argument = argument + (" " + s.Token);
				/* } */ case 62:
				$s = 17; continue;
			/* } else if (_r$38 && (s.RootToken === "where" || s.RootToken === "prewhere")) { */ case 10:
				if (isClosured(argument)) {
					s.push(new $String(argument));
					argument = s.Token;
				} else {
					argument = argument + (" " + s.Token);
				}
				$s = 17; continue;
			/* } else if (_r$39) { */ case 11:
				_r$57 = s.parseJOIN(argument); /* */ $s = 69; case 69: if($c) { $c = false; _r$57 = _r$57.$blk(); } if (_r$57 && _r$57.$blk !== undefined) { break s; }
				_tuple$6 = _r$57;
				argument = _tuple$6[0];
				err = _tuple$6[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 70; continue; }
				/* */ $s = 71; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 70:
					_r$58 = fmt.Errorf("parseJOIN error: %v", new sliceType$1([err])); /* */ $s = 72; case 72: if($c) { $c = false; _r$58 = _r$58.$blk(); } if (_r$58 && _r$58.$blk !== undefined) { break s; }
					$24r$4 = [ptrType.nil, _r$58];
					$s = 73; case 73: return $24r$4;
				/* } */ case 71:
				$s = 17; continue;
			/* } else if (s.RootToken === "union all") { */ case 12:
				statement = "union all";
				s._s = s.Token + " " + s._s;
				_r$59 = strings.ToLower(s._s); /* */ $s = 74; case 74: if($c) { $c = false; _r$59 = _r$59.$blk(); } if (_r$59 && _r$59.$blk !== undefined) { break s; }
				_r$60 = strings.Index(_r$59, statement); /* */ $s = 75; case 75: if($c) { $c = false; _r$60 = _r$60.$blk(); } if (_r$60 && _r$60.$blk !== undefined) { break s; }
				subQueryPos = _r$60;
				/* while (true) { */ case 76:
					/* if (!(!((subQueryPos === -1)))) { break; } */ if(!(!((subQueryPos === -1)))) { $s = 77; continue; }
					subQuery$1 = $substring(s._s, 0, subQueryPos);
					ast = ptrType.nil;
					_r$61 = toAST(subQuery$1); /* */ $s = 78; case 78: if($c) { $c = false; _r$61 = _r$61.$blk(); } if (_r$61 && _r$61.$blk !== undefined) { break s; }
					_tuple$7 = _r$61;
					ast = _tuple$7[0];
					err = _tuple$7[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						$s = -1; return [ptrType.nil, err];
					}
					s.Tree.pushObj(statement, ast);
					s._s = $substring(s._s, (subQueryPos + statement.length >> 0), s._s.length);
					_r$62 = strings.ToLower(s._s); /* */ $s = 79; case 79: if($c) { $c = false; _r$62 = _r$62.$blk(); } if (_r$62 && _r$62.$blk !== undefined) { break s; }
					_r$63 = strings.Index(_r$62, statement); /* */ $s = 80; case 80: if($c) { $c = false; _r$63 = _r$63.$blk(); } if (_r$63 && _r$63.$blk !== undefined) { break s; }
					subQueryPos = _r$63;
				$s = 76; continue;
				case 77:
				_r$64 = toAST(s._s); /* */ $s = 81; case 81: if($c) { $c = false; _r$64 = _r$64.$blk(); } if (_r$64 && _r$64.$blk !== undefined) { break s; }
				_tuple$8 = _r$64;
				ast$1 = _tuple$8[0];
				err$4 = _tuple$8[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					$s = -1; return [ptrType.nil, err$4];
				}
				s._s = "";
				s.Tree.pushObj(statement, ast$1);
				$s = 17; continue;
			/* } else if (_r$40) { */ case 13:
				argument = argument + (s.Token + "\n");
				$s = 17; continue;
			/* } else if (_r$41 || s.Token === ".") { */ case 14:
				argument = argument + (s.Token);
				$s = 17; continue;
			/* } else if (s.Token === ",") { */ case 15:
				argument = argument + (s.Token + " ");
				$s = 17; continue;
			/* } else { */ case 16:
				_r$65 = s.appendToken(argument); /* */ $s = 82; case 82: if($c) { $c = false; _r$65 = _r$65.$blk(); } if (_r$65 && _r$65.$blk !== undefined) { break s; }
				argument = argument + (_r$65);
			/* } */ case 17:
		$s = 2; continue;
		case 3:
		if (!(argument === "")) {
			s.push(new $String(argument));
		}
		$s = -1; return [s.Tree, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.ToAST, $c: true, $r, $24r, $24r$1, $24r$2, $24r$3, $24r$4, _entry, _entry$1, _entry$2, _i, _key, _key$1, _key$2, _key$3, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _r$58, _r$59, _r$60, _r$61, _r$62, _r$63, _r$64, _r$65, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _v, _v$1, argument, ast, ast$1, err, err$1, err$2, err$3, err$4, funcName, item, next, next$1, next$2, s, statement, subAST, subAST$1, subArr, subQuery, subQuery$1, subQueryPos, $s};return $f;
	};
	EvalQueryScanner.prototype.ToAST = function() { return this.$val.ToAST(); };
	EvalQueryScanner.ptr.prototype.parseJOIN = function(argument) {
		var {$24r, $24r$1, $24r$2, _key, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, _v$1, _v$2, _v$3, argument, err, err$1, err$2, joinAST, joinConditions, joinExprToken, joinType, next, next$1, ok, ok$1, s, source, sourceStr, subQuery, x, $s, $r, $c} = $restore(this, {argument});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		if (!s.Tree.HasOwnProperty("join")) {
			_key = "join"; (s.Tree.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: newEvalAST(false) });
		}
		joinType = s.Token;
		_r$31 = s.Next(); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		next = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ if (!next) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$s = -1; return ["", err];
		/* } else if (!next) { */ case 3:
			_r$32 = fmt.Errorf("wrong join signature for `%s` at [%s]", new sliceType$1([new $String(joinType), new $String(s._s)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			$24r = ["", _r$32];
			$s = 6; case 6: return $24r;
		/* } */ case 4:
		source = ptrType.nil;
		err$1 = $ifaceNil;
		_r$33 = isClosureChars(s.Token); /* */ $s = 10; case 10: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		/* */ if (_r$33) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (_r$33) { */ case 7:
			subQuery = betweenBraces(s._s);
			_r$34 = toAST(subQuery); /* */ $s = 11; case 11: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			_tuple$1 = _r$34;
			source = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return ["", err$1];
			}
			s._s = $substring(s._s, (subQuery.length + 1 >> 0));
			s.Token = "";
			$s = 9; continue;
		/* } else { */ case 8:
			sourceStr = "";
			ok = true;
			/* while (true) { */ case 12:
				_r$35 = isID(s.Token); /* */ $s = 22; case 22: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				if (!(_r$35)) { _v$2 = false; $s = 21; continue s; }
				_r$36 = isTable(sourceStr); /* */ $s = 23; case 23: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
				_v$2 = !_r$36; case 21:
				if (!(_v$2)) { _v$1 = false; $s = 20; continue s; }
				_r$37 = strings.ToUpper(s.Token); /* */ $s = 24; case 24: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
				_v$1 = !(_r$37 === "AS"); case 20:
				if (!(_v$1)) { _v = false; $s = 19; continue s; }
				_r$38 = onJoinTokenOnlyRe.MatchString(s.Token); /* */ $s = 25; case 25: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
				_v = !_r$38; case 19:
				/* */ if (_v) { $s = 14; continue; }
				_r$39 = isMacro(s.Token); /* */ $s = 26; case 26: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
				/* */ if (_r$39) { $s = 15; continue; }
				/* */ if (s.Token === ".") { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_v) { */ case 14:
					sourceStr = sourceStr + (s.Token);
					$s = 18; continue;
				/* } else if (_r$39) { */ case 15:
					sourceStr = sourceStr + (s.Token);
					$s = 18; continue;
				/* } else if (s.Token === ".") { */ case 16:
					sourceStr = sourceStr + (s.Token);
					$s = 18; continue;
				/* } else { */ case 17:
					/* break; */ $s = 13; continue;
				/* } */ case 18:
				_r$40 = s.CheckArrayJOINAndExpectNextOrNext(joinType); /* */ $s = 27; case 27: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
				_tuple$2 = _r$40;
				ok = _tuple$2[0];
				err$1 = _tuple$2[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return ["", err$1];
				} else if (!ok) {
					/* break; */ $s = 13; continue;
				}
			$s = 12; continue;
			case 13:
			if (s.Token === sourceStr) {
				s.Token = "";
			}
			source = new EvalAST.ptr($makeMap($String.keyFor, [{ k: "root", v: (x = new EvalAST.ptr(false, new sliceType$1([new $String(sourceStr)])), new x.constructor.elem(x)) }]), sliceType$1.nil);
		/* } */ case 9:
		joinAST = new EvalAST.ptr($makeMap($String.keyFor, [{ k: "type", v: new $String(joinType) }, { k: "source", v: source }, { k: "aliases", v: newEvalAST(false) }, { k: "using", v: newEvalAST(false) }, { k: "on", v: newEvalAST(false) }]), sliceType$1.nil);
		ok$1 = true;
		/* while (true) { */ case 28:
			if (!(!(s.Token === ""))) { _v$3 = false; $s = 33; continue s; }
			_r$41 = onJoinTokenOnlyRe.MatchString(s.Token); /* */ $s = 34; case 34: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
			_v$3 = !_r$41; case 33:
			/* */ if (_v$3) { $s = 30; continue; }
			_r$42 = onJoinTokenOnlyRe.MatchString(s.Token); /* */ $s = 35; case 35: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
			/* */ if (_r$42) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (_v$3) { */ case 30:
				joinAST.pushObj("aliases", new $String(s.Token));
				$s = 32; continue;
			/* } else if (_r$42) { */ case 31:
				/* break; */ $s = 29; continue;
			/* } */ case 32:
			_r$43 = s.CheckArrayJOINAndExpectNextOrNext(joinType); /* */ $s = 36; case 36: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
			_tuple$3 = _r$43;
			ok$1 = _tuple$3[0];
			err$1 = _tuple$3[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return ["", err$1];
			} else if (!ok$1) {
				/* break; */ $s = 29; continue;
			}
		$s = 28; continue;
		case 29:
		_r$44 = strings.ToLower(s.Token); /* */ $s = 37; case 37: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
		joinExprToken = _r$44;
		joinConditions = "";
		/* while (true) { */ case 38:
			_r$45 = s.Next(); /* */ $s = 40; case 40: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
			_tuple$4 = _r$45;
			next$1 = _tuple$4[0];
			err$2 = _tuple$4[1];
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 41; continue; }
			/* */ if (!next$1) { $s = 42; continue; }
			/* */ $s = 43; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 41:
				_r$46 = fmt.Errorf("joinConditions s.Next() return %v", new sliceType$1([err$2])); /* */ $s = 44; case 44: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
				$24r$1 = ["", _r$46];
				$s = 45; case 45: return $24r$1;
			/* } else if (!next$1) { */ case 42:
				/* break; */ $s = 39; continue;
			/* } */ case 43:
			_r$47 = isStatement(s.Token); /* */ $s = 48; case 48: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
			/* */ if (_r$47) { $s = 46; continue; }
			/* */ $s = 47; continue;
			/* if (_r$47) { */ case 46:
				if (!(argument === "")) {
					s.push(new $String(argument));
					argument = "";
				}
				$r = s.SetRoot(s.Token); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 39; continue;
			/* } */ case 47:
			_r$48 = isJoin(s.Token); /* */ $s = 52; case 52: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
			/* */ if (_r$48) { $s = 50; continue; }
			/* */ $s = 51; continue;
			/* if (_r$48) { */ case 50:
				if (!(joinConditions === "")) {
					joinAST.pushObj("on", new $String(joinConditions));
					joinConditions = "";
				}
				s.Tree.pushObj("join", joinAST);
				joinAST = ptrType.nil;
				_r$49 = s.parseJOIN(argument); /* */ $s = 53; case 53: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
				_tuple$5 = _r$49;
				argument = _tuple$5[0];
				err$1 = _tuple$5[1];
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 54; continue; }
				/* */ $s = 55; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 54:
					_r$50 = fmt.Errorf("joinConditions s.parseJOIN return: %v", new sliceType$1([err$1])); /* */ $s = 56; case 56: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
					$24r$2 = ["", _r$50];
					$s = 57; case 57: return $24r$2;
				/* } */ case 55:
				/* break; */ $s = 39; continue;
			/* } */ case 51:
			/* */ if (joinExprToken === "using") { $s = 58; continue; }
			/* */ $s = 59; continue;
			/* if (joinExprToken === "using") { */ case 58:
				_r$51 = isID(s.Token); /* */ $s = 63; case 63: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
				/* */ if (!_r$51) { $s = 61; continue; }
				/* */ $s = 62; continue;
				/* if (!_r$51) { */ case 61:
					/* continue; */ $s = 38; continue;
				/* } */ case 62:
				joinAST.pushObj("using", new $String(s.Token));
				$s = 60; continue;
			/* } else { */ case 59:
				_r$52 = isCond(s.Token); /* */ $s = 67; case 67: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
				/* */ if (_r$52) { $s = 64; continue; }
				/* */ $s = 65; continue;
				/* if (_r$52) { */ case 64:
					_r$53 = strings.ToUpper(s.Token); /* */ $s = 68; case 68: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
					joinConditions = joinConditions + (" " + _r$53 + " ");
					$s = 66; continue;
				/* } else { */ case 65:
					joinConditions = joinConditions + (s.Token);
				/* } */ case 66:
			/* } */ case 60:
		$s = 38; continue;
		case 39:
		if (!(joinAST === ptrType.nil)) {
			if (!(joinConditions === "")) {
				joinAST.pushObj("on", new $String(joinConditions));
			}
			s.Tree.pushObj("join", joinAST);
		}
		$s = -1; return [argument, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.parseJOIN, $c: true, $r, $24r, $24r$1, $24r$2, _key, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, _v$1, _v$2, _v$3, argument, err, err$1, err$2, joinAST, joinConditions, joinExprToken, joinType, next, next$1, ok, ok$1, s, source, sourceStr, subQuery, x, $s};return $f;
	};
	EvalQueryScanner.prototype.parseJOIN = function(argument) { return this.$val.parseJOIN(argument); };
	EvalQueryScanner.ptr.prototype.CheckArrayJOINAndExpectNextOrNext = function(joinType) {
		var {$24r, $24r$1, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _tuple, _tuple$1, err, err$1, expectNext, joinType, next, s, $s, $r, $c} = $restore(this, {joinType});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r$31 = strings.ToUpper(joinType); /* */ $s = 3; case 3: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$32 = strings.Contains(_r$31, "ARRAY JOIN"); /* */ $s = 4; case 4: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		/* */ if (!_r$32) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$32) { */ case 1:
			_r$33 = s.expectNext(); /* */ $s = 5; case 5: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_tuple = _r$33;
			expectNext = _tuple[0];
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 6:
				_r$34 = fmt.Errorf("parseJOIN s.expectNext() return: %v", new sliceType$1([err])); /* */ $s = 8; case 8: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				$24r = [false, _r$34];
				$s = 9; case 9: return $24r;
			/* } */ case 7:
			if (expectNext) {
				$s = -1; return [expectNext, $ifaceNil];
			}
		/* } */ case 2:
		_r$35 = s.Next(); /* */ $s = 10; case 10: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_tuple$1 = _r$35;
		next = _tuple$1[0];
		err$1 = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 11:
			_r$36 = fmt.Errorf("parseJOIN s.next() return: %v", new sliceType$1([err$1])); /* */ $s = 13; case 13: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			$24r$1 = [false, _r$36];
			$s = 14; case 14: return $24r$1;
		/* } */ case 12:
		$s = -1; return [next, $ifaceNil];
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.CheckArrayJOINAndExpectNextOrNext, $c: true, $r, $24r, $24r$1, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _tuple, _tuple$1, err, err$1, expectNext, joinType, next, s, $s};return $f;
	};
	EvalQueryScanner.prototype.CheckArrayJOINAndExpectNextOrNext = function(joinType) { return this.$val.CheckArrayJOINAndExpectNextOrNext(joinType); };
	EvalQueryScanner.ptr.prototype.RemoveComments = function(query) {
		var {$24r, _r$31, _r$32, query, s, $s, $r, $c} = $restore(this, {query});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		s = this;
		_r$31 = regexp2.MustCompile("--(([^\\'\\n]*[\\']){2})*[^\\'\\n]*(?=\\n|$)|/\\*(?:[^*]|\\*[^/])*\\*/", 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_r$32 = _r$31.Replace(query, "", 0, -1); /* */ $s = 2; case 2: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		$24r = _r$32;
		$s = 3; case 3: return $24r;
		/* */ } return; } var $f = {$blk: EvalQueryScanner.ptr.prototype.RemoveComments, $c: true, $r, $24r, _r$31, _r$32, query, s, $s};return $f;
	};
	EvalQueryScanner.prototype.RemoveComments = function(query) { return this.$val.RemoveComments(query); };
	EvalQueryScanner.ptr.prototype.AddMetadata = function(query, q) {
		var q, query, s;
		s = this;
		if (q.FrontendDatasource) {
			return "/* grafana dashboard=$__dashboard, user=$__user */\n" + query;
		}
		return "/* grafana alerts rule=" + q.RuleUid + " query=" + q.RefId + " */ " + query;
	};
	EvalQueryScanner.prototype.AddMetadata = function(query, q) { return this.$val.AddMetadata(query, q); };
	isSkipSpace = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = skipSpaceOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isSkipSpace, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isCond = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = condOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isCond, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isIn = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = inOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isIn, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isJoin = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = joinsOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isJoin, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isTable = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = tableNameOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isTable, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isWS = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = wsOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isWS, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isMacroFunc = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = macroFuncOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isMacroFunc, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isMacro = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = macroOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isMacro, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isComment = function(token) {
		var {_r$31, _tuple, res, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = commentOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		_tuple = _r$31;
		res = _tuple[0];
		$s = -1; return res;
		/* */ } return; } var $f = {$blk: isComment, $c: true, $r, _r$31, _tuple, res, token, $s};return $f;
	};
	isID = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = idOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isID, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isStatement = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = statementOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isStatement, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isTableFunc = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = tableFuncOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isTableFunc, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	isClosureChars = function(token) {
		var {$24r, _r$31, token, $s, $r, $c} = $restore(this, {token});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		_r$31 = closureOnlyRe.MatchString(token); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: isClosureChars, $c: true, $r, $24r, _r$31, token, $s};return $f;
	};
	printItems = function(items, tab, separator) {
		var {_i, _r$31, _ref, i, item, items, result, separator, tab, x, $s, $r, $c} = $restore(this, {items, tab, separator});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = "";
		/* */ if (items.Arr.$length > 0) { $s = 1; continue; }
		/* */ if ((items.Obj ? items.Obj.size : 0) > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (items.Arr.$length > 0) { */ case 1:
			if (items.Arr.$length === 1) {
				result = result + (" " + $assertType((x = items.Arr, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), $String) + "\n");
			} else {
				result = result + ("\n");
				_ref = items.Arr;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					item = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					result = result + (tab + "    " + $assertType(item, $String));
					if (!((i === (items.Arr.$length - 1 >> 0)))) {
						result = result + (separator);
						result = result + ("\n");
					}
					_i++;
				}
			}
			$s = 3; continue;
		/* } else if ((items.Obj ? items.Obj.size : 0) > 0) { */ case 2:
			_r$31 = PrintAST(items, tab + "    "); /* */ $s = 4; case 4: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			result = "\n(\n" + _r$31 + "\n" + ")";
		/* } */ case 3:
		$s = -1; return result;
		/* */ } return; } var $f = {$blk: printItems, $c: true, $r, _i, _r$31, _ref, i, item, items, result, separator, tab, x, $s};return $f;
	};
	toAST = function(s) {
		var {$24r, _r$31, s, scanner, $s, $r, $c} = $restore(this, {s});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		scanner = $clone(NewScanner(s), EvalQueryScanner);
		_r$31 = scanner.ToAST(); /* */ $s = 1; case 1: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		$24r = _r$31;
		$s = 2; case 2: return $24r;
		/* */ } return; } var $f = {$blk: toAST, $c: true, $r, $24r, _r$31, s, scanner, $s};return $f;
	};
	isClosured = function(str) {
		var _entry, _entry$1, _tuple, _tuple$1, char$1, closeBrackets, closingPair, i, isInQuote, lastOpen, ok, ok$1, openBrackets, quoteType, runes, stack, str, x, x$1;
		stack = $makeSlice(sliceType$4, 0);
		isInQuote = false;
		quoteType = 0;
		openBrackets = $makeMap($Int32.keyFor, [{ k: 40, v: 41 }, { k: 91, v: 93 }, { k: 123, v: 125 }]);
		closeBrackets = $makeMap($Int32.keyFor, [{ k: 41, v: 40 }, { k: 93, v: 91 }, { k: 125, v: 123 }]);
		runes = (new sliceType$4($stringToRunes(str)));
		i = 0;
		while (true) {
			if (!(i < runes.$length)) { break; }
			char$1 = ((i < 0 || i >= runes.$length) ? ($throwRuntimeError("index out of range"), undefined) : runes.$array[runes.$offset + i]);
			if (((char$1 === 39) || (char$1 === 34) || (char$1 === 96)) && ((i === 0) || !(((x = i - 1 >> 0, ((x < 0 || x >= runes.$length) ? ($throwRuntimeError("index out of range"), undefined) : runes.$array[runes.$offset + x])) === 92)))) {
				if (!isInQuote) {
					isInQuote = true;
					quoteType = char$1;
				} else if (char$1 === quoteType) {
					isInQuote = false;
					quoteType = 0;
				}
				i = i + (1) >> 0;
				continue;
			}
			if (isInQuote) {
				i = i + (1) >> 0;
				continue;
			}
			_tuple = (_entry = $mapIndex(openBrackets,$Int32.keyFor(char$1)), _entry !== undefined ? [_entry.v, true] : [0, false]);
			ok = _tuple[1];
			if (ok) {
				stack = $append(stack, char$1);
			} else {
				_tuple$1 = (_entry$1 = $mapIndex(closeBrackets,$Int32.keyFor(char$1)), _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
				closingPair = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					if (stack.$length === 0) {
						return false;
					}
					lastOpen = (x$1 = stack.$length - 1 >> 0, ((x$1 < 0 || x$1 >= stack.$length) ? ($throwRuntimeError("index out of range"), undefined) : stack.$array[stack.$offset + x$1]));
					stack = $subslice(stack, 0, (stack.$length - 1 >> 0));
					if (!((lastOpen === closingPair))) {
						return false;
					}
				}
			}
			i = i + (1) >> 0;
		}
		return stack.$length === 0;
	};
	betweenBraces = function(query) {
		var i, openBraces, query, subQuery;
		openBraces = 1;
		subQuery = "";
		i = 0;
		while (true) {
			if (!(i < query.length)) { break; }
			if (query.charCodeAt(i) === 40) {
				openBraces = openBraces + (1) >> 0;
			}
			if (query.charCodeAt(i) === 41) {
				if (openBraces === 1) {
					subQuery = $substring(query, 0, i);
					break;
				}
				openBraces = openBraces - (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return subQuery;
	};
	betweenSquareBraces = function(query) {
		var i, openBraces, query, subQuery;
		openBraces = 1;
		subQuery = "";
		i = 0;
		while (true) {
			if (!(i < query.length)) { break; }
			if (query.charCodeAt(i) === 91) {
				openBraces = openBraces + (1) >> 0;
			}
			if (query.charCodeAt(i) === 93) {
				if (openBraces === 1) {
					subQuery = $substring(query, 0, i);
					break;
				}
				openBraces = openBraces - (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return subQuery;
	};
	PrintAST = function(AST, tab) {
		var {AST, _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$15, _entry$16, _entry$17, _entry$18, _entry$19, _entry$2, _entry$20, _entry$21, _entry$22, _entry$23, _entry$24, _entry$25, _entry$26, _entry$27, _entry$28, _entry$29, _entry$3, _entry$30, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _ref, _ref$1, item, item$1, itemAST, itemAST$1, joinType, result, tab, $s, $r, $c} = $restore(this, {AST, tab});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		result = "";
		/* */ if (AST.HasOwnProperty("root")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (AST.HasOwnProperty("root")) { */ case 1:
			_r$31 = printItems($assertType((_entry = $mapIndex(AST.Obj,$String.keyFor("root")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType), "\n", "\n"); /* */ $s = 3; case 3: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			result = result + (_r$31);
		/* } */ case 2:
		/* */ if (AST.HasOwnProperty("$rate")) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (AST.HasOwnProperty("$rate")) { */ case 4:
			result = result + (tab + "$rate(");
			_r$32 = printItems($assertType((_entry$1 = $mapIndex(AST.Obj,$String.keyFor("$rate")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 6; case 6: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
			result = result + (_r$32 + ")");
		/* } */ case 5:
		/* */ if (AST.HasOwnProperty("$perSecond")) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (AST.HasOwnProperty("$perSecond")) { */ case 7:
			result = result + (tab + "$perSecond(");
			_r$33 = printItems($assertType((_entry$2 = $mapIndex(AST.Obj,$String.keyFor("$perSecond")), _entry$2 !== undefined ? _entry$2.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 9; case 9: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			result = result + (_r$33 + ")");
		/* } */ case 8:
		/* */ if (AST.HasOwnProperty("$perSecondColumns")) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (AST.HasOwnProperty("$perSecondColumns")) { */ case 10:
			result = result + (tab + "$perSecondColumns(");
			_r$34 = printItems($assertType((_entry$3 = $mapIndex(AST.Obj,$String.keyFor("$perSecondColumns")), _entry$3 !== undefined ? _entry$3.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 12; case 12: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
			result = result + (_r$34 + ")");
		/* } */ case 11:
		/* */ if (AST.HasOwnProperty("$columns")) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (AST.HasOwnProperty("$columns")) { */ case 13:
			result = result + (tab + "$columns(");
			_r$35 = printItems($assertType((_entry$4 = $mapIndex(AST.Obj,$String.keyFor("$columns")), _entry$4 !== undefined ? _entry$4.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 15; case 15: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
			result = result + (_r$35 + ")");
		/* } */ case 14:
		/* */ if (AST.HasOwnProperty("$columnsMs")) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (AST.HasOwnProperty("$columnsMs")) { */ case 16:
			result = result + (tab + "$columnsMs(");
			_r$36 = printItems($assertType((_entry$5 = $mapIndex(AST.Obj,$String.keyFor("$columnsMs")), _entry$5 !== undefined ? _entry$5.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 18; case 18: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			result = result + (_r$36 + ")");
		/* } */ case 17:
		/* */ if (AST.HasOwnProperty("$rateColumns")) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (AST.HasOwnProperty("$rateColumns")) { */ case 19:
			result = result + (tab + "$rateColumns(");
			_r$37 = printItems($assertType((_entry$6 = $mapIndex(AST.Obj,$String.keyFor("$rateColumns")), _entry$6 !== undefined ? _entry$6.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 21; case 21: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			result = result + (_r$37 + ")");
		/* } */ case 20:
		/* */ if (AST.HasOwnProperty("$rateColumnsAggregated")) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (AST.HasOwnProperty("$rateColumnsAggregated")) { */ case 22:
			result = result + (tab + "$rateColumnsAggregated(");
			_r$38 = printItems($assertType((_entry$7 = $mapIndex(AST.Obj,$String.keyFor("$rateColumnsAggregated")), _entry$7 !== undefined ? _entry$7.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 24; case 24: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
			result = result + (_r$38 + ")");
		/* } */ case 23:
		/* */ if (AST.HasOwnProperty("$lttb")) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (AST.HasOwnProperty("$lttb")) { */ case 25:
			result = result + (tab + "$lttb(");
			_r$39 = printItems($assertType((_entry$8 = $mapIndex(AST.Obj,$String.keyFor("$lttb")), _entry$8 !== undefined ? _entry$8.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 27; case 27: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			result = result + (_r$39 + ")");
		/* } */ case 26:
		/* */ if (AST.HasOwnProperty("$lttbMs")) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (AST.HasOwnProperty("$lttbMs")) { */ case 28:
			result = result + (tab + "$lttbMs(");
			_r$40 = printItems($assertType((_entry$9 = $mapIndex(AST.Obj,$String.keyFor("$lttb")), _entry$9 !== undefined ? _entry$9.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 30; case 30: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
			result = result + (_r$40 + ")");
		/* } */ case 29:
		/* */ if (AST.HasOwnProperty("with")) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if (AST.HasOwnProperty("with")) { */ case 31:
			result = result + (tab + "WITH");
			_r$41 = printItems($assertType((_entry$10 = $mapIndex(AST.Obj,$String.keyFor("with")), _entry$10 !== undefined ? _entry$10.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 33; case 33: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
			result = result + (_r$41);
		/* } */ case 32:
		/* */ if (AST.HasOwnProperty("select")) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if (AST.HasOwnProperty("select")) { */ case 34:
			result = result + (tab + "SELECT");
			_r$42 = printItems($assertType((_entry$11 = $mapIndex(AST.Obj,$String.keyFor("select")), _entry$11 !== undefined ? _entry$11.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 36; case 36: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
			result = result + (_r$42);
		/* } */ case 35:
		/* */ if (AST.HasOwnProperty("from")) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if (AST.HasOwnProperty("from")) { */ case 37:
			result = result + ("\n" + tab + "FROM");
			_r$43 = printItems($assertType((_entry$12 = $mapIndex(AST.Obj,$String.keyFor("from")), _entry$12 !== undefined ? _entry$12.v : $ifaceNil), ptrType), tab, ""); /* */ $s = 39; case 39: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
			result = result + (_r$43);
		/* } */ case 38:
		/* */ if (AST.HasOwnProperty("aliases")) { $s = 40; continue; }
		/* */ $s = 41; continue;
		/* if (AST.HasOwnProperty("aliases")) { */ case 40:
			_r$44 = printItems($assertType((_entry$13 = $mapIndex(AST.Obj,$String.keyFor("aliases")), _entry$13 !== undefined ? _entry$13.v : $ifaceNil), ptrType), "", " "); /* */ $s = 42; case 42: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
			result = result + (_r$44);
		/* } */ case 41:
		/* */ if (AST.HasOwnProperty("join")) { $s = 43; continue; }
		/* */ $s = 44; continue;
		/* if (AST.HasOwnProperty("join")) { */ case 43:
			_ref = $assertType((_entry$14 = $mapIndex(AST.Obj,$String.keyFor("join")), _entry$14 !== undefined ? _entry$14.v : $ifaceNil), ptrType).Arr;
			_i = 0;
			/* while (true) { */ case 45:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 46; continue; }
				item = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				itemAST = $assertType(item, ptrType);
				joinType = $assertType((_entry$15 = $mapIndex(itemAST.Obj,$String.keyFor("type")), _entry$15 !== undefined ? _entry$15.v : $ifaceNil), $String);
				_r$45 = strings.ToUpper(joinType); /* */ $s = 47; case 47: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
				_r$46 = printItems($assertType((_entry$16 = $mapIndex(itemAST.Obj,$String.keyFor("source")), _entry$16 !== undefined ? _entry$16.v : $ifaceNil), ptrType), tab, ""); /* */ $s = 48; case 48: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
				_r$47 = printItems($assertType((_entry$17 = $mapIndex(itemAST.Obj,$String.keyFor("aliases")), _entry$17 !== undefined ? _entry$17.v : $ifaceNil), ptrType), "", " "); /* */ $s = 49; case 49: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
				result = result + ("\n" + tab + _r$45 + _r$46 + " " + _r$47);
				/* */ if (itemAST.HasOwnProperty("using") && $assertType((_entry$18 = $mapIndex(itemAST.Obj,$String.keyFor("using")), _entry$18 !== undefined ? _entry$18.v : $ifaceNil), ptrType).Arr.$length > 0) { $s = 50; continue; }
				/* */ if (itemAST.HasOwnProperty("on") && $assertType((_entry$19 = $mapIndex(itemAST.Obj,$String.keyFor("on")), _entry$19 !== undefined ? _entry$19.v : $ifaceNil), ptrType).Arr.$length > 0) { $s = 51; continue; }
				/* */ $s = 52; continue;
				/* if (itemAST.HasOwnProperty("using") && $assertType((_entry$18 = $mapIndex(itemAST.Obj,$String.keyFor("using")), _entry$18 !== undefined ? _entry$18.v : $ifaceNil), ptrType).Arr.$length > 0) { */ case 50:
					_r$48 = printItems($assertType((_entry$20 = $mapIndex(itemAST.Obj,$String.keyFor("using")), _entry$20 !== undefined ? _entry$20.v : $ifaceNil), ptrType), "", " "); /* */ $s = 53; case 53: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
					result = result + (" USING " + _r$48);
					$s = 52; continue;
				/* } else if (itemAST.HasOwnProperty("on") && $assertType((_entry$19 = $mapIndex(itemAST.Obj,$String.keyFor("on")), _entry$19 !== undefined ? _entry$19.v : $ifaceNil), ptrType).Arr.$length > 0) { */ case 51:
					_r$49 = printItems($assertType((_entry$21 = $mapIndex(itemAST.Obj,$String.keyFor("on")), _entry$21 !== undefined ? _entry$21.v : $ifaceNil), ptrType), tab, " "); /* */ $s = 54; case 54: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
					result = result + (" ON " + _r$49);
				/* } */ case 52:
				_i++;
			$s = 45; continue;
			case 46:
		/* } */ case 44:
		/* */ if (AST.HasOwnProperty("prewhere")) { $s = 55; continue; }
		/* */ $s = 56; continue;
		/* if (AST.HasOwnProperty("prewhere")) { */ case 55:
			result = result + ("\n" + tab + "PREWHERE");
			_r$50 = printItems($assertType((_entry$22 = $mapIndex(AST.Obj,$String.keyFor("prewhere")), _entry$22 !== undefined ? _entry$22.v : $ifaceNil), ptrType), tab, ""); /* */ $s = 57; case 57: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
			result = result + (_r$50);
		/* } */ case 56:
		/* */ if (AST.HasOwnProperty("where") && $assertType((_entry$23 = $mapIndex(AST.Obj,$String.keyFor("where")), _entry$23 !== undefined ? _entry$23.v : $ifaceNil), ptrType).Arr.$length > 0) { $s = 58; continue; }
		/* */ $s = 59; continue;
		/* if (AST.HasOwnProperty("where") && $assertType((_entry$23 = $mapIndex(AST.Obj,$String.keyFor("where")), _entry$23 !== undefined ? _entry$23.v : $ifaceNil), ptrType).Arr.$length > 0) { */ case 58:
			result = result + ("\n" + tab + "WHERE");
			_r$51 = printItems($assertType((_entry$24 = $mapIndex(AST.Obj,$String.keyFor("where")), _entry$24 !== undefined ? _entry$24.v : $ifaceNil), ptrType), tab, ""); /* */ $s = 60; case 60: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
			result = result + (_r$51);
		/* } */ case 59:
		/* */ if (AST.HasOwnProperty("group by")) { $s = 61; continue; }
		/* */ $s = 62; continue;
		/* if (AST.HasOwnProperty("group by")) { */ case 61:
			result = result + ("\n" + tab + "GROUP BY");
			_r$52 = printItems($assertType((_entry$25 = $mapIndex(AST.Obj,$String.keyFor("group by")), _entry$25 !== undefined ? _entry$25.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 63; case 63: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
			result = result + (_r$52);
		/* } */ case 62:
		/* */ if (AST.HasOwnProperty("having")) { $s = 64; continue; }
		/* */ $s = 65; continue;
		/* if (AST.HasOwnProperty("having")) { */ case 64:
			result = result + ("\n" + tab + "HAVING");
			_r$53 = printItems($assertType((_entry$26 = $mapIndex(AST.Obj,$String.keyFor("having")), _entry$26 !== undefined ? _entry$26.v : $ifaceNil), ptrType), tab, ""); /* */ $s = 66; case 66: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
			result = result + (_r$53);
		/* } */ case 65:
		/* */ if (AST.HasOwnProperty("order by")) { $s = 67; continue; }
		/* */ $s = 68; continue;
		/* if (AST.HasOwnProperty("order by")) { */ case 67:
			result = result + ("\n" + tab + "ORDER BY");
			_r$54 = printItems($assertType((_entry$27 = $mapIndex(AST.Obj,$String.keyFor("order by")), _entry$27 !== undefined ? _entry$27.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 69; case 69: if($c) { $c = false; _r$54 = _r$54.$blk(); } if (_r$54 && _r$54.$blk !== undefined) { break s; }
			result = result + (_r$54);
		/* } */ case 68:
		/* */ if (AST.HasOwnProperty("limit")) { $s = 70; continue; }
		/* */ $s = 71; continue;
		/* if (AST.HasOwnProperty("limit")) { */ case 70:
			result = result + ("\n" + tab + "LIMIT");
			_r$55 = printItems($assertType((_entry$28 = $mapIndex(AST.Obj,$String.keyFor("limit")), _entry$28 !== undefined ? _entry$28.v : $ifaceNil), ptrType), tab, ","); /* */ $s = 72; case 72: if($c) { $c = false; _r$55 = _r$55.$blk(); } if (_r$55 && _r$55.$blk !== undefined) { break s; }
			result = result + (_r$55);
		/* } */ case 71:
		/* */ if (AST.HasOwnProperty("union all")) { $s = 73; continue; }
		/* */ $s = 74; continue;
		/* if (AST.HasOwnProperty("union all")) { */ case 73:
			_ref$1 = $assertType((_entry$29 = $mapIndex(AST.Obj,$String.keyFor("union all")), _entry$29 !== undefined ? _entry$29.v : $ifaceNil), ptrType).Arr;
			_i$1 = 0;
			/* while (true) { */ case 75:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 76; continue; }
				item$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				itemAST$1 = $assertType(item$1, ptrType);
				result = result + ("\n\n" + tab + "UNION ALL" + "\n" + "\n");
				_r$56 = PrintAST(itemAST$1, tab); /* */ $s = 77; case 77: if($c) { $c = false; _r$56 = _r$56.$blk(); } if (_r$56 && _r$56.$blk !== undefined) { break s; }
				result = result + (_r$56);
				_i$1++;
			$s = 75; continue;
			case 76:
		/* } */ case 74:
		/* */ if (AST.HasOwnProperty("format")) { $s = 78; continue; }
		/* */ $s = 79; continue;
		/* if (AST.HasOwnProperty("format")) { */ case 78:
			result = result + ("\n" + tab + "FORMAT");
			_r$57 = printItems($assertType((_entry$30 = $mapIndex(AST.Obj,$String.keyFor("format")), _entry$30 !== undefined ? _entry$30.v : $ifaceNil), ptrType), tab, ""); /* */ $s = 80; case 80: if($c) { $c = false; _r$57 = _r$57.$blk(); } if (_r$57 && _r$57.$blk !== undefined) { break s; }
			result = result + (_r$57);
		/* } */ case 79:
		$s = -1; return result;
		/* */ } return; } var $f = {$blk: PrintAST, $c: true, $r, AST, _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$15, _entry$16, _entry$17, _entry$18, _entry$19, _entry$2, _entry$20, _entry$21, _entry$22, _entry$23, _entry$24, _entry$25, _entry$26, _entry$27, _entry$28, _entry$29, _entry$3, _entry$30, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _i$1, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$50, _r$51, _r$52, _r$53, _r$54, _r$55, _r$56, _r$57, _ref, _ref$1, item, item$1, itemAST, itemAST$1, joinType, result, tab, $s};return $f;
	};
	$pkg.PrintAST = PrintAST;
	ptrType$6.methods = [{prop: "ApplyMacrosAndTimeRangeToQuery", name: "ApplyMacrosAndTimeRangeToQuery", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "replace", name: "replace", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String, $error], false)}, {prop: "escapeIdentifier", name: "escapeIdentifier", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String], false)}, {prop: "escapeTableIdentifier", name: "escapeTableIdentifier", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String], false)}, {prop: "replaceRegexpWithCallBack", name: "replaceRegexpWithCallBack", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([ptrType$5, $String, funcType], [$String], false)}, {prop: "ReplaceTimeFilters", name: "ReplaceTimeFilters", pkg: "", typ: $funcType([$String, $Int], [$String], false)}, {prop: "getFilterSqlForDateTimeMs", name: "getFilterSqlForDateTimeMs", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $String], [$String], false)}, {prop: "getFilterSqlForDateTime", name: "getFilterSqlForDateTime", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $String], [$String], false)}, {prop: "applyMacros", name: "applyMacros", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "contain", name: "contain", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([ptrType, $String], [$Bool], false)}, {prop: "_parseMacro", name: "_parseMacro", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $String], [sliceType, $error], false)}, {prop: "columns", name: "columns", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "columnsMs", name: "columnsMs", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "_columns", name: "_columns", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $String, $String, $String, $Bool], [$String, $error], false)}, {prop: "lttb", name: "lttb", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "lttbMs", name: "lttbMs", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "_lttb", name: "_lttb", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $String, sliceType$1, $Bool], [$String, $error], false)}, {prop: "rateColumns", name: "rateColumns", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "_prepareColumnsAggregated", name: "_prepareColumnsAggregated", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $String, ptrType], [$String, $String, $String, $String, $String, $String, $String, sliceType, sliceType, sliceType, $error], false)}, {prop: "_formatColumnsAggregatedSQL", name: "_formatColumnsAggregatedSQL", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $String, $String, $String, $String, $String, sliceType, sliceType, sliceType, $String], [$String], false)}, {prop: "rateColumnsAggregated", name: "rateColumnsAggregated", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "perSecondColumnsAggregated", name: "perSecondColumnsAggregated", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "increaseColumnsAggregated", name: "increaseColumnsAggregated", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "deltaColumnsAggregated", name: "deltaColumnsAggregated", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "_fromIndex", name: "_fromIndex", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $String], [$Int, $error], false)}, {prop: "rate", name: "rate", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "_rate", name: "_rate", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([sliceType$1, $String, $String], [$String, $error], false)}, {prop: "perSecondColumns", name: "perSecondColumns", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "deltaColumns", name: "deltaColumns", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "increaseColumns", name: "increaseColumns", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "perSecond", name: "perSecond", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "_perSecond", name: "_perSecond", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([sliceType$1, $String, $String], [$String, $error], false)}, {prop: "delta", name: "delta", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "_delta", name: "_delta", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([sliceType$1, $String, $String], [$String, $error], false)}, {prop: "increase", name: "increase", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, ptrType], [$String, $error], false)}, {prop: "_increase", name: "_increase", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([sliceType$1, $String, $String], [$String, $error], false)}, {prop: "_applyTimeFilter", name: "_applyTimeFilter", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "getNaturalTimeSeries", name: "getNaturalTimeSeries", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $Int64, $Int64], [$String], false)}, {prop: "getTimeSeries", name: "getTimeSeries", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String], false)}, {prop: "getTimeSeriesMs", name: "getTimeSeriesMs", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String], false)}, {prop: "getDateFilter", name: "getDateFilter", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([], [$String], false)}, {prop: "getDateTimeFilter", name: "getDateTimeFilter", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String], false)}, {prop: "getDateTimeFilterMs", name: "getDateTimeFilterMs", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String], false)}, {prop: "convertTimestamp", name: "convertTimestamp", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([time.Time], [$Int64], false)}, {prop: "round", name: "round", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([time.Time, $Int], [time.Time], false)}, {prop: "convertInterval", name: "convertInterval", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $Int, $Bool], [$Int, $error], false)}, {prop: "unescape", name: "unescape", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String, $error], false)}, {prop: "betweenBraces", name: "betweenBraces", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [betweenBracesResult], false)}];
	ptrType.methods = [{prop: "HasOwnProperty", name: "HasOwnProperty", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "pushObj", name: "pushObj", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "push", name: "push", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$7.methods = [{prop: "raw", name: "raw", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([], [$String], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([], [$Bool, $error], false)}, {prop: "expectNext", name: "expectNext", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([], [$Bool, $error], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "push", name: "push", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$emptyInterface], [], false)}, {prop: "SetRoot", name: "SetRoot", pkg: "", typ: $funcType([$String], [], false)}, {prop: "isExpectedNext", name: "isExpectedNext", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([], [$Bool], false)}, {prop: "appendToken", name: "appendToken", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String], false)}, {prop: "ToAST", name: "ToAST", pkg: "", typ: $funcType([], [ptrType, $error], false)}, {prop: "parseJOIN", name: "parseJOIN", pkg: "github.com/altinity/clickhouse-grafana/pkg/eval", typ: $funcType([$String], [$String, $error], false)}, {prop: "CheckArrayJOINAndExpectNextOrNext", name: "CheckArrayJOINAndExpectNextOrNext", pkg: "", typ: $funcType([$String], [$Bool, $error], false)}, {prop: "RemoveComments", name: "RemoveComments", pkg: "", typ: $funcType([$String], [$String, $error], false)}, {prop: "AddMetadata", name: "AddMetadata", pkg: "", typ: $funcType([$String, ptrType$6], [$String], false)}];
	EvalQuery.init("", [{prop: "RefId", name: "RefId", embedded: false, exported: true, typ: $String, tag: "json:\"refId\""}, {prop: "RuleUid", name: "RuleUid", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "RawQuery", name: "RawQuery", embedded: false, exported: true, typ: $Bool, tag: "json:\"rawQuery\""}, {prop: "Query", name: "Query", embedded: false, exported: true, typ: $String, tag: "json:\"query\""}, {prop: "DateTimeCol", name: "DateTimeCol", embedded: false, exported: true, typ: $String, tag: "json:\"dateTimeColDataType\""}, {prop: "DateCol", name: "DateCol", embedded: false, exported: true, typ: $String, tag: "json:\"dateColDataType\""}, {prop: "DateTimeType", name: "DateTimeType", embedded: false, exported: true, typ: $String, tag: "json:\"dateTimeType\""}, {prop: "Extrapolate", name: "Extrapolate", embedded: false, exported: true, typ: $Bool, tag: "json:\"extrapolate\""}, {prop: "SkipComments", name: "SkipComments", embedded: false, exported: true, typ: $Bool, tag: "json:\"skip_comments\""}, {prop: "AddMetadata", name: "AddMetadata", embedded: false, exported: true, typ: $Bool, tag: "json:\"add_metadata\""}, {prop: "UseWindowFuncForMacros", name: "UseWindowFuncForMacros", embedded: false, exported: true, typ: $Bool, tag: "json:\"useWindowFuncForMacros\""}, {prop: "Format", name: "Format", embedded: false, exported: true, typ: $String, tag: "json:\"format\""}, {prop: "Round", name: "Round", embedded: false, exported: true, typ: $String, tag: "json:\"round\""}, {prop: "IntervalFactor", name: "IntervalFactor", embedded: false, exported: true, typ: $Int, tag: "json:\"intervalFactor\""}, {prop: "Interval", name: "Interval", embedded: false, exported: true, typ: $String, tag: "json:\"interval\""}, {prop: "IntervalSec", name: "IntervalSec", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "IntervalMs", name: "IntervalMs", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Database", name: "Database", embedded: false, exported: true, typ: $String, tag: "json:\"database\""}, {prop: "Table", name: "Table", embedded: false, exported: true, typ: $String, tag: "json:\"table\""}, {prop: "MaxDataPoints", name: "MaxDataPoints", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "FrontendDatasource", name: "FrontendDatasource", embedded: false, exported: true, typ: $Bool, tag: "json:\"frontendDatasource\""}, {prop: "From", name: "From", embedded: false, exported: true, typ: time.Time, tag: ""}, {prop: "To", name: "To", embedded: false, exported: true, typ: time.Time, tag: ""}]);
	betweenBracesResult.init("github.com/altinity/clickhouse-grafana/pkg/eval", [{prop: "result", name: "result", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "error", name: "error", embedded: false, exported: false, typ: $String, tag: ""}]);
	EvalAST.init("", [{prop: "Obj", name: "Obj", embedded: false, exported: true, typ: mapType, tag: ""}, {prop: "Arr", name: "Arr", embedded: false, exported: true, typ: sliceType$1, tag: ""}]);
	EvalQueryScanner.init("github.com/altinity/clickhouse-grafana/pkg/eval", [{prop: "Tree", name: "Tree", embedded: false, exported: true, typ: ptrType, tag: ""}, {prop: "RootToken", name: "RootToken", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Token", name: "Token", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "SkipSpace", name: "SkipSpace", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "re", name: "re", embedded: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "expectedNext", name: "expectedNext", embedded: false, exported: false, typ: $Bool, tag: ""}, {prop: "_sOriginal", name: "_sOriginal", embedded: false, exported: false, typ: $String, tag: ""}, {prop: "_s", name: "_s", embedded: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = regexp2.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = regexp.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = regexp.MustCompile("\\$timeSeries\\b"); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		timeSeriesMacroRegexp = _r;
		_r$1 = regexp.MustCompile("\\$timeSeriesMs\\b"); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		timeSeriesMsMacroRegexp = _r$1;
		_r$2 = regexp.MustCompile("\\$naturalTimeSeries\\b"); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		naturalTimeSeriesMacroRegexp = _r$2;
		_r$3 = regexp.MustCompile("\\$timeFilter\\b"); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		timeFilterMacroRegexp = _r$3;
		_r$4 = regexp.MustCompile("\\$timeFilterMs\\b"); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		timeFilterMsMacroRegexp = _r$4;
		_r$5 = regexp.MustCompile("\\$table\\b"); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		tableMacroRegexp = _r$5;
		_r$6 = regexp.MustCompile("\\$from\\b"); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		fromMacroRegexp = _r$6;
		_r$7 = regexp.MustCompile("\\$to\\b"); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		toMacroRegexp = _r$7;
		_r$8 = regexp.MustCompile("\\$dateCol\\b"); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		dateColMacroRegexp = _r$8;
		_r$9 = regexp.MustCompile("\\$dateTimeCol\\b"); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		dateTimeColMacroRegexp = _r$9;
		_r$10 = regexp.MustCompile("\\$interval\\b"); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		intervalMacroRegexp = _r$10;
		_r$11 = regexp.MustCompile("\\$timeFilterByColumn\\(([\\w_]+)\\)"); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		timeFilterByColumnMacroRegexp = _r$11;
		_r$12 = regexp.MustCompile("\\$timeFilter64ByColumn\\(([\\w_]+)\\)"); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		timeFilter64ByColumnMacroRegexp = _r$12;
		_r$13 = regexp.MustCompile("\\$__from\\b"); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		fromMsMacroRegexp = _r$13;
		_r$14 = regexp.MustCompile("\\$__to\\b"); /* */ $s = 23; case 23: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		toMsMacroRegexp = _r$14;
		_r$15 = regexp.MustCompile("\\$__interval_ms\\b"); /* */ $s = 24; case 24: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		intervalMsMacroRegexp = _r$15;
		unitsInMilliseconds = $makeMap($String.keyFor, [{ k: "y", v: new $Int64(7, 1471228928) }, { k: "M", v: new $Int64(0, 2592000000) }, { k: "w", v: new $Int64(0, 604800000) }, { k: "d", v: new $Int64(0, 86400000) }, { k: "h", v: new $Int64(0, 3600000) }, { k: "m", v: new $Int64(0, 60000) }, { k: "s", v: new $Int64(0, 1000) }, { k: "ms", v: new $Int64(0, 1) }]);
		_r$16 = regexp.MustCompile("^(?:\\s+)$"); /* */ $s = 25; case 25: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		wsOnlyRe = _r$16;
		_r$17 = regexp2.MustCompile("^(?:--(([^\\'\\n]*[\\']){2})*[^\\'\\n]*(?=\\n|$)|/\\*(?:[^*]|\\*[^/])*\\*/)$", 2); /* */ $s = 26; case 26: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		commentOnlyRe = _r$17;
		_r$18 = regexp.MustCompile("^(?:[a-zA-Z_][a-zA-Z_0-9]*)$"); /* */ $s = 27; case 27: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		idOnlyRe = _r$18;
		_r$19 = regexp.MustCompile("^(?:[\\(\\)\\[\\]])$"); /* */ $s = 28; case 28: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		closureOnlyRe = _r$19;
		_r$20 = regexp.MustCompile("^(?:(\\$deltaColumnsAggregated|\\$increaseColumnsAggregated|\\$perSecondColumnsAggregated|\\$rateColumnsAggregated|\\$rateColumns|\\$perSecondColumns|\\$deltaColumns|\\$increaseColumns|\\$rate|\\$perSecond|\\$delta|\\$increase|\\$columnsMs|\\$columns|\\$lttbMs|\\$lttb))$"); /* */ $s = 29; case 29: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		macroFuncOnlyRe = _r$20;
		_r$21 = regexp.MustCompile("(?mi)^(?:\\b(with|select|from|where|having|order by|group by|limit|format|prewhere|union all)\\b)$"); /* */ $s = 30; case 30: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		statementOnlyRe = _r$21;
		_r$22 = regexp.MustCompile("(?mi)^(?:\\b(left\\s+array\\s+join|array\\s+join|global\\s+any\\s+inner\\s+outer\\s+join|global\\s+any\\s+inner\\s+join|global\\s+any\\s+left\\s+outer\\s+join|global\\s+any\\s+left\\s+join|global\\s+any\\s+right\\s+outer\\s+join|global\\s+any\\s+right\\s+join|global\\s+any\\s+full\\s+outer\\s+join|global\\s+any\\s+full\\s+join|global\\s+any\\s+cross\\s+outer\\s+join|global\\s+any\\s+cross\\s+join|global\\s+any\\s+outer\\s+join|global\\s+any\\s+join|global\\s+all\\s+inner\\s+outer\\s+join|global\\s+all\\s+inner\\s+join|global\\s+all\\s+left\\s+outer\\s+join|global\\s+all\\s+left\\s+join|global\\s+all\\s+right\\s+outer\\s+join|global\\s+all\\s+right\\s+join|global\\s+all\\s+full\\s+outer\\s+join|global\\s+all\\s+full\\s+join|global\\s+all\\s+cross\\s+outer\\s+join|global\\s+all\\s+cross\\s+join|global\\s+all\\s+outer\\s+join|global\\s+all\\s+join|global\\s+inner\\s+outer\\s+join|global\\s+inner\\s+join|global\\s+left\\s+outer\\s+join|global\\s+left\\s+join|global\\s+right\\s+outer\\s+join|global\\s+right\\s+join|global\\s+full\\s+outer\\s+join|global\\s+full\\s+join|global\\s+cross\\s+outer\\s+join|global\\s+cross\\s+join|global\\s+outer\\s+join|global\\s+join|any\\s+inner\\s+outer\\s+join|any\\s+inner\\s+join|any\\s+left\\s+outer\\s+join|any\\s+left\\s+join|any\\s+right\\s+outer\\s+join|any\\s+right\\s+join|any\\s+full\\s+outer\\s+join|any\\s+full\\s+join|any\\s+cross\\s+outer\\s+join|any\\s+cross\\s+join|any\\s+outer\\s+join|any\\s+join|all\\s+inner\\s+outer\\s+join|all\\s+inner\\s+join|all\\s+left\\s+outer\\s+join|all\\s+left\\s+join|all\\s+right\\s+outer\\s+join|all\\s+right\\s+join|all\\s+full\\s+outer\\s+join|all\\s+full\\s+join|all\\s+cross\\s+outer\\s+join|all\\s+cross\\s+join|all\\s+outer\\s+join|all\\s+join|inner\\s+outer\\s+join|inner\\s+join|left\\s+outer\\s+join|left\\s+join|right\\s+outer\\s+join|right\\s+join|full\\s+outer\\s+join|full\\s+join|cross\\s+outer\\s+join|cross\\s+join|outer\\s+join|join)\\b)$"); /* */ $s = 31; case 31: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		joinsOnlyRe = _r$22;
		_r$23 = regexp.MustCompile("(?mi)^(?:\\b(using|on)\\b)$"); /* */ $s = 32; case 32: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		onJoinTokenOnlyRe = _r$23;
		_r$24 = regexp.MustCompile("(?mi)^(?:([A-Za-z0-9_]+|[A-Za-z0-9_]+\\\\.[A-Za-z0-9_]+))$"); /* */ $s = 33; case 33: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		tableNameOnlyRe = _r$24;
		_r$25 = regexp.MustCompile("(?mi)^(?:\\b(sqlite|file|remote|remoteSecure|cluster|clusterAllReplicas|merge|numbers|url|mysql|postgresql|jdbc|odbc|hdfs|input|generateRandom|s3|s3Cluster)\\b)$"); /* */ $s = 34; case 34: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		tableFuncOnlyRe = _r$25;
		_r$26 = regexp.MustCompile("(?mi)^(?:\\$[A-Za-z0-9_$]+|\\${[A-Za-z0-9_]+(:[A-Za-z0-9_]+)?})$"); /* */ $s = 35; case 35: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		macroOnlyRe = _r$26;
		_r$27 = regexp.MustCompile("(?mi)^(?:\\b(global in|global not in|not in|in)\\b(?:\\s+\\[\\s*(?:'[^']*'\\s*,\\s*)*'[^']*'\\s*\\])?)$"); /* */ $s = 36; case 36: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		inOnlyRe = _r$27;
		_r$28 = regexp.MustCompile("(?mi)^(?:\\b(or|and)\\b)$"); /* */ $s = 37; case 37: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		condOnlyRe = _r$28;
		_r$29 = regexp.MustCompile("^(?:[\\(\\.! \\[])$"); /* */ $s = 38; case 38: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
		skipSpaceOnlyRe = _r$29;
		tokenRe = strings.Join(new sliceType(["\\b(with|select|from|where|having|order by|group by|limit|format|prewhere|union all)\\b", "(\\$deltaColumnsAggregated|\\$increaseColumnsAggregated|\\$perSecondColumnsAggregated|\\$rateColumnsAggregated|\\$rateColumns|\\$perSecondColumns|\\$deltaColumns|\\$increaseColumns|\\$rate|\\$perSecond|\\$delta|\\$increase|\\$columnsMs|\\$columns|\\$lttbMs|\\$lttb)", "\\b(left\\s+array\\s+join|array\\s+join|global\\s+any\\s+inner\\s+outer\\s+join|global\\s+any\\s+inner\\s+join|global\\s+any\\s+left\\s+outer\\s+join|global\\s+any\\s+left\\s+join|global\\s+any\\s+right\\s+outer\\s+join|global\\s+any\\s+right\\s+join|global\\s+any\\s+full\\s+outer\\s+join|global\\s+any\\s+full\\s+join|global\\s+any\\s+cross\\s+outer\\s+join|global\\s+any\\s+cross\\s+join|global\\s+any\\s+outer\\s+join|global\\s+any\\s+join|global\\s+all\\s+inner\\s+outer\\s+join|global\\s+all\\s+inner\\s+join|global\\s+all\\s+left\\s+outer\\s+join|global\\s+all\\s+left\\s+join|global\\s+all\\s+right\\s+outer\\s+join|global\\s+all\\s+right\\s+join|global\\s+all\\s+full\\s+outer\\s+join|global\\s+all\\s+full\\s+join|global\\s+all\\s+cross\\s+outer\\s+join|global\\s+all\\s+cross\\s+join|global\\s+all\\s+outer\\s+join|global\\s+all\\s+join|global\\s+inner\\s+outer\\s+join|global\\s+inner\\s+join|global\\s+left\\s+outer\\s+join|global\\s+left\\s+join|global\\s+right\\s+outer\\s+join|global\\s+right\\s+join|global\\s+full\\s+outer\\s+join|global\\s+full\\s+join|global\\s+cross\\s+outer\\s+join|global\\s+cross\\s+join|global\\s+outer\\s+join|global\\s+join|any\\s+inner\\s+outer\\s+join|any\\s+inner\\s+join|any\\s+left\\s+outer\\s+join|any\\s+left\\s+join|any\\s+right\\s+outer\\s+join|any\\s+right\\s+join|any\\s+full\\s+outer\\s+join|any\\s+full\\s+join|any\\s+cross\\s+outer\\s+join|any\\s+cross\\s+join|any\\s+outer\\s+join|any\\s+join|all\\s+inner\\s+outer\\s+join|all\\s+inner\\s+join|all\\s+left\\s+outer\\s+join|all\\s+left\\s+join|all\\s+right\\s+outer\\s+join|all\\s+right\\s+join|all\\s+full\\s+outer\\s+join|all\\s+full\\s+join|all\\s+cross\\s+outer\\s+join|all\\s+cross\\s+join|all\\s+outer\\s+join|all\\s+join|inner\\s+outer\\s+join|inner\\s+join|left\\s+outer\\s+join|left\\s+join|right\\s+outer\\s+join|right\\s+join|full\\s+outer\\s+join|full\\s+join|cross\\s+outer\\s+join|cross\\s+join|outer\\s+join|join)\\b", "\\b(global in|global not in|not in|in)\\b(?:\\s+\\[\\s*(?:'[^']*'\\s*,\\s*)*'[^']*'\\s*\\])?", "\\s+", "--(([^\\'\\n]*[\\']){2})*[^\\'\\n]*(?=\\n|$)|/\\*(?:[^*]|\\*[^/])*\\*/", "[a-zA-Z_][a-zA-Z_0-9]*", "('(?:[^'\\\\]|\\\\.)*')|(`(?:[^`\\\\]|\\\\.)*`)|(\"(?:[^\"\\\\]|\\\\.)*\")", "\\d+e\\d+", "\\d+\\.\\d*|\\d*\\.\\d+|\\d+[eE][-+]\\d+", "\\d+", "=>|\\|\\||>=|<=|==|!=|<>|->|[-+/%*=<>\\.!]", "[\\(\\)\\[\\]]", "[,?:]", "\\${[A-Za-z0-9_]+(:[A-Za-z0-9_]+)?}", "\\$[A-Za-z0-9_$]+"]), "|");
		_r$30 = regexp2.MustCompile("^(?:" + tokenRe + ")", 3); /* */ $s = 39; case 39: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		tokenReComplied = _r$30;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, $init, fmt, eval$1, js, regexp, strings, time, AdhocFilter, Target, QueryRequest, sliceType, sliceType$1, sliceType$2, mapType, ptrType, structType, ptrType$1, parseTargets, applyAdhocFiltersGopherJS, findGroupByProperties, createQueryGopherJS, replaceTimeFiltersGopherJS, getAstPropertyGopherJS, main;
	fmt = $packages["fmt"];
	eval$1 = $packages["github.com/altinity/clickhouse-grafana/pkg/eval"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	regexp = $packages["regexp"];
	strings = $packages["strings"];
	time = $packages["time"];
	AdhocFilter = $pkg.AdhocFilter = $newType(0, $kindStruct, "main.AdhocFilter", true, "main", true, function(Key_, Operator_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = "";
			this.Operator = "";
			this.Value = $ifaceNil;
			return;
		}
		this.Key = Key_;
		this.Operator = Operator_;
		this.Value = Value_;
	});
	Target = $pkg.Target = $newType(0, $kindStruct, "main.Target", true, "main", true, function(Database_, Table_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Database = "";
			this.Table = "";
			return;
		}
		this.Database = Database_;
		this.Table = Table_;
	});
	QueryRequest = $pkg.QueryRequest = $newType(0, $kindStruct, "main.QueryRequest", true, "main", true, function(RefId_, RuleUid_, RawQuery_, Query_, DateTimeCol_, DateCol_, DateTimeType_, Extrapolate_, SkipComments_, AddMetadata_, Format_, Round_, IntervalFactor_, Interval_, Database_, Table_, MaxDataPoints_, FrontendDatasource_, UseWindowFuncForMacros_, TimeRange_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.RefId = "";
			this.RuleUid = "";
			this.RawQuery = false;
			this.Query = "";
			this.DateTimeCol = "";
			this.DateCol = "";
			this.DateTimeType = "";
			this.Extrapolate = false;
			this.SkipComments = false;
			this.AddMetadata = false;
			this.Format = "";
			this.Round = "";
			this.IntervalFactor = 0;
			this.Interval = "";
			this.Database = "";
			this.Table = "";
			this.MaxDataPoints = new $Int64(0, 0);
			this.FrontendDatasource = false;
			this.UseWindowFuncForMacros = false;
			this.TimeRange = new structType.ptr("", "");
			return;
		}
		this.RefId = RefId_;
		this.RuleUid = RuleUid_;
		this.RawQuery = RawQuery_;
		this.Query = Query_;
		this.DateTimeCol = DateTimeCol_;
		this.DateCol = DateCol_;
		this.DateTimeType = DateTimeType_;
		this.Extrapolate = Extrapolate_;
		this.SkipComments = SkipComments_;
		this.AddMetadata = AddMetadata_;
		this.Format = Format_;
		this.Round = Round_;
		this.IntervalFactor = IntervalFactor_;
		this.Interval = Interval_;
		this.Database = Database_;
		this.Table = Table_;
		this.MaxDataPoints = MaxDataPoints_;
		this.FrontendDatasource = FrontendDatasource_;
		this.UseWindowFuncForMacros = UseWindowFuncForMacros_;
		this.TimeRange = TimeRange_;
	});
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType(AdhocFilter);
	sliceType$2 = $sliceType($String);
	mapType = $mapType($String, $emptyInterface);
	ptrType = $ptrType(eval$1.EvalAST);
	structType = $structType("", [{prop: "From", name: "From", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "To", name: "To", embedded: false, exported: true, typ: $String, tag: ""}]);
	ptrType$1 = $ptrType(time.Location);
	parseTargets = function(from, defaultDatabase, defaultTable) {
		var {_1, _r, _tmp, _tmp$1, defaultDatabase, defaultTable, from, parts, targetDatabase, targetTable, $s, $r, $c} = $restore(this, {from, defaultDatabase, defaultTable});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (from.length === 0) {
			$s = -1; return ["", ""];
		}
		_tmp = "";
		_tmp$1 = "";
		targetTable = _tmp;
		targetDatabase = _tmp$1;
		parts = strings.Split(from, ".");
			_1 = parts.$length;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (1)) { */ case 2:
				targetTable = (0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0]);
				targetDatabase = defaultDatabase;
				$s = 5; continue;
			/* } else if (_1 === (2)) { */ case 3:
				targetDatabase = (0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0]);
				targetTable = (1 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 1]);
				$s = 5; continue;
			/* } else { */ case 4:
				_r = fmt.Sprintf("FROM expression \"%s\" can't be parsed", new sliceType([new $String(from)])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$panic(new $String(_r));
			/* } */ case 5:
		case 1:
		if (targetTable === "$table") {
			targetTable = defaultTable;
		}
		$s = -1; return [targetDatabase, targetTable];
		/* */ } return; } var $f = {$blk: parseTargets, $c: true, $r, _1, _r, _tmp, _tmp$1, defaultDatabase, defaultTable, from, parts, targetDatabase, targetTable, $s};return $f;
	};
	applyAdhocFiltersGopherJS = function(param, args) {
		var {$24r, _1, _entry, _entry$1, _entry$2, _entry$3, _i, _key, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, adhocConditions, adhocFilters, adhocFiltersJS, args, ast, combinedCondition, condition, err, escaped, escaped$1, filter, filter$1, i, jsObj, nextAst, ok, operator, param, parts, query, renderedCondition, scanner, str, target, targetDatabase, targetJS, targetTable, topQueryAst, v, v$1, v$2, value, whereAst, x, $s, $r, $c} = $restore(this, {param, args});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		jsObj = (0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]);
		query = $internalize(jsObj.query, $String);
		adhocFiltersJS = jsObj.adhocFilters;
		targetJS = jsObj.target;
		adhocFilters = $makeSlice(sliceType$1, $parseInt(adhocFiltersJS.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(adhocFiltersJS.length))) { break; }
			filter = adhocFiltersJS[i];
			AdhocFilter.copy(((i < 0 || i >= adhocFilters.$length) ? ($throwRuntimeError("index out of range"), undefined) : adhocFilters.$array[adhocFilters.$offset + i]), new AdhocFilter.ptr($internalize(filter.key, $String), $internalize(filter.operator, $String), new $String($internalize(filter.value, $String))));
			i = i + (1) >> 0;
		}
		target = new Target.ptr($internalize(targetJS.database, $String), $internalize(targetJS.table, $String));
		adhocConditions = $makeSlice(sliceType$2, 0);
		scanner = $clone(eval$1.NewScanner(query), eval$1.EvalQueryScanner);
		_r = scanner.ToAST(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ast = _tuple[0];
		err = _tuple[1];
		topQueryAst = ast;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Sprintf("Failed to parse query: %v", new sliceType([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String(_r$1) }]));
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		/* */ if (adhocFilters.$length > 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (adhocFilters.$length > 0) { */ case 6:
			while (true) {
				if (!(ast.HasOwnProperty("from") && $assertType((_entry = $mapIndex(ast.Obj,$String.keyFor("from")), _entry !== undefined ? _entry.v : $ifaceNil), ptrType).Arr === sliceType.nil)) { break; }
				_tuple$1 = $assertType((_entry$1 = $mapIndex(ast.Obj,$String.keyFor("from")), _entry$1 !== undefined ? _entry$1.v : $ifaceNil), ptrType, true);
				nextAst = _tuple$1[0];
				ok = _tuple$1[1];
				if (!ok) {
					break;
				}
				ast = nextAst;
			}
			if (!ast.HasOwnProperty("where")) {
				_key = "where"; (ast.Obj || $throwRuntimeError("assignment to entry in nil map")).set($String.keyFor(_key), { k: _key, v: new eval$1.EvalAST.ptr(new $global.Map(), $makeSlice(sliceType, 0)) });
			}
			_r$2 = parseTargets($assertType((x = $assertType((_entry$2 = $mapIndex(ast.Obj,$String.keyFor("from")), _entry$2 !== undefined ? _entry$2.v : $ifaceNil), ptrType).Arr, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), $String), target.Database, target.Table); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			targetDatabase = _tuple$2[0];
			targetTable = _tuple$2[1];
			_ref = adhocFilters;
			_i = 0;
			/* while (true) { */ case 9:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
				filter$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), AdhocFilter);
				parts = sliceType$2.nil;
				if (strings.Contains(filter$1.Key, ".")) {
					parts = strings.Split(filter$1.Key, ".");
				} else {
					parts = new sliceType$2([targetDatabase, targetTable, filter$1.Key]);
				}
				if (parts.$length === 1) {
					parts = $appendSlice(new sliceType$2([targetTable]), parts);
				}
				if (parts.$length === 2) {
					parts = $appendSlice(new sliceType$2([targetTable]), parts);
				}
				if (parts.$length < 3) {
					_i++;
					/* continue; */ $s = 9; continue;
				}
				if (!(targetDatabase === (0 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 0])) || !(targetTable === (1 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 1]))) {
					_i++;
					/* continue; */ $s = 9; continue;
				}
				operator = filter$1.Operator;
				_1 = operator;
				if (_1 === ("=~")) {
					operator = "LIKE";
				} else if (_1 === ("!~")) {
					operator = "NOT LIKE";
				}
				value = "";
				_ref$1 = filter$1.Value;
				/* */ if ($assertType(_ref$1, $Float64, true)[1]) { $s = 11; continue; }
				/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ($assertType(_ref$1, $Float64, true)[1]) { */ case 11:
					v = _ref$1.$val;
					_r$3 = fmt.Sprintf("%g", new sliceType([new $Float64(v)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					value = _r$3;
					$s = 14; continue;
				/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 12:
					v$1 = _ref$1.$val;
					_r$4 = regexp.MustCompile("^\\s*\\d+(\\.\\d+)?\\s*$"); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = _r$4.MatchString(v$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* */ if (_r$5 || strings.Contains(v$1, "'") || strings.Contains(v$1, ", ")) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (_r$5 || strings.Contains(v$1, "'") || strings.Contains(v$1, ", ")) { */ case 16:
						value = v$1;
						$s = 18; continue;
					/* } else { */ case 17:
						escaped = strings.ReplaceAll(v$1, "'", "''");
						_r$6 = fmt.Sprintf("'%s'", new sliceType([new $String(escaped)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						value = _r$6;
					/* } */ case 18:
					$s = 14; continue;
				/* } else { */ case 13:
					v$2 = _ref$1;
					_r$7 = fmt.Sprintf("%v", new sliceType([v$2])); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					str = _r$7;
					escaped$1 = strings.ReplaceAll(str, "'", "''");
					_r$8 = fmt.Sprintf("'%s'", new sliceType([new $String(escaped$1)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					value = _r$8;
				/* } */ case 14:
				_r$9 = fmt.Sprintf("%s %s %s", new sliceType([new $String((2 >= parts.$length ? ($throwRuntimeError("index out of range"), undefined) : parts.$array[parts.$offset + 2])), new $String(operator), new $String(value)])); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				condition = _r$9;
				adhocConditions = $append(adhocConditions, condition);
				_i++;
			$s = 9; continue;
			case 10:
			/* */ if (!strings.Contains(query, "$adhoc")) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (!strings.Contains(query, "$adhoc")) { */ case 25:
				whereAst = $assertType((_entry$3 = $mapIndex(ast.Obj,$String.keyFor("where")), _entry$3 !== undefined ? _entry$3.v : $ifaceNil), ptrType);
				/* */ if (adhocConditions.$length > 0) { $s = 27; continue; }
				/* */ $s = 28; continue;
				/* if (adhocConditions.$length > 0) { */ case 27:
					combinedCondition = strings.Join(adhocConditions, " AND ");
					/* */ if (whereAst.Arr.$length > 0) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (whereAst.Arr.$length > 0) { */ case 29:
						_r$10 = fmt.Sprintf("(%s)", new sliceType([new $String(combinedCondition)])); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						whereAst.Arr = $append(whereAst.Arr, new $String("AND"), new $String(_r$10));
						$s = 31; continue;
					/* } else { */ case 30:
						whereAst.Arr = $append(whereAst.Arr, new $String(combinedCondition));
					/* } */ case 31:
				/* } */ case 28:
				_r$11 = eval$1.PrintAST(topQueryAst, " "); /* */ $s = 33; case 33: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				query = _r$11;
			/* } */ case 26:
		/* } */ case 7:
		/* */ if (strings.Contains(query, "$adhoc")) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if (strings.Contains(query, "$adhoc")) { */ case 34:
			renderedCondition = "1";
			/* */ if (adhocConditions.$length > 0) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (adhocConditions.$length > 0) { */ case 36:
				_r$12 = fmt.Sprintf("(%s)", new sliceType([new $String(strings.Join(adhocConditions, " AND "))])); /* */ $s = 38; case 38: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				renderedCondition = _r$12;
			/* } */ case 37:
			query = strings.ReplaceAll(query, "$adhoc", renderedCondition);
		/* } */ case 35:
		$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "query", v: new $String(query) }]));
		/* */ } return; } var $f = {$blk: applyAdhocFiltersGopherJS, $c: true, $r, $24r, _1, _entry, _entry$1, _entry$2, _entry$3, _i, _key, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, adhocConditions, adhocFilters, adhocFiltersJS, args, ast, combinedCondition, condition, err, escaped, escaped$1, filter, filter$1, i, jsObj, nextAst, ok, operator, param, parts, query, renderedCondition, scanner, str, target, targetDatabase, targetJS, targetTable, topQueryAst, v, v$1, v$2, value, whereAst, x, $s};return $f;
	};
	findGroupByProperties = function(ast) {
		var _entry, _entry$1, _entry$2, _i, _key, _keys, _ref, _ref$1, _ref$2, _size, _tuple, _tuple$1, _tuple$2, ast, exists, exists$1, from, obj, ok, prop, properties, subAST, subProperties, subProperties$1, v, v$1, v$2, v$3;
		_tuple = (_entry = $mapIndex(ast.Obj,$String.keyFor("group by")), _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		prop = _tuple[0];
		exists = _tuple[1];
		if (exists) {
			_ref = prop;
			if ($assertType(_ref, ptrType, true)[1]) {
				v = _ref.$val;
				properties = $makeSlice(sliceType, v.Arr.$length);
				$copySlice(properties, v.Arr);
				return properties;
			} else if ($assertType(_ref, sliceType, true)[1]) {
				v$1 = _ref.$val;
				return v$1;
			} else {
				v$2 = _ref;
				return new sliceType([v$2]);
			}
		}
		_tuple$1 = (_entry$1 = $mapIndex(ast.Obj,$String.keyFor("from")), _entry$1 !== undefined ? [_entry$1.v, true] : [$ifaceNil, false]);
		from = _tuple$1[0];
		exists$1 = _tuple$1[1];
		if (exists$1) {
			_ref$1 = from;
			if ($assertType(_ref$1, ptrType, true)[1]) {
				v$3 = _ref$1.$val;
				subProperties = findGroupByProperties(v$3);
				if (subProperties.$length > 0) {
					return subProperties;
				}
			}
		}
		_ref$2 = ast.Obj;
		_i = 0;
		_keys = _ref$2 ? _ref$2.keys() : undefined;
		_size = _ref$2 ? _ref$2.size : 0;
		while (true) {
			if (!(_i < _size)) { break; }
			_key = _keys.next().value;
			_entry$2 = _ref$2.get(_key);
			if (_entry$2 === undefined) {
				_i++;
				continue;
			}
			obj = _entry$2.v;
			_tuple$2 = $assertType(obj, ptrType, true);
			subAST = _tuple$2[0];
			ok = _tuple$2[1];
			if (ok) {
				subProperties$1 = findGroupByProperties(subAST);
				if (subProperties$1.$length > 0) {
					return subProperties$1;
				}
			}
			_i++;
		}
		return new sliceType([]);
	};
	createQueryGopherJS = function(param, args) {
		var {$24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, args, ast, err, evalQ, from, jsObj, param, properties, reqData, scanner, sql, timeRange, to, $s, $r, $c} = $restore(this, {param, args});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!((args.$length === 1))) {
			$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String("Invalid number of arguments. Expected query request object") }]));
		}
		jsObj = (0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]);
		reqData = new QueryRequest.ptr($internalize(jsObj.refId, $String), $internalize(jsObj.ruleUid, $String), !!(jsObj.rawQuery), $internalize(jsObj.query, $String), $internalize(jsObj.dateTimeColDataType, $String), $internalize(jsObj.dateColDataType, $String), $internalize(jsObj.dateTimeType, $String), !!(jsObj.extrapolate), !!(jsObj.skip_comments), !!(jsObj.add_metadata), $internalize(jsObj.format, $String), $internalize(jsObj.round, $String), $parseInt(jsObj.intervalFactor) >> 0, $internalize(jsObj.interval, $String), $internalize(jsObj.database, $String), $internalize(jsObj.table, $String), (new $Int64(0, ($parseInt(jsObj.maxDataPoints) >> 0))), !!(jsObj.frontendDatasource), !!(jsObj.useWindowFuncForMacros), new structType.ptr("", ""));
		timeRange = jsObj.timeRange;
		reqData.TimeRange.From = $internalize(timeRange.from, $String);
		reqData.TimeRange.To = $internalize(timeRange.to, $String);
		_r = time.Parse("2006-01-02T15:04:05Z07:00", reqData.TimeRange.From); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		from = $clone(_tuple[0], time.Time);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String("Invalid `$from` time") }]));
		}
		_r$1 = time.Parse("2006-01-02T15:04:05Z07:00", reqData.TimeRange.To); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		to = $clone(_tuple$1[0], time.Time);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String("Invalid `$to` time") }]));
		}
		evalQ = new eval$1.EvalQuery.ptr(reqData.RefId, reqData.RuleUid, reqData.RawQuery, reqData.Query, reqData.DateTimeCol, reqData.DateCol, reqData.DateTimeType, reqData.Extrapolate, reqData.SkipComments, reqData.AddMetadata, reqData.UseWindowFuncForMacros, reqData.Format, reqData.Round, reqData.IntervalFactor, reqData.Interval, 0, 0, reqData.Database, reqData.Table, reqData.MaxDataPoints, reqData.FrontendDatasource, $clone(from, time.Time), $clone(to, time.Time));
		_r$2 = evalQ.ApplyMacrosAndTimeRangeToQuery(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		sql = _tuple$2[0];
		err = _tuple$2[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
			_r$3 = fmt.Sprintf("Failed to apply macros: %v", new sliceType([err])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$24r = new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String(_r$3) }]));
			$s = 7; case 7: return $24r;
		/* } */ case 5:
		scanner = $clone(eval$1.NewScanner(sql), eval$1.EvalQueryScanner);
		_r$4 = scanner.ToAST(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$3 = _r$4;
		ast = _tuple$3[0];
		err = _tuple$3[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
			_r$5 = fmt.Sprintf("Failed to parse query: %v", new sliceType([err])); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$24r$1 = new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String(_r$5) }]));
			$s = 12; case 12: return $24r$1;
		/* } */ case 10:
		properties = findGroupByProperties(ast);
		$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "sql", v: new $String(sql) }, { k: "keys", v: properties }]));
		/* */ } return; } var $f = {$blk: createQueryGopherJS, $c: true, $r, $24r, $24r$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, args, ast, err, evalQ, from, jsObj, param, properties, reqData, scanner, sql, timeRange, to, $s};return $f;
	};
	replaceTimeFiltersGopherJS = function(param, args) {
		var {_r, _r$1, _r$2, _tuple, _tuple$1, args, dateTimeType, err, evalQ, from, fromStr, jsObj, param, query, reqData, sql, timeRange, to, toStr, $s, $r, $c} = $restore(this, {param, args});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		jsObj = (0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]);
		reqData = new QueryRequest.ptr("", "", false, $internalize(jsObj.query, $String), "", "", $internalize(jsObj.dateTimeType, $String), false, false, false, "", "", 0, "", "", "", new $Int64(0, 0), false, false, new structType.ptr("", ""));
		timeRange = jsObj.timeRange;
		reqData.TimeRange.From = $internalize(timeRange.from, $String);
		reqData.TimeRange.To = $internalize(timeRange.to, $String);
		query = reqData.Query;
		dateTimeType = reqData.DateTimeType;
		fromStr = reqData.TimeRange.From;
		toStr = reqData.TimeRange.To;
		_r = time.Parse("2006-01-02T15:04:05Z07:00", fromStr); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		from = $clone(_tuple[0], time.Time);
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String("Invalid from time") }, { k: "data", v: new from.constructor.elem(from) }]));
		}
		_r$1 = time.Parse("2006-01-02T15:04:05Z07:00", toStr); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		to = $clone(_tuple$1[0], time.Time);
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String("Invalid to time") }, { k: "data", v: new to.constructor.elem(to) }]));
		}
		evalQ = new eval$1.EvalQuery.ptr("", "", false, query, "", "", dateTimeType, false, false, false, false, "", "", 0, "", 0, 0, "", "", new $Int64(0, 0), false, $clone(from, time.Time), $clone(to, time.Time));
		_r$2 = evalQ.ReplaceTimeFilters(evalQ.Query, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		sql = _r$2;
		$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "sql", v: new $String(sql) }]));
		/* */ } return; } var $f = {$blk: replaceTimeFiltersGopherJS, $c: true, $r, _r, _r$1, _r$2, _tuple, _tuple$1, args, dateTimeType, err, evalQ, from, fromStr, jsObj, param, query, reqData, sql, timeRange, to, toStr, $s};return $f;
	};
	getAstPropertyGopherJS = function(param, args) {
		var {$24r, _entry, _r, _r$1, _ref, _tuple, _tuple$1, args, ast, err, exists, param, prop, properties, properties$1, propertyName, query, scanner, v, v$1, v$2, v$3, $s, $r, $c} = $restore(this, {param, args});
		/* */ $s = $s || 0; s: while (true) { switch ($s) { case 0:
		if (!((args.$length === 2))) {
			$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String("Invalid number of arguments. Expected query and propertyName") }]));
		}
		query = $internalize((0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]), $String);
		propertyName = $internalize((1 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 1]), $String);
		scanner = $clone(eval$1.NewScanner(query), eval$1.EvalQueryScanner);
		_r = scanner.ToAST(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ast = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Sprintf("Failed to parse query: %v", new sliceType([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$24r = new mapType($makeMap($String.keyFor, [{ k: "error", v: new $String(_r$1) }]));
			$s = 5; case 5: return $24r;
		/* } */ case 3:
		if (propertyName === "group by") {
			properties = findGroupByProperties(ast);
			$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "properties", v: properties }]));
		}
		properties$1 = sliceType.nil;
		_tuple$1 = (_entry = $mapIndex(ast.Obj,$String.keyFor(propertyName)), _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		prop = _tuple$1[0];
		exists = _tuple$1[1];
		if (exists) {
			_ref = prop;
			if ($assertType(_ref, ptrType, true)[1]) {
				v = _ref.$val;
				properties$1 = $makeSlice(sliceType, v.Arr.$length);
				$copySlice(properties$1, v.Arr);
			} else if ($assertType(_ref, sliceType, true)[1]) {
				v$1 = _ref.$val;
				properties$1 = v$1;
			} else if ($assertType(_ref, mapType, true)[1]) {
				v$2 = _ref.$val;
				properties$1 = new sliceType([new mapType(v$2)]);
			} else {
				v$3 = _ref;
				properties$1 = new sliceType([v$3]);
			}
		}
		$s = -1; return new mapType($makeMap($String.keyFor, [{ k: "properties", v: properties$1 }]));
		/* */ } return; } var $f = {$blk: getAstPropertyGopherJS, $c: true, $r, $24r, _entry, _r, _r$1, _ref, _tuple, _tuple$1, args, ast, err, exists, param, prop, properties, properties$1, propertyName, query, scanner, v, v$1, v$2, v$3, $s};return $f;
	};
	main = function() {
		$global.applyAdhocFilters = js.MakeFunc(applyAdhocFiltersGopherJS);
		$global.createQuery = js.MakeFunc(createQueryGopherJS);
		$global.replaceTimeFilters = js.MakeFunc(replaceTimeFiltersGopherJS);
		$global.getAstProperty = js.MakeFunc(getAstPropertyGopherJS);
	};
	AdhocFilter.init("", [{prop: "Key", name: "Key", embedded: false, exported: true, typ: $String, tag: "json:\"key\""}, {prop: "Operator", name: "Operator", embedded: false, exported: true, typ: $String, tag: "json:\"operator\""}, {prop: "Value", name: "Value", embedded: false, exported: true, typ: $emptyInterface, tag: "json:\"value\""}]);
	Target.init("", [{prop: "Database", name: "Database", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Table", name: "Table", embedded: false, exported: true, typ: $String, tag: ""}]);
	QueryRequest.init("", [{prop: "RefId", name: "RefId", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "RuleUid", name: "RuleUid", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "RawQuery", name: "RawQuery", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "Query", name: "Query", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "DateTimeCol", name: "DateTimeCol", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "DateCol", name: "DateCol", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "DateTimeType", name: "DateTimeType", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Extrapolate", name: "Extrapolate", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "SkipComments", name: "SkipComments", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "AddMetadata", name: "AddMetadata", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "Format", name: "Format", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Round", name: "Round", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "IntervalFactor", name: "IntervalFactor", embedded: false, exported: true, typ: $Int, tag: ""}, {prop: "Interval", name: "Interval", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Database", name: "Database", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "Table", name: "Table", embedded: false, exported: true, typ: $String, tag: ""}, {prop: "MaxDataPoints", name: "MaxDataPoints", embedded: false, exported: true, typ: $Int64, tag: ""}, {prop: "FrontendDatasource", name: "FrontendDatasource", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "UseWindowFuncForMacros", name: "UseWindowFuncForMacros", embedded: false, exported: true, typ: $Bool, tag: ""}, {prop: "TimeRange", name: "TimeRange", embedded: false, exported: true, typ: structType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = eval$1.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = regexp.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($pkg === $mainPkg) {
			main();
			$mainFinished = true;
		}
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
$initAllLinknames();
var $mainPkg = $packages["main"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=backend_gopher.js.map
